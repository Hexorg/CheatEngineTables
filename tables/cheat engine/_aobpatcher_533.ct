<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"test"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if not syntaxcheck and not readInteger(process) then
  openProcess"explorer.exe"
end

[ENABLE]



 
 
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"alloc"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(__,$4000)

[ENABLE]

__+10:
db 'abc','12345defjjlk'

__+20:
db 'abc','12345defjjlk'
__+30:
db 'abc','12345defjjlk'
__+40:
db 'abc','12345defjjlk'
__+50:
db 'abc','12345defjjlk'

 
[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>02570000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>--

if not AobPatch then -- definition

local wild,wild1 = '??','?'
local fmt,cat,Pack,UPack = string.format,table.concat,table.pack,table.unpack
local ton,tos,floor,sPack,sUPack = tonumber,tostring,math.floor,string.pack,string.unpack
local function hx(n,sz)return fmt("%0"..(sz or 2).."X",n)end
function s2bt(iswide) return not iswide and stringToByteTable or wideStringToByteTable end
local function fnseq(...)
  local function seq(f,g,...)
    return g==nil and f or seq(function(...)return g(f(...))end,...)
  end
  return seq(...)
end
local function amap(t,...)
  local r,f={n=t.n or #t},fnseq(...)
  for i=1,r.n do r[i]=f(t[i])end
  return r
end
function s2aob(s,iswide,zterminated)
  return cat(amap(s2bt(iswide)(s),hx),' ')..(zterminated and (iswide and ' 00 00' or ' 00') or '')
end
function n2aob(n,sz,endian)
  sz,endian =sz or 4, endian == true and '&gt;' or '&lt;'
  local isinteger = assert(type(n)=='number') and type(sz)=='number' and sz&lt;=8 and sz&gt;0
  if isinteger then -- for sz is integer size
    if sz==8 then -- must be signed, or overflow for unsigned long
      return s2aob(sPack(endian..'i'..sz,n))
    else
      n = bAnd(n,bShl(1,sz*8)-1) -- chop unused bits
      return s2aob(sPack(endian..'I'..sz,n))
    end
  elseif sz=='f' or sz=='d' then
    return s2aob(sPack(endian..sz,n))
  else
    error("Unknown pack format:"..tos(sz),2)
  end
end
local function normalize(t)
  local tt = type(t)
  if tt =='number' and t&lt;256 and t&gt;=0 then
    return fmt('%02X',t)
  elseif tt=='table' then
    return cat(amap(t,normalize),' ')
  elseif type(t)=='string' then
    local b,cnt ={},0
    t:gsub("(%S+)",function(p)
      if p:len()==1 then
        b[1+#b] = p:match('%x') and '0'..p:upper() or wild
        if b[#b]~=wild then cnt=cnt+1 end
      elseif 0==p:len()%2 then
        p:gsub("(..)",function(h)
          b[1+#b] = h:upper():gsub('%X',wild1)
          if b[#b]~=wild then cnt=cnt+1 end
        end)
      else
        error("Some aob part has odd length:\n\t"..tos(aob),2)
      end
    end)
    return cat(b,' '),cnt
  else
    error("Input not byte table, byte number, or aob string:"..tos(n),2)
  end
end
function joinaob(...)return normalize(Pack(...))end
function matchAob(byteStr,...)
  local srcAob,dstAob = joinaob(...),s2aob(byteStr)
  for p1,c1,p2,c2 in dstAob:gmatch'()(%S)()(%S)' do
    local b1,b2 = srcAob:sub(p1,p1),srcAob:sub(p2,p2)
    if not (b1==c1    and b2==c2 or
            b1==wild1 and b2==wild1 or
            b1==wild1 and b2==c2 or
            b2==wild1 and b1==c1) then
      return false
    end
  end
  return true
end
function readByteString(addr,size)
  assert(type(size)=='number'and size&gt;0,"Invalid size:"..tos(size))
  return byteTableToString(readBytes(addr,size,true))
end
function matchAobAt(addr,size,...)
  return matchAob(readByteString(addr,size),...)
end

--print(joinaob({1,2,'3/'},n2aob(-3,3,true),n2aob(0x123,'d',true),'?3',{1,2,4},s2aob('hello',true)))

function AobPatch(scanOption,...)
  local aob
  if type(scanOption)~='table' then
    scanOption,aob = {},joinaob(scanOption,...)
  else
    aob = joinaob(...)
  end
  assert(type(aob)=='string','aob to scan invalid:'..tostring(aob))
  local scanResult = {}
  return function (patchOption,...)
    local dp = not bDebug and function()end or function(...)return print(...)end
    local pid = readInteger(process) and GetOpenedProcessID()
    local aob2patch
    if patchOption==nil then
      if scanResult[pid]then return scanResult[pid] end
      aob2patch = false
    end
    if pid then -- attached
      if type(patchOption)~='table' then
        patchOption,aob2patch = {},aob2patch==nil and joinaob(patchOption,...)
      else
        aob2patch = aob2patch==nil and joinaob(...)
      end
      local offset = patchOption.offset or 0
      local sizeLimit = patchOption.sizeLimit or nil
      if type(sizeLimit)=='string' then sizeLimit = sizeLimit:len() end
      if scanResult[pid] then
        for i=1,#scanResult[pid] do
          if nil==readBytes(scanResult[pid][i]) then -- need rescan if some not readable
            scanResult[pid] = nil
            break
          end
        end
      end -- scanResult
      if not scanResult[pid] then -- rescan for aob
        -- do aobscan
        dp('do aobscan, pid=',pid)
        local scanAob = AOBScan(aob,scanOption.protect or '')
        if scanAob then
          scanResult[pid] = {}
          for i=1,scanAob.Count do scanResult[pid][i]=tonumber(scanAob[i-1],16)end
          scanAob.Destroy()
        end

      end
      if scanResult[pid] then -- do Patch
        if aob2patch==false then return scanResult[pid] end
        -- check sizelimit
        assert(type(sizeLimit)~='number' or sizeLimit*3-1&gt;=aob2patch:len(),'Out of size limit:'..tostring(sizeLimit))

        dp('patching:',offset,aob2patch,sizeLimit,'&lt;&lt;',pid)
        local bsize = math.floor((aob2patch:len()+1)/3)
        for i=1,#scanResult[pid] do
          local addr = scanResult[pid][i]
          local bytes = readBytes(addr+offset,bsize,true)
          local idx = 0
          bytes = amap(bytes,function(b)
            local c1,c2 = aob2patch:sub(idx*3+1,idx*3+1),aob2patch:sub(idx*3+2,idx*3+2)
            idx = idx + 1
            if c1==wild1 and c2==wild1 then return b
            elseif c1==wild1 then return bAnd(b,0xf0)+ton(c2,16)
            elseif c2==wild1 then return bAnd(b,0x0f)+ton(c1,16)*16
            else return ton(c1..c2,16) end
          end)
          writeBytes(addr+offset,bytes)
        end
      end
    end
  end -- function
end

end -- definition


--------   test

--- show memory view
if not readInteger'__' then
  local mr = GetAddressList().getMemoryRecordByDescription'test'
  if mr then mr.Active = true end
end

if readInteger'__' then
  local mv = getMemoryViewForm()
  mv.Show()
  mv.HexadecimalView.TopAddress = GetAddress'__'
end
-------


if false then  ---(not false)-&gt; reset patcher below
  patcher = nil
end

bDebug = true -- set false for silent print

-- reuse same patcher until reset above
patcher = patcher or AobPatch(s2aob'abc','?? ?? ?? ?? ?? ??',s2aob'efjj')

--print(patcher(3,s2aob(''..math.random(0x10000,0x99999),nil,true)))
print(patcher('?? ?? ?'..math.random(1,9),s2aob(''..math.random(0x10000,0x99999),nil,true)))





</LuaScript>
</CheatTable>
