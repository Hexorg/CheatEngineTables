<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Player"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Infinite HP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(ReadHP,8B 86 2C 03 00 00 8B 95) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[esi+0000032C]
  mov [esi+0000032C],(Int)999 //Overwrite current HP with 999
  jmp return

ReadHP:
  jmp code
  nop
return:
registersymbol(ReadHP)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ReadHP:
  db 8B 86 2C 03 00 00

unregistersymbol(ReadHP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2E04D232

2E04D200: 66 0F D6 07           -  movq [edi],xmm0
2E04D204: A1 00 42 45 05        -  mov eax,[05454200]
2E04D209: 89 85 68 FE FF FF     -  mov [ebp-00000198],eax
2E04D20F: A1 38 47 45 05        -  mov eax,[05454738]
2E04D214: 89 85 64 FE FF FF     -  mov [ebp-0000019C],eax
2E04D21A: A1 20 49 45 05        -  mov eax,[05454920]
2E04D21F: 8B 15 DC 67 82 01     -  mov edx,[018267DC]
2E04D225: 3B 50 04              -  cmp edx,[eax+04]
2E04D228: 0F 83 E5 0F 00 00     -  jae 2E04E213
2E04D22E: 8B 74 90 0C           -  mov esi,[eax+edx*4+0C]
// ---------- INJECTING HERE ----------
2E04D232: 8B 86 2C 03 00 00     -  mov eax,[esi+0000032C]
// ---------- DONE INJECTING  ----------
2E04D238: 8B 95 84 FE FF FF     -  mov edx,[ebp-0000017C]
2E04D23E: 89 42 04              -  mov [edx+04],eax
2E04D241: 8B 8D 84 FE FF FF     -  mov ecx,[ebp-0000017C]
2E04D247: 8B 86 28 03 00 00     -  mov eax,[esi+00000328]
2E04D24D: 89 43 04              -  mov [ebx+04],eax
2E04D250: 53                    -  push ebx
2E04D251: 8B 15 9C 01 60 05     -  mov edx,[0560019C]
2E04D257: E8 64 82 32 2B        -  call mscorlib.ni.dll+2E54C0
2E04D25C: 8B D8                 -  mov ebx,eax
2E04D25E: D9 85 8C FE FF FF     -  fld dword ptr [ebp-00000174]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Infinite MP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(ReadMana,8B 96 30 03 00 00 8B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov edx,[esi+00000330]
  mov [esi+00000330],(Int)999 //Overwrite current mana with 999
  jmp return

ReadMana:
  jmp code
  nop
return:
registersymbol(ReadMana)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ReadMana:
  db 8B 96 30 03 00 00

unregistersymbol(ReadMana)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2E04DBD9

2E04DBBB: 6A 00                    -  push 00
2E04DBBD: 8B CB                    -  mov ecx,ebx
2E04DBBF: 8B D6                    -  mov edx,esi
2E04DBC1: 39 09                    -  cmp [ecx],ecx
2E04DBC3: E8 A0 34 70 E9           -  call 17751068
2E04DBC8: BB 01 00 00 00           -  mov ebx,00000001
2E04DBCD: E9 C4 03 00 00           -  jmp 2E04DF96
2E04DBD2: 33 C9                    -  xor ecx,ecx
2E04DBD4: D9 E8                    -  fld1 
2E04DBD6: D9 5D D0                 -  fstp dword ptr [ebp-30]
// ---------- INJECTING HERE ----------
2E04DBD9: 8B 96 30 03 00 00        -  mov edx,[esi+00000330]
// ---------- DONE INJECTING  ----------
2E04DBDF: 8B C3                    -  mov eax,ebx
2E04DBE1: 0F AF 05 F4 68 82 01     -  imul eax,[018268F4]
2E04DBE8: 3B D0                    -  cmp edx,eax
2E04DBEA: 7C 17                    -  jl 2E04DC03
2E04DBEC: BE FF 00 00 00           -  mov esi,000000FF
2E04DBF1: 3B D0                    -  cmp edx,eax
2E04DBF3: 0F 85 AC 00 00 00        -  jne 2E04DCA5
2E04DBF9: B9 01 00 00 00           -  mov ecx,00000001
2E04DBFE: E9 A2 00 00 00           -  jmp 2E04DCA5
2E04DC03: 8D 43 FF                 -  lea eax,[ebx-01]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Infinite Ammo"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(ExplosiveAmmo,FF 88 80 00 00 00 8B 45 EC) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //dec [eax+00000080]
  jmp return

ExplosiveAmmo:
  jmp code
  nop
return:
registersymbol(ExplosiveAmmo)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ExplosiveAmmo:
  db FF 88 80 00 00 00

unregistersymbol(ExplosiveAmmo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 30DF2E8C

30DF2E6D: 83 C2 FB              -  add edx,-05
30DF2E70: 3B C2                 -  cmp eax,edx
30DF2E72: 7D 05                 -  jnl 30DF2E79
30DF2E74: BB 01 00 00 00        -  mov ebx,00000001
30DF2E79: 85 DB                 -  test ebx,ebx
30DF2E7B: 75 41                 -  jne 30DF2EBE
30DF2E7D: 8B 45 EC              -  mov eax,[ebp-14]
30DF2E80: 80 B8 2D 01 00 00 00  -  cmp byte ptr [eax+0000012D],00
30DF2E87: 74 35                 -  je 30DF2EBE
30DF2E89: 8B 45 EC              -  mov eax,[ebp-14]
// ---------- INJECTING HERE ----------
30DF2E8C: FF 88 80 00 00 00     -  dec [eax+00000080]
// ---------- DONE INJECTING  ----------
30DF2E92: 8B 45 EC              -  mov eax,[ebp-14]
30DF2E95: 83 B8 80 00 00 00 00  -  cmp dword ptr [eax+00000080],00
30DF2E9C: 7F 20                 -  jg 30DF2EBE
30DF2E9E: 8B 45 EC              -  mov eax,[ebp-14]
30DF2EA1: C6 40 1C 00           -  mov byte ptr [eax+1C],00
30DF2EA5: 8B 05 84 21 45 05     -  mov eax,[05452184]
30DF2EAB: 8B 55 EC              -  mov edx,[ebp-14]
30DF2EAE: 8D 52 04              -  lea edx,[edx+04]
30DF2EB1: E8 7A ED DC 38        -  call clr.dll+1C30
30DF2EB6: 8B 45 EC              -  mov eax,[ebp-14]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"No Potion Sickness"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(PotionSicknessTest,89 83 E0 02 00 00 E9) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+000002E0],(Int)0
  jmp return

PotionSicknessTest:
  jmp code
  nop
return:
registersymbol(PotionSicknessTest)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
PotionSicknessTest:
  db 89 83 E0 02 00 00

unregistersymbol(PotionSicknessTest)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2B8EA7C3

2B8EA79A: 75 0C                 -  jne 2B8EA7A8
2B8EA79C: C6 83 9F 05 00 00 01  -  mov byte ptr [ebx+0000059F],01
2B8EA7A3: E9 93 04 00 00        -  jmp 2B8EAC3B
2B8EA7A8: 83 F9 15              -  cmp ecx,15
2B8EA7AB: 75 21                 -  jne 2B8EA7CE
2B8EA7AD: 8B 45 EC              -  mov eax,[ebp-14]
2B8EA7B0: 8B 93 B0 00 00 00     -  mov edx,[ebx+000000B0]
2B8EA7B6: 3B 42 04              -  cmp eax,[edx+04]
2B8EA7B9: 0F 83 91 04 00 00     -  jae 2B8EAC50
2B8EA7BF: 8B 44 82 08           -  mov eax,[edx+eax*4+08]
// ---------- INJECTING HERE ----------
2B8EA7C3: 89 83 E0 02 00 00     -  mov [ebx+000002E0],eax
// ---------- DONE INJECTING  ----------
2B8EA7C9: E9 6D 04 00 00        -  jmp 2B8EAC3B
2B8EA7CE: 83 F9 16              -  cmp ecx,16
2B8EA7D1: 75 0C                 -  jne 2B8EA7DF
2B8EA7D3: C6 83 A1 05 00 00 01  -  mov byte ptr [ebx+000005A1],01
2B8EA7DA: E9 5C 04 00 00        -  jmp 2B8EAC3B
2B8EA7DF: 83 F9 50              -  cmp ecx,50
2B8EA7E2: 75 0C                 -  jne 2B8EA7F0
2B8EA7E4: C6 83 A2 05 00 00 01  -  mov byte ptr [ebx+000005A2],01
2B8EA7EB: E9 4B 04 00 00        -  jmp 2B8EAC3B
2B8EA7F0: 83 F9 17              -  cmp ecx,17
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"Unlimited Air"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(AirValue,FF 88 A4 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //dec [eax+000002A4]
  jmp return

AirValue:
  jmp code
  nop
return:
registersymbol(AirValue)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
AirValue:
  db FF 88 A4 02 00 00

unregistersymbol(AirValue)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 174DED52

174DED29: 8B 45 DC              -  mov eax,[ebp-24]
174DED2C: 80 B8 E8 05 00 00 00  -  cmp byte ptr [eax+000005E8],00
174DED33: 74 03                 -  je 174DED38
174DED35: C1 E1 02              -  shl ecx,02
174DED38: 8B 45 DC              -  mov eax,[ebp-24]
174DED3B: 39 88 9C 02 00 00     -  cmp [eax+0000029C],ecx
174DED41: 0F 8C C2 00 00 00     -  jl 174DEE09
174DED47: 8B 45 DC              -  mov eax,[ebp-24]
174DED4A: 33 D2                 -  xor edx,edx
174DED4C: 89 90 9C 02 00 00     -  mov [eax+0000029C],edx
// ---------- INJECTING HERE ----------
174DED52: FF 88 A4 02 00 00     -  dec [eax+000002A4]
// ---------- DONE INJECTING  ----------
174DED58: 83 B8 A4 02 00 00 00  -  cmp dword ptr [eax+000002A4],00
174DED5F: 75 11                 -  jne 174DED72
174DED61: 6A FF                 -  push -01
174DED63: 6A 01                 -  push 01
174DED65: B9 17 00 00 00        -  mov ecx,00000017
174DED6A: 8D 51 E8              -  lea edx,[ecx-18]
174DED6D: E8 DE 12 94 01        -  call 18E20050
174DED72: 8B 45 DC              -  mov eax,[ebp-24]
174DED75: 83 B8 A4 02 00 00 00  -  cmp dword ptr [eax+000002A4],00
174DED7C: 0F 8F 87 00 00 00     -  jg 174DEE09
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Unlimited Wing Use"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(WingTimer,D9 99 10 02 00 00 5D C3 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fstp dword ptr [ecx+00000210]
  mov [ecx+00000210],(Float)160
  jmp return

WingTimer:
  jmp code
  nop
return:
registersymbol(WingTimer)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
WingTimer:
  db D9 99 10 02 00 00

unregistersymbol(WingTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 11BAB12B

11BAB104: 75 1D                 -  jne 11BAB123
11BAB106: 80 B9 38 05 00 00 00  -  cmp byte ptr [ecx+00000538],00
11BAB10D: 75 14                 -  jne 11BAB123
11BAB10F: D9 05 D4 B1 BA 11     -  fld dword ptr [11BAB1D4]
11BAB115: D8 A9 10 02 00 00     -  fsubr dword ptr [ecx+00000210]
11BAB11B: D9 99 10 02 00 00     -  fstp dword ptr [ecx+00000210]
11BAB121: 5D                    -  pop ebp
11BAB122: C3                    -  ret 
11BAB123: D9 E8                 -  fld1 
11BAB125: D8 A9 10 02 00 00     -  fsubr dword ptr [ecx+00000210]
// ---------- INJECTING HERE ----------
11BAB12B: D9 99 10 02 00 00     -  fstp dword ptr [ecx+00000210]
// ---------- DONE INJECTING  ----------
11BAB131: 5D                    -  pop ebp
11BAB132: C3                    -  ret 
11BAB133: 00 00                 -  add [eax],al
11BAB135: 00 00                 -  add [eax],al
11BAB137: 00 CD                 -  add ch,cl
11BAB139: CC                    -  int 3 
11BAB13A: 4C                    -  dec esp
11BAB13B: 3E CD CC              -  int -34
11BAB13E: 4C                    -  dec esp
11BAB13F: 3E 00 00              -  add [eax],al
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Unlimited Rocket Boots Fuel"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(RocketBootsFuel,FF 88 0C 04 00 00 8B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //dec [eax+0000040C]
  jmp return

RocketBootsFuel:
  jmp code
  nop
return:
registersymbol(RocketBootsFuel)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
RocketBootsFuel:
  db FF 88 0C 04 00 00

unregistersymbol(RocketBootsFuel)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 11F2CD30

11F2CCF1: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CCF7: 80 B8 FF 05 00 00 00           -  cmp byte ptr [eax+000005FF],00
11F2CCFE: 0F 84 54 01 00 00              -  je 11F2CE58
11F2CD04: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD0A: 80 B8 EB 05 00 00 00           -  cmp byte ptr [eax+000005EB],00
11F2CD11: 0F 85 41 01 00 00              -  jne 11F2CE58
11F2CD17: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD1D: 83 B8 0C 04 00 00 00           -  cmp dword ptr [eax+0000040C],00
11F2CD24: 0F 8E 21 01 00 00              -  jng 11F2CE4B
11F2CD2A: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
// ---------- INJECTING HERE ----------
11F2CD30: FF 88 0C 04 00 00              -  dec [eax+0000040C]
// ---------- DONE INJECTING  ----------
11F2CD36: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD3C: C7 80 14 04 00 00 0A 00 00 00  -  mov [eax+00000414],0000000A
11F2CD46: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD4C: 83 B8 18 04 00 00 00           -  cmp dword ptr [eax+00000418],00
11F2CD53: 0F 8F FF 00 00 00              -  jg 11F2CE58
11F2CD59: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD5F: 83 B8 1C 04 00 00 01           -  cmp dword ptr [eax+0000041C],01
11F2CD66: 75 64                          -  jne 11F2CDCC
11F2CD68: 8B 85 8C F2 FF FF              -  mov eax,[ebp-00000D74]
11F2CD6E: D9 40 24                       -  fld dword ptr [eax+24]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Change Armor Value (Edit Scipt before activating)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(ArmorValue,01 82 20 03 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [edx+00000320],eax
  mov [edx+00000320],(Int)00 //Change 00 to what you want your armor to be
  jmp return

ArmorValue:
  jmp code
  nop
return:
registersymbol(ArmorValue)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ArmorValue:
  db 01 82 20 03 00 00

unregistersymbol(ArmorValue)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2D440F9B

2D440F6B: 83 C9 FF              -  or ecx,-01
2D440F6E: E8 3D E2 9A E8        -  call 15DEF1B0
2D440F73: 8B 45 EC              -  mov eax,[ebp-14]
2D440F76: 8B 95 44 FF FF FF     -  mov edx,[ebp-000000BC]
2D440F7C: 8B 92 98 00 00 00     -  mov edx,[edx+00000098]
2D440F82: 3B 42 04              -  cmp eax,[edx+04]
2D440F85: 0F 83 55 4C 00 00     -  jae 2D445BE0
2D440F8B: 8B 4C 82 0C           -  mov ecx,[edx+eax*4+0C]
2D440F8F: 8B 81 C0 00 00 00     -  mov eax,[ecx+000000C0]
2D440F95: 8B 95 44 FF FF FF     -  mov edx,[ebp-000000BC]
// ---------- INJECTING HERE ----------
2D440F9B: 01 82 20 03 00 00     -  add [edx+00000320],eax
// ---------- DONE INJECTING  ----------
2D440FA1: 8B 81 EC 00 00 00     -  mov eax,[ecx+000000EC]
2D440FA7: 8B 95 44 FF FF FF     -  mov edx,[ebp-000000BC]
2D440FAD: 01 82 3C 03 00 00     -  add [edx+0000033C],eax
2D440FB3: 8B 41 6C              -  mov eax,[ecx+6C]
2D440FB6: 3D 0C 01 00 00        -  cmp eax,0000010C
2D440FBB: 75 0D                 -  jne 2D440FCA
2D440FBD: 8B 85 44 FF FF FF     -  mov eax,[ebp-000000BC]
2D440FC3: C6 80 E8 05 00 00 01  -  mov byte ptr [eax+000005E8],01
2D440FCA: 8B 41 6C              -  mov eax,[ecx+6C]
2D440FCD: 3D EE 00 00 00        -  cmp eax,000000EE
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Items"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Infinite Splitting"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(UnlimitedSplit,FF 88 80 00 00 00 8B 45 08 8B 74) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //dec [eax+00000080]
  jmp return

UnlimitedSplit:
  jmp code
  nop
return:
registersymbol(UnlimitedSplit)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
UnlimitedSplit:
  db FF 88 80 00 00 00

unregistersymbol(UnlimitedSplit)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 167AF11A

167AF0EC: A1 08 49 67 05                 -  mov eax,[05674908]
167AF0F1: C6 80 29 01 00 00 01           -  mov byte ptr [eax+00000129],01
167AF0F8: EB 0C                          -  jmp 167AF106
167AF0FA: A1 08 49 67 05                 -  mov eax,[05674908]
167AF0FF: C6 80 29 01 00 00 00           -  mov byte ptr [eax+00000129],00
167AF106: A1 08 49 67 05                 -  mov eax,[05674908]
167AF10B: FF 80 80 00 00 00              -  inc [eax+00000080]
167AF111: 8B 45 08                       -  mov eax,[ebp+08]
167AF114: 8B 74 87 0C                    -  mov esi,[edi+eax*4+0C]
167AF118: 8B C6                          -  mov eax,esi
// ---------- INJECTING HERE ----------
167AF11A: FF 88 80 00 00 00              -  dec [eax+00000080]
// ---------- DONE INJECTING  ----------
167AF120: 8B 45 08                       -  mov eax,[ebp+08]
167AF123: 8B 74 87 0C                    -  mov esi,[edi+eax*4+0C]
167AF127: 83 BE 80 00 00 00 00           -  cmp dword ptr [esi+00000080],00
167AF12E: 7F 1E                          -  jg 167AF14E
167AF130: B9 60 A1 D1 06                 -  mov ecx,06D1A160
167AF135: E8 9A 2F 14 EB                 -  call 018F20D4
167AF13A: 8B F0                          -  mov esi,eax
167AF13C: 8B CE                          -  mov ecx,esi
167AF13E: E8 95 40 CD ED                 -  call 044831D8
167AF143: 56                             -  push esi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Unlimited item use"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2016-05-26
  Author : Leo

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(UnlimitedUse,FF 88 80 00 00 00 8B 85 58 E6 FF FF 83 B8 80 00 00 00 00 7F 1F) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //dec [eax+00000080]
  jmp return

UnlimitedUse:
  jmp code
  nop
return:
registersymbol(UnlimitedUse)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
UnlimitedUse:
  db FF 88 80 00 00 00

unregistersymbol(UnlimitedUse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2EFB1194

2EFB1164: 7F 10                 -  jg 2EFB1176
2EFB1166: B8 01 00 00 00        -  mov eax,00000001
2EFB116B: 25 FF 00 00 00        -  and eax,000000FF
2EFB1170: 89 85 DC F6 FF FF     -  mov [ebp-00000924],eax
2EFB1176: 83 BD DC F6 FF FF 00  -  cmp dword ptr [ebp-00000924],00
2EFB117D: 74 49                 -  je 2EFB11C8
2EFB117F: 8B 85 58 E6 FF FF     -  mov eax,[ebp-000019A8]
2EFB1185: 83 B8 80 00 00 00 00  -  cmp dword ptr [eax+00000080],00
2EFB118C: 7E 0C                 -  jle 2EFB119A
2EFB118E: 8B 85 58 E6 FF FF     -  mov eax,[ebp-000019A8]
// ---------- INJECTING HERE ----------
2EFB1194: FF 88 80 00 00 00     -  dec [eax+00000080]
// ---------- DONE INJECTING  ----------
2EFB119A: 8B 85 58 E6 FF FF     -  mov eax,[ebp-000019A8]
2EFB11A0: 83 B8 80 00 00 00 00  -  cmp dword ptr [eax+00000080],00
2EFB11A7: 7F 1F                 -  jg 2EFB11C8
2EFB11A9: 8B 85 5C E6 FF FF     -  mov eax,[ebp-000019A4]
2EFB11AF: 8B 80 74 02 00 00     -  mov eax,[eax+00000274]
2EFB11B5: 8B 95 5C E6 FF FF     -  mov edx,[ebp-000019A4]
2EFB11BB: 89 82 7C 02 00 00     -  mov [edx+0000027C],eax
2EFB11C1: C6 05 F7 69 90 01 01  -  mov byte ptr [019069F7],01
2EFB11C8: 8B 85 58 E6 FF FF     -  mov eax,[ebp-000019A8]
2EFB11CE: 83 B8 80 00 00 00 00  -  cmp dword ptr [eax+00000080],00
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of sub [edx+0000032C],eax</Description>
      <Address>2E9C5E0B</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>95</Byte>
        <Byte>4C</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>82</Byte>
        <Byte>2C</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>7D</Byte>
        <Byte>08</Byte>
        <Byte>FF</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp dword ptr [eax+000002E0],00</Description>
      <Address>2D7E0AEF</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>8C</Byte>
        <Byte>F2</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>E0</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>7E</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>8C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of cmp dword ptr [eax+000002E0],00</Description>
      <Address>2D971A22</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>5C</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>E0</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
        <Byte>81</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of dec [eax+00000080]</Description>
      <Address>167AF11A</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>74</Byte>
        <Byte>87</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>C6</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>88</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>74</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of dec [eax+00000080]</Description>
      <Address>2EFB1194</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>58</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>88</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>58</Byte>
        <Byte>E6</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>PotionSicknessIcon</Name>
      <Address>2E04E4FA</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
