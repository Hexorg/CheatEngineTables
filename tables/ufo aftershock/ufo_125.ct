<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>157</ID>
      <Description>"UFO Aftershock AOB script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobBasePointerGrabber,8B 50 34 8B 7A 5C 85 FF 74 2E)
aobscan(aobHealthUpdater,DB 46 14 8B 46 40 8B 0E)
aobscan(aobHealthUpdater2,DB 44 24 1C 8B 57 0C 8D 04 32)
aobscan(aobAmmoUpdater,2B D0 89 51 14 C2 04 00)
aobscan(aobXPGainMultiplier,8B 91 28 01 00 00 8B 44 24 04)
aobscan(aobStoreItemTaker,2B D0 89 91 E0 01 00 00)
aobscan(aobCameraLimiter,C2 04 00 CC CC CC CC CC CC CC CC D9 81 E4 02 00 00 32 D2)
aobscan(aobCameraDelimiter,D9 81 04 03 00 00 D8 99 54 02 00 00 DF E0 F6 C4 41 75 0C)
aobscan(aobLevelupUpdater,89 86 34 01 00 00 33 DB)
aobscan(aobTrainingUpdater,8B 46 18 8B 54 24 08 8B 4E 08)
aobscan(aobTrainingRequirementBypass,8B 8E 98 03 00 00 8B 11 FF 92 A8 00 00 00 8B CF)
aobscan(aobWorkforceUpdate,8B 41 08 8B 51 10 03 D0 8B C2)
aobscan(aobHumanResourceReader,8B 40 04 50 8D 4C 24 70)

alloc(newmem,4096)

label(aobBasePointerGrabber_r)
registersymbol(aobBasePointerGrabber_r)

label(lblBasePointerGrabber)
label(lblBasePointerGrabberRet)

label(pBase)
registersymbol(pBase)

label(aobHealthUpdater_r)
label(aobHealthUpdater2_r)
registersymbol(aobHealthUpdater_r)
registersymbol(aobHealthUpdater2_r)

label(lblHealthUpdater)
label(lblHealthUpdaterFriendly)
label(lblHealthUpdaterSkipOneHitKill)
label(lblHealthUpdaterSkipOneHitKnockout)
label(lblHealthUpdaterDone)
label(lblHealthUpdaterRet)

label(lblHealthUpdater2)
label(lblHealthUpdater2Friendly)
label(lblHealthUpdater2Done)
label(lblHealthUpdater2Ret)

label(bEnableGodMode)
label(bEnableOneHitKill)
label(bEnableOneHitKnockout)
registersymbol(bEnableGodMode)
registersymbol(bEnableOneHitKill)
registersymbol(bEnableOneHitKnockout)

label(aobAmmoUpdater_r)
registersymbol(aobAmmoUpdater_r)

label(lblAmmoUpdater)
label(lblAmmoUpdaterLoop)
label(lblAmmoUpdaterUpdate)
label(lblAmmoUpdaterSkip)
label(lblAmmoUpdaterRet)

label(lblGetWeaponsHeld)
label(lblGetWeaponsHeldLoop)
label(lblGetWeaponsHeldSkipLeft)
label(lblGetWeaponsHeldSkipRight)
label(lblGetWeaponsHeldSkip)

label(bEnableInfiniteAmmo)
registersymbol(bEnableInfiniteAmmo)

label(pWeaponHeldLeft)
label(pWeaponHeldRight)
label(pLeftHand)
label(pRightHand)
registersymbol(pWeaponHeldLeft)
registersymbol(pWeaponHeldRight)
registersymbol(pLeftHand)
registersymbol(pRightHand)

label(aobXPGainMultiplier_r)
registersymbol(aobXPGainMultiplier_r)

label(lblXPGainMultiplier)
label(lblXPGainMultiplierSkip)
label(lblXPGainMultiplierRet)

label(bEnableXPGainMultiplier)
label(fXPGainMultiplier)
registersymbol(bEnableXPGainMultiplier)
registersymbol(fXPGainMultiplier)

label(aobStoreItemTaker_r)
registersymbol(aobStoreItemTaker_r)

label(lblStoreItemTaker)
label(lblStoreItemTakerSkip)
label(lblStoreItemTakerRet)

label(bEnableInfiniteItems)
registersymbol(bEnableInfiniteItems)

label(aobCameraLimiter_r)
label(aobCameraDelimiter_p)
registersymbol(aobCameraLimiter_r)
registersymbol(aobCameraDelimiter_p)

label(lblCameraLimiter)
label(lblCameraLimiterSkipZoomLow)
label(lblCameraLimiterSkipZoomHigh)
label(lblCameraLimiterSkipAngleLow)
label(lblCameraLimiterSkipAngleHigh)
label(lblCameraLimiterSkip)
label(lblCameraLimiterRet)

label(bEnableCameraDelimiter)
label(fMinCamZoom)
label(fMaxCamZoom)
label(fMinCamAngle)
label(fMaxCamAngle)
registersymbol(bEnableCameraDelimiter)
registersymbol(fMinCamZoom)
registersymbol(fMaxCamZoom)
registersymbol(fMinCamAngle)
registersymbol(fMaxCamAngle)

label(aobLevelupUpdater_r)
registersymbol(aobLevelupUpdater_r)

label(lblLevelupUpdater)
label(lblLevelupUpdaterSkip)
label(lblLevelupUpdaterRet)

label(bEnableInfiniteLevelups)
registersymbol(bEnableInfiniteLevelups)

label(aobTrainingUpdater_r)
registersymbol(aobTrainingUpdater_r)

label(lblTrainingUpdater)
label(lblTrainingUpdaterSkip)
label(lblTrainingUpdaterRet)

label(bEnableQuickTraining)
registersymbol(bEnableQuickTraining)

label(aobTrainingRequirementBypass_r)
registersymbol(aobTrainingRequirementBypass_r)

label(lblTrainingRequirementBypass)
label(lblTrainingRequirementBypassSkip)
label(lblTrainingRequirementBypassRet)

label(bEnableTrainingRequirementBypass)
registersymbol(bEnableTrainingRequirementBypass)

label(aobWorkforceUpdate_r)
registersymbol(aobWorkforceUpdate_r)

label(lblWorkforceUpdate)
label(lblWorkforceUpdateSkipMassive)
label(lblWorkforceUpdateSkip)
label(lblWorkforceUpdateRet)

label(bEnableWorkforceScale)
label(fWorkforceScale)
label(bEnableMassiveWorkforce)
registersymbol(bEnableWorkforceScale)
registersymbol(fWorkforceScale)
registersymbol(bEnableMassiveWorkforce)

label(pTemp)
registersymbol(pTemp)

label(aobHumanResourceReader_r)
registersymbol(aobHumanResourceReader_r)

label(lblHumanResourceReader)
label(lblHumanResourceReaderSkipHuman)
label(lblHumanResourceReaderSkipCyborg)
label(lblHumanResourceReaderSkipPsionic)
label(lblHumanResourceReaderSkip)
label(lblHumanResourceReaderRet)

label(bEnableMinimumResources)
label(iMinimumResources)
registersymbol(bEnableMinimumResources)
registersymbol(iMinimumResources)

newmem:
bEnableGodMode:
dd 1
bEnableOneHitKill:
dd 0
bEnableOneHitKnockout:
dd 0
bEnableInfiniteAmmo:
dd 1
bEnableXPGainMultiplier:
dd 1
fXPGainMultiplier:
dd (float)1.75
bEnableInfiniteItems:
dd 0
bEnableCameraDelimiter:
dd 1
fMinCamZoom:
dd (float)450.0
fMaxCamZoom:
dd (float)9000.0
fMinCamAngle:
dd (float)-89.0
fMaxCamAngle:
dd (float)-1.0
bEnableInfiniteLevelups:
dd 0
bEnableQuickTraining:
dd 1
bEnableTrainingRequirementBypass:
dd 0
bEnableWorkforceScale:
dd 1
fWorkforceScale:
dd (float)2.5
bEnableMassiveWorkforce:
dd 0
bEnableMinimumResources:
dd 1
iMinimumResources:
dd (int)12345

lblBasePointerGrabber:
mov edx,[eax+34] // Original code
mov edi,[edx+5C] // Original code
mov dword ptr [pBase],eax
jmp lblBasePointerGrabberRet
pBase:
dd 0

lblHealthUpdater:
push edx
cmp dword ptr [bEnableGodMode],1
jne lblHealthUpdaterDone
mov eax,[pBase]
test eax,eax
jz lblHealthUpdaterDone
mov eax,[eax+50]
test eax,eax
jz lblHealthUpdaterDone
mov eax,[eax+214]
test eax,eax
jz lblHealthUpdaterDone
mov ecx,[esi]
mov ecx,[ecx+A0]
cmp dword ptr [eax],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+4],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+8],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+c],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+10],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+14],ecx
je lblHealthUpdaterFriendly
cmp dword ptr [eax+18],ecx
je lblHealthUpdaterFriendly
mov ecx,[ecx+28]
test ecx,ecx
jz lblHealthUpdaterDone
mov ecx,[ecx+18]
test ecx,ecx
jz lblHealthUpdaterDone
cmp dword ptr [bEnableOneHitKill],1
jne short lblHealthUpdaterSkipOneHitKill
fild dword ptr [ecx]
fst dword ptr [esi+28]
fstp dword ptr [esi+34]
jmp short lblHealthUpdaterDone
lblHealthUpdaterSkipOneHitKill:
cmp dword ptr [bEnableOneHitKnockout],1
jne short lblHealthUpdaterSkipOneHitKnockout
fild dword ptr [ecx]
fist dword ptr [ecx+0c]
fstp dword ptr [esi+2c]
lblHealthUpdaterSkipOneHitKnockout:
jmp short lblHealthUpdaterDone
lblHealthUpdaterFriendly:
mov dword ptr [esi+14],0
lblHealthUpdaterDone:
pop edx
fild dword ptr [esi+14] // Original code
mov eax,[esi+40]        // Original code
jmp lblHealthUpdaterRet

lblHealthUpdater2:
mov edx,[esp+14]
cmp dword ptr [bEnableGodMode],1
jne short lblHealthUpdater2Done
mov eax,[pBase]
test eax,eax
jz short lblHealthUpdater2Done
mov eax,[eax+50]
test eax,eax
jz short lblHealthUpdater2Done
mov eax,[eax+214]
test eax,eax
jz short lblHealthUpdater2Done
mov edx,[edx+A0]
cmp dword ptr [eax],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+4],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+8],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+c],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+10],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+14],edx
je short lblHealthUpdater2Friendly
cmp dword ptr [eax+18],edx
je short lblHealthUpdater2Friendly
jmp short lblHealthUpdater2Done
lblHealthUpdater2Friendly:
xor eax,eax
mov dword ptr [esp+1C],eax
mov edx,[edx+28]
mov edx,[edx+18]
mov dword ptr [edx+04],eax
mov dword ptr [edx+08],eax
mov dword ptr [edx+0C],eax
mov eax,[edx]
mov dword ptr [edx+10],eax
lblHealthUpdater2Done:
fild dword ptr [esp+1C] // Original code
mov edx,[edi+0C]        // Original code
jmp lblHealthUpdater2Ret

lblAmmoUpdater:
sub edx,eax      // Original code
push ecx
push esi
cmp dword ptr [bEnableInfiniteAmmo],1
jne lblAmmoUpdaterSkip
mov esi,7
lblAmmoUpdaterLoop:
  push esi
  call lblGetWeaponsHeld
  add esp,4
  cmp dword ptr [pWeaponHeldLeft],ebx
  je short lblAmmoUpdaterUpdate
  cmp dword ptr [pWeaponHeldRight],ebx
  je short lblAmmoUpdaterUpdate
  dec esi
jnz short lblAmmoUpdaterLoop
jmp short lblAmmoUpdaterSkip
lblAmmoUpdaterUpdate:
mov ecx,[ebx+ac]
test ecx,ecx
jz short lblAmmoUpdaterSkip
mov ecx,[ecx+6c]
test ecx,ecx
jz short lblAmmoUpdaterSkip
mov ecx,[ecx+1f0]
test ecx,ecx
jz short lblAmmoUpdaterSkip
mov edx,[ecx+1c]
lblAmmoUpdaterSkip:
pop esi
pop ecx
mov [ecx+14],edx // Original code
jmp lblAmmoUpdaterRet

lblGetWeaponsHeld:
mov dword ptr [pWeaponHeldLeft],0
mov dword ptr [pWeaponHeldRight],0
pushad
mov ebx,[esp+24]
dec ebx
mov eax,[pBase]
test eax,eax
jz short lblGetWeaponsHeldSkip
mov eax,[eax+50]
test eax,eax
jz short lblGetWeaponsHeldSkip
mov eax,[eax+214]
test eax,eax
jz short lblGetWeaponsHeldSkip
mov eax,[eax+ebx*4]
test eax,eax
jz short lblGetWeaponsHeldSkip
mov eax,[eax+24]
test eax,eax
jz short lblGetWeaponsHeldSkip
mov esi,[eax+38]
test esi,esi
jz short lblGetWeaponsHeldSkip
mov edi,[eax+3c]
cmp esi,edi
jge short lblGetWeaponsHeldSkip
mov eax,esi
add eax,2c
lblGetWeaponsHeldLoop:
  mov ecx,[eax+1c]
  test ecx,ecx
  jz short lblGetWeaponsHeldSkipRight
  mov edx,[eax]
  test edx,edx
  jz short lblGetWeaponsHeldSkip
  mov edx,[edx]
  cmp dword ptr [pLeftHand],edx
  jne short lblGetWeaponsHeldSkipLeft
  mov ecx,[ecx+0c]
  mov dword ptr [pWeaponHeldLeft],ecx
  jmp lblGetWeaponsHeldSkip
  lblGetWeaponsHeldSkipLeft:
  cmp dword ptr [pRightHand],edx
  jne short lblGetWeaponsHeldSkipRight
  mov ecx,[ecx+0c]
  mov dword ptr [pWeaponHeldRight],ecx
  jmp lblGetWeaponsHeldSkip
  lblGetWeaponsHeldSkipRight:
  add eax,6c
  cmp eax,edi
jl short lblGetWeaponsHeldLoop
lblGetWeaponsHeldSkip:
popad
ret
pWeaponHeldLeft:
dd 0
pWeaponHeldRight:
dd 0
pLeftHand:
db 'LeftHand' 00
pRightHand:
db 'RightHand' 00

lblXPGainMultiplier:
cmp dword ptr [bEnableXPGainMultiplier],1
jne short lblXPGainMultiplierSkip
fild dword ptr [esp+4]
fmul dword ptr [fXPGainMultiplier]
fistp dword ptr [esp+4]
lblXPGainMultiplierSkip:
mov edx,[ecx+00000128] // Original code
jmp lblXPGainMultiplierRet

lblStoreItemTaker:
cmp dword ptr [bEnableInfiniteItems],1
je short lblStoreItemTakerSkip
sub edx,eax                      // Original code
mov dword ptr [ecx+000001E0],edx // Original code
lblStoreItemTakerSkip:
jmp lblStoreItemTakerRet

lblCameraLimiter:
cmp dword ptr [bEnableCameraDelimiter],1
jne short lblCameraLimiterSkip
fld dword ptr [ecx+000002E4]
xor dl,dl
fcomp dword ptr [fMinCamZoom]
fnstsw ax
test ah,05
jp short lblCameraLimiterSkipZoomLow
mov eax,[fMinCamZoom]
mov dword ptr [ecx+000002E4],eax
lblCameraLimiterSkipZoomLow:
fld dword ptr [ecx+000002E4]
fcomp dword ptr [fMaxCamZoom]
fnstsw ax
test ah,41
jne short lblCameraLimiterSkipZoomHigh
mov eax,[fMaxCamZoom]
mov dword ptr [ecx+000002E4],eax
lblCameraLimiterSkipZoomHigh:
fld dword ptr [ecx+00000260]
fcomp dword ptr [fMinCamAngle]
fnstsw ax
test ah,05
jp short lblCameraLimiterSkipAngleLow
mov dl,01
mov eax,[fMinCamAngle]
mov dword ptr [ecx+00000260],eax
lblCameraLimiterSkipAngleLow:
fld dword ptr [ecx+00000260]
fcomp dword ptr [fMaxCamAngle]
fnstsw ax
test ah,41
jne short lblCameraLimiterSkipAngleHigh
mov dl,01
mov eax,[fMaxCamAngle]
mov dword ptr [ecx+00000260],eax
lblCameraLimiterSkipAngleHigh:
jmp aobCameraDelimiter_p
lblCameraLimiterSkip:
fld dword ptr [ecx+000002E4] // Original code
jmp lblCameraLimiterRet

lblLevelupUpdater:
cmp dword ptr [bEnableInfiniteLevelups],1
jne short lblLevelupUpdaterSkip
mov eax,[esi+00000134]
mov [esi+00000130],eax
lblLevelupUpdaterSkip:
mov [esi+00000134],eax // Original code
jmp lblLevelupUpdaterRet

lblTrainingUpdater:
cmp dword ptr [bEnableQuickTraining],1
jne short lblTrainingUpdaterSkip
mov dword ptr [esi+18],1
lblTrainingUpdaterSkip:
mov eax,[esi+18] // Original code
mov edx,[esp+08] // Original code
jmp lblTrainingUpdaterRet

lblTrainingRequirementBypass:
mov ecx,[esi+00000398]           // Original code
cmp dword ptr [bEnableTrainingRequirementBypass],1
jne short lblTrainingRequirementBypassSkip
mov eax,[ecx]
call dword ptr [eax+000000AC]
jmp lblTrainingRequirementBypassRet
lblTrainingRequirementBypassSkip:
mov edx,[ecx]                 // Original code
call dword ptr [edx+000000A8] // Original code
jmp lblTrainingRequirementBypassRet

lblWorkforceUpdate:
mov eax,[ecx+08] // Original code
cmp dword ptr [bEnableMassiveWorkforce],1
jne short lblWorkforceUpdateSkipMassive
mov edx,[ecx+0c]
mov dword ptr [ecx+10],edx
jmp short lblWorkforceUpdateSkip
lblWorkforceUpdateSkipMassive:
cmp dword ptr [bEnableWorkforceScale],1
jne short lblWorkforceUpdateSkip
fild dword ptr [ecx+08]
fmul dword ptr [fWorkforceScale]
fistp dword ptr [pTemp]
mov eax,[pTemp]
lblWorkforceUpdateSkip:
mov edx,[ecx+10] // Original code
jmp lblWorkforceUpdateRet
pTemp:
dd 0

lblHumanResourceReader:
cmp dword ptr [bEnableMinimumResources],1
jne short lblHumanResourceReaderSkip
mov ecx,[iMinimumResources]
cmp dword ptr [eax+04],ecx
jge short lblHumanResourceReaderSkipHuman
mov dword ptr [eax+04],ecx
lblHumanResourceReaderSkipHuman:
cmp dword ptr [eax+08],ecx
jge short lblHumanResourceReaderSkipCyborg
mov dword ptr [eax+08],ecx
lblHumanResourceReaderSkipCyborg:
cmp dword ptr [eax+0c],ecx
jge short lblHumanResourceReaderSkipPsionic
mov dword ptr [eax+0c],ecx
lblHumanResourceReaderSkipPsionic:
lblHumanResourceReaderSkip:
mov eax,[eax+04] // Original code
push eax         // Original code
lea ecx,[esp+70] // Original code
jmp lblHumanResourceReaderRet

//"UFO.exe"+230C6A:
aobHumanResourceReader:
aobHumanResourceReader_r:
jmp lblHumanResourceReader
nop
nop
nop
lblHumanResourceReaderRet:

//"UFO.exe"+25E237:
aobWorkforceUpdate:
aobWorkforceUpdate_r:
jmp lblWorkforceUpdate
nop
lblWorkforceUpdateRet:

//"UFO.exe"+3E30C1:
aobTrainingRequirementBypass:
aobTrainingRequirementBypass_r:
jmp lblTrainingRequirementBypass
nop
nop
nop
nop
nop
nop
nop
nop
nop
lblTrainingRequirementBypassRet:

//"UFO.exe"+3D124A:
aobTrainingUpdater:
aobTrainingUpdater_r:
jmp lblTrainingUpdater
nop
nop
lblTrainingUpdaterRet:

//"UFO.exe"+3BE940:
aobLevelupUpdater:
aobLevelupUpdater_r:
jmp lblLevelupUpdater
nop
lblLevelupUpdaterRet:

//"UFO.exe"+331610:
aobCameraLimiter+b:
aobCameraLimiter_r:
jmp lblCameraLimiter
nop
lblCameraLimiterRet:

//"UFO.exe"+21ABD8:
aobStoreItemTaker:
aobStoreItemTaker_r:
jmp lblStoreItemTaker
nop
nop
nop
lblStoreItemTakerRet:

//"UFO.exe"+3BE100:
aobXPGainMultiplier:
aobXPGainMultiplier_r:
jmp lblXPGainMultiplier
nop
lblXPGainMultiplierRet:

//"UFO.exe"+3BFEAD:
aobAmmoUpdater:
aobAmmoUpdater_r:
jmp lblAmmoUpdater
lblAmmoUpdaterRet:

//"UFO.exe"+349FD5:
aobHealthUpdater:
aobHealthUpdater_r:
jmp lblHealthUpdater
nop
lblHealthUpdaterRet:

//"UFO.exe"+345F36:
aobHealthUpdater2:
aobHealthUpdater2_r:
jmp lblHealthUpdater2
nop
nop
lblHealthUpdater2Ret:

//"UFO.exe"+2DBF11:
aobBasePointerGrabber:
aobBasePointerGrabber_r:
jmp lblBasePointerGrabber
nop
lblBasePointerGrabberRet:

aobCameraDelimiter:
aobCameraDelimiter_p:

[DISABLE]
//"UFO.exe"+2DBF11:
aobBasePointerGrabber_r:
//Alt: mov edx,[eax+34]
//Alt: mov edi,[edx+5C]
db 8B 50 34 8B 7A 5C

unregistersymbol(aobBasePointerGrabber_r)

//"UFO.exe"+349FD5:
aobHealthUpdater_r:
//Alt: fild dword ptr [esi+14]
//Alt: mov eax,[esi+40]
db DB 46 14 8B 46 40

//"UFO.exe"+345F36:
aobHealthUpdater2_r:
//Alt: fild dword ptr [esp+1C]
//Alt: mov edx,[edi+0C]
db DB 44 24 1C 8B 57 0C

unregistersymbol(aobHealthUpdater_r)
unregistersymbol(aobHealthUpdater2_r)

unregistersymbol(bEnableGodMode)
unregistersymbol(bEnableOneHitKill)
unregistersymbol(bEnableOneHitKnockout)

//"UFO.exe"+3BFEAD:
aobAmmoUpdater_r:
//Alt: sub edx,eax
//Alt: mov [ecx+14],edx
db 2B D0 89 51 14

unregistersymbol(aobAmmoUpdater_r)

unregistersymbol(bEnableInfiniteAmmo)

unregistersymbol(pWeaponHeldLeft)
unregistersymbol(pWeaponHeldRight)
unregistersymbol(pLeftHand)
unregistersymbol(pRightHand)

//"UFO.exe"+3BE100:
aobXPGainMultiplier_r:
//Alt: mov edx,[ecx+00000128]
db 8B 91 28 01 00 00

unregistersymbol(aobXPGainMultiplier_r)

unregistersymbol(bEnableXPGainMultiplier)
unregistersymbol(fXPGainMultiplier)

//"UFO.exe"+21ABD8:
aobStoreItemTaker_r:
//Alt: sub edx,eax
//Alt: mov dword ptr [ecx+000001E0],edx
db 2B D0 89 91 E0 01 00 00

unregistersymbol(aobStoreItemTaker_r)

unregistersymbol(bEnableInfiniteItems)

//"UFO.exe"+331610:
aobCameraLimiter_r:
//Alt: fld dword ptr [ecx+000002E4]
db D9 81 E4 02 00 00

unregistersymbol(aobCameraLimiter_r)
unregistersymbol(aobCameraDelimiter_p)

unregistersymbol(bEnableCameraDelimiter)
unregistersymbol(fMinCamZoom)
unregistersymbol(fMaxCamZoom)
unregistersymbol(fMinCamAngle)
unregistersymbol(fMaxCamAngle)

//"UFO.exe"+3BE940:
aobLevelupUpdater_r:
//Alt: mov [esi+00000134],eax
db 89 86 34 01 00 00

unregistersymbol(aobLevelupUpdater_r)

unregistersymbol(bEnableInfiniteLevelups)

//"UFO.exe"+3D124A:
aobTrainingUpdater_r:
//Alt: mov eax,[esi+18]
//Alt: mov edx,[esp+08]
db 8B 46 18 8B 54 24 08

unregistersymbol(aobTrainingUpdater_r)

unregistersymbol(bEnableQuickTraining)

//"UFO.exe"+3E30C1:
aobTrainingRequirementBypass_r:
//Alt: mov ecx,[esi+00000398]
//Alt: mov edx,[ecx]
//Alt: call dword ptr [edx+000000A8]
db 8B 8E 98 03 00 00 8B 11 FF 92 A8 00 00 00

unregistersymbol(aobTrainingRequirementBypass_r)

unregistersymbol(bEnableTrainingRequirementBypass)

//"UFO.exe"+25E237:
aobWorkforceUpdate_r:
//Alt: mov eax,[ecx+08]
//Alt: mov edx,[ecx+10]
db 8B 41 08 8B 51 10

unregistersymbol(aobWorkforceUpdate_r)

unregistersymbol(bEnableWorkforceScale)
unregistersymbol(fWorkforceScale)
unregistersymbol(bEnableMassiveWorkforce)

unregistersymbol(pTemp)

//"UFO.exe"+230C6A:
aobHumanResourceReader_r:
//Alt: mov eax,[eax+04]
//Alt: push eax
//Alt: lea ecx,[esp+70]
db 8B 40 04 50 8D 4C 24 70

unregistersymbol(aobHumanResourceReader_r)

unregistersymbol(bEnableMinimumResources)
unregistersymbol(iMinimumResources)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>158</ID>
          <Description>"----- ----- ----- Strategic game hacks below ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----"</Description>
          <Color>8000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>159</ID>
          <Description>"bEnableInfiniteLevelups"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteLevelups</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>160</ID>
          <Description>"bEnableTrainingRequirementBypass"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableTrainingRequirementBypass</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>161</ID>
          <Description>"bEnableQuickTraining"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableQuickTraining</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>162</ID>
          <Description>"bEnableInfiniteItems"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteItems</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>163</ID>
          <Description>"bEnableMinimumResources"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinimumResources</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>164</ID>
              <Description>"iMinimumResources"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinimumResources</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>165</ID>
          <Description>"bEnableMassiveWorkforce"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMassiveWorkforce</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>166</ID>
          <Description>"bEnableWorkforceScale"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableWorkforceScale</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>167</ID>
              <Description>"fWorkforceScale"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fWorkforceScale</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>168</ID>
          <Description>"----- ----- ----- Tactical game hacks below ----- ----- ----- ----- ----- -----  ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----"</Description>
          <Color>8000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>169</ID>
          <Description>"bEnableGodMode"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableGodMode</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>170</ID>
          <Description>"bEnableOneHitKill"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableOneHitKill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>171</ID>
          <Description>"bEnableOneHitKnockout"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableOneHitKnockout</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>172</ID>
          <Description>"bEnableInfiniteAmmo"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteAmmo</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>173</ID>
          <Description>"bEnableXPGainMultiplier"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableXPGainMultiplier</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>174</ID>
              <Description>"fXPGainMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fXPGainMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>175</ID>
          <Description>"bEnableCameraDelimiter"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableCameraDelimiter</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>176</ID>
              <Description>"fMinCamZoom"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fMinCamZoom</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>178</ID>
              <Description>"fMinCamAngle"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fMinCamAngle</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>177</ID>
              <Description>"fMaxCamZoom"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fMaxCamZoom</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>179</ID>
              <Description>"fMaxCamAngle"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fMaxCamAngle</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
