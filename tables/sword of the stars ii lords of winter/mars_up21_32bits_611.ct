<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>145</ID>
      <Description>"[X] &lt;== SotS 2 32bits UP21 Script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32bits)
 Game Version  : 1.0.18950.1 (Update 21)
 Script Version: 1.0
 CE Version    : 6.1
 Release date  : 17-Jan-2012
 Author        : Recifense
 Features:
 - Minimum Savings
 - God Mode
 - Increase Research Points and Income
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(sqlite3.dll+006f69,c7 47 04 00 00 00 00) //ok
assert(mars.exe+0c57e4,8b 38 8b 17 8b 42 28)    //ok
assert(mars.exe+24ccdd,d9 00 d8 64 24 24)       //ok
assert(mars.exe+175641,b0 01 d2 e0 08 06)       //ok
assert(mars.exe+131b71,8b 45 38 85 c0)          //ok
assert(mars.exe+1355a7,8b 88 5c 08 00 00)       //ok
assert(mars.exe+24e3d4,ff 24 85 ?? ?? ?? ?? 8b) //ok

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_MonPlayer)
label(_MonP0)
label(_MonP1)
label(_MonP2)
label(_MonP20)
label(_MonP3)
label(_MonP30)
label(_MonP31)
label(_MonP4)
label(_MonResearch)
label(_MonResearch1)
label(_BackMP)
label(_ExitMP)
label(_MonSel)
label(_BackMS)
label(_ExitMS)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_MonBadge)
label(_BackMB)
label(_ExitMB)
label(_MonShipParts)
label(_BackMSP)
label(_ExitMSP)
label(_ClearArmor)
label(_ClearA0)
label(_ExitCA)
label(_GodModeX)
label(_BackGMX)
label(_ExitGMX)
label(pUnit)
label(pCommon)
label(pAll)
label(pOne)
label(pSel)
label(pRes)
label(pBadge)
label(pPlayer)
label(iEnableMR)
label(iEnableGM)
label(iEnableMRe)
label(iSavings)
label(qSavings)
label(iMinRes)
label(qMinRes)
label(iSize)
label(qXMM0)
label(iEAX)
label(iCount)
label(iCount1)
label(iCount2)
label(iCount3)
label(iCount4)
label(aobSignature0)
label(aobSignature1)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pAll)
registersymbol(pOne)
registersymbol(pPlayer)
registersymbol(pSel)
registersymbol(pBadge)
registersymbol(pCommon)
registersymbol(iEnableMR)
registersymbol(iEnableGM)
registersymbol(iEnableMRe)
registersymbol(iSavings)
registersymbol(qSavings)
registersymbol(iCount)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount3)
registersymbol(iCount4)

//=========================================
MyCode:
//========================================= ok **
// EAX = pbID (base + 2 or + 3)
// EDX = iID
// EBX = ECX = Base

_MonPlayer:
 push ecx
 push edx
 push edi
 push esi

 movsd [qXMM0],xmm0

 mov [pAll],ebx

 cmp edx,1
 jne _ExitMP

 mov [pOne],ebx

 inc eax

 movzx edx,byte ptr [eax]          // Get # data
 cmp edx,#44 //**
 jne _MonResearch

//==&gt; Savings

 mov [pPlayer],ebx

 cmp ebx,ecx                       // Is it really player info?
 jne _ExitMP

 push ecx
 push ebx
 push eax

 mov ecx,#09
 xor ebx,ebx

_MonP0:
 inc eax

 mov dl,[eax]
 cmp dl,0C
 jle _MonP1

 sub dl,0d                         // Adjust in case of string
 shr dl,1                          // the ",1" is forced because of CE

_MonP1:
 movzx edx,dl
 add ebx,edx
 loop _MonP0

 pop eax
 push eax

 movzx edx, byte ptr [eax]

 add edx,ebx
 add edx,eax                       // EDX = pCurrentSavings

 mov [pRes],edx

 movzx ecx,byte ptr [eax+0a]       // Get Info Size

 mov ebx,iSavings+2
 cmp ecx,3
 je _MonP2

 mov ebx,qSavings+7
 cmp ecx,7
 jne _MonP4

 mov ecx,8

_MonP2:                            // Copy value to local variable
 mov [pRes],edx
 mov [iSize],ecx

_MonP20:
 mov al,[edx]
 mov [ebx],al
 inc edx
 dec ebx
 loop _MonP20

 cmp dword ptr [iEnableMR],0
 je _MonP4                         // Jump if feature is disabled

 inc dword ptr [iCount2]

 mov ecx,[pPlayer]
 mov cl,[ecx]

 mov ecx,[iSize]
 cmp ecx,8
 je _MonP3

 mov edx,[iMinRes]
 cmp edx,[iSavings]
 jle _MonP4

 mov [iSavings],edx
 jmp _MonP30

_MonP3:
 movsd xmm0,[qMinRes]

 mov edx,[qMinRes+04]
 cmp edx,[qSavings+04]
 jle _MonP4

 movsd [qSavings],xmm0

_MonP30:
 mov edx,[pRes]
 mov ecx,[iSize]

 mov ebx,qSavings+7
 cmp ecx,8
 je _MonP31

 mov ebx,iSavings+2

_MonP31:
 mov al,[ebx]
 mov [edx],al
 inc edx
 dec ebx
 loop _MonP31

_MonP4:
 pop eax
 pop ebx
 pop ecx
 jmp _ExitMP
// ==&gt; Research
_MonResearch:
 cmp dword ptr [iEnableMRe],0
 je _ExitMP                         // Jump if feature is disabled

 cmp edx,#24 //**
 jne _MonResearch1

 mov ecx,#16
 mov esi,eax
 mov edi,aobSignature0

 repe cmpsb
 jne _ExitMP

 inc dword ptr [iCount3]

 mov cl,[eax]

 mov byte ptr [eax+1b],7f
 mov byte ptr [eax+2d],ec
 jmp _ExitMP

_MonResearch1:
 cmp edx,#07 //**
 jne _ExitMP

 mov ecx,#07
 mov esi,eax
 mov edi,aobSignature1

 repe cmpsb
 jne _ExitMP

 inc dword ptr [iCount4]

 mov cl,[eax]

 mov byte ptr [eax+0a],7f

_ExitMP:
 pop esi
 pop edi
 pop edx
 pop ecx
 movsd xmm0,[qXMM0]

 mov [edi+04],00000000             // Original code
 jmp _BackMP                       // Back to main code

//========================================= ok
// Activated during combat when a unit is selected
_MonSel:
 mov edi,[eax]
 mov [pSel],edi

 mov edx,[edi+00000110]
 mov [pCommon],edx

_ExitMS:
 mov edi,[eax]
 mov edx,[edi]
 mov eax,[edx+28]
 jmp _BackMS                       // Back to main code

//========================================= ok (**)
// Activated during combat
_GodMode:
 test esi,esi
 jz _ExitGM

 mov ecx,[esi+30]
 cmp ecx,[esp+10]
 jne _ExitGM

 mov ecx,[ecx+00000110]
 cmp ecx,[pCommon]
 jne _ExitGM

 cmp dword ptr [iEnableGM],0
 je _ExitGM                         // Jump if feature is disabled

 push esi
 push edi

 mov esi,[esi+00000860]  //**
 push esi

 mov edi,eax
 mov ecx,#13
 rep movsd

 pop esi
 lea edi,[eax+00bc]  //**
 mov ecx,#13
 rep movsd

 pop edi
 pop esi

 xor ecx,ecx
 mov [esp+24],ecx

_ExitGM:
 fld dword ptr [eax]
 fsub dword ptr [esp+24]
 jmp _BackGM                       // Back to main code

//========================================= ok (***)
// Activated during combat (ARMOR)
_GodMode2:
 mov al,01
 shl al,cl
 or [esi],al

 mov eax,[esp+0000010c]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+30]
 test eax,eax
 jz _ExitGM2

 cmp eax,[esp+00000144]
 jne _ExitGM2

 mov eax,[eax+00000110]
 cmp eax,[pCommon]
 jne _ExitGM2

 cmp dword ptr [iEnableGM],0
 je _ExitGM2                        // Jump if feature is disabled

 xor al,al
 mov [esi],al

_ExitGM2:
 jmp _BackGM2                        // Back to main code

//========================================= ok
// Activated on design/production screen when a ship is selected
_MonBadge:
 mov eax,[ebp+38]
 test eax,eax
 jz _ExitMB

 mov [pBadge],ebp

_ExitMB:
 mov eax,[ebp+38]
 test eax,eax
 jmp _BackMB                        // Back to main code

//========================================= ok (**)
// Activated during combat
_MonShipParts:
 mov ecx,[eax+30]
 test eax,eax
 jz _ExitMSP

 mov ecx,[ecx+00000110]
 cmp ecx,[pCommon]
 jne _ExitMSP

 mov ecx,[eax+0000085C] //**
 test ecx,ecx
 jz _ExitMSP

 mov ecx,[eax+00000860] //**
 test ecx,ecx
 jz _ExitMSP

 cmp dword ptr [iEnableGM],0
 je _ExitMSP                         // Jump if feature is disabled

// Constitution

 push esi
 push edi

 mov esi,[eax+00000860] //**
 mov edi,[eax+0000085c] //**

 push esi
 push edi

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

 lea edi,[edi+00bc] //**

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

// Armor
 push esi

 lea esi,[eax+000005bc]            // Right Side **
 call _ClearArmor
 lea esi,[esi+00000028]            // Top Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Left Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Botton Side
 call _ClearArmor

 pop esi

_ExitMSP:
 mov ecx,[eax+0000085C] //**
 jmp _BackMSP                      // Back to main code

//========================================= ok
// Auxiliary Routine
_ClearArmor:
 push edi
 push ebx

 mov ecx,[esi+04]
 test ecx,ecx
 jz _ExitCA

 mov edi,[esi+20]
 test edi,edi
 jz _ExitCA

 xor ebx,ebx
 mov [esi+18],ebx

_ClearA0:
 mov dword ptr [edi],ebx
 lea edi,[edi+00000004]
 loop _ClearA0

_ExitCA:
 pop ebx
 pop edi
 ret

//=========================================
// Activated during combat (DIRECT HIT)
_GodModeX:
 mov [iEAX],eax

 inc dword ptr [iCount1]

 cmp dword ptr [iEnableGM],0
 je _ExitGMX                        // Jump if feature is disabled

 inc dword ptr [iCount]

 mov eax,[esp+04]
 cmp eax,edi
 jne _ExitGMX

 dec dword ptr [iCount]

 mov eax,[edi+00000110]
 cmp eax,[pCommon]
 jne _ExitGMX

 mov eax,[iEAX]
 jmp mars.exe+24e614                // Bypass routine
//=======
_ExitGMX:
 mov eax,[iEAX]

 jmp dword ptr [eax*4+mars.exe+24E638] // Original code
 jmp _BackGMX                       // Back to main code

//=========================================
 db '=======================&gt;'
 db 'CE6.1 Script by Recifense 011712'
//=========================================
// Variables
iEnableMR:
 dd 1
iEnableGM:
 dd 1
iEnableMRe:
 dd 0
pBadge:
 dd 0
pUnit:
 dd 0
pCommon:
 dd MyCode
pPlayer:
 dd 0
pAll:
 dd 0
pSel:
 dd 0
pOne:
 dd 0
pRes:
 dd 0
iSize:
 dd 0
qXMM0:
 dq 0
iMinRes:
 dd #2000000
qMinRes:
 dq (double)2000000,0
iSavings:
 dd 0
qSavings:
 dq 0
iEAX:
 dd 0
iCount:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0
iCount3:
 dd 0
iCount4:
 dd 0
aobSignature0:
 db 18 00 02 01 04 07 01 01 01 01 01 07 01 01 01 07
aobSignature1:
 db 07 02 01 04 01 01 01


//=========================================
// Hacking Points
sqlite3.dll+006f69: //up21
 jmp _MonPlayer
 nop
 nop
_BackMP:

//mars.exe+0bb074:
//mars.exe+0c1a34:
mars.exe+0c57e4: //up21
 jmp _MonSel
 nop
 nop
_BackMS:

//mars.exe+22c2ad:
//mars.exe+23dced:
mars.exe+24ccdd: //up21
 jmp _GodMode
 nop
_BackGM:

//mars.exe+15a7b4:
//mars.exe+1695e1:
mars.exe+175641: //up21
 jmp _GodMode2
 nop
_BackGM2:

//mars.exe+110c60:
//mars.exe+1195e0:
//mars.exe+12b721:  //another HP
mars.exe+131b71: //up21
 jmp _MonBadge
_BackMB:

//mars.exe+1247e7:
//mars.exe+12e877:
mars.exe+1355a7: //up21
 jmp _MonShipParts
 nop
_BackMSP:

mars.exe+24e3d4: //up21
 jmp _GodModeX
 nop
 nop
_BackGMX:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
sqlite3.dll+006f69: //up21
// mov [edi+04],00000000
 db c7 47 04 00 00 00 00

//mars.exe+0c1a34:
mars.exe+0c57e4: //up21
// mov edi,[eax]
// mov edx,[edi]
// mov eax,[edx+28]
 db 8b 38 8b 17 8b 42 28

//mars.exe+23dced:
mars.exe+24ccdd: //up21
// fld dword ptr [eax]
// fsub dword ptr [esp+24]
 db d9 00 d8 64 24 24

//mars.exe+1695e1:
mars.exe+175641: //up21
// mov al,01
// shl al,cl
// or [esi],al
 db b0 01 d2 e0 08 06

//mars.exe+12b721:  //another HP
mars.exe+131b71: //up21
// mov eax,[ebp+38]
// test eax,eax
 db 8b 45 38 85 c0

//mars.exe+12e877:
mars.exe+1355a7: //up21
// mov ecx,[eax+0000085C]
 db 8b 88 5c 08 00 00

mars.exe+24e3d4: //up21
 jmp dword ptr [eax*4+mars.exe+24E638]

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pAll)
unregistersymbol(pOne)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMRe)
unregistersymbol(iEnableGM)
unregistersymbol(pPlayer)
unregistersymbol(pSel)
unregistersymbol(pBadge)
unregistersymbol(pCommon)
unregistersymbol(iSavings)
unregistersymbol(qSavings)
unregistersymbol(iCount)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount3)
unregistersymbol(iCount4)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>77</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Enable/Disable Minimum Savings =&gt; (1/0)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"Enable/Disable Extra Research Points/Income =&gt; (1/0)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRe</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>MyCode</Name>
      <Address>03190000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>03190420</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAll</Name>
      <Address>0319042C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pOne</Name>
      <Address>03190434</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>03190428</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSel</Name>
      <Address>03190430</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBadge</Name>
      <Address>0319041C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommon</Name>
      <Address>03190424</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMR</Name>
      <Address>03190410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>03190414</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMRe</Name>
      <Address>03190418</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iSavings</Name>
      <Address>0319045C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>qSavings</Name>
      <Address>03190460</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount</Name>
      <Address>0319046C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount1</Name>
      <Address>03190470</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount2</Name>
      <Address>03190474</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount3</Name>
      <Address>03190478</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount4</Name>
      <Address>0319047C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32bits)
 Game Version  : 1.0.18950.1 (Update 21)
 Script Version: 1.0
 CE Version    : 6.1
 Release date  : 17-Jan-2012
 Author        : Recifense
 Features:
 - Minimum Savings
 - God Mode (*)
 - Increase Research Points and Income(**)
===========================================
(*) Select one of your ship/structure for it to work;
(**) Before enabling it, look at your income and at the current research progress/turns. After enabling it, look at them again. :)
</Comments>
</CheatTable>
