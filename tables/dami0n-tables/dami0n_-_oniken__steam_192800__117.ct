<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>98</ID>
      <Description>"Additional information (right click -&gt; change script)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
This game is quite bitchy and if you've reached the end of level 4
you won't fear hell anymore, because you've been there and through.

Short description of this table &amp; its scripts:

*There are three "unlimited health" scripts, which all work a
tad differently. You should only activate them AFTER you've
entered a level (and deactivate before entering a new one)
to reduce risk of problems, crashes or highscore fuckups.

The best for you to use should be the first one (heals you
if health reaches 4 or 5). I've done it that way so the
chance for a game-code-fuckup is minimal because of all that
multi-purpose code (more on this further below if you're
interested). It might also work on your grenades.
There's a "Variant B" on this, which is slightly different
code-wise. It works almost the same.
The second option includes setting the lives to 99. That
is done automatically by the opcode as multiple scripts use
that register.
The third option might also set your grenades to their
maximum value, but will most likely corrupt your highscore
and possibly more.

*Unlimited lifes skips the instruction which would
substract one life from the player after the hero died. All
in all you won't lose a life with this option activated.

*The rest of the entries are additional information or notes
 I've left in there for other people trying to craft a script
 for the game.

Somebody who's better in all this coding stuff than me might be
able to do some pretty neat things with it, however I tried filtering
code for a long time but ultimately failed. Yes, the unlimited
health code works, BUT it isn't cleanly coded. It still changes
some other adresses I wouldn't want it to change.

If you want to use this table, you have to target the
--&gt; STDRT.EXE &lt;-- process. Using Oniken_win.exe WON'T WORK.

Here are some things I've discovered about the game:
-the disassembler shows lots of "xor"-opcodes, so we know the
 desired values are encrypted/not saved as we'd expect it.

 Full health (20 health bars) can be found by searching:
 1 byte = 235, 2 bytes = 65515, 4 bytes = 4294967275.

 The value INCREASES if you take damage, so if you'd have
 19 health left you'd have to search for this:
 1 byte = 236, 2 bytes = 65516, 4 bytes = 4294967276

-unluckily, all the codes which write or read the health
 value also deal with other adresses, thus this part of one usual
 AOB-injection script like:

 mov [esi+0000020A],4294967295

 WILL change your health, but also various other values. So
 it might fuck up your game, send your highscore through the
 roof or trigger some other unwanted things.
 Doing some compares (cmp opcode) might help here, but I've
 yet to find some 100% reliable register adress one could use
 for this, as I'm interested in only changing/freezing health
 through a script.

-this game has a "mercy timer", so if you get hit you'll be
 invulnerable for some seconds. But guess what; the scripts
 which read or write to this value also are "multi purpose
 code", so just like the scripts dealing with the health
 value you can't just plug in a simple AOB-injection-script
 here either. It is a 4 byte value which changes as soon as
 you get hit and then drops down towards 0 at a steady pace.

A user on the cheat engine forum has explained how to find your
health value in a more convenient way:

http://forum.cheatengine.org/viewtopic.php?p=5640623

The game uses the most basic encryption: crypted_value =
not(real_value)

Lazy way:
1-disable Fast scan (or specify alignment=1, it's the same thing)
2-Search for -(ingame_value+1)

Overkill way:
1-Open Cheat Engine
2-Right click on the "value type" drop box-&gt;define new custom type
(auto assembler) -&gt;paste this:

Code:
alloc(ConvertRoutine,1024)
alloc(ConvertBackRoutine,1024)
alloc(TypeName,256)
alloc(ByteSize,4)
alloc(UsesFloat,1)

TypeName:
db 'Multimedia Fusion crypted int',0

ByteSize:
dd 4

UsesFloat:
db 0 //Change to 1 if this custom type should be treated as a float

//The convert routine should hold a routine that converts the data to an integer (in eax)
//Note: Keep in mind that this routine can be called by multiple threads at the same time.

//stdcall int ConvertRoutine(unsigned char *input);
ConvertRoutine:
[64-bit]
//rcx=address of input (per Cheat Eagine design)
mov eax,[rcx] //eax=CryptedValue
not eax         //eax is decrypted
ret
[/64-bit]

[32-bit]
mov eax,[esp+4] //eax=&amp;CryptedValue
mov eax,[eax]   //eax=CryptedValue
not eax         //eax is decrypted
ret 4
[/32-bit]

//The convert back routine should hold a routine that converts the given integer back to a row of bytes (e.g when the user wats to write a new value)
//stdcall void ConvertBackRoutine(int i, unsigned char *output);
ConvertBackRoutine:
[64-bit]
//per (per Cheat Eagine design)
//ecx=input
//rdx=address of output
not ecx       //encrypt ecx
mov [rdx],ecx //place the integer the 4 bytes pointed to by rdx
ret
[/64-bit]

[32-bit]
push edx              //save edx,eax
push eax
mov edx, dword [esp+10] //edx=output
mov eax,[esp+c]        //eax=i
not eax                //encrypt eax
mov [edx],eax          //*output=!i
pop eax                //restore eax,edx
pop edx
ret 8
[/32-bit]

3-Disable Fast scan
4-Do your scans as usual

Hope this helps if you want to try your luck with this game.

I've not yet given up but for a dumb fuck like me I don't know
if there'll be any progress soon without me learning more about
data structures and (dis)assembler.
}

[ENABLE]
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Target process: STDRT.exe"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"AOB-Scripts:"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>112</ID>
          <Description>"Unlimited health (heals you if health reaches 11 or 12)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(INJECT,stdrt.exe,8B 80 0A 02 00 00 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(imavirgin)
label(doit)

newmem:

code:
  cmp [eax+0000020A],(int)4294967275
  jle imavirgin
  cmp [eax+0000020A],(int)4294967294
  jge imavirgin
  cmp [eax+0000020A],(int)4294967287
  je doit
  cmp [eax+0000020A],(int)4294967286
  je doit

imavirgin:
  mov eax,[eax+0000020A]
  jmp return

doit:
  mov [eax+0000020A],4294967275
  mov eax,[eax+0000020A]
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 80 0A 02 00 00

unregistersymbol(INJECT)
dealloc(newmem)

"stdrt.exe"+E1EE:
  mov eax,[eax+0000020A]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"Unlimited health (Variant B)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(INJECT,stdrt.exe,8B 80 0A 02 00 00 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(imavirgin)
label(doit)

newmem:

code:
  cmp [eax+0000020A],(int)4294967275
  jle imavirgin
  cmp [eax+0000020A],(int)4294967294
  jge imavirgin
  cmp [eax+0000020A],(int)4294967287
  je doit
  cmp [eax+0000020A],(int)4294967286
  je doit

imavirgin:
  mov eax,[eax+0000020A]
  jmp return

doit:
  sub [eax+0000020A],(int)15
  mov eax,[eax+0000020A]
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 80 0A 02 00 00

unregistersymbol(INJECT)
dealloc(newmem)

"stdrt.exe"+E1EE:
  mov eax,[eax+0000020A]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"Unlimited health (incl. 99 lifes)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(INJECT,stdrt.exe,8B 80 0A 02 00 00 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(imavirgin)
label(doit)

newmem:

code:
  cmp [eax+0000020A],(int)4294967275
  jle imavirgin
  cmp [eax+0000020A],(int)4294967294
  jge imavirgin
  cmp [eax+0000020A],(int)4294967276
  jge doit

imavirgin:
  mov eax,[eax+0000020A]
  jmp return

doit:
  mov [eax+0000020A],4294967275
  mov eax,[eax+0000020A]
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 80 0A 02 00 00

unregistersymbol(INJECT)
dealloc(newmem)

"stdrt.exe"+E1EE:
  mov eax,[eax+0000020A]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Unlimited health (incl. lifes &amp; grenades?)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,stdrt.exe,8B 8? 0A 02 00 00 33 C9 F7 D0 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [esi+0000020A],4294967295
  mov eax,[esi+0000020A]
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 8B 8? 0A 02 00 00

unregistersymbol(INJECT)
dealloc(newmem)

"stdrt.exe"+E1EE:
  mov eax,[eax+0000020A]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Unlimited lifes"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,stdrt.exe,89 48 08 8B 52 0C 89 50 0C 8B 83) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  nop
  mov edx,[edx+0C]
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 89 48 08 8B 52 0C

unregistersymbol(INJECT)
dealloc(newmem)

"stdrt.exe"+37547:
  mov [eax+08],ecx
  mov edx,[edx+0C]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
