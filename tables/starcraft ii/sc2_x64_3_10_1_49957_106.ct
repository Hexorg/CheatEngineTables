<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Infinite HP (Newest)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : SC2_x64.exe
  Version: 3.10.1.49957
  Date   : 2017-01-31
  Author : Drakkhen

  Infinite HP - Units and Buildings - Human player only
}

define(address,"SC2_x64.exe"+697F1E)
define(bytes,41 89 B6 98 01 00 00)

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
assert(address,bytes)
alloc(newmem,$1000,"SC2_x64.exe"+697F1E)

label(code)
label(return)
label(update)

newmem:

code:
  cmp [r14+0000003E],1
  jne update
  xor esi,esi

update:
  mov [r14+00000198],esi
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
address:
  db bytes
  // mov [r14+00000198],esi

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "SC2_x64.exe"+697F1E

"SC2_x64.exe"+697F09: 79 04                    -  jns SC2_x64.exe+697F0F
"SC2_x64.exe"+697F0B: 8B CD                    -  mov ecx,ebp
"SC2_x64.exe"+697F0D: EB 07                    -  jmp SC2_x64.exe+697F16
"SC2_x64.exe"+697F0F: 3B F8                    -  cmp edi,eax
"SC2_x64.exe"+697F11: 8B C8                    -  mov ecx,eax
"SC2_x64.exe"+697F13: 0F 4C CF                 -  cmovl ecx,edi
"SC2_x64.exe"+697F16: 8B F7                    -  mov esi,edi
"SC2_x64.exe"+697F18: 2B F1                    -  sub esi,ecx
"SC2_x64.exe"+697F1A: 8B CF                    -  mov ecx,edi
"SC2_x64.exe"+697F1C: 2B C8                    -  sub ecx,eax
// ---------- INJECTING HERE ----------
"SC2_x64.exe"+697F1E: 41 89 B6 98 01 00 00     -  mov [r14+00000198],esi
// ---------- DONE INJECTING  ----------
"SC2_x64.exe"+697F25: 89 8C 24 88 00 00 00     -  mov [rsp+00000088],ecx
"SC2_x64.exe"+697F2C: 3B F3                    -  cmp esi,ebx
"SC2_x64.exe"+697F2E: 74 23                    -  je SC2_x64.exe+697F53
"SC2_x64.exe"+697F30: 8B D3                    -  mov edx,ebx
"SC2_x64.exe"+697F32: C6 44 24 30 01           -  mov byte ptr [rsp+30],01
"SC2_x64.exe"+697F37: 2B D6                    -  sub edx,esi
"SC2_x64.exe"+697F39: C7 44 24 28 01 00 00 00  -  mov [rsp+28],00000001
"SC2_x64.exe"+697F41: 44 8B CF                 -  mov r9d,edi
"SC2_x64.exe"+697F44: 89 6C 24 20              -  mov [rsp+20],ebp
"SC2_x64.exe"+697F48: 44 8B C3                 -  mov r8d,ebx
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>36</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>17</Key>
            <Key>35</Key>
          </Keys>
          <ID>1</ID>
          <DeactivateSound>Deactivate</DeactivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Infinite Shields"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : SC2_x64.exe
  Version: 3.10.1.49957
  Date   : 2017-01-31
  Author : Drakkhen

  Infinite Shields human player only
}

define(address,"SC2_x64.exe"+695E01)
define(bytes,41 89 86 9C 01 00 00)

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
assert(address,bytes)
alloc(newmem,$1000,"SC2_x64.exe"+695E01)

label(code)
label(return)
label(update)

newmem:

code:
  cmp [r14+0000003E],1
  jne update
  xor eax,eax

update:
  mov [r14+0000019C],eax
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
address:
  db bytes
  // mov [r14+0000019C],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "SC2_x64.exe"+695E01

"SC2_x64.exe"+695DE0: E8 0B EA E5 FF           -  call SC2_x64.exe+4F47F0
"SC2_x64.exe"+695DE5: 41 8B 9E 9C 01 00 00     -  mov ebx,[r14+0000019C]
"SC2_x64.exe"+695DEC: 44 8B 08                 -  mov r9d,[rax]
"SC2_x64.exe"+695DEF: 85 FF                    -  test edi,edi
"SC2_x64.exe"+695DF1: 78 09                    -  js SC2_x64.exe+695DFC
"SC2_x64.exe"+695DF3: 44 3B CF                 -  cmp r9d,edi
"SC2_x64.exe"+695DF6: 8B EF                    -  mov ebp,edi
"SC2_x64.exe"+695DF8: 41 0F 4C E9              -  cmovl ebp,r9d
"SC2_x64.exe"+695DFC: 41 8B C1                 -  mov eax,r9d
"SC2_x64.exe"+695DFF: 2B C5                    -  sub eax,ebp
// ---------- INJECTING HERE ----------
"SC2_x64.exe"+695E01: 41 89 86 9C 01 00 00     -  mov [r14+0000019C],eax
// ---------- DONE INJECTING  ----------
"SC2_x64.exe"+695E08: 3B C3                    -  cmp eax,ebx
"SC2_x64.exe"+695E0A: 74 24                    -  je SC2_x64.exe+695E30
"SC2_x64.exe"+695E0C: 8B D3                    -  mov edx,ebx
"SC2_x64.exe"+695E0E: C6 44 24 30 01           -  mov byte ptr [rsp+30],01
"SC2_x64.exe"+695E13: 2B D0                    -  sub edx,eax
"SC2_x64.exe"+695E15: C7 44 24 28 09 00 00 00  -  mov [rsp+28],00000009
"SC2_x64.exe"+695E1D: 44 8B C3                 -  mov r8d,ebx
"SC2_x64.exe"+695E20: C7 44 24 20 08 00 00 00  -  mov [rsp+20],00000008
"SC2_x64.exe"+695E28: 49 8B CE                 -  mov rcx,r14
"SC2_x64.exe"+695E2B: E8 80 16 00 00           -  call SC2_x64.exe+6974B0
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
