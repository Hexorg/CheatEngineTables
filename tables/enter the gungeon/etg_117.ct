<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"loading script_64bit"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//zhuo
[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
define(invincible,HealthHaver:332223)
define(oneHit,HealthHaver:332223+880)

assert(invincible,55 48 8B EC 53)
assert(oneHit,F2 0F 5C C1 F2 0F 5A E8)

registersymbol(invincible)
registersymbol(oneHit)

[DISABLE]
unregistersymbol(invincible)
unregistersymbol(oneHit)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"invincible"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//zhuo
[ENABLE]
alloc(code,100)
label(exit)
label(return)

code:
  cmp byte ptr [rcx+140],0
  je exit
  ret

exit:
  push rbp
  mov rbp,rsp
  push rbx
  jmp return

invincible:
  jmp code
return:

[DISABLE]
invincible:
  db 55 48 8B EC 53

dealloc(code)

{
// ORIGINAL CODE - INJECTION POINT: HealthHaver:333

15DD46A5: 04 03                          -  add al,03
15DD46A7: 05 00 00 04 53                 -  add eax,53040000
15DD46AC: 01 50 00                       -  add [rax+00],edx
15DD46AF: 00 00                          -  add [rax],al
15DD46B1: 00 00                          -  add [rax],al
15DD46B3: 00 E8                          -  add al,ch
15DD46B5: 47 B9 4D EF 04 A0              -  mov r9d,A004EF4D
15DD46BB: 6F                             -  outsd
15DD46BC: 29 0E                          -  sub [rsi],ecx
15DD46BE: 00 00                          -  add [rax],al
// ---------- INJECTING HERE ----------
15DD46C0: 55                             -  push rbp
15DD46C1: 48 8B EC                       -  mov rbp,rsp
15DD46C4: 53                             -  push rbx
// ---------- DONE INJECTING  ----------
15DD46C5: 56                             -  push rsi
15DD46C6: 57                             -  push rdi
15DD46C7: 41 54                          -  push r12
15DD46C9: 41 55                          -  push r13
15DD46CB: 41 56                          -  push r14
15DD46CD: 41 57                          -  push r15
15DD46CF: 48 81 EC 98 00 00 00           -  sub rsp,00000098
15DD46D6: 48 8B D9                       -  mov rbx,rcx
15DD46D9: F3 0F 11 8D 60 FF FF FF        -  movss [rbp-000000A0],xmm1
15DD46E1: 4D 8B E0                       -  mov r12,r8
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"oneHit"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//zhuo
[ENABLE]
alloc(code,100)
label(return)

code:
  subsd xmm0,xmm0
  subsd xmm0,xmm1
  cvtsd2ss xmm5,xmm0
  jmp return

oneHit:
  jmp code
  nop
  nop
  nop
return:

[DISABLE]
oneHit:
  db F2 0F 5C C1 F2 0F 5A E8

dealloc(code)

{
// ORIGINAL CODE - INJECTION POINT: HealthHaver:333+880

15DD4F0A: 49 BB A0 2A 9B 45 00 00 00 00  -  mov r11,UnityEngine:Mathf:Min
15DD4F14: 41 FF D3                       -  call r11d
15DD4F17: 48 83 C4 20                    -  add rsp,20
15DD4F1B: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
15DD4F1F: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
15DD4F23: F3 0F 11 6D C4                 -  movss [rbp-3C],xmm5
15DD4F28: F3 0F 10 83 10 01 00 00        -  movss xmm0,[rbx+00000110]
15DD4F30: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
15DD4F34: F3 0F 10 8D 60 FF FF FF        -  movss xmm1,[rbp-000000A0]
15DD4F3C: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
// ---------- INJECTING HERE ----------
15DD4F40: F2 0F 5C C1                    -  subsd xmm0,xmm1
15DD4F44: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
// ---------- DONE INJECTING  ----------
15DD4F48: F3 0F 11 AB 10 01 00 00        -  movss [rbx+00000110],xmm5
15DD4F50: 0F B6 83 40 01 00 00           -  movzx eax,byte ptr [rbx+00000140]
15DD4F57: 85 C0                          -  test eax,eax
15DD4F59: 0F 84 C2 00 00 00              -  je HealthHaver:333+961
15DD4F5F: F3 0F 10 83 10 01 00 00        -  movss xmm0,[rbx+00000110]
15DD4F67: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
15DD4F6B: F2 0F 11 85 38 FF FF FF        -  movsd [rbp-000000C8],xmm0
15DD4F73: B9 A0 5A 8D 23                 -  mov ecx,238D5AA0
15DD4F78: 48 83 EC 20                    -  sub rsp,20
15DD4F7C: 49 BB 20 25 79 05 00 00 00 00  -  mov r11,System:Object:__icall_wrapper_mono_object_new_ptrfree_box
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"loading script_32bit"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//zhuo
[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
define(invincible,HealthHaver:332223)
define(oneHit,HealthHaver:332223+4A7)

assert(invincible,55 8B EC 53 57)
assert(oneHit,D9 45 0C DE E9)

registersymbol(invincible)
registersymbol(oneHit)

[DISABLE]
unregistersymbol(invincible)
unregistersymbol(oneHit)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"invincible"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//zhuo
[ENABLE]
alloc(code,100)
label(exit)
label(return)

code:
  push ebx
  mov ebx,[ebp+08]
  cmp byte ptr [ebx+C8],0
  je exit
  pop ebx
  ret

exit:
  pop ebx
  push ebp
  mov ebp,esp
  push ebx
  push edi
  jmp return

invincible:
  jmp code
return:

[DISABLE]
invincible:
  db 55 8B EC 53 57

dealloc(code)

{
// ORIGINAL CODE - INJECTION POINT: HealthHaver:333

529ACE72: 00 00              -  add [eax],al
529ACE74: 68 68 83 F0 14     -  push 14F08368
529ACE79: E9 AA 31 F9 B1     -  jmp 04940028
529ACE7E: 00 00              -  add [eax],al
529ACE80: 68 28 D2 E8 14     -  push 14E8D228
529ACE85: E9 9E 31 F9 B1     -  jmp 04940028
529ACE8A: 00 00              -  add [eax],al
529ACE8C: 68 68 D2 E8 14     -  push 14E8D268
529ACE91: E9 92 31 F9 B1     -  jmp 04940028
529ACE96: 00 00              -  add [eax],al
// ---------- INJECTING HERE ----------
529ACE98: 55                 -  push ebp
529ACE99: 8B EC              -  mov ebp,esp
529ACE9B: 53                 -  push ebx
529ACE9C: 57                 -  push edi
// ---------- DONE INJECTING  ----------
529ACE9D: 56                 -  push esi
529ACE9E: 81 EC 8C 00 00 00  -  sub esp,0000008C
529ACEA4: 8B 5D 08           -  mov ebx,[ebp+08]
529ACEA7: D9 EE              -  fldz
529ACEA9: D9 5D EC           -  fstp dword ptr [ebp-14]
529ACEAC: D9 83 98 00 00 00  -  fld dword ptr [ebx+00000098]
529ACEB2: D9 5D 94           -  fstp dword ptr [ebp-6C]
529ACEB5: D9 45 94           -  fld dword ptr [ebp-6C]
529ACEB8: DD 5D 88           -  fstp qword ptr [ebp-78]
529ACEBB: 83 EC 0C           -  sub esp,0C
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"oneHit"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//zhuo
[ENABLE]
alloc(code,100)
label(return)

code:
  fld dword ptr [ebp+0C]
  fsubp st(1),st(0)
  cmp byte ptr [ebx+C8],0
  jne return
  fsub dword ptr [ebx+98]
  jmp return

oneHit:
  jmp code
return:

[DISABLE]
oneHit:
  db D9 45 0C DE E9

dealloc(code)

{
// ORIGINAL CODE - INJECTION POINT: HealthHaver:333+4A7

529AD31C: D9 45 0C              -  fld dword ptr [ebp+0C]
529AD31F: 83 EC 08              -  sub esp,08
529AD322: 83 EC 04              -  sub esp,04
529AD325: D9 1C 24              -  fstp dword ptr [esp]
529AD328: 83 EC 04              -  sub esp,04
529AD32B: D9 1C 24              -  fstp dword ptr [esp]
529AD32E: E8 3D 66 53 B2        -  call 04EE3970
529AD333: 83 C4 10              -  add esp,10
529AD336: D9 5D EC              -  fstp dword ptr [ebp-14]
529AD339: D9 83 98 00 00 00     -  fld dword ptr [ebx+00000098]
// ---------- INJECTING HERE ----------
529AD33F: D9 45 0C              -  fld dword ptr [ebp+0C]
529AD342: DE E9                 -  fsubp st(1),st(0)
// ---------- DONE INJECTING  ----------
529AD344: D9 9B 98 00 00 00     -  fstp dword ptr [ebx+00000098]
529AD34A: 0F B6 83 C8 00 00 00  -  movzx eax,byte ptr [ebx+000000C8]
529AD351: 85 C0                 -  test eax,eax
529AD353: 0F 84 6D 00 00 00     -  je HealthHaver:333+52e
529AD359: D9 83 98 00 00 00     -  fld dword ptr [ebx+00000098]
529AD35F: DD 9D 70 FF FF FF     -  fstp qword ptr [ebp-00000090]
529AD365: 83 EC 0C              -  sub esp,0C
529AD368: 68 04 22 39 21        -  push 21392204
529AD36D: E8 A6 42 47 B2        -  call System:Object:__icall_wrapper_mono_object_new_ptrfree_box
529AD372: 83 C4 10              -  add esp,10
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
