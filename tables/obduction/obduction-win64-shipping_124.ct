<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>200</ID>
      <Description>"Teleport"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(FindMovablePosition,Obduction-Win64-Shipping.exe,0F 28 8A 30 01 00 00 48)
alloc(newmem,$1000,FindMovablePosition)
alloc(position_ptr,8)
label(code)
label(return)

newmem:

code:
  mov [position_ptr],rdx
  movaps xmm1,[rdx+00000130]
  jmp return

FindMovablePosition:
  jmp code
  nop
  nop
return:
registersymbol(FindMovablePosition)
registersymbol(position_ptr)
[DISABLE]

FindMovablePosition:
  db 0F 28 8A 30 01 00 00

unregistersymbol(position_ptr)
unregistersymbol(FindMovablePosition)
dealloc(newmem)
dealloc(position_ptr)
{
// ORIGINAL CODE - INJECTION POINT: "Obduction-Win64-Shipping.exe"+FF65C3

"Obduction-Win64-Shipping.exe"+FF6596: 0F 28 49 40              -  movaps xmm1,[rcx+40]
"Obduction-Win64-Shipping.exe"+FF659A: 0F 5C 8A 40 01 00 00     -  subps xmm1,[rdx+00000140]
"Obduction-Win64-Shipping.exe"+FF65A1: F3 0F 11 44 24 70        -  movss [rsp+70],xmm0
"Obduction-Win64-Shipping.exe"+FF65A7: F3 0F 10 44 24 70        -  movss xmm0,[rsp+70]
"Obduction-Win64-Shipping.exe"+FF65AD: 0F C6 C0 00              -  shufps xmm0,xmm0,00
"Obduction-Win64-Shipping.exe"+FF65B1: 0F 54 0D 68 C2 90 01     -  andps xmm1,[Obduction-Win64-Shipping.exe+2902820]
"Obduction-Win64-Shipping.exe"+FF65B8: 0F C2 C1 01              -  cmpps xmm0,xmm1,01
"Obduction-Win64-Shipping.exe"+FF65BC: 0F 50 C0                 -  movmskps eax,xmm0
"Obduction-Win64-Shipping.exe"+FF65BF: 85 C0                    -  test eax,eax
"Obduction-Win64-Shipping.exe"+FF65C1: 75 A6                    -  jne Obduction-Win64-Shipping.exe+FF6569
// ---------- INJECTING HERE ----------
"Obduction-Win64-Shipping.exe"+FF65C3: 0F 28 8A 30 01 00 00     -  movaps xmm1,[rdx+00000130]
// ---------- DONE INJECTING  ----------
"Obduction-Win64-Shipping.exe"+FF65CA: 48 8D 44 24 40           -  lea rax,[rsp+40]
"Obduction-Win64-Shipping.exe"+FF65CF: 0F 28 82 20 01 00 00     -  movaps xmm0,[rdx+00000120]
"Obduction-Win64-Shipping.exe"+FF65D6: 4C 8D 41 78              -  lea r8,[rcx+78]
"Obduction-Win64-Shipping.exe"+FF65DA: 0F 29 44 24 40           -  movaps [rsp+40],xmm0
"Obduction-Win64-Shipping.exe"+FF65DF: 48 8B D7                 -  mov rdx,rdi
"Obduction-Win64-Shipping.exe"+FF65E2: 0F 28 C1                 -  movaps xmm0,xmm1
"Obduction-Win64-Shipping.exe"+FF65E5: 48 89 44 24 28           -  mov [rsp+28],rax
"Obduction-Win64-Shipping.exe"+FF65EA: 0F C6 C1 55              -  shufps xmm0,xmm1,55
"Obduction-Win64-Shipping.exe"+FF65EE: 48 8D 44 24 30           -  lea rax,[rsp+30]
"Obduction-Win64-Shipping.exe"+FF65F3: F3 0F 11 4C 24 30        -  movss [rsp+30],xmm1
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>201</ID>
          <Description>"AOB Teleport"</Description>
          <LastState Value="67 02 E5 45 A9 EE 77 C5 A8 C9 EF C3" RealAddress="B20C1AB0"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>Array of byte</VariableType>
          <ByteLength>12</ByteLength>
          <Address>position_ptr</Address>
          <Offsets>
            <Offset>130</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>204</ID>
          <Description>"X"</Description>
          <LastState Value="7328.300293" RealAddress="B20C1AB0"/>
          <VariableType>Float</VariableType>
          <Address>position_ptr</Address>
          <Offsets>
            <Offset>130</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>202</ID>
          <Description>"Y"</Description>
          <LastState Value="-3966.91626" RealAddress="B20C1AB4"/>
          <VariableType>Float</VariableType>
          <Address>position_ptr</Address>
          <Offsets>
            <Offset>134</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>203</ID>
          <Description>"Z"</Description>
          <LastState Value="-479.5754395" RealAddress="B20C1AB8"/>
          <VariableType>Float</VariableType>
          <Address>position_ptr</Address>
          <Offsets>
            <Offset>138</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>72404</ID>
          <Description>"no-clip"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(inputInfoReadAOB,Obduction-Win64-Shipping.exe,F3 0F 10 4B 50 48 8B CB)
registersymbol(inputInfoReadAOB)

label(fDirection)
registersymbol(fDirection)

alloc(newmem,2048,inputInfoReadAOB) //"Obduction-Win64-Shipping.exe"+13E7860)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp rcx,33 //rcx==33, r8==99
jne @f
movss xmm1,[rbx+50]
movss [fDirection],xmm1
jmp originalcode

@@:
cmp rcx,34 //rcx==34, r8==9c
jne @f
movss xmm1,[rbx+50]
movss [fDirection+4],xmm1

originalcode:
movss xmm1,[rbx+50]

exit:
jmp returnhere

///
fDirection:
dq 0
///

inputInfoReadAOB: //"Obduction-Win64-Shipping.exe"+13E7860:
jmp newmem
returnhere:

///*****************************************///

aobscanmodule(someCamInfoReadAOB,Obduction-Win64-Shipping.exe,0F 10 82 20 05 00 00 41 0F 11 80 60 02 00 00)
registersymbol(someCamInfoReadAOB)

label(pSomeCamInfo)
registersymbol(pSomeCamInfo)
label(vx)
registersymbol(vx)
label(vy)
registersymbol(vy)

alloc(newmem2,2048,someCamInfoReadAOB) //"Obduction-Win64-Shipping.exe"+13EBED7)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSomeCamInfo],r8
mov [pSomeCamInfo+8],rdx

//direction x
movss xmm0,[rdx+530]
movss [vx+4],xmm0       //y
movss xmm0,[rdx+520]
movss [vx],xmm0         //x

//direction y
movss xmm0,[rdx+52c]
movss [vy],xmm0         //x
movss xmm0,[rdx+53c]
movss [vy+4],xmm0       //y
movss xmm0,[rdx+54c]
movss [vy+8],xmm0       //z

originalcode2:
movups xmm0,[rdx+00000520]

exit2:
jmp returnhere2

///
pSomeCamInfo:
dq 0
dq 0
vx:
dq 0
dq 0
vy:
dq 0
dq 0
///

someCamInfoReadAOB: //"Obduction-Win64-Shipping.exe"+13EBED7:
jmp newmem2
nop
nop
returnhere2:

///*****************************************///

//aobscanmodule(someCoordWriteMovementRetAOB,Obduction-Win64-Shipping.exe,80 3D ** ** ** ** 00 74 ** F6 83 ** ** ** ** 01 74)
//registersymbol(someCoordWriteMovementRetAOB)
aobscanmodule(someCoordWriteAOB,Obduction-Win64-Shipping.exe,44 0F 29 AB 30 01 00 00 44 0F 29 BB 40 01 00 00)
registersymbol(someCoordWriteAOB)

label(bNoClip)
registersymbol(bNoClip)
label(fNoClipSpeedMultiplier)
registersymbol(fNoClipSpeedMultiplier)

alloc(newmem3,2048,someCoordWriteAOB) //"Obduction-Win64-Shipping.exe"+100D388)
label(returnhere3)
label(originalcode3)
label(exit3)

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
//mov byte ptr [bNoClip],1
cmp byte ptr [bNoClip],1
jne originalcode3
cmp [position_ptr],rbx
jne originalcode3

//freeze coord
movaps xmm13,[rbx+130]

//exit if not moving
//push rax
//mov rax,someCoordWriteMovementRetAOB
//cmp [rsp+1d0],rax
//pop rax
//jne originalcode3

//store registers, xmms
push rax
push r8
push r9
sub rsp,16
movdqu dqword [rsp],xmm3
sub rsp,16
movdqu dqword [rsp],xmm4

//do y
//get y direction
mov r8,fDirection
test r8,r8
jz @f
movss xmm4,[r8+4]
shufps xmm4,xmm4,00 //broadcast

//apply speed
mov eax,(float)8
movd xmm3,eax
shufps xmm3,xmm3,00 //broadcast
mulps xmm4,xmm3
movss xmm3,[fNoClipSpeedMultiplier]
shufps xmm3,xmm3,00 //broadcast
mulps xmm4,xmm3

//apply vector
mov r9,vy
test r9,r9
jz @f
movups xmm3,[r9]
mulps xmm4,xmm3

//update new coord
addps xmm13,xmm4

//do x
//get x direction
movss xmm4,[r8]
shufps xmm4,xmm4,e0 //copy to 2nd

//apply speed
mov eax,(float)8
movd xmm3,eax
shufps xmm3,xmm3,e0 //copy to 2nd
mulps xmm4,xmm3
movss xmm3,[fNoClipSpeedMultiplier]
shufps xmm3,xmm3,00 //broadcast
mulps xmm4,xmm3

//apply vector
mov r9,vx
test r9,r9
jz @f
movups xmm3,[r9]
mulps xmm4,xmm3

//update new coord
addps xmm13,xmm4

@@:
//restore registers, xmms
//end
movdqu xmm4,dqword [rsp]
add rsp,16
movdqu xmm3,dqword [rsp]
add rsp,16
pop r9
pop r8
pop rax

originalcode3:
movaps [rbx+00000130],xmm13

exit3:
jmp returnhere3

///
bNoClip:
dd 0
fNoClipSpeedMultiplier:
dd (float)1
///

someCoordWriteAOB: //"Obduction-Win64-Shipping.exe"+100D388:
jmp newmem3
nop
nop
nop
returnhere3:

///*****************************************///

label(bEndThread_ObductionWin64Shipping_keylistener_mem)
registersymbol(bEndThread_ObductionWin64Shipping_keylistener_mem)

alloc(ObductionWin64Shipping_keylistener_mem,2048,"Obduction-Win64-Shipping.exe")
registersymbol(ObductionWin64Shipping_keylistener_mem)
createthread(ObductionWin64Shipping_keylistener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)
label(fTempZDirection)
label(fTempNoClipSpeedMultiplier)
label(fNoClipSpeedMultiplierMod1)
registersymbol(fNoClipSpeedMultiplierMod1)
label(fNoClipSpeedMultiplierMod2)
registersymbol(fNoClipSpeedMultiplierMod2)

ObductionWin64Shipping_keylistener_mem:
sub rsp,28

keylistenerstart:

cmp byte ptr [bNoClip],1
je @f
jmp keylistenerend

@@:
mov dword ptr [fTempNoClipSpeedMultiplier],(float)1

mov rcx,10 //SHIFT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov ecx,[fNoClipSpeedMultiplierMod1]
mov [fTempNoClipSpeedMultiplier],ecx

@@:
mov rcx,12 //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov ecx,[fNoClipSpeedMultiplierMod2]
mov [fTempNoClipSpeedMultiplier],ecx

@@:

keylistenerend:
mov ecx,[fTempNoClipSpeedMultiplier]
mov [fNoClipSpeedMultiplier],ecx
mov rcx,#100
call Sleep
cmp dword ptr [bEndThread_ObductionWin64Shipping_keylistener_mem],1
jne keylistenerstart

keylistenerexit:
add rsp,28
mov dword ptr [bEndThread_ObductionWin64Shipping_keylistener_mem],2
ret

///
bEndThread_ObductionWin64Shipping_keylistener_mem:
dd 0
fTempZDirection:
dd 0
fTempNoClipSpeedMultiplier:
dd 1
fNoClipSpeedMultiplierMod1: //shift key pressed speed
dd (float)2
fNoClipSpeedMultiplierMod2: //alt key pressed speed
dd (float)10
///




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_ObductionWin64Shipping_keylistener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_ObductionWin64Shipping_keylistener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_ObductionWin64Shipping_keylistener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_ObductionWin64Shipping_keylistener_mem:
//dd 1

///*****************************************///

dealloc(newmem)
inputInfoReadAOB: //"Obduction-Win64-Shipping.exe"+13E7860:
db F3 0F 10 4B 50
//Alt: movss xmm1,[rbx+50]

unregistersymbol(fDirection)

///*****************************************///

dealloc(newmem2)
someCamInfoReadAOB: //"Obduction-Win64-Shipping.exe"+13EBED7:
db 0F 10 82 20 05 00 00
//Alt: movups xmm0,[rdx+00000520]

unregistersymbol(pSomeCamInfo)

///*****************************************///

dealloc(newmem3)
someCoordWriteAOB: //"Obduction-Win64-Shipping.exe"+100D388:
db 44 0F 29 AB 30 01 00 00
//Alt: movaps [rbx+00000130],xmm13

unregistersymbol(bNoClip)
unregistersymbol(fNoClipSpeedMultiplier)


///*****************************************///

unregistersymbol(bEndThread_ObductionWin64Shipping_keylistener_mem)

dealloc(ObductionWin64Shipping_keylistener_mem)
unregistersymbol(ObductionWin64Shipping_keylistener_mem)
unregistersymbol(fNoClipSpeedMultiplierMod1)
unregistersymbol(fNoClipSpeedMultiplierMod2)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>72405</ID>
              <Description>"status (Alt+E: NoClip, Alt+Q: Disable)"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disable
1:NoClip
</DropDownList>
              <LastState Value="0" RealAddress="151BD0106"/>
              <VariableType>Byte</VariableType>
              <Address>bNoClip</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>18</Key>
                    <Key>69</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                  <ActivateSound>Activate</ActivateSound>
                  <DeactivateSound/>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>18</Key>
                    <Key>81</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                  <ActivateSound>Deactivate</ActivateSound>
                  <DeactivateSound/>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>72406</ID>
              <Description>"shift key x?"</Description>
              <LastState Value="3.387904724E-38" RealAddress="151BA00E9"/>
              <VariableType>Float</VariableType>
              <Address>fNoClipSpeedMultiplierMod1</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>72407</ID>
              <Description>"alt key x?"</Description>
              <LastState Value="1.084202172E-19" RealAddress="151BA00ED"/>
              <VariableType>Float</VariableType>
              <Address>fNoClipSpeedMultiplierMod2</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>215</ID>
      <Description>"Run Speed"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(ShittySpeed,Obduction-Win64-Shipping.exe,F3 0F 11 07 48 83 C4 20 5F C3 CC CC CC CC CC CC CC CC CC CC CC CC CC 48 89 5C 24 08 57 48 83 EC 20 48 83 7A 20 00 49 8B F8 48 8B DA C6 44 24 40 00 48 8B CA)
alloc(newmem,$1000,ShittySpeed)
alloc(speed,8)
alloc(myvar,8,ShittySpeed)
label(code)
label(return)

newmem:
  cmp [rdi],(float)0.25
  jne @f
  push rax
  mov rax,myvar
  mov [rax],rdi
  add [rax],8
  jmp code
@@:
  push rax
  mov rax,myvar
  cmp [rax],rdi
  jne code
  mov rax,speed
  movss xmm0,[rax]
code:
  pop rax
  movss [rdi],xmm0
  add rsp,20
  jmp return

myvar:
  dq 0

speed:
  dd (float)0.8


ShittySpeed:
  jmp newmem
  nop
  nop
  nop
return:

registersymbol(speed)
registersymbol(ShittySpeed)
registersymbol(myvar)
[DISABLE]

ShittySpeed:
  db F3 0F 11 07 48 83 C4 20
unregistersymbol(myvar)
unregistersymbol(speed)
unregistersymbol(ShittySpeed)
dealloc(newmem)
dealloc(myvar)
dealloc(speed)
{
// ORIGINAL CODE - INJECTION POINT: "Obduction-Win64-Shipping.exe"+159B9E9

"Obduction-Win64-Shipping.exe"+159B9BE: 33 C9                    -  xor ecx,ecx
"Obduction-Win64-Shipping.exe"+159B9C0: F3 0F 10 54 24 38        -  movss xmm2,[rsp+38]
"Obduction-Win64-Shipping.exe"+159B9C6: 48 85 C0                 -  test rax,rax
"Obduction-Win64-Shipping.exe"+159B9C9: F3 0F 10 4C 24 40        -  movss xmm1,[rsp+40]
"Obduction-Win64-Shipping.exe"+159B9CF: F3 0F 10 44 24 48        -  movss xmm0,[rsp+48]
"Obduction-Win64-Shipping.exe"+159B9D5: 0F 95 C1                 -  setne cl
"Obduction-Win64-Shipping.exe"+159B9D8: 48 03 C8                 -  add rcx,rax
"Obduction-Win64-Shipping.exe"+159B9DB: 48 89 4B 20              -  mov [rbx+20],rcx
"Obduction-Win64-Shipping.exe"+159B9DF: E8 6C 68 B7 FF           -  call Obduction-Win64-Shipping.exe+1112250
"Obduction-Win64-Shipping.exe"+159B9E4: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
// ---------- INJECTING HERE ----------
"Obduction-Win64-Shipping.exe"+159B9E9: F3 0F 11 07              -  movss [rdi],xmm0
"Obduction-Win64-Shipping.exe"+159B9ED: 48 83 C4 20              -  add rsp,20
// ---------- DONE INJECTING  ----------
"Obduction-Win64-Shipping.exe"+159B9F1: 5F                       -  pop rdi
"Obduction-Win64-Shipping.exe"+159B9F2: C3                       -  ret
"Obduction-Win64-Shipping.exe"+159B9F3: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F4: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F5: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F6: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F7: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F8: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9F9: CC                       -  int 3
"Obduction-Win64-Shipping.exe"+159B9FA: CC                       -  int 3
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>217</ID>
          <Description>"&gt;"</Description>
          <VariableType>Float</VariableType>
          <Address>speed</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>VafVaf</Name>
      <Address>140A77B28</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ShittySpeed</Name>
      <Address>14069B9E9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FindMovablePosition</Name>
      <Address> 140B965C3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inputInfoReadAOB</Name>
      <Address> 140F81C70</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>someCamInfoReadAOB</Name>
      <Address> 140F863B7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vx</Name>
      <Address>151BC0083</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vy</Name>
      <Address>151BC0093</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>someCoordWriteAOB</Name>
      <Address> 140BA7B28</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
