<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"GodMode"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentHealth,00000018)
define(CompareTo,00000134)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Health)
label(Compare)
label(Godmode)
registersymbol(Health)
aobscan(Healthaob,8b 46 18 d9 5e 1c d9 86 5c 03 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
Godmode:
popfd
mov [esi+CurrentHealth],(float)1000000
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]

jmp returnhere

Compare:
pushfd
cmp [esi+CompareTo],0
je Godmode
popfd

originalcode:
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]

exit:
jmp returnhere

Healthaob:
Health:
jmp Compare
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Health:
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]
//Alt: db 8B 46 18 D9 5E 1C
unregistersymbol(Health)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Godly Energy"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentEnergy,0000002C)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Energy)
registersymbol(Energy)
aobscan(Energyaob,d8 46 2c d8 65 0c d9 1c 24)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+CurrentEnergy],(float)1000000

originalcode:
fadd dword ptr [esi+CurrentEnergy]
fsub dword ptr [ebp+0C]

exit:
jmp returnhere

Energyaob:
Energy:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Energy:
fadd dword ptr [esi+CurrentEnergy]
fsub dword ptr [ebp+0C]
//Alt: db D8 46 2C D8 65 0C
unregistersymbol(Energy)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"One Hit Kill"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentHealth,00000018)
define(CompareTo,00000134)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(HealthDecreaser)
label(Compare)
label(OneHitKill)
registersymbol(HealthDecreaser)
aobscan(HealthDecreaseraob,d9 59 18 d9 44 24 04 d8 41 20 d9 59 20)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
OneHitKill:
popfd
fstp dword ptr [ecx+CurrentHealth]
mov [ecx+CurrentHealth],(float)0
fld dword ptr [esp+04]

jmp returnhere

Compare:
pushfd
cmp [ecx+CompareTo],0
jne OneHitKill
popfd

originalcode:
fstp dword ptr [ecx+CurrentHealth]
fld dword ptr [esp+04]

exit:
jmp returnhere

HealthDecreaseraob:
HealthDecreaser:
jmp Compare
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
HealthDecreaser:
fstp dword ptr [ecx+CurrentHealth]
fld dword ptr [esp+04]
//Alt: db D9 59 18 D9 44 24 04
unregistersymbol(HealthDecreaser)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Gold"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentGold,00000948)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(PlayerGold)
label(Gold)
registersymbol(PlayerGold)
registersymbol(Gold)
aobscan(Goldaob,8b 81 48 09 00 00 c3 81 c1 48 09 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[PlayerGold]
mov [ecx+CurrentGold],edx
mov eax,[ecx+CurrentGold]
pop edx

jmp returnhere

originalcode:
mov eax,[ecx+CurrentGold]

exit:
jmp returnhere

PlayerGold:
dd 0

Goldaob:
Gold:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Gold:
mov eax,[ecx+CurrentGold]
//Alt: db 8B 81 48 09 00 00
unregistersymbol(PlayerGold)
unregistersymbol(Gold)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Player Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerGold</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Attributes"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentAttributes,00000038)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(PlayerAttributes)
label(Attributes)
registersymbol(PlayerAttributes)
registersymbol(Attributes)
aobscan(Attributesaob,8b 4d fc ** ** 74 ** e8 9c 13 f9 ff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[PlayerAttributes]
mov [ecx+CurrentAttributes],edx
mov ecx,[ebp-04]
cmp ecx,esi
pop edx

jmp returnhere

originalcode:
mov ecx,[ebp-04]
cmp ecx,esi

exit:
jmp returnhere

PlayerAttributes:
dd 0

Attributesaob:
Attributes:
jmp newmem
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Attributes:
mov ecx,[ebp-04]
cmp ecx,esi
//Alt: db 8B 4D FC 3B CE
unregistersymbol(Attributes)
unregistersymbol(PlayerAttributes)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Player Attributes"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerAttributes</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Skills"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentSkills,0000003C)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(PlayerSkills)
label(Skills)
registersymbol(PlayerSkills)
registersymbol(Skills)
aobscan(Skillsaob,be c0 27 09 00 39 73 38 7f **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[PlayerSkills]
mov [ecx+CurrentSkills],edx
mov esi,000927C0
pop edx

originalcode:
mov esi,000927C0

exit:
jmp returnhere

PlayerSkills:
dd 0

Skillsaob:
Skills:
jmp newmem
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Skills:
mov esi,000927C0
//Alt: db BE C0 27 09 00
unregistersymbol(Skills)
unregistersymbol(PlayerSkills)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Player Skills"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerSkills</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Experience &amp; Level"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentLevel,00000030)
define(CurrentExperience,00000034)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(PlayerExperience)
label(PlayerLevel)
label(Level)
registersymbol(PlayerExperience)
registersymbol(PlayerLevel)
registersymbol(Level)
aobscan(Levelaob,8b 41 30 3b 41 2c 1b c0 40 c3)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[PlayerLevel]
mov [ecx+CurrentLevel],edx
mov eax,[ecx+CurrentLevel]
cmp eax,[ecx+2C]
pop edx
push esi
mov esi,[PlayerExperience]
mov [ecx+CurrentExperience],esi
pop esi

jmp returnhere

originalcode:
mov eax,[ecx+CurrentLevel]
cmp eax,[ecx+2C]

exit:
jmp returnhere

PlayerLevel:
dd 0

PlayerExperience:
dd 0

Levelaob:
Level:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Level:
mov eax,[ecx+CurrentLevel]
cmp eax,[ecx+2C]
//Alt: db 8B 41 30 3B 41 2C
unregistersymbol(Level)
unregistersymbol(PlayerLevel)
unregistersymbol(PlayerExperience)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Player Level"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerLevel</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Player Experience"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerExperience</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Health</Name>
      <Address>00C280BE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Energy</Name>
      <Address>00C281E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HealthDecreaser</Name>
      <Address>00C2754D</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
