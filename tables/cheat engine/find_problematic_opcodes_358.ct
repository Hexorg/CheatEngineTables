<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">osvsV!!Q(?T[/VM?Dor5=Fty7f^;UnX.UgBs2a5aBxY]ES[^XHY$L%QSOhb,z#;:(i)o]zC#ecZNMw,Y@L+}R?A{pPAPNT@Hww-MTqO2Ye^g7D.yY!vYxQ$X/[l$g04w6DwNZ0!$V?G*[nI4@R1wbVx[(+N1T$4tubJ/%crV}gDuD:7?=c0/QTGg+-,ol_5eq1n+xitdrxGI)F9?4@A)tdqb,:O9$MQb:8Du)GfX%G@Q1H3HQudI5:}R1wps*a(xdR9*15THcIddIEb7w;J2!R*(:{645fB:Ae9z(dPJIQaF/)K1l)c@%p1=.Vad59Y0J3XFrCMk-uwhzqi=bXGcu*n+yHrB2B(DGT(SBfXl[r?5[MvOi,^7Ec0rI{Ib]chtFp-7DA)m*M;MrNS+knLoR@2Ou_Z[1gpw2hXr0WX%BPNGq$Ga(K)[Y5ix[@ZZ_)OCOS!/j[gaa4)HN]-^[Ma42voXv:G(7)M-uT]^rTB2P?gbf]:lEvV93Yqh//k?zFA6316,^v#WaMQl@]9HW+z]G{X4F[K</UDF1>
  </Forms>
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>
address    = 0x00400000  -- start address
endAddress = 0x00A7D000  -- end   address

function addString(tab,s)

  ---[[--
  -- already known problems

  -- magic characters     ^$()%.[]*+-?

  if
     s:match("setn?[elgabsp]") -- DISASM missing 'byte ptr'
  or s:match("wait:fstcw")     -- DISASM or ASM
  or s:match("loop")
  or s:match("sfence")
  or s:match("fnclex")         -- DISASM or ASM
  or s:match("shld e.x,cl")    -- DISASM , example: (0FA5 D0 - shld eax,cl) should be SHLD EAX,EDX,CL
  or s:match("shld e.i,cl")    -- DISASM
  or s:match("bsr ecx,cx")     -- DISASM should be BSR ECX,ECX
  or s:match("fld2e")          -- DISASM should be FLDL2E
  or s:match("- D0 24 61   -") -- DISASM should be SHL BYTE PTR [ECX],1
  or s:match("fiadd eax")      -- DISASM should be FADDP ST(0),ST(0)
  or s:match("F3 0F52 ..  . rsqrss xmm")     -- DISASM , example: (F3 0F52 D2  - rsqrss xmm2,xmm2) should be RSQRTSS XMM2,XMM2

  or s:match("f2xm1")          -- ASM doesn't recognize
  or s:match("fyl2xp1")        -- ASM doesn't recognize
  or s:match("rsqrtps xmm")    -- ASM doesn't recognize
  or s:match("rcpss xmm")      -- ASM doesn't recognize
  or s:match("rcpps xmm")      -- ASM doesn't recognize
  or s:match("pmulhuw x?mm")   -- ASM doesn't recognize
  or s:match("psubsb x?mm")    -- ASM doesn't recognize
  or s:match("psubsw x?mm")    -- ASM doesn't recognize

  or s:match("prefetcht1 %[")  -- ASM doesn't recognize


  -- ignore those (false positives)
  or s:match("imul e")
  or s:match("and .[lh]")
  or s:match("add .[lh]")
  or s:match("arpl gs")

  or s:match("prefetchnta")
  or s:match("bound")

  or s:match("jecxz")
  or s:match("lock db")
  or s:match("repne")
  or s:match("repe")
  or s:match("sldt")

  or s:match("fi?comp? [er]")
  or s:match("fi?ld [er]")
  or s:match("fi?stp? [er]")

  or s:match("fsubr? st.0.")
  or s:match("fdivr? st.0.")
  or s:match("fucomp st")

  or s:match("lidt ecx")

  or s:match("lea e..,e")
  or s:match("lds e..,e")

  or s:match("jmp.+:.*")
  or s:match("call.+:.*")
  or s:match("- 67 FF 1F  -") --  call
  or s:match("syscall")

  or s:match("invplg")
  or s:match("incd")
  or s:match("rcl")
  or s:match("rcr")

  or s:match("%+%*2")
  or s:match("%+%*4")
  or s:match("%+%*8")
  then return end
  --]]--

  table.insert(tab,s)
end

UDF1.show()
breakthis = false

--##########################################
function search()
autoAssemble( 'globalalloc(globalyallocated,2048)' )

local counter = 0
local stringbuffer = {}

UDF1.pb.Max = endAddress
UDF1.pb.Min = address
UDF1.memo.clear()

  while (address &lt; endAddress) and (breakthis == false) do
   repeat
    counter = counter + 1
    if counter % 1000 == 0 then
      counter = 1
      UDF1.pb.Position = address
      UDF1.Caption = string.format('%08X',address)

      if #stringbuffer ~= 0 then
        UDF1.memo.append( table.concat(stringbuffer,"\r\n") )
        stringbuffer = {}
      end

      processMessages()
    end


    disstring = disassemble(address)
    size = getInstructionSize(address)
    _,opcode = splitDisassembledString(disstring)

    if opcode=='?? ' then address = address + 0x1000 break end

    address = address + size

    success =autoAssemble('globalyallocated:\r\n'..opcode)
    if success == false then addString(stringbuffer,disstring) end

   until true
  end --while
  UDF1.CEButton2.Enabled = true
end
--##########################################

function startsearching(sender)
  if getOpenedProcessID()~=0 then

    local startAddr = tonumber('0x'..UDF1.CEEdit1.Text)
    local endAddr   = tonumber('0x'..UDF1.CEEdit2.Text)

    if startAddr==nil then
      UDF1.CEEdit1.Color = 0xC6C6FF
      return
    end
    UDF1.CEEdit1.Color = 0xFFFFFF

    if endAddr==nil then
      UDF1.CEEdit2.Color = 0xC6C6FF
      return
    end
    UDF1.CEEdit2.Color = 0xFFFFFF

    address    = startAddr  -- start address
    endAddress = endAddr    -- end   address

    breakthis = false
    UDF1.CEButton2.Enabled = false
    search()
  else
    UDF1.Caption = 'open process'
  end
end

function stopsearching(sender)
  breakthis = true
  UDF1.pb.Position = UDF1.pb.Max
  UDF1.CEButton2.Enabled = true
  return caNone --Possible options: caHide, caFree, caMinimize, caNone
end


</LuaScript>
</CheatTable>
