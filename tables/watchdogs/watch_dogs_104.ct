<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Player"</Description>
      <Options moHideChildren="1"/>
      <Color>056524</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(_plx32)
registersymbol(_plx32)
aobscan(pldd,F? ?? 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 06 00 00 00 80 01 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 02 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00)

pldd:
_plx32:
 
[DISABLE]
unregistersymbol(_plx32)
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Xp"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_plx32+A4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Skills Points"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_plx32+9C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Money"</Description>
          <Options moHideChildren="1"/>
          <Color>1052B6</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(_monaah)
registersymbol(_monaah)
aobscan(monaah,68 A2 ?? ?? ?? ?F 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 06 00 00 00 80 01 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 02 00 00 00)
 
monaah:
_monaah:

[DISABLE]
unregistersymbol(_monaah)
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>40</ID>
              <Description>"Cash"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_monaah+9c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"Reputation"</Description>
      <Options moHideChildren="1"/>
      <Color>AC9D1A</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
globalalloc(_repu,8)
label(returnhere)
label(originalcode)
label(exit)
label(_repus)
registersymbol(_repus)
aobscan(repus,48 85 D2 74 F3 8B 42 10)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [_repu],0
je originalcode
push esi
mov esi,[_repu]
mov [rdx+10],esi
pop esi
originalcode:
mov eax,[rdx+10]
mov [_repu],eax
add rsp,20

exit:
jmp returnhere

repus+5:
_repus:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_repus:
mov eax,[rdx+10]
add rsp,20
dealloc(_repu)
unregistersymbol(_repus)
//Alt: db 8B 42 10 48 83 C4 20
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>""(600) = Angel- &lt;(-_-)&gt; - (-600) = Devil""</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_repu</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>52</ID>
      <Description>"Xp alternativ"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
globalalloc(_xpp,8)
label(returnhere)
label(originalcode)
label(exit)
label(_xp)
registersymbol(_xp)
aobscan(xppp,41 8B 80 ?? ?? ?? ?? 45 89 08 41 89 40 28)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp r9d,64
jb originalcode
add r9d,[_xpp]
originalcode:
mov [r8],r9d
mov [r8+28],eax

exit:
jmp returnhere

xppp+7:
_xp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_xp:
mov [r8],r9d
mov [r8+28],eax
dealloc(_xpp)
unregistersymbol(_xp)
//Alt: db 45 89 08 41 89 40 28
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>53</ID>
          <Description>"Set the amount - Reload last autosave"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_xpp</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Triggers Once Points below 100 and above 10 Or Money Below 10k"</Description>
      <Color>284AD5</Color>
      <VariableType>String</VariableType>
      <Length>10</Length>
      <Unicode>0</Unicode>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Money - And - Points"</Description>
      <Color>FD0013</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_points)
registersymbol(_points)
aobscan(points,41 29 B4 BC 9C 00 00 00 48 8D 15 C4 A8 4D 02 )

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [r12+rdi*4+0000009C],2710
jg originalcode
cmp [r12+rdi*4+0000009C],64
jb @f
mov [r12+rdi*4+0000009C],5F5E0FF
jmp originalcode
@@:
cmp [r12+rdi*4+0000009C],a
jg originalcode
mov [r12+rdi*4+0000009C],63
originalcode:
sub [r12+rdi*4+0000009C],esi

exit:
jmp returnhere

points:
_points:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_points:
sub [r12+rdi*4+0000009C],esi
unregistersymbol(_points)
//Alt: db 41 29 B4 BC 9C 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Build Stack - Build Something!"</Description>
      <Color>661104</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_build)
registersymbol(_build)
aobscan(aobbsi,44 01 6A 0C 8B 42 0C ?? ?? 0F 42 F8)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add [rdx+0C],14
originalcode:
add [rdx+0C],r13d
mov eax,[rdx+0C]

exit:
jmp returnhere

aobbsi:
_build:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_build:
add [rdx+0C],r13d
mov eax,[rdx+0C]
unregistersymbol(_build)
//Alt: db 44 01 6A 0C 8B 42 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Infinity Materials - triggers once below 20x"</Description>
      <Color>546406</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_items)
registersymbol(_items)
aobscan(aobitm,89 42 0C B0 01)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,14
jg originalcode
mov eax,63
originalcode:
mov [rdx+0C],eax
mov al,01

exit:
jmp returnhere

aobitm:
_items:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_items:
mov [rdx+0C],eax
mov al,01
unregistersymbol(_items)
//Alt: db 89 42 0C B0 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Infinity Ammo"</Description>
      <Color>570962</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_ammo)
registersymbol(_ammo)
aobscan(aamo,89 42 0C B0 01)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,12C
jg originalcode
mov [rdx+0C],3E7
jmp exit
originalcode:
mov [rdx+0C],eax
mov al,01

exit:
jmp returnhere

aamo:
_ammo:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_ammo:
mov [rdx+0C],eax
mov al,01
unregistersymbol(_ammo)
//Alt: db 89 42 0C B0 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Infinity Clip"</Description>
      <Color>00006A</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_clip)
registersymbol(_clip)
aobscan(aobclip,FF 8F 98 00 00 00 85 C0)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
inc [rdi+00000098]
originalcode:
dec [rdi+00000098]

exit:
jmp returnhere

aobclip:
_clip:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_clip:
dec [rdi+00000098]
unregistersymbol(_clip)
//Alt: db FF 8F 98 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>54</ID>
      <Description>"Solar Powered Battery "</Description>
      <Color>55A6E8</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_gb)
registersymbol(_gb)
aobscan(battery,48 8D ?? ?? ?? ?? ?? 89 81 ?? ?? ?? ?? 48 8D 4C 24 60)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
inc eax
cmp eax,6
jng originalcode
mov eax,6
originalcode:
mov [rcx+000000E8],eax

exit:
jmp returnhere

battery+7:
_gb:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_gb:
mov [rcx+000000E8],eax
unregistersymbol(_gb)
//Alt: db 89 81 E8 00 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Info about this table:
</Comments>
</CheatTable>
