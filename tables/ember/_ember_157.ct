<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <Files>
    <compact.lua Encoding="Ascii85">tyWEM/2DfO+?ylHAs0}yBiLC4y)_mFMzbkkZ-P3T90FrOStDDpObQg.ts8iMduK;W^?A#@@kA7B4mrb[H./G4^L?dBp35qF7H;O0,KT6%9_70GZfoGREKL*HYq6GgnHH7SCWsoo5sfvaTBMc!28M=TD$bWdrx3,P(26a[vxxz[F*9Ka3K6T#Is,4f%7gCmyskg[K-ZqvZ5Ix-tMl4cW*(Q$wu)^76t@6bLYqi*8/i@3xFy%UvWO{i+)InR2oOS+RU{pZwnJ5+Wu/KduXg5Da3HMNKu@8unZR?L(mB!xp:!c^=YTMrf][WNcMHTPuoGFTJ8jl1?xn)E-sZW1rWu!wZRIZl)y9Cth8t[O;S6%tqtOde9!fI@.uVTBtMHU=([t=?tg3BTANlnOthL!bm,(pfhh)D$$i0#4Af6tJKLoKN/5EF(69fwsjP+i0VVhH*@Eubt?S5Lqd76,X1[^O%A^SLD7U;uYdsVf6FJ+3+A$C4.UWAI)fucN!;R1$#.)uak!hloqHQ6f_q**m_Fu}o{c?XlvL=}e1amY5T!3mGaTuj1NV9Lc3C4Qe3VNQNzV$BMcxzn:/x7.L_$UgQ7PtgqtveuAx7mu6:LeV#)6L9s_t[PjFEULLXgO9^j:HYg/c(Ys2W!B.EoodLK#+hHF$syunpXFGa[)=Ao6%6%XaSPb5pI,m,0cjylQ/$}ll40f1#a/8+1^6B{:JRxY!_#D2L!.Y]*zk8C?EPI^YE,f.l}8:T*Zgw*WnD={,p1hBA+.[=.Y7]s,B715l]Fa$mn*3YEaoFw):CMNcN%xTP3@V/R4baHuJT#D,jXpPaQQWFSxkz4=_[_3!iDuwaM8w!q.0Zkz+uI#),a/s53O;U@HInzl90(*PY56$5FRNfQk36=Py2wP)_3.8bZT+^kd$Ug3N7?EH=Iv-sgK(PqITO2nhzpx#dLFbrb/UzA*z9f+e0EnDg@yQzt]%}c$7YuO@M[fYGidXAD,yoCv#ulC(GC+cZ8@qr%1KyuMP4Xs1221StS9v99qwU.BwH3E)g7HT336ms^sbn.U:CFk_L_4yD#H$M4T2*bPlmiTb#tB+z?w4P{TcLnNzRt_5u-Dqvu4+[;(80m{9]O^PB!=mxF%5Nq6=YXgW-cjuWvuo)[,v*8pw$qMdAhlJ];[^E(+#!^qUH@z=o/=qXjHqb1B(kc([iSPs1;mi!Q,cj(8N@xnS9Ozc1CEIDGX1,tYR(pv.Lw1{BM?T04C,,zdxe3omZo^2OSSR3.nsOXsB-X+5*TC#odB^xE,kGkH{1jF:q3,sm8]}R,m:%4PVHU_0pa=m{}p?lP0v-m2CL.r*]BY-vv5y_]fY7k*.gnQlbuWFXqGzYv6Fy)t10SMi9^MFP]9a*rTELIrc(ZaXL=huStv,)Xg3ln[+WR6dCiS3-?y)q(JucE]A)I:fEM2DcaCF0[)%{^p}rNG$HhHA1Mb{ta5VbtXrT5$8/6m@q1O2TNDs1(]T7J,pg-#$7[q8xMQ/m;$dLsdQ(4gmhqZ$W?,[jo$ppjV%);O.bJykwU.$JVdL$7#zRanriS:Th0%!Hi!#s3_zB=ot/ybwej6GKNgZJGUTNy6WQOSi+62f@TaZkAxR2MnwBX9RCsrbmD];:KQUV.QpFQ(}vDWLJ6K6,ga+wUD^c4ocOSYPC!ZnUpUIuZP84)4Q3Q,Vf(!43aNyP/{/3vDh?3T[mpE?Wk/x=O?tMR%DdLj0FbVZm]-$xA;0d8f.CrSGt{KihI9X+ct?j[(?kExXBg*@qMbY/,SspusdM5V=#Sf(W_!oF5]Cxbh%kO*E_=RR@B4SLTJT$8XG.BrTY?t$*HM.iZ?C9(R0cQw-Z*S:MrfOQ(J*XS$ObL?JpTg</compact.lua>
    <anystuff.lua Encoding="Ascii85">tylkV)=%5MS1MK7pKvl%w#mgL-Ly;w7nK5I8fZwM3CV:$VqX$d]!4fc3KeSq[PuvsY$r](j8T!.?7_Zsd,(4aF6$p_-P,(7ze=t.A{1#:+?^,7;DL!ENy,ES^k^2G/hqms7N2ug?Fr3hHLXge/NZBCI%QE-MqoVUvf$[-DEPb-Jj(TQrw;n0^)5;G2bVoPp,RkA1mN.$q1Lk}%-,*nlR-#+=C7J3MVvZ+4#=Pwte;S7r_Fn5QIK%S@0Sc0#yo^d0(C6#0L#XMJNP^TBM(f0l4X+F6m(nrcO0TR7e%}^RkK.elU$0N:=J}h?SO-[i#*I=1^7+!EX%nu)?QRh1z;8N!8%6AoSnQYB(?mMcExy@J;j$U!a7/trGVH%$5si_8m]xkASO;I;}-$3EG^CCN%/(P9}ZXE5,PBWY75mAGMvznOUb{SDE$]9nBrrKpNAA]VM@m?F#0qejVOHnJffdN/iY=1NAE:OH@H}=l77xI#LOyi7TGG(yP!0p)/z^C[yS[]2Efc?/rF_ZnOr(yEqemXp5Qur41ZGiKNx$#H=jwcXEQ=zxkv2dlC%-F[?y+7Ymv-lQv,XY=xTaZkb48WspfSQI[CX(7;Ble1BiDIUae10LgJ]b3dI^oy,gV_M[,cJalEl)zKyhBB@.^s3FpY[c):j4XHsfAGyZ=;-Ne3KtPAen2i@WOf+lX.lO%8h:_6MmD:p7[(nLa6ds*{?vFZA,UuJ-/O;^#$lf-T!%)K6djPY9Bw1.qYGI3-GtvKwFVK{s5+.;mJrFad(iDARPCd*Qu$Tnx)gkAFdOhMzf(mObzQVIz}5{JLYP}4nT%=+Jd8{s/+Tv/]xlq;D$ueGq*9D/QY2FtCFs{xSK-c*mI.50QWI2k)coeaLO)iVBvVVd-u5po?%-IqLBixte9Xr}L$fJ+TWk3_amqVu(4o^-($^3tLHZ;U+(@mIiMQWK:@==UqhZ@9Z^F*d]xN-/q/ZD!;tO/yo++b?8nglTpvtBU7ZHc?P:(znXz!6[4:CRUZ8ZW8!NmId.RLZ7w;7c43^W0j?#bV}33glEGq@Z5w;#qY#*YR^ADG{zx84u?HqrkR5.(rGMHt]cnt4Uyt(hZ!r128-1im?zb,hJB?$o}RbZn]a6pfF+k,VLQMCM2_]0Yi[4n,{b!_YRfW]ZrX13g/wMIMpV{$m+_(xVNCm#je6}Gt*m?G7!D@.)?F2PA/uRV^gqs.E2jDLKVHkVC=Ykc;M$M-87!ZJoWgW,kFGy3l#4gW%V#CvQR5h4YzYr^G@v7Ae(hNCO3RgcQFgeYt*xuHlvT,ofY79no9)Hwy^yX0.dtU#)C7mg*lKqT;N9=@ZQ9-!u!gNx[Mzv4z,!UZ)lhx{5Iku!HX:MEuqfWB=Q6f;=zvakhCfv}TR_}.w@FY1S4@KSS*.(hmPK*LFc^u?l*axAP$+SywkN$Sbsl5od*7x-?F:Has,,aj628(l0p5ZTS9:)[73F{oAkoW9u9vdFwmiOgT]mLzRUQdea_MG3u7z.(D{1H3)KL[BD@fGMdMTn3WYKy4POp$RYFxD:9N((dJ$__5%$Un%y#fYKt/wm/.;^-Q$o*GJf+RiO@aVECug7T],Pg)agHoKcsw[ym8rb]le?%n.aKY(q/K@yt@B_z]7x#bNAU32m:8TD*qF?)zUqge:NaL$C6zh5hCj$.PBTLiK28FQJ8*M#/K(7[GXfoyC#MVza$Nf.w0E3xB%+49mqz{h8MZ:$9SXjI6t_y?p9RaJmPQX=0h(.q:p*VFlj;*,qL3?=*bH#?;!^N3gly!r^,pT8hBrzh)tlK[y4B$(]Rq,)/7{GPikFhb^nMpv%?o?[qen:dL4z0C7:?DE,@JR{o9iWcu,cC_ub#!ek4Tt0noDx0iYq^i}A]$zsuz3eQcpFk-E)x*+^_5</anystuff.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>11151</ID>
      <Description>"INIT"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>28A028</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
--

bDebug = false

if GetCEVersion()&lt;6.5 then showMessage('need ce 6.5+');error('!ce ver')end
--if syntaxcheck then return end
function loadLuafromTableFileAndRun(n)
  local tf,err,loadsrc = findTableFile(n),tostring(n)..' not load from table file',_VERSION:match('5.3') and load or loadstring
  if tf==nil then tf = findTableFile(n..'.lua') end
  assert(tf~=nil, err)
  local st, ss = tf.Stream, createStringStream()
  ss.copyFrom(st,st.Size)
  local str = ss.DataString
  ss.Destroy()
  local ok, ret = pcall(loadsrc,str,'-')
  if not ok then error(err..', '..tostring(ret),2) end
  ok, ret = pcall(ret,n)
  if not ok then error(err..', '..tostring(ret),2) end
  return ret~=nil and ret or true
end
-- Test
function tohex(n)return string.format('%X',n or 0)end

if not _compactLoaded then
  local ok,ret = pcall(loadLuafromTableFileAndRun,'anystuff.lua')
--  pcall(populateHKSound,'sabotage.wav','feedback.wav')
  pcall(loadLuafromTableFileAndRun,'compact.lua')
  _compactLoaded = true

  -- change global print behaviours, for preventing 'format 2' from AA GetMonoStruct
  local ok2print,oprint = true,print
  function EnablePrint(b,s) ok2print = b ~= false  end

  print = function(...) if ok2print then return oprint(...) end end

  local function aa_EnablePrint(s,sc)
    if sc~=true then EnablePrint(s:lower():match('^%s*(.-)%s*$')~='false','aa_')end
  end
  registerAutoAssemblerCommand('enablePrint',aa_EnablePrint)

end

function checkNormal(s)
  local ok,ret = autoAssemble[[
globalalloc(__,$4000,7ff00000)
__:
dq __
//                                00 01 02 03 04
aobscanmodule(partyFlag,Ember.exe,75 ?? 83 ?? ?? 00 0f 84 ?? ?? 00 00 83 ?? ?? 03)

__+10:
readmem(partyFlag+04,1)

]]
  return ok
end

[ENABLE]
[DISABLE]
if syntaxcheck then return end
if monopipe~=nil then monopipe.Destroy() ; monopipe=nil end

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11295</ID>
          <Description>"ItemUse [-]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("ItmUse",
  "itemUse")

{$asm}

[ENABLE]


aobscanModule(itemUse,Ember.exe,8b 45 08 85 c0 78 03 89 ?? ?? 8b ?? ?? 85)

{$lua}
return AABody()
{$asm}



define(leftCtrlKey,cave+10)
define(countOfs,cave+18)
countOfs:
readmem(hack+09,1)

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true


cave+300:
pushad
push  0a2
call  GetAsyncKeyState
test  eax,eax
sets  al
mov   [leftCtrlKey],eax
popad

push  edx
reassemble(hack)

cmp   byte ptr [leftCtrlKey],0
jne   @f
cmp   byte ptr [Enabled],0
je    @f
  mov   edx,1
  cmp   eax,edx
  cmovl eax,edx
  movsx edx,byte ptr[countOfs]
  add   edx,ecx
  cmp   eax,[edx]
  jg    @f
  mov   eax,[edx] // no change if eax less than original
@@:

reassemble(hack+3)
pop   edx
jmp  hack+05


hack:
jmp cave+300


[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11296</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ItmUse+40</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11334</ID>
          <Description>"ItemCoolDown"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("ItmCoolDown",
  "itemCool")

{$asm}

[ENABLE]

//                               00 01 02 03 04 05 06 07 08 09
aobscanModule(itemCool,Ember.exe,C7 86 ?? ?? 00 00 00 00 E0 40)

{$lua}
return AABody()
{$asm}

itemCool+09:
db 3c



[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11328</ID>
          <Description>"Remove Equipment Constraints [+]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("EqConstraints",
  "eq1,eq2,eq3,eq4,eq5")

{$asm}

[ENABLE]


{$lua}
-- 8b ?? 6a 00 6a 20 6a 00 8b ?? ff ?? ?? ?? 00 00 ?? 8d ?? ?? 50
if readInteger(process)~=nil then
  EqConstraints = EqConstraints or {}
  local eq = EqConstraints
  local pid = getOpenedProcessID()-- should not be invalid, ie. 0
  if eq[pid]==nil or eq[pid][0]~=nil and readBytes(eq[pid][0]+0xf) ~= 0xcc then
    eq[pid] = nil
  --                                                               00 01 02 03 04 05 06
  --                     00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13
    local aob = AOBScan("8b 81 ?? ?? 00 00 c3 cc cc cc cc cc cc cc cc cc 8b 81 ?? ?? 00 00 c3 cc cc cc cc cc cc cc cc cc 8b 81 ?? ?? 00 00 c3 cc cc cc cc cc cc cc cc cc 8b 81 ?? ?? 00 00 c3 cc cc cc cc cc cc cc cc cc 8b 81 ?? ?? 00 00 c3 cc cc cc cc cc cc cc cc cc 55",'+X')
    if aob~=nil then
      if aob.Count&gt;=1 then
        eq[pid]={}
        for i=0,4 do
          eq[pid][i+1]=tonumber(aob[0],16)+0x10*i
        end
      end
      aob.Destroy()
    end

  end
  if eq[pid]~=nil then
    local s = {}
    for i=1,5 do
      s[i] = string.format("define(eq%d,%X)",i,eq[pid][i])
    end
    s = table.concat(s,'\n')
--    if bDebug then print(s) end
    return s
  end
end
{$asm}

{$lua}
return AABody()
{$asm}

define(leftCtrlKey,cave+10)

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true

cave+300:

pushad
push  0a2
call  GetAsyncKeyState
test  eax,eax
sets  al
mov   [leftCtrlKey],eax
popad

cmp   byte ptr [leftCtrlKey],0
je    @f
cmp   byte ptr [Enabled],0
je    @f
  xor eax,eax
  inc eax
@@:

ret


eq1+06:
jmp  cave+300
eq2+06:
jmp  cave+300
eq3+06:
jmp  cave+300
eq4+06:
jmp  cave+300
eq5+06:
jmp  cave+300



[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11333</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>EqConstraints+40</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11325</ID>
          <Description>"Far View Distance"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("FarViewDistance",
  "farView")

{$asm}

[ENABLE]

//                              00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a
aobscanModule(farView,Ember.exe,0f 2f 05 ?? ?? ?? ?? f3 0f 11 86 ?? ?? 00 00 76 ?? c7 86 ?? ?? 00 00 00 00 ?? 42)

{$lua}
return AABody()
{$asm}

label(FarViewValue)
registerSymbol(FarViewValue)

farView+03:
dd farView+17

farView+17:
FarViewValue:
dd (float)120


[DISABLE]

{$lua}
  return AAFooter()
{$asm}

unregisterSymbol(FarViewValue)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11327</ID>
              <Description>"Far Value (default 58, near value 20)"</Description>
              <Color>000000</Color>
              <VariableType>Float</VariableType>
              <Address>FarViewValue</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11321</ID>
          <Description>"MovementMul (global)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("MovementMul",
  "mvMul")

{$asm}

[ENABLE]


aobscanModule(mvMul,Ember.exe,f3 0f 59 45 10 50 8d 45 ?? 50 8b)

{$lua}
return AABody()
{$asm}

cave:
dd (float)4

define(partyFlag,__+10)

define(leftCtrlKey,cave+10)

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true


cave+300:

reassemble(hack)

cmp   byte ptr [Enabled],0
je    @f
  movzx  ecx,byte ptr[partyFlag]
  add    ecx,ebx
  movzx  ecx,[ecx]
  test   ecx,ecx
  jne    @f
  mulss  xmm0,[cave]
@@:

jmp  hack+05


hack:
jmp cave+300


[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11322</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>MovementMul+40</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>11323</ID>
              <Description>"mul"</Description>
              <Color>000000</Color>
              <VariableType>Float</VariableType>
              <Address>MovementMul</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11330</ID>
          <Description>"ExpMul"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("ExpMul",
  "xpMul")

{$asm}

[ENABLE]

//                            00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
aobscanModule(xpMul,Ember.exe,0f 5b c0 f3 0f 59 0d ?? ?? ?? ?? f3 0f 59 c8)

{$lua}
return AABody()
{$asm}

cave:
dd (float)10

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true


cave+300:

reassemble(hack)
reassemble(hack+03)
reassemble(hack+0b)

cmp   byte ptr [Enabled],0
je    @f
  mulss  xmm1,[cave]
@@:

jmp  hack+0f


hack:
jmp cave+300


[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11331</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ExpMul+40</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>11332</ID>
              <Description>"mul"</Description>
              <Color>000000</Color>
              <VariableType>Float</VariableType>
              <Address>ExpMul</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11312</ID>
          <Description>"Add Stat Point [-]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("AddStat",
  "addSt")

{$asm}

[ENABLE]

//                            00 01 02 03 04 05 06 07 08 09
aobscanModule(addSt,Ember.exe,01 ?? ?? ?? 00 00 29 73 ?? e8)

{$lua}
return AABody()
{$asm}



define(leftCtrlKey,cave+10)

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true


cave+300:
pushad
push  0a2
call  GetAsyncKeyState
test  eax,eax
sets  al
mov   [leftCtrlKey],eax
popad

reassemble(hack)

cmp   byte ptr [leftCtrlKey],0
jne   @f
cmp   byte ptr [Enabled],0
je    @f
  xor esi,esi
@@:

reassemble(hack+6)
jmp  hack+09


hack:
jmp cave+300


[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11313</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>AddStat+40</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11314</ID>
          <Description>"Shop Cost Mul [-]"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>28A028</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
local check = checkNormal(syntaxcheck)

return AAHeader("ShopCostMul",
  "costMul")

{$asm}

[ENABLE]

//                              00 01 02 03 04 05 06 07 08 09
aobscanModule(costMul,Ember.exe,29 77 ?? 83 ec 10 80 ?? ?? ?? 00 00 00 8b)

{$lua}
return AABody()
{$asm}

cave:
dd (float)0.2

define(leftCtrlKey,cave+10)

define(Enabled,cave+40)
Enabled:
dd 1 // Enabled == true


cave+300:
pushad
push  0a2
call  GetAsyncKeyState
test  eax,eax
sets  al
mov   [leftCtrlKey],eax
popad


cmp   byte ptr [leftCtrlKey],0
jne   @f
cmp   byte ptr [Enabled],0
je    @f
  push  esi
  fild  dword ptr[esp]
  fmul  dword ptr[cave]
  fistp dword ptr[esp]
  pop   esi
@@:

reassemble(hack)
reassemble(hack+3)
jmp  hack+06


hack:
jmp cave+300


[DISABLE]

{$lua}
  return AAFooter()
{$asm}


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11315</ID>
              <Description>"ON/off "</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:off
1:ON
</DropDownList>
              <Color>000000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ShopCostMul+40</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>11316</ID>
              <Description>"mul"</Description>
              <Color>000000</Color>
              <VariableType>Float</VariableType>
              <Address>ShopCostMul</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11161</ID>
      <Description>"IGNORE"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>7FF00000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FarViewValue</Name>
      <Address>0047F674</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>
</LuaScript>
</CheatTable>
