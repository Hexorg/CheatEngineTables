<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Story Cards"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>45AAC4</Address>
      <Offsets>
        <Offset>2448</Offset>
        <Offset>268</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Score"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>45AAC4</Address>
      <Offsets>
        <Offset>2298</Offset>
        <Offset>268</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Maps To Go Till Boss"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>45AAC4</Address>
      <Offsets>
        <Offset>25A8</Offset>
        <Offset>268</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Test Script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 0x1000, FistfulofGun.exe )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
label( KeyHandlerOff )
registersymbol( KeyHandlerOff )

label( TestFunc )

KeyHandlerThread:
push A
call kernel32.Sleep
cmp [KeyHandlerOff],1
jne short @f
  mov [KeyHandlerOff],2
  ret
@@:

  push 65 // VK_NUMPAD5
  call user32.GetAsyncKeyState
  test ax,ax
  jne TestFunc

  jmp KeyHandlerThread

db CC CC CC CC

TestFunc:
push 244
push [FistfulofGun.exe+5AAC4]
call FistfulofGun.exe+4820
push C8
call kernel32.Sleep
jmp KeyHandlerThread

db CC CC CC CC

KeyHandlerOff:
dd 0

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
dealloc( KeyHandlerThread )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>KeyHandlerOff</Name>
      <Address>04070051</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
