<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>10688</ID>
      <Description>"enable (with horizontal cam limit extended)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(lookDownHardLimitReadOnCameraMoveAOB,witcher3.exe,F3 0F 10 41 ** 0F 2F C8 73 03 0F 28 C8 F3 0F 10 41 ** 0F 2F C8 76 03 0F 28 C8 F3)
registersymbol(lookDownHardLimitReadOnCameraMoveAOB)
aobscanmodule(lookDownSoftLimitReadConstantAOB,witcher3.exe,F3 0F 10 41 ** 0F 2F C8 73 03 0F 28 C8 F3 0F 10 41 ** 0F 2F C8 76 03 0F 28 C8 0F)
registersymbol(lookDownSoftLimitReadConstantAOB)

///

label(fMyLookDownLimit)
registersymbol(fMyLookDownLimit)
label(fMyLookUpLimit)
registersymbol(fMyLookUpLimit)
label(pHoriAngle)
registersymbol(pHoriAngle)

///

alloc(newmem,2048,lookDownHardLimitReadOnCameraMoveAOB+5) //"witcher3.exe"+D1AA16)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2) //,2048,lookDownHardLimitReadOnCameraMoveAOB+12) //"witcher3.exe"+D1AA23)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6) //,2048,lookDownSoftLimitReadConstantAOB+5) //"witcher3.exe"+D1AF05)
label(returnhere6)
label(originalcode6)
label(exit6)

label(newmem11) //,2048,lookDownSoftLimitReadConstantAOB+12 //"witcher3.exe"+D1AF12)
label(returnhere11)
label(originalcode11)
label(exit11)

///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHoriAngle],rcx
movss xmm0,[fMyLookDownLimit]

originalcode:
comiss xmm1,xmm0
jae lookDownHardLimitReadOnCameraMoveAOB+d //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+10869E

exit:
jmp returnhere

///

newmem2:
mov [pHoriAngle],rcx
movss xmm0,[fMyLookUpLimit]

originalcode2:
comiss xmm1,xmm0
jna lookDownHardLimitReadOnCameraMoveAOB+1a //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+1086AB

exit2:
jmp returnhere2

///

newmem6:
mov [pHoriAngle],rcx
movss xmm0,[fMyLookDownLimit]

originalcode6:
comiss xmm1,xmm0
jae lookDownSoftLimitReadConstantAOB+d //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+108B8D

exit6:
jmp returnhere6

///

newmem11:
mov [pHoriAngle],rcx
movss xmm0,[fMyLookUpLimit]

originalcode11:
comiss xmm1,xmm0
jna lookDownSoftLimitReadConstantAOB+1a //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+108B9A

exit11:
jmp returnhere11

///
fMyLookDownLimit:
dd (float)-90
fMyLookUpLimit:
dd (float)90
pHoriAngle:
dq 0
///

lookDownHardLimitReadOnCameraMoveAOB+5: //"witcher3.exe"+D1AA16:
jmp newmem
returnhere:

lookDownHardLimitReadOnCameraMoveAOB+12: //"witcher3.exe"+D1AA23:
jmp newmem2
returnhere2:

lookDownSoftLimitReadConstantAOB+5: //"witcher3.exe"+D1AF05:
jmp newmem6
returnhere6:

lookDownSoftLimitReadConstantAOB+12: //"witcher3.exe"+D1AF12:
jmp newmem11
returnhere11:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
lookDownHardLimitReadOnCameraMoveAOB+5: //"witcher3.exe"+D1AA16:
db 0F 2F C8 73 03
//Alt: comiss xmm1,xmm0
//Alt: lookDownHardLimitReadOnCameraMoveAOB+d //jae witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+10869E
lookDownHardLimitReadOnCameraMoveAOB+12: //"witcher3.exe"+D1AA23:
db 0F 2F C8 76 03
//Alt: comiss xmm1,xmm0
//Alt: jna lookDownHardLimitReadOnCameraMoveAOB+1a //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+1086AB
unregistersymbol(lookDownHardLimitReadOnCameraMoveAOB)
lookDownSoftLimitReadConstantAOB+5: //"witcher3.exe"+D1AF05:
db 0F 2F C8 73 03
//Alt: comiss xmm1,xmm0
//Alt: jae lookDownSoftLimitReadConstantAOB+d //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+108B8D
lookDownSoftLimitReadConstantAOB+12: //"witcher3.exe"+D1AF12:
db 0F 2F C8 76 03
//Alt: comiss xmm1,xmm0
//Alt: jna lookDownSoftLimitReadConstantAOB+1a //witcher3.Scaleform::Render::Matrix2x4&lt;float&gt;::Prepend+108B9A
unregistersymbol(lookDownSoftLimitReadConstantAOB)

unregistersymbol(fMyLookDownLimit)
unregistersymbol(fMyLookUpLimit)
unregistersymbol(pHoriAngle)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10691</ID>
          <Description>"Shift + CapsLock + PageUp : turn ON no-clip"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>10692</ID>
          <Description>"Shift + CapsLock + PageDown : turn OFF no-clip"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>10690</ID>
          <Description>"no-clip .5"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(playerCoordWriteAOB,witcher3.exe,48 8B 43 08 48 89 86 B8 01 00 00)
registersymbol(playerCoordWriteAOB)
aobscanmodule(camInfoReadEndAOB,witcher3.exe,48 8B 52 50 48 85 D2 74 06)
registersymbol(camInfoReadEndAOB)

///

label(dCharMovSpeed)
label(pPlayerCoord)
registersymbol(pPlayerCoord)
label(pNormalizedVector)
registersymbol(pNormalizedVector)

///

alloc(newmem,2048,playerCoordWriteAOB) //"witcher3.exe"+EE742B)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2) //,2048,camInfoReadEndAOB) //"witcher3.exe"+DF69A9)
label(returnhere2)
label(originalcode2)
label(exit2)

label(cmovechar) //call - move char

///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfq
//test rcx,rcx
//jz originalcode
//test r10,r10
//jnz originalcode
mov [pPlayerCoord],rsi
mov rax,[pHoriAngle]
test rax,rax
jz originalcode
mov rax,[pNormalizedVector]
test rax,rax
jz originalcode

push rax //+70
push rbx //+68
push rcx //+60
push rdx //+58
push rsi //+50
push rdi //+48
push rbp //+40
push r8  //+38
push r9  //+30
push r10 //+28
push r11 //+20
push r12 //+18
push r13 //+10
push r14 //+8
push r15 //+0

movsd xmm0,[dCharMovSpeed]
movsd [dCharMovSpeed+8],xmm0
mov rcx,10 //Shift
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
/*
mov eax,(float)3.0
movd xmm0,eax
shufps xmm0,xmm0,93
cvtps2pd xmm0,xmm0
shufpd xmm0,xmm0,93
mulsd xmm0,[dCharMovSpeed]
movsd [dCharMovSpeed+8],xmm0
*/
mov qword ptr [dCharMovSpeed+8],6
fild qword ptr [dCharMovSpeed+8]
fstp qword ptr [dCharMovSpeed+8]
movsd xmm0,[dCharMovSpeed]
mulsd xmm0,[dCharMovSpeed+8]
movsd [dCharMovSpeed+8],xmm0

@@:
xorps xmm0,xmm0
//freeze char
mov rbx,[rsp+68]
movsd [rbx+8],xmm9
movsd [rbx+10],xmm7
movsd [rbx+18],xmm8

//move forward
mov rcx,'W'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]
mov rax,[rsp+70]
mov rcx,[pHoriAngle]

movss xmm0,[rcx+7c]
mov ecx,(float)90
movd xmm1,ecx
divss xmm0,xmm1
push 0
movss [rsp],xmm0
push dword ptr [rax+4]
push dword ptr [rax]

push qword ptr [dCharMovSpeed+8]

call cmovechar
//

@@:
//move backward
mov rcx,'S'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]
mov rax,[rsp+70]
mov rcx,[pHoriAngle]

movss xmm0,[rcx+7c]
mov ecx,(float)90
movd xmm1,ecx
divss xmm0,xmm1
push 0
movss [rsp],xmm0
push dword ptr [rax+4]
push dword ptr [rax]

push -1
fild qword ptr [rsp]
fstp qword ptr [rsp]
movsd xmm0,[dCharMovSpeed+8]
mulsd xmm0,[rsp]
movsd [rsp],xmm0

call cmovechar
//

@@:
//move left
mov rcx,'A'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]
mov rax,[rsp+70]

push 0
push dword ptr [rax]
push dword ptr [rax+4]
push -1
fild dword ptr [rsp]
fstp dword ptr [rsp]
movss xmm0,[rsp]
mulss xmm0,[rsp+8]
movss [rsp+8],xmm0

movsd xmm0,[dCharMovSpeed+8]
movsd [rsp],xmm0

call cmovechar
//

@@:
//move right
mov rcx,'D'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]
mov rax,[rsp+70]

push 0
push dword ptr [rax]
push dword ptr [rax+4]
push -1
fild dword ptr [rsp]
fstp dword ptr [rsp]
movss xmm0,[rsp]
mulss xmm0,[rsp+10]
movss [rsp+10],xmm0

movsd xmm0,[dCharMovSpeed+8]
movsd [rsp],xmm0

call cmovechar
//

@@:
//move up
mov rcx,20 //spacebar
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]

push 1
fild dword ptr [rsp]
fstp dword ptr [rsp]
push 0
push 0
push qword ptr [dCharMovSpeed+8]

call cmovechar
//

@@:
//move down
mov rcx,'C'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rbx,[rsp+68]

push -1
fild dword ptr [rsp]
fstp dword ptr [rsp]
push 0
push 0
push qword ptr [dCharMovSpeed+8]

call cmovechar
//

@@:
pop r15 //+0
pop r14 //+8
pop r13 //+10
pop r12 //+18
pop r11 //+20
pop r10 //+28
pop r9  //+30
pop r8  //+38
pop rbp //+40
pop rdi //+48
pop rsi //+50
pop rdx //+58
pop rcx //+60
pop rbx //+68
pop rax //+70

originalcode:
popfq
mov rax,[rbx+08]
mov [rsi+000001B8],rax

exit:
jmp returnhere

///

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
lea rax,[rdx+40]
mov [pNormalizedVector],rax
pop rax

originalcode2:
mov rdx,[rdx+50]
test rdx,rdx

exit2:
jmp returnhere2

///

//call - move char
cmovechar:
//convert single to double
xorps xmm0,xmm0
movss xmm0,[rsp+10]
shufps xmm0,xmm0,93
cvtps2pd xmm0,xmm0
shufpd xmm0,xmm0,93
movsd [rsp+10],xmm0

xorps xmm0,xmm0
movss xmm0,[rsp+18]
shufps xmm0,xmm0,93
cvtps2pd xmm0,xmm0
shufpd xmm0,xmm0,93
movsd [rsp+18],xmm0
xorps xmm0,xmm0

xorps xmm0,xmm0
movss xmm0,[rsp+20]
shufps xmm0,xmm0,93
cvtps2pd xmm0,xmm0
shufpd xmm0,xmm0,93
movsd [rsp+20],xmm0

//move start
movsd xmm1,[rsp+8]
movsd xmm0,[rsp+10]
mulsd xmm0,xmm1
addsd xmm0,[rbx+8]
movsd [rbx+8],xmm0

movsd xmm0,[rsp+18]
mulsd xmm0,xmm1
addsd xmm0,[rbx+10]
movsd [rbx+10],xmm0

movsd xmm0,[rsp+20]
mulsd xmm0,xmm1
addsd xmm0,[rbx+18]
movsd [rbx+18],xmm0
ret 20
///

///
dCharMovSpeed:
dq (double)0.1
dq (double)0.1
pPlayerCoord:
dq 0
pNormalizedVector:
dq 0
///

playerCoordWriteAOB: //"witcher3.exe"+EE742B:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

camInfoReadEndAOB: //"witcher3.exe"+DF69A9:
jmp newmem2
nop
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
playerCoordWriteAOB: //"witcher3.exe"+EE742B:
db 48 8B 43 08 48 89 86 B8 01 00 00
//Alt: mov rax,[rbx+08]
//Alt: mov [rsi+000001B8],rax
unregistersymbol(playerCoordWriteAOB)
camInfoReadEndAOB: //"witcher3.exe"+DF69A9:
db 48 8B 52 50 48 85 D2
//Alt: mov rdx,[rdx+50]
//Alt: test rdx,rdx
unregistersymbol(camInfoReadEndAOB)

unregistersymbol(pPlayerCoord)
unregistersymbol(pNormalizedVector)
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>16</Key>
                <Key>20</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
              <ActivateSound>Activate</ActivateSound>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>16</Key>
                <Key>20</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
              <DeactivateSound>Deactivate</DeactivateSound>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5621952#5621952</Comments>
</CheatTable>
