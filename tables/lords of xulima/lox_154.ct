<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"--TestHungerCheck"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobHungerCheck,DD 41 04 D9 EE DF F1 DD D8 7A 08 72 06 EB 00)

alloc(newmem,2048)

label(aobHungerCheck_r)
registersymbol(aobHungerCheck_r)

label(lblHungerCheck)
label(lblHungerCheckSkip)
label(lblHungerCheckRet)

label(bEnableMinFood)
label(dMinFood)
registersymbol(bEnableMinFood)
registersymbol(dMinFood)

newmem:
bEnableMinFood:
dd 1
dMinFood:
dq (double)2.0

lblHungerCheck:
cmp dword ptr [bEnableMinFood],1
jne short lblHungerCheckSkip
fld qword ptr [ecx+04]
fld qword ptr [dMinFood]
fcomip st(0),st(1)
fstp st(0)
jp lblHungerCheckSkip
jb lblHungerCheckSkip
fld qword ptr [dMinFood]
fstp qword ptr [ecx+04]
lblHungerCheckSkip:
//fld qword ptr [ecx+04] // Original code
//fldz                   // Original code
db DD 41 04 D9 EE
jmp lblHungerCheckRet

aobHungerCheck:
aobHungerCheck_r:
jmp lblHungerCheck
lblHungerCheckRet:

[DISABLE]
aobHungerCheck_r:
//Alt: fld qword ptr [ecx+04]
//Alt: fldz
db DD 41 04 D9 EE

unregistersymbol(aobHungerCheck_r)

unregistersymbol(bEnableMinFood)
unregistersymbol(dMinFood)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"bEnableMinFood"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinFood</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"dMinFood"</Description>
              <Color>FF0000</Color>
              <VariableType>Double</VariableType>
              <Address>dMinFood</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"--TestAttributeUpdater"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobAttributeUpdater,8B 56 18 4A 89 56 18 8B 15 ?? ?? ?? ?? 8D 7D EC 33 C0)

alloc(newmem,2048)

label(aobAttributeUpdater_r)
registersymbol(aobAttributeUpdater_r)

label(lblAttributeUpdater)
label(lblAttributeUpdaterSkip)
label(lblAttributeUpdaterRet)

label(bEnableAttributeEnhancer)
registersymbol(bEnableAttributeEnhancer)

newmem:
bEnableAttributeEnhancer:
dd 1

lblAttributeUpdater:
cmp dword ptr [bEnableAttributeEnhancer],1
jne short lblAttributeUpdaterSkip
add dword ptr [esi+18],1
lblAttributeUpdaterSkip:
//mov edx,[esi+18] // Original code
//dec edx          // Original code
//mov [esi+18],edx // Original code
db 8B 56 18 4A 89 56 18
jmp lblAttributeUpdaterRet

aobAttributeUpdater:
aobAttributeUpdater_r:
jmp lblAttributeUpdater
nop
nop
lblAttributeUpdaterRet:

[DISABLE]
aobAttributeUpdater_r:
//Alt: mov edx,[esi+18]
//Alt: dec edx
//Alt: mov [esi+18],edx
db 8B 56 18 4A 89 56 18

unregistersymbol(aobAttributeUpdater_r)

unregistersymbol(bEnableAttributeEnhancer)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>25</ID>
          <Description>"bEnableAttributeEnhancer"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableAttributeEnhancer</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"--TestSkillPntReader"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobSkillPntReader,8B 80 54 01 00 00 89 45 D4 E8 ?? ?? ?? ?? 50)

alloc(newmem,2048)

label(aobSkillPntReader_r)
registersymbol(aobSkillPntReader_r)

label(lblSkillPntReader)
label(lblSkillPntReaderSkip)
label(lblSkillPntReaderRet)

label(bEnableMinSkillPoints)
label(iMinSkillPoints)
registersymbol(bEnableMinSkillPoints)
registersymbol(iMinSkillPoints)

newmem:
bEnableMinSkillPoints:
dd 1
iMinSkillPoints:
dd (int)4

lblSkillPntReader:
push ebx
cmp dword ptr [bEnableMinSkillPoints],1
jne short lblSkillPntReaderSkip
mov ebx,[iMinSkillPoints]
cmp dword ptr [eax+00000154],ebx
jge short lblSkillPntReaderSkip
mov dword ptr [eax+00000154],ebx
lblSkillPntReaderSkip:
pop ebx
//mov eax,[eax+00000154] // Original code
db 8B 80 54 01 00 00
jmp lblSkillPntReaderRet

aobSkillPntReader:
aobSkillPntReader_r:
jmp lblSkillPntReader
nop
lblSkillPntReaderRet:

[DISABLE]
aobSkillPntReader_r:
//Alt: mov eax,[eax+00000154]
db 8B 80 54 01 00 00

unregistersymbol(aobSkillPntReader_r)

unregistersymbol(bEnableMinSkillPoints)
unregistersymbol(iMinSkillPoints)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"bEnableMinSkillPoints"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinSkillPoints</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>12</ID>
              <Description>"iMinSkillPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinSkillPoints</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"--TestUsableReader"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobUsableReader,8B 47 74 83 F8 01 0F 8E ?? ?? ?? ?? 48 89 47 74 8B D7 B9)

alloc(newmem,2048)

label(aobUsableReader_r)
registersymbol(aobUsableReader_r)

label(lblUsableReader)
label(lblUsableReaderSkip)
label(lblUsableReaderRet)

label(bEnableMinUsables)
label(iMinUsables)
registersymbol(bEnableMinUsables)
registersymbol(iMinUsables)

newmem:
bEnableMinUsables:
dd 1
iMinUsables:
dd (int)4

lblUsableReader:
cmp dword ptr [bEnableMinUsables],1
jne short lblUsableReaderSkip
mov eax,[iMinUsables]
cmp dword ptr [edi+74],eax
jge short lblUsableReaderSkip
mov dword ptr [edi+74],eax
lblUsableReaderSkip:
// mov eax,[edi+74] // Original code
// cmp eax,01       // Original code
db 8B 47 74 83 F8 01
jmp lblUsableReaderRet

aobUsableReader:
aobUsableReader_r:
jmp lblUsableReader
nop
lblUsableReaderRet:

[DISABLE]
aobUsableReader_r:
//Alt: mov eax,[edi+74]
//Alt: cmp eax,01
db 8B 47 74 83 F8 01

unregistersymbol(aobUsableReader_r)

unregistersymbol(bEnableMinUsables)
unregistersymbol(iMinUsables)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"bEnableMinUsables"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinUsables</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>16</ID>
              <Description>"iMinUsables"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinUsables</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"--TestCombatHealthReader"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobCombatHealthReader,8B F1 83 7E 44 00 7D ?? 8B CE)

alloc(newmem,2048)

label(aobCombatHealthReader_r)
registersymbol(aobCombatHealthReader_r)

label(lblCombatHealthReader)
label(lblCombatHealthReaderSkip)
label(lblCombatHealthReaderRet)
label(lblCombatHealthReaderEnemy)

label(bEnableGodMode)
label(bEnableOneHitKill)
registersymbol(bEnableGodMode)
registersymbol(bEnableOneHitKill)

newmem:
bEnableGodMode:
dd 1
bEnableOneHitKill:
dd 1

lblCombatHealthReader:
cmp byte ptr [ecx+ab],1
jne short lblCombatHealthReaderEnemy
cmp dword ptr [bEnableGodMode],1
jne short lblCombatHealthReaderSkip
/*
pushad
push 11 // CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne lblCombatHealthReaderSkip
*/
mov esi,[ecx+54]
mov dword ptr [ecx+44],esi
mov esi,[ecx+58]
mov dword ptr [ecx+48],esi
lblCombatHealthReaderSkip:
//mov esi,ecx               // Original code
//cmp dword ptr [esi+44],00 // Original code
db 8B F1 83 7E 44 00
jmp lblCombatHealthReaderRet
lblCombatHealthReaderEnemy:
cmp dword ptr [bEnableOneHitKill],1
jne short lblCombatHealthReaderSkip
pushad
push 10 // SHIFT key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne lblCombatHealthReaderSkip
mov dword ptr [ecx+44],0
jmp short lblCombatHealthReaderSkip

aobCombatHealthReader:
aobCombatHealthReader_r:
jmp lblCombatHealthReader
nop
lblCombatHealthReaderRet:

[DISABLE]
aobCombatHealthReader_r:
//Alt: mov esi,ecx
//Alt: cmp dword ptr [esi+44],00
db 8B F1 83 7E 44 00

unregistersymbol(aobCombatHealthReader_r)

unregistersymbol(bEnableGodMode)
unregistersymbol(bEnableOneHitKill)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"bEnableGodMode"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableGodMode</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"bEnableOneHitKill (tap SHIFT)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableOneHitKill</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
