<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Scan &amp; Allocate"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(_inj1,89 51 0C 3D 03 00 00 00)
registersymbol(_inj1)

aobscan(_inj2,89 88 CC 00 00 00 C9)
registersymbol(_inj2)

aobscan(_inj3,D9 98 DC 01 00 00)
registersymbol(_inj3)

globalalloc(_bas1,8)

[DISABLE]
unregistersymbol(_inj1)
unregistersymbol(_inj2)
unregistersymbol(_inj3)

dealloc(_bas1)
unregistersymbol(_bas1)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Pointer Injection "</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [_bas1+4],eax

originalcode2:
fstp dword ptr [eax+000001DC]

exit2:
jmp returnhere2

_inj3:
jmp newmem2
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(_code)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,0
jne _code
mov [_bas1],ecx
jmp originalcode

_code:
sub ecx,10
mov [_bas1],ecx
add ecx,10

originalcode:
mov [ecx+0C],edx
cmp eax,00000003

exit:
jmp returnhere

_inj1:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
_inj3:
db D9 98 DC 01 00 00
//fstp dword ptr [eax+000001DC]

dealloc(newmem)
_inj1:
db 89 51 0C 3D 03 00 00 00
//mov [ecx+0C],edx
//cmp eax,00000003

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>38</ID>
              <Description>"Health"</Description>
              <LastState Value="928.125061" Activated="0" RealAddress="03836F8C"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>_bas1+4</Address>
              <Offsets>
                <Offset>1DC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Turret points"</Description>
              <LastState Value="135" Activated="0" RealAddress="26355C4C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_bas1</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"Blue crystal"</Description>
              <LastState Value="99005338" Activated="0" RealAddress="26355C3C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_bas1</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"Exp"</Description>
              <LastState Value="1000404" Activated="0" RealAddress="26355C1C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_bas1</Address>
              <Offsets>
                <Offset>FFFFFFEC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"No reload"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[eax+000000D0]

originalcode:
mov [eax+000000CC],ecx
pop ecx

exit:
jmp returnhere

_inj2:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_inj2:
db 89 88 CC 00 00 00
//mov [eax+000000CC],ecx

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_bas1</Name>
      <Address>08840000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_inj1</Name>
      <Address> 22B987C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_inj2</Name>
      <Address> 22B93BA3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_inj3</Name>
      <Address> 22B94EA4</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Script made by Cake-san

Table contain:

+Pointer Injection
++Health (note 1)
++Turret points (note 2)
++Blue crystal (note 2)
++Exp (note 2)

+No reload

note 1:
loses some health or restart the session after activation 

note 2:
pickup some blue crystal or turret points after activation 
</Comments>
</CheatTable>
