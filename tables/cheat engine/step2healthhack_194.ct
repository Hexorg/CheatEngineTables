<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"step 2 health hack"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
{$lua}

--aobpart1
--Tutorial-i386.exe+25510 - B8 05000000           - mov eax,00000005
--Tutorial-i386.exe+25515 - E8 6676FEFF           - call Tutorial-i386.exe+CB80
--aobpart2
--Tutorial-i386.exe+2551A - 40                    - inc eax
--Tutorial-i386.exe+2551B - 29 83 80040000        - sub [ebx+00000480],eax &lt;-- hack point

if syntaxcheck then --don't do a scan when just adding to the table
  return ''
end

local aobpart2={0x40, 0x29, 0x83, 0x80, 0x04, 0x00, 0x00}

local tutorialstart=getAddress("tutorial-i386.exe")
local tutorialend=tutorialstart+getModuleSize("tutorial-i386.exe")

local m=createMemScan()
--protectionflags:
--+X = must be executable
--*C = don't care about the copy on write flag
--*W = don't care if it's writable or not
m.firstScan(soExactValue, vtByteArray, nil, "b8 05 00 00 00", "", tutorialstart,tutorialend, "+X*C*W",fsmNotAligned ,"", true, false, false, false)
m.waitTillDone()

local fl=createFoundList(m)
fl.initialize()

local i
local callsize

print("found:"..fl.Count)

--foundlist indexes start from 0
for i=0, fl.Count-1 do
  local address=tonumber("0x"..fl.Address[i])
  print(string.format("address=%x", address))

  if readBytes(address+5,1)==0xe8 then
    --direct call
    print("call")
    callsize=5
  else
    --perhaps and indirect call
    --do stuff like shifting offsets by 1

    --e.g. callsize=6

    --for now(in this case), flag it as useless
    callsize=nil
  end

  if callsize~=nil then
    local part2address=address+5+callsize
    print(string.format("part2 address = %x", part2address))
    local bytesaftercall=readBytes(part2address, 7, true)

    local j
    local valid=true --lua tables start from 1
    for j=1, 7 do
      print(string.format("is %x == %x?", bytesaftercall[j], aobpart2[j]))
      if bytesaftercall[j]~=aobpart2[j] then
        valid=false  --not a correct aob
        break --next
      end
    end

    if valid then --return a string in the aa script at the place of the lua script
      unregisterSymbol("step2healthhackaobscanresult")
      registerSymbol("step2healthhackaobscanresult", part2address+1)
      --alternatively, you could do a return string.format([[define(aobscanresult, %x)]], part2address+1)
      --or a more complex AA script
      --or define the address right here and make the code after the lua block write
      --or whatever you can come up with.

      --cleanup
      fl.destroy()
      m.destroy()
      return '' --what you return here will be executed by the regular auto assembler. Can be multiline
    end
  end
end

--still here
--cleanup
fl.destroy()
m.destroy()

error('The array of byte could not be found')
{$asm}

step2healthhackaobscanresult:
add [ebx+480],eax

[disable]
step2healthhackaobscanresult:
sub [ebx+480],eax

unregistersymbol(step2healthhackaobscanresult)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>step2healthhackaobscanresult</Name>
      <Address>42551B</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
