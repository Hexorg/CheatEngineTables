<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="11">
  <CheatEntries>
    <CheatEntry>
      <ID>62</ID>
      <Description>"[X] &lt;== TW - Shogun 2 V1.10 (5346-SR) Script (CRASH FIX)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Total War: Shogun 2
 Game Version  : 1.10 (5346 - SR)
 Process Name  : Shogun2.exe
 Script Version: 1.0
 CE Version    : 6.1
 Release date  : 11-Apr-2012
 Author        : Recifense
 Features:
 - Eleminate possible crashes (Just a little help for the good group SKIDROW)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Shogun2.dll+0004ea50,b8 50 9f a1 80 ff e0)
assert(Shogun2.dll+00082cf0,b8 10 95 f5 80 ff e0)
assert(Shogun2.dll+00286960,b8 d0 a9 53 80 ff e0)
assert(Shogun2.dll+00eeaac0,8b 81 10 05 00 00)
assert(Shogun2.dll+00b180c0,83 ec 18 53 56)

//=========================================
alloc(MyPatch,1024)
//=========================================
// Declaration section
label(_SRPatch00)
label(_BackP00)
label(_SRPatch01)
label(_BackP01)
label(_SRPatch02)
label(_BackP02)
label(_SRPatch03)
label(_BackP03)
label(_SRPatch04)
label(_BackP04)
label(_SRPatch05)
label(_BackP05)
label(_SRPatch06)
label(_BackP06)
label(_SRPatch07)
label(_BackP07)
label(_SRPatch08)
label(_BackP08)
label(_SRPatch09)
label(_BackP09)
label(_SRPatch0A)
label(_BackP0A)
label(_SRPatch0B)
label(_BackP0B)
label(_SRPatch0C)
label(_BackP0C)
label(_SRPatch0D)
label(_BackP0D)
label(_SRPatch0E)
label(_BackP0E)
label(_SRPatch0F)
label(_BackP0F)
label(_SRPatch10)
label(_BackP10)
label(_SRPatch11)
label(_BackP11)
label(_SRPatch12)
label(_BackP12)

//=========================================
// Registering Symbols
registersymbol(MyPatch)

//=========================================
MyPatch:
//=========================================
_SRPatch00:
 mov eax,Shogun2.dll+00A19F50
// mov eax,80A19F50
 jmp _BackP00
//=========================================
_SRPatch01:
 mov eax,Shogun2.dll+00F59510
// mov eax,80F59510
 jmp _BackP01
//=========================================
_SRPatch02:
 mov eax,Shogun2.dll+0053A9D0
// mov eax,8053A9D0
 jmp _BackP02
//=========================================
_SRPatch03:
 mov eax,Shogun2.dll+00BFA520
// mov eax,80BFA520
 jmp _BackP03
//=========================================
_SRPatch04:
 mov eax,Shogun2.dll+00A428D0
// mov eax,80A428D0
 jmp _BackP04
//=========================================
_SRPatch05:
 mov eax,Shogun2.dll+00AD1410
// mov eax,80AD1410
 jmp _BackP05
//=========================================
_SRPatch06:
 mov eax,Shogun2.dll+0089DB30
// mov eax,8089DB30
 jmp _BackP06
//=========================================
_SRPatch07:
 mov eax,Shogun2.dll+001B7E00
// mov eax,801B7E00
 jmp _BackP07

//=========================================
_SRPatch08:
 mov eax,Shogun2.dll+00DEFFF0
// mov eax,80DEFFF0
 jmp _BackP08

//=========================================
_SRPatch09:
 mov eax,Shogun2.dll+00474540
// mov eax,80474540
 jmp _BackP09
//=========================================
_SRPatch0A:
 mov eax,Shogun2.dll+00ADA990
// mov eax,80ADA990
 jmp _BackP0A
//=========================================
_SRPatch0B:
 mov eax,Shogun2.dll+003B3930
// mov eax,803B3930
 jmp _BackP0B
//=========================================
_SRPatch0C:
 mov eax,Shogun2.dll+002CE520
// mov eax,802CE520
 jmp _BackP0C
//=========================================
_SRPatch0D:
 mov eax,Shogun2.dll+0018BC00
// mov eax,8018BC00
 jmp _BackP0D
//=========================================
_SRPatch0E:
 mov eax,Shogun2.dll+0071A500
// mov eax,8071A500
 jmp _BackP0E
//=========================================
_SRPatch0F:
 mov eax,Shogun2.dll+007A4E90
// mov eax,807A4E90
 jmp _BackP0F
//=========================================
_SRPatch10:
 mov eax,Shogun2.dll+00E96F10
// mov eax,80E96F10
 jmp _BackP10
//=========================================
_SRPatch11:
 mov eax,Shogun2.dll+0078AB60
// mov eax,8078AB60
 jmp _BackP11

//=========================================
_SRPatch12:
 xor eax,eax
 ret
 jmp _BackP12

//=========================================
 db '===================================&gt;'
 db 'CE6.1 Script by Recifense 041112'
//=========================================
// Variables

//=========================================
// Patching Points
Shogun2.dll+0004ea50:
 jmp _SRPatch00
_BackP00:

Shogun2.dll+00082cf0:
 jmp _SRPatch01
_BackP01:

Shogun2.dll+00286960:
 jmp _SRPatch02
_BackP02:

Shogun2.dll+002e7680:
 jmp _SRPatch03
_BackP03:

Shogun2.dll+0031ece0:
 jmp _SRPatch04
_BackP04:

Shogun2.dll+0041adc0:
 jmp _SRPatch05
_BackP05:

Shogun2.dll+004530a0:
 jmp _SRPatch06
_BackP06:

Shogun2.dll+00532980:
 jmp _SRPatch07
_BackP07:

Shogun2.dll+0069caa0:
 jmp _SRPatch08
_BackP08:

Shogun2.dll+006f37c0:
 jmp _SRPatch09
_BackP09:

Shogun2.dll+007622c0:
 jmp _SRPatch0A
_BackP0A:

Shogun2.dll+007ad670:
 jmp _SRPatch0B
_BackP0B:

Shogun2.dll+0084a5a0:
 jmp _SRPatch0C
_BackP0C:

Shogun2.dll+0085a500:
 jmp _SRPatch0D
_BackP0D:

Shogun2.dll+00a3b740:
 jmp _SRPatch0E
_BackP0E:

Shogun2.dll+00b78170:
 jmp _SRPatch0F
_BackP0F:

Shogun2.dll+00cd9dd0:
 jmp _SRPatch10
_BackP10:

Shogun2.dll+00f841b0:
 jmp _SRPatch11
_BackP11:

Shogun2.dll+365640:
 ret 0004

Shogun2.dll+00eeaac0:
 jmp _SRPatch12
 nop
_BackP12:

Shogun2.dll+00b180c0:
// ret
// nop
// nop

//=========================================
// Script for Restoring Original Codes
[DISABLE]
Shogun2.dll+0004ea50:
 mov eax,80A19F50

Shogun2.dll+00082cf0:
 mov eax,80F59510

Shogun2.dll+00286960:
 mov eax,8053A9D0

Shogun2.dll+002e7680:
 mov eax,80BFA520

Shogun2.dll+0031ece0:
 mov eax,80A428D0

Shogun2.dll+0041adc0:
 mov eax,80AD1410

Shogun2.dll+004530a0:
 mov eax,8089DB30

Shogun2.dll+00532980:
 mov eax,801B7E00

Shogun2.dll+0069caa0:
 mov eax,80DEFFF0

Shogun2.dll+006f37c0:
 mov eax,80474540

Shogun2.dll+007622c0:
 mov eax,80ADA990

Shogun2.dll+007ad670:
 mov eax,803B3930

Shogun2.dll+0084a5a0:
 mov eax,802CE520

Shogun2.dll+0085a500:
 mov eax,8018BC00

Shogun2.dll+00a3b740:
 mov eax,8071A500

Shogun2.dll+00b78170:
 mov eax,807A4E90

Shogun2.dll+00cd9dd0:
 mov eax,80E96F10

Shogun2.dll+00f841b0:
 mov eax,8078AB60

Shogun2.dll+365640:
 sub esp,38

Shogun2.dll+00eeaac0:
// mov eax,[ecx+00000510]
 db 8b 81 10 05 00 00

Shogun2.dll+00b180c0:
// sub esp,18

//=========================================
// Unregistering Symbols
unregistersymbol(MyPatch)

//=========================================
dealloc(MyPatch)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"[X] &lt;== TW - Shogun 2 V1.10 (5346-SR) Script RTS"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Total War - Shogun 2 (Fall of the Samurai)
 Game Version  : 1.10 (Build 5346 - SR)
 Process Name  : Shogun2.exe
 Script Version: 3.0
 CE Version    : 6.1
 Release date  : 11-Apr-2012
 Author        : Recifense
 Features:
 - God Mode
 - Unlimited Ammo (Arrows, Bombs, etc)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Shogun2.dll+006d1700,53 56 8b 74 24 0c 8b 86 0c 02 00 00)
assert(Shogun2.dll+0076b2f0,83 ec 54 53 55 56 8b f1 8b 86 d0 01)
assert(Shogun2.dll+00487648,0f 2f c8 f3 0f 11 86 78 0f 00 00)
assert(Shogun2.dll+00a74b20,56 57 8b 7c 24 0c 8b f1 8b 8f b8 03)
assert(Shogun2.dll+00801c20,55 8b ec 83 e4 f8 81 ec 5c 01 00 00)

//=========================================
alloc(MyCodeG,1024)
//=========================================
// Declaration section
label(_GodMode)
label(_GodM00)
label(_GodM01)
label(_BackGM)
label(_ExitGM)
label(_GodMode1)
label(_GodM10)
label(_GodM11)
label(_BackGM1)
label(_ExitGM1)
label(_MonAmmo)
label(_MonA0)
label(_MonA1)
label(_BackMA)
label(_ExitMA)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)

label(_GodModeSH2)
label(_BackGMSH2)
label(_ExitGMSH2)

label(iEnableGM)
label(iEnableMA)

label(pShip)

label(iPlayerID)
label(iEAX)
label(iEAX1)
label(iEAX2)
label(iEDI)
label(aLast)
label(iCount)
label(iCount1)
label(pCaller)

//=========================================
// Registering Symbols
registersymbol(MyCodeG)
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iPlayerID)

registersymbol(pShip)

registersymbol(aLast)
registersymbol(iCount)
registersymbol(iCount1)
registersymbol(pCaller)

//=========================================
MyCodeG:
//========================================= 5355
_GodMode:
 mov [iEAX],eax                    // Save EAX

 mov eax,[esp+04]                  // Get Unit
 mov eax,[eax+00000214]            // Get pTroop ** 208/210
 test eax,eax
 jnz _GodM00                       // Jump if the pointer is null

 mov eax,[esp+04]                  // Get Unit
 mov eax,[eax+0000021c]            // Get pShip ** 210/218
 test eax,eax
 jz _ExitGM                        // Jump if the pointer is null

 mov al,[eax+00001168]             // Get pCommon **111c/1120
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

 jmp _GodM01
//=====
_GodM00:
 mov al,[eax+00000c01]             // Get pCommon ** b9f/c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

_GodM01:
 mov dword ptr [aLast],'GoMo'

 mov eax,[iEAX]                    // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM:
 mov eax,[iEAX]                    // Restore EAX

 push ebx                          // Original code
 push esi                          // Original code
 mov esi,[esp+0C]                  // Original code
 jmp _BackGM                       // Back to main code

 //========================================= 5355
_GodMode1:
 mov [iEAX1],eax                   // Save EAX

 mov eax,[ecx+00000214]            // Get pTroop **0210
 test eax,eax
 jnz _GodM10                       // Jump if the pointer is not null

 mov eax,[ecx+0000021c]            // Get pShip **0218
 test eax,eax
 jz _ExitGM1                       // Jump if the pointer is null

 inc dword ptr [iCount1]

// Ship Crew
 mov al,[eax+00001168]             // Get pCommon **1120
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled
 jmp _GodM11
//Land Soldiers
_GodM10:
 mov al,[eax+00000c01]             // Get pCommon **0c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled

_GodM11:
 mov dword ptr [aLast],'GoM1'

 mov eax,[esp]
 mov [pCaller],eax

 mov eax,[iEAX1]                   // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM1:
 mov eax,[iEAX1]                   // Restore EAX

 sub esp,54                        // Original code
 push ebx                          // Original code
 push ebp                          // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 5355
_MonAmmo:
 mov dword ptr [aLast],'MoAm'

 mov al,[esi+00000c01]             // Get pCommon **0c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitMA                       // Jump if false

 cmp dword ptr [iEnableMA],0
 je _MonA0                         // Jump if feature is disabled

 cvtsi2ss xmm0,[esi+00000F7C]      // Get Maximum Ammo **0fa8

_MonA0:
_MonA1:
_ExitMA:
 comiss xmm1,xmm0                  // Update EFLAGS
 movss [esi+00000F78],xmm0         // Original code **0fa4
 jmp _BackMA                       // Back to main code

//========================================= 5358
_GodModeS:
 mov [iEAX2],eax                   // Save EAX
 mov [iEDI],edi                    // Save EDI

 mov edi,[esp+04]                  // Get pUnit

 mov eax,[edi+0000021c]            // Get pShip **0218
 test eax,eax
 jz _ExitGMS                       // Jump if the pointer is null

 mov al,[eax+00001168]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMS                      // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGMS                       // Jump if feature is disabled

 mov dword ptr [aLast],'GoMS'

 mov eax,[iEAX2]                   // Restore EAX
 mov edi,[iEDI]                    // Restore EDI
 ret 0004                          // Avoid routine
//-----
_ExitGMS:
 mov edi,[iEDI]                    // Restore EDI
 mov eax,[iEAX2]                   // Restore EAX

 push esi                          // Original code
 push edi                          // Original code
 mov edi,[esp+0C]                  // Original code
 jmp _BackGMS                      // Back to main code

//========================================= 5355
// Ship Hull
_GodModeSH2:
 mov dword ptr [aLast],'GSH2'

 mov [pShip],edi

 inc dword ptr [iCount]

 cmp edi,0f000000
 jle _ExitGMSH2                    // Jump if false

 cmp edi,50000000
 jge _ExitGMSH2                    // Jump if false

 dec dword ptr [iCount]

 mov al,[edi+00001168]             // Get pCommon

 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMSH2                    // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGMSH2                     // Jump if feature is disabled

 db 66 90 0F 1F
 db 00 0F 1F 40
 db 00 0F 1F 44
 db 00 00 66 0F
 db 1F 44 00 00
 db 0F 1F 80 00
 db 00 00 00 0F
 db 1F 84 00 00
 db 00 00 00 66
 db 0F 1F 84 00
 db 00 00 00 00

 ret 0010                          // Avoid routine (return AL = 0)
//---
_ExitGMSH2:
 push ebp                          // Original code
 mov ebp,esp                       // Original code
 and esp,F8                        // Original code
 jmp _BackGMSH2                    // Back to main code

//=========================================
 db '==============================&gt;'
 db 'CE6.1 Script by Recifense 041112'
//=========================================
// Variables
iEnableGM:
 dd 1
iEnableMA:
 dd 1
iPlayerID:
 dd 0
pShip:
 dd 0
iEAX:
 dd 0
iEAX1:
 dd 0
iEAX2:
 dd 0
iEDI:
 dd 0
aLast:
 dd 'CE61'
iCount:
 dd 0
iCount1:
 dd 0
pCaller:
 dd 0

//=========================================
// Hacking Points
//Shogun2.dll+00022320:
Shogun2.dll+006d1700:
 jmp _GodMode
 xchg eax,eax
_BackGM:

//Shogun2.dll+0105e090:
Shogun2.dll+0076b2f0:
 jmp _GodMode1
_BackGM1:

//Shogun2.dll+00b4684b:
Shogun2.dll+0048764b:
 jmp _MonAmmo
 db 0F 1F 00
_BackMA:

//Shogun2.dll+006f9bd0:
Shogun2.dll+00a74b20:
 jmp _GodModeS
 xchg eax,eax
_BackGMS:

//Shogun2.dll+009538f0:
Shogun2.dll+00801c20:
 jmp _GodModeSH2
 xchg eax,eax
_BackGMSH2:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
//pGodMode:
//Shogun2.dll+00022320:
Shogun2.dll+006d1700:
// push ebx
// push esi
// mov esi,[esp+0C]
 db 53 56 8b 74 24 0c

//pGodMode1:
//Shogun2.dll+0105e090:
Shogun2.dll+0076b2f0:
// sub esp,54
// push ebx
// push ebp
 db 83 ec 54 53 55

//pMonAmmo:
//Shogun2.dll+00b4684b:
Shogun2.dll+0048764b:
// mmovss [esi+00000F78],xmm0
 db f3 0f 11 86 78 0f 00 00

//pGodModeS:
//Shogun2.dll+006f9bd0:
Shogun2.dll+00a74b20:
// push esi
// push edi
// mov edi,[esp+0C]
 db 56 57 8b 7c 24 0c

//Shogun2.dll+009538f0:
Shogun2.dll+00801c20:
// push ebp
// mov ebp,esp
// and esp,F8
 db 55 8b ec 83 e4 f8

//=========================================
// Unregistering Symbols
unregistersymbol(MyCodeG)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iPlayerID)

unregistersymbol(pShip)

unregistersymbol(aLast)
unregistersymbol(iCount)
unregistersymbol(iCount1)
unregistersymbol(pCaller)

//=========================================
dealloc(MyCodeG)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>36</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable God Mode"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable Unlimited Ammo"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMA</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>58</ID>
      <Description>"[X] &lt;== TW - Shogun 2 V1.10 (5346-SR) Script TBS"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Total War - Shogun 2 (Fall of the Samurai)
 Game Version  : 1.10 (Build 5346 - SR)
 Process Name  : Shogun2.exe
 Script Version: 3.0
 CE Version    : 6.1
 Release date  : 11-Apr-2012
 Author        : Recifense
 Features:
 - Unlimited Movement Points (Army on strategic map)
 - Recover Troop Size when army moves (Army on strategic map)
 - One turn Recruitment (Troops and Ships)
 - One turn Research (Mastery on Arts)
 - One turn Construction (Town/Province on strategic map)
 - Minimum Gold (on strategic map)
 - Pointer to Player's current gold (on strategic map)
 - Pointer to Skill points of select army's officer (on strategic map)
 - Pointer to Player's Agent that last moved (on strategic map)
 [Note] In order to identify the human player, at the start/load of
 any game, selected a troop with an officer or selected a city info.
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Shogun2.dll+00193690,8b 81 6c 04 00 00 c3 cc cc cc)
assert(Shogun2.dll+00d38680,2b d7 89 50 64 ?? ?? c7 40 64 00 00 00 00)
assert(Shogun2.dll+0097514c,39 98 18 05 00 00 ?? ?? 8b bf fc 00 00 00)
assert(Shogun2.dll+0045eb63,8b 86 bc 00 00 00 03 86 b4 00 00 00 6a 00)
assert(Shogun2.dll+00912245,2b c2 89 41 18 c2 04 00 c7 41 18 00 00 00 00 c2 04 00)
assert(Shogun2.dll+0090641c,8b 17 8b 42 0c 8b cf ff d0 39 a8 e0 00 00 00)
assert(Shogun2.dll+00ec2e31,8b 49 1c 2b 4e 08 8b c7 33 d2 85 c0)
assert(Shogun2.dll+00f85c4a,89 46 0c 8b 46 04 3b c5)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_MonGold)
label(_BackMG)
label(_ExitMG)
label(_MonMP)
label(_MonM0)
label(_BackMM)
label(_ExitMM)
label(_MonSelOfficer)
label(_BackMSO)
label(_ExitMSO)
label(_MonSelTown)
label(_BackMST)
label(_ExitMST)
label(_MonMP1)
label(_BackMM1)
label(_ExitMM1)
label(_MonProd)
label(_BackMPr)
label(_ExitMPr)
label(_MonResearch)
label(_BackMR)
label(_ExitMR)
label(_MonConst)
label(_BackMC)
label(_ExitMC)

label(pSel)
label(pGold)
label(pOfficer)
label(pTown)
label(pAgent)

label(pConst)
label(pConst1)

label(iEnableMG)
label(iEnableMM)
label(iEnableMTS)
label(iEnableMP)
label(iEnableMR)
label(iEnableMC)
label(iMinGold)
label(aLast1)

label(iCountMST)
label(iCountMPR)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pSel)
registersymbol(pGold)
registersymbol(pOfficer)
registersymbol(pTown)
registersymbol(pAgent)

registersymbol(pConst)
registersymbol(pConst1)

registersymbol(iEnableMG)
registersymbol(iEnableMM)
registersymbol(iEnableMTS)
registersymbol(iEnableMP)
registersymbol(iEnableMR)
registersymbol(iEnableMC)
registersymbol(iMinGold)

registersymbol(aLast1)

registersymbol(iCountMST)
registersymbol(iCountMPR)

//=========================================
MyCode:
//========================================= 5346
// TBS Gold
_MonGold:
 mov dword ptr [aLast1],'MoGo'

 mov eax,[ecx+00000470]            // Get pointer to player

 cmp eax,[pGold]
 jne _ExitMG

 cmp dword ptr [iEnableMG],0
 je _ExitMG                        // Jump if feature is disabled

 mov eax,[iMinGold]
 cmp eax,[ecx+0000046C]
 jle _ExitMG

 mov [ecx+0000046C],eax            // Update gold

_ExitMG:
 mov eax,[ecx+0000046C]            // Original code
 jmp _BackMG                       // Back to main code

//========================================= 5355
// TBS Troop Movement Points/Size
_MonMP:
 mov dword ptr [aLast1],'MoMP'

 push ecx

 mov ecx,[eax+3c]                  // Get pointer to Owner **0044
 cmp ecx,[pGold]                   // Is it a player's troop?
 jne _ExitMM

 cmp dword ptr [iEnableMM],0
 je _MonM0                         // Jump if feature is disabled

 xor edi,edi                       // value2decrease = 0

_MonM0:
 cmp dword ptr [iEnableMTS],0
 je _ExitMM                        // Jump if feature is disabled

 mov ecx,[eax+48]                  // Get troop maximum size **0050
 mov [eax+44],ecx                  // Update current size **004c

_ExitMM:
 pop ecx

 sub edx,edi                       // Original code
 mov [eax+64],edx                  // Original code **006c
 jmp _BackMM                       // Back to main code

//========================================= 5355
// TBS Selected Officer
_MonSelOfficer:
 mov dword ptr [aLast1],'MoSO'

 push ebx

 mov [pOfficer],eax

 mov ebx,[eax+00000258]            // Get pointer to ptr to Owner **02b4
 test ebx,ebx
 jz _ExitMSO

 mov ebx,[ebx]

 mov [pGold],ebx

_ExitMSO:
 pop ebx

 cmp [eax+00000518],ebx            // Original code **1c14
 jmp _BackMSO                      // Back to main code

//========================================= 5355
// TBS Find out player ID via Selected City Info
_MonSelTown:
 mov dword ptr [aLast1],'MoST'

 inc dword ptr [iCountMST]

 mov eax,[esi+3C]                  // **0040
 mov [pGold],eax
 mov [pTown],esi

_ExitMST:
 mov eax,[esi+000000BC]            // Original code **00cc
 jmp _BackMST                      // Back to main code

//========================================= 5355
// TBS Agents Movement Points
_MonMP1:
 mov dword ptr [aLast1],'MMP1'

 push ebx

 mov ebx,[ecx+00000258]            // Get pointer to ptr to Owner **02b4
 test ebx,ebx
 jz _ExitMM1

 mov ebx,[ebx]
 cmp ebx,[pGold]                   // Is it a player's Agent?
 jne _ExitMM1

 mov [pAgent],ecx

 cmp dword ptr [iEnableMM],0
 je _ExitMM1                       // Jump if feature is disabled

 mov eax,[ecx+14]                  // Get Max MP **0018
 mov [ecx+18],eax                  // Cur = max **001c

 xor edx,edx                       // value2decrease = 0

_ExitMM1:
 pop ebx

 sub eax,edx                       // Original code
 mov [ecx+18],eax                  // Original code **001c
 jmp _BackMM1                      // Back to main code

//========================================= 5355
// TBS Troop Production of selected Town
_MonProd:
 mov dword ptr [aLast1],'MoPr'

 inc dword ptr [iCountMPR]

 mov edx,[edi+14]                  // Get pointer to Town
 test edx,edx
 jz _ExitMPr

 mov eax,[edx+3c]                  // Get pointer to ptr to Owner **0040
 test eax,eax
 jz _ExitMPr

 cmp eax,[pGold]                   // Is it a player's Town?
 jne _ExitMPr

 cmp dword ptr [iEnableMP],0
 je _ExitMPr                       // Jump if feature is disabled

 xor eax,eax
 xchg eax,eax

 lea edi,[edi+eax*4+00000000]

 mov [edi+1c],eax                  // Make it one turn production

_ExitMPr:
 mov edx,[edi]                     // Original code
 mov eax,[edx+0C]                  // Original code
 jmp _BackMPr                      // Back to main code

//========================================= 5355
// TBS Research Progress
_MonResearch:
 mov dword ptr [aLast1],'MoRe'

 cmp dword ptr [iEnableMR],0
 je _ExitMR                        // Jump if feature is disabled

 mov eax,[esi+08]                  // Get research points
 mov [ecx+1c],eax                  // Update points needed to complete research

_ExitMR:
 mov ecx,[ecx+1C]                  // Original code
 sub ecx,[esi+08]                  // Original code
 jmp _BackMR                       // Back to main code

//========================================= 5355
// TBS Construction Progress
_MonConst:
 push ebx

 mov dword ptr [aLast1],'MoCo'

 mov [pConst],esi
 mov [pConst1],eax

 cmp dword ptr [iEnableMC],0
 je _ExitMC                        // Jump if feature is disabled

 test eax,eax
 jz _ExitMC

 mov ebx,[esi+04]
 test ebx,ebx
 jz _ExitMC

 mov ebx,[ebx+00000094]
 cmp ebx,[pGold]
 jne _ExitMC

 mov ebx,[eax+10]
 dec ebx
 cmp ebx,[eax+0c]
 jle _ExitMC

 mov [eax+0c],ebx

_ExitMC:
 pop ebx

 mov [esi+0C],eax                  // Original code
 mov eax,[esi+04]                  // Original code
 jmp _BackMC                       // Back to main code

//=========================================
 db '====================================&gt;'
 db 'CE6.1 Script by Recifense 041112'
//=========================================
// Variables
iEnableMG:
 dd 1
iEnableMM:
 dd 1
iEnableMTS:
 dd 1
iEnableMP:
 dd 1
iEnableMR:
 dd 1
iEnableMC:
 dd 1
pSel:
 dd 0
pGold:
 dd MyCode
pOfficer:
 dd 0
pTown:
 dd 0
pAgent:
 dd 0
pConst:
 dd 0
pConst1:
 dd 0
iMinGold:
 dd #61000
aLast1:
 dd 'CE61'
iCountMST:
 dd 0
iCountMPR:
 dd 0

//=========================================
// Hacking Points
//Shogun2.dll+003c9070:
Shogun2.dll+00193690:
 jmp _MonGold
 xchg eax,eax
_BackMG:

//Shogun2.dll+008e9d80:
Shogun2.dll+00d38680:
 jmp _MonMP
_BackMM:

//Shogun2.dll+00c2a5ac:
Shogun2.dll+0097514c:
 jmp _MonSelOfficer
 xchg eax,eax
_BackMSO:

//Shogun2.dll+00f7f913:
Shogun2.dll+0045eb63:
 jmp _MonSelTown
 xchg eax,eax
_BackMST:

//Shogun2.dll+005ace35:
Shogun2.dll+00912245:
 jmp _MonMP1
_BackMM1:

//Shogun2.dll+00e7f9cc:
Shogun2.dll+0090641c:
 jmp _MonProd
_BackMPr:

//Shogun2.dll+00c67b11:
Shogun2.dll+00ec2e31:
 jmp _MonResearch
 xchg eax,eax
_BackMR:

//Shogun2.dll+003a8e7a:
Shogun2.dll+00f85c4a:
 jmp _MonConst
 xchg eax,eax
_BackMC:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
//pMonGold:
//Shogun2.dll+003c9070:
Shogun2.dll+00193690:
// mov eax,[ecx+0000046C]
 db 8b 81 6c 04 00 00

//pMonMP:
//Shogun2.dll+008e9d80:
Shogun2.dll+00d38680:
// sub edx,edi
// mov [eax+64],edx
 db 2b d7 89 50 64

//pMonSelOfficer:
//Shogun2.dll+00c2a5ac:
Shogun2.dll+0097514c:
// cmp [eax+00000518],ebx
 db 39 98 18 05 00 00

//pMonSelTown: // NHP
//Shogun2.dll+00f7f913:
Shogun2.dll+0045eb63:
// mov eax,[esi+000000BC]
 db 8b 86 bc 00 00 00

//pMonMP1:
//Shogun2.dll+005ace35:
Shogun2.dll+00912245:
// sub eax,edx
// mov [ecx+18],eax
 db 2b c2 89 41 18

//pMonProd: //NHP
//Shogun2.dll+00e7f9cc:
Shogun2.dll+0090641c:
// mov edx,[edi]
// mov eax,[edx+0C]
 db 8b 17 8b 42 0c

//Shogun2.dll+00c67b11:
Shogun2.dll+00ec2e31:
// mov ecx,[ecx+1C]
// sub ecx,[esi+08]
 db 8b 49 1c 2b 4e 08

//Shogun2.dll+003a8e7a:
Shogun2.dll+00f85c4a:
// mov [esi+0C],eax
// mov eax,[esi+04]
 db 89 46 0c 8b 46 04

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pSel)
unregistersymbol(pGold)
unregistersymbol(pOfficer)
unregistersymbol(pTown)
unregistersymbol(pAgent)

unregistersymbol(pConst)
unregistersymbol(pConst1)

unregistersymbol(iEnableMG)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMTS)
unregistersymbol(iEnableMP)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMC)
unregistersymbol(iMinGold)

unregistersymbol(aLast1)

unregistersymbol(iCountMST)
unregistersymbol(iCountMPR)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>35</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Enable/Disable Unlimited Movement Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Enable/Disable Auto Troop Size Recover"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMTS</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Enable/Disable Minimum Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMG</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Enable/Disable One Turn Research"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Enable/Disable One Turn Recruitment"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMP</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Enable/Disable One Turn Construction"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Minimum Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iMinGold</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Player's Current Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGold</Address>
          <Offsets>
            <Offset>4FC</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Selected General's Born Year"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pOfficer</Address>
          <Offsets>
            <Offset>300</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>60</ID>
          <Description>"Selected General's Skill Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pOfficer</Address>
          <Offsets>
            <Offset>518</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Selected General's Current XP"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pOfficer</Address>
          <Offsets>
            <Offset>520</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Last Moved Agent's Born Year"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pAgent</Address>
          <Offsets>
            <Offset>300</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Last Moved Agent's Skill Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pAgent</Address>
          <Offsets>
            <Offset>518</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Last Moved Agent's Current XP"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pAgent</Address>
          <Offsets>
            <Offset>520</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pTroop</Name>
      <Address>046A032A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>046A032E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pRot</Name>
      <Address>046A0332</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommon</Name>
      <Address>046A033E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount0</Name>
      <Address>046A0356</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount2</Name>
      <Address>046A035E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount3</Name>
      <Address>046A0362</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCountS</Name>
      <Address>046A0366</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pTroop1</Name>
      <Address>046A034E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit1</Name>
      <Address>046A0352</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM1</Name>
      <Address>02BA0344</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM2</Name>
      <Address>02BA0348</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMS</Name>
      <Address>02BA0354</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Total War - Shogun 2 (Fall of the Samurai)
 Game Version  : 1.10 (Build 5346 - SR)
 Process Name  : Shogun2.exe
 Script Version: 3.0
 CE Version    : 6.1
 Release date  : 11-Apr-2012
 Author        : Recifense
 Features:
 - God Mode
 - Unlimited Ammo (Arroes, Bombs, etc)
 - Unlimited Movement Points (Army on strategic map)
 - Recover Troop Size when army moves (Army on strategic map)
 - One turn Recruitment (Troops and Ships)
 - One turn Research (Mastery on Arts)
 - One turn Construction (Town/Province on strategic map)
 - Minimum Gold (on strategic map)
 - Pointer to Player's current gold (on strategic map)
 - Pointer to Skill points of select army's officer (on strategic map)
 - Pointer to Player's Agent that last moved (on strategic map)
 [Note] In order to identify the human player, at the start/load of
 any game, selected a troop with an officer or selected a city info.
===========================================
1) God Mode: For all Units and Ships
2) Unlimited Ammo (Arrows, Bombs, etc)
3) Unlimited Movement Points (Army on campaign)
4) Recover troop size when Army moves (Army on campaign)
5) One Turn Recruitment (Troops and Ships)
6) One Turn Research (Mastery of the Arts) - Pass the cursor over or select the research item;
7) One Turn Construction (Settlement and Province).
8) Minimum Gold (On campaign)
9) Player's Current Gold (On campaign)
10) Skill points of selected army's general (On Campaign)
11) Skill points of last moved Agent (On Campaign)
[Note] In order to identify the human player, at the start/load of any game, selected a troop with an officer or selected a city info. If already selected, deselect it and select it again.
[Note] For activating the script, just check its "active" box by clicking on it [X].
[IMPORTANT]  DON'T NEED TO DEACTIVATE THE SCRIPTS
[IMPORTANT] Quick save your game before combat and turns;
===============================
</Comments>
</CheatTable>
