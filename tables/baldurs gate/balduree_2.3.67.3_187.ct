<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Disable fog"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(bytes,66 85 0C 70 8B 4D 08)
define(bytes2,3B 5D F4 75 09)
define(bytes3,0F B6 81 5C 3A 00 00)

[ENABLE]

alloc(newmem,128)
alloc(newmem2,128)
alloc(newmem3,128)

label(address)
label(address2)
label(address3)

aobscanmodule(aob,Baldur.exe,66 85 0C 70 8B 4D 08 0F 95 C0 84 C0 75 03 80 CB 04)
aobscanmodule(aob2,Baldur.exe,3B 5D F4 75 09 3B 7D 18)
aobscanmodule(aob3,Baldur.exe,0F B6 81 5C 3A 00 00 C1 E0 05)

registersymbol(address)
registersymbol(address2)
registersymbol(address3)

label(code)
label(return)
label(code2)
label(return2)
label(code3)
label(cheat3)
label(return3)

newmem:

// Remove visual fog effect my marking
// every explored map fragment as visible
code:
  // 00 - Unexplored
  // 01 - Not visible
  // 03 - Visible
  mov byte ptr [eax+esi*2],01
  test [eax+esi*2],cx
  mov ecx,[ebp+08]
  jmp return

aob:
address:
  jmp code
  nop
  nop
return:


newmem2:

// Skip check for entities line of sight obscruction
// makng them visible through walls
code2:
  // Skip check, jump straight to fuction return
  //cmp ebx,[ebp-0C]
  //jne Baldur.SDL_GetNumAudioDrivers+BB5CD
  jmp Baldur.exe+14C11D
  jmp return2

aob2:
address2:
  jmp code2
return2:

newmem3:

// Set visual range used for calculations to maximum
code3:
  // Read visual range value for some entity
  movzx eax,byte ptr [ecx+00003A5C]
  // Check if entity is user controlled
  cmp [ecx+3520],0
  jne cheat3
  jmp return3

cheat3:
  // Set visual range to maximum
  or eax,FF
  jmp return3

aob3:
address3:
  jmp code3
  nop
  nop
return3:

[DISABLE]

address:
  db bytes
  // test [eax+esi*2],cx
  // mov ecx,[ebp+08]

address2:
  db bytes2
  // cmp ebx,[ebp-0C]
  // jne Baldur.SDL_GetNumAudioDrivers+BB5CD

address3:
  db bytes3
  // movzx eax,byte ptr [ecx+00003A5C]

dealloc(newmem)
dealloc(newmem2)
dealloc(newmem3)

unregistersymbol(address)
unregistersymbol(address2)
unregistersymbol(address3)

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+208DE0

"Baldur.exe"+208DC8: 0F 95 C0              -  setne al
"Baldur.exe"+208DCB: 84 C0                 -  test al,al
"Baldur.exe"+208DCD: 75 03                 -  jne Baldur.exe+208DD2
"Baldur.exe"+208DCF: 80 CB 02              -  or bl,02
"Baldur.exe"+208DD2: 85 D2                 -  test edx,edx
"Baldur.exe"+208DD4: 75 C4                 -  jne Baldur.exe+208D9A
"Baldur.exe"+208DD6: 46                    -  inc esi
"Baldur.exe"+208DD7: 78 15                 -  js Baldur.exe+208DEE
"Baldur.exe"+208DD9: 8B 07                 -  mov eax,[edi]
"Baldur.exe"+208DDB: B9 FF 7F 00 00        -  mov ecx,00007FFF
// ---------- INJECTING HERE ----------
"Baldur.exe"+208DE0: 66 85 0C 70           -  test [eax+esi*2],cx
"Baldur.exe"+208DE4: 8B 4D 08              -  mov ecx,[ebp+08]
// ---------- DONE INJECTING  ----------
"Baldur.exe"+208DE7: 0F 95 C0              -  setne al
"Baldur.exe"+208DEA: 84 C0                 -  test al,al
"Baldur.exe"+208DEC: 75 03                 -  jne Baldur.exe+208DF1
"Baldur.exe"+208DEE: 80 CB 04              -  or bl,04
"Baldur.exe"+208DF1: 8D 71 01              -  lea esi,[ecx+01]
"Baldur.exe"+208DF4: 85 F6                 -  test esi,esi
"Baldur.exe"+208DF6: 78 15                 -  js Baldur.exe+208E0D
"Baldur.exe"+208DF8: 8B 07                 -  mov eax,[edi]
"Baldur.exe"+208DFA: BA FF 7F 00 00        -  mov edx,00007FFF
"Baldur.exe"+208DFF: 66 85 14 70           -  test [eax+esi*2],dx
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+14C20F

"Baldur.exe"+14C1F4: 8B D3                 -  mov edx,ebx
"Baldur.exe"+14C1F6: D3 E0                 -  shl eax,cl
"Baldur.exe"+14C1F8: 8B F7                 -  mov esi,edi
"Baldur.exe"+14C1FA: 0F BF 0D 98 28 8A 00  -  movsx ecx,word ptr [Baldur.exe+4A2898]
"Baldur.exe"+14C201: D3 E2                 -  shl edx,cl
"Baldur.exe"+14C203: D3 E6                 -  shl esi,cl
"Baldur.exe"+14C205: 03 D0                 -  add edx,eax
"Baldur.exe"+14C207: 03 F0                 -  add esi,eax
"Baldur.exe"+14C209: 89 75 EC              -  mov [ebp-14],esi
"Baldur.exe"+14C20C: 89 55 F0              -  mov [ebp-10],edx
// ---------- INJECTING HERE ----------
"Baldur.exe"+14C20F: 3B 5D F4              -  cmp ebx,[ebp-0C]
"Baldur.exe"+14C212: 75 09                 -  jne Baldur.exe+14C21D
// ---------- DONE INJECTING  ----------
"Baldur.exe"+14C214: 3B 7D 18              -  cmp edi,[ebp+18]
"Baldur.exe"+14C217: 0F 84 00 FF FF FF     -  je Baldur.exe+14C11D
"Baldur.exe"+14C21D: 8B 5D F8              -  mov ebx,[ebp-08]
"Baldur.exe"+14C220: 8D 45 08              -  lea eax,[ebp+08]
"Baldur.exe"+14C223: 6A 00                 -  push 00
"Baldur.exe"+14C225: 50                    -  push eax
"Baldur.exe"+14C226: FF 75 10              -  push [ebp+10]
"Baldur.exe"+14C229: 8D 45 E4              -  lea eax,[ebp-1C]
"Baldur.exe"+14C22C: 50                    -  push eax
"Baldur.exe"+14C22D: 8D 8B 8C 07 00 00     -  lea ecx,[ebx+0000078C]
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+1A4630

"Baldur.exe"+1A4626: C3                    -  ret
"Baldur.exe"+1A4627: CC                    -  int 3
"Baldur.exe"+1A4628: CC                    -  int 3
"Baldur.exe"+1A4629: CC                    -  int 3
"Baldur.exe"+1A462A: CC                    -  int 3
"Baldur.exe"+1A462B: CC                    -  int 3
"Baldur.exe"+1A462C: CC                    -  int 3
"Baldur.exe"+1A462D: CC                    -  int 3
"Baldur.exe"+1A462E: CC                    -  int 3
"Baldur.exe"+1A462F: CC                    -  int 3
// ---------- INJECTING HERE ----------
"Baldur.exe"+1A4630: 0F B6 81 5C 3A 00 00  -  movzx eax,byte ptr [ecx+00003A5C]
// ---------- DONE INJECTING  ----------
"Baldur.exe"+1A4637: C1 E0 05              -  shl eax,05
"Baldur.exe"+1A463A: C3                    -  ret
"Baldur.exe"+1A463B: CC                    -  int 3
"Baldur.exe"+1A463C: CC                    -  int 3
"Baldur.exe"+1A463D: CC                    -  int 3
"Baldur.exe"+1A463E: CC                    -  int 3
"Baldur.exe"+1A463F: CC                    -  int 3
"Baldur.exe"+1A4640: 55                    -  push ebp
"Baldur.exe"+1A4641: 8B EC                 -  mov ebp,esp
"Baldur.exe"+1A4643: 51                    -  push ecx
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>192</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Constantly refresh spell slots for selected character"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(address,"Baldur.exe"+2DD187)
define(bytes,0F B7 46 08 A8 01)
define(address2,"Baldur.exe"+2DCE0E)
define(bytes2,0F B7 46 08 A8 01)
define(address3,"Baldur.exe"+2DD500)
define(bytes3,0F B7 43 08 A8 01)

[ENABLE]

assert(address,bytes)
alloc(newmem,64)
assert(address2,bytes2)
alloc(newmem2,64)
assert(address3,bytes3)
alloc(newmem3,64)

label(code)
label(return)
label(code2)
label(return2)
label(code3)
label(return3)


newmem:

// Wizard spells
code:
  mov word ptr [esi+08],01
  movzx eax,word ptr [esi+08]
  test al,01
  jmp return

address:
  jmp code
  nop
return:


newmem2:

// Priest spells
code2:
  mov word ptr [esi+08],01
  movzx eax,word ptr [esi+08]
  test al,01
  jmp return2

address2:
  jmp code2
  nop
return2:


newmem3:

// Innate abilities
code3:
  mov word ptr [ebx+08],01
  movzx eax,word ptr [ebx+08]
  test al,01
  jmp return3

address3:
  jmp code3
  nop
return3:

[DISABLE]

address:
  db bytes
  // movzx eax,word ptr [esi+08]
  // test al,01

address2:
  db bytes2
  // movzx eax,word ptr [esi+08]
  // test al,01

address3:
  db bytes3
  // movzx eax,word ptr [ebx+08]
  // test al,01

dealloc(newmem)
dealloc(newmem2)
dealloc(newmem3)

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2DD187

"Baldur.exe"+2DD165: 85 FF              -  test edi,edi
"Baldur.exe"+2DD167: 0F 84 3D 03 00 00  -  je Baldur.exe+2DD4AA
"Baldur.exe"+2DD16D: 8D 49 00           -  lea ecx,[ecx+00]
"Baldur.exe"+2DD170: 8B 77 08           -  mov esi,[edi+08]
"Baldur.exe"+2DD173: 8D 4D E4           -  lea ecx,[ebp-1C]
"Baldur.exe"+2DD176: 8B 3F              -  mov edi,[edi]
"Baldur.exe"+2DD178: 56                 -  push esi
"Baldur.exe"+2DD179: 89 7D 80           -  mov [ebp-80],edi
"Baldur.exe"+2DD17C: 89 B5 78 FF FF FF  -  mov [ebp-00000088],esi
"Baldur.exe"+2DD182: E8 49 DA 08 00     -  call Baldur.exe+36ABD0
// ---------- INJECTING HERE ----------
"Baldur.exe"+2DD187: 0F B7 46 08        -  movzx eax,word ptr [esi+08]
"Baldur.exe"+2DD18B: A8 01              -  test al,01
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2DD18D: 0F 84 03 03 00 00  -  je Baldur.exe+2DD496
"Baldur.exe"+2DD193: A8 02              -  test al,02
"Baldur.exe"+2DD195: 0F 85 FB 02 00 00  -  jne Baldur.exe+2DD496
"Baldur.exe"+2DD19B: 6A 0C              -  push 0C
"Baldur.exe"+2DD19D: E8 65 C3 16 00     -  call Baldur.exe+449507
"Baldur.exe"+2DD1A2: 8B D8              -  mov ebx,eax
"Baldur.exe"+2DD1A4: 83 C4 04           -  add esp,04
"Baldur.exe"+2DD1A7: 85 DB              -  test ebx,ebx
"Baldur.exe"+2DD1A9: 74 39              -  je Baldur.exe+2DD1E4
"Baldur.exe"+2DD1AB: 56                 -  push esi
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2DCE0E

"Baldur.exe"+2DCDE4: 8D 83 A0 08 00 00     -  lea eax,[ebx+000008A0]
"Baldur.exe"+2DCDEA: 89 8D 7C FF FF FF     -  mov [ebp-00000084],ecx
"Baldur.exe"+2DCDF0: 89 85 78 FF FF FF     -  mov [ebp-00000088],eax
"Baldur.exe"+2DCDF6: 8B 38                 -  mov edi,[eax]
"Baldur.exe"+2DCDF8: 85 FF                 -  test edi,edi
"Baldur.exe"+2DCDFA: 0F 84 28 03 00 00     -  je Baldur.exe+2DD128
"Baldur.exe"+2DCE00: 8B 77 08              -  mov esi,[edi+08]
"Baldur.exe"+2DCE03: 8B 3F                 -  mov edi,[edi]
"Baldur.exe"+2DCE05: 89 7D 80              -  mov [ebp-80],edi
"Baldur.exe"+2DCE08: 89 B5 74 FF FF FF     -  mov [ebp-0000008C],esi
// ---------- INJECTING HERE ----------
"Baldur.exe"+2DCE0E: 0F B7 46 08           -  movzx eax,word ptr [esi+08]
"Baldur.exe"+2DCE12: A8 01                 -  test al,01
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2DCE14: 0F 84 FA 02 00 00     -  je Baldur.exe+2DD114
"Baldur.exe"+2DCE1A: A8 02                 -  test al,02
"Baldur.exe"+2DCE1C: 0F 85 F2 02 00 00     -  jne Baldur.exe+2DD114
"Baldur.exe"+2DCE22: 6A 0C                 -  push 0C
"Baldur.exe"+2DCE24: E8 DE C6 16 00        -  call Baldur.exe+449507
"Baldur.exe"+2DCE29: 8B D8                 -  mov ebx,eax
"Baldur.exe"+2DCE2B: 83 C4 04              -  add esp,04
"Baldur.exe"+2DCE2E: 85 DB                 -  test ebx,ebx
"Baldur.exe"+2DCE30: 74 39                 -  je Baldur.exe+2DCE6B
"Baldur.exe"+2DCE32: 56                    -  push esi
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2DD500

"Baldur.exe"+2DD4DA: 8D 9B 00 00 00 00     -  lea ebx,[ebx+00000000]
"Baldur.exe"+2DD4E0: 8B 18                 -  mov ebx,[eax]
"Baldur.exe"+2DD4E2: 85 DB                 -  test ebx,ebx
"Baldur.exe"+2DD4E4: 0F 84 59 03 00 00     -  je Baldur.exe+2DD843
"Baldur.exe"+2DD4EA: 8D 9B 00 00 00 00     -  lea ebx,[ebx+00000000]
"Baldur.exe"+2DD4F0: 8D 03                 -  lea eax,[ebx]
"Baldur.exe"+2DD4F2: 8B 1B                 -  mov ebx,[ebx]
"Baldur.exe"+2DD4F4: 89 5D 80              -  mov [ebp-80],ebx
"Baldur.exe"+2DD4F7: 8B 58 08              -  mov ebx,[eax+08]
"Baldur.exe"+2DD4FA: 89 9D 78 FF FF FF     -  mov [ebp-00000088],ebx
// ---------- INJECTING HERE ----------
"Baldur.exe"+2DD500: 0F B7 43 08           -  movzx eax,word ptr [ebx+08]
"Baldur.exe"+2DD504: A8 01                 -  test al,01
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2DD506: 0F 84 20 03 00 00     -  je Baldur.exe+2DD82C
"Baldur.exe"+2DD50C: A8 02                 -  test al,02
"Baldur.exe"+2DD50E: 0F 85 18 03 00 00     -  jne Baldur.exe+2DD82C
"Baldur.exe"+2DD514: 8B CF                 -  mov ecx,edi
"Baldur.exe"+2DD516: C7 45 F8 01 00 00 00  -  mov [ebp-08],00000001
"Baldur.exe"+2DD51D: E8 2E F9 E1 FF        -  call Baldur.exe+FCE50
"Baldur.exe"+2DD522: 0F B7 40 46           -  movzx eax,word ptr [eax+46]
"Baldur.exe"+2DD526: 89 85 6C FF FF FF     -  mov [ebp-00000094],eax
"Baldur.exe"+2DD52C: 8D 45 F8              -  lea eax,[ebp-08]
"Baldur.exe"+2DD52F: 50                    -  push eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Don't mark spell slots as used"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(address,"Baldur.exe"+32D2F4)
define(bytes,B9 FE FF 00 00 66 21 48 08 8D 4D 9C)
define(address2,"Baldur.exe"+32F00D)
define(bytes2,66 21 43 08 E8 8A AD E0 FF)
define(address3,"Baldur.exe"+2F5E60)
define(bytes3,66 21 43 08 E9 B7 01 00 00)
define(address4,"Baldur.exe"+2D4B97)
define(bytes4,66 89 47 F8 83 7D 10 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,128)
assert(address2,bytes2)
alloc(newmem2,128)
assert(address3,bytes3)
alloc(newmem3,128)
assert(address4,bytes4)
alloc(newmem4,128)

label(code)
label(default)
label(return)
label(code2)
label(return2)
label(code3)
label(return3)
label(code4)
label(return4)

newmem:

// Regular spells
code:
  // checking for NPC
  cmp [ecx+258],00
  // PC, don't mark spell slot as used
  je default
  // mark slot
  mov ecx,0000FFFE
  and [eax+08],cx
  jmp default

default:
  lea ecx,[ebp-64]
  jmp return

address:
  jmp code
  nop
  nop
  nop
  nop
return:


newmem2:

// Area spells
code2:
  // Don't mark spell slot as used
  //and [ebx+08],ax
  call Baldur.SDL_GetNumAudioDrivers+A9150
  jmp return2

address2:
  jmp code2
  nop
  nop
  nop
  nop
return2:


newmem3:

// Instant spells, e.g. Nahal's Reckless Dweomer
code3:
  // Don't mark spell slot as used
  //and [ebx+08],ax
  jmp Baldur.SDL_GetNumAudioDrivers+2653D0
  jmp return3

address3:
  jmp code3
  nop
  nop
  nop
  nop
return3:


newmem4:

// Fix quick spell slots
code4:
  // Always show 1 slot available
  mov [edi-08],01
  cmp dword ptr [ebp+10],00
  jmp return4

address4:
  jmp code4
  nop
  nop
  nop
return4:

[DISABLE]

address:
  db bytes
  // mov ecx,0000FFFE
  // and [eax+08],cx
  // lea ecx,[ebp-64]

address2:
  db bytes2
  // and [ebx+08],ax
  // call Baldur.SDL_GetNumAudioDrivers+A9150

address3:
  db bytes3
  // and [ebx+08],ax
  // jmp Baldur.SDL_GetNumAudioDrivers+2653D0

address4:
  db bytes4
  // mov [edi-08],ax
  // cmp dword ptr [ebp+10],00

dealloc(newmem)
dealloc(newmem2)
dealloc(newmem3)
dealloc(newmem4)

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+32D2F9

"Baldur.exe"+32D2D7: 85 FF                 -  test edi,edi
"Baldur.exe"+32D2D9: 75 D5                 -  jne Baldur.exe+32D2B0
"Baldur.exe"+32D2DB: E9 5B FE FF FF        -  jmp Baldur.exe+32D13B
"Baldur.exe"+32D2E0: 8B 06                 -  mov eax,[esi]
"Baldur.exe"+32D2E2: 8B CE                 -  mov ecx,esi
"Baldur.exe"+32D2E4: FF 50 10              -  call dword ptr [eax+10]
"Baldur.exe"+32D2E7: 8B C8                 -  mov ecx,eax
"Baldur.exe"+32D2E9: E8 22 41 DD FF        -  call Baldur.exe+101410
"Baldur.exe"+32D2EE: 8B 85 60 FF FF FF     -  mov eax,[ebp-000000A0]
// ---------- INJECTING HERE ----------
"Baldur.exe"+32D2F4: B9 FE FF 00 00        -  mov ecx,0000FFFE
"Baldur.exe"+32D2F9: 66 21 48 08           -  and [eax+08],cx
"Baldur.exe"+32D2FD: 8D 4D 9C              -  lea ecx,[ebp-64]
// ---------- DONE INJECTING  ----------
"Baldur.exe"+32D300: E8 9B CA E0 FF        -  call Baldur.exe+139DA0
"Baldur.exe"+32D305: B8 01 00 00 00        -  mov eax,00000001
"Baldur.exe"+32D30A: 8D 4D A2              -  lea ecx,[ebp-5E]
"Baldur.exe"+32D30D: 66 89 45 9C           -  mov [ebp-64],ax
"Baldur.exe"+32D311: 8D 85 54 FF FF FF     -  lea eax,[ebp-000000AC]
"Baldur.exe"+32D317: 50                    -  push eax
"Baldur.exe"+32D318: 8D 45 F4              -  lea eax,[ebp-0C]
"Baldur.exe"+32D31B: 50                    -  push eax
"Baldur.exe"+32D31C: E8 0F D9 03 00        -  call Baldur.exe+36AC30
"Baldur.exe"+32D321: 6A 00                 -  push 00
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+32F00D

"Baldur.exe"+32EFEE: 85 FF                 -  test edi,edi
"Baldur.exe"+32EFF0: 75 E4                 -  jne Baldur.exe+32EFD6
"Baldur.exe"+32EFF2: E9 78 FE FF FF        -  jmp Baldur.exe+32EE6F
"Baldur.exe"+32EFF7: 8B 06                 -  mov eax,[esi]
"Baldur.exe"+32EFF9: 8B CE                 -  mov ecx,esi
"Baldur.exe"+32EFFB: FF 50 10              -  call dword ptr [eax+10]
"Baldur.exe"+32EFFE: 8B C8                 -  mov ecx,eax
"Baldur.exe"+32F000: E8 0B 24 DD FF        -  call Baldur.exe+101410
"Baldur.exe"+32F005: B8 FE FF 00 00        -  mov eax,0000FFFE
"Baldur.exe"+32F00A: 8D 4D D0              -  lea ecx,[ebp-30]
// ---------- INJECTING HERE ----------
"Baldur.exe"+32F00D: 66 21 43 08           -  and [ebx+08],ax
"Baldur.exe"+32F011: E8 8A AD E0 FF        -  call Baldur.exe+139DA0
// ---------- DONE INJECTING  ----------
"Baldur.exe"+32F016: B8 01 00 00 00        -  mov eax,00000001
"Baldur.exe"+32F01B: 8D 4D D6              -  lea ecx,[ebp-2A]
"Baldur.exe"+32F01E: 66 89 45 D0           -  mov [ebp-30],ax
"Baldur.exe"+32F022: 8D 45 88              -  lea eax,[ebp-78]
"Baldur.exe"+32F025: 50                    -  push eax
"Baldur.exe"+32F026: 8D 45 F4              -  lea eax,[ebp-0C]
"Baldur.exe"+32F029: 50                    -  push eax
"Baldur.exe"+32F02A: E8 01 BC 03 00        -  call Baldur.exe+36AC30
"Baldur.exe"+32F02F: 6A 00                 -  push 00
"Baldur.exe"+32F031: 6A 00                 -  push 00
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2F5E60

"Baldur.exe"+2F5E42: 75 09                 -  jne Baldur.exe+2F5E4D
"Baldur.exe"+2F5E44: 85 F6                 -  test esi,esi
"Baldur.exe"+2F5E46: 75 D8                 -  jne Baldur.exe+2F5E20
"Baldur.exe"+2F5E48: E9 D3 01 00 00        -  jmp Baldur.exe+2F6020
"Baldur.exe"+2F5E4D: 8B 07                 -  mov eax,[edi]
"Baldur.exe"+2F5E4F: 8B CF                 -  mov ecx,edi
"Baldur.exe"+2F5E51: FF 50 10              -  call dword ptr [eax+10]
"Baldur.exe"+2F5E54: 8B C8                 -  mov ecx,eax
"Baldur.exe"+2F5E56: E8 B5 B5 E0 FF        -  call Baldur.exe+101410
"Baldur.exe"+2F5E5B: B8 FE FF 00 00        -  mov eax,0000FFFE
// ---------- INJECTING HERE ----------
"Baldur.exe"+2F5E60: 66 21 43 08           -  and [ebx+08],ax
"Baldur.exe"+2F5E64: E9 B7 01 00 00        -  jmp Baldur.exe+2F6020
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2F5E69: 66 83 F8 02           -  cmp ax,02
"Baldur.exe"+2F5E6D: 0F 85 92 00 00 00     -  jne Baldur.exe+2F5F05
"Baldur.exe"+2F5E73: B8 07 00 00 00        -  mov eax,00000007
"Baldur.exe"+2F5E78: 66 3B F0              -  cmp si,ax
"Baldur.exe"+2F5E7B: 0F 4F F0              -  cmovg esi,eax
"Baldur.exe"+2F5E7E: 0F BF C6              -  movsx eax,si
"Baldur.exe"+2F5E81: 89 45 D4              -  mov [ebp-2C],eax
"Baldur.exe"+2F5E84: 8D 48 4E              -  lea ecx,[eax+4E]
"Baldur.exe"+2F5E87: 8D 04 CD 00 00 00 00  -  lea eax,[ecx*8+00000000]
"Baldur.exe"+2F5E8E: 2B C1                 -  sub eax,ecx
}

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2D4B97

"Baldur.exe"+2D4B78: 0F B7 47 F8           -  movzx eax,word ptr [edi-08]
"Baldur.exe"+2D4B7C: 98                    -  cwde
"Baldur.exe"+2D4B7D: 89 45 C4              -  mov [ebp-3C],eax
"Baldur.exe"+2D4B80: 8D 45 C4              -  lea eax,[ebp-3C]
"Baldur.exe"+2D4B83: 50                    -  push eax
"Baldur.exe"+2D4B84: 8D 45 B4              -  lea eax,[ebp-4C]
"Baldur.exe"+2D4B87: C7 45 B4 00 00 00 00  -  mov [ebp-4C],00000000
"Baldur.exe"+2D4B8E: 50                    -  push eax
"Baldur.exe"+2D4B8F: E8 EC C0 09 00        -  call Baldur.exe+370C80
"Baldur.exe"+2D4B94: 83 C4 08              -  add esp,08
// ---------- INJECTING HERE ----------
"Baldur.exe"+2D4B97: 66 21 48 08           -  and [eax+08],cx
"Baldur.exe"+2D4B9B: 8D 4D 9C              -  lea ecx,[ebp-64]
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2D4B9E: 90                    -  nop
"Baldur.exe"+2D4B9F: 75 13                 -  jne Baldur.exe+2D4BB4
"Baldur.exe"+2D4BA1: 66 85 C0              -  test ax,ax
"Baldur.exe"+2D4BA4: 0F 8F FE 00 00 00     -  jg Baldur.exe+2D4CA8
"Baldur.exe"+2D4BAA: 83 7D 14 00           -  cmp dword ptr [ebp+14],00
"Baldur.exe"+2D4BAE: 0F 84 F4 00 00 00     -  je Baldur.exe+2D4CA8
"Baldur.exe"+2D4BB4: 8D 4D C8              -  lea ecx,[ebp-38]
"Baldur.exe"+2D4BB7: E8 34 60 09 00        -  call Baldur.exe+36ABF0
"Baldur.exe"+2D4BBC: 8D 4D D4              -  lea ecx,[ebp-2C]
"Baldur.exe"+2D4BBF: E8 2C 60 09 00        -  call Baldur.exe+36ABF0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Don't use up last item"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(address,"Baldur.exe"+333F2A)
define(bytes,66 48 0F B7 C0)
define(address2,"Baldur.exe"+2D4D3A)
define(bytes2,66 89 06 66 85 C0)

[ENABLE]

assert(address,bytes)
assert(address2,bytes2)
alloc(newmem,$1000)
alloc(newmem2,$1000)

label(code)
label(cheat)
label(default)
label(return)
label(code2)
label(cheat2)
label(default2)
label(return2)

newmem:

// Items usage (potions, scrolls)
code:
  // Check if using up last item
  cmp ax,01
  je cheat
  jmp default

cheat:
  // Set remaning items to 1
  mov ax,01
  jmp return

default:
  // Use item regularly
  dec ax
  movzx eax,ax
  jmp return

address:
  jmp code
return:


newmem2:

// Fix items quick slot
code2:
  // Check if using up last item
  cmp ax,00
  je cheat2
  jmp default2

cheat2:
  // Increase items count by 1
  inc ax
  jmp default2

default2:
  // Use item regularly
  mov [esi],ax
  test ax,ax
  jmp return2

address2:
  jmp code2
  nop
return2:

[DISABLE]

address:
  db bytes
  // dec ax
  // movzx eax,ax

address2:
  db bytes2
  // mov [esi],ax
  // test ax,ax

dealloc(newmem)
dealloc(newmem2)


{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+333F2A

"Baldur.exe"+333EFD: 8B 0D 08 92 92 00     -  mov ecx,[Baldur.exe+529208]
"Baldur.exe"+333F03: 6A 00                 -  push 00
"Baldur.exe"+333F05: 50                    -  push eax
"Baldur.exe"+333F06: 8D 89 5C 11 00 00     -  lea ecx,[ecx+0000115C]
"Baldur.exe"+333F0C: E8 CF C3 E8 FF        -  call Baldur.exe+1C02E0
"Baldur.exe"+333F11: 0F BF 86 1E 34 00 00  -  movsx eax,word ptr [esi+0000341E]
"Baldur.exe"+333F18: 8B 8E 18 34 00 00     -  mov ecx,[esi+00003418]
"Baldur.exe"+333F1E: 50                    -  push eax
"Baldur.exe"+333F1F: E8 1C 7B E8 FF        -  call Baldur.exe+1BBA40
"Baldur.exe"+333F24: 8B 8E 18 34 00 00     -  mov ecx,[esi+00003418]
// ---------- INJECTING HERE ----------
"Baldur.exe"+333F2A: 66 48                 -  dec ax
"Baldur.exe"+333F2C: 0F B7 C0              -  movzx eax,ax
// ---------- DONE INJECTING  ----------
"Baldur.exe"+333F2F: 50                    -  push eax
"Baldur.exe"+333F30: 0F BF 86 1E 34 00 00  -  movsx eax,word ptr [esi+0000341E]
"Baldur.exe"+333F37: 50                    -  push eax
"Baldur.exe"+333F38: E8 F3 88 E8 FF        -  call Baldur.exe+1BC830
"Baldur.exe"+333F3D: 0F B7 86 1E 34 00 00  -  movzx eax,word ptr [esi+0000341E]
"Baldur.exe"+333F44: 8B CE                 -  mov ecx,esi
"Baldur.exe"+333F46: 50                    -  push eax
"Baldur.exe"+333F47: 0F B7 86 1C 34 00 00  -  movzx eax,word ptr [esi+0000341C]
"Baldur.exe"+333F4E: 50                    -  push eax
"Baldur.exe"+333F4F: E8 EC 60 FD FF        -  call Baldur.exe+30A040
}


{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+2D4D3A

"Baldur.exe"+2D4D20: 66 01 06              -  add [esi],ax
"Baldur.exe"+2D4D23: 0F B7 06              -  movzx eax,word ptr [esi]
"Baldur.exe"+2D4D26: 98                    -  cwde
"Baldur.exe"+2D4D27: 89 45 B4              -  mov [ebp-4C],eax
"Baldur.exe"+2D4D2A: 8D 45 B4              -  lea eax,[ebp-4C]
"Baldur.exe"+2D4D2D: 50                    -  push eax
"Baldur.exe"+2D4D2E: 8D 45 C4              -  lea eax,[ebp-3C]
"Baldur.exe"+2D4D31: 50                    -  push eax
"Baldur.exe"+2D4D32: E8 49 BF 09 00        -  call Baldur.exe+370C80
"Baldur.exe"+2D4D37: 83 C4 08              -  add esp,08
// ---------- INJECTING HERE ----------
"Baldur.exe"+2D4D3A: 66 89 06              -  mov [esi],ax
"Baldur.exe"+2D4D3D: 66 85 C0              -  test ax,ax
// ---------- DONE INJECTING  ----------
"Baldur.exe"+2D4D40: 7E 0A                 -  jle Baldur.exe+2D4D4C
"Baldur.exe"+2D4D42: 83 7D 10 00           -  cmp dword ptr [ebp+10],00
"Baldur.exe"+2D4D46: 0F 84 FF 00 00 00     -  je Baldur.exe+2D4E4B
"Baldur.exe"+2D4D4C: 8D 4D C8              -  lea ecx,[ebp-38]
"Baldur.exe"+2D4D4F: E8 9C 5E 09 00        -  call Baldur.exe+36ABF0
"Baldur.exe"+2D4D54: 8D 4D D4              -  lea ecx,[ebp-2C]
"Baldur.exe"+2D4D57: E8 94 5E 09 00        -  call Baldur.exe+36ABF0
"Baldur.exe"+2D4D5C: 8D 4D EA              -  lea ecx,[ebp-16]
"Baldur.exe"+2D4D5F: E8 8C 5E 09 00        -  call Baldur.exe+36ABF0
"Baldur.exe"+2D4D64: 83 C8 FF              -  or eax,-01
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"No Save vs. Spells for enemies"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,Baldur.exe,0F B7 40 1C 66 3B C1) // should be unique
alloc(newmem,$1000)

label(code)
label(cheat)
label(default)
label(return)

newmem:

code:
  cmp [eax+124C],00
  je cheat
  movzx eax,word ptr [eax+1C]
  jmp default

cheat:
  mov eax,64
  jmp default

default:
  cmp ax,cx
  jmp return

INJECT:
  jmp code
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 0F B7 40 1C 66 3B C1

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Baldur.exe"+19176E

"Baldur.exe"+191750: 8B 45 CC              -  mov eax,[ebp-34]
"Baldur.exe"+191753: 80 20 7F              -  and byte ptr [eax],7F
"Baldur.exe"+191756: 8B 45 B4              -  mov eax,[ebp-4C]
"Baldur.exe"+191759: 80 20 7F              -  and byte ptr [eax],7F
"Baldur.exe"+19175C: 8B 45 DC              -  mov eax,[ebp-24]
"Baldur.exe"+19175F: 80 22 7F              -  and byte ptr [edx],7F
"Baldur.exe"+191762: 80 08 80              -  or byte ptr [eax],-80
"Baldur.exe"+191765: F6 43 3C 01           -  test byte ptr [ebx+3C],01
"Baldur.exe"+191769: 74 4E                 -  je Baldur.exe+1917B9
"Baldur.exe"+19176B: 8B 45 D8              -  mov eax,[ebp-28]
// ---------- INJECTING HERE ----------
"Baldur.exe"+19176E: 0F B7 40 1C           -  movzx eax,word ptr [eax+1C]
"Baldur.exe"+191772: 66 3B C1              -  cmp ax,cx
// ---------- DONE INJECTING  ----------
"Baldur.exe"+191775: 7D 42                 -  jnl Baldur.exe+1917B9
"Baldur.exe"+191777: 03 45 C0              -  add eax,[ebp-40]
"Baldur.exe"+19177A: F6 02 80              -  test byte ptr [edx],-80
"Baldur.exe"+19177D: 0F B6 75 C5           -  movzx esi,byte ptr [ebp-3B]
"Baldur.exe"+191781: 0F B7 C8              -  movzx ecx,ax
"Baldur.exe"+191784: 89 4D B0              -  mov [ebp-50],ecx
"Baldur.exe"+191787: C7 45 E0 1A 05 F0 00  -  mov [ebp-20],Baldur.exe+B0051A
"Baldur.exe"+19178E: 75 29                 -  jne Baldur.exe+1917B9
"Baldur.exe"+191790: 0F BF C1              -  movsx eax,cx
"Baldur.exe"+191793: 3B F0                 -  cmp esi,eax
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>INJECT</Name>
      <Address> 0059176E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>address</Name>
      <Address>00608DE0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>address2</Name>
      <Address>0054C20F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>address3</Name>
      <Address>005A4630</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
