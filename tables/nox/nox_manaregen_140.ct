<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"ManaRegen"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Physical Memory
  Version: 
  Date   : 2016-10-04
  Author : user

  This script does blah blah blah
}

[ENABLE]

aobscanModule(aob,$process,A1 ?? ?? ?? ?? f7 f1 85 d2 75 0b 6a 01 57 e8 ?? ?? ?? ?? 83 c4 08 5f 5e 5b c3) // should be unique
alloc(ManaRegen,$1000)

label(code)
label(return)

ManaRegen:
dd (float)3

ManaRegen+100:
dq ManaRegen,aob
ManaRegen+110:
readmem(aob,5) // save modified bytes in *.exe

ManaRegen+200:
code:
  push  ecx             // divide the divisor by a factor
  fild  dword ptr[esp]  // so the remainder cycle to zero fatser by same factor
  fdiv  dword ptr[ManaRegen]
  fistp dword ptr[esp]
  pop   ecx
  cmp   ecx,2           // make sure it is larger than 1, in case large Mul
  jge   @f
  mov   ecx,2
@@:
// modify after original
  readmem(aob,5)      // original code readmem copy
//mov eax,[009667C4]     original code raw text
// modify after original
  jmp return

aob:
  jmp code
return:
registersymbol(ManaRegen)

[DISABLE]

{$lua}

if not syntaxcheck and readInteger'ManaRegen' then return [[
    [ManaRegen+108]:
    readmem(ManaRegen+110,5)
  ]]
end
{$asm}
unregistersymbol(ManaRegen)
dealloc(ManaRegen)


{
// ORIGINAL CODE - INJECTION POINT: 000F8EB4

""+F8E98: 73 30                 -  jae 000F8ECA
""+F8E9A: 8D 04 49              -  lea eax,[ecx+ecx*2]
""+F8E9D: 81 E6 FF FF 00 00     -  and esi,0000FFFF
""+F8EA3: 33 D2                 -  xor edx,edx
""+F8EA5: 8D 04 80              -  lea eax,[eax+eax*4]
""+F8EA8: 8D 04 80              -  lea eax,[eax+eax*4]
""+F8EAB: C1 E0 02              -  shl eax,02
""+F8EAE: F7 F6                 -  div esi
""+F8EB0: 33 D2                 -  xor edx,edx
""+F8EB2: 8B C8                 -  mov ecx,eax
// ---------- INJECTING HERE ----------
""+F8EB4: A1 C4 67 96 00        -  mov eax,[009667C4]        // eax is dividend, probably tick in game
// ---------- DONE INJECTING  ----------
""+F8EB9: F7 F1                 -  div ecx                   // ecx is divisor
""+F8EBB: 85 D2                 -  test edx,edx              // edx is remainder after division
""+F8EBD: 75 0B                 -  jne 000F8ECA              // eax is qutient, not relevant here
""+F8EBF: 6A 01                 -  push 01
""+F8EC1: 57                    -  push edi
""+F8EC2: E8 F9 4B FF FF        -  call 000EDAC0
""+F8EC7: 83 C4 08              -  add esp,08
""+F8ECA: 5F                    -  pop edi
""+F8ECB: 5E                    -  pop esi
""+F8ECC: 5B                    -  pop ebx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Mul"</Description>
          <LastState Value="1.325670526E-38" RealAddress="00000000"/>
          <VariableType>Float</VariableType>
          <Address>ManaRegen</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>00710000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
