<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>149</ID>
      <Description>"GetAddresses"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan( GObjects_AOB, 50B9????????8BF0E8????????8B15????????8D )
label( GObjects )
registersymbol( GObjects )
[GObjects_AOB+2]:
GObjects:

aobscan( GNames_AOB, 8B0D????????393C8174??8B5424 )
label( GNames )
registersymbol( GNames )
[GNames_AOB+2]:
GNames:

aobscan( UE_ProcessEvent_AOB, 8B5D08F7437002040000 )
label( UE_ProcessEvent )
registersymbol( UE_ProcessEvent )
UE_ProcessEvent_AOB-30:
UE_ProcessEvent:

[DISABLE]

unregistersymbol( UE_ProcessEvent )
unregistersymbol( GNames )
unregistersymbol( GObjects )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"ProcessEvent_Hook"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( ProcessEvent_Hook, 4096 )
registersymbol( ProcessEvent_Hook )
label( ProcessEvent_Hook_exit )
label( ProcessEvent_return )
label( ProcessEvent_prologue )
registersymbol( ProcessEvent_prologue )
label( pCallObject )
registersymbol( pCallObject )
label( bSwitch )
registersymbol( bSwitch )

ProcessEvent_Hook+500:
pCallObject:
dd 0
bSwitch:
dd 0

//***************************************
//********   ProcessEvent Hook   ********
//***************************************

ProcessEvent_Hook:
push ebp
mov ebp,esp
pushad
mov [pCallObject],ecx
mov edi,[ebp+8]
test edi,edi
je ProcessEvent_Hook_exit
// &lt;--
call GetFullName
mov ebx,eax
push ebx
call OutputDebug
// --&gt;
ProcessEvent_Hook_exit:
popad
mov esp,ebp
pop ebp
ProcessEvent_prologue:
readmem(UE_ProcessEvent,5)
jmp ProcessEvent_return

UE_ProcessEvent:
jmp ProcessEvent_Hook
ProcessEvent_return:

[DISABLE]

UE_ProcessEvent:
readmem(ProcessEvent_prologue,5)

unregistersymbol( bSwitch )
unregistersymbol( pCallObject )
unregistersymbol( ProcessEvent_prologue )
unregistersymbol( ProcessEvent_Hook )
dealloc( ProcessEvent_Hook )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>155</ID>
              <Description>"bSwitch"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bSwitch</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>110</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>2</ID>
              <Description>"pCallObject"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[pCallObject]</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1</ID>
              <Description>"UTPlayerController"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[UTPlayerController]</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>146</ID>
                  <Description>"God"</Description>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>UTPlayerController</Address>
                  <Offsets>
                    <Offset>1E0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>147</ID>
                  <Description>"SloMo"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>UTPlayerController</Address>
                  <Offsets>
                    <Offset>218</Offset>
                    <Offset>4A8</Offset>
                    <Offset>DC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>144</ID>
              <Description>"Handler"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 4096 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
label( KeyHandlerOff )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )

label( ToggleFly )
label( ToggleFly_exit )

KeyHandlerThread+300:
KeyHandlerOff:
dd 0

KeyHandlerThread:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

push 62 //VK_NUMPAD2
call GetAsyncKeyState
test ax,ax
jne ToggleFly
jmp KeyHandlerThread

ToggleFly:
push 1301C6C0
mov ecx,13246600
call 5F0590
ToggleFly_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

ExitKeyHandler:
ret

[DISABLE]

KeyHandlerOff:
dd 1

unregistersymbol( KeyHandlerOff )
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>148</ID>
          <Description>"NamesAndObjects_Dumper"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 4096 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
label( KeyHandlerOff )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( szWrite )
label( szNamesFile )
label( szObjectsFile )
label( szNamesFormat )
label( szObjectsFormat )
label( szInvalid )
label( Dump )
label( Dump_exit )
label( DumpNames )
label( DumpNames_0 )
label( DumpNames_1 )
label( DumpNames_exit )
label( DumpObjects )
label( DumpObjects_0 )
label( DumpObjects_1 )
label( DumpObjects_exit )
label( GetName )
label( err )

label( GetObject )
registersymbol( GetObject )
label( GetObject_exit )
label( GetObject_err )

label( GetFullName )
registersymbol( GetFullName )
label( GetFullName_0 )
label( GetFullName_NULL )

label( GetFullName_loop_a )
label( GetFullName_next_b )
label( GetFullName_loop_b )
label( GetFullName_next_c )
label( GetFullName_loop_c )
label( GetFullName_next_d )
label( GetFullName_loop_d )
label( GetFullName_next_e )

label( GetFullName_loop_f )
label( GetFullName_next_g )
label( GetFullName_loop_g )
label( GetFullName_next_h )
label( GetFullName_loop_h )
label( GetFullName_next_i )

label( szNull )
label( szFunctionName )

label( FindObject )
registersymbol( FindObject )
label( FindObject_0 )
label( FindObject_1 )
label( FindObject_2 )
label( FindObject_exit )

label( OutputDebug )
registersymbol( OutputDebug )
label( szOutputDebug )
label( OutputDebug_0 )
label( OutputDebug_1 )
label( szFormat )
label( szSeparator )
label( szBuffer )

KeyHandlerThread+500:
KeyHandlerOff:
dd 0
szWrite:
db 'w+',0
szNamesFile:
db 'NamesDump.txt',0
szObjectsFile:
db 'ObjectsDump.txt',0
szNamesFormat:
db 'Name[%06i] %s',0A,0
szObjectsFormat:
db 'UObject[%06i] %-50s 0x%08X ( %-50s )',0A,0
szInvalid:
db 'INVALID NAME INDEX',0
szNull:
db '(null)',0
szFormat:
db '0x%08X',0
szSeparator:
db ' | ',0
szBuffer:
dd 0
dd 0
dd 0
szFunctionName:
dd 0

KeyHandlerThread+600:
szOutputDebug:
dd 0

KeyHandlerThread:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

push 6F //VK_NUMPAD /
call GetAsyncKeyState
test ax,ax
jne Dump
jmp KeyHandlerThread

Dump:
call DumpNames
call DumpObjects
Dump_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// ***************
// ** DumpNames **
// ***************

DumpNames:
push ebp
mov ebp,esp
push ecx
and [ebp-4],0
push esi
push szWrite // "w+"
lea eax,[ebp-4]
push szNamesFile // "NamesDump.txt"
push eax
call msvcrt.fopen_s
mov eax,GNames
xor esi,esi
add esp,C
cmp [eax+4],esi
jbe DumpNames_exit
DumpNames_0:
	mov ecx,[eax]
	lea ecx,[ecx+esi*4]
	cmp [ecx],0
    je DumpNames_1
		mov eax,[ecx]
		add eax,10
		push eax
		push esi
		push szNamesFormat // "Name[%06i] %s\0A\00"
		push [ebp-4]
		call msvcrt.fprintf
		mov eax,GNames
		add esp,10
    DumpNames_1:
    inc esi
	cmp esi,[eax+4]
    jb DumpNames_0
DumpNames_exit:
push [ebp-4]
call msvcrt.fclose
pop ecx
pop esi
mov esp,ebp
pop ebp
ret

db CC CC

// *****************
// ** DumpObjects **
// *****************

DumpObjects:
push ebp
mov ebp,esp
push ecx
and [ebp-4],0
push esi
push szWrite // "w+"
lea eax,[ebp-4]
push szObjectsFile // "ObjectsDump.txt"
push eax
call msvcrt.fopen_s
mov eax,GObjects
xor esi,esi
add esp,C
cmp [eax+4],esi
jbe DumpObjects_exit
DumpObjects_0:
    mov ecx,[eax]
	lea ecx,[ecx+esi*4]
	cmp [ecx],0
	je DumpObjects_1
       push 0
       push 0
       mov eax,[ecx]
       mov [esp],eax
	   call GetObject
       mov [esp+4],eax
       mov eax,[esp]
	   call GetName
       push eax
	   push esi
	   push szObjectsFormat // "UObject[%06i] %-50s 0x%08X (%-50s)\0A\00"
	   push [ebp-4]
		call msvcrt.fprintf
	   mov eax,GObjects
	   add esp,18
    DumpObjects_1:
	inc esi
	cmp esi,[eax+4]
	jb DumpObjects_0
DumpObjects_exit:
push [ebp-4]
call msvcrt.fclose
mov esp,ebp
pop ebp
ret

db CC CC

// *************
// ** GetName **
// *************

GetName:
mov ecx,[eax+18]
mov eax,GNames
mov edx,[eax+4]
cmp ecx,edx
ja err
   mov eax,[eax]
   mov eax,[eax+ecx*4]
   add eax,10
   ret
err:
mov eax,szInvalid // "INVALID NAME INDEX"
ret

db CC CC

// ***************
// ** GetObject **
// ***************

GetObject:
mov edi,eax
test edi,edi
je GetObject_err
mov eax,[edi+20]
test eax,eax
je GetObject_err
      call GetFullName
GetObject_exit:
ret
GetObject_err:
mov eax,szInvalid
ret

db CC CC

// ****************
// ** FindObject **
// ****************

FindObject:
push ebp
mov ebp,esp
mov ecx,GObjects
push esi
push edi
xor esi,esi
cmp [ecx+4],esi
jle FindObject_exit
FindObject_0:
    mov eax,[ecx]
    mov edi,[eax+esi*4]
    test edi,edi
    je FindObject_1
    mov eax,[edi+20]
    test eax,eax
    je FindObject_1
       push [ebp+8]
       call GetFullName
       push eax
       call msvcrt.stricmp
       add esp,8
       test eax,eax
       je FindObject_2
       mov ecx,GObjects
    FindObject_1:
    inc esi
    cmp esi,[ecx+4]
    jl FindObject_0
FindObject_exit:
    pop edi
    pop esi
    mov esp,ebp
    pop ebp
    ret 4
FindObject_2:
    mov eax,edi
    pop edi
    pop esi
    mov esp,ebp
    pop ebp
    ret 4

db CC CC

//*********************************
//********   GetFullName   ********
//*********************************

GetFullName:
mov eax,[edi+20]                   // Class
test eax,eax
je GetFullName_NULL
mov ecx,[edi+14]                   // Outer
test ecx,ecx
je GetFullName_NULL
cmp [ecx+14],0                     // Outer-&gt;Outer
je GetFullName_0
mov ebx,szFunctionName
mov ecx,GNames                     // GNames pointer
mov eax,[eax+18]                   // FName_Index
mov edx,[ecx]
mov eax,[edx+eax*4]
add eax,10                         // Class-&gt;GetName
GetFullName_loop_a:
cmp byte ptr [eax],0
je GetFullName_next_b
mov dl,[eax]
mov [ebx],dl
inc ebx
inc eax
jmp GetFullName_loop_a
GetFullName_next_b:
mov byte ptr [ebx],20              // space character
inc ebx
mov ecx,[edi+14]                   // Outer
mov edx,[ecx+14]                   // Outer-&gt;Outer
mov eax,[edx+18]                   // FName_Index
mov ecx,GNames                     // GNames pointer
mov edx,[ecx]
mov eax,[edx+eax*4]
add eax,10                         // Outer-&gt;Outer-&gt;GetName
GetFullName_loop_b:
cmp byte ptr [eax],0
je GetFullName_next_c
mov dl,[eax]
mov [ebx],dl
inc ebx
inc eax
jmp GetFullName_loop_b
GetFullName_next_c:
mov byte ptr [ebx],2E              // . character
inc ebx
mov ecx,[edi+14]                   // Outer
mov edx,[ecx+18]                   // FName_Index
mov eax,GNames                     // GNames pointer
mov ecx,[eax]
mov edx,[ecx+edx*4]
add edx,10                         // Outer-&gt;GetName
GetFullName_loop_c:
cmp byte ptr [edx],0
je GetFullName_next_d
mov al,[edx]
mov [ebx],al
inc ebx
inc edx
jmp GetFullName_loop_c
GetFullName_next_d:
mov byte ptr [ebx],2E              // . character
inc ebx
mov ecx,GNames                     // GNames pointer
mov edx,[ecx]
mov eax,[edi+18]                   // this - FName_Index
mov eax,[edx+eax*4]
add eax,10                         // this-&gt;GetName
GetFullName_loop_d:
cmp byte ptr [eax],0
je GetFullName_next_e
mov dl,[eax]
mov [ebx],dl
inc ebx
inc eax
jmp GetFullName_loop_d
GetFullName_next_e:
mov byte ptr [ebx],0
mov eax,szFunctionName
ret
GetFullName_0:
mov ebx,szFunctionName
mov edx,GNames                     // GNames pointer
mov ecx,[eax+18]                   // FName_Index
mov eax,[edx]
mov ecx,[eax+ecx*4]
add ecx,10                         // Class-&gt;GetName
GetFullName_loop_f:
cmp byte ptr [ecx],0
je GetFullName_next_g
mov al,[ecx]
mov [ebx],al
inc ebx
inc ecx
jmp GetFullName_loop_f
GetFullName_next_g:
mov byte ptr [ebx],20              // space character
inc ebx
mov edx,[edi+14]                   // Outer
mov eax,[edx+18]                   // FName_Index
mov ecx,GNames                     // GNames pointer
mov edx,[ecx]
mov eax,[edx+eax*4]
add eax,10                         // Outer-&gt;GetName
GetFullName_loop_g:
cmp byte ptr [eax],0
je GetFullName_next_h
mov cl,[eax]
mov [ebx],cl
inc ebx
inc eax
jmp GetFullName_loop_g
GetFullName_next_h:
mov byte ptr [ebx],2E              // . character
inc ebx
mov edx,GNames                     // GNames pointer
mov eax,[edx]
mov ecx,[edi+18]                   // this - FName_Index
mov ecx,[eax+ecx*4]
add ecx,10                         // this-&gt;GetName
GetFullName_loop_h:
cmp byte ptr [ecx],0
je GetFullName_next_i
mov al,[ecx]
mov [ebx],al
inc ebx
inc ecx
jmp GetFullName_loop_h
GetFullName_next_i:
mov byte ptr [ebx],0
mov eax,szFunctionName
ret
GetFullName_NULL:
mov eax,szNull
ret

db CC CC

//*********************
//**   OutputDebug   **
//*********************

OutputDebug:
push ebp
mov ebp,esp
mov eax,szOutputDebug
mov ecx,ebx
OutputDebug_0:
cmp byte ptr [ecx],0
je OutputDebug_1
mov dl,[ecx]
mov [eax],dl
inc ecx
inc eax
jmp OutputDebug_0
OutputDebug_1:
mov byte ptr [eax],0
push szSeparator
push szOutputDebug
call lstrcatA
push [ebp+8]
push szFormat
push szBuffer
call wsprintfA
add esp,C
push szBuffer
push szOutputDebug
call lstrcatA
push szOutputDebug
call OutputDebugStringA
mov esp,ebp
pop ebp
ret 4

ExitKeyHandler:
ret

[DISABLE]

KeyHandlerOff:
dd 1

unregistersymbol( OutputDebug )
unregistersymbol( FindObject )
unregistersymbol( GetObject )
unregistersymbol( GetFullName )
unregistersymbol( KeyHandlerOff )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>150</ID>
          <Description>"[Debug]"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>151</ID>
              <Description>"Dumper"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 1024 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
label( KeyHandlerOff )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( szWrite )
label( szNamesFile )
label( szObjectsFile )
label( szNamesFormat )
label( szObjectsFormat )
label( szInvalid )
label( Dump )
label( Dump_exit )
label( DumpNames )
label( DumpNames_0 )
label( DumpNames_1 )
label( DumpNames_exit )
label( DumpObjects )
label( DumpObjects_0 )
label( DumpObjects_1 )
label( DumpObjects_exit )
label( GetName )
label( err )

KeyHandlerThread+500:
KeyHandlerOff:
dd 0
szWrite:
db 'w+',0
szNamesFile:
db 'NamesDump.txt',0
szObjectsFile:
db 'ObjectsDump.txt',0
szNamesFormat:
db 'Name[%06i] %s',0A,0
szObjectsFormat:
db 'UObject[%06i] %-50s 0x%X',0A,0
szInvalid:
db 'INVALID NAME INDEX',0

KeyHandlerThread:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

push 6F //VK_NUMPAD /
call GetAsyncKeyState
test ax,ax
jne Dump
jmp KeyHandlerThread

Dump:
call DumpNames
call DumpObjects
Dump_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// ****************
// ** Dump Names **
// ****************

DumpNames:
push ebp
mov ebp,esp
push ecx
and [ebp-4],0
push esi
push szWrite // "w+"
lea eax,[ebp-4]
push szNamesFile // "NamesDump.txt"
push eax
call msvcr100.fopen_s
mov eax,GNames
xor esi,esi
add esp,C
cmp [eax+4],esi
jbe DumpNames_exit
DumpNames_0:
	mov ecx,[eax]
	lea ecx,[ecx+esi*4]
	cmp [ecx],0
    je DumpNames_1
		mov eax,[ecx]
		add eax,10
		push eax
		push esi
		push szNamesFormat // "Name[%06i] %s\0A\00"
		push [ebp-4]
		call msvcr100.fprintf
		mov eax,GNames
		add esp,10
    DumpNames_1:
    inc esi
	cmp esi,[eax+4]
    jb DumpNames_0
DumpNames_exit:
push [ebp-4]
call msvcr100.fclose
pop ecx
pop esi
mov esp,ebp
pop ebp
ret

// ******************
// ** Dump Objects **
// ******************

DumpObjects:
push ebp
mov ebp,esp
push ecx
and [ebp-4],0
push esi
push szWrite // "w+"
lea eax,[ebp-4]
push szObjectsFile // "ObjectsDump.txt"
push eax
call msvcr100.fopen_s
mov eax,GObjects
xor esi,esi
add esp,C
cmp [eax+4],esi
jbe DumpObjects_exit
DumpObjects_0:
	mov ecx,[eax]
	lea ecx,[ecx+esi*4]
	cmp [ecx],0
	je DumpObjects_1
		mov eax,[ecx]
		push eax
		call GetName
		push eax
		push esi
		push szObjectsFormat // "UObject[%06i] %-50s 0x%X\0A\00"
		push [ebp-4]
		call msvcr100.fprintf
		mov eax,GObjects
		add esp,14
	DumpObjects_1:
	inc esi
	cmp esi,[eax+4]
	jb DumpObjects_0
DumpObjects_exit:
push [ebp-4]
call msvcr100.fclose
mov esp,ebp
pop ebp
ret
GetName:
mov ecx,[eax+2C]
mov eax,GNames
mov edx,[eax+4]
cmp ecx,edx
ja err
   mov eax,[eax]
   mov eax,[eax+ecx*4]
   add eax,10
   ret
err:
mov eax,szInvalid // "INVALID NAME INDEX"
ret

ExitKeyHandler:
ret

[DISABLE]

KeyHandlerOff:
dd 1

unregistersymbol( KeyHandlerOff )
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>TeleportFlyFullyDisabled</Name>
      <Address>0915045D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TeleportFlyEnabled</Name>
      <Address>09150459</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>DisableKeyHandler</Name>
      <Address>0D0704C1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hook</Name>
      <Address>009FA489</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwPlayerStructPtr</Name>
      <Address>0040F1E6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwCheckClip</Name>
      <Address>0066E72B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwResetImmortalityFlag</Name>
      <Address>006FD264</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwPawnHook</Name>
      <Address>005D2D7A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>base_0</Name>
      <Address>0171A79C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Toggler</Name>
      <Address>0B910300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GObjects</Name>
      <Address>017BB068</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GNames</Name>
      <Address>017CCEF8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UE_ProcessEvent</Name>
      <Address>00CA0450</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>KeyHandlerOff</Name>
      <Address>133A0500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetObject</Name>
      <Address>133A0151</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetFullName</Name>
      <Address>133A01D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FindObject</Name>
      <Address>133A0174</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>OutputDebug</Name>
      <Address>133A0324</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ProcessEvent_prologue</Name>
      <Address>133F0026</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCallObject</Name>
      <Address>133F0500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bSwitch</Name>
      <Address>133F0504</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
