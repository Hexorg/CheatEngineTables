<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>66668</ID>
      <Description>"Data Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(dataupdate_enable)
registersymbol(dataset_enable)

registersymbol(money_basepointer)
registersymbol(mysteriousticket_basepointer)
registersymbol(buzz_basepointer)
registersymbol(silverticket_basepointer)


alloc(dataupdate_enable,4)
alloc(dataset_enable,4)

alloc(money_basepointer,4)
alloc(mysteriousticket_basepointer,4)
alloc(buzz_basepointer,4)
alloc(silverticket_basepointer,4)


[DISABLE]

unregistersymbol(dataupdate_enable)
unregistersymbol(dataset_enable)

unregistersymbol(money_basepointer)
unregistersymbol(mysteriousticket_basepointer)
unregistersymbol(buzz_basepointer)
unregistersymbol(silverticket_basepointer)


dealloc(dataupdate_enable)
dealloc(dataset_enable)

dealloc(money_basepointer)
dealloc(mysteriousticket_basepointer)
dealloc(buzz_basepointer)
dealloc(silverticket_basepointer)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>66687</ID>
          <Description>"Continuous Base Address Scan"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(continuousscan_savedAOB)
label(continuousscan_returnhere)
label(continuousscan_originalcode)
label(continuousscan_exit)

label(continuousdataset_entry)
label(continuousdataset999999_entry)
label(continuousdataset99999_entry)
label(continuousdataset999_entry)
label(continuousdataset99_entry)
label(continuousdataset0_entry)
label(continuousdataset_exit)

label(continuousmoney_exit)
label(continuousmysteriousticket_exit)
label(continuousbuzz_exit)
label(continuoussilverticket_exit)


registersymbol(continuousscan_savedAOB)

aobscan(searchedAOB,DD 45 08 C7 46 04 00 00 00 00 DD 5E 08 5E 5D C3)

alloc(continuousscan_newmem,2048) //2kb should be enough
alloc(temp,4) //2kb should be enough


continuousscan_newmem:
cmp dword ptr [dataupdate_enable], #1
jne continuousdataset_entry


// Check if money
cmp dword ptr [ebp+10], #100022
jne continuousmoney_exit
mov [money_basepointer], ebp
jmp continuousdataset_entry
continuousmoney_exit:

// Check if mysteriousticket
cmp dword ptr [ebp+10], #100025
jne continuousmysteriousticket_exit
mov [mysteriousticket_basepointer], ebp
jmp continuousdataset_entry
continuousmysteriousticket_exit:

// Check if buzz
cmp dword ptr [ebp+10], #100176
jne continuousbuzz_exit
mov [buzz_basepointer], ebp
jmp continuousdataset_entry
continuousbuzz_exit:

// Check if silverticket
cmp dword ptr [ebp+10], #100606
jne continuoussilverticket_exit
mov [silverticket_basepointer], ebp
jmp continuousdataset_entry
continuoussilverticket_exit:


continuousdataset_entry:
cmp dword ptr [dataset_enable], #1
jne continuousdataset_exit

// Set to 999999: money
cmp dword ptr [ebp+10], #100022
je continuousdataset999999_entry

// Set to 999: buzz
cmp dword ptr [ebp+10], #100176
je continuousdataset999_entry

// Set to 99: mysteriousticket, silverticket
cmp dword ptr [ebp+10], #100025
je continuousdataset99_entry
cmp dword ptr [ebp+10], #100606
je continuousdataset99_entry


jmp continuousdataset_exit


continuousdataset999999_entry:
mov [temp], #999999
fild qword ptr [temp]
fstp qword ptr [ebp+8]
jmp continuousdataset_exit

continuousdataset99999_entry:
jmp continuousdataset_exit

continuousdataset999_entry:
mov [temp], #999
fild qword ptr [temp]
fstp qword ptr [ebp+8]
jmp continuousdataset_exit

continuousdataset99_entry:
mov [temp], #99
fild qword ptr [temp]
fstp qword ptr [ebp+8]
jmp continuousdataset_exit


continuousdataset0_entry:
jmp continuousdataset_exit

continuousdataset_exit:


continuousscan_originalcode:
db C7 46 04 00 00 00 00
//mov [esi+04],00000000

continuousscan_exit:
jmp continuousscan_returnhere


searchedAOB + 3:
continuousscan_savedAOB:
jmp continuousscan_newmem
nop
nop
continuousscan_returnhere:


[DISABLE]
continuousscan_savedAOB:
db C7 46 04 00 00 00 00
//mov [esi+04],00000000

unregistersymbol(continuousscan_savedAOB)

dealloc(continuousscan_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>66670</ID>
          <Description>"Data Set? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>dataset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>66671</ID>
          <Description>"Data Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>dataupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>66805</ID>
          <Description>"Data"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>66803</ID>
              <Description>"Money"</Description>
              <Color>80000008</Color>
              <VariableType>Double</VariableType>
              <Address>money_basepointer</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>66815</ID>
              <Description>"Mysterious Ticket"</Description>
              <Color>80000008</Color>
              <VariableType>Double</VariableType>
              <Address>mysteriousticket_basepointer</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>66812</ID>
              <Description>"Buzz"</Description>
              <Color>80000008</Color>
              <VariableType>Double</VariableType>
              <Address>buzz_basepointer</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>66818</ID>
              <Description>"Silver Ticket"</Description>
              <Color>80000008</Color>
              <VariableType>Double</VariableType>
              <Address>silverticket_basepointer</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>67152</ID>
      <Description>"Service Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(serviceupdate_enable)
registersymbol(serviceset_enable)

registersymbol(servicepatience_basepointer)


alloc(serviceupdate_enable,4)
alloc(serviceset_enable,4)

alloc(servicepatience_basepointer,4)


[DISABLE]

unregistersymbol(serviceupdate_enable)
unregistersymbol(serviceset_enable)

unregistersymbol(servicepatience_basepointer)


dealloc(serviceupdate_enable)
dealloc(serviceset_enable)

dealloc(servicepatience_basepointer)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>67153</ID>
          <Description>"Continuous Service Base Address Scan"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(continuousservicescan_savedAOB)
label(continuousservicescan_returnhere)
label(continuousservicescan_originalcode)
label(continuousservicescan_exit)

label(continuousserviceset_entry)
label(continuousserviceset_exit)


registersymbol(continuousservicescan_savedAOB)

aobscan(searchedAOB,D8 4C 24 14 D8 46 7C D9 5E 7C)

alloc(continuousservicescan_newmem,2048) //2kb should be enough


continuousservicescan_newmem:
cmp dword ptr [serviceupdate_enable], #1
jne continuousserviceset_entry
mov [servicepatience_basepointer], esi
jmp continuousserviceset_entry

continuousserviceset_entry:
cmp dword ptr [serviceset_enable], #1
jne continuousserviceset_exit
mov [esi+7c], (float)99
continuousserviceset_exit:

continuousservicescan_originalcode:
db D8 46 7C D9 5E 7C
//fadd dword ptr [esi+7C]
//fstp dword ptr [esi+7C]

continuousservicescan_exit:
jmp continuousservicescan_returnhere


searchedAOB + 4:
continuousservicescan_savedAOB:
jmp continuousservicescan_newmem
nop
continuousservicescan_returnhere:


[DISABLE]
continuousservicescan_savedAOB:
db D8 46 7C D9 5E 7C
//fadd dword ptr [esi+7C]
//fstp dword ptr [esi+7C]

unregistersymbol(continuousservicescan_savedAOB)

dealloc(continuousservicescan_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>67154</ID>
          <Description>"Patience Set to 99 Seconds? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>serviceset_enable</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
