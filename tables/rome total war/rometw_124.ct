<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>87</ID>
      <Description>"[X] &lt;== Rome Total War v1.5 Script v4.1"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Rome Total War
 Game Version  : 1.5
 Game Sponsor  : Myself and other Guys (via donation)
 Process Name  : RomeTW.exe
 Script Version: 4.1
 CE Version    : 6.2
 Release date  : 24-Feb-2013
 Author        : Recifense
 History:
 01-Mar-12: First Release (CE6.1)
 27-Jan-13: Modified GM approach + New Features (Script 3.0)
 10-Feb-13: New Features (Script 4.0)
 24-Feb-13: Killing a bug on MOS (Script 4.1)
 Features:
 - God Mode                                 (changed+new)
 - Unlimited Ammo
   - Arrows
   - Cannons                                (new)
 - Unlimited Stamina                        (new)
 - Stronger Units                           (new)
   - Charge Bonus  (15)
   - Base Attack  (120)
   - Base Armor   (120)
 - Unlimited Movement Points
   - Army
   - Troop
   - Agents
 - Minimum Gold
 - Recover Troop Size
 - Construction in 1 day
 - Pointer to Selected City
 - Officers' and Special Agents' Attributes (new)
 - Minimum Available Mercenaries (for hire) (new)
 - Recruitment in 1 Day               (brand-new)
 - Minimum Public Order               (brand-new)
===========================================
}

//=========================================
// Definitions
define(LUDO,RomeTW.exe)

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(LUDO+026b19,0f b6 15 ?? ?? ?? ?? 85 d2 0f 85 ?? ?? ?? ??) //_GM
assert(LUDO+027518,0f b6 15 ?? ?? ?? ?? 85 d2 0f 85 ?? ?? ?? ??) //_GM1
assert(LUDO+026954,0f b6 15 ?? ?? ?? ?? 85 d2 ?? ?? 8b 54 24 08) //_GM2
assert(LUDO+02a5c9,0f b6 05 ?? ?? ?? ?? 83 f8 01 0f 84 ?? ?? ??) //_GM3
assert(LUDO+029ab1,0f b6 15 ?? ?? ?? ?? 85 d2 0f 85 ?? ?? ?? ??) //_GM4
assert(LUDO+0281f7,0f b6 15 ?? ?? ?? ?? 85 d2 ?? ?? 0f b6 05 ??) //_GM5
assert(LUDO+026dc8,0f b6 05 ?? ?? ?? ?? 85 c0 ?? ?? 8b 42 64 8b) //_GMC
assert(LUDO+3e3793,d9 95 9c 03 00 00 a8 02 ?? ?? dd d8 81 c4 ??) //_GMR
assert(LUDO+36c26b,89 81 5c 09 00 00 c3 ?? ?? ?? ?? ?? ?? ?? ??) //_MA
assert(LUDO+3d762d,89 87 e0 03 00 00 c6 87 78 04 00 00 00 5f c3) //_MA1
assert(LUDO+3c8df4,66 89 83 5a 02 00 00 ?? ?? b8 1f 1c 00 00 66) //_MS
//------
assert(LUDO+367403,d9 91 7c 02 00 00 8b 89 78 02 00 00 85 c9 ??) //_MP
assert(LUDO+192e19,d9 96 c4 00 00 00 ?? ?? d9 90 7c 02 00 00 dd) //_MP1
assert(LUDO+83dfc2,ff b0 04 05 00 00 ff 92 70 01 00 00 8b 85 e8) //_MG
assert(LUDO+190018,8b 83 c4 00 00 00 8b bb e4 00 00 00 85 ff 89) //_MP2
assert(LUDO+1e3a46,8b 7d 20 8b 45 24 3b f8 0f 86 ?? ?? ?? ?? 8b) //_MCo
assert(LUDO+2159f2,8b b0 80 02 00 00 0f b6 93 c0 00 00 00 85 d2) //_MSp
assert(LUDO+7758eb,89 86 6c 01 00 00 8b 54 24 10 89 96 70 01 00) //_MSC
assert(LUDO+19ce43,0f b6 90 d8 01 00 00 f6 c2 08 ?? ?? f6 c2 20) //_MSO
assert(LUDO+820fb9,8b 86 d8 00 00 00 8b 40 14 03 5c 24 18 33 d2) //_MAM
assert(LUDO+1d7672,89 86 ac 00 00 00 8b 4f 04 83 b9 b4 01 00 00) //_MPO

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonMP)
label(_MonM00)
label(_MonM01)
label(_BackMM)
label(_ExitMM)
label(_MonMP1)
label(_MonM10)
label(_MonM11)
label(_BackMM1)
label(_ExitMM1)
label(_MonMP2)
label(_BackMM2)
label(_ExitMM2)
label(_MonGold)
label(_BackMG)
label(_ExitMG)
label(_MonConstruction)
label(_BackMC)
label(_ExitMC)
label(_MonShip)
label(_BackMS)
label(_ExitMS)
label(_MonSelCity)
label(_BackMSC)
label(_ExitMSC)
label(_MonOfficerStatus)
label(_MonOS00)
label(_MonOS01)
label(_MonOS02)
label(_MonOS03)
label(_BackMOS)
label(_ExitMOS)
label(_MonArmy)
label(_BackMAr)
label(_ExitMAr)
label(_MonBattleEnd)
label(_BackMBE)
label(_ExitMBE)
label(_MonIssue)
label(_BackMI)
label(_ExitMI)
label(_MonAvailableMercs)
label(_MonAM00)
label(_BackMAM)
label(_ExitMAM)
label(_MonPublicOrder)
label(_BackMPO)
label(_ExitMPO)
label(pUnit)
label(pPlayer)
label(pOfficer)
label(pCity)
label(pArmy)
label(iEnableGM)
label(iEnableMA)
label(iEnableMS)
label(iEnableMOS)
label(iEnableSU)
label(iEnableMM)
label(iEnableMG)
label(iEnableMT)
label(iEnableMC)
label(iEnableMAM)
label(iEnableMTR)
label(iEnableMPO)
label(iMinGold)
label(iID)
label(iREG)

label(iEAX)
label(iEBX)
label(iECX)
label(iBack)
label(iCount)
label(iCount1)
label(iCount2)
label(iCount20)
label(iCount3)
label(iCount4)
label(iCount5)
label(iCount6)
label(iCount7)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayer)
registersymbol(pCity)
registersymbol(pOfficer)
registersymbol(pArmy)
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iEnableMS)
registersymbol(iEnableSU)
registersymbol(iEnableMM)
registersymbol(iEnableMG)
registersymbol(iEnableMT)
registersymbol(iEnableMC)
registersymbol(iEnableMOS)
registersymbol(iEnableMAM)
registersymbol(iEnableMTR)
registersymbol(iEnableMPO)
registersymbol(iMinGold)
registersymbol(iBack)
registersymbol(iCount)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount20)
registersymbol(iCount3)
registersymbol(iCount4)
registersymbol(iCount5)
registersymbol(iCount6)
registersymbol(iCount7)
registersymbol(iID)
registersymbol(iREG)

//=========================================
MyCode:
//=========================================
// RTS
_MonArmy:
 mov esi,[ecx+40]
 mov [pArmy],esi

 mov esi,[ecx+5c]
 mov [iID],esi

_ExitMAr:
 mov esi,[ecx+00000288]            // Original code
 jmp _BackMAr                      // Back to main code

//=========================================
// RTS
_MonBattleEnd:
 mov [iID],esi                     // Invalidate ID
 mov [pArmy],esi                   // Invalidate ID

 mov edx,0
 mov dword ptr [iCount],edx
 mov dword ptr [iCount1],edx
 mov dword ptr [iCount2],edx
 mov dword ptr [iCount20],edx
 mov dword ptr [iCount3],edx
 mov dword ptr [iCount4],edx
 mov dword ptr [iCount5],edx
 mov dword ptr [iCount6],edx
 mov dword ptr [iCount7],edx

 mov [iREG+00],edx
 mov [iREG+04],edx
 mov [iREG+08],edx
 mov [iREG+0c],edx
 mov [iREG+10],edx
 mov [iREG+14],edx
 mov [iREG+18],edx

_ExitMBE:
 lea edx,[esi+000002A8]            // Original code
 jmp _BackMBE                      // Back to main code

//=========================================
// RTS
_MonIssue:
 mov [iREG+00],eax
 mov [iREG+04],ebx
 mov [iREG+08],ecx
 mov [iREG+0c],edx
 mov [iREG+10],edi
 mov [iREG+14],esi
 mov [iREG+18],ebp

 push eax
 mov eax,[ecx]
 mov [iREG+18],eax
 and eax,ff00ff0f
 mov [iBack],eax
 pop eax

_ExitMI:
 push edi
 push esi
 push ebp
 push ebx
 sub esp,000000E0
 jmp _BackMI                       // Back to main code
//----------------------------------------------------------------------------
//=========================================
// TBS - Movement Points: Troops
_MonMP:
 push eax

 mov eax,[ecx+40]                  // Get pArmy
 test eax,eax
 jz _ExitMM

 mov eax,[eax+54]                  // Get Owner
 cmp eax,[pPlayer]
 jne _ExitMM

 cmp dword ptr [iEnableMM],0
 je _MonM00                        // Jump if feature is disabled

 fstp st(0)

 mov eax,(float)80.0
 cmp eax,[ecx+0000027C]
 jle _MonM01

 mov [ecx+0000027C],eax

_MonM01:
 fld dword ptr [ecx+0000027C]

_MonM00:
 cmp dword ptr [iEnableMT],0
 je _ExitMM                        // Jump if feature is disabled

 mov eax,[ecx+00000284]
 mov [ecx+00000280],eax

_ExitMM:
 pop eax

 fst dword ptr [ecx+0000027C]      // Original code
 jmp _BackMM                       // Back to main code

//=========================================
// TBS - Movement Points: Commander and Special Units
_MonMP1:
 push eax

 mov eax,[esi+7c]                  // Get pInfo
 test eax,eax
 jz _ExitMM1

 mov eax,[eax]                    // Get Owner
 cmp eax,[pPlayer]
 jne _ExitMM1

 cmp dword ptr [iEnableMM],0
 je _MonM10                        // Jump if feature is disabled

 fstp st(0)

 mov eax,(float)80.0
 cmp eax,[esi+000000c4]
 jle _MonM11

 mov [esi+000000c4],ecx

_MonM11:
 fld dword ptr [esi+000000c4]

_MonM10:
 mov eax,[esi+000000ec]            // Get pCommander
 test eax,eax
 jz _ExitMM1

 cmp dword ptr [iEnableMT],0
 je _ExitMM1                       // Jump if feature is disabled

 push ecx
 mov ecx,[eax+00000284]
 mov [eax+00000280],ecx
 pop ecx

_ExitMM1:
 pop eax

 test eax,eax

 fst dword ptr [esi+000000C4]      // Original code
 jmp _BackMM1                      // Back to main code

//=========================================
// TBS
_MonGold:
 push ecx

 mov [pPlayer],eax

 cmp dword ptr [iEnableMG],0
 je _ExitMG                        // Jump if feature is disabled

 mov ecx,[iMinGold]

 cmp ecx,[eax+00000504]
 jle _ExitMG

 mov [eax+00000504],ecx

_ExitMG:
 pop ecx

 push [eax+00000504]               // Original code
 jmp _BackMG                       // Back to main code

//=========================================
// TBS - MP Common
_MonMP2:
 mov eax,[ebx+7c]                  // Get pInfo
 test eax,eax
 jz _ExitMM2

 mov eax,[eax]                     // Get Owner
 cmp eax,[pPlayer]
 jne _ExitMM2

 cmp dword ptr [iEnableMM],0
 je _ExitMM2                       // Jump if feature is disabled

 mov eax,[ebx+00000150]

 cmp eax,[ebx+000000c4]
 jle _ExitMM2

 mov [ebx+000000c4],eax
 mov [ebx+0000014c],eax

_ExitMM2:
 mov eax,[ebx+000000C4]            // Original code
 jmp _BackMM2                      // Back to main code

//=========================================
// TBS - Construction (Buildings)
_MonConstruction:
 mov eax,[ebp+0c]                  // Get pCity
 test eax,eax
 jz _ExitMC

 mov eax,[eax+00000194]           // Get Owner
 cmp eax,[pPlayer]
 jne _ExitMC

 cmp dword ptr [iEnableMC],0
 je _ExitMC                       // Jump if feature is disabled

 mov edi,[ebp+20]
 mov eax,[ebp+24]
 cmp edi,eax
 jbe _ExitMC

 sub edi,eax
 cmp edi,[esp+14]
 jle _ExitMC

 mov [esp+14],edi

_ExitMC:
 mov edi,[ebp+20]                  // Original code
 mov eax,[ebp+24]                  // Original code
 jmp _BackMC                       // Back to main code

//=========================================
// TBS - Ship Battle
_MonShip:
 push ecx
 mov ecx,eax

 mov eax,[ecx+40]                  // Get pArmy
 test eax,eax
 jz _ExitMS

 mov eax,[eax+54]                  // Get Owner
 cmp eax,[pPlayer]
 jne _ExitMS

 cmp dword ptr [iEnableGM],0
 je _ExitMS                        // Jump if feature is disabled

 mov eax,[ecx+00000284]
 mov [ecx+00000280],eax

 xor eax,eax
 mov [ebx+000000b4],eax

_ExitMS:
 mov eax,ecx
 pop ecx

 mov esi,[eax+00000280]            // Original code
 jmp _BackMS                       // Back to main code

//=========================================
// TBS - Selected City/Town/Whatever
_MonSelCity:
 mov [pCity],eax
 test eax,eax
 jz _ExitMSC

 mov edx,[eax+00000194]
 cmp edx,[pPlayer]
 jne _ExitMSC

 cmp dword ptr [iEnableMTR],0
 je _ExitMSC                       // Jump if feature is disabled

 mov edx,#20
 cmp edx,[eax+0000030c]
 jle _ExitMSC

 mov [eax+0000030c],edx

_ExitMSC:
 mov [esi+0000016C],eax            // Original code
 jmp _BackMSC                      // Back to main code

//========================================= new
// TBS - Officers and Special Agents (just click on army/city/agent)
_MonOfficerStatus:
 push eax
 push ebx
 push ecx

 mov ebx,[eax+0000018c]
 cmp ebx,[pPlayer]
 jne _ExitMOS

 mov [pOfficer],ecx

 mov edx,eax                       // Killing a bug

 cmp dword ptr [iEnableMOS],0
 je _MonOS03                       // Jump if feature is disabled

 lea ebx,[edx+28]
 mov ecx,#4

_MonOS00:
 mov eax,[ebx+ecx*4]
 test eax,eax
 jz _MonOS02
 js _MonOS01

 cmp eax,#09
 jge _MonOS02

 mov dword ptr [ebx+ecx*4],#09
 jmp _MonOS02

_MonOS01:
 neg eax
 cmp eax,#09
 jge _MonOS02

 mov eax,#09
 neg eax
 mov [ebx+ecx*4],eax

_MonOS02:
 loop _MonOS00

 mov eax,#09
 cmp eax,[edx+000000f8]
 jle _MonOS03

 mov [edx+000000f8],eax
//--------------------- Movement Points -----------
_MonOS03:
 cmp dword ptr [iEnableMM],0
 je _ExitMOS                       // Jump if feature is disabled

 mov ecx,[edx+0000016c]            // Get pCommanderInfo

 xor eax,eax
 mov [ecx+000000a2],al             // Enable Move Again

 mov eax,[ecx+00000148]            // get specific Maximum MP

 mov [ecx+0000014c],eax
 mov [ecx+00000150],eax
 mov [ecx+000000c4],eax

 mov ebx,[ecx+000000ec]            // Get pCommanderTroop
 test ebx,ebx
 jz _ExitMOS                       // Jump if there is no troop (it's an agent)

 mov [ebx+0000027c],eax            // Troop's MP = Commander's MP

_ExitMOS:
 pop ecx
 pop ebx
 pop eax

 movzx edx,byte ptr [eax+000001D8] // Original code
 jmp _BackMOS                      // Back to main code

//========================================= new
// TBS - Minimum Available Mercs in the Region
_MonAvailableMercs:
 push ecx

 mov eax,[esi+000000D8]            // Original code (get pMerc)

 mov ecx,[esp+14]

 cmp ecx,LUDO+822e94
 jne _ExitMAM

 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 test edi,edi
 jz _ExitMAM

 mov ecx,[edi+54]                  // Get pPlayer
 cmp ecx,[pPlayer]
 jne _ExitMAM

 mov ecx,3
 mov [esi+000000dc],eax

 cmp ecx,[eax+14]
 jle _MonAM00

 mov [eax+14],ecx

_MonAM00:
 mov ecx,(float)3.0
 cmp ecx,[eax+18]
 jle _ExitMAM

 mov [eax+18],ecx                  // Minimum

 mov ebx,3
 mov [esi+000000dc],ebx

_ExitMAM:
 pop ecx
 jmp _BackMAM                      // Back to main code

//========================================= new
// TBS - on changing
_MonPublicOrder:
 mov ecx,[esi]                     // pTown

 mov ecx,[ecx+00000194]
 cmp ecx,[pPlayer]
 jne _ExitMPO

 cmp dword ptr [iEnableMPO],0
 je _ExitMPO                       // Jump if feature is disabled

 mov ecx,#300
 cmp ecx,eax
 jle _ExitMPO

 mov eax,ecx

_ExitMPO:
 mov [esi+000000AC],eax            // Original code
 jmp _BackMPO                      // Back to main code

//=========================================
 db '========================================&gt;'
 db 'CE6.2 Script by Recifense 022413'
//=========================================
// Variables
iEnableGM:
 dd 0
iEnableMA:
 dd 0
iEnableMS:
 dd 0
iEnableSU:
 dd 0
iEnableMM:
 dd 0
iEnableMG:
 dd 0
iEnableMT:
 dd 0
iEnableMC:
 dd 0
iEnableMOS:
 dd 0
iEnableMAM:
 dd 0
iEnableMTR:
 dd 0
iEnableMPO:
 dd 0
pUnit:
 dd 0
pArmy:
 dd MyCode
pPlayer:
 dd 0
pCity:
 dd 0
pOfficer:
 dd 0
iEAX:
 dd 0
iEBX:
 dd 0
iECX:
 dd 0
iBack:
 dd 0
iCount:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0
iCount20:
 dd 0
iCount3:
 dd 0
iCount4:
 dd 0
iCount5:
 dd 0
iCount6:
 dd 0
iCount7:
 dd 0
iMinGold:
 dd #62000
iID:
 dd #99
iREG:
 dd 0,0,0,0,0,0,0,0,0,0

//=========================================
// Hacking Points
LUDO+369d97:
 jmp _MonArmy
 nop
_BackMAr:

LUDO+3628c1:
 jmp _MonBattleEnd
 nop
_BackMBE:

LUDO+027230:
 jmp _MonIssue
 nop
 nop
 nop
 nop
 nop
_BackMI:
//-------------------
LUDO+367403:
 jmp _MonMP
 nop
_BackMM:

LUDO+192e19:
 jmp _MonMP1
 nop
_BackMM1:

LUDO+83dfc2:
 jmp _MonGold
 nop
_BackMG:

LUDO+190018:
 jmp _MonMP2
 nop
_BackMM2:

LUDO+1e3a46:
 jmp _MonConstruction
 nop
_BackMC:

LUDO+2159f2:
 jmp _MonShip
 nop
_BackMS:

LUDO+7758eb:
 jmp _MonSelCity
 nop
_BackMSC:

LUDO+19ce43: //new
 jmp _MonOfficerStatus
 nop
 nop
_BackMOS:

LUDO+820fb9: //new
 jmp _MonAvailableMercs
 nop
_BackMAM:

LUDO+1d7672:
 jmp _MonPublicOrder
 nop
_BackMPO:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
LUDO+026b19:
 movzx edx,byte ptr [LUDO+C243B0]

LUDO+027518:
 movzx edx,byte ptr [LUDO+C243B0]

LUDO+026954:
 movzx edx,byte ptr [LUDO+C243B0]

LUDO+02a5c9:
 movzx eax,byte ptr [LUDO+C243B0]

LUDO+029ab1:
 movzx edx,byte ptr [LUDO+C243B0]

LUDO+0281f7:
 movzx edx,byte ptr [LUDO+C243B0]

LUDO+026dc8: //new
 movzx eax,byte ptr [LUDO+C243B0]

LUDO+3e3793:
//fst dword ptr [ebp+0000039C]
 db d9 95 9c 03 00 00

LUDO+36c26b:
// mov [ecx+0000095C],eax
 db 89 81 5c 09 00 00

LUDO+3d762d: //new
// mov [edi+000003E0],eax
 db 89 87 e0 03 00 00

LUDO+3c8df4: //new
// mov [ebx+0000025A],ax
 db 66 89 83 5a 02 00 00

LUDO+31849c:
//  mov edx,[ecx+00000308]
 db 8b 91 08 03 00 00

LUDO+369d97:
//  mov esi,[ecx+00000288]
 db 8b b1 88 02 00 00

LUDO+3628c1:
//  lea edx,[esi+000002A8]
 db 8d 96 a8 02 00 00

LUDO+027230:
// push edi
// push esi
// push ebp
// push ebx
// sub esp,000000E0
 db 57 56 55 53 81 ec e0 00 00 00
//-------------------------
LUDO+367403:
// fst dword ptr [ecx+0000027C]
 db d9 91 7c 02 00 00

LUDO+192e19:
// fst dword ptr [esi+000000C4]
 db d9 96 c4 00 00 00

LUDO+83dfc2:
// push [eax+00000504]
 db ff b0 04 05 00 00

LUDO+190018:
// mov eax,[ebx+000000C4]
 db 8b 83 c4 00 00 00

LUDO+1e3a46:
// mov edi,[ebp+20]
// mov eax,[ebp+24]
 db 8b 7d 20 8b 45 24

LUDO+2159f2:
// mov esi,[eax+00000280]
 db 8b b0 80 02 00 00

LUDO+7758eb:
//  mov [esi+0000016C],eax
 db 89 86 6c 01 00 00

LUDO+19ce43: //new
//  movzx edx,byte ptr [eax+000001D8]
 db 0f b6 90 d8 01 00 00

LUDO+820fb9: //new
// mov eax,[esi+000000D8]
 db 8b 86 d8 00 00 00

LUDO+1d7672:
// mov [esi+000000AC],eax
 db 89 86 ac 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableMS)
unregistersymbol(iEnableSU)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMG)
unregistersymbol(iEnableMT)
unregistersymbol(iEnableMC)
unregistersymbol(iEnableMOS)
unregistersymbol(iEnableMAM)
unregistersymbol(iEnableMTR)
unregistersymbol(iEnableMPO)
unregistersymbol(pPlayer)
unregistersymbol(pCity)
unregistersymbol(pOfficer)
unregistersymbol(iMinGold)
unregistersymbol(iBack)
unregistersymbol(pArmy)
unregistersymbol(iCount)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount20)
unregistersymbol(iCount3)
unregistersymbol(iCount4)
unregistersymbol(iCount5)
unregistersymbol(iCount6)
unregistersymbol(iCount7)
unregistersymbol(iID)
unregistersymbol(iREG)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>97</ID>
          <Description>"Enable/Disable Minimum Gold =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMG</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>04FE08F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>04FE08F8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCity</Name>
      <Address>04FE08FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pOfficer</Name>
      <Address>04FE0900</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pArmy</Name>
      <Address>04FE08F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>04FE08C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMA</Name>
      <Address>04FE08C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMS</Name>
      <Address>04FE08C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableSU</Name>
      <Address>04FE08CC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMM</Name>
      <Address>04FE08D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMG</Name>
      <Address>04FE08D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMT</Name>
      <Address>04FE08D8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMC</Name>
      <Address>04FE08DC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMOS</Name>
      <Address>04FE08E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAM</Name>
      <Address>04FE08E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMTR</Name>
      <Address>04FE08E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPO</Name>
      <Address>04FE08EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinGold</Name>
      <Address>04FE0938</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iBack</Name>
      <Address>04FE0910</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount</Name>
      <Address>04FE0914</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount1</Name>
      <Address>04FE0918</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount2</Name>
      <Address>04FE091C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount20</Name>
      <Address>04FE0920</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount3</Name>
      <Address>04FE0924</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount4</Name>
      <Address>04FE0928</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount5</Name>
      <Address>04FE092C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount6</Name>
      <Address>04FE0930</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount7</Name>
      <Address>04FE0934</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iID</Name>
      <Address>04FE093C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iREG</Name>
      <Address>04FE0940</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Rome Total War
 Game Version  : 1.5
 Game Sponsor  : Myself and other Guys (via donation)
 Process Name  : RomeTW.exe
 Script Version: 4.1
 CE Version    : 6.2
 Release date  : 24-Feb-2013
 Author        : Recifense
 History:
 01-Mar-12: First Release (CE6.1)
 27-Jan-13: Modified GM approach + New Features (Script 3.0)
 10-Feb-13: New Features (Script 4.0)
 24-Feb-13: Killing a bug on MOS (Script 4.1)
 Features:
 - God Mode                                 (changed+new) [1]
 - Unlimited Ammo                                         [2]
   - Arrows
   - Cannons                                (new)
 - Unlimited Stamina                        (new)         [3]
 - Stronger Units                           (new)         [4]
   - Charge Bonus  (15)
   - Base Attack  (120)
   - Base Armor   (120)
 - Unlimited Movement Points                              [5]  
   - Army
   - Troop
   - Agents
 - Minimum Gold                                           [6]
 - Recover Troop Size                                     [7]
 - Construction in 1 day                                  [8]
 - Pointer to Selected City                               [9]
 - Officers' and Special Agents' Attributes (new)         [A]
 - Minimum Available Mercenaries (for hire) (new)         [B]
 - Recruitment in 1 Day                     (Brand-new)   [C]
 - Minimum Public Order                     (Brand-new)   [D]
===========================================
[1] It does not work for cannon's troop when attached to the weapon;
[2] Ammo is no problem and since you have unlimited stamina, keep on firing;
[3] That's it;
[4] When it is on, the enemy may not attack you;
[5] Beware not to be blocked;
[6] The Minimum value is 62000;
[7] When Army/Fleet is moving;
[8] That's it. Valid to all player's setttlements;
[9] It is used on the table;
[A] The existing attributes will be set to a minimum value (9) and XP as well;
[B] On Entering Hire Mercenary screen (Do not hire all troops at once);
[C] On entering a town, its recruitment power is increased;
[D] The minimum value is 300.
===========================================
HOTKEYS:
CTRL+Home     = ENABLE  all Cheats (but Stronger Units and Attributes)
CTRL+END      = DISABLE all Cheats (but Stronger Units and Attributes)
CTRL+PageUp   = ENABLE  Attribute cheat;
CTRL+PageDown = DISABLE Attribute cheat;
[You can create/change hotkeys]
===========================================
Cheers!
</Comments>
</CheatTable>
