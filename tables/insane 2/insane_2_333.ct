<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>104</ID>
      <Description>"Allow all car types in all races"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(luaV_gettable_end_AOB,8B 0B 8B 45 14 89 08)
registersymbol(luaV_gettable_end_AOB)
aobscan(CodeCave,00 B9 * * * * E9 * * * FF 00 00)
//places
label(AllowAllCarTypes)
label(AllowAllCarTypes_Bail)
label(AllowAllCarTypes_Return)

luaV_gettable_end_AOB+13://i2.exe+4FE8A:
jmp AllowAllCarTypes
AllowAllCarTypes_Return:

CodeCave+D:
AllowAllCarTypes:
  mov edi,dword [ebp+10]
  cmp dword [edi+8],4       //make sure TValue *key is a string
  jne short AllowAllCarTypes_Bail
    mov edi,dword [edi]
    cmp dword [edi+10],'inac'
    jne short AllowAllCarTypes_Bail //are we trying to access ???.inaccessibleVehicles
    cmp dword [edi+14],'cess'
    jne short AllowAllCarTypes_Bail
    cmp dword [edi+18],'ible'
    jne short AllowAllCarTypes_Bail
    cmp dword [edi+1c],'Vehi'
    jne short AllowAllCarTypes_Bail
    cmp dword [edi+20],'cles'
    jne short AllowAllCarTypes_Bail
      mov edi, dword [ebp+14]   //if yes, return nil
      mov dword [edi],0      //says that inaccessibleVehicles is nil
      mov dword [edi+4],0
      mov dword [edi+8],0
  AllowAllCarTypes_Bail:
  //original code
  POP EDI
  POP ESI
  POP EBX
  MOV ESP,EBP
jmp AllowAllCarTypes_Return



[DISABLE]
unregistersymbol(luaV_gettable_end_AOB)
luaV_gettable_end_AOB+13:
POP EDI
POP ESI
POP EBX
MOV ESP,EBP


{
i2.exe+4FE10 - 55                    - push ebp               &lt;-luaV_gettable
i2.exe+4FE11 - 8B EC                 - mov ebp,esp
i2.exe+4FE13 - 83 E4 F8              - and esp,-08
i2.exe+4FE16 - 51                    - push ecx
i2.exe+4FE17 - 53                    - push ebx
i2.exe+4FE18 - 56                    - push esi
i2.exe+4FE19 - 57                    - push edi
i2.exe+4FE1A - C7 44 24 0C 00000000  - mov [esp+0C],00000000
i2.exe+4FE22 - 8B 55 0C              - mov edx,[ebp+0C]
i2.exe+4FE25 - 8B 42 08              - mov eax,[edx+08]
i2.exe+4FE28 - 83 F8 05              - cmp eax,05
i2.exe+4FE2B - 75 64                 - jne i2.exe+4FE91
i2.exe+4FE2D - 8B 32                 - mov esi,[edx]
i2.exe+4FE2F - 8B 45 10              - mov eax,[ebp+10]
i2.exe+4FE32 - 8B CE                 - mov ecx,esi
i2.exe+4FE34 - E8 27ECFFFF           - call i2.exe+4EA60
i2.exe+4FE39 - 8B D8                 - mov ebx,eax
i2.exe+4FE3B - 83 7B 08 00           - cmp dword ptr [ebx+08],00
i2.exe+4FE3F - 75 36                 - jne i2.exe+4FE77
i2.exe+4FE41 - 8B 56 08              - mov edx,[esi+08]
i2.exe+4FE44 - 85 D2                 - test edx,edx
i2.exe+4FE46 - 74 2F                 - je i2.exe+4FE77
i2.exe+4FE48 - F6 42 06 01           - test byte ptr [edx+06],01
i2.exe+4FE4C - 74 04                 - je i2.exe+4FE52
i2.exe+4FE4E - 33 FF                 - xor edi,edi
i2.exe+4FE50 - EB 21                 - jmp i2.exe+4FE73
i2.exe+4FE52 - 8B 45 08              - mov eax,[ebp+08]
i2.exe+4FE55 - 8B 48 10              - mov ecx,[eax+10]
i2.exe+4FE58 - 8B B1 BC000000        - mov esi,[ecx+000000BC]
i2.exe+4FE5E - E8 BDEBFFFF           - call i2.exe+4EA20
i2.exe+4FE63 - 83 78 08 00           - cmp dword ptr [eax+08],00
i2.exe+4FE67 - 75 08                 - jne i2.exe+4FE71
i2.exe+4FE69 - 80 4A 06 01           - or byte ptr [edx+06],01
i2.exe+4FE6D - 33 FF                 - xor edi,edi
i2.exe+4FE6F - EB 02                 - jmp i2.exe+4FE73
i2.exe+4FE71 - 8B F8                 - mov edi,eax
i2.exe+4FE73 - 85 FF                 - test edi,edi
i2.exe+4FE75 - 75 78                 - jne i2.exe+4FEEF
i2.exe+4FE77 - 8B 0B                 - mov ecx,[ebx]   &lt;-aob
i2.exe+4FE79 - 8B 45 14              - mov eax,[ebp+14]
i2.exe+4FE7C - 89 08                 - mov [eax],ecx
i2.exe+4FE7E - 8B 53 04              - mov edx,[ebx+04]
i2.exe+4FE81 - 89 50 04              - mov [eax+04],edx
i2.exe+4FE84 - 8B 4B 08              - mov ecx,[ebx+08]
i2.exe+4FE87 - 89 48 08              - mov [eax+08],ecx
i2.exe+4FE8A - 5F                    - pop edi         &lt;-hack point
i2.exe+4FE8B - 5E                    - pop esi
i2.exe+4FE8C - 5B                    - pop ebx
i2.exe+4FE8D - 8B E5                 - mov esp,ebp
i2.exe+4FE8F - 5D                    - pop ebp
i2.exe+4FE90 - C3                    - ret
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>110</ID>
      <Description>"Load mod.lua after vehiclesettings.lua"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(luaL_loadfile_AOB,8B 45 08 C1 FB 04 43)
aobscan(luaD_call_AOB,83 E4 F8 51 56 8B 75 08 66 FF 46 34)
aobscan(VehicleSettingsLoader_AOB,89 45 08 C7 45 00 08 00 00 00 8B 0D)
registersymbol(VehicleSettingsLoader_AOB)
{
i2.exe+22447A - 89 45 08              - mov [ebp+08],eax
i2.exe+22447D - C7 45 00 08000000     - mov [ebp+00],00000008
i2.exe+224484 - 8B 0D D49D7F00        - mov ecx,[i2.exe+3F9DD4] //i2.exe+3F9DD4=lua state ("L") base ptr
i2.exe+22448A - 68 04F17B00           - push i2.exe+3BF104
i2.exe+22448F - E8 DC95E1FF           - call i2.exe+3DA70
i2.exe+224494 - 8B 0D D49D7F00        - mov ecx,[i2.exe+3F9DD4] //hook point
}
aobscan(CodeCave,00 B9 * * * * E9 * * * FF 00 00)
label(LuaStatePointer)
registersymbol(LuaStatePointer)
label(ModLoader)


[VehicleSettingsLoader_AOB+C]:
LuaStatePointer:

CodeCave+D+59:
ModLoader:
  pushad
  mov eax,dword [LuaStatePointer] //safe to hardcode since the game doesn't use aslr
  mov eax,dword [eax]
  mov edi,eax
       //tell the lua engine to load our mod.lua
  push 0        //puts data\mod.lua on the stack
  push '.lua'
  push '\mod'
  push 'data'
  push esp
  call luaL_loadfile_AOB-17
  add esp,14

  mov ecx,dword [edi+8]
  push -1
  sub ecx,10
  push ecx
  push edi
  CALL luaD_call_AOB-3
  add esp,C


  popad
  mov ecx,dword [LuaStatePointer]
retn

VehicleSettingsLoader_AOB+1a:
call ModLoader
nop

 
 
[DISABLE]
unregistersymbol(LuaStatePointer)
unregistersymbol(VehicleSettingsLoader_AOB)

VehicleSettingsLoader_AOB+1a:
mov ecx,dword [LuaStatePointer]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>102</ID>
      <Description>"Log tables accessed by luaV_gettable"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(code,2048)
aobscanmodule(luaV_gettable_beginning_AOB,i2.exe,51 53 56 57 C7 44 24 0C 00 00 00 00)
registersymbol(luaV_gettable_beginning_AOB)
//places
label(LogHash)
label(LogHash_Bail)
label(LogHash_Return)
//data
label(FileName)
label(LogLine)
label(DummyVariable)


luaV_gettable_beginning_AOB-6: //i2.exe+4FE10:
jmp LogHash
nop
LogHash_Return:

code:
LogHash:
  pushad                    //save all registers
  mov eax,dword [esp+2C]
  cmp dword [eax+8],4       //make sure we're accessing a string
  jne LogHash_Bail
  mov eax,dword [eax]
  lea eax,[eax+10]
  push eax
  push LogLine
  call strcpy
  call strlen               //get the length of the logged line
  mov ebx,eax               //and store it in ebx
  mov dword [LogLine+ebx],00000a0d //end with a linefeed
  add ebx,2
  add esp,8                 //pop the arguments used both for strcpy and strlen
  //open logfile
  push 0
  push 80 //FILE_ATTRIBUTE_NORMAL
  push 4  //OPEN_ALWAYS
  push 0
  push 3 //FILE_SHARE_READ | FILE_SHARE_WRITE -&gt; allow other programs to read and write
  push C //GENERIC_READ | GENERIC_WRITE
  push FileName
  call CreateFileA
  //move to its end
  push eax //save the file handle
  push 2 //FILE_END
  push 0
  push 0
  push eax
  call SetFilePointer
  mov eax,dword [esp] //restore the file handle
  //log the new line
  push 0
  push DummyVariable //lpNumberOfBytesWritten
  push ebx
  push LogLine
  push eax
  call WriteFile
  //close the file
  //pop eax //restore the file handle
  //push eax
  call CloseHandle
  LogHash_Bail:
  popad

  //original code
  push ebp
  mov ebp,esp
  and esp,FFFFFFF8
jmp LogHash_Return


DummyVariable:
dd 0
FileName:
db 'accessed lua tables.txt',00
LogLine:

[DISABLE]
unregistersymbol(luaV_gettable_beginning_AOB)
luaV_gettable_beginning_AOB-6:
push ebp
mov ebp,esp
and esp,FFFFFFF8

dealloc(code)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>111</ID>
      <Description>"Hacking leftovers"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>109</ID>
          <Description>"lua state (L) pointer"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="0099FEF0"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>i2.exe+3F9DD4 </Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>105</ID>
          <Description>"breakpoint when accessing specific lua tables"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(luaV_gettable_end_AOB,8B 0B 8B 45 14 89 08)
registersymbol(luaV_gettable_end_AOB)
aobscan(CodeCave,00 B9 * * * * E9 * * * FF 00 00)
//places
label(AllowAllCarTypes)
label(AllowAllCarTypes_Bail)
label(AllowAllCarTypes_NotinaccessVehicles)
label(AllowAllCarTypes_Notmass)
label(AllowAllCarTypes_Notwheel_mass)
label(AllowAllCarTypes_Return)

luaV_gettable_end_AOB+13://i2.exe+4FE8A:
jmp AllowAllCarTypes
AllowAllCarTypes_Return:

CodeCave+D:
AllowAllCarTypes:
  mov edi,dword [ebp+10]
  cmp dword [edi+8],4       //make sure TValue *key is a string
  jne AllowAllCarTypes_Bail
    mov edi,dword [edi]
    cmp dword [edi+10],'inac'
    jne AllowAllCarTypes_NotinaccessVehicles //are we trying to access ???.inaccessibleVehicles
    cmp dword [edi+14],'cess'
    jne AllowAllCarTypes_NotinaccessVehicles
    cmp dword [edi+18],'ible'
    jne AllowAllCarTypes_NotinaccessVehicles
    cmp dword [edi+1c],'Vehi'
    jne AllowAllCarTypes_NotinaccessVehicles
    cmp dword [edi+20],'cles'
    jne AllowAllCarTypes_NotinaccessVehicles
      mov edi, dword [ebp+14]   //if yes, return nil
      mov dword [edi],0      //says that inaccessibleVehicles is nil
      mov dword [edi+4],0
      mov dword [edi+8],0
    jmp AllowAllCarTypes_Bail

    AllowAllCarTypes_NotinaccessVehicles:
    cmp dword [edi+10],'mass'
    jne AllowAllCarTypes_Notmass
    int 3

    jmp AllowAllCarTypes_Bail

    AllowAllCarTypes_Notmass:
    cmp dword [edi+11],'whee' //there is rwheel_mass and fwheel_mass
    jne AllowAllCarTypes_Notwheel_mass
    cmp dword [edi+15],'l_ma'
    jne AllowAllCarTypes_Notwheel_mass
    cmp word [edi+19],'ss'
    jne AllowAllCarTypes_Notwheel_mass

    jmp AllowAllCarTypes_Bail

    AllowAllCarTypes_Notwheel_mass:
    //wheel friction is 0.7 for all entities, except 1 where it is 1.7
    cmp dword [edi+10],'whee'
    jne AllowAllCarTypes_Bail
    cmp dword [edi+14],'l_fr'
    jne AllowAllCarTypes_Bail
    cmp dword [edi+18],'icti'
    jne AllowAllCarTypes_Bail
    cmp word [edi+1c],'on'
    jne AllowAllCarTypes_Bail

  AllowAllCarTypes_Bail:
  //original code
  POP EDI
  POP ESI
  POP EBX
  MOV ESP,EBP
jmp AllowAllCarTypes_Return


[DISABLE]
unregistersymbol(luaV_gettable_end_AOB)
luaV_gettable_end_AOB+13:
POP EDI
POP ESI
POP EBX
MOV ESP,EBP


{
i2.exe+4FE10 - 55                    - push ebp               &lt;-luaV_gettable
i2.exe+4FE11 - 8B EC                 - mov ebp,esp
i2.exe+4FE13 - 83 E4 F8              - and esp,-08
i2.exe+4FE16 - 51                    - push ecx
i2.exe+4FE17 - 53                    - push ebx
i2.exe+4FE18 - 56                    - push esi
i2.exe+4FE19 - 57                    - push edi
i2.exe+4FE1A - C7 44 24 0C 00000000  - mov [esp+0C],00000000
i2.exe+4FE22 - 8B 55 0C              - mov edx,[ebp+0C]
i2.exe+4FE25 - 8B 42 08              - mov eax,[edx+08]
i2.exe+4FE28 - 83 F8 05              - cmp eax,05
i2.exe+4FE2B - 75 64                 - jne i2.exe+4FE91
i2.exe+4FE2D - 8B 32                 - mov esi,[edx]
i2.exe+4FE2F - 8B 45 10              - mov eax,[ebp+10]
i2.exe+4FE32 - 8B CE                 - mov ecx,esi
i2.exe+4FE34 - E8 27ECFFFF           - call i2.exe+4EA60
i2.exe+4FE39 - 8B D8                 - mov ebx,eax
i2.exe+4FE3B - 83 7B 08 00           - cmp dword ptr [ebx+08],00
i2.exe+4FE3F - 75 36                 - jne i2.exe+4FE77
i2.exe+4FE41 - 8B 56 08              - mov edx,[esi+08]
i2.exe+4FE44 - 85 D2                 - test edx,edx
i2.exe+4FE46 - 74 2F                 - je i2.exe+4FE77
i2.exe+4FE48 - F6 42 06 01           - test byte ptr [edx+06],01
i2.exe+4FE4C - 74 04                 - je i2.exe+4FE52
i2.exe+4FE4E - 33 FF                 - xor edi,edi
i2.exe+4FE50 - EB 21                 - jmp i2.exe+4FE73
i2.exe+4FE52 - 8B 45 08              - mov eax,[ebp+08]
i2.exe+4FE55 - 8B 48 10              - mov ecx,[eax+10]
i2.exe+4FE58 - 8B B1 BC000000        - mov esi,[ecx+000000BC]
i2.exe+4FE5E - E8 BDEBFFFF           - call i2.exe+4EA20
i2.exe+4FE63 - 83 78 08 00           - cmp dword ptr [eax+08],00
i2.exe+4FE67 - 75 08                 - jne i2.exe+4FE71
i2.exe+4FE69 - 80 4A 06 01           - or byte ptr [edx+06],01
i2.exe+4FE6D - 33 FF                 - xor edi,edi
i2.exe+4FE6F - EB 02                 - jmp i2.exe+4FE73
i2.exe+4FE71 - 8B F8                 - mov edi,eax
i2.exe+4FE73 - 85 FF                 - test edi,edi
i2.exe+4FE75 - 75 78                 - jne i2.exe+4FEEF
i2.exe+4FE77 - 8B 0B                 - mov ecx,[ebx]   &lt;-aob
i2.exe+4FE79 - 8B 45 14              - mov eax,[ebp+14]
i2.exe+4FE7C - 89 08                 - mov [eax],ecx
i2.exe+4FE7E - 8B 53 04              - mov edx,[ebx+04]
i2.exe+4FE81 - 89 50 04              - mov [eax+04],edx
i2.exe+4FE84 - 8B 4B 08              - mov ecx,[ebx+08]
i2.exe+4FE87 - 89 48 08              - mov [eax+08],ecx
i2.exe+4FE8A - 5F                    - pop edi         &lt;-hack point
i2.exe+4FE8B - 5E                    - pop esi
i2.exe+4FE8C - 5B                    - pop ebx
i2.exe+4FE8D - 8B E5                 - mov esp,ebp
i2.exe+4FE8F - 5D                    - pop ebp
i2.exe+4FE90 - C3                    - ret
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"parse mod.lua NOW"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(ModLoader,1024)
aobscan(luaL_loadfile_AOB,8B 45 08 C1 FB 04 43)
aobscan(GetLuaState_AOB,53 8B 5C 24 08 55 8B 6C 24 10 56 8B C3)

label(ModFileName)


ModLoader:
  pushad
  mov eax,dword [i2.exe+3F9DD4]
  mov eax,dword [eax]
  mov edi,eax
       //tell the lua engine to load our mod.lua
  push ModFileName
  call luaL_loadfile_AOB-17
  add esp,4

  mov ecx,dword [edi+8]
  push -1
  sub ecx,10
  push ecx
  push edi
  CALL 00452810
  add esp,C


  popad
retn
ModFileName:
db '.\data\mod.lua',00

createthread(ModLoader)
 
 
[DISABLE]
dealloc(ModLoader)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
