<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>182</ID>
      <Description>"**ADD UPGRADE POiNTS SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Registersymbol(enable_AddUpgradePoints)
alloc(enable_AddUpgradePoints,4)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(AddUpgradePoints)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [enable_AddUpgradePoints],1
je AddUpgradePoints
jmp originalcode


AddUpgradePoints:
mov byte ptr [enable_AddUpgradePoints],0
add dword ptr [eax+14],#5
jmp originalcode

originalcode:
mov edx,[eax+14]
mov eax,[ebp+0C]

exit:
jmp returnhere

"ACM.exe"+A6882C:
jmp newmem
nop
returnhere:

enable_AddUpgradePoints:
dd 0
 
[DISABLE]
unregistersymbol(enable_AddUpgradePoints)
dealloc(enable_AddUpgradePoints)
dealloc(newmem)
"ACM.exe"+A6882C:
mov edx,[eax+14]
mov eax,[ebp+0C]
//Alt: db 8B 50 14 8B 45 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>139</ID>
      <Description>"**ENEMY SiZE SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Registersymbol(enable_BigEnemys)
alloc(enable_BigEnemys,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(BigEnemys)

Registersymbol(enable_SmallEnemys)
alloc(enable_SmallEnemys,4)
alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)
label(SmallEnemys)

Registersymbol(enable_RestoreEnemys)
alloc(enable_RestoreEnemys,4)
alloc(newmem3,2048)
label(returnhere3)
label(originalcode3)
label(exit3)
label(RestoreEnemys)

newmem3:
cmp byte ptr [enable_RestoreEnemys],1
je RestoreEnemys
jmp originalcode3

RestoreEnemys:
cmp [eax+58],(int)6
je originalcode3
cmp [eax+154],(int)21
je originalcode3
mov dword ptr [eax+74],(float)1

originalcode3:
movss xmm1,[eax+7C]

exit3:
jmp returnhere3

"ACM.exe"+66EE85:
jmp newmem3
returnhere3:




newmem2:
cmp byte ptr [enable_SmallEnemys],1
je SmallEnemys
jmp originalcode2

SmallEnemys:
cmp [eax+58],(int)6
je originalcode2
cmp [eax+154],(int)21
je originalcode2
mov dword ptr [eax+74],(float)0.5

originalcode2:
movss xmm0,[eax+78]

exit2:
jmp returnhere2

"ACM.exe"+66EE80:
jmp newmem2
returnhere2:




newmem:
cmp byte ptr [enable_BigEnemys],1
je BigEnemys
jmp originalcode

BigEnemys:
cmp [eax+58],(int)6
je originalcode
cmp [eax+154],(int)21
je originalcode
mov dword ptr [eax+74],(float)2

originalcode:
movss xmm3,[eax+74]

exit:
jmp returnhere

"ACM.exe"+66EE7B:
jmp newmem
returnhere:



enable_BigEnemys:
dd 0
enable_SmallEnemys:
dd 0
enable_RestoreEnemys:
dd 0



[DISABLE]
unregistersymbol(enable_BigEnemys)
dealloc(enable_BigEnemys)
dealloc(newmem)
"ACM.exe"+66EE7B:
movss xmm3,[eax+74]
//Alt: db F3 0F 10 58 74

unregistersymbol(enable_SmallEnemys)
dealloc(enable_SmallEnemys)
dealloc(newmem2)
"ACM.exe"+66EE80:
movss xmm0,[eax+78]
//Alt: db F3 0F 10 40 78
unregistersymbol(enable_RestoreEnemys)
dealloc(enable_RestoreEnemys)
dealloc(newmem3)
"ACM.exe"+66EE85:
movss xmm1,[eax+7C]
//Alt: db F3 0F 10 48 7C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>129</ID>
      <Description>"**REAL SUPER SPEED SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Registersymbol(enable_RealSuperSpeed)
alloc(enable_RealSuperSpeed,4)
Registersymbol(Restore_RealSuperSpeed)
alloc(Restore_RealSuperSpeed,4)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(RealSuperSpeedOn)
label(RealSuperSpeedOff)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [enable_RealSuperSpeed],1
je RealSuperSpeedOn
cmp byte ptr [Restore_RealSuperSpeed],1
je RealSuperSpeedOff
jmp originalcode

RealSuperSpeedOn:
mov [esi+00000094],(float)10
jmp originalcode

RealSuperSpeedOff:
mov [esi+00000094],(float)1
jmp originalcode

originalcode:
movss xmm0,[esi+000002FC]

exit:
jmp returnhere

"ACM.exe"+538F57:
jmp newmem
nop
nop
nop
returnhere:

enable_RealSuperSpeed:
dd 0
Restore_RealSuperSpeed:
dd 0
 
 
[DISABLE]
unregistersymbol(enable_RealSuperSpeed)
dealloc(enable_RealSuperSpeed)
unregistersymbol(Restore_RealSuperSpeed)
dealloc(Restore_RealSuperSpeed)
dealloc(newmem)
"ACM.exe"+538F57:
movss xmm0,[esi+000002FC]
//Alt: db F3 0F 10 86 FC 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>99</ID>
      <Description>"**RESTORE R,S,RF - SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Registersymbol(enable_RestoreFireModes)
alloc(enable_RestoreFireModes,4)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(RestoreFireModesOff)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [enable_RestoreFireModes],1
je RestoreFireModesOff
jmp originalcode

RestoreFireModesOff:
mov dword ptr [esi+0000032C],(float)1
mov dword ptr [esi+00000340],(float)1
mov dword ptr [esi+00000354],(float)1
mov dword ptr [esi+00000448],(float)1
mov dword ptr [esi+00000094],(float)1
mov dword ptr [esi+0000037C],(float)1
mov dword ptr [esi+000003a4],(float)1
mov dword ptr [eax+00000368],(float)1
jmp originalcode

originalcode:
mulss xmm0,[esi+00000424]

exit:
jmp returnhere

"ACM.exe"+A2C270:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+A2C270:
mulss xmm0,[esi+00000424]
//Alt: db F3 0F 59 86 24 04 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"**SLOW ENEMYS SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Registersymbol(enable_SlowEnemys)
alloc(enable_SlowEnemys,4)
Registersymbol(restore_SlowEnemys)
alloc(restore_SlowEnemys,4)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(SlowEnemysOn)
label(SlowEnemysOff)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [enable_SlowEnemys],1
je SlowEnemysOn
cmp byte ptr [restore_SlowEnemys],1
je SlowEnemysOff
jmp originalcode

SlowEnemysOn:
cmp [eax+154],(int)21
je originalcode
mov [eax+00000094],(float)0.2
jmp originalcode

SlowEnemysOff:
cmp [eax+154],(int)21
je originalcode
mov [eax+00000094],(float)1
jmp originalcode

originalcode:
movss xmm0,[eax+00000094]

exit:
jmp returnhere

"ACM.exe"+D850DE:
jmp newmem
nop
nop
nop
returnhere:

enable_SlowEnemys:
dd 0
restore_SlowEnemys:
dd 0
 
[DISABLE]
unregistersymbol(enable_SlowEnemys)
dealloc(enable_SlowEnemys)
unregistersymbol(restore_SlowEnemys)
dealloc(restore_SlowEnemys)
dealloc(newmem)
"ACM.exe"+D850DE:
movss xmm0,[eax+00000094]
//Alt: db F3 0F 10 80 94 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>157</ID>
      <Description>"**TELEPORT SCRiPT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(teleportmem,2048)
registersymbol(s_enable)
registersymbol(l_enable)
registersymbol(u_enable)
label(returnteleport)
label(originalcodeteleport)
label(exitteleport)
label(z_coord)
label(x_coord)
label(y_coord)
label(z_coord_undo)
label(x_coord_undo)
label(y_coord_undo)
label(save_coord)
label(load_coord)
label(undo_coord)
label(s_enable)
label(l_enable)
label(u_enable)

"ACM.exe"+539045:
jmp teleportmem
nop
nop
nop
returnteleport:

teleportmem:
cmp [s_enable],1
je save_coord

cmp [l_enable],1
je load_coord

cmp [u_enable],1
je undo_coord

jmp originalcodeteleport

save_coord:
mov [s_enable],0
push edi
mov edi,[esi+5c]
mov [x_coord],edi
mov edi,[esi+60]
mov [z_coord],edi
mov edi,[esi+64]
mov [y_coord],edi
pop edi
jmp originalcodeteleport

load_coord:
mov [l_enable],0
cmp [z_coord],0
je originalcodeteleport
// Save actual Position (for UNDO TELEPORT) when press LOAD POSiTiON
push edi
mov edi,[esi+5c]
mov [x_coord_undo],edi
mov edi,[esi+60]
mov [z_coord_undo],edi
mov edi,[esi+64]
mov [y_coord_undo],edi
pop edi
// Save actual Position (for UNDO TELEPORT) when press LOAD POSiTiON
push edi
mov edi,[x_coord]
mov [esi+5c],edi
mov edi,[z_coord]
mov [esi+60],edi
mov edi,[y_coord]
mov [esi+64],edi
pop edi
jmp originalcodeteleport

undo_coord:
mov [l_enable],0
mov [s_enable],0
mov [u_enable],0
cmp [z_coord_undo],0
je originalcodeteleport
push edi
mov edi,[x_coord_undo]
mov [esi+5c],edi
mov edi,[z_coord_undo]
mov [esi+60],edi
mov edi,[y_coord_undo]
mov [esi+64],edi
pop edi

originalcodeteleport:
mov eax,[esi+64]
movss [ebp-58],xmm1

exitteleport:
jmp returnteleport

x_coord:
dd 0
z_coord:
dd 0
y_coord:
dd 0
s_enable:
dd 0
l_enable:
dd 0
x_coord_undo:
dd 0
z_coord_undo:
dd 0
y_coord_undo:
dd 0
u_enable:
dd 0
//&gt;&gt;&gt;--Teleport--//



[DISABLE]
dealloc(teleportmem)
dealloc(newmem)
Unregistersymbol(s_enable)
Unregistersymbol(l_enable)
Unregistersymbol(u_enable)
"ACM.exe"+539045:
mov eax,[esi+64]
movss [ebp-58],xmm1
//Alt: db 8B 46 64 F3 0F 11 4D A8








</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>159</ID>
      <Description>"1. SAVE POSiTiON"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>s_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>97</Key>
          </Keys>
          <Value>1</Value>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>158</ID>
      <Description>"2. LOAD POSiTiON"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>l_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>98</Key>
          </Keys>
          <Value>1</Value>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>160</ID>
      <Description>"3. UNDO LAST TELEPORT"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>u_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>99</Key>
          </Keys>
          <Value>1</Value>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>178</ID>
      <Description>"ADD 1.000 EXP PER HIT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//cmp [edi+14],(int)0
cmp [edi+10],(int)21//(bigexp)
//cmp [edi+18],(int)8//(bigexp)
//cmp [edi+84],(int)1//(bigexp)
//cmp [edi+90],(int)20//(bigexp)
jne originalcode
//add [edi],#10000
//jmp originalcode
add [edi],#1000

originalcode:
mov edi,[edi]
mov ecx,[ebp+0C]

exit:
jmp returnhere

"ACM.exe"+875AB3:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+875AB3:
mov edi,[edi]
mov ecx,[ebp+0C]
//Alt: db 8B 3F 8B 4D 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>183</ID>
      <Description>"ENABLE ADD 5 UPGRADE POiNTS"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_AddUpgradePoints</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>166</ID>
      <Description>"ENABLE BiG ENEMYS"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_BigEnemys</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>161</ID>
      <Description>"ENABLE REAL SUPER SPEED"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_RealSuperSpeed</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>163</ID>
      <Description>"ENABLE SLOW ENEMYS"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_SlowEnemys</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>167</ID>
      <Description>"ENABLE SMALL ENEMYS"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_SmallEnemys</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>38</ID>
      <Description>"NO RECOiL"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(newmem_recoil,2048) //2kb should be enough
label(returnhere_recoil)
label(originalcode_recoil)
label(exit_recoil)

newmem_recoil: //this is allocated memory, you have read,write,execute access
mov [eax+00000368],(float)0

originalcode_recoil:
movss xmm0,[eax+00000368]

exit_recoil:
jmp returnhere_recoil

"ACM.exe"+7261B1:
jmp newmem_recoil
nop
nop
nop
returnhere_recoil:

newmem: //this is allocated memory, you have read,write,execute access
mov [eax+0000037C],(float)0
mov [eax+000003a4],(float)0
originalcode:
mulss xmm0,[eax+0000037C]

exit:
jmp returnhere

"ACM.exe"+7261C3:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+7261C3:
mulss xmm0,[eax+0000037C]
//Alt: db F3 0F 59 80 7C 03 00 00

dealloc(newmem_recoil)
"ACM.exe"+7261B1:
movss xmm0,[eax+00000368]
//Alt: db F3 0F 10 80 68 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"NO SPREAD"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov dword ptr [esi+0000032C],(float)0
mov dword ptr [esi+00000340],(float)0
mov dword ptr [esi+00000354],(float)0

originalcode:
fld dword ptr [esi+00000340]

exit:
jmp returnhere

"ACM.exe"+47F0E1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+47F0E1:
fld dword ptr [esi+00000340]
//Alt: db D9 86 40 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"RAPiD FiRE"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp dword ptr [ecx+2dc],(int)9999
jne originalcode
mov [ecx+00000094],(float)1750

originalcode:
movss xmm0,[ecx+00000094]

exit:
jmp returnhere

"ACM.exe"+9F043C:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+9F043C:
movss xmm0,[ecx+00000094]
//Alt: db F3 0F 10 81 94 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>84</ID>
      <Description>"REAL RAPiD FiRE"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)


newmem:
cmp dword ptr [ecx+2dc],(int)9999
jne originalcode
mov [ecx+000000448],(float)15
mov [ecx+00000094],(float)1750

originalcode:
movss xmm0,[ecx+00000094]

exit:
jmp returnhere

"ACM.exe"+9F043C:
jmp newmem
nop
nop
nop
returnhere:



[DISABLE]
dealloc(newmem)
"ACM.exe"+9F043C:
movss xmm0,[ecx+00000094]
//Alt: db F3 0F 10 81 94 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>168</ID>
      <Description>"RESTORE ENEMY SiZE"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_RestoreEnemys</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>162</ID>
      <Description>"RESTORE REAL SUPER SPEED"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>Restore_RealSuperSpeed</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>165</ID>
      <Description>"RESTORE RECOiL, SPREAD, RAPiD FiRE"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>enable_RestoreFireModes</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>164</ID>
      <Description>"RESTORE SLOW ENEMYS"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>restore_SlowEnemys</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>126</ID>
      <Description>"SUPER JUMP"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov [esi+00000330],(float)2000
movss xmm0,[esi+000002FC]

exit:
jmp returnhere

"ACM.exe"+538F57:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+538F57:
movss xmm0,[esi+000002FC]
//Alt: db F3 0F 10 86 FC 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>54</ID>
      <Description>"SUPER SPEED"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp dword ptr [esi+a54],(int)255
jne originalcode
mov [esi+00000300],(float)1250

originalcode:
movss xmm0,[esi+00000300]

exit:
jmp returnhere

"ACM.exe"+44AC31:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+44AC31:
movss xmm0,[esi+00000300]
//Alt: db F3 0F 10 86 00 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>59</ID>
      <Description>"SUPER SPEED v2"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+00000344],(float)1


originalcode:
fld dword ptr [ecx+00000344]

exit:
jmp returnhere

"ACM.exe"+D31FD6:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+D31FD6:
fld dword ptr [ecx+00000344]
//Alt: db D9 81 44 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>154</ID>
      <Description>"SUPER SPRiNT"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp [ecx+154],(int)21
jne originalcode
mov dword ptr [ebx+00000CB0],(float)10

originalcode:
movss xmm0,[ebx+00000CB0]

exit:
jmp returnhere

"ACM.exe"+204204:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+204204:
movss xmm0,[ebx+00000CB0]
//Alt: db F3 0F 10 83 B0 0C 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>87</ID>
      <Description>"iNCREASE CLiP CAPACiTY - x10"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [ecx+00000304],(float)10

originalcode:
mulss xmm0,[ecx+00000304]

exit:
jmp returnhere

"ACM.exe"+623AB5:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+623AB5:
mulss xmm0,[ecx+00000304]
//Alt: db F3 0F 59 81 04 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>73</ID>
      <Description>"iNFiNiTE AMMO"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [esi+000002DC],#9999
mov dword ptr [esi+000002B4],#9999

originalcode:
mov eax,[esi+000002DC]

exit:
jmp returnhere

"ACM.exe"+95B799:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+95B799:
mov eax,[esi+000002DC]
//Alt: db 8B 86 DC 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>79</ID>
      <Description>"iNFiNiTE AMMO - SECONDARY"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+000002e0],#10
mov dword ptr [ecx+000002bc],#10

originalcode:
mov eax,[ecx+000002E0]

exit:
jmp returnhere

"ACM.exe"+1E202A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+1E202A:
mov eax,[ecx+000002E0]
//Alt: db 8B 81 E0 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>68</ID>
      <Description>"iNFiNiTE AMMO iN CLiP"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+000002B0],#999
mov dword ptr [ecx+000002d8],#999
originalcode:
mov eax,[ecx+000002B0]

exit:
jmp returnhere

"ACM.exe"+81B630:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+81B630:
mov eax,[ecx+000002B0]
//Alt: db 8B 81 B0 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>83</ID>
      <Description>"iNFiNiTE ARMOR"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+00001B38],(float)100

originalcode:
fld dword ptr [ecx+00001B38]

exit:
jmp returnhere

"ACM.exe"+882840:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+882840:
fld dword ptr [ecx+00001B38]
//Alt: db D9 81 38 1B 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"iNFiNiTE HEALTH"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//cmp dword ptr [ecx+30],(int)1
cmp [ecx+154],(int)21
//cmp dword ptr [ecx+bc],(int)1
//cmp dword ptr [ecx+a54],(int)255
//
jne originalcode
mov [ecx+00000370],(float)999

originalcode:
movss xmm0,[ecx+00000370]

exit:
jmp returnhere

"ACM.exe"+316E10:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ACM.exe"+316E10:
movss xmm0,[ecx+00000370]
//Alt: db F3 0F 10 81 70 03 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>s_enable</Name>
      <Address>0F1D010F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>l_enable</Name>
      <Address>0F1D0113</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>u_enable</Name>
      <Address>0F1D0123</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
