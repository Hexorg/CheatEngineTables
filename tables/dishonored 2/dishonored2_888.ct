<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Unlimited Health"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedHealth, Dishonored2.exe, 48895C240848896C2410488974241848897C242041564883EC204989D64889CE4C854110 )
registersymbol( UnlimitedHealth )
label( UnlimitedHealth_o )
registersymbol( UnlimitedHealth_o )
alloc( UnlimitedHealthHook, 256, Dishonored2.exe )
label( UpdateHealth )
label( back )

UnlimitedHealthHook:
mov rax,[Dishonored2.exe+255DB68]
mov rax,[rax+0030EF38]
cmp [rbx+10],rax
jne short UnlimitedHealth_o
  mov rax,[rbx+8]		// get pointer to Base Health
  movss xmm0,[rax+68]	// retrieve Base Health
  mov r9,[rbx+68]       // process Health Upgrades as well
  test r9,r9
  je short UpdateHealth
    movsxd rax,dword ptr [rbx+B0]
	cmp eax,-1
	jle short @f
	  lea r8,[rax+rax*4]
	  mov rax,[r9+48]
	  movss xmm1,[rax+r8*8+24]
	  addss xmm0,xmm1
	  jmp short UpdateHealth
	@@:
	xorps xmm1,xmm1
	addss xmm0,xmm1
  UpdateHealth:
  movss [rbx+20],xmm0	// write Max Health to Current Health, to refresh it
  mov al,1              // set BOOL flag to 1 so no damage is subtracted
  ret
UnlimitedHealth_o:
readmem( UnlimitedHealth, 5 )
jmp back

UnlimitedHealth:
jmp UnlimitedHealthHook
back:

[DISABLE]

UnlimitedHealth:
readmem( UnlimitedHealth_o, 5 )

dealloc( UnlimitedHealthHook )
unregistersymbol( UnlimitedHealth_o )
unregistersymbol( UnlimitedHealth )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Unlimited Mana"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedMana, Dishonored2.exe, 534883EC60F64130010F29742450 )
registersymbol( UnlimitedMana )
label( UnlimitedMana_o )
registersymbol( UnlimitedMana_o )
alloc( UnlimitedManaHook, 256, Dishonored2.exe )
label( back )

UnlimitedManaHook:
xor r8d,r8d
mov r8,[Dishonored2.exe+255DB68]
mov r8,[r8+0030EF38]
cmp [rcx+10],r8
jne short UnlimitedMana_o
  mov r8,[rcx+8]		   // get pointer to Max Mana
  movss xmm0,[r8+68]	   // retrieve Max Mana
  movss [rcx+20],xmm0	   // write it to Current Mana, to refresh it
  mov byte ptr [rcx+30],1  // set BOOL in Mana Subsystem so it never depletes on use, just to be safe
  ret
UnlimitedMana_o:
readmem( UnlimitedMana, 5 )
jmp back

UnlimitedMana:
jmp UnlimitedManaHook
back:

[DISABLE]

UnlimitedMana:
readmem( UnlimitedMana_o, 5 )

dealloc( UnlimitedManaHook )
unregistersymbol( UnlimitedMana_o )
unregistersymbol( UnlimitedMana )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Unlimited Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( UpdateAmmo_AOB, Dishonored2.exe, 4189F889C24889D9E8????????EB0289F0488B5C2478488BB42480000000 )
label( UpdateAmmo )
registersymbol( UpdateAmmo )
label( UpdateAmmo_o )
registersymbol( UpdateAmmo_o )
alloc( AmmoHook, 256, Dishonored2.exe )
label( back )

AmmoHook:
mov r9,[Dishonored2.exe+255DB68]
mov r9,[r9+0030EF38]
cmp [rcx+10],r9
jne short UpdateAmmo_o
  mov r8d,[rbx+A4]      // get Max Clip
  mov [rbx+A0],r8d      // update Current Clip
  xor r8d,r8d			// setting parameter to 0 for function that updates inventory amount
UpdateAmmo_o:
readmem( UpdateAmmo_AOB-6F, 8 )
jmp back

UpdateAmmo_AOB-6F:
UpdateAmmo:
jmp AmmoHook
db 90 90 90
back:

[DISABLE]

UpdateAmmo:
readmem( UpdateAmmo_o, 8 )

dealloc( AmmoHook )
unregistersymbol( UpdateAmmo_o )
unregistersymbol( UpdateAmmo )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"No Damage / Refresh Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( IsHealthComponentDamageable, Dishonored2.exe, 48895C240848896C2410488974241848897C242041564883EC204989D64889CE4C854110 )
registersymbol( IsHealthComponentDamageable )
label( IsHealthComponentDamageable_o )
registersymbol( IsHealthComponentDamageable_o )
alloc( IsHealthComponentDamageableHook, 256, Dishonored2.exe )
label( back )

IsHealthComponentDamageableHook:
push r8
push rcx
mov r8,[Dishonored2.exe+2556A50]
test [r8+001F7330],FFFFFF
jle @f
  mov ecx,[r8+001F7330]
  mov rax,[r8+001F7328]
  and ecx,00FFFFFF
  dec ecx
  movsxd rcx,dword ptr [rax+rcx*4]
  mov rax,[r8+rcx*8+001F6EA8]
  test rax,rax
  je @f
    cmp qword ptr [rax+20],0
	je @f
      mov rcx,[rax+60]			// get pointer to the structure where Health and Mana Subsystems addresses are located
								// check +0x70 as well, what/where it leads to
	  test rcx,rcx
	  je @f
        cmp [rcx+38],rbx		// is our player's Health Subsystem?
        jne @f
		  mov rcx,[rbx+8]		// get pointer to Max Health
		  movss xmm0,[rcx+68]	// retrieve Max Health
		  movss [rbx+20],xmm0	// write it to Current Health, to refresh it
	      mov al,1
		  pop rcx
		  pop r8
		  ret
@@:
pop rcx
pop r8
IsHealthComponentDamageable_o:
readmem( IsHealthComponentDamageable, 5 )
jmp back

IsHealthComponentDamageable:
jmp IsHealthComponentDamageableHook
back:

[DISABLE]

IsHealthComponentDamageable:
readmem( IsHealthComponentDamageable_o, 5 )

dealloc( IsHealthComponentDamageableHook )
unregistersymbol( IsHealthComponentDamageable_o )
unregistersymbol( IsHealthComponentDamageable )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Money (must be in Black Market screen to populate)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>Dishonored2.exe+2556A50</Address>
          <Offsets>
            <Offset>16C</Offset>
            <Offset>68</Offset>
            <Offset>5B8</Offset>
            <Offset>1F6EF8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Cost (must be in Black Market screen to populate)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>Dishonored2.exe+2556A50</Address>
          <Offsets>
            <Offset>170</Offset>
            <Offset>68</Offset>
            <Offset>5B8</Offset>
            <Offset>1F6EF8</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>IsHealthComponentDamageable</Name>
      <Address> 14499E970</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>IsHealthComponentDamageable_o</Name>
      <Address>13FFF0059</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedMana</Name>
      <Address> 1449D5500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedMana_o</Name>
      <Address>13FFE002B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UpdateAmmo</Name>
      <Address>14486D860</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UpdateAmmo_o</Name>
      <Address>13FFD0025</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedHealth</Name>
      <Address> 144811E80</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedHealth_o</Name>
      <Address>14A400059</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
