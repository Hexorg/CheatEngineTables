<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Undead (press Enter to refill HP)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(originalcode1)
label(exit1)
globalalloc(pHeroHealth,4)
aobscan(hHRead_AOB,8B 4B 48 89 4C 24 14 85 C9)
label(hHReadJMP)
registersymbol(hHReadJMP)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)
aobscan(hHSubA_AOB,03 CE 89 4F 48 ** ** 89 5F 48 B1 40)
label(hHSubAJMP)
registersymbol(hHSubAJMP)
alloc(newmem3,2048) //2kb should be enough
label(returnhere3)
label(originalcode3)
label(exit3)
aobscan(hHSubB_AOB,8B 47 4C 03 CE 83 F8 01 89 4F 48)
label(hHSubBJMP)
registersymbol(hHSubBJMP)
alloc(newmem4,2048) //2kb should be enough
label(returnhere4)
label(originalcode4)
label(exit4)
aobscan(hHSubC_AOB,8B C6 F7 D8 3B C8)
label(hHSubCJMP)
registersymbol(hHSubCJMP)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHeroHealth],ebx
pushad
push 0D      //key Enter
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode1
mov ecx,[ebx+4C]
mov [ebx+48],ecx

originalcode1:
mov ecx,[ebx+48]
mov [esp+14],ecx

exit1:
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
add ecx,esi
cmp [pHeroHealth],edi
jne originalcode2
cmp ecx,(int)1
jge originalcode2
mov ecx,(int)1
mov esi,0
//mov ecx,[edi+4C]

originalcode2:
//add ecx,esi
mov [edi+48],ecx

exit2:
jmp returnhere2

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[edi+4C]
add ecx,esi
cmp [pHeroHealth],edi
jne originalcode3
cmp ecx,(int)1
jge originalcode3
mov ecx,(int)1
mov esi,0

originalcode3:
//mov eax,[edi+4C]
//add ecx,esi

exit3:
jmp returnhere3

newmem4: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHeroHealth],edi
jne originalcode4
mov ebx,(int)1

originalcode4:
mov eax,esi
neg eax
cmp ecx,eax

exit4:
jmp returnhere4

hHRead_AOB:                     //"Reckoning.exe"+3A18E5:
hHReadJMP:
jmp newmem1
nop
nop
returnhere1:

hHSubA_AOB:                     //"Reckoning.exe"+3A1059:
hHSubAJMP:
jmp newmem2
returnhere2:

hHSubB_AOB:                     //"Reckoning.exe"+3A0FC9:
hHSubBJMP:
jmp newmem3
returnhere3:

hHSubC_AOB:                     //"Reckoning.exe"+3A1051:
hHSubCJMP:
jmp newmem4
nop
returnhere4:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
dealloc(newmem2)
dealloc(newmem3)
dealloc(newmem4)
hHReadJMP:                    //"Reckoning.exe"+3A18E5:
db 8B 4B 48 89 4C 24 14
//Alt: mov ecx,[ebx+48]
//Alt: mov [esp+14],ecx
dealloc(pHeroHealth)
unregistersymbol(hHReadJMP)
hHSubAJMP:                    //"Reckoning.exe"+3A1059:
db 03 CE 89 4F 48
//Alt: add ecx,esi
//Alt: mov [edi+48],ecx
unregistersymbol(hHSubAJMP)
hHSubBJMP:                    //"Reckoning.exe"+3A0FC9:
db 8B 47 4C 03 CE
//Alt: mov eax,[edi+4C]
//Alt: add ecx,esi
unregistersymbol(hHSubBJMP)
hHSubCJMP:                    //"Reckoning.exe"+3A1051:
db 8B C6 F7 D8 3B C8
//Alt: mov eax,esi
//Alt: neg eax
//Alt: cmp ecx,eax
unregistersymbol(hHSubCJMP)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>33</ID>
          <Description>"100% Evasion Rate when not blocking (press Decimal to set HP to 1)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem5,2048) //2kb should be enough
label(returnhere5)
label(checkRefill5)
label(checkSetNearDeath5)
label(originalcode5)
label(exit5)
aobscan(allHealthRead_AOB,8B CF 6B C0 64 33 D2 F7 F1 5F 5E 83 C4 08 C2 04 00)
label(allHealthReadJMP)
registersymbol(allHealthReadJMP)

newmem5: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHeroHealth],eax
jne originalcode5

mov dword ptr [eax+BC],#100

pushad
push A0      //key LShift
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne checkRefill5
mov dword ptr [eax+BC],#0

checkRefill5:
pushad
push 0D      //key Enter
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne checkSetNearDeath5
push ebx
mov ebx,[eax+4C]
mov [eax+48],ebx
pop ebx
jmp originalcode5

checkSetNearDeath5:
pushad
push 6E      //key Decimal
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode5
mov dword ptr [eax+48],#1

originalcode5:
cmp ecx,01
mov eax,[eax+48]

exit5:
jmp returnhere5

allHealthRead_AOB-8:                     //"Reckoning.exe"+3B302A:
allHealthReadJMP:
jmp newmem5
nop
returnhere5:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem5)
allHealthReadJMP:                        //"Reckoning.exe"+3B302A:
db 83 F9 01 8B 40 48
//Alt: cmp ecx,01
//Alt: mov eax,[eax+48]
unregistersymbol(allHealthReadJMP)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pHeroHealth</Address>
          <Offsets>
            <Offset>48</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
