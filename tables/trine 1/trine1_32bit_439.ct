<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Unlimited Health"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : trine1_32bit.exe
  Version: 2.12 (Build 510)
  Date   : 2016-02-09
}
[ENABLE]
aobscanmodule(addhealth,trine1_32bit.exe,8B 96 60 01 00 00 03)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [esi+00000160],(Int)200
  mov edx,[esi+00000160]
  jmp return

addhealth:
  jmp code
  nop
return:
registersymbol(addhealth)

[DISABLE]
addhealth:
  db 8B 96 60 01 00 00

unregistersymbol(addhealth)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "trine1_32bit.exe"+5866B

"trine1_32bit.exe"+5864F: CC                    -  int 3 
"trine1_32bit.exe"+58650: 55                    -  push ebp
"trine1_32bit.exe"+58651: 8B EC                 -  mov ebp,esp
"trine1_32bit.exe"+58653: 56                    -  push esi
"trine1_32bit.exe"+58654: 8B F1                 -  mov esi,ecx
"trine1_32bit.exe"+58656: 80 BE 84 01 00 00 00  -  cmp byte ptr [esi+00000184],00
"trine1_32bit.exe"+5865D: 75 30                 -  jne trine1_32bit.exe+5868F
"trine1_32bit.exe"+5865F: 83 BE F8 01 00 00 00  -  cmp dword ptr [esi+000001F8],00
"trine1_32bit.exe"+58666: 7F 27                 -  jg trine1_32bit.exe+5868F
"trine1_32bit.exe"+58668: 8B 45 08              -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
"trine1_32bit.exe"+5866B: 8B 96 60 01 00 00     -  mov edx,[esi+00000160]
// ---------- DONE INJECTING  ----------
"trine1_32bit.exe"+58671: 03 50 0C              -  add edx,[eax+0C]
"trine1_32bit.exe"+58674: 85 D2                 -  test edx,edx
"trine1_32bit.exe"+58676: 7F 17                 -  jg trine1_32bit.exe+5868F
"trine1_32bit.exe"+58678: E8 23 00 00 00        -  call trine1_32bit.exe+586A0
"trine1_32bit.exe"+5867D: 84 C0                 -  test al,al
"trine1_32bit.exe"+5867F: 74 07                 -  je trine1_32bit.exe+58688
"trine1_32bit.exe"+58681: B0 01                 -  mov al,01
"trine1_32bit.exe"+58683: 5E                    -  pop esi
"trine1_32bit.exe"+58684: 5D                    -  pop ebp
"trine1_32bit.exe"+58685: C2 04 00              -  ret 0004
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Unlimited Mana"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : trine1_32bit.exe
  Version: 2.12 (Build 510)
  Date   : 2016-02-09
}
[ENABLE]
aobscanmodule(addmana,trine1_32bit.exe,8B 86 F0 00 00 00 03)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [esi+000000F0],(Int)200
  mov eax,[esi+000000F0]
  jmp return

addmana:
  jmp code
  nop
return:
registersymbol(addmana)

[DISABLE]
addmana:
  db 8B 86 F0 00 00 00

unregistersymbol(addmana)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "trine1_32bit.exe"+59E49

"trine1_32bit.exe"+59E32: 03 C2                 -  add eax,edx
"trine1_32bit.exe"+59E34: 50                    -  push eax
"trine1_32bit.exe"+59E35: E8 26 59 54 00        -  call trine1_32bit.exe+59F760
"trine1_32bit.exe"+59E3A: 6A 00                 -  push 00
"trine1_32bit.exe"+59E3C: 8B CE                 -  mov ecx,esi
"trine1_32bit.exe"+59E3E: E8 4D C4 15 01        -  call trine1_32bit.exe+11B6290
"trine1_32bit.exe"+59E43: 5F                    -  pop edi
"trine1_32bit.exe"+59E44: 5E                    -  pop esi
"trine1_32bit.exe"+59E45: 5D                    -  pop ebp
"trine1_32bit.exe"+59E46: C2 04 00              -  ret 0004
// ---------- INJECTING HERE ----------
"trine1_32bit.exe"+59E49: 8B 86 F0 00 00 00     -  mov eax,[esi+000000F0]
// ---------- DONE INJECTING  ----------
"trine1_32bit.exe"+59E4F: 03 C2                 -  add eax,edx
"trine1_32bit.exe"+59E51: 50                    -  push eax
"trine1_32bit.exe"+59E52: 8B CE                 -  mov ecx,esi
"trine1_32bit.exe"+59E54: E8 37 C4 15 01        -  call trine1_32bit.exe+11B6290
"trine1_32bit.exe"+59E59: 5F                    -  pop edi
"trine1_32bit.exe"+59E5A: 5E                    -  pop esi
"trine1_32bit.exe"+59E5B: 5D                    -  pop ebp
"trine1_32bit.exe"+59E5C: C2 04 00              -  ret 0004
"trine1_32bit.exe"+59E5F: CC                    -  int 3 
"trine1_32bit.exe"+59E60: 56                    -  push esi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Unlimited Breath"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : trine1_32bit.exe
  Version: 2.12 (Build 510)
  Date   : 2016-02-09
}
[ENABLE]
aobscanmodule(breath,trine1_32bit.exe,2B 88 1C 01 00 00)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //sub ecx,[eax+0000011C]
  jmp return

breath:
  jmp code
  nop
return:
registersymbol(breath)

[DISABLE]
breath:
  db 2B 88 1C 01 00 00

unregistersymbol(breath)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "trine1_32bit.exe"+1266E2E

"trine1_32bit.exe"+1266E0F: CC                             -  int 3 
"trine1_32bit.exe"+1266E10: 8B D1                          -  mov edx,ecx
"trine1_32bit.exe"+1266E12: 8B 82 D8 00 00 00              -  mov eax,[edx+000000D8]
"trine1_32bit.exe"+1266E18: 85 C0                          -  test eax,eax
"trine1_32bit.exe"+1266E1A: 75 03                          -  jne trine1_32bit.exe+1266E1F
"trine1_32bit.exe"+1266E1C: 32 C0                          -  xor al,al
"trine1_32bit.exe"+1266E1E: C3                             -  ret 
"trine1_32bit.exe"+1266E1F: 80 B8 20 01 00 00 00           -  cmp byte ptr [eax+00000120],00
"trine1_32bit.exe"+1266E26: 8B 88 0C 01 00 00              -  mov ecx,[eax+0000010C]
"trine1_32bit.exe"+1266E2C: 75 0E                          -  jne trine1_32bit.exe+1266E3C
// ---------- INJECTING HERE ----------
"trine1_32bit.exe"+1266E2E: 2B 88 1C 01 00 00              -  sub ecx,[eax+0000011C]
// ---------- DONE INJECTING  ----------
"trine1_32bit.exe"+1266E34: B8 00 00 00 00                 -  mov eax,00000000
"trine1_32bit.exe"+1266E39: 0F 48 C8                       -  cmovs ecx,eax
"trine1_32bit.exe"+1266E3C: 8B 02                          -  mov eax,[edx]
"trine1_32bit.exe"+1266E3E: 66 0F 6E C1                    -  movd xmm0,ecx
"trine1_32bit.exe"+1266E42: 8B 80 E0 01 00 00              -  mov eax,[eax+000001E0]
"trine1_32bit.exe"+1266E48: 6A 00                          -  push 00
"trine1_32bit.exe"+1266E4A: 0F 5B C0                       -  cvtdq2ps xmm0,xmm0
"trine1_32bit.exe"+1266E4D: 6A 00                          -  push 00
"trine1_32bit.exe"+1266E4F: 51                             -  push ecx
"trine1_32bit.exe"+1266E50: 8B CA                          -  mov ecx,edx
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>addbreathing</Name>
      <Address>01617F88</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>breatheunder</Name>
      <Address>01BF9782</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>testingfour</Name>
      <Address>014A7F88</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>addmana</Name>
      <Address>01179E49</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>addhealth</Name>
      <Address>0117866B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>underwater</Name>
      <Address>022DD396</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
