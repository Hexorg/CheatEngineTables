<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"[X] &lt;== Hearts of Iron IV v1.0.0.19987 Steam Script v2.1"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Hearts of Iron IV
 Game Version  : 1.0.0.19987-8899
 Game Sponsor  : TheSaviour
 Process Name  : hoit4.exe
 Relevant Info : 32bits/RTS/New Engine
 Script Version: 2.0
 CE Version    : 6.5
 Release date  : 12-Jun-2016
 Author        : Recifense
 History:
 09-Jun-16: First Release
 12-Jun-16: More features (GM ships/MP/Natural Resources)(s2.0)
 Features:
 - Minimum Political Points (650)
 - Minimum Natural Resources (250)
 - Construction in 1 day
 - Research in 1 day
 - Production in 1 day
 - Move to adjacent region in 1 hour
 - God Mode (Army/Fleet)
 - Minimum Manpower per State (6500)
 - Some Pointers
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "hoi4.exe") then
    ShowMessage('Error. Expected Process = hoi4.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"hoi4.exe")
define(MOHP,hoi4.exe+0040325e)
define(MOCP,hoi4.exe+002328cb)
define(MORP,hoi4.exe+001ad8c7)
define(MOPP,hoi4.exe+00234d12)
define(MPP1,hoi4.exe+002351a2)
define(MOAM,hoi4.exe+0031930c)
define(MAM1,hoi4.exe+003191ac)
define(MOSA,hoi4.exe+0041c7c8)
define(GDMD,hoi4.exe+001b87f0)
define(GMDS,hoi4.exe+001cd9ff)
define(MOMR,hoi4.exe+0028662c)
define(MOMM,hoi4.exe+0020b055)
define(MMM1,hoi4.exe+0020b07a)

define(MOSF,hoi4.exe+0019ea03)
define(MOSR,hoi4.exe+0047276d)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE65,(float)6.5)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOHP,8b 87 78 04 00 00 8b 90 9c 00 00 00 89 55 f0 89 75 c8 89 5d c4)
assert(MOCP,01 5f 28 83 7f 38 00 c7 45 f8 00 00 00 00 ?? ?? 57 e8 ?? ?? ?? ??)
assert(MORP,01 8e cc 00 00 00 8b 4d fc ?? ?? 8b 47 10 05 e8 03 00 00 89 45 ec)
assert(MOPP,01 43 28 8b 53 48 8b b2 28 01 00 00 8b 43 28 85 f6 ?? ?? 83 c9 ff)
assert(MPP1,01 46 28 8b 56 48 8b ba 28 01 00 00 8b 46 28 85 ff ?? ?? 83 c9 ff)
assert(MOAM,39 b3 f0 00 00 00 0f 8c ?? ?? ?? ?? 8b 45 d8 39 43 7c ?? ?? 80 3d)
assert(MAM1,39 83 f0 00 00 00 ?? ?? 89 83 f0 00 00 00 80 3d ?? ?? ?? ?? 00 0f)
assert(GDMD,55 8b ec 8b 45 08 01 81 f8 01 00 00 8b 55 0c 01 91 fc 01 00 00 29)
assert(GMDS,8b 86 5c 02 00 00 39 86 58 02 00 00 ?? ?? 89 86 58 02 00 00 2b 5d)
assert(MOMR,8b 76 20 8d 14 c0 8b 45 08 8b 48 3c 01 74 91 20 8d 44 91 20 47 83)
assert(MOMM,03 b3 74 01 00 00 8b 58 04 03 bb 74 01 00 00 83 c0 08 49 ?? ?? 8b)
assert(MMM1,8b 98 74 01 00 00 8d 04 3e 5f 5e 03 c3 5b 8b e5 5d c3 cc cc cc cc)

assert(MOSF,8b 90 c0 00 00 00 8b 46 04 8b 7a 68 8d 4d f8 89 7d f8 3b c8 ?? ??)
assert(MOSR,8b 88 d8 00 00 00 2b 88 d4 00 00 00 05 d4 00 00 00 c1 f9 02 33 f6)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_BackMHP)
label(_ExitMHP)
label(_MonConstProg)
label(_BackMCP)
label(_ExitMCP)
label(_MonResearchProg)
label(_BackMRP)
label(_ExitMRP)
label(_MonProdProg)
label(_BackMPP)
label(_ExitMPP)
label(_MonProdProg1)
label(_BackPP1)
label(_ExitPP1)
label(_MonArmyFleetMove)
label(_BackMAM)
label(_ExitMAM)
label(_MonArmyFleetMove1)
label(_BackAM1)
label(_ExitAM1)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)
label(_MonMinResource)
label(_BackMMR)
label(_ExitMMR)
label(_MonMinMP)
label(_BackMMM)
label(_ExitMMM)
label(_MonMinMP1)
label(_BackMM1)
label(_ExitMM1)

label(_MonSelArmyFleet)
label(_BackMSF)
label(_ExitMSF)
label(_MonSelRegion)
label(_BackMSR)
label(_ExitMSR)

label(iEnableMPP)
label(iEnableMMR)
label(iEnableMCP)
label(iEnableMRP)
label(iEnablePNP)
label(iEnableMAM)
label(iEnableGMD)
label(iEnableMMM)

label(pPlayer)
label(pPlayer1)
label(pPlayer2)
label(pArmyFleet)
label(pRegion)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPP)
registersymbol(iEnableMMR)
registersymbol(iEnableMCP)
registersymbol(iEnableMRP)
registersymbol(iEnablePNP)
registersymbol(iEnableMAM)
registersymbol(iEnableGMD)
registersymbol(iEnableMMM)
registersymbol(pPlayer)
registersymbol(pPlayer1)
registersymbol(pPlayer2)
registersymbol(pArmyFleet)
registersymbol(pRegion)

//=========================================
MyCode:
//=========================================
// - Find out the Human Player
// - Minimum Political Points
_MonHumanPlayer:
 push edx

 mov [pPlayer],edi
 mov eax,[edi+00000464]
 mov [pPlayer1],eax
 mov eax,[edi+00000460]
 mov [pPlayer2],eax

 cmp dword ptr [iEnableMPP],0
 je _MonHP00                       // Jump if feature is disabled

 mov eax,#650000
 mov edx,[edi+00000478]
 cmp eax,[edx+0000009c]
 js _MonHP00

 mov [edx+0000009c],eax

_MonHP00:
_ExitMHP:
 pop edx

 mov eax,[edi+00000478]            // Original code (get pPP)
 jmp _BackMHP                      // Back to main code

//=========================================
// - Construction Progress (when day changes)
_MonConstProg:
 push eax

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov eax,[edi+1c]
 cmp eax,[pPlayer1]
 jne _ExitMCP

 mov eax,[edi+20]
 cmp eax,[edi+28]
 js _ExitMCP

 mov [edi+28],eax

_ExitMCP:
 pop eax

 add [edi+28],ebx                  // Original code (upd prog)
 cmp dword ptr [edi+38],00         // Original code
 jmp _BackMCP                      // Back to main code

//=========================================
// - Research Progress (when day changes)
_MonResearchProg:
 push eax

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov eax,[esi+000000b0]
 cmp eax,[pPlayer2]
 jne _ExitMRP

 mov eax,[esi+000000b4]
 test eax,eax
 jz _ExitMRP

 mov eax,[eax+000001e4]
 add eax,eax
 imul eax,eax,64
 test eax,eax
 js _ExitMRP

 cmp eax,[esi+000000CC]
 js _ExitMRP

 mov [esi+000000cc],eax

_ExitMRP:
 pop eax

 add [esi+000000CC],ecx            // Original code (upd prog)
 jmp _BackMRP                      // Back to main code

//=========================================
// - Production Progress (airplanes, weapons, etc) (when day changes)
_MonProdProg:
 cmp dword ptr [iEnablePNP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov edx,[ebx+1c]
 cmp edx,[pPlayer1]
 jne _ExitMPP

 mov edx,[ebx+20]
 add edx,edx
 cmp edx,[ebx+28]
 js _ExitMPP

 mov [ebx+28],edx

_ExitMPP:
 add [ebx+28],eax                  // Original code (upd prog)
 mov edx,[ebx+48]                  // Original code
 jmp _BackMPP                      // Back to main code

//=========================================
// - Production Progress (ship) (when day changes)
_MonProdProg1:
 cmp dword ptr [iEnablePNP],0
 je _ExitPP1                       // Jump if feature is disabled

 mov edx,[esi+1c]
 cmp edx,[pPlayer1]
 jne _ExitPP1

 mov edx,[esi+20]
 add edx,edx
 cmp edx,[esi+28]
 js _ExitPP1

 mov [esi+28],edx

_ExitPP1:
 add [esi+28],eax                  // Original code (upd prog)
 mov edx,[esi+48]                  // Original code
 jmp _BackPP1                      // Back to main code

//=========================================
// - Movement in 1 hour (When Army/Fleet is moving)
_MonArmyFleetMove:
 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 call _ChkThisArmyFleet
 jnz _ExitMAM

 cmp esi,[ebx+000000F0]
 js _ExitMAM

 mov [ebx+000000F0],esi

_ExitMAM:
 cmp [ebx+000000F0],esi            // Original code (chk Move)
 jmp _BackMAM                      // Back to main code

//=========================================
// - Movement in 1 hour (When Army/Fleet is moving during battle)
_MonArmyFleetMove1:
 cmp dword ptr [iEnableMAM],0
 je _ExitAM1                       // Jump if feature is disabled

 call _ChkThisArmyFleet
 jnz _ExitAM1

 cmp eax,[ebx+000000F0]
 js _ExitAM1

 mov [ebx+000000F0],eax

_ExitAM1:
 cmp [ebx+000000F0],eax            // Original code (chk Move)
 jmp _BackAM1                      // Back to main code

//=========================================
// - When in battle (army)
_GodMode:
 push ebp                          // Original code
 mov ebp,esp                       // Original code

 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ebx,ecx
 call _ChkThisArmyFleet
 jnz _ExitGMD

 mov ebx,[ecx+64]
 test ebx,ebx
 jz _ExitGMD

 mov eax,[ebx+000001a0]
 mov [ecx+000001ec],eax

 mov eax,[ebx+000001a4]
 mov [ecx+000001e8],eax

 xor eax,eax
 mov [ebp+08],eax
 mov [ebp+0c],eax

_ExitGMD:
 pop ebx

 mov eax,[ebp+08]                  // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
// - When in battle (ships)
_GodModeS:
 cmp dword ptr [iEnableGMD],0
 je _ExitGMS                       // Jump if feature is disabled

 push ebx
 mov ebx,[esi+0000027c]
 call _ChkThisArmyFleet
 pop ebx
 jnz _ExitGMS

 mov eax,[esi+000001f8]
 mov [esi+00000254],eax

 mov ebx,[esi+000001fc]
 mov [esi+00000250],ebx

 xor eax,eax
 mov [ebp+08],eax
 mov [ebp+0c],eax

_ExitGMS:
 mov eax,[esi+0000025C]            // Original code (get maxXP)
 jmp _BackGMS                      // Back to main code

//=========================================
// - As time changes
_MonMinResource:
 cmp dword ptr [iEnableMMR],0
 je _ExitMMR                       // Jump if feature is disabled

 mov edx,[ebp+08]
 mov edx,[edx+30]

 push edx
 call _ChkThisProvince
 jnz _ExitMMR

 mov edx,#250000
 cmp edx,[esi+20]
 js _ExitMMR

 mov [esi+20],edx

_ExitMMR:
 mov esi,[esi+20]                  // Original code (get resource)
 lea edx,[eax+eax*8]               // Original code
 jmp _BackMMR                      // Back to main code

//=========================================
// - All the time
_MonMinMP:
 push ecx
 push edx

 cmp dword ptr [iEnableMMM],0
 je _ExitMMM                       // Jump if feature is disabled

 mov ecx,[ebp-18]
 cmp ecx,[pPlayer]
 jne _ExitMMM

 mov ecx,#6500
 cmp ecx,[ebx+00000174]
 js _MonMM00

 mov [ebx+00000174],ecx

_MonMM00:
 mov edx,[eax+04]

 cmp ecx,[edx+00000174]
 js _ExitMMM

 mov [edx+00000174],ecx

_ExitMMM:
 pop edx
 pop ecx

 add esi,[ebx+00000174]            // Original code
 jmp _BackMMM                      // Back to main code

//=========================================
// - All the time
_MonMinMP1:
 cmp dword ptr [iEnableMMM],0
 je _ExitMM1                       // Jump if feature is disabled

 mov ebx,[ebp-18]
 cmp ebx,[pPlayer]
 jne _ExitMM1

 mov ebx,#6500
 cmp ebx,[eax+00000174]
 js _ExitMM1

 mov [eax+00000174],ebx

_ExitMM1:
 mov ebx,[eax+00000174]            // Original code
 jmp _BackMM1                      // Back to main code

//=========================================
// - When Army/Fleet is selected
_MonSelArmyFleet:
 mov [pArmyFleet],eax

_ExitMSF:
 mov edx,[eax+000000C0]            // Original code (get pLocation)
 jmp _BackMSF                      // Back to main code

//=========================================
// - When a Province region is selected
_MonSelRegion:
 mov [pRegion],eax

_ExitMSR:
 mov ecx,[eax+000000D8]            // Original code
 jmp _BackMSR                      // Back to main code

//=========================================
// - Check if an army/fleet belongs to the human player
// Entry : EBX = pArmy/pFleet
// Output: Z ON = found
_ChkThisArmyFleet:
 push eax
 push ecx
 push edx

 mov eax,[pPlayer]
 mov ecx,[eax+000001fc]
 mov edx,[eax+00000200]
 test edx,edx
 jz _ChkTA01

 cmp ecx,edx
 jns _ChkTA01

_ChkTA00:
 cmp ebx,[ecx]
 je _ExitCTA

 add ecx,4
 cmp ecx,edx
 js _ChkTA00

_ChkTA01:
 mov ecx,[eax+000001ec]
 mov edx,[eax+000001f0]
 test edx,edx
 jz _ChkTA03

 cmp ecx,edx
 jns _ChkTA03

_ChkTA02:
 cmp ebx,[ecx]
 je _ExitCTA

 add ecx,4
 cmp ecx,edx
 js _ChkTA02

_ChkTA03:
 mov ecx,1
 test ecx,ecx

_ExitCTA:
 pop edx
 pop ecx
 pop eax
 ret

//=========================================
// - Check if a Province belongs to the human player
// Entry : pProvince
// Output: Z ON = found
_ChkThisProvince:
 push ebx

 mov ebx,[esp+08]

 push eax
 push ecx
 push edx

 mov eax,[pPlayer]
 mov ecx,[eax+0000029c]
 mov edx,[eax+000002a0]
 test edx,edx
 jz _ChkTP01

 cmp ecx,edx
 jns _ChkTP01

_ChkTP00:
 cmp ebx,[ecx]
 je _ExitCTP

 add ecx,4
 cmp ecx,edx
 js _ChkTP00

_ChkTP01:
 mov ecx,1
 test ecx,ecx

_ExitCTP:
 pop edx
 pop ecx
 pop eax
 pop ebx

 ret 0004

//=========================================
 db '==============================&gt;'
 db 'CE6.5 Script by Recifense 061216'
//=========================================
// Variables
iEnableMPP:
 dd 0
iEnableMMR:
 dd 0
iEnableMCP:
 dd 0
iEnableMRP:
 dd 0
iEnablePNP:
 dd 0
iEnableMAM:
 dd 0
iEnableGMD:
 dd 0
iEnableMMM:
 dd 0
pPlayer:
 dd MyCode
pPlayer1:
 dd MyCode
pPlayer2:
 dd MyCode
pArmyFleet:
 dd 0
pRegion:
 dd 0

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
_BackMHP:

MOCP:
 jmp _MonConstProg
 nop
 nop
_BackMCP:

MORP:
 jmp _MonResearchProg
 nop
_BackMRP:

MOPP:
 jmp _MonProdProg
 nop
_BackMPP:

MPP1:
 jmp _MonProdProg1
 nop
_BackPP1:

MOAM:
 jmp _MonArmyFleetMove
 nop
_BackMAM:

MAM1:
 jmp _MonArmyFleetMove1
 nop
_BackAM1:

GDMD:
 jmp _GodMode
 nop
_BackGMD:

GMDS:
 jmp _GodModeS
 nop
_BackGMS:

MOMR:
 jmp _MonMinResource
 nop
_BackMMR:

MOMM:
 jmp _MonMinMP
 nop
_BackMMM:

MMM1:
 jmp _MonMinMP1
 nop
_BackMM1:

MOSF:
 jmp _MonSelArmyFleet
 nop
_BackMSF:

MOSR:
 jmp _MonSelRegion
 nop
_BackMSR:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov eax,[edi+00000478]
 db 8b 87 78 04 00 00

MOCP:
// add [edi+28],ebx
// cmp dword ptr [edi+38],00
 db 01 5f 28 83 7f 38 00

MORP:
// add [esi+000000CC],ecx
 db 01 8e cc 00 00 00

MOPP:
// add [ebx+28],eax
// mov edx,[ebx+48]
 db 01 43 28 8b 53 48

MPP1:
// add [esi+28],eax
// mov edx,[esi+48]
 db 01 46 28 8b 56 48

MOAM:
// cmp [ebx+000000F0],esi
 db 39 b3 f0 00 00 00

MAM1:
// cmp [ebx+000000F0],eax
 db 39 83 f0 00 00 00

GDMD:
// push ebp
// mov ebp,esp
// mov eax,[ebp+08]
 db 55 8b ec 8b 45 08

GMDS:
// mov eax,[esi+0000025C]
 db 8b 86 5c 02 00 00

MOMR:
// mov esi,[esi+20]
// lea edx,[eax+eax*8]
 db 8b 76 20 8d 14 c0

MOMM:
// add esi,[ebx+00000174]
 db 03 b3 74 01 00 00

MMM1:
// mov ebx,[eax+00000174]
 db 8b 98 74 01 00 00

MOSF:
// mov edx,[eax+000000C0]
 db 8b 90 c0 00 00 00

MOSR:
// mov ecx,[eax+000000D8]
 db 8b 88 d8 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnablePNP)
unregistersymbol(iEnableMAM)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMMM)
unregistersymbol(pPlayer)
unregistersymbol(pPlayer1)
unregistersymbol(pPlayer2)
unregistersymbol(pArmyFleet)
unregistersymbol(pRegion)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Minimum Political Power"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(96).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(96).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"[X] &lt;== Minimum Natural Resources"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMR",1)
getAddressList().getMemoryRecordByID(97).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMR",0)
getAddressList().getMemoryRecordByID(97).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== Construction in 1 Day"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(98).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(98).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Research in 1 Day"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
getAddressList().getMemoryRecordByID(99).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
getAddressList().getMemoryRecordByID(99).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Production in 1 Day"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnablePNP",1)
getAddressList().getMemoryRecordByID(100).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnablePNP",0)
getAddressList().getMemoryRecordByID(100).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Movement to adjacent region in 1 Hour"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAM",1)
getAddressList().getMemoryRecordByID(101).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAM",0)
getAddressList().getMemoryRecordByID(101).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"[X] &lt;== God Mode"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(102).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(102).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Minimum Manpower per State"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMM",1)
getAddressList().getMemoryRecordByID(229).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMM",0)
getAddressList().getMemoryRecordByID(229).Color = 0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20160612</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Hearts of Iron IV
 Game Version  : 1.0.0.19987-8899
 Game Sponsor  : TheSaviour
 Process Name  : hoit4.exe
 Relevant Info : 32bits/RTS/New Engine
 Script Version: 2.0
 CE Version    : 6.5
 Release date  : 12-Jun-2016
 Author        : Recifense
 History:
 09-Jun-16: First Release
 12-Jun-16: More features (GM ships/MP/Natural Resources)(s2.0)
 Features:
 - Minimum Political Points (650) [1]
 - Minimum Natural Resources (250)[2]
 - Construction in 1 day          [3]
 - Research in 1 day              [4]
 - Production in 1 day            [5]
 - Move to adjacent region in 1 hour [6]
 - God Mode                       [7]
 - Minimum Manpower per State (6500) [8]
 - Some Pointers                  [9]
===========================================
[1] It will not go under 650;
[2] It will not be lower than 250;
[3] That's it;
[4] That's it;
[5] That's it;
[6] Now every hour counts; :)
[7] HP and Organization (Army and Navy);
[8] It will not go under 6500;
[9] Not used at the table;
===========================================
[USAGE]
1) Run CE65;
2) Run Game;
3) Load the game process "hoi4.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
HOTKEYS:
None pre-defined
===========================================
[IMPORTANT]
Save your game before unsing the cheats.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
