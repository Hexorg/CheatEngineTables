<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Freeze Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
nop

originalcode:
//movss [esi+34],xmm0

exit:
jmp returnhere

aobscan(health,8B 07 8B 50 54 51 8B CF FF D2)
health+a:
jmp newmem
returnhere:

[DISABLE]
aobscan(health,8B 07 8B 50 54 51 8B CF FF D2)
health+a:
movss xmm0,[ebp-04]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Freeze Ammo"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,[esi+04]
xor edx,esi
mov edx,63

originalcode:
//mov edx,[esi+04]
//xor edx,esi
//sub edx,eax

exit:
jmp returnhere

aobscan(ammo,8D 45 08 50 8B CE 89 55 08 E8 85 DB FF FF)
ammo-7:
jmp newmem
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
aobscan(ammo,8D 45 08 50 8B CE 89 55 08 E8 85 DB FF FF)
ammo-7:
mov edx,[esi+04]
xor edx,esi
sub edx,eax
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Infinite Items"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov eax,[ecx+3C]
mov eax,9

originalcode:
//mov eax,[ecx+38]
//add ecx,34
//xor eax,ecx

exit:
jmp returnhere

aobscan(items,CC CC 80 79 40 00 74 04 8B 41 3C C3)
items+C:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
aobscan(items,CC CC 80 79 40 00 74 04 8B 41 3C C3)
items+C:
mov eax,[ecx+38]
add ecx,34
xor eax,ecx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Infinite Focus"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(focus,F3 0F 10 5E 28 0F 2F D9 F3 0F 11 55 FC)
focus-5:
nop
nop
nop
nop
nop

[DISABLE]
aobscan(focus,F3 0F 10 5E 28 0F 2F D9 F3 0F 11 55 FC)
focus-5:
addss xmm1,[esi+0C]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Reduced Bullet Spread"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov eax,[ecx+3C]
mov [esi+00000134],0

originalcode:
//movss [esi+00000134],xmm0

exit:
jmp returnhere

aobscan(spread,74 21 F3 0F 10 86 90 01 00 00)
spread-b:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
aobscan(spread,74 21 F3 0F 10 86 90 01 00 00)
spread-b:
movss [esi+00000134],xmm0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>38</ID>
      <Description>"Semi-Stealth"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
nop

originalcode:
//comiss xmm0,[edx+edi+38]

exit:
jmp returnhere

aobscan(stealth,5B 72 04 B0 01 EB 02 32 C0)
stealth-5:
jmp newmem
returnhere:

[DISABLE]
aobscan(stealth,5B 72 04 B0 01 EB 02 32 C0)
stealth-5:
comiss xmm0,[edx+edi+38]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>39</ID>
      <Description>"Freeze Enemies"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
nop
nop
nop
ret
int 3

originalcode:
//fld dword ptr [ecx+34]

exit:
jmp returnhere

aobscan(stuck,E8 1A 05 E9 FF 83 C4 10 5D C3 CC CC CC CC CC)
stuck+f:
jmp newmem
returnhere:

[DISABLE]
aobscan(stuck,E8 1A 05 E9 FF 83 C4 10 5D C3 CC CC CC CC CC)
stuck+f:
fld dword ptr [ecx+34]
ret
int 3
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>40</ID>
      <Description>"Enemies Won't Shoot"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[edi]
nop
nop
nop

originalcode:
//mov eax,[edi]
//fld dword ptr [ebp+08]

exit:
jmp returnhere

aobscan(peace,8B 50 48 51 8B CF D9 1C 24 FF D2)
peace-5:
jmp newmem
returnhere:

[DISABLE]
aobscan(peace,8B 50 48 51 8B CF D9 1C 24 FF D2)
peace-5:
mov eax,[edi]
fld dword ptr [ebp+08]
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
