<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>15</ID>
      <Description>"In Game Cheats Without Consequence (SunBeam)"</Description>
      <Options moHideChildren="1"/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan( pMenu_AOB,6A00E8????????8B0D????????E8????????E8????????F6 )
label( pMenu )
registersymbol( pMenu )
[pMenu_AOB+9]:
pMenu:

aobscan( DisableDisabler_AOB, B001EBC184C9 )
label( DisableDisabler )
registersymbol( DisableDisabler )
DisableDisabler_AOB:
DisableDisabler:
xor al,al

[DISABLE]

DisableDisabler:
mov al,1

unregistersymbol( DisableDisabler )
unregistersymbol( pMenu )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"[Cheats] (0 - locked; 1 - unlocked)"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>14</ID>
              <Description>"[1] Celestial Navigation"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>FC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"[2] Arrr Matey!"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>12C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"[3] No Quarter"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>15C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"[4] Scourge Of The Seven Seas"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>18C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"[5] Loaded To The Gunwale"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>1BC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"[6] Poseidon's Will"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>1EC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"[7] Dead Men Tell No Tales"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>21C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"[8] Shiver Me Timbers!"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>24C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"[9] Armed To The Teeth"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>27C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"[10] Deceased Crew"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pMenu</Address>
              <Offsets>
                <Offset>2AC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>207</ID>
      <Description>"Flip Switch Godmode (SunBeam)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
alloc(NewGodmode,1024)
aobscan(NewGodmodeAddress, 3b f8 7e 04 80 66 62 f7 5f 5e 5d c2)
registersymbol(NewGodmodeAddress)

NewGodmode:
cmp ecx,-1
jne +4
or byte [esi+62],1
jmp NewGodmodeAddress+8

NewGodmodeAddress+2:
jmp NewGodmode
nop

[disable]

NewGodmodeAddress+2:
db 7e 04 80 66 62 f7
//jle +4
//and byte [esi+62],f7

dealloc(NewGodmode)
unregistersymbol(NewGodmodeAddress)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Infinite Ally Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//Infinite Ally Health
//[Credit To: Unknown at the moment [from an AC3 CT]]
[enable]
alloc(newmem,1024)
aobscan(allyhealth,0F BF 41 5C C3 CC CC CC CC CC CC CC CC CC CC CC 0F BF 41 5E)
label(originalcode)
registersymbol(allyhealth)

newmem:
cmp [ecx+f4],1
je originalcode

mov ax,[ecx+5e]
mov [ecx+5c],ax

originalcode:
movsx eax,word ptr [ecx+5c]
ret

allyhealth:
jmp newmem

[disable]

allyhealth:
db 0f bf 41 5c c3
//movsx eax,word ptr [ecx+5c]
//ret

dealloc(newmem)
unregistersymbol(allyhealth)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"Instant Cooldowns :D (Ship Weaponry)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//Instant Cooldowns :D (Ship Weaponry)
//Steve Andrew
[enable]
aobscan(InstantCooldowns,72 ? 77 ? 3b 4e ? 72 ? 8b 47 ? 50)
registersymbol(InstantCooldowns)

//AC4BFSP.exe+103cdf1:
InstantCooldowns+2:
db eb

[disable]

InstantCooldowns+2:
db 77

unregistersymbol(InstantCooldowns)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Infinite Money, wood, metal, cloth, rum, etc..."</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassin's Creed 4: Black Flag
//Infinite Money, wood, metal, cloth, rum, sugar, etc...
//Steve Andrew
[enable]
alloc(InfiniteMoneyEtc,1024)
aobscan(MoneyEtcAddress,0f 57 c0 0f 29 00 5d c2 04 00 8b 41)
label(SetMoney)
label(SetBombs)
label(SetPistolAmmo)
label(Exit)
registersymbol(InfiniteMoneyEtc)
registersymbol(MoneyEtcAddress)

InfiniteMoneyEtc+200:
readmem(MoneyEtcAddress+0a,5)

InfiniteMoneyEtc:
push ebx
mov ebx,InfiniteMoneyEtc
movzx ebx,byte [ebx+202]
cmp esi,1 //money
je SetMoney
cmp esi,5 //smoke bombs
je SetBombs
cmp esi,b //pistol ammo
je SetPistolAmmo
cmp esi,20
je SetPistolAmmo
cmp esi,29
jb Exit
cmp esi,31
ja Exit
//wood, metal, cloth, rum, sugar, unknown, heavy shot ammo,
//mortar shot ammo, &amp; fire barrels!! :D
mov eax,#9999
mov [ecx+ebx],eax
pop ebx
ret

Exit:
mov eax,[ecx+ebx]
pop ebx
ret

SetMoney:
mov eax,#999999999
mov [ecx+ebx],eax
pop ebx
ret

SetBombs:
mov eax,5
mov [ecx+ebx],eax
pop ebx
ret

SetPistolAmmo:
mov eax,0a //10 bullets is a good number if you didn't have any ;)
mov [ecx+ebx],eax
pop ebx
ret

MoneyEtcAddress+0a:
jmp InfiniteMoneyEtc

[disable]

MoneyEtcAddress+0a:
readmem(InfiniteMoneyEtc+200,5)
//db 8b 41 0c c3 cc
//mov eax,[ecx+0c]
//ret
//int 3

dealloc(InfiniteMoneyEtc)
unregistersymbol(InfiniteMoneyEtc)
unregistersymbol(MoneyEtcAddress)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>187</ID>
      <Description>"Infinite Ammo PRO v1"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//Infinite Ammo Pro! (Gives you ammo if you don't have any)
//Steve Andrew
[enable]
aobscan(AmmoAddress,2b ca 89 48 x b0 01)
registersymbol(AmmoAddress)

//AC4BFSP.exe+c81d31:
AmmoAddress-2:
xor ecx,ecx
mov cl,0a

[disable]

AmmoAddress-2:
db 72 0f 2b ca
//jb +0f
//sub ecx,edx

unregistersymbol(AmmoAddress)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>208</ID>
      <Description>"Infinite Ammo PRO v2"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//Infinite Ammo Pro! (Gives you ammo if you don't have any)
//Steve Andrew
[enable]
aobscan(AmmoAddress,8b 48 x 8b 55 x 3b ca 72) //different aob
registersymbol(AmmoAddress)

//AC4BFSP.exe+c81d31:
AmmoAddress+8:
xor ecx,ecx
mov cl,0a

[disable]

AmmoAddress+8:
db 72 0f 2b ca
//jb +0f
//sub ecx,edx

unregistersymbol(AmmoAddress)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>63</ID>
      <Description>"Unlimited Breath (Daijobu)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Daijobu was here
[ENABLE]
alloc(breath_,256)
label(original)
label(exit)
//------------
label(breath_aob)
registersymbol(breath_aob)
aobscan(aob_breath,8B 41 0C D9 80 80 00 00 00) //"AC4BFSP.exe"+E67553
//------------

breath_:
mov [eax+80],(float)1.0

original:
db D9 80 80 00 00 00
//------------
jmp exit
//------------

aob_breath+3: //"AC4BFSP.exe"+E67556
breath_aob:
jmp breath_
db 90
exit:

//------------

[DISABLE]
dealloc(breath_)
breath_aob:
db D9 80 80 00 00 00
//fld dword ptr [eax+00000080]
unregistersymbol(breath_aob)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"No Reload Proper (Cielos)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(pistolsfiredcheckAOB,8B 48 08 3B CA ** ** 33 C9 89 48 08)
registersymbol(pistolsfiredcheckAOB)
aobscan(pistolammoclipmaxreadAOB,8B 40 0C 5D C2 04 00 33 C0 5D C2 04 00)
registersymbol(pistolammoclipmaxreadAOB)

label(pPistols)
registersymbol(pPistols)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(pistolcheckloop)
label(pistolcheckloopendcheck)
label(islastpistol)
label(reloadallpistolsloop)
label(reloadallpistolsloopendcheck)
label(afterreload)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)
label(checkfirearmchange2)
label(emptyotherpistolspointersloop2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
mov ebx,3
pistolcheckloop:
mov ecx,[pPistols+ebx*4]
test ecx,ecx
jz pistolcheckloopendcheck
cmp eax,ecx
je islastpistol
jmp originalcode

pistolcheckloopendcheck:
test ebx,ebx
jz originalcode
dec ebx
jmp pistolcheckloop

islastpistol:
xor ebx,ebx

reloadallpistolsloop:
mov ecx,[pPistols+ebx*4]
test ecx,ecx
jz afterreload
mov edx,[ecx+10]
mov [ecx+8],edx

reloadallpistolsloopendcheck:
cmp ebx,3
jge afterreload
inc ebx
jmp reloadallpistolsloop

afterreload:
popad
mov ecx,[eax+08]
cmp ecx,edx
jmp pistolsfiredcheckAOB+c

originalcode:
popad
mov ecx,[eax+08]
cmp ecx,edx

exit:
jmp returnhere

///

newmem2:
pushfd
cmp ebx,3
jg checkfirearmchange2
cmp ebx,0
jl checkfirearmchange2
mov [pPistols+ebx*4],eax
je checkfirearmchange2
jmp originalcode2

checkfirearmchange2:
cmp [pPistols],eax
mov [pPistols],eax
je originalcode2

mov ebp,1
emptyotherpistolspointersloop2:
mov [pPistols+ebp*4],0
inc ebp
cmp ebp,4
jl emptyotherpistolspointersloop2
jmp originalcode2

originalcode2:
popfd//
mov eax,[eax+0C]
pop ebp
ret 0004

exit2:
jmp returnhere2

///
pPistols:
dd 0
dd 0
dd 0
dd 0
///

pistolsfiredcheckAOB: //"AC4BFSP.exe"+EE4BE9:
jmp newmem
returnhere:

pistolammoclipmaxreadAOB: //"AC4BFSP.exe"+ED0557:
jmp newmem2
nop
nop
returnhere2:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
pistolsfiredcheckAOB: //"AC4BFSP.exe"+EE4BE9:
db 8B 48 08 3B CA
//Alt: mov ecx,[eax+08]
//Alt: cmp ecx,edx
unregistersymbol(pistolsfiredcheckAOB)
pistolammoclipmaxreadAOB: //"AC4BFSP.exe"+ED0557:
db 8B 40 0C 5D C2 04 00
//Alt: mov eax,[eax+0C]
//Alt: pop ebp
//Alt: ret 0004
unregistersymbol(pistolammoclipmaxreadAOB)

unregistersymbol(pPistols)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"No Reload (Single Pistol but /w rapid 'F' firing)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//No Reload PRO version ;)
//Steve Andrew
[enable]
aobscan(NoReloadAddress,8b 48 08 3b ca 73 ? 33 c9 89 48)
registersymbol(NoReloadAddress)

//AC4BFSP.exe+ee4bee:
NoReloadAddress+5:
db eb 05

[disable]

NoReloadAddress+5:
db 73 5f

unregistersymbol(NoReloadAddress)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"[F2] Stealth Mode PRO (ColdFusion73)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Assassins Creed 4: Black Flag
//Stealth Mode (Pro Version)
//[Credit To: ColdFusion73]
[enable]
aobscan(StealthPRO,e8 ? ? ? ? 84 c0 75 ? 8b 4d ? 38 81 ? ? ? ? 75)
registersymbol(StealthPRO)

//AC4BFSP.exe+1285e74:
StealthPRO+7:
db eb

[disable]

StealthPRO+7:
db 75

unregistersymbol(StealthPRO)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>113</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>109</ID>
      <Description>"On Demand Rope Darts + Throwing Knives (Cielos)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(equippedtoolreadAOB,8B 41 F4 8B 4D 08 89 01)
registersymbol(equippedtoolreadAOB)
aobscan(somereadaltAOB,8B 11 8B 42 50 FF D0 5E 5D C2 04 00)
registersymbol(somereadaltAOB)

label(pEquippedTool)
registersymbol(pEquippedTool)
label(pThrowingDagger)
registersymbol(pThrowingDagger)

label(bZeroThrowingDaggerFlag)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(pressed)
label(endcheck)
label(throwingdaggerequipped)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(exit6)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pEquippedTool],ecx
pushfd
pushad
push 10 //Shift
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov eax,[pThrowingDagger]
test eax,eax
jz pressed
mov [eax+c],1
jmp pressed

pressed:
mov eax,7
jmp endcheck

originalcode:
mov eax,[ecx-0C]
//mov ecx,[ebp+08]

endcheck:
cmp eax,7
je throwingdaggerequipped
cmp [bZeroThrowingDaggerFlag],1
je exit
mov [bZeroThrowingDaggerFlag],1
mov ecx,[pThrowingDagger]
test ecx,ecx
jz exit
mov [ecx+c],0
jmp exit

throwingdaggerequipped:
//cmp [bZeroThrowingDaggerFlag],0
//je exit
mov [bZeroThrowingDaggerFlag],0
/*mov ecx,[pThrowingDagger]
test ecx,ecx
jz exit
mov [ecx+c],1*/
jmp exit

exit:
popfd//
mov ecx,[ebp+08]//
jmp newmem6

///

newmem2:
cmp esi,8
jne originalcode2
mov [pThrowingDagger],ecx

originalcode2:
mov edx,[ecx]
mov eax,[edx+50]

exit2:
jmp returnhere2

///

newmem6:
pushfd
pushad
push 11 //Ctrl
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne exit6
mov eax,4

exit6:
popfd
jmp returnhere

///
pEquippedTool:
dd 0
pThrowingDagger:
dd 0

bZeroThrowingDaggerFlag:
db 0
///

equippedtoolreadAOB: //"AC4BFSP.exe"+E76433:
jmp newmem
nop
returnhere:

somereadaltAOB: //"AC4BFSP.exe"+C6E96F:
jmp newmem2
returnhere2:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
equippedtoolreadAOB: //"AC4BFSP.exe"+E76433:
db 8B 41 F4 8B 4D 08
//Alt: mov eax,[ecx-0C]
//Alt: mov ecx,[ebp+08]
unregistersymbol(equippedtoolreadAOB)
somereadaltAOB: //"AC4BFSP.exe"+C6E96F:
db 8B 11 8B 42 50
//Alt: mov edx,[ecx]
//Alt: mov eax,[edx+50]
unregistersymbol(somereadaltAOB)

unregistersymbol(pEquippedTool)
unregistersymbol(pThrowingDagger)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"[F3] Freeze Countdown Timer (mgr.inz.Player)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Credit To: mgr.inz.Player (Script); GrandPa (Reverse Engineering AC Timers)
[ENABLE]
globalalloc(Countdown,128)
label(returnhere)
label(exit)
//label(timehack)

//aobscan(RetCheck1,D9 5D FC 80 BE FC 00 00 00 00 74 11 )
//aobscan(RetCheck2,D9 5D FC 0F B6 46 66 D9 45 FC 50 51 )
//aobscan(RetCheck3,8D 8E 38 02 00 00 E8 xx xx xx xx 51 D9 1C 24 E8 )
//aobscan(RetCheck4,6A 01 8b ce E8 xx xx xx xx 51 D9 1C 24 E8 )
aobscan(CountdownAOB,8B 41 1C 8B 38 8B 70 04 xx xx xx xx xx 08 )

Countdown:
//cmp [ebp+04],RetCheck1
//je short timehack
//cmp [ebp+04],RetCheck2
//je short timehack
//cmp [ebp+04],RetCheck3+0b
//je short timehack
//cmp [ebp+04],RetCheck4+09
//je short timehack
//jmp short exit

Countdown:
mov [ecx+08],edi
add [ecx+08],B71B0      // always 25 seconds left, (25 * 30000 = 750000 = B71B0 (hex)

exit:
mov eax,[ecx+0C] //original
mov edx,[ecx+08] //original
jmp returnhere

CountdownAOB+08:
jmp Countdown
db 08
returnhere:

[DISABLE]
dealloc(Countdown)
aobscan(CountdownAOB,8B 41 1C 8B 38 8B 70 04 xx xx xx xx xx 08 )
CountdownAOB+08:
mov eax,[ecx+0C]
mov edx,[ecx+08]
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>114</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"[F4] Freeze Stopwatch Timer (mgr.inz.Player)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Credit To: mgr.inz.Player (Script); GrandPa (Reverse Engineering AC Timers)
[ENABLE]
alloc(stopwatch,64)
label(returnhere)
label(exit)
//aobscan(RetCheck, e8 xx xx xx xx 8d 8b 08 01 00 00 e8 xx xx xx xx 51)

aobscan(RetCheck,8B C8 DE C1 25 FF FF FF 7F 89 45 FC)
aobscan(StopwatchAOB, 8B 51 1C 8B 02 8B 52 04 xx xx xx xx xx 89 45 F8 )

stopwatch:
cmp [ebp+4],RetCheck+28
jne short exit
mov [ecx],eax
sub [ecx],38E8C // 7.77 seconds * 30000 = 233100 = 38E8C(hex)

exit:
sub eax,[ecx] //original
sbb edx,[ecx+04] //original
jmp returnhere

StopwatchAOB+8:
jmp stopwatch
returnhere:

[DISABLE]
aobscan(StopwatchAOB, 8B 51 1C 8B 02 8B 52 04 xx xx xx xx xx 89 45 F8 )
StopwatchAOB+8:
sub eax,[ecx]
sbb edx,[ecx+04]
//Alt: db 2B 01 1B 51 04
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>115</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>119</ID>
      <Description>"Map Marker Teleport :D BETA2"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
alloc(MapMarkerTeleportBETA2,1024)
aobscan(MarkerAddress,d9 5e 50 d9 47 14 8d 4e 58 d9 5e 54 8d 50)
aobscan(XYZAddress,0f 28 40 30 0f 29 86 f0 01 00 00 e8)
label(GetPlayerCoordinatesHook)
label(PlayerCoordsPtr)
label(MapMarkerCoordinates)
label(SetForTeleport)
label(NoTeleport)
label(FallSlowlyZ)
label(FallNormally)
registersymbol(MarkerAddress)
registersymbol(XYZAddress)
registersymbol(PlayerCoordsPtr)
registersymbol(MapMarkerCoordinates)

MapMarkerTeleportBETA2: //Map marker set! (right mouse button clicked on map)
fstp dword [esi+50]
fld dword [edi+14]
mov ecx,[esi+50]
mov [MapMarkerCoordinates],ecx
fst [MapMarkerCoordinates+4]
mov ecx,1
mov [SetForTeleport],ecx
jmp MarkerAddress+6

GetPlayerCoordinatesHook:
cmp [SetForTeleport],1
jne NoTeleport
cmp [eax-74],1C000010
jne NoTeleport

push eax
push ecx
lea eax,[eax+30]
mov [PlayerCoordsPtr],eax
mov ecx,[MapMarkerCoordinates]
mov [eax],ecx
mov ecx,[MapMarkerCoordinates+4]
mov [eax+4],ecx
mov [eax+8],(float)10.0 //pretty fairly high
movaps xmm0,[eax]
pop ecx
pop eax
mov [SetForTeleport],0

NoTeleport:
pushad
pushfd
cmp [eax-74],1C000010
jne FallNormally
push 10
call GetAsyncKeyState
test ax,ax
je FallNormally

//push xmm1
sub esp,10
movdqu dqword [esp],xmm1

movups xmm1,[FallSlowlyZ]
addps xmm0,xmm1 //Slow your decent ;)

//pop xmm1
movdqu xmm1,dqword [esp]
add esp,10

FallNormally:
popfd
popad
movaps [esi+1f0],xmm0
jmp XYZAddress+0b

PlayerCoordsPtr:
dd 0
MapMarkerCoordinates:
dq 0
SetForTeleport:
dd 0
FallSlowlyZ:
dq 0
dd (float)0.3
dd 0

//AC4BFSP.exe+12791d0:
MarkerAddress:
jmp MapMarkerTeleportBETA2
nop

//AC4BFSP.exe+e1ab4d:
XYZAddress+4:
jmp GetPlayerCoordinatesHook
db 90 90

[disable]

MarkerAddress:
db d9 5e 50 d9 47 14
//fstp dword [esi+50]
//fld dword [edi+14]

XYZAddress+4:
db 0f 29 86 f0 01 00 00
//movaps [esi+1f0],xmm0

dealloc(MapMarkerTeleportBETA2)
unregistersymbol(MarkerAddress)
unregistersymbol(XYZAddress)
unregistersymbol(PlayerCoordsPtr)
unregistersymbol(MapMarkerCoordinates)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>185</ID>
          <Description>"Map Marker X"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>MapMarkerScreenCoordinates</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>186</ID>
          <Description>"Map Marker Y"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>MapMarkerScreenCoordinates+4</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"Player X"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>PlayerCoordsPtr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>144</ID>
          <Description>"Player Y"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>PlayerCoordsPtr</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>145</ID>
          <Description>"Player Z"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>PlayerCoordsPtr</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>116</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>170</ID>
      <Description>"Swim Fishies' Swim Cheat"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Swim Fishie's Swim Cheat :D lol
[enable]
aobscan(SwimFishies,0f 58 c3 0f 29 40 x c6 86 x x x x 01 5e 5d c2 08 00)
registersymbol(SwimFishies)

//AC4BFSP.ReadData+671a3:
SwimFishies:
db 90 90 90

[disable]

SwimFishies:
db 0f 58 c3
//addps xmm0,xmm3

unregistersymbol(SwimFishies)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>171</ID>
      <Description>"Swim Fishies' Swim Cheat v2"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Swim Fishie's Swim Cheat :D lol
[enable]
alloc(DoubleJump,1024)
aobscan(SwimFishies,0f 58 c3 0f 29 40 x c6 86 x x x x 01 5e 5d c2 08 00)
registersymbol(SwimFishies)
label(ReturnHere)

DoubleJump:
addps xmm0,xmm3
addps xmm0,xmm3
movaps [eax+30],xmm0
jmp ReturnHere

//AC4BFSP.ReadData+671a3:
SwimFishies:
jmp DoubleJump
db 90 90
ReturnHere:

[disable]

SwimFishies:
db 0f 58 c3 0f 29 40 30
//addps xmm0,xmm3
//movaps [eax+30],xmm0

unregistersymbol(SwimFishies)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>198</ID>
      <Description>"Sun Beam ToggleHud + Wanted Level Adjuster (AOBScan)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
alloc(KeyHandlerThread,4096)
aobscan(PointerAndCallFinder,55 8b ec 8b 45 08 83 f8 01 74 x 83 F8 02 75 x 8b 0d)
aobscan(PointerAndCallFinder2,55 8b ec 56 57 8b 7d 08 57 8b F1 e8 x x x x 84 c0 74 x 8b 4e)
aobscan(PointerAndCallFinder3,55 8b ec 80 7d 08 00 53 56 8b f1 8b 9e d8 x x x 8b 0d)
registersymbol(KeyHandlerThread)
CreateThread(KeyHandlerThread)
label(KeyHandlerOff)
registersymbol(KeyHandlerOff)
label(ExitKeyHandler)
label(ToggleHUD)
label(ToggleHUD_exit)
label(bHUD)
registersymbol(bHUD)
label(IncreaseWantedLevel)
label(IncreaseWantedLevel_exit)
label(DecreaseWantedLevel)
label(DecreaseWantedLevel_exit)
label(ToggleHudECXValue)
label(ToggleHudOnCall)
label(ToggleHudOffCall)
label(WantedLevelECXValue)
label(IncreaseWantedLevelCall)
label(DecreaseWantedLevelCall)
label(SkipInitialization)
label(ReconstructCallOrJump)

KeyHandlerThread+500:
KeyHandlerOff:
dd 0
bHUD:
dd 0
ToggleHudECXValue:
dd 0
ToggleHudOnCall:
dd 0
ToggleHudOffCall:
dd 0
WantedLevelECXValue:
dd 0
IncreaseWantedLevelCall:
dd 0
DecreaseWantedLevelCall:
dd 0

KeyHandlerThread:
push 0a
call kernel32.Sleep

cmp [ToggleHudECXValue],0
jne SkipInitialization

mov eax,PointerAndCallFinder
mov ecx,[eax+12] //Toggle Hud ECX Ptr Value (needs to be in ECX)
mov [ToggleHudECXValue],ecx
add eax,25
push eax
call ReconstructCallOrJump
mov [ToggleHudOnCall],eax
add eax,10
mov [ToggleHudOffCall],eax

mov eax,PointerAndCallFinder2
mov [IncreaseWantedLevelCall],eax
add eax,40
mov [DecreaseWantedLevelCall],eax

mov eax,PointerAndCallFinder3
mov eax,[eax+13]
mov [WantedLevelECXValue],eax

SkipInitialization:
cmp [KeyHandlerOff],1
je ExitKeyHandler

push 61 //VK_NUMPAD1
call GetAsyncKeyState
test ax,ax
jne ToggleHUD

push 62 //VK_NUMPAD2
call GetAsyncKeyState
test ax,ax
jne IncreaseWantedLevel

push 63 //VK_NUMPAD3
call GetAsyncKeyState
test ax,ax
jne DecreaseWantedLevel

jmp KeyHandlerThread

ReconstructCallOrJump: //void RCJ(void *AddressOfCallOrJump){};
mov eax,[esp+4]
add eax,[eax+1]
add eax,5
ret 4

ToggleHUD:
mov ecx,[ToggleHudECXValue]
test ecx,ecx
je ToggleHUD_exit
mov ecx,[ecx]
xor [bHUD],1
cmp [bHUD],0
je @f
push 0E
call dword [ToggleHudOnCall]
jmp ToggleHUD_exit
@@:
push 0E
call dword [ToggleHudOffCall]
ToggleHUD_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

IncreaseWantedLevel:
mov ecx,[WantedLevelECXValue]
test ecx,ecx
je IncreaseWantedLevel_exit
mov ecx,[ecx]
push 1
call dword [IncreaseWantedLevelCall]
IncreaseWantedLevel_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

DecreaseWantedLevel:
mov ecx,[WantedLevelECXValue]
test ecx,ecx
je DecreaseWantedLevel_exit
mov ecx,[ecx]
push 1
call dword [DecreaseWantedLevelCall]
DecreaseWantedLevel_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread

ExitKeyHandler:
ret

[disable]

KeyHandlerOff:
dd 1

unregistersymbol(bHUD)
unregistersymbol(KeyHandlerOff)
unregistersymbol(KeyHandlerThread)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
