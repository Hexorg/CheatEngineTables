<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"FF 5"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(__,$4000)
__:
dq __

[DISABLE]
{

hp 16c/1d4 mp 174/1d8

}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>89</ID>
          <Description>"Generate Inventory Id Address"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck==true then return end
function checkAscii(s)
  local a = {s:byte(1,-1)}
  local allow = {[9]=true,[10]=true,[13]=true}
  for i=1,#a do local b = a[i]
    if b&gt;127 then return false end
    if b&lt;32 and b~=9 and b~=10 and b~=13 then return false end
  end
  return true
end

function itemTable(base,ids,cnts,info,max,cmp)
  local b = readInteger(readInteger(target.."+"..base))
  local s = {}
  for i=0,max do
    local binfo = b + info + 0xd0*i
    local addr = readInteger(b + cnts) + 0x4*i
    local from,to = readInteger(binfo+0x4),readInteger(binfo+0x8)
    local str = readString(from,to-from+1)
    if str:len()&lt;2 or not checkAscii(str) then str = nil end
    local TYPE = readBytes(binfo+0xc)
    if nil~= str and TYPE~=0x1f then
      s[1+#s]=string.format("%08X:%02X|%03X-%s",addr,TYPE,i,str)
    end
  end
  table.sort(s,cmp)
  return table.concat(s,"\n")
end

function scmp(a,b)return a:sub(10,15)&lt;b:sub(10,15) end


mrdesc = [[&lt;select Item ID/Slot&gt;don't edit desc]]
target = "FFV_GAME.exe"

-- may edit these number in case version changed
local ss = itemTable('101a80',0x1d6c8,0x1d6c4,0x1d6f0,0x12b,scmp)

local mr = getAddressList().getMemoryRecordByDescription(mrdesc)
mr.DropDownList.Text = ss


[ENABLE]
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>88</ID>
              <Description>"&lt;select Item ID/Slot&gt;don't edit desc"</Description>
              <LastState Value="0485F308" Activated="0" RealAddress="035B002C"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>__</Address>
              <Offsets>
                <Offset>2C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>86</ID>
              <Description>"Edit Number here &amp; sort in game"</Description>
              <LastState Value="117" Activated="0" RealAddress="0485F308"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>__</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>2C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>84</ID>
          <Description>"full hp/mp/revive on battle start"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//          00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12
aobscan(mhp,8b cf 8b 81 d4 01 00 00 89 46 ?? 8b 81 d8 01 00 00 89 46)
alloc(_mhp,$100,mhp)
_mhp:
dq _mhp,mhp

_mhp+40:
readmem(mhp+02,6)
mov   eax,[ecx+1dc]
and   eax,ffffff08
mov   [ecx+1dc],eax
mov   eax,[ecx+288]
mov   [ecx+1d8],eax
mov   eax,[ecx+284]
mov   [ecx+1d4],eax
mov   [_mhp+10],esi
jmp   mhp+08

mhp+02:
jmp _mhp+40
nop

registersymbol(_mhp)
[DISABLE]
[_mhp+08]+02:
readmem(_mhp+40,6)

dealloc(_mhp)
unregistersymbol(_mhp)

// 44 89 01 00 .2caef4
//use itm alt: 6a ff ?? ?? ?? e8
//   29c25b(+1c25b),2f6bdc(+76dbc),30e175(+8e175)
// 2e8453,2e9508(+1) //  +68453,+69508
// +4aed0


{

status:
0000 0001 - blind
0000 0002 - zombie?
0000 0004 - poison
0000 0008 - levitate
0000 0010 - mini
0000 0020 - kerokero
0000 0040 - stone
0000 0080 - KO
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"steal"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//                             00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18
aobscanmodule(ofs,FFV_Game.exe,8b 80 ?? ?? ?? ?? 8b 04 01 89 84 31 ?? ?? ff ff 8b 02 8b 80 ?? ?? ?? ?? 8b)
aobscanmodule(stl,FFV_Game.exe,7f ?? 83 ?? ?? ?? 7f ?? 33 ?? 6a ?? eb ?? 33 c9 8d 82 ?? ?? ?? ?? 39 38 74 19)
alloc(_stl,$300,stl)
_stl:
dq _stl,stl
_stl+0c:
dd 1
_stl+10://save
readmem(stl,30)
_stl+30:
dd 0d,20
label(_done)
label(_getcnt)
_stl+40:
readmem(stl+0e,8)
push  edx
push  ecx
push  ebx
push  eax
mov   ebx,[ebp+0c]
mov   ebx,[ebx]
db  81 c3   //  add ebx,offset
readmem(ofs+02,4)
mov   ebx,[ebx]
mov   [_stl+3c],ebx
mov   ecx,[eax]
//test  ecx,ecx
//je    @f
call  _getcnt
test  ecx,ecx
jne   @f
mov   edi,[eax]
jmp   _done
@@:
mov   ecx,[eax+04]
//test  ecx,ecx
//je    @f
call  _getcnt
test  ecx,ecx
jne   @f
mov   edi,[eax+04]
jmp   _done
@@:
cmp   dword [_stl+0c],1 // random fallback
jne   _done
rdtsc
mov   ecx,[_stl+34]
sub   ecx,[_stl+30]
test  ecx,ecx
jle   _done
shr   eax,16
xor   edx,edx
div   ecx
add   edx,[_stl+30]
mov   [_stl+38],edx
mov   edi,edx
_done:
pop   eax
pop   ebx
pop   ecx
pop   edx
jmp   stl+16

_getcnt:
test  ecx,ecx
jle   @f
cmp   ecx,12c
jge   @f
mov   ecx,[ebx+ecx*4]
ret
@@:
xor   ecx,ecx
inc   ecx
ret

stl+00:
db eb
stl+18:
db eb

stl+0e:
jmp _stl+40
nop
nop
nop

registersymbol(_stl)

[DISABLE]
[_stl+08]:
readmem(_stl+10,30)

dealloc(_stl)
unregistersymbol(_stl)

// 44 89 01 00 .2caef4
//use itm alt: 6a ff ?? ?? ?? e8
//   29c25b(+1c25b),2f6bdc(+76dbc),30e175(+8e175)
// 2e8453,2e9508(+1) //  +68453,+69508
// +4aed0
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>81</ID>
              <Description>"random fallback"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <LastState Value="1" Activated="0" RealAddress="038B000C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_stl</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>82</ID>
              <Description>"fallback from (inclusive)"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <LastState Value="0000000D" Activated="0" RealAddress="038B0030"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_stl</Address>
              <Offsets>
                <Offset>30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"fallback to (exclusive)"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
              <LastState Value="00000020" Activated="0" RealAddress="038B0034"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_stl</Address>
              <Offsets>
                <Offset>34</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>80</ID>
          <Description>"equip decrease no item"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(eqitm1,8b ?? 6a ff 50 e8 ?? ?? ?? ?? 8b)
aobscan(eqitm2,8b ?? 6a ff 57 e8 ?? ?? ?? ?? 8b)
eqitm1+03:
db 00
eqitm2+03:
db 00

[DISABLE]
aobscan(eqitm1,8b ?? 6a 00 50 e8 ?? ?? ?? ?? 8b)
aobscan(eqitm2,8b ?? 6a 00 57 e8 ?? ?? ?? ?? 8b)
eqitm1+03:
db ff
eqitm2+03:
db ff

// 44 89 01 00 .2caef4
//use itm alt: 6a ff ?? ?? ?? e8
//   29c25b(+1c25b),2f6bdc(+76dbc),30e175(+8e175)
// 2e8453,2e9508(+1) //  +68453,+69508
// +4aed0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>77</ID>
          <Description>"minimum and maximum item (on add/sub)"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(itm,FFV_Game.exe,89 01 8b 87 ?? ?? ?? ?? 83 3c b0 00 75)
alloc(_itm,$100,itm)
_itm:
dq _itm,itm
_itm+10://save
readmem(itm,16)
_itm+20:
dd 1,(int)80
_itm+40:
cmp eax,[_itm+20]
jge @f
mov eax,[_itm+20]
@@:
cmp eax,[_itm+24]
jle @f
mov eax,[_itm+24]
@@:
readmem(itm,8)
jmp itm+08

itm:
jmp _itm+40
nop
nop
nop

registersymbol(_itm)

[DISABLE]
[_itm+08]:
readmem(_itm+10,16)

dealloc(_itm)
unregistersymbol(_itm)

// 44 89 01 00 .2caef4
//use itm alt: 6a ff ?? ?? ?? e8
//   29c25b(+1c25b),2f6bdc(+76dbc),30e175(+8e175)
// 2e8453,2e9508(+1) //  +68453,+69508
// +4aed0
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>78</ID>
              <Description>"minimum"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_itm</Address>
              <Offsets>
                <Offset>20</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>79</ID>
              <Description>"maximum"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_itm</Address>
              <Offsets>
                <Offset>24</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>74</ID>
          <Description>"test luacall"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

__+10:
{$lua}
return "db 11"
{$asm}


[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>035B0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
