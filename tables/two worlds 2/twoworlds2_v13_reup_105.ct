<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="11">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Two Worlds II V1.0 Script V2.0 AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Two Worlds II
 Game Version  : 1.0
 Script Version: 2.0
 CE Version    : 5.6
 GodMode, Mana, Energy, Auras, XP, Attribute Points and Skill Points
 13-Nov-2010
 15-Nov-2010 - Included Inventory
 20-Nov-2010 - AOB Version (Changed _MonHero hacking point)
===========================================
}

[ENABLE]
//=========================================
alloc(MyCode,1024)
//=========================================

aobscan(aobMonHero,8b 81 3c 03 00 00 8b 52 24 3b 82 3c 03 00 00)
aobscan(aobGodMode,8b 81 c0 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonMana,8b 81 cc 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonEnergy,8b 81 d4 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonEncryptedValues,8b 93 d0 09 00 00 8b 42 04 35 29 cd 63 5a)
aobscan(aobMonInventory,35 39 6a 00 00 2b 44 24 60 3d ff 7f 00 00)
aobscan(aobMonInventory1,35 39 6a 00 00 2b c3 3d ff 7f 00 00 5e 5b)
aobscan(aobMonInventory2,35 39 6a 00 00 2b 44 24 24 3d ff 7f 00 00)

//=========================================
// Declaration section
label(pMonHero)
label(pGodMode)
label(pMonMana)
label(pMonEnergy)
label(pMonEncryptedValues)
label(pMonInventory)
label(pMonInventory1)
label(pMonInventory2)
label(_MonHero)
label(_BackMH)
label(_ExitMH)
label(_MonH0)
label(_MonH1)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_MonMana)
label(_BackMM)
label(_ExitMM)
label(_MonEnergy)
label(_BackME)
label(_ExitME)
label(_MonEncryptedValues)
label(_BackMEV)
label(_ExitMEV)
label(_MonEV0)
label(_MonEV1)
label(_MonEV2)
label(_MonInventory)
label(_BackMI)
label(_ExitMI)
label(_MonI0)
label(pHero)
label(_MonInventory1)
label(_BackMI1)
label(_ExitMI1)
label(_MonI01)
label(_MonInventory2)
label(_BackMI2)
label(_ExitMI2)
label(_MonI02)
label(iEnableGM)
label(iEnableMM)
label(iEnableME)
label(iEnableMA)
label(iEnableMX)
label(iEnableMAP)
label(iEnableMSP)
label(iEnableMIA)
label(iEnableMIL)
label(iMinAuras)

registersymbol(MyCode)
registersymbol(pHero)
registersymbol(iEnableGM)
registersymbol(iEnableMM)
registersymbol(iEnableME))
registersymbol(iEnableMA)
registersymbol(iEnableMX)
registersymbol(iEnableMAP)
registersymbol(iEnableMSP)
registersymbol(iMinAuras)
registersymbol(iEnableMIA)
registersymbol(iEnableMIL)
registersymbol(pMonHero)
registersymbol(pGodMode)
registersymbol(pMonMana)
registersymbol(pMonEnergy)
registersymbol(pMonEncryptedValues)
registersymbol(pMonInventory)
registersymbol(pMonInventory1)
registersymbol(pMonInventory2)

//=========================================
MyCode:
//========================================= (changed)
_MonHero:
 mov [pHero],edx                 // Save pointer for further use
 
 cmp dword ptr [iEnableGM],0
 je _MonH0                       // Jump if feature is disabled
 
 mov eax,[edx+000001c4]          // Get maximum HP
 mov [edx+000001c0],eax          // Update current HP

_MonH0: 
 cmp dword ptr [iEnableMM],0
 je _MonH1                       // Jump if feature is disabled

 mov eax,[edx+000001c8]          // Get maximum Mana
 mov [edx+000001cc],eax          // Update current Mana

_MonH1: 
 cmp dword ptr [iEnableME],0
 je _ExitMH                      // Jump if feature is disabled

 mov eax,[edx+000001d0]          // Get maximum Energy
 mov [edx+000001d4],eax          // Update current Energy

_ExitMH:
 mov eax,[ecx+0000033c]          // Original Code
 jmp _BackMH                     // Back to main code

//=========================================
_GodMode:
 cmp dword ptr [iEnableGM],0
 je _ExitGM                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitGM                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0
  
 mov eax,[ecx+000001c4]          // Get maximum HP
 mov [ecx+000001c0],eax          // Update current HP

_ExitGM:
 mov eax,[ecx+000001c0]          // Original code
 jmp _BackGM                     // Back to main code

//=========================================
_MonMana:
 cmp dword ptr [iEnableMM],0
 je _ExitMM                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitMM                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0
  
 mov eax,[ecx+000001c8]          // Get maximum Mana
 mov [ecx+000001cc],eax          // Update current Mana

_ExitMM:
 mov eax,[ecx+000001cc]          // Original code
 jmp _BackMM                     // Back to main code

//=========================================
_MonEnergy:
 cmp dword ptr [iEnableME],0
 je _ExitME                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitME                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0
  
 mov eax,[ecx+000001d0]          // Get maximum Energy
 mov [ecx+000001d4],eax          // Update current Energy

_ExitME:
 mov eax,[ecx+000001d4]          // Original code
 jmp _BackME                     // Back to main code

//=========================================
// Auras, XP, Attribute Points and Skill Points 
_MonEncryptedValues:
 cmp ebx,[pHero]                 // Player´s hero?
 jne _ExitMEV                    // Jump if false

 mov edx,[ebx+000009d0]          // Get pointer to encrypted values

 cmp dword ptr [iEnableMA],0
 je _MonEV0                      // Jump if feature is disabled

 mov eax,[edx+24]                // Get encrypted Auras ...
 xor eax,5a63cd29                // ... and decrypt it 

 cmp eax,[iMinAuras]             // Current value &gt;= minimum ?
 jge _MonEV0                     // Jump if true
 
 mov eax,[iMinAuras]             // Get minimum value ...
 xor eax,5a63cd29                // ... and encrypt it 

 mov [edx+24],eax                // Update Aura encrypted value

_MonEV0:
 cmp dword ptr [iEnableMX],0
 je _MonEV1                      // Jump if feature is disabled

 mov eax,[edx+04]                // Get encrypted XP ...
 xor eax,5a63cd29                // ... and decrypt it 

 mov ecx,[esi+0000057c]          // Get max XP for next level
 dec ecx                         // Adjust it

 cmp eax,ecx                     // Current Encrypted value &gt;= Next Level XP?
 jge _MonEV1                     // Jump if true

 mov eax,ecx                     // Get Next Level XP - 1 ...
 xor eax,5a63cd29                // ... and encrypt it 
 
 mov [edx+04],eax                // Update XP encrypted value

 sub ecx,[esi+00000578]
 mov [esi+0000056c],ecx          // Update partial values (display)

_MonEV1:
 mov cx,6a39

 cmp dword ptr [iEnableMAP],0
 je _MonEV2                      // Jump if feature is disabled

 mov ax,[edx+10]                 // Get encrypted Attribute Points ...
 xor ax,cx                       // ... and decrypt it 

 cmp ax,#10
 jge _MonEV2                     // Jump if current value &gt;= 10
 
 mov ax,#10                      // Get minimum value ...
 xor ax,cx                       // ... and encrypt it 
 
 mov [edx+10],ax                 // Update Attribute Points encrypted value

_MonEV2:
 cmp dword ptr [iEnableMSP],0
 je _ExitMEV                     // Jump if feature is disabled

 mov ax,[edx+12]                 // Get encrypted Skill Points ...
 xor ax,cx                       // ... and decrypt it 

 cmp ax,#10
 jge _ExitMEV                    // Jump if current value &gt;= 10
 
 mov ax,#10                      // Get minimum value ...
 xor ax,cx                       // ... and encrypt it 
 
 mov [edx+12],ax                 // Update Attribute Points encrypted value

_ExitMEV:
 mov edx,[ebx+000009d0]          // Original code
 jmp _BackMEV                    // Back to main code

//=========================================
// Transfering Items from Inventory to other place
_MonInventory:
 cmp esi,[pHero]                 // Player´s hero?
 jne _ExitMI                     // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI                     // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI0                      // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI                      // Jump if feature is disabled

 cmp dword ptr [ecx+04],000014c3 // Lockpick?
 jne _ExitMI                     // Jump if false

_MonI0:
 mov dword ptr [esp+60],0        // Make value2decrease = 0
  
_ExitMI:
 xor eax,00006a39                // Original code
 jmp _BackMI                     // Back to main code

//=========================================
// Using Item
_MonInventory1:
 cmp edi,[pHero]                 // Player´s hero?
 jne _ExitMI1                    // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI1                    // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI01                     // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI1                     // Jump if feature is disabled

 cmp dword ptr [ecx+04],000014c3 // Lockpick?
 jne _ExitMI1                    // Jump if false

_MonI01:
 xor ebx,ebx                     // Make value2decrease = 0
  
_ExitMI1:
 xor eax,00006a39                // Original code
 jmp _BackMI1                    // Back to main code

//=========================================
// Using Item
_MonInventory2:
 mov ebp,[esp+14]                // Get ptr to owner
 
 cmp ebp,[pHero]                 // Player´s hero?
 jne _ExitMI2                    // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI2                    // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI02                     // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI2                     // Jump if feature is disabled

 cmp dword ptr [ecx+04],000014c3 // Lockpick?
 jne _ExitMI2                    // Jump if false

_MonI02:
 mov dword ptr [esp+24],0        // Make value2decrease = 0
  
_ExitMI2:
 xor eax,00006a39                // Original code
 jmp _BackMI2                    // Back to main code

//=========================================
// Variables
pHero:
 dd MyCode
iEnableGM:
 dd 1
iEnableMM:
 dd 1 
iEnableME:
 dd 1 
iEnableMA:
 dd 1
iEnableMX:
 dd 0 
iEnableMAP:
 dd 1 
iEnableMSP:
 dd 1 
iEnableMIA:
 dd 0 
iEnableMIL:
 dd 1 
iMinAuras:
 dd #20000

//=========================================
// Hacking Points
//TwoWorlds2.exe+0cf743:
aobMonHero:
pMonHero:
 jmp _MonHero
 nop
_BackMH:

//TwoWorlds2.exe+10dc90:
aobGodMode:
pGodMode:
 jmp _GodMode
 nop
_BackGM:

//TwoWorlds2.exe+10dce0:
aobMonMana:
pMonMana:
 jmp _MonMana
 nop
_BackMM:

//TwoWorlds2.exe+10dd30:
aobMonEnergy:
pMonEnergy:
 jmp _MonEnergy
 nop
_BackME:

//TwoWorlds2.exe+38d059:
aobMonEncryptedValues:
pMonEncryptedValues:
 jmp _MonEncryptedValues
 nop
_BackMEV:

//TwoWorlds2.exe+2259ae:
aobMonInventory:
pMonInventory:
 jmp _MonInventory
_BackMI:

//TwoWorlds2.exe+21b348:
aobMonInventory1:
pMonInventory1:
 jmp _MonInventory1
_BackMI1:

//TwoWorlds2.exe+2271dd: 
aobMonInventory2:
pMonInventory2:
 jmp _MonInventory2
_BackMI2:
 
//=========================================
// Original Codes
[DISABLE]
//TwoWorlds2.exe+0cf743:
pMonHero:
 mov eax,[ecx+0000033c]  // Changed

//TwoWorlds2.exe+10dc90:
pGodMode:
 mov eax,[ecx+000001c0]

//TwoWorlds2.exe+10dce0:
pMonMana:
 mov eax,[ecx+000001cc]
 
//TwoWorlds2.exe+10dd30:
pMonEnergy:
 mov eax,[ecx+000001d4] 

//TwoWorlds2.exe+38d059:
pMonEncryptedValues:
 mov edx,[ebx+000009d0]

//TwoWorlds2.exe+2259ae:
pMonInventory:
 xor eax,00006a39

//TwoWorlds2.exe+21b348:
pMonInventory1:
 xor eax,00006a39
 
//TwoWorlds2.exe+2271dd:
pMonInventory2:
 xor eax,00006a39

unregistersymbol(MyCode)
unregistersymbol(pHero)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableME)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableMX)
unregistersymbol(iEnableMAP)
unregistersymbol(iEnableMSP)
unregistersymbol(iMinAuras)
unregistersymbol(iEnableMIA)
unregistersymbol(iEnableMIL)
unregistersymbol(pMonHero)
unregistersymbol(pGodMode)
unregistersymbol(pMonMana)
unregistersymbol(pMonEnergy)
unregistersymbol(pMonEncryptedValues)
unregistersymbol(pMonInventory)
unregistersymbol(pMonInventory1)
unregistersymbol(pMonInventory2)

dealloc(MyCode)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Two Worlds II V1.3 Script V2.0 AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Two Worlds II
 Game Version  : 1.3
 Script Version: 2.0
 CE Version    : 6.1
 GodMode, Mana, Energy, Auras, XP, Attribute Points and Skill Points
 13-Nov-2010
 15-Nov-2010 - Included Inventory
 20-Nov-2010 - AOB Version (Changed _MonHero hacking point)
 01-Oct-2011 - Adapted to version 1.3 (Changed _MonHero hacking point again)
===========================================
}

[ENABLE]
//=========================================
alloc(MyCode,1024)
//=========================================

aobscan(aobMonHero,83 ec 10 53 56 57 8b f1 85 c0) //changed 1.3
aobscan(aobGodMode,8b 81 c0 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonMana,8b 81 cc 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonEnergy,8b 81 d4 01 00 00 8b 54 24 04 3b d0)
aobscan(aobMonEncryptedValues,8b 93 20 0a 00 00 8b 42 04 35 29 cd 63 5a) //no ok
aobscan(aobMonInventory,35 39 6a 00 00 2b 44 24 60 3d ff 7f 00 00)
aobscan(aobMonInventory1,35 39 6a 00 00 2b c3 3d ff 7f 00 00 5e 5b)
aobscan(aobMonInventory2,35 39 6a 00 00 2b 44 24 28 3d ff 7f 00 00) //no ok

//=========================================
// Declaration section
label(pMonHero)
label(pGodMode)
label(pMonMana)
label(pMonEnergy)
label(pMonEncryptedValues)
label(pMonInventory)
label(pMonInventory1)
label(pMonInventory2)
label(_MonHero)
label(_BackMH)
label(_ExitMH)
label(_MonH0)
label(_MonH1)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_MonMana)
label(_BackMM)
label(_ExitMM)
label(_MonEnergy)
label(_BackME)
label(_ExitME)
label(_MonEncryptedValues)
label(_BackMEV)
label(_ExitMEV)
label(_MonEV0)
label(_MonEV1)
label(_MonEV2)
label(_MonInventory)
label(_BackMI)
label(_ExitMI)
label(_MonI0)
label(pHero)
label(_MonInventory1)
label(_BackMI1)
label(_ExitMI1)
label(_MonI01)
label(_MonInventory2)
label(_BackMI2)
label(_ExitMI2)
label(_MonI02)
label(iEnableGM)
label(iEnableMM)
label(iEnableME)
label(iEnableMA)
label(iEnableMX)
label(iEnableMAP)
label(iEnableMSP)
label(iEnableMIA)
label(iEnableMIL)
label(iMinAuras)

registersymbol(MyCode)
registersymbol(pHero)
registersymbol(iEnableGM)
registersymbol(iEnableMM)
registersymbol(iEnableME))
registersymbol(iEnableMA)
registersymbol(iEnableMX)
registersymbol(iEnableMAP)
registersymbol(iEnableMSP)
registersymbol(iMinAuras)
registersymbol(iEnableMIA)
registersymbol(iEnableMIL)
registersymbol(pMonHero)
registersymbol(pGodMode)
registersymbol(pMonMana)
registersymbol(pMonEnergy)
registersymbol(pMonEncryptedValues)
registersymbol(pMonInventory)
registersymbol(pMonInventory1)
registersymbol(pMonInventory2)

//=========================================
MyCode:
//========================================= (changed)
_MonHero:
 sub esp,10                      // Original Code
 push ebx                        // Original Code
 push esi                        // Original Code
 push edi                        // Original Code

 test eax,eax
 jz _ExitMH

 mov [pHero],eax                 // Save pointer for further use

 cmp dword ptr [iEnableGM],0
 je _MonH0                       // Jump if feature is disabled

 mov esi,[eax+000001c4]          // Get maximum HP
 mov [eax+000001c0],esi          // Update current HP

_MonH0:
 cmp dword ptr [iEnableMM],0
 je _MonH1                       // Jump if feature is disabled

 mov esi,[eax+000001c8]          // Get maximum Mana
 mov [eax+000001cc],esi          // Update current Mana

_MonH1:
 cmp dword ptr [iEnableME],0
 je _ExitMH                      // Jump if feature is disabled

 mov esi,[eax+000001d0]          // Get maximum Energy
 mov [eax+000001d4],esi          // Update current Energy

_ExitMH:
 jmp _BackMH                     // Back to main code

//=========================================
_GodMode:
 cmp dword ptr [iEnableGM],0
 je _ExitGM                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitGM                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0

 mov eax,[ecx+000001c4]          // Get maximum HP
 mov [ecx+000001c0],eax          // Update current HP

_ExitGM:
 mov eax,[ecx+000001c0]          // Original code
 jmp _BackGM                     // Back to main code

//=========================================
_MonMana:
 cmp dword ptr [iEnableMM],0
 je _ExitMM                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitMM                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0

 mov eax,[ecx+000001c8]          // Get maximum Mana
 mov [ecx+000001cc],eax          // Update current Mana

_ExitMM:
 mov eax,[ecx+000001cc]          // Original code
 jmp _BackMM                     // Back to main code

//=========================================
_MonEnergy:
 cmp dword ptr [iEnableME],0
 je _ExitME                      // Jump if feature is disabled

 cmp ecx,[pHero]                 // Player´s hero?
 jne _ExitME                     // Jump if false

 xor eax,eax
 mov [esp+04],eax                // Make value2decrease = 0

 mov eax,[ecx+000001d0]          // Get maximum Energy
 mov [ecx+000001d4],eax          // Update current Energy

_ExitME:
 mov eax,[ecx+000001d4]          // Original code
 jmp _BackME                     // Back to main code

//=========================================
// Auras, XP, Attribute Points and Skill Points
_MonEncryptedValues:
 cmp ebx,[pHero]                 // Player´s hero?
 jne _ExitMEV                    // Jump if false

 mov edx,[ebx+00000a20]          // Get pointer to encrypted values

 cmp dword ptr [iEnableMA],0
 je _MonEV0                      // Jump if feature is disabled

 mov eax,[edx+24]                // Get encrypted Auras ... ok
 xor eax,5a63cd29                // ... and decrypt it

 cmp eax,[iMinAuras]             // Current value &gt;= minimum ?
 jge _MonEV0                     // Jump if true

 mov eax,[iMinAuras]             // Get minimum value ...
 xor eax,5a63cd29                // ... and encrypt it

 mov [edx+24],eax                // Update Aura encrypted value

_MonEV0:
 cmp dword ptr [iEnableMX],0
 je _MonEV1                      // Jump if feature is disabled

 mov eax,[edx+04]                // Get encrypted XP ... ok
 xor eax,5a63cd29                // ... and decrypt it

 mov ecx,[esi+0000057c]          // Get max XP for next level
 dec ecx                         // Adjust it

 cmp eax,ecx                     // Current Encrypted value &gt;= Next Level XP?
 jge _MonEV1                     // Jump if true

 mov eax,ecx                     // Get Next Level XP - 1 ...
 xor eax,5a63cd29                // ... and encrypt it

 mov [edx+04],eax                // Update XP encrypted value

 sub ecx,[esi+00000578]
 mov [esi+0000056c],ecx          // Update partial values (display)

_MonEV1:
 mov cx,6a39

 cmp dword ptr [iEnableMAP],0
 je _MonEV2                      // Jump if feature is disabled

 mov ax,[edx+10]                 // Get encrypted Attribute Points ...
 xor ax,cx                       // ... and decrypt it

 cmp ax,#20
 jge _MonEV2                     // Jump if current value &gt;= 10

 mov ax,#20                      // Get minimum value ...
 xor ax,cx                       // ... and encrypt it

 mov [edx+10],ax                 // Update Attribute Points encrypted value

_MonEV2:
 cmp dword ptr [iEnableMSP],0
 je _ExitMEV                     // Jump if feature is disabled

 mov ax,[edx+12]                 // Get encrypted Skill Points ...
 xor ax,cx                       // ... and decrypt it

 cmp ax,#20
 jge _ExitMEV                    // Jump if current value &gt;= 10

 mov ax,#20                      // Get minimum value ...
 xor ax,cx                       // ... and encrypt it

 mov [edx+12],ax                 // Update Attribute Points encrypted value

_ExitMEV:
 mov edx,[ebx+00000a20]          // Original code
 jmp _BackMEV                    // Back to main code

//=========================================
// Transfering Items from Inventory to other place
_MonInventory:
 cmp esi,[pHero]                 // Player´s hero?
 jne _ExitMI                     // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI                     // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI0                      // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI                      // Jump if feature is disabled

 cmp dword ptr [ecx+04],0000151e // Lockpick?
 jne _ExitMI                     // Jump if false

_MonI0:
 mov dword ptr [esp+60],0        // Make value2decrease = 0

_ExitMI:
 xor eax,00006a39                // Original code
 jmp _BackMI                     // Back to main code

//=========================================
// Using Item
_MonInventory1:
 cmp edi,[pHero]                 // Player´s hero?
 jne _ExitMI1                    // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI1                    // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI01                     // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI1                     // Jump if feature is disabled

 cmp dword ptr [ecx+04],0000151e // Lockpick?
 jne _ExitMI1                    // Jump if false

_MonI01:
 xor ebx,ebx                     // Make value2decrease = 0

_ExitMI1:
 xor eax,00006a39                // Original code
 jmp _BackMI1                    // Back to main code

//=========================================
// Using Item
_MonInventory2:
 mov ebp,[esp+14]                // Get ptr to owner

 cmp ebp,[pHero]                 // Player´s hero?
 jne _ExitMI2                    // Jump if false

 cmp dword ptr [ecx],1           // Valid item?
 jle _ExitMI2                    // Jump if false

 cmp dword ptr [iEnableMIA],0
 jne _MonI02                     // Jump if feature is disabled

 cmp dword ptr [iEnableMIL],0
 je _ExitMI2                     // Jump if feature is disabled

 cmp dword ptr [ecx+04],0000151e // Lockpick?
 jne _ExitMI2                    // Jump if false

_MonI02:
 mov dword ptr [esp+24],0        // Make value2decrease = 0

_ExitMI2:
 xor eax,00006a39                // Original code
 jmp _BackMI2                    // Back to main code

//=========================================
// Variables
pHero:
 dd MyCode
iEnableGM:
 dd 1
iEnableMM:
 dd 1
iEnableME:
 dd 1
iEnableMA:
 dd 1
iEnableMX:
 dd 0
iEnableMAP:
 dd 1
iEnableMSP:
 dd 1
iEnableMIA:
 dd 0
iEnableMIL:
 dd 1
iMinAuras:
 dd #20000

//=========================================
// Hacking Points
//TwoWorlds2.exe+0cf743:
aobMonHero:
pMonHero:
 jmp _MonHero
 nop
_BackMH:

//TwoWorlds2.exe+10dc90:
aobGodMode:
pGodMode:
 jmp _GodMode
 nop
_BackGM:

//TwoWorlds2.exe+10dce0:
aobMonMana:
pMonMana:
 jmp _MonMana
 nop
_BackMM:

//TwoWorlds2.exe+10dd30:
aobMonEnergy:
pMonEnergy:
 jmp _MonEnergy
 nop
_BackME:

//TwoWorlds2.exe+38d059:
aobMonEncryptedValues:
pMonEncryptedValues:
 jmp _MonEncryptedValues
 nop
_BackMEV:

//TwoWorlds2.exe+2259ae:
aobMonInventory:
pMonInventory:
 jmp _MonInventory
_BackMI:

//TwoWorlds2.exe+21b348:
aobMonInventory1:
pMonInventory1:
 jmp _MonInventory1
_BackMI1:

//TwoWorlds2.exe+2271dd:
aobMonInventory2:
pMonInventory2:
 jmp _MonInventory2
_BackMI2:

//=========================================
// Original Codes
[DISABLE]
//TwoWorlds2.exe+0cf743:
pMonHero:
 sub esp,10              // changed v1.3
 push ebx
 push esi
 push edi

//TwoWorlds2.exe+10dc90:
pGodMode:
 mov eax,[ecx+000001c0]

//TwoWorlds2.exe+10dce0:
pMonMana:
 mov eax,[ecx+000001cc]

//TwoWorlds2.exe+10dd30:
pMonEnergy:
 mov eax,[ecx+000001d4]

//TwoWorlds2.exe+38d059:
pMonEncryptedValues:
 mov edx,[ebx+00000a20]  // changed 1.3

//TwoWorlds2.exe+2259ae:
pMonInventory:
 xor eax,00006a39

//TwoWorlds2.exe+21b348:
pMonInventory1:
 xor eax,00006a39

//TwoWorlds2.exe+2271dd:
pMonInventory2:
 xor eax,00006a39

unregistersymbol(MyCode)
unregistersymbol(pHero)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableME)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableMX)
unregistersymbol(iEnableMAP)
unregistersymbol(iEnableMSP)
unregistersymbol(iMinAuras)
unregistersymbol(iEnableMIA)
unregistersymbol(iEnableMIL)
unregistersymbol(pMonHero)
unregistersymbol(pGodMode)
unregistersymbol(pMonMana)
unregistersymbol(pMonEnergy)
unregistersymbol(pMonEncryptedValues)
unregistersymbol(pMonInventory)
unregistersymbol(pMonInventory1)
unregistersymbol(pMonInventory2)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Enable/Disable GodMode"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable/Disable Unlimited Mana"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enable/Disable Unlimited Energy"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableME</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable/Disable Minimum Auras"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMA</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Enable/Disable Quick Level Up"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMX</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Enable/Disable Unlimited Attributes Points"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMAP</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Enable/Disable Unlimited Skill Points"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMSP</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Enable/Disable Unlimited LockPick"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMIL</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Enable/Disable No decreasing Item #  in Inventory"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMIA</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Minimum Aura Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinAuras</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>MyCode</Name>
      <Address>13C30000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHero</Name>
      <Address>13C302C9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>13C302CD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMM</Name>
      <Address>13C302D1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableME</Name>
      <Address>13C302D5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMA</Name>
      <Address>13C302D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMX</Name>
      <Address>13C302DD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAP</Name>
      <Address>13C302E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMSP</Name>
      <Address>13C302E5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinAuras</Name>
      <Address>13C302F1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMIA</Name>
      <Address>13C302E9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMIL</Name>
      <Address>13C302ED</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonHero</Name>
      <Address>007ED6D5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGodMode</Name>
      <Address>005269F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonMana</Name>
      <Address>00526A40</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonEnergy</Name>
      <Address>00526A90</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonEncryptedValues</Name>
      <Address>007EE449</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonInventory</Name>
      <Address>00644C4C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonInventory1</Name>
      <Address>00634D78</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonInventory2</Name>
      <Address>00641863</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Two Worlds II
 Game Version  : 1.3
 Script Version: 2.0
 CE Version    : 6.1
 GodMode, Mana, Energy, Auras, XP, Attribute Points and Skill Points
 13-Nov-2010
 15-Nov-2010 - Included Inventory
 20-Nov-2010 - AOB Version (Changed _MonHero hacking point)
 01-Oct-2011 - Adapted to version 1.3 (Changed _MonHero hacking point again)
===========================================

</Comments>
</CheatTable>
