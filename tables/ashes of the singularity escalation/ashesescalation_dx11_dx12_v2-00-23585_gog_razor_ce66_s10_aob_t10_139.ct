<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>34</ID>
      <Description>"[X] &lt;== Ashes of the Singularity - Escalation v2.00 GOG Script v1.0 AOB"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Ashes of the Singularity - Escalation
 Game Version  : 2.00.23585 (GOG)
 Game Sponsor  : Razor
 Process Name  : AshesEscalation_DX11.exe or AshesEscalation_DX12.exe
 Relevant Info : 64bits/RTS/Machine Killer :)
 Script Version: 1.0
 CE Version    : 6.6
 Release date  : 15-Nov-2016
 Author        : Recifense
 History:
 15-Nov-2016: First Release
 Features:
 - Minimum resources
 - God Mode
 - Quick Construction
 - Quick Production
 - Quick Level Up
 - Some Pointers
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.6) then
    ShowMessage('Sorry. CE version should be 6.6 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif ((process ~= "AshesEscalation_DX11.exe") and (process ~= "AshesEscalation_DX12.exe")) then
    ShowMessage('Error. Expected Process = AshesEscalation_DX11.exe or AshesEscalation_DX12.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,$process)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE66,(float)6.60)
define(ctPROG,(float)0.90)  // progress

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MOPR,$process,0f 28 c3 f3 0f 58 01 f3 0f 58 99 20 03 00 00 f3 0f 11 01 f3 0f)
AOBScanModule(MOSU,$process,f3 0f 10 45 24 48 8b cd f3 0f 58 06 f3 0f 11 06 f3 0f 10 8d d0)
AOBScanModule(MOSB,$process,f3 0f 10 56 68 0f 5a d2 44 8b c8 66 49 0f 7e d0 e8 ?? ?? ?? ??)
AOBScanModule(MSB2,$process,f3 41 0f 10 56 68 0f 5a d2 44 8b c8 66 49 0f 7e d0 e8 ?? ?? ??)
AOBScanModule(GDMD,$process,f3 0f 11 43 24 48 83 c4 40 5b c3 48 89 5c 24 08 57 48 83 ec 20)
AOBScanModule(GMD2,$process,f3 0f 10 4b 68 f3 0f 5c ca 0f 2f c8 ?? ?? 0f 28 c8 f3 0f 11 4b)
AOBScanModule(GMD3,$process,f3 0f 5c 54 24 08 f3 0f 5c c3 f3 0f 11 51 2c f3 0f 11 41 24 f3)
AOBScanModule(MOCP,$process,f3 0f 11 73 74 ?? ?? 48 8b cb e8 ?? ?? ?? ?? 0f 57 c0 8b c0 f3)
AOBScanModule(MOPP,$process,48 c1 e2 06 89 4c 02 30 44 8b a7 90 00 00 00 41 83 fc ff 0f 84)
AOBScanModule(MOUX,$process,8b 8b d8 00 00 00 ff c1 45 3b 04 89 ?? ?? ff 83 dc 00 00 00 89)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonPlayerResources)
label(_MonPR00)
label(_MonPR01)
label(_BackMPR)
label(_ExitMPR)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(_MonSelBuilding)
label(_BackMSB)
label(_ExitMSB)
label(_MonSelBuilding2)
label(_BackSB2)
label(_ExitSB2)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_GodMode3)
label(_BackGM3)
label(_ExitGM3)
label(_MonConstProg)
label(_BackMCP)
label(_ExitMCP)
label(_MonProdProg)
label(_BackMPP)
label(_ExitMPP)
label(_MonUnitXP)
label(_BackMUX)
label(_ExitMUX)

label(iEnableMPR)
label(iEnableGMD)
label(iEnableMCP)
label(iEnableMPP)
label(iEnableMUX)

label(fAux)

label(pRes)
label(pUnit)
label(pBuilding)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableMCP)
registersymbol(iEnableMPP)
registersymbol(iEnableMUX)
registersymbol(pRes)
registersymbol(pUnit)
registersymbol(pBuilding)

registersymbol(MOPR)
registersymbol(MOSU)
registersymbol(MOSB)
registersymbol(MSB2)
registersymbol(GDMD)
registersymbol(GMD2)
registersymbol(GMD3)
registersymbol(MOCP)
registersymbol(MOPP)
registersymbol(MOUX)

//=========================================
MyCode:
//=========================================
// While playing a match
_MonPlayerResources:
 mov [qRAX],rax

 cmp dword ptr [rcx+00000348],00
 jne _ExitMPR

 mov [pRes],rcx

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 movss xmm0,[fMinQuanta]

 mov eax,[rcx+08]
 cmp eax,70000000
 jns _MonR0M

 movss xmm0,[rcx+08]

_MonR0M:
 subss xmm0,[fResDelta]
 comiss xmm0,[rcx]
 jc _MonPR00

 subss xmm0,[rcx]
 comiss xmm0,xmm3
 jc _MonPR00

 movaps xmm3,xmm0

_MonPR00:
 cmp dword ptr [rcx+04],00
 je _MonPR01

 movss xmm0,[fMinQuanta]

 mov eax,[rcx+0c]
 cmp eax,70000000
 jns _MonR0E

 movss xmm0,[rcx+0c]

_MonR0E:
 subss xmm0,[fResDelta]
 comiss xmm0,[rcx+04]
 jc _MonPR01

 subss xmm0,[rcx+04]
 movss [fAux],xmm0

 addss xmm0,[rcx+04]
 movss [rcx+04],xmm0

 movss xmm0,[fAux]
 addss xmm0,[rcx+0000032c]
 movss [rcx+0000032c],xmm0

_MonPR01:
 cmp dword ptr [rcx+3c],00
 je _ExitMPR

 movss xmm0,[fMinQuanta]
 comiss xmm0,[rcx+3c]
 jc _ExitMPR

 movss [rcx+3c],xmm0

_ExitMPR:
 mov rax,[qRAX]

 movaps xmm0,xmm3                  // Original code (Value to be added)
 addss xmm0,[rcx]                  // Original code (Total Available)
 jmp _BackMPR                      // Back to main code

//=========================================
align 10,cc
//=========================================
// Last Selected Unit
_MonSelUnit:
 mov [pUnit],rbp

_ExitMSU:
 movss xmm0,[rbp+24]               // Original code (get fcHP)
 jmp _BackMSU                      // Back to main code

//=========================================
align 10,cc
//=========================================
// Last Selected Building
_MonSelBuilding:
 mov [pBuilding],rsi

_ExitMSB:
 movss xmm2,[rsi+68]               // Original code (get fcHP)
 jmp _BackMSB                      // Back to main code

//=========================================
align 10,cc
//=========================================
// Last Selected Building
_MonSelBuilding2:
 mov [pBuilding],r14

_ExitSB2:
 movss xmm2,[r14+68]               // Original code (get fcHP)
 jmp _BackSB2                      // Back to main code

//=========================================
align 10,cc
//=========================================
// During Combat (UNIT)
_GodMode:
 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 cmp word ptr [rbx+38],0
 jne _ExitGMD

 cvtsi2ss xmm0,dword ptr [rbx+000000e8]

_ExitGMD:
 movss [rbx+24],xmm0               // Original code (set fcHP)
 jmp _BackGMD                      // Back to main code

//=========================================
align 10,cc
//=========================================
// During Combat (BUILDING)
_GodMode2:
 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 cmp dword ptr [rbx+50],00
 jne _ExitGM2

 xorps xmm2,xmm2

_ExitGM2:
 movss xmm1,[rbx+68]               // Original code (set fcHP)
 jmp _BackGM2                      // Back to main code

//=========================================
align 10,cc
//=========================================
// During Combat (UNIT)
_GodMode3:
 cmp dword ptr [iEnableGMD],0
 je _ExitGM3                       // Jump if feature is disabled

 cmp word ptr [rcx+38],0
 jne _ExitGM3

 cvtsi2ss xmm0,dword ptr [rcx+000000e8]

 xorps xmm3,xmm3

_ExitGM3:
 subss xmm2,[rsp+08]               // Original code
 jmp _BackGM3                      // Back to main code

//=========================================
align 10,cc
//=========================================
// When constructing a BUILDING (start prog at 90%)
_MonConstProg:
 pushfq
 movss [rbx+74],xmm6               // Original code (set prog)

 cmp dword ptr [rbx+74],00
 je _ExitMCP

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 cmp dword ptr [rbx+50],00
 jne _ExitMCP

 cmp dword ptr [rbx+74],ctPROG
 jns _ExitMCP

 mov dword ptr [rbx+74],ctPROG

_ExitMCP:
 popfq
 jmp _BackMCP                      // Back to main code

//=========================================
align 10,cc
//=========================================
// When producing a UNIT (start prog at 90%)
_MonProdProg:
 shl rdx,06                        // Original code (adjusting offset)

 test ecx,ecx
 jz _ExitMPP

 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 cmp word ptr [rdx+rax+38],0
 jne _ExitMPP

 cmp ecx,ctPROG
 jns _ExitMPP

 mov ecx,ctPROG
 mov [rbx],ecx

_ExitMPP:
 mov [rdx+rax+30],ecx              // Original code (set prog)
 jmp _BackMPP                      // Back to main code

//=========================================
align 10,cc
//=========================================
// When increasing XP (dreadnoughts)
_MonUnitXP:
 mov ecx,[rbx+000000D8]            // Original code (get cur level)

 cmp dword ptr [iEnableMUX],0
 je _ExitMUX                       // Jump if feature is disabled

 cmp word ptr [rbx+38],0
 jne _ExitMUX

 cmp r8d,[r9+rcx*4+04]
 jns _ExitMUX

 mov r8d,[r9+rcx*4+04]
 mov [rbx+000000d4],r8d

_ExitMUX:
 jmp _BackMUX                      // Back to main code

//=========================================
align 10,'='
 db '===============================&gt;'
 db 'CE6.6 Script by Recifense 111516'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableMCP:
 dd 0
iEnableMPP:
 dd 0
iEnableMUX:
 dd 0
 dd 0
fResDelta:
 dd (float)100.0
fMinQuanta:
 dd (float)660.0
fAux:
 dq 0
qRAX:
 dq 0
pRes:
 dq 0
pUnit:
 dq 0
pBuilding:
 dq 0

//=========================================
// Hacking Points
MOPR:
 jmp _MonPlayerResources
 nop
 nop
_BackMPR:

MOSU:
 jmp _MonSelUnit
_BackMSU:

MOSB:
 jmp _MonSelBuilding
_BackMSB:

MSB2:
 jmp _MonSelBuilding2
 nop
_BackSB2:

GDMD:
 jmp _GodMode
_BackGMD:

GMD2:
 jmp _GodMode2
_BackGM2:

GMD3:
 jmp _GodMode3
 nop
_BackGM3:

MOCP:
 jmp _MonConstProg
_BackMCP:

MOPP:
 jmp _MonProdProg
 nop
 nop
 nop
_BackMPP:

MOUX:
 jmp _MonUnitXP
 nop
_BackMUX:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOPR:
// movaps xmm0,xmm3
// addss xmm0,[rcx]
 db 0f 28 c3 f3 0f 58 01

MOSU:
// movss xmm0,[rbp+24]
 db f3 0f 10 45 24

MOSB:
// movss xmm2,[rsi+68]
 db f3 0f 10 56 68

MSB2:
// movss xmm2,[r14+68]
 db f3 41 0f 10 56 68

GDMD:
// movss [rbx+24],xmm0
 db f3 0f 11 43 24

GMD2:
// movss xmm1,[rbx+68]
 db f3 0f 10 4b 68

GMD3:
// subss xmm2,[rsp+08]
 db f3 0f 5c 54 24 08

MOCP:
// movss [rbx+74],xmm6
 db f3 0f 11 73 74

MOPP:
// shl rdx,06
// mov [rdx+rax+30],ecx
 db 48 c1 e2 06 89 4c 02 30

MOUX:
// mov ecx,[rbx+000000D8]
 db 8b 8b d8 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMUX)
unregistersymbol(pRes)
unregistersymbol(pUnit)
unregistersymbol(pBuilding)

unregistersymbol(MOPR)
unregistersymbol(MOSU)
unregistersymbol(MOSB)
unregistersymbol(MSB2)
unregistersymbol(GDMD)
unregistersymbol(GMD2)
unregistersymbol(GMD3)
unregistersymbol(MOCP)
unregistersymbol(MOPP)
unregistersymbol(MOUX)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== God Mode -----------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>139</ID>
          <Description>"[X] &lt;== Minimum Resources  ------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(139).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(139).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>147</ID>
          <Description>"[X] &lt;== Quick Construction  -------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(147).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(147).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Quick Production ----------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(229).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(229).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"[X] &lt;== Quick Level Up  ------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUX",1)
getAddressList().getMemoryRecordByID(230).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUX",0)
getAddressList().getMemoryRecordByID(230).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20161115</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Ashes of the Singularity - Escalation
 Game Version  : 2.00.23585 (GOG)
 Game Sponsor  : Razor
 Process Name  : AshesEscalation_DX11.exe or AshesEscalation_DX12.exe
 Relevant Info : 64bits/RTS/Machine Killer :)
 Script Version: 1.0
 CE Version    : 6.6
 Release date  : 15-Nov-2016
 Author        : Recifense
 History:
 15-Nov-2016: First Release
 Features:
 - Minimum Resources           [1]
 - God Mode                    [2]
 - Quick Construction          [3]
 - Quick Production            [4]
 - Quick Level Up              [5]
 - Some Pointers               [6]
===========================================
[1] For human player only: (Max-100) or 660;
[2] For human player's Units and Buildings;
[3] Human player's constructions will start at 90%;
[4] Human player's unit production will start at 90%;
[5] Human player's dreadnoughts will quickly Level Up;
[6] For debugging
===========================================
[USAGE]
1) Run CE66;
2) Run Game;
3) Load the game process "AshesEscalation_DX11.exe" or "AshesEscalation_DX12.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
- See description on the table entries;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
