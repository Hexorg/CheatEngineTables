<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>1084</ID>
      <Description>"Infinite Health _1.10.0_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ih_1,128,gamedll_x64_rwdi.dll) //Infinite Health
aobscanmodule(ih_aob1,gamedll_x64_rwdi.dll,F3 0F 11 83 54 09 00 00 40)
registersymbol(ih_aob1)
label(returnhere_ih_1)

//Infinite Health - 2nd Compare
aobscanmodule(ih_aob2,gamedll_x64_rwdi.dll,FF 90 48 01 00 00 0F 2F F7)
registersymbol(ih_aob2)

//--------------------------------------------------//
ih_1:
mov [rbx+00000954],(float)100
jmp returnhere_ih_1
//--------------------------------------------------//

ih_aob1:
jmp ih_1
nop
nop
nop
returnhere_ih_1:

ih_aob1-B:
db 72 03

ih_aob2+6:
db 90 90 90

[Disable]

ih_aob1:
db F3 0F 11 83 54 09 00 00
unregistersymbol(ih_aob1)
dealloc(ih_1)

ih_aob1-B:
db 77 03

ih_aob2+6:
db 0F 2F F7
unregistersymbol(ih_aob2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1093</ID>
      <Description>"Instant Kill _1.10.0_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(ik_aob1,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(ik_aob1)

ik_aob1:
db F3 0F 5C C9 F3 41 0F 11 4F 78

[Disable]

ik_aob1:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(ik_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1096</ID>
      <Description>"Infinite Stamina _1.10.0_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Weapon Stamina
aobscanmodule(is_aob1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8)
registersymbol(is_aob1)

//Sprinting Stamina
aobscanmodule(is_aob2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10)
registersymbol(is_aob2)

is_aob1+5:
db F3 41 0F 58 C8

is_aob2:
db F3 0F 58 C7

[Disable]

is_aob1+5:
db F3 41 0F 5C C8
unregistersymbol(is_aob1)

is_aob2:
db F3 0F 5C C7
unregistersymbol(is_aob2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2524</ID>
      <Description>"Infinite Weapon Durability _1.10.0_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(iwd_1,128,gamedll_x64_rwdi.dll) //Infinite Weapon Durability
aobscanmodule(iwd_aob1,gamedll_x64_rwdi.dll,F3 0F 11 77 04 FF)
registersymbol(iwd_aob1)
label(returnhere_iwd_1)

//--------------------------------------------------//
iwd_1:
mov [rdi+04],(float)100
jmp returnhere_iwd_1
//--------------------------------------------------//

iwd_aob1:
jmp iwd_1
returnhere_iwd_1:

[Disable]

iwd_aob1:
db F3 0F 11 77 04
unregistersymbol(iwd_aob1)
dealloc(iwd_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2028</ID>
      <Description>"----&gt; FOV Override _1.10.0_"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(fo_1,128,gamedll_x64_rwdi.dll) //FOV Override
aobscanmodule(fo_aob1,gamedll_x64_rwdi.dll,44 0F 28 D8 FF 50 20 48)
registersymbol(fo_aob1)
label(returnhere_fo_1)

label(fov_value) //FOV Value
registersymbol(fov_value)

//--------------------------------------------------//
fo_1:
fld [fov_value]
fstp [rdi+B8]
jmp returnhere_fo_1

fov_value:
dd 42280000
//--------------------------------------------------//

fo_aob1+B:
jmp fo_1
nop
nop
nop
returnhere_fo_1:

[Disable]

fo_aob1+B:
db F3 0F 11 87 B8 00 00 00
unregistersymbol(fo_aob1)
dealloc(fo_1)

unregistersymbol(fov_value)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2029</ID>
          <Description>"Value"</Description>
          <VariableType>Float</VariableType>
          <Address>fov_value</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2508</ID>
      <Description>"----&gt; Teleport _1.10.0_"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(teleport,1024,engine_x64_rwdi.dll)

label(t_1) //Teleport
aobscanmodule(t_aob1,engine_x64_rwdi.dll,70 F3 41 0F 10 90 BC 00 00 00)
registersymbol(t_aob1)
label(returnhere_t_1)

label(gw_1) //Get Waypoint
aobscanmodule(gw_aob1,gamedll_x64_rwdi.dll,F3 0F 10 83 8C 08 00 00)
registersymbol(gw_aob1)
label(returnhere_gw_1)

label(saveLocation) //Save Location
label(saveLocation_status)
registersymbol(saveLocation_status)
label(saved_X)
registersymbol(saved_X)
label(saved_Z)
registersymbol(saved_Z)
label(saved_Y)
registersymbol(saved_Y)

label(goToSaved) //Go To Saved
label(goToSaved_status)
registersymbol(goToSaved_status)

label(goToWaypoint) //Go To Waypoint
label(goToWaypoint_status)
registersymbol(goToWaypoint_status)

label(waypoint_X)
registersymbol(waypoint_X)
label(waypoint_Y)
registersymbol(waypoint_Y)

label(t_orig) //Original Code

label(t_values) //Holds All Values For This Script
registersymbol(t_values)

//--------------------------------------------------//
teleport:
//--------------------------------------------------//
t_1:
cmp [saveLocation_status],1
je saveLocation
cmp [goToSaved_status],1
je goToSaved
cmp [goToWaypoint_status],1
je goToWaypoint
movss xmm2,[r8+000000BC]
jmp returnhere_t_1
//--------------------------------------------------//
saveLocation:
movss xmm2,[r8+000000BC]
fld [r8+BC]
fstp [saved_X]
fld [r8+C0]
fstp [saved_Z]
fld [r8+C4]
fstp [saved_Y]
mov [saveLocation_status],0
jmp returnhere_t_1

saveLocation_status:
dd 1

saved_X:
dd 0

saved_Z:
dd 0

saved_Y:
dd 0
//--------------------------------------------------//
goToSaved:
movss xmm2,[r8+000000BC]
fld [saved_X]
fstp [r8+BC]
fld [saved_Z]
fstp [r8+C0]
fld [saved_Y]
fstp [r8+C4]
mov [goToSaved_status],0
jmp returnhere_t_1

goToSaved_status:
dd 0
//--------------------------------------------------//
goToWaypoint:
movss xmm2,[r8+000000BC]
fld [waypoint_X]
fstp [r8+BC]
mov [r8+C0],(float)200
fld [waypoint_Y]
fstp [r8+C4]
mov [goToWaypoint_status],0
jmp returnhere_t_1

goToWaypoint_status:
dd 0
//--------------------------------------------------//
t_orig:
movss xmm0,[rbx+00000850]
jmp returnhere_t_1
//--------------------------------------------------//
gw_1:
movss xmm0,[rbx+0000088C]
fld [rbx+88C]
fstp [waypoint_X]
fld [rbx+894]
fstp [waypoint_Y]
jmp returnhere_gw_1

waypoint_X:
dd 0

waypoint_Y:
dd 0
//--------------------------------------------------//
t_values:
dd 1
//--------------------------------------------------//

t_aob1+1:
jmp t_1
nop
nop
nop
nop
returnhere_t_1:

gw_aob1:
jmp gw_1
nop
nop
nop
returnhere_gw_1:

[Disable]

t_aob1+1:
db F3 41 0F 10 90 BC 00 00 00
unregistersymbol(t_aob1)

unregistersymbol(saveLocation_status)
unregistersymbol(saved_X)
unregistersymbol(saved_Z)
unregistersymbol(saved_Y)

unregistersymbol(goToSaved_status)

unregistersymbol(goToWaypoint_status)

gw_aob1:
db F3 0F 10 83 8C 08 00 00
unregistersymbol(gw_aob1)

unregistersymbol(waypoint_X)
unregistersymbol(waypoint_Y)

unregistersymbol(t_values)

dealloc(teleport)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2509</ID>
          <Description>"Save Location"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>saveLocation_status</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>103</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>2514</ID>
          <Description>"Go To Saved"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>goToSaved_status</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>104</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>2518</ID>
          <Description>"Go To Waypoint"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>goToWaypoint_status</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>105</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>2513</ID>
          <Description>"See Coordinates"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2510</ID>
              <Description>"Saved X"</Description>
              <VariableType>Float</VariableType>
              <Address>saved_X</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2511</ID>
              <Description>"Saved Z"</Description>
              <VariableType>Float</VariableType>
              <Address>saved_Z</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2512</ID>
              <Description>"Saved Y"</Description>
              <VariableType>Float</VariableType>
              <Address>saved_Y</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2519</ID>
              <Description>"Waypoint X"</Description>
              <VariableType>Float</VariableType>
              <Address>waypoint_X</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2520</ID>
              <Description>"Waypoint Y"</Description>
              <VariableType>Float</VariableType>
              <Address>waypoint_Y</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1065</ID>
      <Description>"----&gt; Time Scale _1.6.2_"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ts_1,32,engine_x64_rwdi.dll) //Time Scale
aobscanmodule(ts_aob1,engine_x64_rwdi.dll,F3 0F 10 80 48 0F 00 00)
registersymbol(ts_aob1)
label(returnhere_ts_1)

label(ts_value) //Time Scale Value
registersymbol(ts_value)

//--------------------------------------------------//
ts_1:
fld [ts_value]
fstp [rax+00000F48]
movss xmm0,[rax+00000F48]
jmp returnhere_ts_1

ts_value:
dd 3F800000
//--------------------------------------------------//

ts_aob1:
jmp ts_1
nop
nop
nop
returnhere_ts_1:

[Disable]

ts_aob1:
db F3 0F 10 80 48 0F 00 00
unregistersymbol(ts_aob1)
dealloc(ts_1)

unregistersymbol(ts_value)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1066</ID>
          <Description>"Value"</Description>
          <VariableType>Float</VariableType>
          <Address>ts_value</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1234</ID>
      <Description>"Weapons In Safe Zone _1.6.2_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(wisz_aob1,gamedll_x64_rwdi.dll,48 85 D2 74 03 48 89 3A FF 83 68 08 00 00)
registersymbol(wisz_aob1)

wisz_aob1+8:
db 90 90 90 90 90 90

[Disable]

wisz_aob1+8:
db FF 83 68 08 00 00
unregistersymbol(wisz_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2044</ID>
      <Description>"Easy Lock Picking _1.6.2_"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(elp_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(elp_aob1,gamedll_x64_rwdi.dll,F3 0F 10 56 50 F3 0F 10 4E 54)
registersymbol(elp_aob1)
label(returnhere_elp_1)

//--------------------------------------------------//
elp_1:
movss xmm1,[rsi+54]
mov [rsi+54],(float)999999
jmp returnhere_elp_1
//--------------------------------------------------//

elp_aob1+5:
jmp elp_1
returnhere_elp_1:

[Disable]

elp_aob1+5:
db F3 0F 10 4E 54
unregistersymbol(elp_aob1)
dealloc(elp_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1235</ID>
      <Description>"Instant Camouflage"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Instant Camouflage
aobscanmodule(icamo_aob1,gamedll_x64_rwdi.dll,73 73 48 85 D2 74 6E)
registersymbol(icamo_aob1)

icamo_aob1:
db 90 90

[Disable]

icamo_aob1:
db 73 73
unregistersymbol(icamo_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1094</ID>
      <Description>"Infinite Cash"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Cash
aobscanmodule(ic_aob1,gamedll_x64_rwdi.dll,8B 71 40 8B C6 2B C7 89 41 40)
registersymbol(ic_aob1)

ic_aob1+5:
db 01 F8

[Disable]

ic_aob1+5:
db 2B C7
unregistersymbol(ic_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1102</ID>
      <Description>"Infinite Crafting Items"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ici_1,32,gamedll_x64_rwdi.dll) //Infinite Crafting Items
aobscanmodule(ici_aob1,gamedll_x64_rwdi.dll,48 39 1C 28 75 59 8B 73 40 48 8D 4B 40)
registersymbol(ici_aob1)
label(returnhere_ici_1)

//--------------------------------------------------//
ici_1:
mov [rbx+40],64
mov esi,[rbx+40]
lea rcx,[rbx+40]
jmp returnhere_ici_1
//--------------------------------------------------//

ici_aob1+6:
jmp ici_1
nop
nop
returnhere_ici_1:

[Disable]

ici_aob1+6:
db 8B 73 40 48 8D 4B 40
unregistersymbol(ici_aob1)
dealloc(ici_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1100</ID>
      <Description>"Infinite Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Clip Ammo
aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

//Infinite Overall Ammo
aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90

[Disable]

ica_aob1+7:
db FF CA
unregistersymbol(ica_aob1)

ioa_aob1+6:
db 45 89 44 C2 04
unregistersymbol(ioa_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1103</ID>
      <Description>"Infinite Throwables / Weapon Upgrades"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//Infinite Throwables / Weapon Upgrades
aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90


[DISABLE]

itwu_aob1+3:
db 7E 39

itwu_aob1+7:
db FF CA
unregistersymbol(itwu_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2035</ID>
      <Description>"Infinite UV Flashlight"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite UV Flashlight
aobscanmodule(iuf_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28)
registersymbol(iuf_aob1)

iuf_aob1:
db F3 0F 58 C2

[Disable]

iuf_aob1:
db F3 0F 5C C2
unregistersymbol(iuf_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2040</ID>
      <Description>"Infinite Grappling Hook (Last Tested With V_1.2.1)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Grappling Hook
aobscanmodule(igh_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C6 0F 2F C1 F3 0F 11 43 40)
registersymbol(igh_aob1)

igh_aob1:
db F3 0F 58 C6


[Disable]

igh_aob1:
db F3 0F 5C C6
unregistersymbol(igh_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2042</ID>
      <Description>"Infinite Grappling Hook (Last Tested With V_1.5.0)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Grappling Hook
aobscanmodule(igh_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C7 0F 2F C6 F3 0F 11 43 40)
registersymbol(igh_aob1)

igh_aob1:
db F3 0F 58 C7


[Disable]

igh_aob1:
db F3 0F 5C C7
unregistersymbol(igh_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1095</ID>
      <Description>"Instant "Hold" Actions"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(iha_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(iha_aob1,gamedll_x64_rwdi.dll,0F 28 F7 F3 0F 11 B3 FC 01 00 00)
registersymbol(iha_aob1)
label(returnhere_iha_1)

//--------------------------------------------------//
iha_1:
mov [rbx+000001FC],(float)1
jmp returnhere_iha_1
//--------------------------------------------------//

iha_aob1+3:
jmp iha_1
nop
nop
nop
returnhere_iha_1:

[Disable]

iha_aob1+3:
db F3 0F 11 B3 FC 01 00 00
unregistersymbol(iha_aob1)
dealloc(iha_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>57</ID>
      <Description>"----&gt; Time Of Day (Last Tested With V_1.2.1)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(tod,1024,gamedll_x64_rwdi.dll) //Control Time Of Day
label(tod_day) //Day
label(tod_day_status)
registersymbol(tod_day_status)
label(tod_dawn) //Dawn
label(tod_dawn_status)
registersymbol(tod_dawn_status)
label(tod_night) //Night
label(tod_night_status)
registersymbol(tod_night_status)
label(tod_orig) //Resume Clock
aobscanmodule(tod_aob1,gamedll_x64_rwdi.dll,F3 0F 58 B3 A8 00 00 00 F3 0F 11 B3 A8 00 00 00)
registersymbol(tod_aob1)
label(returnhere_tod)

//-------------------------------------------------------//
tod:
cmp [tod_day_status],1
je tod_day
cmp [tod_dawn_status],1
je tod_dawn
cmp [tod_night_status],1
je tod_night
jmp tod_orig

tod_day:
mov [rbx+000000A8],(float)0.5
jmp returnhere_tod

tod_dawn:
mov [rbx+000000A8],(float)0.8
jmp returnhere_tod

tod_night:
mov [rbx+000000A8],(float)0.9
jmp returnhere_tod

tod_orig:
movss [rbx+000000A8],xmm6
jmp returnhere_tod

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 0
//-------------------------------------------------------//

tod_aob1+8:
jmp tod
nop
nop
nop
returnhere_tod:

[Disable]

tod_aob1+8:
db F3 0F 11 B3 A8 00 00 00
unregistersymbol(tod_aob1)
unregistersymbol(tod_day_status)
unregistersymbol(tod_dawn_status)
unregistersymbol(tod_night_status)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63</ID>
          <Description>"Day"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 1

tod_dawn_status:
dd 0

tod_night_status:
dd 0

[Disable]

tod_day_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"Dawn"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 1

tod_night_status:
dd 0

[Disable]

tod_dawn_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>65</ID>
          <Description>"Night"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 1

[Disable]

tod_night_status:
dd 0
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2104</ID>
      <Description>"----&gt; Time Of Day (Last Tested With V_1.5.0)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(tod,1024,gamedll_x64_rwdi.dll) //Control Time Of Day
label(tod_day) //Day
label(tod_day_status)
registersymbol(tod_day_status)
label(tod_dawn) //Dawn
label(tod_dawn_status)
registersymbol(tod_dawn_status)
label(tod_night) //Night
label(tod_night_status)
registersymbol(tod_night_status)
label(tod_orig) //Resume Clock
aobscanmodule(tod_aob1,gamedll_x64_rwdi.dll,F3 0F 58 BB A8 00 00 00 F3 0F 11 BB A8 00 00 00)
registersymbol(tod_aob1)
label(returnhere_tod)

//-------------------------------------------------------//
tod:
cmp [tod_day_status],1
je tod_day
cmp [tod_dawn_status],1
je tod_dawn
cmp [tod_night_status],1
je tod_night
jmp tod_orig

tod_day:
mov [rbx+000000A8],(float)0.5
jmp returnhere_tod

tod_dawn:
mov [rbx+000000A8],(float)0.8
jmp returnhere_tod

tod_night:
mov [rbx+000000A8],(float)0.9
jmp returnhere_tod

tod_orig:
movss [rbx+000000A8],xmm7
jmp returnhere_tod

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 0
//-------------------------------------------------------//

tod_aob1+8:
jmp tod
nop
nop
nop
returnhere_tod:

[Disable]

tod_aob1+8:
db F3 0F 11 BB A8 00 00 00
unregistersymbol(tod_aob1)
unregistersymbol(tod_day_status)
unregistersymbol(tod_dawn_status)
unregistersymbol(tod_night_status)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2105</ID>
          <Description>"Day"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 1

tod_dawn_status:
dd 0

tod_night_status:
dd 0

[Disable]

tod_day_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2106</ID>
          <Description>"Dawn"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 1

tod_night_status:
dd 0

[Disable]

tod_dawn_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2107</ID>
          <Description>"Night"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 1

[Disable]

tod_night_status:
dd 0
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1108</ID>
      <Description>"----&gt; Ranking"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1106</ID>
          <Description>"Level Faster"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(lf_1,32,gamedll_x64_rwdi.dll) //Level Faster (Agility + Power)
aobscanmodule(lf_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(lf_aob1)
label(returnhere_lf_1)

alloc(lf_2,32,gamedll_x64_rwdi.dll) //Level Faster (Survivor: Merchant Rank)
aobscanmodule(lf_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(lf_aob2)
label(returnhere_lf_2)

//--------------------------------------------------//
lf_1:
shl esi,A
add [rax+rbp+08],esi
mov rax,[rbx+40]
jmp returnhere_lf_1
//--------------------------------------------------//
lf_2:
cmovl eax,r9d
add [rbx+24],186A0
jmp returnhere_lf_2
//--------------------------------------------------//

lf_aob1:
jmp lf_1
nop
nop
nop
returnhere_lf_1:

lf_aob2+3:
jmp lf_2
nop
nop
returnhere_lf_2:

[Disable]

lf_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(lf_aob1)
dealloc(lf_1)

lf_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(lf_aob2)
dealloc(lf_2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1107</ID>
          <Description>"Max Out"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(mo_1,32,gamedll_x64_rwdi.dll) //Max Out (Agility + Power)
aobscanmodule(mo_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(mo_aob1)
label(returnhere_mo_1)

alloc(mo_2,32,gamedll_x64_rwdi.dll) //Max Out (Survivor)
aobscanmodule(mo_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(mo_aob2)
label(returnhere_mo_2)

//--------------------------------------------------//
mo_1:
mov [rax+rbp+08],1E8480
mov rax,[rbx+40]
jmp returnhere_mo_1
//--------------------------------------------------//
mo_2:
cmovl eax,r9d
mov [rbx+24],1E8480
jmp returnhere_mo_2
//--------------------------------------------------//

mo_aob1:
jmp mo_1
nop
nop
nop
returnhere_mo_1:

mo_aob2+3:
jmp mo_2
nop
nop
returnhere_mo_2:

[Disable]

mo_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(mo_aob1)
dealloc(mo_1)

mo_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(mo_aob2)
dealloc(mo_2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1109</ID>
          <Description>"Reset Levels"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(rl_1,32,gamedll_x64_rwdi.dll) //Reset Levels (Agility + Power)
aobscanmodule(rl_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(rl_aob1)
label(returnhere_rl_1)

alloc(rl_2,32,gamedll_x64_rwdi.dll) //Reset Levels (Survivor)
aobscanmodule(rl_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(rl_aob2)
label(returnhere_rl_2)

//--------------------------------------------------//
rl_1:
mov [rax+rbp+08],0
mov rax,[rbx+40]
jmp returnhere_rl_1
//--------------------------------------------------//
rl_2:
cmovl eax,r9d
mov [rbx+24],0
jmp returnhere_rl_2
//--------------------------------------------------//

rl_aob1:
jmp rl_1
nop
nop
nop
returnhere_rl_1:

rl_aob2+3:
jmp rl_2
nop
nop
returnhere_rl_2:

[Disable]

rl_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(rl_aob1)
dealloc(rl_1)

rl_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(rl_aob2)
dealloc(rl_2)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2025</ID>
      <Description>"----&gt; Backpack Editor"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{
The editor is pretty straight forward. Before use, hit the update button. It will
pull your current inventory for that tab. Make your changes and hit apply. If it
errors out for any reason, let me know.
}
aobscanmodule(ItemEditDataAOB,gamedll_x64_rwdi.dll,48 8B 78 60 48 8B D9)
aobscanmodule(BaseItemTableAOB,gamedll_x64_rwdi.dll,8B C8 48 8B 42 E8 4C 8B 04 C8)
alloc(newmem,2048,gamedll_x64_rwdi.dll)
label(ItemEditStart)
label(ItemEditEnd)
label(BaseItemStart)
label(BaseItemEnd)
label(ItemEditData)
registersymbol(ItemEditDataAOB)
registersymbol(BaseItemTableAOB)
registersymbol(ItemEditData)

newmem:

ItemEditStart:
mov [ItemEditData],rax
mov rdi,[rax+60]
mov rbx,rcx
jmp ItemEditEnd

BaseItemStart:
mov [ItemEditData+8],rdx
mov ecx,eax
mov rax,[rdx-18]
jmp BaseItemEnd

ItemEditData:

ItemEditDataAOB:
jmp ItemEditStart
nop
nop
ItemEditEnd:

BaseItemTableAOB:
jmp BaseItemStart
nop
BaseItemEnd:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

ItemEditDataAOB:
db 48 8B 78 60 48 8B D9

BaseItemTableAOB:
db 8B C8 48 8B 42 E8

unregistersymbol(ItemEditDataAOB)
unregistersymbol(BaseItemTableAOB)
unregistersymbol(ItemEditData)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2027</ID>
          <Description>"Show Editor"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
LuaCall(EditorShow())
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
LuaCall(EditorHide())
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>354</ID>
      <Description>"Free Blueprint Requirements"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(FreeBluAOB1,gamedll_x64_rwdi.dll,41 8B 44 0D 00 85 C0)
aobscanmodule(FreeBluAOB2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01)
alloc(newmem,2048,gamedll_x64_rwdi.dll)

label(FreeBlu1Start)
label(FreeBlu2Start)
label(FreeBlue1End)
label(FreeBlue2End)
registersymbol(FreeBluAOB1)
registersymbol(FreeBluAOB2)

newmem:

FreeBlu1Start:
mov eax,0
jmp FreeBlue1End

FreeBlu2Start:
mov r12d,0
lea edx,[r9+01]
jmp FreeBlue2End

FreeBluAOB1:
jmp FreeBlu1Start
FreeBlue1End:

FreeBluAOB2:
jmp FreeBlu2Start
nop
nop
nop
FreeBlue2End:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

FreeBluAOB1:
db 41 8B 44 0D 00

FreeBluAOB2:
db 44 8B 24 17 41 8D 51 01

unregistersymbol(FreeBluAOB1)
unregistersymbol(FreeBluAOB2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1063</ID>
      <Description>"Stop Challenge Timer"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(sct_aob1,gamedll_x64_rwdi.dll,F3 0F 11 83 F0 00 00 00 48 8B CB)
registersymbol(sct_aob1)

sct_aob1:
db 90 90 90 90 90 90 90 90

[Disable]

sct_aob1:
db F3 0F 11 83 F0 00 00 00 48 8B CB
unregistersymbol(sct_aob1)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
  for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
  end
end

function LBItemListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Item = ItemTable[sender.ItemIndex+1]
  local Quant = readInteger(Item.Address+0x40)
  PackEdit_EItemQuant.text = Quant
  local ItemTypeIndex = 0
  for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
  end
  PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
end

function BItemApplyClick(sender)
  if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
  if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
  local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
  local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
  local Quant = tonumber(PackEdit_EItemQuant.text)
  writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
  writeInteger(Item.Address+0x40,Quant)
  BItemUpdateClick()
end

function EditorShow()
  ItemTable = {}
  WeaponTable = {}
  BaseItemTable = {}
  PackEdit.show()
end

function EditorHide()
  PackEdit.close()
end
</LuaScript>
</CheatTable>
