<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Activate First (pls use latest version of cheat engine)"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}


[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Infinite $tarch"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myMoney,Player:get_money+15)
define(myMoneyBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myMoney,myMoneyBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,#999999
  add esp,10
  leave 
  ret 
  jmp return

myMoney:
  jmp newmem
return:

[DISABLE]

myMoney:
  db myMoneyBytes
  // add esp,10
  // leave 
  // ret 

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 02056F95

02056F7C: 00 00                 -  add [eax],al
02056F7E: 00 00                 -  add [eax],al
02056F80: 55                    -  push ebp
02056F81: 8B EC                 -  mov ebp,esp
02056F83: 83 EC 08              -  sub esp,08
02056F86: 8B 45 08              -  mov eax,[ebp+08]
02056F89: 8B 40 30              -  mov eax,[eax+30]
02056F8C: 83 EC 0C              -  sub esp,0C
02056F8F: 50                    -  push eax
02056F90: E8 BB A3 4E 03        -  call SC:ToInt
// ---------- INJECTING HERE ----------
02056F95: 83 C4 10              -  add esp,10
02056F98: C9                    -  leave 
02056F99: C3                    -  ret 
// ---------- DONE INJECTING  ----------
02056F9A: 00 00                 -  add [eax],al
02056F9C: 00 00                 -  add [eax],al
02056F9E: 00 00                 -  add [eax],al
02056FA0: 55                    -  push ebp
02056FA1: 8B EC                 -  mov ebp,esp
02056FA3: 53                    -  push ebx
02056FA4: 56                    -  push esi
02056FA5: 83 EC 70              -  sub esp,70
02056FA8: C7 45 A8 00 00 00 00  -  mov [ebp-58],00000000
02056FAF: C7 45 AC 00 00 00 00  -  mov [ebp-54],00000000
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"Infinite Resource"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myResource,Player:addResource+1f)
define(myResourceBytes,83 C4 10 8B C8)

[ENABLE]

assert(myResource,myResourceBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,#999
  add esp,10
  mov ecx,eax
  jmp return

myResource:
  jmp newmem
return:

[DISABLE]

myResource:
  db myResourceBytes
  // add esp,10
  // mov ecx,eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 01EE415F

01EE4143: 83 EC 08              -  sub esp,08
01EE4146: 8B 45 08              -  mov eax,[ebp+08]
01EE4149: 8B 40 34              -  mov eax,[eax+34]
01EE414C: 8B C8                 -  mov ecx,eax
01EE414E: 89 4D FC              -  mov [ebp-04],ecx
01EE4151: 83 EC 08              -  sub esp,08
01EE4154: FF 75 0C              -  push [ebp+0C]
01EE4157: 50                    -  push eax
01EE4158: 39 00                 -  cmp [eax],eax
01EE415A: E8 49 C1 4A 03        -  call 053902A8
// ---------- INJECTING HERE ----------
01EE415F: 83 C4 10              -  add esp,10
01EE4162: 8B C8                 -  mov ecx,eax
// ---------- DONE INJECTING  ----------
01EE4164: 8B 45 FC              -  mov eax,[ebp-04]
01EE4167: 03 4D 10              -  add ecx,[ebp+10]
01EE416A: 83 EC 04              -  sub esp,04
01EE416D: 51                    -  push ecx
01EE416E: FF 75 0C              -  push [ebp+0C]
01EE4171: 50                    -  push eax
01EE4172: 39 00                 -  cmp [eax],eax
01EE4174: E8 BF 9E FF FF        -  call 01EDE038
01EE4179: 83 C4 10              -  add esp,10
01EE417C: C9                    -  leave 
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"No Resource Used"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(myNoUseResource,Player:tryUseResource+aa)
define(myNoUseResourceBytes,2B 4D 10 83 EC 04)

[ENABLE]

assert(myNoUseResource,myNoUseResourceBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  sub esp,04
  jmp return

myNoUseResource:
  jmp newmem
  nop
return:

[DISABLE]

myNoUseResource:
  db myNoUseResourceBytes
  // sub ecx,[ebp+10]
  // sub esp,04

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 01ECB9B2

01ECB998: 83 EC 08           -  sub esp,08
01ECB99B: 53                 -  push ebx
01ECB99C: 50                 -  push eax
01ECB99D: 39 00              -  cmp [eax],eax
01ECB99F: E8 04 49 4C 03     -  call System.Collections.Generic:Dictionary`2:get_Item
01ECB9A4: 83 C4 10           -  add esp,10
01ECB9A7: 8B C8              -  mov ecx,eax
01ECB9A9: 8B 45 E4           -  mov eax,[ebp-1C]
01ECB9AC: 89 4D EC           -  mov [ebp-14],ecx
01ECB9AF: 8B 4D EC           -  mov ecx,[ebp-14]
// ---------- INJECTING HERE ----------
01ECB9B2: 2B 4D 10           -  sub ecx,[ebp+10]
01ECB9B5: 83 EC 04           -  sub esp,04
// ---------- DONE INJECTING  ----------
01ECB9B8: 51                 -  push ecx
01ECB9B9: 53                 -  push ebx
01ECB9BA: 50                 -  push eax
01ECB9BB: 39 00              -  cmp [eax],eax
01ECB9BD: E8 76 26 01 00     -  call System.Collections.Generic:Dictionary`2:set_Item
01ECB9C2: 83 C4 10           -  add esp,10
01ECB9C5: 8B 45 E8           -  mov eax,[ebp-18]
01ECB9C8: 8D 65 F8           -  lea esp,[ebp-08]
01ECB9CB: 5E                 -  pop esi
01ECB9CC: 5B                 -  pop ebx
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Infinite Sol"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(mySolsRemaining,Galaxy:get_solsRemaining+15)
define(mySolsRemainingBytes,83 C4 10 C9 C3)

[ENABLE]

assert(mySolsRemaining,mySolsRemainingBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,#99
  add esp,10
  leave 
  ret 
  jmp return

mySolsRemaining:
  jmp newmem
return:

[DISABLE]

mySolsRemaining:
  db mySolsRemainingBytes
  // add esp,10
  // leave 
  // ret 

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 01EB1C1D

01EB1C04: 00 00           -  add [eax],al
01EB1C06: 00 00           -  add [eax],al
01EB1C08: 55              -  push ebp
01EB1C09: 8B EC           -  mov ebp,esp
01EB1C0B: 83 EC 08        -  sub esp,08
01EB1C0E: 8B 45 08        -  mov eax,[ebp+08]
01EB1C11: 8B 40 20        -  mov eax,[eax+20]
01EB1C14: 83 EC 0C        -  sub esp,0C
01EB1C17: 50              -  push eax
01EB1C18: E8 F3 C4 4C 03  -  call 0537E110
// ---------- INJECTING HERE ----------
01EB1C1D: 83 C4 10        -  add esp,10
01EB1C20: C9              -  leave 
01EB1C21: C3              -  ret 
// ---------- DONE INJECTING  ----------
01EB1C22: 00 00           -  add [eax],al
01EB1C24: 00 00           -  add [eax],al
01EB1C26: 00 00           -  add [eax],al
01EB1C28: 55              -  push ebp
01EB1C29: 8B EC           -  mov ebp,esp
01EB1C2B: 83 EC 08        -  sub esp,08
01EB1C2E: 83 EC 08        -  sub esp,08
01EB1C31: 68 10 28 97 28  -  push 28972810
01EB1C36: FF 75 08        -  push [ebp+08]
01EB1C39: E8 42 00 00 00  -  call 01EB1C80
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Infinite Fuel"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myCurrentFuel,Ship:get_currentFuel+15)
define(myCurrentFuelBytes,83 C4 10 C9 C3)
define(myMaxFuel,Ship:get_maxFuel+15)
define(myMaxFuelBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myCurrentFuel,myCurrentFuelBytes)
assert(myMaxFuel,myMaxFuelBytes)
alloc(newmem1,$1000)
alloc(newmem,$1000)

label(code)
label(return)
label(code1)
label(return1)
label(maxFuel)

registersymbol(maxFuel)

newmem:
  mov eax,[maxFuel]
  add esp,10
  leave
  ret
  jmp return

code:
  add esp,10
  leave 
  ret 
  jmp return

newmem1:
  mov [maxFuel],eax
  add esp,10
  leave
  ret
  jmp return1

maxFuel:
  dd #100

code1:
  add esp,10
  leave
  ret
  jmp return1

myCurrentFuel:
  jmp newmem
return:

myMaxFuel:
  jmp newmem1
return1:

[DISABLE]

myCurrentFuel:
  db myCurrentFuelBytes
  // add esp,10
  // leave 
  // ret

myMaxFuel:
  db myMaxFuelBytes
  // add esp,10
  // leave
  // ret

dealloc(newmem1)
unregistersymbol(maxFuel)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Ship:get_currentFuel+15

053A468C: 00 00                 -  add [eax],al
053A468E: 00 00                 -  add [eax],al
053A4690: 55                    -  push ebp
053A4691: 8B EC                 -  mov ebp,esp
053A4693: 83 EC 08              -  sub esp,08
053A4696: 8B 45 08              -  mov eax,[ebp+08]
053A4699: 8B 40 24              -  mov eax,[eax+24]
053A469C: 83 EC 0C              -  sub esp,0C
053A469F: 50                    -  push eax
053A46A0: E8 6B 9A FD FF        -  call SC:ToInt
// ---------- INJECTING HERE ----------
053A46A5: 83 C4 10              -  add esp,10
053A46A8: C9                    -  leave 
053A46A9: C3                    -  ret 
// ---------- DONE INJECTING  ----------
053A46AA: 00 00                 -  add [eax],al
053A46AC: 00 00                 -  add [eax],al
053A46AE: 00 00                 -  add [eax],al
053A46B0: 55                    -  push ebp
053A46B1: 8B EC                 -  mov ebp,esp
053A46B3: 83 EC 08              -  sub esp,08
053A46B6: 83 EC 0C              -  sub esp,0C
053A46B9: FF 75 08              -  push [ebp+08]
053A46BC: E8 CF FF FF FF        -  call Ship:get_currentFuel
053A46C1: 83 C4 10              -  add esp,10

// ORIGINAL CODE - INJECTION POINT: Ship:get_maxFuel+15

053842FC: 00 00              -  add [eax],al
053842FE: 00 00              -  add [eax],al
05384300: 55                 -  push ebp
05384301: 8B EC              -  mov ebp,esp
05384303: 83 EC 08           -  sub esp,08
05384306: 8B 45 08           -  mov eax,[ebp+08]
05384309: 8B 40 20           -  mov eax,[eax+20]
0538430C: 83 EC 0C           -  sub esp,0C
0538430F: 50                 -  push eax
05384310: E8 FB 9D FF FF     -  call 0537E110
// ---------- INJECTING HERE ----------
05384315: 83 C4 10           -  add esp,10
05384318: C9                 -  leave
05384319: C3                 -  ret
// ---------- DONE INJECTING  ----------
0538431A: 00 00              -  add [eax],al
0538431C: 00 00              -  add [eax],al
0538431E: 00 00              -  add [eax],al
05384320: 55                 -  push ebp
05384321: 8B EC              -  mov ebp,esp
05384323: 83 EC 08           -  sub esp,08
05384326: 83 EC 08           -  sub esp,08
05384329: FF 75 0C           -  push [ebp+0C]
0538432C: FF 75 08           -  push [ebp+08]
0538432F: E8 74 A5 FF FF     -  call 0537E8A8
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Infinte Weapon Health (set all to 9999)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myWeaponHP,ShipEquipment:get_shipEquipmentHp+15)
define(myWeaponMaxHP,ShipEquipment:get_shipEquipmentMaxHp+15)
define(myWeaponMaxHPBytes,83 C4 10 C9 C3)
define(myWeaponHPBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myWeaponHP,myWeaponHPBytes)
assert(myWeaponMaxHP,myWeaponMaxHPBytes)
alloc(newmem1,$1000)
alloc(newmem,$1000)

label(code)
label(return)
label(code1)
label(return1)
label(myWeaponHealth)

registersymbol(myWeaponHealth)



newmem:
 { pushf
  cmp [myWeaponHealth],0
  je code
  popf}
  mov eax,[myWeaponHealth]
  add esp,10
  leave
  ret
  jmp return

myWeaponHealth:
dd #9999

code:
  //popf
  mov eax,#9999
  add esp,10
  leave 
  ret 
  jmp return

newmem1:
  mov eax,[myWeaponHealth]
  add esp,10
  leave
  ret
  jmp return1

code1:
  add esp,10
  leave
  ret
  jmp return1

myWeaponHP:
  jmp newmem
return:

myWeaponMaxHP:
  jmp newmem1
return1:


[DISABLE]

myWeaponHP:
  db myWeaponHPBytes
  // add esp,10
  // leave 
  // ret

myWeaponMaxHP:
  db myWeaponMaxHPBytes
  // add esp,10
  // leave
  // ret

unregistersymbol(myWeaponHealth)

dealloc(newmem1)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 05124BED

05124BD4: 00 00              -  add [eax],al
05124BD6: 00 00              -  add [eax],al
05124BD8: 55                 -  push ebp
05124BD9: 8B EC              -  mov ebp,esp
05124BDB: 83 EC 08           -  sub esp,08
05124BDE: 8B 45 08           -  mov eax,[ebp+08]
05124BE1: 8B 40 38           -  mov eax,[eax+38]
05124BE4: 83 EC 0C           -  sub esp,0C
05124BE7: 50                 -  push eax
05124BE8: E8 23 96 FD FF     -  call SC:ToInt
// ---------- INJECTING HERE ----------
05124BED: 83 C4 10           -  add esp,10
05124BF0: C9                 -  leave 
05124BF1: C3                 -  ret 
// ---------- DONE INJECTING  ----------
05124BF2: 00 00              -  add [eax],al
05124BF4: 00 00              -  add [eax],al
05124BF6: 00 00              -  add [eax],al
05124BF8: 55                 -  push ebp
05124BF9: 8B EC              -  mov ebp,esp
05124BFB: 83 EC 08           -  sub esp,08
05124BFE: 83 EC 0C           -  sub esp,0C
05124C01: FF 75 08           -  push [ebp+08]
05124C04: E8 CF FF FF FF     -  call ShipEquipment:get_shipEquipmentHp
05124C09: 83 C4 10           -  add esp,10
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Infinite Shield"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myShieldHP,Ship:get_shieldHp+15)
define(myShieldMaxHP,Ship:get_shieldMaxHp+15)
define(myShieldMaxHPBytes,83 C4 10 C9 C3)
define(myShieldHPBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myShieldHP,myShieldHPBytes)
assert(myShieldMaxHP,myShieldMaxHPBytes)
alloc(newmem1,$1000)
alloc(newmem,$1000)

label(code)
label(return)
label(code1)
label(return1)
label(myShield)

registersymbol(myShield)

newmem:
  mov eax,[myShield]
  add esp,10
  leave
  ret
  jmp return

code:
  add esp,10
  leave 
  ret 
  jmp return

newmem1:
  mov [myShield],eax
  add esp,10
  leave
  ret
  jmp return1

myShield:
dd #4000

code1:
  add esp,10
  leave
  ret
  jmp return1

myShieldHP:
  jmp newmem
return:

myShieldMaxHP:
  jmp newmem1
return1:

[DISABLE]

myShieldHP:
  db myShieldHPBytes
  // add esp,10
  // leave 
  // ret 

myShieldMaxHP:
  db myShieldMaxHPBytes
  // add esp,10
  // leave
  // ret

dealloc(newmem1)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 00B9C62D

00B9C614: 00 00                 -  add [eax],al
00B9C616: 00 00                 -  add [eax],al
00B9C618: 55                    -  push ebp
00B9C619: 8B EC                 -  mov ebp,esp
00B9C61B: 83 EC 08              -  sub esp,08
00B9C61E: 8B 45 08              -  mov eax,[ebp+08]
00B9C621: 8B 40 40              -  mov eax,[eax+40]
00B9C624: 83 EC 0C              -  sub esp,0C
00B9C627: 50                    -  push eax
00B9C628: E8 E3 1B 56 04        -  call SC:ToInt
// ---------- INJECTING HERE ----------
00B9C62D: 83 C4 10              -  add esp,10
00B9C630: C9                    -  leave 
00B9C631: C3                    -  ret 
// ---------- DONE INJECTING  ----------
00B9C632: 00 00                 -  add [eax],al
00B9C634: 00 00                 -  add [eax],al
00B9C636: 00 00                 -  add [eax],al
00B9C638: 55                    -  push ebp
00B9C639: 8B EC                 -  mov ebp,esp
00B9C63B: 57                    -  push edi
00B9C63C: 56                    -  push esi
00B9C63D: 83 EC 60              -  sub esp,60
00B9C640: 8B 7D 08              -  mov edi,[ebp+08]
00B9C643: 8B 87 0C 01 00 00     -  mov eax,[edi+0000010C]

// ORIGINAL CODE - INJECTION POINT: 00B6EE0D

00B6EDF1: E9 32 12 F7 03        -  jmp 04AE0028
00B6EDF6: 00 00                 -  add [eax],al
00B6EDF8: 55                    -  push ebp
00B6EDF9: 8B EC                 -  mov ebp,esp
00B6EDFB: 83 EC 08              -  sub esp,08
00B6EDFE: 8B 45 08              -  mov eax,[ebp+08]
00B6EE01: 8B 40 38              -  mov eax,[eax+38]
00B6EE04: 83 EC 0C              -  sub esp,0C
00B6EE07: 50                    -  push eax
00B6EE08: E8 03 F4 58 04        -  call SC:ToInt
// ---------- INJECTING HERE ----------
00B6EE0D: 83 C4 10              -  add esp,10
00B6EE10: C9                    -  leave
00B6EE11: C3                    -  ret
// ---------- DONE INJECTING  ----------
00B6EE12: 00 00                 -  add [eax],al
00B6EE14: 00 00                 -  add [eax],al
00B6EE16: 00 00                 -  add [eax],al
00B6EE18: 55                    -  push ebp
00B6EE19: 8B EC                 -  mov ebp,esp
00B6EE1B: 83 EC 08              -  sub esp,08
00B6EE1E: 8B 45 08              -  mov eax,[ebp+08]
00B6EE21: 8B 40 3C              -  mov eax,[eax+3C]
00B6EE24: 83 EC 0C              -  sub esp,0C
00B6EE27: 50                    -  push eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Infinite Charge"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myPower,Ship:get_power+15)
define(myMaxPower,Ship:get_powerMax+15)
define(myMaxPowerBytes,83 C4 10 C9 C3)
define(myPowerBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myPower,myPowerBytes)
assert(myMaxPower,myMaxPowerBytes)
alloc(newmem1,$1000)
alloc(newmem,$1000)

label(code)
label(return)
label(code1)
label(return1)
label(myCharge)

registersymbol(myCharge)

newmem:
  mov eax,[myCharge]
  add esp,10
  leave
  ret
  jmp return

code:
  add esp,10
  leave 
  ret 
  jmp return

newmem1:
  mov [myCharge],eax
  add esp,10
  leave
  ret
  jmp return1

myCharge:
dd #100

code1:
  add esp,10
  leave
  ret
  jmp return1

myPower:
  jmp newmem
return:

myMaxPower:
  jmp newmem1
return1:

[DISABLE]

myPower:
  db myPowerBytes
  // add esp,10
  // leave 
  // ret

myMaxPower:
  db myMaxPowerBytes
  // add esp,10
  // leave
  // ret

unregistersymbol(myCharge)

dealloc(newmem1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 00B978F5

00B978DC: 00 00              -  add [eax],al
00B978DE: 00 00              -  add [eax],al
00B978E0: 55                 -  push ebp
00B978E1: 8B EC              -  mov ebp,esp
00B978E3: 83 EC 08           -  sub esp,08
00B978E6: 8B 45 08           -  mov eax,[ebp+08]
00B978E9: 8B 40 30           -  mov eax,[eax+30]
00B978EC: 83 EC 0C           -  sub esp,0C
00B978EF: 50                 -  push eax
00B978F0: E8 1B 69 56 04     -  call 050FE210
// ---------- INJECTING HERE ----------
00B978F5: 83 C4 10           -  add esp,10
00B978F8: C9                 -  leave 
00B978F9: C3                 -  ret 
// ---------- DONE INJECTING  ----------
00B978FA: 00 00              -  add [eax],al
00B978FC: 00 00              -  add [eax],al
00B978FE: 00 00              -  add [eax],al
00B97900: 55                 -  push ebp
00B97901: 8B EC              -  mov ebp,esp
00B97903: 56                 -  push esi
00B97904: 83 EC 14           -  sub esp,14
00B97907: 8B 75 08           -  mov esi,[ebp+08]
00B9790A: 83 EC 08           -  sub esp,08
00B9790D: 6A 01              -  push 01

// ORIGINAL CODE - INJECTION POINT: 00B92D4D

00B92D34: 00 00              -  add [eax],al
00B92D36: 00 00              -  add [eax],al
00B92D38: 55                 -  push ebp
00B92D39: 8B EC              -  mov ebp,esp
00B92D3B: 83 EC 08           -  sub esp,08
00B92D3E: 8B 45 08           -  mov eax,[ebp+08]
00B92D41: 8B 40 2C           -  mov eax,[eax+2C]
00B92D44: 83 EC 0C           -  sub esp,0C
00B92D47: 50                 -  push eax
00B92D48: E8 C3 B4 56 04     -  call 050FE210
// ---------- INJECTING HERE ----------
00B92D4D: 83 C4 10           -  add esp,10
00B92D50: C9                 -  leave
00B92D51: C3                 -  ret
// ---------- DONE INJECTING  ----------
00B92D52: 00 00              -  add [eax],al
00B92D54: 00 00              -  add [eax],al
00B92D56: 00 00              -  add [eax],al
00B92D58: 55                 -  push ebp
00B92D59: 8B EC              -  mov ebp,esp
00B92D5B: 83 EC 08           -  sub esp,08
00B92D5E: 83 EC 04           -  sub esp,04
00B92D61: 6A 00              -  push 00
00B92D63: 6A 0A              -  push 0A
00B92D65: FF 75 08           -  push [ebp+08]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Enemies Don't Shoot"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myEnemiesNoShoot,Enemy:addCurrentCharge+13)
define(myEnemiesNoShootBytes,89 86 C8 00 00 00)

[ENABLE]

assert(myEnemiesNoShoot,myEnemiesNoShootBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,1
  mov [esi+000000C8],eax
  jmp return

myEnemiesNoShoot:
  jmp newmem
  nop
return:

[DISABLE]

myEnemiesNoShoot:
  db myEnemiesNoShootBytes
  // mov [esi+000000C8],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 05F0C3CB

05F0C3B2: 00 00                          -  add [eax],al
05F0C3B4: 00 00                          -  add [eax],al
05F0C3B6: 00 00                          -  add [eax],al
05F0C3B8: 55                             -  push ebp
05F0C3B9: 8B EC                          -  mov ebp,esp
05F0C3BB: 56                             -  push esi
05F0C3BC: 83 EC 04                       -  sub esp,04
05F0C3BF: 8B 75 08                       -  mov esi,[ebp+08]
05F0C3C2: 8B 86 C8 00 00 00              -  mov eax,[esi+000000C8]
05F0C3C8: 03 45 0C                       -  add eax,[ebp+0C]
// ---------- INJECTING HERE ----------
05F0C3CB: 89 86 C8 00 00 00              -  mov [esi+000000C8],eax
// ---------- DONE INJECTING  ----------
05F0C3D1: 83 EC 0C                       -  sub esp,0C
05F0C3D4: 56                             -  push esi
05F0C3D5: E8 8E EC FE FF                 -  call 05EFB068
05F0C3DA: 83 C4 10                       -  add esp,10
05F0C3DD: 8B 8E C8 00 00 00              -  mov ecx,[esi+000000C8]
05F0C3E3: 83 EC 08                       -  sub esp,08
05F0C3E6: 51                             -  push ecx
05F0C3E7: 50                             -  push eax
05F0C3E8: E8 2B A6 46 FF                 -  call 05376A18
05F0C3ED: 83 C4 10                       -  add esp,10
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Enemies No Shield"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(myEnemyShield,Enemy:get_shieldHp+15)
define(myEnemyShieldBytes,83 C4 10 C9 C3)

[ENABLE]

assert(myEnemyShield,myEnemyShieldBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,00
  add esp,10
  leave 
  ret 
  jmp return

myEnemyShield:
  jmp newmem
return:

[DISABLE]

myEnemyShield:
  db myEnemyShieldBytes
  // add esp,10
  // leave 
  // ret 

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0203C91D

0203C904: 00 00                 -  add [eax],al
0203C906: 00 00                 -  add [eax],al
0203C908: 55                    -  push ebp
0203C909: 8B EC                 -  mov ebp,esp
0203C90B: 83 EC 08              -  sub esp,08
0203C90E: 8B 45 08              -  mov eax,[ebp+08]
0203C911: 8B 40 60              -  mov eax,[eax+60]
0203C914: 83 EC 0C              -  sub esp,0C
0203C917: 50                    -  push eax
0203C918: E8 33 19 6F 03        -  call SC:ToInt
// ---------- INJECTING HERE ----------
0203C91D: 83 C4 10              -  add esp,10
0203C920: C9                    -  leave 
0203C921: C3                    -  ret 
// ---------- DONE INJECTING  ----------
0203C922: 00 00                 -  add [eax],al
0203C924: 00 00                 -  add [eax],al
0203C926: 00 00                 -  add [eax],al
0203C928: 55                    -  push ebp
0203C929: 8B EC                 -  mov ebp,esp
0203C92B: 83 EC 08              -  sub esp,08
0203C92E: 83 EC 0C              -  sub esp,0C
0203C931: FF 75 08              -  push [ebp+08]
0203C934: E8 17 00 00 00        -  call Enemy:get_shieldMaxHp
0203C939: 83 C4 10              -  add esp,10
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>maxFuel</Name>
      <Address>01F6000F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>myShield</Name>
      <Address>01F7000F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>myCharge</Name>
      <Address>01F8000F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>myWeaponHealth</Name>
      <Address>01F9100F</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>01ECB9A4</Address>
      <Comment>inject here
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>01ECB9B2</Address>
      <Comment>subtract inject here
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>01ECB9C5</Address>
      <Comment>ebp-18 subtrahend
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
