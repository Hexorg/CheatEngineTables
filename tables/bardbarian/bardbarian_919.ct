<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Gold"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Bardbarian.exe
  Version: 
  Date   : 2014-04-11
  Author : Kaito

  This script does blah blah blah
}

[ENABLE]

aobscan(Gold,8B 4A 20 85 C0) // should be unique
alloc(newmem,$1000,Gold)

label(code)
label(return)

globalalloc(pGold,4)

pGold:
  dd 0

newmem:
  mov [pGold],edx

code:
  mov ecx,[edx+20]
  test eax,eax
  jmp return

Gold:
  jmp newmem
return:
registersymbol(Gold)

[DISABLE]

Gold:
  db 8B 4A 20 85 C0

unregistersymbol(Gold)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C52D4C0

0C52D49A: 8D 55 A0                 -  lea edx,[ebp-60]
0C52D49D: E8 EA 97 45 5A           -  call "Adobe AIR.dll"+4E6C8C
0C52D4A2: 8B D0                    -  mov edx,eax
0C52D4A4: 8B 45 94                 -  mov eax,[ebp-6C]
0C52D4A7: 8B 4A 10                 -  mov ecx,[edx+10]
0C52D4AA: 85 C9                    -  test ecx,ecx
0C52D4AC: 0F 84 D3 00 00 00        -  je 0C52D585
0C52D4B2: 8B 91 E4 00 00 00        -  mov edx,[ecx+000000E4]
0C52D4B8: 85 D2                    -  test edx,edx
0C52D4BA: 0F 84 C5 00 00 00        -  je 0C52D585
// ---------- INJECTING HERE ----------
0C52D4C0: 8B 4A 20                 -  mov ecx,[edx+20]
0C52D4C3: 85 C0                    -  test eax,eax
// ---------- DONE INJECTING  ----------
0C52D4C5: 0F 84 BA 00 00 00        -  je 0C52D585
0C52D4CB: 66 0F 57 C0              -  xorpd xmm0,xmm0
0C52D4CF: F2 0F 2A C1              -  cvtsi2sd xmm0,ecx
0C52D4D3: 8B 50 08                 -  mov edx,[eax+08]
0C52D4D6: 8B 8A 90 00 00 00        -  mov ecx,[edx+00000090]
0C52D4DC: 89 85 7C FF FF FF        -  mov [ebp-00000084],eax
0C52D4E2: 66 0F D6 45 80           -  movq [ebp-80],xmm0
0C52D4E7: 8B 41 04                 -  mov eax,[ecx+04]
0C52D4EA: 8D 95 7C FF FF FF        -  lea edx,[ebp-00000084]
0C52D4F0: 83 EC 04                 -  sub esp,04
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Gold"</Description>
          <LastState Value="5000" Activated="0" RealAddress="07401860"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGold</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Inf. Gold Upgrade"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Bardbarian.exe
  Version: 
  Date   : 2014-04-11
  Author : Kaito

  This script does blah blah blah
}

[ENABLE]

aobscan(GoldUpgrade,8B 41 14 89 45 F0 EB) // should be unique
alloc(newmem,$1000,GoldUpgrade)

label(code)
label(return)

newmem:
  cmp [ecx+14],1869F
  jge code
  mov [ecx+14],1869F
  jmp code

code:
  mov eax,[ecx+14]
  mov [ebp-10],eax
  jmp return

GoldUpgrade:
  jmp newmem
  nop
return:
registersymbol(GoldUpgrade)

[DISABLE]

GoldUpgrade:
  db 8B 41 14 89 45 F0

unregistersymbol(GoldUpgrade)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C4CCE5D

0C4CCE48: 8B 41 04           -  mov eax,[ecx+04]
0C4CCE4B: 83 EC 04           -  sub esp,04
0C4CCE4E: 52                 -  push edx
0C4CCE4F: 6A 00              -  push 00
0C4CCE51: 51                 -  push ecx
0C4CCE52: FF D0              -  call eax
0C4CCE54: 83 C4 10           -  add esp,10
0C4CCE57: 8B C8              -  mov ecx,eax
0C4CCE59: 85 C9              -  test ecx,ecx
0C4CCE5B: 74 24              -  je 0C4CCE81
// ---------- INJECTING HERE ----------
0C4CCE5D: 8B 41 14           -  mov eax,[ecx+14]
0C4CCE60: 89 45 F0           -  mov [ebp-10],eax
// ---------- DONE INJECTING  ----------
0C4CCE63: EB 06              -  jmp 0C4CCE6B
0C4CCE65: 8B 41 24           -  mov eax,[ecx+24]
0C4CCE68: 89 45 F0           -  mov [ebp-10],eax
0C4CCE6B: 8B 45 F0           -  mov eax,[ebp-10]
0C4CCE6E: 89 45 C4           -  mov [ebp-3C],eax
0C4CCE71: DB 45 C4           -  fild dword ptr [ebp-3C]
0C4CCE74: 8B 45 D0           -  mov eax,[ebp-30]
0C4CCE77: 89 05 54 B0 28 02  -  mov [0228B054],eax
0C4CCE7D: 8B E5              -  mov esp,ebp
0C4CCE7F: 5D                 -  pop ebp
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>GoldUpgrade</Name>
      <Address> 0C4CCE5D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGold</Name>
      <Address>035F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Gold</Name>
      <Address> 0C52D4C0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
