<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>63</ID>
      <Description>"[X] &lt;== TW - Shogun 2 V1.10 (5934) Script 1.0 (ACTIVATE ME FIRST)"</Description>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Total War - Shogun 2
 Game Version  : 1.10 (Build 5934)
 Game Sponsor  : A local friend (via GIFT)
 Process Name  : Shogun2.exe
 Script Version: 5.0
 CE Version    : 6.2
 Release date  : 10-Jun-2013
 Author        : Recifense
 History:
 13-Nov-12: First Release
 02-Dec-12: Adapted to build 5918
 10-Jun-13: Adapted to build 5934
 Features:
 - Prepare environment for disabling CRC Checking
===========================================
}

//=========================================
// Definitions
define(CODESIZE,0x01501400)
define(LUDO,shogun2.dll)

//=========================================
[ENABLE]
//=========================================
alloc(DLLCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,LUDO)
//=========================================
label(iFlagOK)
label(pDLLCopy)
label(_ExitIM)
//=========================================
registersymbol(DLLCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pDLLCopy)
//=========================================
_IniMem:
 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,DLLCopy
 cld
 rep movsd

 push #500
 call kernel32.sleep

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,DLLCopy
 repe cmpsd

 test ecx,ecx
 jnz _ExitIM

 mov dword ptr [iFlagOK],55555555

_ExitIM:
 ret
//=========================================
 db '===========================&gt;'
 db 'CE6.2 Script by Recifense 061013'
//=========================================
// Variables
pDLLCopy:
 dd DLLCopy
iFlagOK:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(DLLCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pDLLCopy)
//=========================================
dealloc(DLLCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>66</ID>
      <Description>"[X] &lt;== TW - Shogun 2 V1.10 (5934) RTS+TBS Script 7.0 CE64"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Total War - Shogun 2
 Game Version  : 1.10 (Build 5934)
 Game Sponsor  : A local friend (via GIFT)
 Process Name  : Shogun2.exe
 Script Version: 7.0
 CE Version    : 6.3
 Release date  : 02-Dec-2013
 Author        : Recifense
 History:
 13-Nov-12: First Release with CRC checking bypassing
 16-Nov-12: Changing HP for CRC checking bypassing
 02-Dec-12: Release to build 5918
 13-Feb-13: Killing a BUG in the StrongUnit and MSO scripts
 10-Jun-13: Release to build 5934
 02-Dec-13: Adapted to CE6.3
 Features:
 - RTS:
   - God Mode
   - Unlimited Ammo (Arrows, Bombs, etc)
   - Strong Units
 - TBS:
   - Unlimited Movement Points (Army on strategic map)
   - Recover Troop Size when army moves (Army on strategic map)
   - One turn Recruitment (Troops and Ships)
   - One turn Research (Mastery on Arts)
   - One turn Construction (Town/Province on strategic map)
   - Minimum Gold (on strategic map)
   - Pointer to Player's current gold (on strategic map)
   - Pointer to Skill points of select army's officer (on strategic map)
   - Pointer to Player's Agent that last moved (on strategic map)
   [Note] In order to identify the human player, at the start/load of
   any game, selected a troop with an officer or selected a city info.
===========================================
}

//=========================================
// Definitions
define(LUDO,shogun2.dll)
define(LUDOEND,LUDO+0140e060) //=

define(GDMD,shogun2.dll+00d36f30) //=
define(GDM1,shogun2.dll+004b5d70) //=
define(MOAM,shogun2.dll+00bc19e4) //=
define(GDMS,shogun2.dll+00877b90) //=
define(GMSH,shogun2.dll+00fd8230) //=
define(CHKP,shogun2.dll+0140e036) //=
define(STUN,shogun2.dll+00e77942) //=
define(STUC,shogun2.dll+00e77650) //=
define(SUCC,shogun2.dll+00d4e960) //=

define(MGLD,shogun2.dll+00973b20) //=
define(MMVP,shogun2.dll+00cabf40) //=
define(MSOF,shogun2.dll+0095225c) //=
define(MSTN,shogun2.dll+00d46303) //=
define(MMPS,shogun2.dll+00230c35) //=
define(MPRO,shogun2.dll+002547ec) //=
define(MRSH,shogun2.dll+00f74411) //=
define(MCST,shogun2.dll+008ed5cf) //=

define(CHKR,shogun2.dll+0036ee1e) //new
define(CHKS,shogun2.dll+006ba59e) //new
define(CHKU,shogun2.dll+008b707e) //new
define(CHKV,shogun2.dll+006dc107) //new
define(CHKX,shogun2.dll+00dfe6c7) //new
define(CHKY,shogun2.dll+00e88ca7) //new

define(STUB,shogun2.dll+00333448) //=

//=========================================
[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(GDMD,53 56 8b 74 24 0c 8b 86 0c 02 00)
assert(GDM1,83 ec 54 53 55 56 8b f1 8b 86 d0)
assert(MOAM,f3 0f 11 86 78 0f 00 00 0f 86 ?? ?? ?? ?? 8b 46 14 0f 57 c0)
assert(GDMS,56 57 8b 7c 24 0c 8b f1 8b 8f b8)
assert(GMSH,55 8b ec 83 e4 f8 81 ec 5c 01 00 00 53 56)
assert(CHKP,ff 25 ?? ?? ?? ?? ff 25 ?? ?? ?? ?? ff 25)
assert(STUN,8b 4d 18 89 4c 24 10 8d 4c 24 18 e8 ?? ?? ?? ?? db 44 24 10)
assert(STUC,81 ec 20 01 00 00 53 55 8b ac 24 30 01 00 00 56 57 8b d9)
assert(SUCC,64 a1 00 00 00 00 6a ff 68 ?? ?? ?? ?? 50)

//------------------------------------------
assert(MGLD,8b 81 6c 04 00 00 c3 cc cc cc)
assert(MMVP,2b d7 89 50 64 ?? ?? c7 40 64 00 00 00 00)
assert(MSOF,39 98 18 05 00 00 ?? ?? 8b bf fc 00 00 00)
assert(MSTN,8b 86 bc 00 00 00 03 86 b4 00 00 00 6a 00)
assert(MMPS,2b c2 89 41 18 c2 04 00 c7 41 18 00 00 00 00 c2 04 00)
assert(MPRO,8b 17 8b 42 0c 8b cf ff d0 39 a8 e0 00 00 00)
assert(MRSH,8b 49 1c 2b 4e 08 8b c7 33 d2 85 c0)
assert(MCST,89 46 0c 8b 46 04 3b c5 ?? ?? 8d 88 5c 01 00 00)

//------------------------------------------
assert(CHKR,55 8b 6c 24 10 0f b6 0c 2a 8b 06 33 c8 81 e1 ff 00 00 00 c1 e8)
assert(CHKS,55 8b 6c 24 10 0f b6 0c 2a 8b 06 33 c8 81 e1 ff 00 00 00 c1 e8)
assert(CHKU,55 8b 6c 24 10 0f b6 0c 2a 8b 06 33 c8 81 e1 ff 00 00 00 c1 e8)
assert(CHKV,57 8b 7c 24 14 8d 64 24 00 83 fd 07 ?? ?? ff 24 ad ?? ?? ?? ??)
assert(CHKX,57 8b 7c 24 14 8d 64 24 00 83 fd 07 ?? ?? ff 24 ad ?? ?? ?? ??)
assert(CHKY,57 8b 7c 24 14 8d 64 24 00 83 fd 07 ?? ?? ff 24 ad ?? ?? ?? ??)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_GodMode)
label(_GodM00)
label(_GodM01)
label(_BackGM)
label(_ExitGM)
label(_GodMode1)
label(_GodM10)
label(_GodM11)
label(_BackGM1)
label(_ExitGM1)
label(_MonAmmo)
label(_MonA0)
label(_MonA1)
label(_BackMA)
label(_ExitMA)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)
label(_GodModeSH2)
label(_BackGMSH2)
label(_ExitGMSH2)
label(_HackPoint)
label(_BackHP)
label(_ExitHP)
label(_StrongUnit)
label(_StUn00)
label(_StUn01)
label(_StUn02)
label(_StUn03)
label(_StUn04)
label(_StUn05)
label(_BackSU)
label(_ExitSU)
label(_StrongUnitCaller)
label(_BackSUC)
label(_ExitSUC)
label(_SUCallerCaller)
label(_BackSCC)
label(_ExitSCC)

label(iEnableGM)
label(iEnableMA)
label(iEnableSU)
label(iEnableCRC)

label(pShip)
label(pStatus)

label(iPlayerID)
label(iEAX)
label(iEAX1)
label(iEAX2)
label(iEDI)
label(aLast)
label(iCount)
label(iCount1)
label(pCaller)
label(pCallerSU)
label(pCallerSCC)

label(iEAX_Reg)
label(iECX_Reg)

//------------------------------------------
label(_MonGold)
label(_BackMG)
label(_ExitMG)
label(_MonMP)
label(_MonM0)
label(_BackMM)
label(_ExitMM)
label(_MonSelOfficer)
label(_BackMSO)
label(_ExitMSO)
label(_MonSelTown)
label(_BackMST)
label(_ExitMST)
label(_MonMP1)
label(_BackMM1)
label(_ExitMM1)
label(_MonProd)
label(_BackMPr)
label(_ExitMPr)
label(_MonResearch)
label(_BackMR)
label(_ExitMR)
label(_MonConst)
label(_BackMC)
label(_ExitMC)

label(_HackPointR)
label(_BackHPR)
label(_ExitHPR)
label(_HackPointS)
label(_BackHPS)
label(_ExitHPS)
label(_HackPointU)
label(_BackHPU)
label(_ExitHPU)
label(_HackPointV)
label(_BackHPV)
label(_ExitHPV)
label(_HackPointX)
label(_BackHPX)
label(_ExitHPX)
label(_HackPointY)
label(_BackHPY)
label(_ExitHPY)

label(pSel)
label(pGold)
label(pOfficer)
label(pTown)
label(pAgent)
label(pTroop)

label(pConst)
label(pConst1)

label(iEnableMG)
label(iEnableMM)
label(iEnableMTS)
label(iEnableMP)
label(iEnableMR)
label(iEnableMC)
label(iMinGold)
label(aLast1)

label(iCountMST)
label(iCountMPR)
label(iCounters)

label(iCounterR)
label(iCounterS)
label(iCounterU)
label(iCounterV)
label(iCounterX)
label(iCounterY)

//=========================================
// Registering Symbols
registersymbol(MyCode)
//------------------------------------------
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iEnableSU)
registersymbol(iEnableCRC)
registersymbol(iPlayerID)

registersymbol(pShip)
registersymbol(pStatus)

registersymbol(aLast)
registersymbol(iCount)
registersymbol(iCount1)
registersymbol(pCaller)
registersymbol(pCallerSU)
registersymbol(pCallerSCC)
//------------------------------------------
registersymbol(pSel)
registersymbol(pGold)
registersymbol(pOfficer)
registersymbol(pTown)
registersymbol(pAgent)
registersymbol(pTroop)

registersymbol(pConst)
registersymbol(pConst1)

registersymbol(iEnableMG)
registersymbol(iEnableMM)
registersymbol(iEnableMTS)
registersymbol(iEnableMP)
registersymbol(iEnableMR)
registersymbol(iEnableMC)
registersymbol(iMinGold)

registersymbol(aLast1)

registersymbol(iCountMST)
registersymbol(iCountMPR)
registersymbol(iCounters)

registersymbol(iCounterR)
registersymbol(iCounterS)
registersymbol(iCounterU)
registersymbol(iCounterV)
registersymbol(iCounterX)
registersymbol(iCounterY)

//=========================================
MyCode:
//========================================= 5806
_GodMode:
 mov [iEAX],eax                    // Save EAX

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

 mov eax,[esp+04]                  // Get Unit
 mov eax,[eax+00000214]            // Get pTroop ** 208/210
 test eax,eax
 jnz _GodM00                       // Jump if the pointer is null

 mov eax,[esp+04]                  // Get Unit
 mov eax,[eax+0000021c]            // Get pShip ** 210/218
 test eax,eax
 jz _ExitGM                        // Jump if the pointer is null

 mov al,[eax+00001168]             // Get pCommon **111c/1120
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 jmp _GodM01
//=====
_GodM00:
 mov al,[eax+00000c01]             // Get pCommon ** b9f/c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

_GodM01:
 mov dword ptr [aLast],'GoMo'

 inc dword ptr [iCounters+00]

 mov eax,[iEAX]                    // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM:
 mov eax,[iEAX]                    // Restore EAX

 push ebx                          // Original code
 push esi                          // Original code
 mov esi,[esp+0C]                  // Original code
 jmp _BackGM                       // Back to main code

 //========================================= 5806
_GodMode1:
 mov [iEAX1],eax                   // Save EAX

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled

 mov eax,[ecx+00000214]            // Get pTroop **0210
 test eax,eax
 jnz _GodM10                       // Jump if the pointer is not null

 mov eax,[ecx+0000021c]            // Get pShip **0218
 test eax,eax
 jz _ExitGM1                       // Jump if the pointer is null

 inc dword ptr [iCount1]

// Ship Crew
 mov al,[eax+00001168]             // Get pCommon **1120
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled
 jmp _GodM11
//Land Soldiers
_GodM10:
 mov al,[eax+00000c01]             // Get pCommon **0c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

_GodM11:
 mov dword ptr [aLast],'GoM1'

 mov eax,[esp]
 mov [pCaller],eax

 inc dword ptr [iCounters+04]

 mov eax,[iEAX1]                   // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM1:
 mov eax,[iEAX1]                   // Restore EAX

 sub esp,54                        // Original code
 push ebx                          // Original code
 push ebp                          // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 5806
_MonAmmo:
 mov dword ptr [aLast],'MoAm'

 cmp dword ptr [iEnableMA],0
 je _MonA0                         // Jump if feature is disabled

 mov al,[esi+00000c01]             // Get pCommon **0c09
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitMA                       // Jump if false

 cvtsi2ss xmm0,[esi+00000F7C]      // Get Maximum Ammo **0fa8

 inc dword ptr [iCounters+08]

_MonA0:
_MonA1:
_ExitMA:
 comiss xmm1,xmm0                  // Update EFLAGS
 movss [esi+00000F78],xmm0         // Original code **0fa4
 jmp _BackMA                       // Back to main code

//========================================= 5806
_GodModeS:
 mov [iEAX2],eax                   // Save EAX
 mov [iEDI],edi                    // Save EDI

 cmp dword ptr [iEnableGM],0
 je _ExitGMS                       // Jump if feature is disabled

 mov edi,[esp+04]                  // Get pUnit

 mov eax,[edi+0000021c]            // Get pShip **0218
 test eax,eax
 jz _ExitGMS                       // Jump if the pointer is null

 mov al,[eax+00001168]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMS                      // Jump if false

 mov dword ptr [aLast],'GoMS'

 inc dword ptr [iCounters+0c]

 mov eax,[iEAX2]                   // Restore EAX
 mov edi,[iEDI]                    // Restore EDI
 ret 0004                          // Avoid routine
//-----
_ExitGMS:
 mov edi,[iEDI]                    // Restore EDI
 mov eax,[iEAX2]                   // Restore EAX

 push esi                          // Original code
 push edi                          // Original code
 mov edi,[esp+0C]                  // Original code
 jmp _BackGMS                      // Back to main code

//========================================= 5806
// Ship Hull
_GodModeSH2:
 mov dword ptr [aLast],'GSH2'

 cmp dword ptr [iEnableGM],0
 je _ExitGMSH2                     // Jump if feature is disabled

 mov [pShip],edi

// inc dword ptr [iCount]

 cmp edi,0f000000
 jle _ExitGMSH2                    // Jump if false

 cmp edi,50000000
 jge _ExitGMSH2                    // Jump if false

// dec dword ptr [iCount]

 mov al,[edi+00001168]             // Get pCommon

 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMSH2                    // Jump if false

 inc dword ptr [iCounters+10]

 db 66 90 0F 1F
 db 00 0F 1F 40
 db 00 0F 1F 44
 db 00 00 66 0F
 db 1F 44 00 00
 db 0F 1F 80 00
 db 00 00 00 0F
 db 1F 84 00 00
 db 00 00 00 66
 db 0F 1F 84 00
 db 00 00 00 00

 ret 0010                          // Avoid routine (return AL = 0)
//---
_ExitGMSH2:
 push ebp                          // Original code
 mov ebp,esp                       // Original code
// and esp,F8                        // Original code
 db 83 e4 f8                       // Original code
 jmp _BackGMSH2                    // Back to main code

//========================================= 5806
// EAX = free
_HackPoint:
// mov dword ptr [aLast],'HaPo'

 mov [iEAX_Reg],eax
 mov [iECX_Reg],ecx

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHP

 cmp dword ptr [iEnableCRC],0
 je _ExitHP                        // Jump if feature is disabled

 mov ecx,[esp+08]

 cmp ecx,LUDO
 jl _ExitHP

 cmp ecx,LUDOEND
 jge _ExitHP

 mov eax,LUDO
 sub ecx,eax
 mov eax,DLLCopy
 add ecx,eax

 mov [esp+08],ecx

 inc dword ptr [iCounters+14]

_ExitHP:
 mov eax,[iEAX_Reg]
 mov ecx,[iECX_Reg]

 jmp dword ptr [Shogun2.dll+1503558] // Original code
 jmp _BackHP                       // Back to main code (keeping the template)

//========================================= new
// RTS: Troop under cursor on the troop list tab(game on pause)
_StrongUnit:
 mov dword ptr [aLast],'StrU'

 push eax
 push ebx

 lea ecx,[STUB]
 cmp ecx,[pCallerSCC]
 jne _ExitSU

 lea ebx,[ebp-00000130]
 mov [pStatus],ebx

 cmp dword ptr [iEnableSU],0
 je _ExitSU                        // Jump if feature is disabled

 inc dword ptr [iCounters+18]

//Morale
 mov eax,#50
 mov ecx,[ebx+00000148]
 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000148],ecx
// Bonus vs Cavalry
 mov ecx,[ebx+0000014c]
 test ecx,ecx
 jz _StUn00

 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+0000014c],ecx

_StUn00:
//Armour
 mov eax,#15
 mov ecx,[ebx+00000208]
 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000208],ecx
// Accuracy
 mov ecx,[ebx+00000218]
 test ecx,ecx
 jz _StUn01

 mov eax,#100
 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000208],ecx
 mov [ebx+00000234],ecx

_StUn01:
// Reload Skill
 mov ecx,[ebx+0000021C]
 test ecx,ecx
 jz _StUn02

 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+0000021C],ecx
 mov [ebx+0000023C],ecx

_StUn02:
// Charge Bonus
 mov ecx,[ebx+00000220]
 test ecx,ecx
 jz _StUn03

 mov eax,#50
 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000220],ecx

_StUn03:
// Melee Attack
 mov ecx,[ebx+00000224]
 test ecx,ecx
 jz _StUn04

 mov eax,#35
 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000224],ecx
 mov [ebx+00000238],ecx

_StUn04:
// Melee Defence
 mov ecx,[ebx+00000228]
 test ecx,ecx
 jz _StUn05

 cmp eax,ecx
 cmovg ecx,eax
 mov [ebx+00000228],ecx

_StUn05:
_ExitSU:
 pop ebx
 pop eax

 mov ecx,[ebp+18]                  // Original code
 mov [esp+10],ecx                  // Original code
 jmp _BackSU                       // Back to main code

//========================================= new
// RTS: Troop under cursor on the troop list tab(game on pause)
_StrongUnitCaller:
 mov eax,[esp]
 mov [pCallerSU],eax

_ExitSUC:
 sub esp,00000120
 jmp _BackSUC                      // Back to main code

//========================================= new
// RTS: Troop under cursor on the troop list tab(game on pause)
_SUCallerCaller:
 mov eax,[esp]
 mov [pCallerSCC],eax

_ExitSCC:
// mov eax,fs:[00000000]
 db 64 a1 00 00 00 00
 jmp _BackSCC                      // Back to main code
//-----------------------------------------
//========================================= 5806
// TBS Gold
_MonGold:
 mov dword ptr [aLast1],'MoGo'

 mov eax,[ecx+00000470]            // Get pointer to player

 cmp eax,[pGold]
 jne _ExitMG

 cmp dword ptr [iEnableMG],0
 je _ExitMG                        // Jump if feature is disabled

 mov eax,[iMinGold]
 cmp eax,[ecx+0000046C]
 jle _ExitMG

 mov [ecx+0000046C],eax            // Update gold

 inc dword ptr [iCounters+1C]

_ExitMG:
 mov eax,[ecx+0000046C]            // Original code
 jmp _BackMG                       // Back to main code

//========================================= 5806
// TBS Troop Movement Points/Size
_MonMP:
 mov dword ptr [aLast1],'MoMP'

 push ecx

 mov ecx,[eax+3c]                  // Get pointer to Owner **0044
 cmp ecx,[pGold]                   // Is it a player's troop?
 jne _ExitMM

 mov [pTroop],eax

 inc dword ptr [iCounters+20]

 cmp dword ptr [iEnableMM],0
 je _MonM0                         // Jump if feature is disabled

 xor edi,edi                       // value2decrease = 0

_MonM0:
 cmp dword ptr [iEnableMTS],0
 je _ExitMM                        // Jump if feature is disabled

 mov ecx,[eax+48]                  // Get troop maximum size **0050
 mov [eax+44],ecx                  // Update current size **004c

_ExitMM:
 pop ecx

 sub edx,edi                       // Original code
 mov [eax+64],edx                  // Original code **006c
 jmp _BackMM                       // Back to main code

//========================================= 5806
// TBS Selected Officer
_MonSelOfficer:
 mov dword ptr [aLast1],'MoSO'

 push ebx

 mov [pOfficer],eax

 mov ebx,[eax+00000258]            // Get pointer to ptr to Owner **02b4
 test ebx,ebx
 jz _ExitMSO

 mov ebx,[ebx]

// mov [pGold],ebx
 inc dword ptr [iCounters+24]

_ExitMSO:
 pop ebx

 cmp [eax+00000518],ebx            // Original code **1c14
 jmp _BackMSO                      // Back to main code

//========================================= 5806
// TBS Find out player ID via Selected City Info
_MonSelTown:
 mov dword ptr [aLast1],'MoST'

 inc dword ptr [iCountMST]

 mov eax,[esi+3C]                  // **0040
 mov [pGold],eax
 mov [pTown],esi

_ExitMST:
 mov eax,[esi+000000BC]            // Original code **00cc
 jmp _BackMST                      // Back to main code

//========================================= 5806
// TBS Agents Movement Points
_MonMP1:
 mov dword ptr [aLast1],'MMP1'

 push ebx

 mov ebx,[ecx+00000258]            // Get pointer to ptr to Owner **02b4
 test ebx,ebx
 jz _ExitMM1

 mov ebx,[ebx]
 cmp ebx,[pGold]                   // Is it a player's Agent?
 jne _ExitMM1

 mov [pAgent],ecx

  cmp dword ptr [iEnableMM],0
 je _ExitMM1                       // Jump if feature is disabled

 mov eax,[ecx+14]                  // Get Max MP **0018
 mov [ecx+18],eax                  // Cur = max **001c

 inc dword ptr [iCounters+28]

 xor edx,edx                       // value2decrease = 0

_ExitMM1:
 pop ebx

 sub eax,edx                       // Original code
 mov [ecx+18],eax                  // Original code **001c
 jmp _BackMM1                      // Back to main code

//========================================= 5806
// TBS Troop Production of selected Town
_MonProd:
 mov dword ptr [aLast1],'MoPr'

 cmp dword ptr [iEnableMP],0
 je _ExitMPr                       // Jump if feature is disabled

 mov edx,[edi+14]                  // Get pointer to Town
 test edx,edx
 jz _ExitMPr

 mov eax,[edx+3c]                  // Get pointer to ptr to Owner **0040
 test eax,eax
 jz _ExitMPr

 cmp eax,[pGold]                   // Is it a player's Town?
 jne _ExitMPr

 xor eax,eax
 xchg eax,eax

 lea edi,[edi+eax*4+00000000]

 mov [edi+1c],eax                  // Make it one turn production

 inc dword ptr [iCountMPR]

_ExitMPr:
 mov edx,[edi]                     // Original code
 mov eax,[edx+0C]                  // Original code
 jmp _BackMPr                      // Back to main code

//========================================= 5806
// TBS Research Progress
_MonResearch:
 mov dword ptr [aLast1],'MoRe'

 cmp dword ptr [iEnableMR],0
 je _ExitMR                        // Jump if feature is disabled

 mov eax,[esi+08]                  // Get research points
 mov [ecx+1c],eax                  // Update points needed to complete research

 inc dword ptr [iCounters+2C]

_ExitMR:
 mov ecx,[ecx+1C]                  // Original code
 sub ecx,[esi+08]                  // Original code
 jmp _BackMR                       // Back to main code

//========================================= 5806
// TBS Construction Progress
_MonConst:
 push ebx

 mov dword ptr [aLast1],'MoCo'

 mov [pConst],esi
 mov [pConst1],eax

 cmp dword ptr [iEnableMC],0
 je _ExitMC                        // Jump if feature is disabled

 test eax,eax
 jz _ExitMC

 mov ebx,[esi+04]
 test ebx,ebx
 jz _ExitMC

 mov ebx,[ebx+00000094]
 cmp ebx,[pGold]
 jne _ExitMC

 inc dword ptr [iCounters+30]

 mov ebx,[eax+10]
 dec ebx
 cmp ebx,[eax+0c]
 jle _ExitMC

 mov [eax+0c],ebx

_ExitMC:
 pop ebx

 mov [esi+0C],eax                  // Original code
 mov eax,[esi+04]                  // Original code
 jmp _BackMC                       // Back to main code

//=========================================
// Cheating CRC check
_HackPointR:
 push ebp                          // Original code
 mov ebp,[esp+10]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPR

 cmp dword ptr [iEnableCRC],0
 je _ExitHPR                       // Jump if feature is disabled

 cmp ebp,LUDO
 jl _ExitHPR

 cmp ebp,LUDOEND
 jge _ExitHPR

 mov ecx,LUDO
 sub ebp,ecx
 mov ecx,DLLCopy
 add ebp,ecx

 inc dword ptr [iCounterR]

_ExitHPR:
 jmp _BackHPR                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointS:
 push ebp                          // Original code
 mov ebp,[esp+10]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPS

 cmp dword ptr [iEnableCRC],0
 je _ExitHPS                       // Jump if feature is disabled

 cmp ebp,LUDO
 jl _ExitHPS

 cmp ebp,LUDOEND
 jge _ExitHPS

 mov ecx,LUDO
 sub ebp,ecx
 mov ecx,DLLCopy
 add ebp,ecx

 inc dword ptr [iCounterS]

_ExitHPS:
 jmp _BackHPS                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointU:
 push ebp                          // Original code
 mov ebp,[esp+10]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPU

 cmp dword ptr [iEnableCRC],0
 je _ExitHPU                       // Jump if feature is disabled

 cmp ebp,LUDO
 jl _ExitHPU

 cmp ebp,LUDOEND
 jge _ExitHPU

 mov ecx,LUDO
 sub ebp,ecx
 mov ecx,DLLCopy
 add ebp,ecx

 inc dword ptr [iCounterU]

_ExitHPU:
 jmp _BackHPU                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointV:
 push edi                          // Original code
 mov edi,[esp+14]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPV

 cmp dword ptr [iEnableCRC],0
 je _ExitHPV                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPV

 cmp edi,LUDOEND
 jge _ExitHPV

 push ecx
 mov ecx,LUDO
 sub edi,ecx
 mov ecx,DLLCopy
 add edi,ecx
 pop ecx

 inc dword ptr [iCounterV]

_ExitHPV:
 jmp _BackHPV                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointX:
 push edi                          // Original code
 mov edi,[esp+14]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPX

 cmp dword ptr [iEnableCRC],0
 je _ExitHPX                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPX

 cmp edi,LUDOEND
 jge _ExitHPX

 push ecx
 mov ecx,LUDO
 sub edi,ecx
 mov ecx,DLLCopy
 add edi,ecx
 pop ecx

 inc dword ptr [iCounterX]

_ExitHPX:
 jmp _BackHPX                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointY:
 push edi                          // Original code
 mov edi,[esp+14]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPY

 cmp dword ptr [iEnableCRC],0
 je _ExitHPY                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPY

 cmp edi,LUDOEND
 jge _ExitHPY

 push ecx
 mov ecx,LUDO
 sub edi,ecx
 mov ecx,DLLCopy
 add edi,ecx
 pop ecx

 inc dword ptr [iCounterY]

_ExitHPY:
 jmp _BackHPY                      // Back to main code (keeping the template)

//=========================================
 db '========================================&gt;'
 db 'CE6.2 Script by Recifense 120213'
//=========================================
// Variables
iEnableGM:
 dd 0
iEnableMA:
 dd 0
iEnableSU:
 dd 0
iEnableCRC:
 dd 1
//-----------------------------------------
iEnableMG:
 dd 0
iEnableMM:
 dd 0
iEnableMTS:
 dd 0
iEnableMP:
 dd 0
iEnableMR:
 dd 0
iEnableMC:
 dd 0
//-----------------------------------------
iPlayerID:
 dd 0
pShip:
 dd 0
pStatus:
 dd 0
iEAX:
 dd 0
iEAX1:
 dd 0
iEAX2:
 dd 0
iEDI:
 dd 0
aLast:
 dd 'CE62'
iCount:
 dd 0
iCount1:
 dd 0
pCaller:
 dd 0
pCallerSU:
 dd 0
pCallerSCC:
 dd 0
iEAX_Reg:
 dd 0
iECX_Reg:
 dd 0
//-----------------------------------------
pSel:
 dd 0
pGold:
 dd MyCode
pOfficer:
 dd 0
pTown:
 dd 0
pAgent:
 dd 0
pConst:
 dd 0
pConst1:
 dd 0
iMinGold:
 dd #62000
aLast1:
 dd 'CE62'
iCountMST:
 dd 0
iCountMPR:
 dd 0
pTroop:
 dd 0
iCounters:
 dd 0,0,0,0,0,0,0,0,0,0,0,0,0
//-----------------------------------------
iCounterR:
 dd 0
iCounterS:
 dd 0
iCounterU:
 dd 0
iCounterV:
 dd 0
iCounterX:
 dd 0
iCounterY:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 xchg eax,eax
_BackGM:

GDM1:
 jmp _GodMode1
_BackGM1:

MOAM:
 jmp _MonAmmo
 db 0F 1F 00
_BackMA:

GDMS:
 jmp _GodModeS
 xchg eax,eax
_BackGMS:

GMSH:
 jmp _GodModeSH2
 xchg eax,eax
_BackGMSH2:

CHKP:
 jmp _HackPoint
 nop
_BackHP:

STUN:
 jmp _StrongUnit
 nop
 nop
_BackSU:

STUC:
 jmp _StrongUnitCaller
 nop
_BackSUC:

SUCC:
 jmp _SUCallerCaller
 nop
_BackSCC:

//-----------------------------------------
MGLD:
 jmp _MonGold
 xchg eax,eax
_BackMG:

MMVP:
 jmp _MonMP
_BackMM:

MSOF:
 jmp _MonSelOfficer
 xchg eax,eax
_BackMSO:

MSTN:
 jmp _MonSelTown
 xchg eax,eax
_BackMST:

MMPS:
 jmp _MonMP1
_BackMM1:

MPRO:
 jmp _MonProd
_BackMPr:

MRSH:
 jmp _MonResearch
 xchg eax,eax
_BackMR:

MCST:
 jmp _MonConst
 xchg eax,eax
_BackMC:

//-----------------------------------------
CHKR:
 jmp _HackPointR
_BackHPR:

CHKS:
 jmp _HackPointS
_BackHPS:

CHKU:
 jmp _HackPointU
_BackHPU:

CHKV:
 jmp _HackPointV
_BackHPV:

CHKX:
 jmp _HackPointX
_BackHPX:

CHKY:
 jmp _HackPointY
_BackHPY:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// push ebx
// push esi
// mov esi,[esp+0C]
 db 53 56 8b 74 24 0c

GDM1:
// sub esp,54
// push ebx
// push ebp
 db 83 ec 54 53 55

MOAM:
// mmovss [esi+00000F78],xmm0
 db f3 0f 11 86 78 0f 00 00

GDMS:
// push esi
// push edi
// mov edi,[esp+0C]
 db 56 57 8b 7c 24 0c

GMSH:
// push ebp
// mov ebp,esp
// and esp,F8
 db 55 8b ec 83 e4 f8

CHKP:
 jmp dword ptr [Shogun2.dll+1503558] //+00014fb0

STUN:
// mov ecx,[ebp+18]
// mov [esp+10],ecx
 db 8b 4d 18 89 4c 24 10

STUC:
// sub esp,00000120
 db 81 ec 20 01 00 00

SUCC:
// mov eax,fs:[00000000]
 db 64 a1 00 00 00 00

//-----------------------------------------
//pMonGold:
MGLD:
// mov eax,[ecx+0000046C]
 db 8b 81 6c 04 00 00

//pMonMP:
MMVP:
// sub edx,edi
// mov [eax+64],edx
 db 2b d7 89 50 64

//pMonSelOfficer:
MSOF:
// cmp [eax+00000518],ebx
 db 39 98 18 05 00 00

//pMonSelTown: // NHP
MSTN:
// mov eax,[esi+000000BC]
 db 8b 86 bc 00 00 00

//pMonMP1:
MMPS:
// sub eax,edx
// mov [ecx+18],eax
 db 2b c2 89 41 18

//pMonProd: //NHP
MPRO:
// mov edx,[edi]
// mov eax,[edx+0C]
 db 8b 17 8b 42 0c

MRSH:
// mov ecx,[ecx+1C]
// sub ecx,[esi+08]
 db 8b 49 1c 2b 4e 08

MCST:
// mov [esi+0C],eax
// mov eax,[esi+04]
 db 89 46 0c 8b 46 04
//-----------------------------------------
CHKR:
// push ebp
// mov ebp,[esp+10]
 db 55 8b 6c 24 10

CHKS:
// push ebp
// mov ebp,[esp+10]
 db 55 8b 6c 24 10

CHKU:
// push ebp
// mov ebp,[esp+10]
 db 55 8b 6c 24 10

CHKV:
// push edi
// mov edi,[esp+14]
 db 57 8b 7c 24 14

CHKX:
// push edi
// mov edi,[esp+14]
 db 57 8b 7c 24 14

CHKY:
// push edi
// mov edi,[esp+14]
 db 57 8b 7c 24 14

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
//-----------------------------------------
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableSU)
unregistersymbol(iEnableCRC)
unregistersymbol(iPlayerID)

unregistersymbol(pShip)
unregistersymbol(pStatus)

unregistersymbol(aLast)
unregistersymbol(iCount)
unregistersymbol(iCount1)
unregistersymbol(pCaller)
unregistersymbol(pCallerSU)
unregistersymbol(pCallerSCC)
//-----------------------------------------
unregistersymbol(pSel)
unregistersymbol(pGold)
unregistersymbol(pOfficer)
unregistersymbol(pTown)
unregistersymbol(pAgent)
unregistersymbol(pTroop)

unregistersymbol(pConst)
unregistersymbol(pConst1)

unregistersymbol(iEnableMG)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMTS)
unregistersymbol(iEnableMP)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMC)
unregistersymbol(iMinGold)

unregistersymbol(aLast1)

unregistersymbol(iCountMST)
unregistersymbol(iCountMPR)
unregistersymbol(iCounters)

unregistersymbol(iCounterR)
unregistersymbol(iCounterS)
unregistersymbol(iCounterU)
unregistersymbol(iCounterV)
unregistersymbol(iCounterX)
unregistersymbol(iCounterY)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
Build 5918:

define(GDMD,LUDO+0083d0f0)
define(GDM1,LUDO+00081620)
define(MOAM,LUDO+00ded0d4)
define(GDMS,LUDO+0097ff10)
define(GMSH,LUDO+00407f00)
define(CHKP,LUDO+0140df86)
define(STUN,LUDO+0052e8f2)
define(STUC,LUDO+0052e600)
define(SUCC,LUDO+00b49290)

define(MGLD,LUDO+0104b200)
define(MMVP,LUDO+00a39680)
define(MSOF,LUDO+00f6f0bc)
define(MSTN,LUDO+00a80da3)
define(MMPS,LUDO+00427fc5)
define(MPRO,LUDO+0067fdcc)
define(MRSH,LUDO+002dc491)
define(MCST,LUDO+00bfe6df)

define(STUB,LUDO+00f43ba8)

// Build 5806
//define(GDMD,LUDO+00fd43c0)
//define(GDM1,LUDO+004b9b10)
//define(MOAM,LUDO+009dcfa1) //-03
//define(GDMS,LUDO+00ad30d0)
//define(GMSH,LUDO+0102f420)
//define(CHKP,LUDO+0140d866) **
//** sl = AOBScan("57 83 c1 04 51 8d 46 04 50 e8");

//define(MGLD,LUDO+003ce960)
//define(MMVP,LUDO+00fd2c10)
//define(MSOF,LUDO+001757dc)
//define(MSTN,LUDO+00494f43)
//define(MMPS,LUDO+00095f05)
//define(MPRO,LUDO+003456fc)
//define(MRSH,LUDO+00179011)
//define(MCST,LUDO+00fcc3da)
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"================== RTS =================="</Description>
          <LastState Value="57FB0000" Activated="0" RealAddress="594B1482"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>000080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pDLLCopy</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>1</ID>
              <Description>"Enable/Disable God Mode"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableGM</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>62</ID>
              <Description>"Enable/Disable Unlimited Ammo"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMA</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"================== TBS =================="</Description>
          <LastState Value="57FB0000" Activated="0" RealAddress="594B1482"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>000080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pDLLCopy</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Enable/Disable Unlimited Movement Points"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMM</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Enable/Disable Auto Troop Size Recover"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMTS</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"Enable/Disable Minimum Gold"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMG</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
              <CheatEntries>
                <CheatEntry>
                  <ID>8</ID>
                  <Description>"Minimum Gold"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0080FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>iMinGold</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Enable/Disable One Turn Research"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMR</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"Enable/Disable One Turn Recruitment"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMP</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"Enable/Disable One Turn Construction"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMC</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"=============== Other Info ==============="</Description>
              <LastState Value="57FB0000" Activated="0" RealAddress="594B1482"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>000080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pDLLCopy</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>9</ID>
                  <Description>"Player's Current Gold"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pGold</Address>
                  <Offsets>
                    <Offset>4FC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>68</ID>
              <Description>"=============== Other Info ==============="</Description>
              <LastState Value="57FB0000" Activated="0" RealAddress="594B1482"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>000080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pDLLCopy</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>70</ID>
                  <Description>"Selected General's Born Year"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pOfficer</Address>
                  <Offsets>
                    <Offset>300</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>71</ID>
                  <Description>"Selected General's Skill Points"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pOfficer</Address>
                  <Offsets>
                    <Offset>518</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>72</ID>
                  <Description>"Selected General's Current XP"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pOfficer</Address>
                  <Offsets>
                    <Offset>520</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>76</ID>
              <Description>"=============== Other Info ==============="</Description>
              <LastState Value="57FB0000" Activated="0" RealAddress="594B1482"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>000080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pDLLCopy</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>81</ID>
                  <Description>"Last Moved Agent's Born Year"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pAgent</Address>
                  <Offsets>
                    <Offset>300</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>82</ID>
                  <Description>"Last Moved Agent's Skill Points"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pAgent</Address>
                  <Offsets>
                    <Offset>518</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>83</ID>
                  <Description>"Last Moved Agent's Current XP"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pAgent</Address>
                  <Offsets>
                    <Offset>520</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Game Title    : Total War - Shogun 2
 Game Version  : 1.10 (Build 5934)
 Game Sponsor  : A local friend (via GIFT)
 Process Name  : Shogun2.exe
 Script Version: 5.0
 CE Version    : 6.2
 Release date  : 10-Jun-2013
 Author        : Recifense
 History:
 13-Nov-12: First Release
 02-Dec-12: Adapted to build 5918
 10-Jun-13: Adapted to build 5934
 Features:
 - Prepare environment for disabling CRC Checking
===========================================
 Game Title    : Total War - Shogun 2
 Game Version  : 1.10 (Build 5934)
 Game Sponsor  : A local friend (via GIFT)
 Process Name  : Shogun2.exe
 Script Version: 7.0
 CE Version    : 6.3
 Release date  : 02-Dec-2013
 Author        : Recifense
 History:
 13-Nov-12: First Release with CRC checking bypassing
 16-Nov-12: Changing HP for CRC checking bypassing
 02-Dec-12: Release to build 5918
 13-Feb-13: Killing a BUG in the StrongUnit and MSO scripts
 10-Jun-13: Release to build 5934
 02-Dec-13: Adapted to CE6.3
 Features:
 - RTS:
   - God Mode
   - Unlimited Ammo (Arrows, Bombs, etc)
 - TBS:
   - Unlimited Movement Points (Army on strategic map)
   - Recover Troop Size when army moves (Army on strategic map)
   - One turn Recruitment (Troops and Ships)
   - One turn Research (Mastery on Arts)
   - One turn Construction (Town/Province on strategic map)
   - Minimum Gold (on strategic map)
   - Pointer to Player's current gold (on strategic map)
   - Pointer to Skill points of select army's officer (on strategic map)
   - Pointer to Player's Agent that last moved (on strategic map)
   [Note] In order to identify the human player, at the start/load of
   any game, selected a troop with an officer or selected a city info.
===========================================
***************************************************************************
[IMPORTANT] ACTIVATE the fisrt script before activating the TBS+RTS script.
***************************************************************************
1) God Mode: For all Units and Ships
2) Unlimited Ammo (Arrows, Bombs, etc)
3) Unlimited Movement Points (Army on campaign)
4) Recover troop size when Army moves (Army on campaign)
5) One Turn Recruitment (Troops and Ships)
6) One Turn Research (Mastery of the Arts) - Pass the cursor over or select the research item;
7) One Turn Construction (Settlement and Province).
8) Minimum Gold (On campaign)
9) Player's Current Gold (On campaign)
10) Skill points of selected army's general (On Campaign)
11) Skill points of last moved Agent (On Campaign)
[Note] In order to identify the human player, at the start/load of any game, selected a city info. If already selected, deselect it and select it again.
[Note] For activating the script, just check its "active" box by clicking on it [X].
===========================================
HOT_KEYS:
CTRL+HOME = Enable  all RTS cheats; (GM and AMMO)
CTRL+END  = Disable all RTS cheats; (GM and AMMO)
CTRL+PAGE_UP   = Enable  all TBS cheats;
CTRL+PAGE_DOWN = Disable all TBS cheats;
[NOTE] You can easily create/modify Hotkeys.
===========================================
[IMPORTANT] As far as I have tested, you can let all cheats enabled and no crash will happen. 
===========================================
Cheers!
</Comments>
</CheatTable>
