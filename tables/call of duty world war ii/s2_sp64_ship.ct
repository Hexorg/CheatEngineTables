<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <CheatEntries>
    <CheatEntry>
      <ID>101</ID>
      <Description>"Unlimited Health"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : CoD_SP.exe
  Version: 
  Date   : 2017-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(health,CoD_SP.exe,8B 87 2C 02 00 00 48) // should be unique
alloc(newmem,$1000,health)

label(code)
label(return)

newmem:
mov [rdi+0000022C], #9999
code:
  mov eax,[rdi+0000022C]
  jmp return

health:
  jmp newmem
  nop
return:
registersymbol(health)

[DISABLE]

health:
  db 8B 87 2C 02 00 00

unregistersymbol(health)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "CoD_SP.exe"+35D81E

"CoD_SP.exe"+35D7F1: 48 8B CF                       -  mov rcx,rdi
"CoD_SP.exe"+35D7F4: E8 E7 9E 08 00                 -  call CoD_SP.exe+3E76E0
"CoD_SP.exe"+35D7F9: 48 8B CF                       -  mov rcx,rdi
"CoD_SP.exe"+35D7FC: E8 9F 9D 08 00                 -  call CoD_SP.exe+3E75A0
"CoD_SP.exe"+35D801: 48 8B CF                       -  mov rcx,rdi
"CoD_SP.exe"+35D804: E8 F7 19 00 00                 -  call CoD_SP.exe+35F200
"CoD_SP.exe"+35D809: 8B 83 1C F2 00 00              -  mov eax,[rbx+0000F21C]
"CoD_SP.exe"+35D80F: 41 B9 01 00 00 00              -  mov r9d,00000001
"CoD_SP.exe"+35D815: 89 83 18 03 00 00              -  mov [rbx+00000318],eax
"CoD_SP.exe"+35D81B: 4C 8B C7                       -  mov r8,rdi
// ---------- INJECTING HERE ----------
"CoD_SP.exe"+35D81E: 8B 87 2C 02 00 00              -  mov eax,[rdi+0000022C]
// ---------- DONE INJECTING  ----------
"CoD_SP.exe"+35D824: 48 8B D3                       -  mov rdx,rbx
"CoD_SP.exe"+35D827: 89 83 98 02 00 00              -  mov [rbx+00000298],eax
"CoD_SP.exe"+35D82D: 0F B7 87 B0 00 00 00           -  movzx eax,word ptr [rdi+000000B0]
"CoD_SP.exe"+35D834: 8B 4B 54                       -  mov ecx,[rbx+54]
"CoD_SP.exe"+35D837: 66 89 43 2A                    -  mov [rbx+2A],ax
"CoD_SP.exe"+35D83B: 8B 83 20 F2 00 00              -  mov eax,[rbx+0000F220]
"CoD_SP.exe"+35D841: 89 83 E0 02 00 00              -  mov [rbx+000002E0],eax
"CoD_SP.exe"+35D847: 8B 83 48 F2 00 00              -  mov eax,[rbx+0000F248]
"CoD_SP.exe"+35D84D: 89 83 E4 02 00 00              -  mov [rbx+000002E4],eax
"CoD_SP.exe"+35D853: 8B 83 4C F2 00 00              -  mov eax,[rbx+0000F24C]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>102</ID>
      <Description>"No Reload"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : CoD_SP.exe
  Version: 
  Date   : 2017-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(noreload,CoD_SP.exe,8B 84 AF A4 06 00 00 48 8B 5C) // should be unique
alloc(newmem,$1000,noreload)

label(code)
label(return)

newmem:
mov [rdi+rbp*4+000006A4], #99
code:
  mov eax,[rdi+rbp*4+000006A4]
  jmp return

noreload:
  jmp newmem
  nop
  nop
return:
registersymbol(noreload)

[DISABLE]

noreload:
  db 8B 84 AF A4 06 00 00

unregistersymbol(noreload)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "CoD_SP.exe"+21993B

"CoD_SP.exe"+21991B: 48 8D 8F 94 06 00 00  -  lea rcx,[rdi+00000694]
"CoD_SP.exe"+219922: 48 8D 54 24 20        -  lea rdx,[rsp+20]
"CoD_SP.exe"+219927: E8 84 4D 30 00        -  call CoD_SP.exe+51E6B0
"CoD_SP.exe"+21992C: 84 C0                 -  test al,al
"CoD_SP.exe"+21992E: 75 0B                 -  jne CoD_SP.exe+21993B
"CoD_SP.exe"+219930: FF C3                 -  inc ebx
"CoD_SP.exe"+219932: 83 FB 0F              -  cmp ebx,0F
"CoD_SP.exe"+219935: 7C D9                 -  jl CoD_SP.exe+219910
"CoD_SP.exe"+219937: 33 C0                 -  xor eax,eax
"CoD_SP.exe"+219939: EB 07                 -  jmp CoD_SP.exe+219942
// ---------- INJECTING HERE ----------
"CoD_SP.exe"+21993B: 8B 84 AF A4 06 00 00  -  mov eax,[rdi+rbp*4+000006A4]
// ---------- DONE INJECTING  ----------
"CoD_SP.exe"+219942: 48 8B 5C 24 50        -  mov rbx,[rsp+50]
"CoD_SP.exe"+219947: 48 8B 6C 24 58        -  mov rbp,[rsp+58]
"CoD_SP.exe"+21994C: 48 8B 74 24 60        -  mov rsi,[rsp+60]
"CoD_SP.exe"+219951: 48 83 C4 40           -  add rsp,40
"CoD_SP.exe"+219955: 5F                    -  pop rdi
"CoD_SP.exe"+219956: C3                    -  ret 
"CoD_SP.exe"+219957: FF 64 24 F8           -  jmp qword ptr [rsp-08]
"CoD_SP.exe"+21995B: E9 B5 67 EC 0E        -  jmp CoD_SP.exe+F0E0115
"CoD_SP.exe"+219960: 44 3B 0D 99 D2 92 02  -  cmp r9d,[CoD_SP.exe+2B46C00]
"CoD_SP.exe"+219967: 49 8B C0              -  mov rax,r8
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>104</ID>
      <Description>"Unlimited Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : CoD_SP.exe
  Version: 
  Date   : 2017-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ammo,CoD_SP.exe,8B 47 10 48 8B 5C 24 50 48 8B) // should be unique
alloc(newmem,$1000,ammo)

label(code)
label(return)

newmem:
mov [rdi+10], #999
code:
  mov eax,[rdi+10]
  mov rbx,[rsp+50]
  jmp return

ammo:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(ammo)

[DISABLE]

ammo:
  db 8B 47 10 48 8B 5C 24 50

unregistersymbol(ammo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "CoD_SP.exe"+1F93D1

"CoD_SP.exe"+1F93B5: 83 FB 0F                 -  cmp ebx,0F
"CoD_SP.exe"+1F93B8: 7C D6                    -  jl CoD_SP.exe+1F9390
"CoD_SP.exe"+1F93BA: 33 C0                    -  xor eax,eax
"CoD_SP.exe"+1F93BC: 48 8B 5C 24 50           -  mov rbx,[rsp+50]
"CoD_SP.exe"+1F93C1: 48 8B 74 24 58           -  mov rsi,[rsp+58]
"CoD_SP.exe"+1F93C6: 48 83 C4 40              -  add rsp,40
"CoD_SP.exe"+1F93CA: 5F                       -  pop rdi
"CoD_SP.exe"+1F93CB: C3                       -  ret 
"CoD_SP.exe"+1F93CC: 48 85 FF                 -  test rdi,rdi
"CoD_SP.exe"+1F93CF: 74 E9                    -  je CoD_SP.exe+1F93BA
// ---------- INJECTING HERE ----------
"CoD_SP.exe"+1F93D1: 8B 47 10                 -  mov eax,[rdi+10]
"CoD_SP.exe"+1F93D4: 48 8B 5C 24 50           -  mov rbx,[rsp+50]
// ---------- DONE INJECTING  ----------
"CoD_SP.exe"+1F93D9: 48 8B 74 24 58           -  mov rsi,[rsp+58]
"CoD_SP.exe"+1F93DE: 48 83 C4 40              -  add rsp,40
"CoD_SP.exe"+1F93E2: 5F                       -  pop rdi
"CoD_SP.exe"+1F93E3: C3                       -  ret 
"CoD_SP.exe"+1F93E4: 48 2D C8 EF 96 20        -  sub rax,2096EFC8
"CoD_SP.exe"+1F93EA: E9 89 70 35 00           -  jmp CoD_SP.exe+550478
"CoD_SP.exe"+1F93EF: 90                       -  nop 
"CoD_SP.exe"+1F93F0: 40 53                    -  push rbx
"CoD_SP.exe"+1F93F2: 48 83 EC 20              -  sub rsp,20
"CoD_SP.exe"+1F93F6: 66 83 3A 00              -  cmp word ptr [rdx],00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>105</ID>
      <Description>"Unlimited Grenades"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : CoD_SP.exe
  Version: 
  Date   : 2017-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(grenada,CoD_SP.exe,83 BE A4 06 00 00 00) // should be unique
alloc(newmem,$1000,grenada)

label(code)
label(return)

newmem:
mov [rsi+000006A4], #5
code:
  cmp dword ptr [rsi+000006A4],00
  jmp return

grenada:
  jmp newmem
  nop
  nop
return:
registersymbol(grenada)

[DISABLE]

grenada:
  db 83 BE A4 06 00 00 00

unregistersymbol(grenada)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "CoD_SP.exe"+5BD969

"CoD_SP.exe"+5BD948: 48 8D 0C 40                    -  lea rcx,[rax+rax*2]
"CoD_SP.exe"+5BD94C: 48 8D 34 CF                    -  lea rsi,[rdi+rcx*8]
"CoD_SP.exe"+5BD950: 48 8D 8E 94 06 00 00           -  lea rcx,[rsi+00000694]
"CoD_SP.exe"+5BD957: E8 54 0D F6 FF                 -  call CoD_SP.exe+51E6B0
"CoD_SP.exe"+5BD95C: 84 C0                          -  test al,al
"CoD_SP.exe"+5BD95E: 75 09                          -  jne CoD_SP.exe+5BD969
"CoD_SP.exe"+5BD960: FF C3                          -  inc ebx
"CoD_SP.exe"+5BD962: 83 FB 0F                       -  cmp ebx,0F
"CoD_SP.exe"+5BD965: 7C D9                          -  jl CoD_SP.exe+5BD940
"CoD_SP.exe"+5BD967: EB 29                          -  jmp CoD_SP.exe+5BD992
// ---------- INJECTING HERE ----------
"CoD_SP.exe"+5BD969: 83 BE A4 06 00 00 00           -  cmp dword ptr [rsi+000006A4],00
// ---------- DONE INJECTING  ----------
"CoD_SP.exe"+5BD970: 74 20                          -  je CoD_SP.exe+5BD992
"CoD_SP.exe"+5BD972: 41 B9 01 00 00 00              -  mov r9d,00000001
"CoD_SP.exe"+5BD978: C7 44 24 20 00 00 00 00        -  mov [rsp+20],00000000
"CoD_SP.exe"+5BD980: 45 33 C0                       -  xor r8d,r8d
"CoD_SP.exe"+5BD983: 48 8D 97 F8 04 00 00           -  lea rdx,[rdi+000004F8]
"CoD_SP.exe"+5BD98A: 48 8B CF                       -  mov rcx,rdi
"CoD_SP.exe"+5BD98D: E8 FE 47 00 00                 -  call CoD_SP.exe+5C2190
"CoD_SP.exe"+5BD992: 48 8B 5C 24 70                 -  mov rbx,[rsp+70]
"CoD_SP.exe"+5BD997: 48 8B 74 24 78                 -  mov rsi,[rsp+78]
"CoD_SP.exe"+5BD99C: 83 8F 34 05 00 00 02           -  or dword ptr [rdi+00000534],02
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>107</ID>
      <Description>"Unlimited Medkits"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : CoD_SP.exe
  Version: 
  Date   : 2017-11-06
  Author : STN

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(medkits,CoD_SP.exe,8B 48 04 03 4F 14) // should be unique
alloc(newmem,$1000,medkits)

label(code)
label(return)

newmem:
mov [rax+04], #99
code:
  mov ecx,[rax+04]
  add ecx,[rdi+14]
  jmp return

medkits:
  jmp newmem
  nop
return:
registersymbol(medkits)

[DISABLE]

medkits:
  db 8B 48 04 03 4F 14

unregistersymbol(medkits)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "CoD_SP.exe"+366146

"CoD_SP.exe"+366128: 48 83 C4 20           -  add rsp,20
"CoD_SP.exe"+36612C: 5F                    -  pop rdi
"CoD_SP.exe"+36612D: C3                    -  ret 
"CoD_SP.exe"+36612E: 8B 48 04              -  mov ecx,[rax+04]
"CoD_SP.exe"+366131: E8 7A 8B 17 00        -  call CoD_SP.exe+4DECB0
"CoD_SP.exe"+366136: 48 8B 5C 24 38        -  mov rbx,[rsp+38]
"CoD_SP.exe"+36613B: 48 8B 74 24 40        -  mov rsi,[rsp+40]
"CoD_SP.exe"+366140: 48 83 C4 20           -  add rsp,20
"CoD_SP.exe"+366144: 5F                    -  pop rdi
"CoD_SP.exe"+366145: C3                    -  ret 
// ---------- INJECTING HERE ----------
"CoD_SP.exe"+366146: 8B 48 04              -  mov ecx,[rax+04]
"CoD_SP.exe"+366149: 03 4F 14              -  add ecx,[rdi+14]
// ---------- DONE INJECTING  ----------
"CoD_SP.exe"+36614C: E8 5F 8B 17 00        -  call CoD_SP.exe+4DECB0
"CoD_SP.exe"+366151: 48 8B 5C 24 38        -  mov rbx,[rsp+38]
"CoD_SP.exe"+366156: 48 8B 74 24 40        -  mov rsi,[rsp+40]
"CoD_SP.exe"+36615B: 48 83 C4 20           -  add rsp,20
"CoD_SP.exe"+36615F: 5F                    -  pop rdi
"CoD_SP.exe"+366160: C3                    -  ret 
"CoD_SP.exe"+366161: F3 0F 10 40 04        -  movss xmm0,[rax+04]
"CoD_SP.exe"+366166: E8 55 8A 17 00        -  call CoD_SP.exe+4DEBC0
"CoD_SP.exe"+36616B: 48 8B 5C 24 38        -  mov rbx,[rsp+38]
"CoD_SP.exe"+366170: 48 8B 74 24 40        -  mov rsi,[rsp+40]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Signature>
    <SignedHash HashSize="132">0D+iQgdzpMTAI}7e[]%2dwi}^8rxUFeKPLqw[;%XWO5YXNcqp6Vt25qWv5N3C!Sr#z=}i)5ky[l);88o*wcnT%B@5PC%E-Es#r8^gsNk()3Rn!I5@UY(wIIQi^:Xu=[9%9aYmJ@HO1W*$[b=aHol[5CJk*lN/ZPdW1%04</SignedHash>
    <PublicKey Size="323">CIA2cQ*y;zWn;@=c[33%PA({!W?TY:Y-MwEa%FaJY._.LZ+DGQZ+7bK0RTlqQ#C;W0005Nd,bJ2aZE/{)[g11up9}h-h:-.dX$Uuo2VIuNbG}FhM]dZ#F:19Q6J:.CY;JLUaF*Mrd8hw-g)veO^]y50Hd.{,W0_9?LWuhaP;2ppkn4$7Y!dKb/Aeyh:tak?g:=Mm-^:roKW*lYux:Bhn+^XD$QxcDlO-dP#I-fZqfjR00000]a2MWq]^#OcC8[@8@,;xC6y6sxu8!wf!iwb0L?tW$X=KGvY^9wq*=V9qQGF7nXROuac2jA,(]93D2MoSwgKx[eGGEl3E)EVab)@s3AQ;:O2*kNW8tNa^qZY@-2SQt!ezy}CNwBZU}+!+xt.pI1#uB!K63o%OXpGRw+dA</PublicKey>
  </Signature>
</CheatTable>
