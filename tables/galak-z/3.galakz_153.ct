<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Files>
    <junk_151023.lua Encoding="Ascii85">=K@94,eWtgH39M.222f#?kp@.r,e28y;.z$k-KqXG,v.9RyAm8Y%!rofus]qw#jeb@Oz=kIri={MHgt$,MMBe(6*F;!_{@M_KSgh9]@g/O11N/teUo7PFiu9Uq5/yxhyAbUX:o093Gzk/.B@[o7ZpNp8fc?qqE+3tFyUkRozI?,;}v0J).P:];HH%l1C4P::UdCQK,f-I8(wiplXqoB3rhV$eKpYFAA7xCUw4Og)?f2vP4p%ohcFWNkoyC;d]{^;A3ETNdc5f7;cTP1BpMHMK*3U4nXt+5c]xEy6v)q8/CeNp3q8_s!Pkcs9-f;B13e=i:iedpyuV)01(6Xh9Vh{Qu0fHNz1(zg[byj%-/}:RCzgt+{P#nA3c14#8XEEW-Q{y,DeheF$[UVAVk{XeyHks*]{tWcC(.Z4F-Ds=uDZcZ,#VoxXeitpn:w,DjH;$L/?ocGO:,[%Bs!KywLm{gc9#YM3Ob2RoW}s0-GC3G3gIcIybuscCro7kKGJWM{2PGuYKMx,Ogi]Gj3Vp=U?ix6C34Y?qmqRrgsksk(9EQ(oPd[=NIg2f$,+HasCf%I(*)2Qv9)GJ2.t%:.y8GNpH_k.MZ3Xd52_XpEklep3ZdE!,PF^R8tIA:eVCoIP6).Dg4#xjU_k9$KTpoVJr{@.W9ddXhbl:U-?7F:HV#_#sUIZF-4OW7fM]0G?C_(c38s8ToqF-BB7tFaykEjW=2_3ng)UVgW%PBY-Tn_d#il2tO4n=0KRBWxa#t/QEij^@2yER[.=BI@Azoq)Z#f}zQHr2d@{,E(+?I!CYtD_3pY.P49e*4=TXf#s(3U3c2r$!.ZULpL}F6g@1A71CW#fS%@/xD@0HBN,w.*D1]@A[fZ:-_DDipMs#z9o8tIgv%;Xp_[cH44YyN+a4S-%Adjt:Bl}}Z!gBT6R^he/aSs0%D3s],1Irnk=0wwUcdAjOik%0WlZJ?]}D$C#fK(X7o1RxeL4Ee6vQN54wvcp+]XkP(T2cU_8/o0m/+}?/qHYo%F]@+BMI1E0Z0*S%?+mf)bQc-I2i3_b8yhKbL2*o*?Ri;{9j);EK.Z;tyQKV+8eLPW3lU:DE!z2ceoRjAsJtT[DvQ{4l1EKm5YN10?3LRDRc=LNs3W@[G-F=92,ER[AvBlg*-j+P2(xRTZDbd-Bw]URUi4i*Ejh6rj6o,pXP^mD8;uLhXFOPf4bM5I}2r=LYrp./VeA#?n[kG=%9R}u7czPke+@4ov.p5l4vDV9?hrlQE+4T?Tq$pexanuuE)w^}Ga3Xs+V5uJxv.FG{Vo!@l#]l^:0ZVJtLY61lwY*ejvb.2kZEqF_-W8Y0:QL(nS}yPa7pm,fX-9^?d?=Eok_H${7651opce5hYEZ[MD{l9!#YY5(ta71h2F5vr=hg?_MFiUB0Wj.O?+/urWe*Fu]6P#O:.kwd0kb4KRZF/(,,Xp;SzaiSv3ncFm:8;#sYm5lQ@4^kml,jERNDaQQf!N%PAn+(8-9@B;i{uMFJ7lHMc@rXrit(E+7kzEMII-romJDr;9qd-:52meW]Ll*V!_B)/@*NPjR7Pkc,7#!!h2{nxSf/yUVg{m9JbTE/*YIL*97c2P/FU}g*4{?jqGv4t9xLP8!Mlc!iQwydgHS+7IQ;OH,wcS/R!1vF_4yrAw#S+0y3jqM!X+D,2[Me,*UmwkbdFe*Q%;s0ZcU!lpwl?04+9FG4wfjxZ7Hf0zW1c1=V5:oS4qH]_*7lctbMy*!!n[EFY+@#HqxHfKe94T*{$A5XfoGlGR$x7vN7=+0tg;lGasNJkbwp)6j4anHcKk#6u@oUc9xl]%@4S9WE@jpM87H(0J;S1i@07gcoFJ[i!;rPV{}u31UqSbO#g%0_.D$0RqBf.xd5c4m+RchqP_:KJXss31@DnbT_h*tLnO^-.{Sa;iu%?LzWk}tCty64v92k-+f^h.ewTc)UHqCsg2-TE:*?F8d33q@uCV2S_[}[:YJWTFBY$81!+t;f=VQi%@=cLP,!:FCrz03)L3W2fsXA8yLw)M(do.4X5xnwjF{v4VXtiK!j+1N[5kRWwi5wyY@k[=qO%372{Y/6zt98(xTp$Q0hPKTHW:0Tv?Cgmhhdu/xcne/VAQ1BKoO27=w*}W4!#eDdc*DdPR9lBurn*wBbE#Ej4[75pChf}h@!wVAxcOXu)RAGFiavYCH.64fqt+lbU%[;Wl=$%NrNO}3XieuEOTu+u%eJZtlB{XY{JLt/vcH6sZv6X?;0h@V}#p{z.Qujnd#rPv#b@HU!kz?u9a!/Ar#QKYG.BeBB^}H@WNM2[W#i)$77FpC*^,Cw[*oSRfKsUc4TBMJuer[mO22G*OCVJ4I1%TogMiZ0)bKK6:=5AtGrjFxY#Se3YkqNT$$}71:nQqoVD9I)E)+%,sl%RSlH;eaL^pK2$orlhTD(]Vk}LjfmYf^5WHPv%to?[*:wIJ%y/d=,y.h70e@dzhlk..2pr9FP1p0%^/76b%gLK,9CK10@5iFQq,;P7:UEZSwqn^nc$+{vp1=BU4saJ;Qk4?B0hEl#Kr+8@M$*U@@5WX/k[nvlV5,;Az!HugeyQerS6k7?n8;n)TJ3$W)PxUJgY{v!9c$VKi,.P9b^A^nBVUZCDn5:))iD#Xt6inhNUME39t@aGM/e,x,;[v=+1v@eKMShIyuriR_1ReX77A9O!xEPmq!y0xARP{o$0ZFzPN-;/E[uG_)bA0gb?B!Oc6GUNZHU#+ob,BK$r@dr2]5Ci1dyH[Sjmz)+ah:2TrlfWdwDA2XR+$WtEx1IIjt6p)@kB@9=z@OK}MW=)71U,QH]hVXN)orPEOute02/G?2s3C..%y^^UX1knZBuN:yzYwb^4#?lMv89+t!1WCI6$B!#yPV%qqfd0Imvj3t81ugsw}_o5;lt.b^f1R.OP}k4(2J6Wu;pUvFcG;-V2NT?z3#]*i,C;%HVu2xY;qzpnMd]:=!o+xYUj!rHxhE/Wbn8ZQBc@hZhOFrH:Scpf?}=0uAdP,#x5Qgt/unQq3}P8RA4Q94jCt+#eU-9i,4uXK58(VHJNIli2=AjbIw/cQ[Y[3qBjj@2YHz{4#Iv8*w?La=0)zgCQXmg8.wU.%X;j/:;fLgox]zLkx*K0cvYp4sXDDeGSz[J7crff3X9o)4-p(wdvrR+G@}P+u%mP3j/!EV{4K.p])%e-#Cm6j1]([fqJhOxyric%xa7[?QJ]x=BW,ZZIqO8yZ)viy$Hac}pe]h9(50u:v)Ek]aq]#,Qplq5cXyh3CTb3w5PCrnq!LZBd_fYwc*G5.dBU3D0aTj,$#9IfAwvLa;7n@L_ToN)ta{%7sTP6v6}ouPI/b2o9y?*E-KMw(ZhO]7SeGESs5{FRBF;rFcB?,ct{CMfxsXl;K}Lcl8K.lv8[deaR^2*dxJuWY:/{E+9HcKaImTW;x{-EeiLx[nzbu^!a^[Y5^E0e:n0K?9[WaJ%4X$MX.PjxvsQib-C+D=]6zLpuby=.O#1sarkua$*eoeqpl%s]_2W{J{t5fRrFl!0,C5j0SgNrwI)hWQZ=;PliSCPn(4n78f=$vfcCz-G$YiQR,oO:/gDDCJ@H4!*!?(rdXW+ZLUk{J^YV1vBT5N+b2=XZdlq.%hgVz8HWK}ryL}OJTTr,jw.a71hA^%t=gs*IxuuiC38!Tyli;ZeL70DC[iUKMP;HW]OT+NyBZSG+H{lO(x_0j/m8L]7yCv!lj$BE^Nw:Zozc#trne5TY?%ibg#9xPp@5pQxzn.JPn_=Tadm?kCoSeLPeRlr#=C^4kJ9[c?7.Jkecjeb_Pd:011RvEc@Q;.vD??ddoXn==*zzd]rc;$%#KLdG#{.p(I:ocv@2;hgRsKcdI#PvBuQ6Um+!pGbt74gLeZm[FaS^_CW])XVvkp6J:9^rWEw@H=q6JF41@3e{xTtcAshfiHsiY+0y27*ktueYK%vP@AfQQ7pL{L+?uXOK#E;MG=]$hE.93:[cdc2hkVfIuXlH+?v3v53YXn2!*G:G;*Q,??;z.Nnx_Ev#cGYwYkz@q/Y,ihW_4Kww!oPj45:1[*Hs{@g%GzZ@_(]6gso?Q.Pzxxf2urvxhDlgB$d=fy!fY(OhoVdJ_]c(/8b+rh8@J/!3:4uMLVsNIeTdhh.G14BygFYxGb^DQ5Bbg-lK7%ve=h_epOw%obU@8*XPP5no[8m9I[/@ZvLgD3Cb=weczj7TOcM6r/l{nm?63lobX6ZSyM!.Imx,-d#waT9^Asl$h@)^t2c={G^vbBaVda,0CKE%zDejV-5*$b+FXf0o2fbpP1^w{0%RSai:dq?qtj(E:9QpjeKr;FNLiC0zyJE?qdT6I7CMNjlU=(qng(_?gnqvw8e2#pO6R0q+Iivyx*,sD-sO!,7*im!LQZxdelOVcQHf}XUwboGZ-^;tf=]I*Aq!O#nN4+(3Uf#GG5Btd{GlU^qe8yijJ2rNd2aQ1Zc/:eyLnzgc1Z)gJONOh03c@mLsS+IV#Hm@45!u*qH7%g+3*.:L=_DqZDuJKzpWdCMvkmZf6I,arZlyNijFNo4NJD2uM(9EPbv4m1tvidpC=]BrhKYP*{tju/(=NXf%C_RfBF[S6-Dgks4fl7mQP)it%F?mlEVfv?yl}TgHb3-Q[060B8e_aoEr@3}S-XiH;1KVu?iTsA,(S[m0*zwn/47B..(Zw#PCET05omA(oldS7d2FCk*kMj2)/=lVp-%5]X,mq_Mf6ekjsAeIze$p,Ro$EjTPaj*q$v?M_9Bx0Rhs[.L5?!0bs.6Sn*+_dT0^/QpO]h!i8ybsF3A4$2z6^W9N8Q#p=6%oVQw)#tz,NA/0a1OZwKZ,H,xm2^R@26I.b{lpdXLzr@crOUO3N$:(i8Jb]Pg?Fn+}@MO[oSjZk[?V9Qco]d6t+vi:LNAXu:C#G]87g/L(JYIVXxdm^%FdFgrmBvo/?b3Mkszs]kFQul^w,Br9V*SLH1oYy_cxATDauXywDd^*(tD]-2s@k{/x[;!#I9?xareFn=gS4h!%5uR-ds![p}dYc%ZtY5bM30w2wKi2j}ykBAry8t?W0CQkFK,/X!jKq;t5H.*;*Rv-T*0n;9ve,AG^iaIv8Qt:8cZ,,7X=pvzk(c#]EtnbXO=1_8uLVrw^l^XNzkYE%BccSVE+_]Mli}n2/J5vY1-eZpBJmsO%J#+;m0(!RC:U?TVvc-F2d.@2U7xXtFy/r}.0-%8R/.1;!=*KNR=*Dq$w@8lUvaaC[uN[Psk37V(A5h{hD@ph?iu2KXg%XQ*w.1BUr5[i/.]5MF:/BMzt;pCX[pAm8U6+Bbt8ZiS@([ufddx2m#8Afemfx/cg]@n5#2o+K70x#L)v0K]Zon%z/./(EiHn/70cs0*W!$.r/Xzk$mZRbL-j^VEuQRzTwdi5*#yRdfws?i1@pYVpnQpSK9WYdMPKikP9kx7*i0d(k1{*C78UbkZZY,o2P!yS_Ywxg)z%H2M:s.ie#pmbg=z3l_lPe%$QvDuY@KHlNcl^waFR?*Y/g*as+MZ{I7eM3v9h:#Bg4A?/.5fot!WAghi?]:S$^P2Mti4,8f+,fmxaHz%^Pd}eS-rpIZ-$(d,^-mB,TC2!flK:crt:Q</junk_151023.lua>
    <MRAA.lua Encoding="Ascii85">r5W2!,);qw[5q1M+oWF=BHN+G)mZD6iAX?J)I)L-pn2)WBDY-*makJTH=((Kx6e6svCEfcv%4ff,vi(6UWdQ@^imOj;h$FE+K4,k,FaZ,A:2]m1Z486.$)lft68uWSFNb7nuZnYobi9(#yqV;AR;73/Eo4!.qIN*(6leWpKd}jI.-nnZ]J1mUHnllyu/0q;B+*oW06*RiCJ4GZbfVA]?VN@K@}$q+@v$_Dgp=RV1P.5hH;}Dy{57GIFFj/@n^RfLj-8%+4{gANIe]P9#{}?6D::EMOc_2.sy=p)Je[!Qb#FofP(!p3F)/@y/osZK=%vLILb-QSO)UqR#_v?0:mjCd/v8X0JiAiAo[R,pj!^EI6yS#IfA:2)xr$Y7@MFXtXST#0aNo^SxEl@V;B#hv2dL.NBSiQ-p/:pKN}M1=(+nySw2pi(tKijGssf!YN}YQe=+@ti3$d:yU)ns]0gu/E1o!#rN!^-)_@zKDoHqNnmlcUGgh%-0)306K7ny}#P1st=8^)e5Bzb@rjn.CxF/y-fnWaeRtJx:uHuz25v4hV(.FoZV=3t8k{8?m6uV%HxBzT}uF{xJx?ZUJkyxFJbi?V.S[$cS/3h^-*)5RKD4/CEYu3nA2Wt(eCP6hC!J$kjvnTIzR:OS-0iOzPlfEk:5kCOUKw{7I3x]BGXAu,uiAzE4)h)$v!f?XO=@LOvO!LthKtqj)rRy0n#$v)m?*Ts+2rAQqG+!V!(8wPmu[JL+mX)lr;RrAYyTX!Tn[{n@kOlaN0_7%64kZwsEl5iRzAPb5NwpzcfoPOKHQj.@SOUwoSTo+pvqXZ2?,wLcN7vCQ?%;,]h2#4cp6?%0)D7Vv.]5@=QBrj@RVfY]qWXY@dhllAr$bkWp2-E1vb/(LmCnQtvWaAk8YgJU9wE)mRSC@.oT-;u[e_(^^^%[yT3^eAIA(As#{HhC,0^iMsuCa)$0AIYqj)j$ilHCXH7I(l-IRjw6nIz_CED}f[om!T4{?*^244zSRNARfTxj/oh5X3D=b2k_=n1@9hPrV)V2r*3alu?us%5JWyI-%7V4lY}[Tey[R2BiU+7:Ongq]e/sdxZ!P@g4pAkxKjV@2^GKmTl[JQcexctBXeRdpG6q%QD4Br9sjT#Kht3r[PG=HW@7bnb!n)9Jlnbb6tEl_[xi2k-G$AS.P1[c:CKeAg+x1q#-8;^NZ(n1nN;A0ht7sx5[8^+7n37Pm=-mSGPB8FM9d;{Eb(-:%%f!W$5pP$F0)kfTZp3_I7)@oj0Qjh,DCzkfepE^:AgJ[StX=)KSA?WVLI:30@bHJd+lcE3dedI_6ZM=Z_2b@Uf.SJ_l*3OK[s)Z,P%^OqWPJ}s+LPSdyPMz%?K.l63tz}Id{48Lz2=[E/v47;Odi5=%*oRKq0r8{hjyi%^iKDwb;tErkp]fXLmZ?N-?l,W?%v7pP2i8:wyNP.}/-AI!s,C9+=/-uEeq[T8@dzS-#mp4Wg(z@KHsiLw%9U}9Kbe*.3Ar7.[m]Vov1(_9fkN}+M#QIdFH0*34O})Zwc/z#WAU9CDUn}bnh63!$@Z#Ym59O7zrLEifl6J{ss**gP!3K03-_{W5Q,9?tU3P${VK-y;W3qLWTMFpIPQ//{RP!.(,8rIu)F(p;zQ0{av}Xdz-[RuGCbr;Y5a56@a5Z9=;hSGV@V.//yq[Jr4?x;Yz8oh,Dj:RA;^8$bc_%GY@QA+JtX5}dz4=u?C(43YeBiX9DUIk[UQ8)bU(23=WF^VgZag3iZ!l6/S#=kbmL0xYo{ckBkPs{0DNWA-cCqvZ2]AMdK_nftk6Yv!SNzg2+sDJ7uXlpE[)p2#9j4Q#;4Daz78MHy:dtfB2nB(qvJqFAL,Xy;3lh-OD(LVR5,;QqVf%2;M}+-^U1b]=X,q5v!5}D#QV[N#:R^Yw/I;G,spJuhS!#k.8q}JuWF9cjw3,r+(hD=S,[+=6d}XcT$lCZI)DxUvw},JA9O(-m[71@PdRqcd$VkQqd!vt4QGnf%#Ix28DD}M,g[lW^mh(S+5oPQP*L?qU]+(ART!h#$J%4#tIgvHew6(Y+X8y]wz4AkB:*U7ocyzSqbQjJ^3)lZ2WiK]Htg,(MhI.uTEgfZ#BAxE3RNoVmRLaIJ!dL=cRvDJ@aJ*q8A.JD(S9sH1dxZH0ywWzA-8GG!mb68Ex6Z+_4PzzEw-oBRD5]_%D.g[J660q{S,pN02q#6r)9:DZ2Cqc.JSn+S?$#)@l5dgN6h4(k7J1{bYyRWiN:LH{*aBM7fM@USRk{Dtl_!J./SHB_n.OyYB:yae.u0q7FMwNbI4xwTqN!y#ox%*}b*94N^Z$mgkH-+O#}?bFl,McW^f;3!]Mwi6*4AvecB5cLoPxCjx5j{moD5uOA^Wp^p@MjEENnGYQjp@NB]AZo^i8%3?eL5cyZ,fZI9/;UM#dwYEcC8rSagGf,TFpN.Mp1r(={DIvEXLKv7;%ox/*0;sJ#,1w_q4V5[[RubLvny[RMZIif*guE}(W#=Qvg8[lLQ=z[68^$)84L7l_R-ts=tjX7w!y(%MC*U#n5bti.v,BBKi,TG*_mhro8akR!vYtuJ)?bRWGPN[JOQ+KFP1,moA8!-S.fR[bp:@SqJOyESmPwVK-d])Sm^(=YvGrGc/fH3rws(.]^*JTpzg^ZQTzoZ)eW=_kLNHn=j25-cZeN=v+kp;{_X1l?zm-/P4=VC.MCx5et*B7D8TS@*h8L4ky0pSz=Nm*;^/T/}CU-9}H)W4O-hksWR_przW^.6RUmrGYCBTq?vJp[Z$z8sNR+l4KZwYP%ywi]qe{l2EBB%(3@7uXU3GMe=eu3Fc?_VdBu*F{Xxdi#lfoD/QZXuSb*k@zaLpwPliS*1+ZUjJR4U+Oqk?XYy]CFFl+7+:oKJv^opT:n4+c$VC)kO+ve,ab+UDhw(1WU^5iVSD:45T}MlN%[,D.M]7vpK;3!dzoN^bNoIcm</MRAA.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Galak Z (click 1st)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck==true then return '' end
--

-- common function
function loadTableFile(n,mode)
  local hdr = 'loadTableFile: '
  assert(type(n)=='string',hdr.."input should be a string -"..tostring(n).." of "..type(n))
  local m = assert(findTableFile(n),hdr.."can't find table file -"..n).Stream
  m = assert(readStringLocal(m.Memory,m.Size),hdr.."can't read content -"..n)
  if type(mode)~='boolean' then return m end
  m = assert(loadstring(m,n),hdr.."lua script load fail -"..n)
  return mode and m() or m
end


loadTableFile("junk_151023.lua",true)
loadTableFile("MRAA.lua",true)


{$asm}

[ENABLE]
usemono()
globalalloc(__,$4000)
__:
dq __
__+08:
BitNess()

__+2c:
dd 1

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>114</ID>
          <Description>"32-bit"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
assert(__+08,32)
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>134</ID>
              <Description>"currency gain multiplier v2"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(add1st,"PlayerResourcesScript:PickupSpaceBucks")//int
define(add2nd,"PlayerSaveData:AddSecondaryCurrency")   // int

[ENABLE]
assertNot(add1st,e9)
assertNot(add2nd,e9)
globalalloc(_money,$400)
_money:
dd _money,add1st,add2nd
_money+10:
dd (float)9,(float)90

_money+20:
readmem(add1st,24)
_money+40:
readmem(add2nd,24)

// part1
_money+80:
ExReassemble(add1st,,,_1st)

fild  dword ptr [ebp+0c]
fmul  dword ptr [_money+10]
fistp dword ptr [ebp+0c]

jmp   add1st+_1st

add1st:
jmp _money+80

// part1
_money+c0:
ExReassemble(add2nd,,,_2nd)

fild  dword ptr [ebp+0c]
fmul  dword ptr [_money+14]
fistp dword ptr [ebp+0c]

jmp   add2nd+_2nd

add2nd:
jmp _money+c0

[DISABLE]
add1st:
readmem(_money+20,24)
add2nd:
readmem(_money+40,24)



</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>137</ID>
              <Description>"missile ammo  &amp; shield/helath regen (+1 per 0.5sec)"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(getammo,"MissileSystemModule:get_ammoCount")
define(setammo,"MissileSystemModule:set_ammoCount")
define(maxammo,"MissileSystemModule:get_maxAmmo")
//define(maxammo,"PlayerMissileSystemModule:CalculateMaxMissileAmmo")
//define(mnuammo,"DatabaseMenu:GetCurrentMissileCount")
getmonostruct(PlayerBrain)
define(pmissle,"PlayerBrain._missileModule")
define(ammoget,"PlayerBrain:Update")

define(entity,"Module:get_entity")
define(damage,"Entity:get_damage")

define(upshield,"ShipShields:AddShields)
define(uphealth,"DamageModule:IncreaseHealth")

getmonostruct(DamageModule)
define(shield,"DamageModule._shipShields")

define(hpercent,"DamageModule:get_healthPercentage")
define(spercent,"ShipShields:get_shieldPercentage")

//define(recharge,"ShipShields:TriggerRestoreShields")

[ENABLE]
assertNot(ammoget,e9)
globalalloc(_mammo,$400)
_mammo:
dq _mammo,ammoget


_mammo+20:
readmem(ammoget,24)
_mammo+40:
ExReassemble(ammoget)


label(regen)
@@:
push esi
push edi
push eax

mov  esi,_mammo+10
mov  eax,[esi]
dec  eax
test eax,eax
jge  @f
mov  eax,0f    //     regen duration, should be 30 frames = 1sec (hex 1e = #30)
@@:
mov  [esi],eax

mov  edi,[ebp+08]
mov  esi,[edi+pmissle]
sub  esp,0c
push esi
call getammo
add  esp,10

push eax
  sub  esp,0c
  push esi
  call maxammo
  add  esp,10
  cmp  eax,[esp]
pop  eax
jle  @f
  inc  eax
  sub  esp,08
  push eax
  push esi
  call setammo
  add  esp,10
@@:

mov  eax,[_mammo+10]
test eax,eax  // activate duration, 30 frames?
jne  @f

sub  esp,0c
push edi     // this PlayerBrain -&gt; base.entity
call entity
add  esp,10
test eax,eax
je   @f

sub  esp,0c
push eax     // entity -&gt; damage
call damage
add  esp,10
test eax,eax
je   @f


call regen

@@:
pop  eax
pop  edi
pop  esi


jmp   ammoget+_LastReassembleLength
regen:
mov  edi,eax         // damage module
mov  esi,[edi+shield]  // shipshield

sub  esp,0c
push esi
call spercent
add  esp,10

push eax
fstp dword ptr[esp]
pop  eax
cmp  eax,(float)1
jge  @f

  sub  esp,08
  sub  esp,04
  fld1
  fstp dword ptr [esp]
  push esi
  call upshield        //  call ShipShield.AddShields
  add  esp,10

@@:

sub  esp,0c
push edi
call hpercent
add  esp,10

push eax
fstp dword ptr[esp]
pop  eax
cmp  eax,(float)1
jge  @f

  sub  esp,08
  sub  esp,04
  fld1
  fstp dword ptr [esp]
  push edi
  call uphealth        //  call DamageModule.increaseHealth
  add  esp,10
@@:

ret

ammoget:
jmp _mammo+40

[DISABLE]
ammoget:
readmem(_mammo+20,24)



</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>135</ID>
              <Description>"&lt;PASSIVE!!&gt;"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(DHD,"PassivesController:DealHealthDamage") //float (DamageInfo damage)
define(AMML,"PassivesController:GetAdditionalMissileMaxLocks") //int ()
define(AMPL,"PassivesController:GetAdditionalMissilesPerLock") //int ()
define(ASD,"PassivesController:GetAdditionalSwordDamage") //float ()
define(ASDS,"PassivesController:GetAdditionalSwordDamageScalar") //float ()
define(BAS,"PassivesController:GetBoostAccelerationScalar") //float ()
define(BES,"PassivesController:GetBoostEnergyScalar") //float ()
define(BTVS,"PassivesController:GetBoostTerminalVelocityScalar") //float ()
define(ESRS,"PassivesController:GetEngineSoundRadiusScalar") //float ()
define(GDS,"PassivesController:GetGrappleDurationScalar") //float ()
// skip: GetHealthOverchargeValue
define(MAD,"PassivesController:GetMissileAddedDamage") //float ()
define(MADS,"PassivesController:GetMissileAddedDamageScalar") //float ()
define(MHGS,"PassivesController:GetMissileHeatGainScalar") //float ()
// skip: GetModifiedMaxHealth
define(MMMA,"PassivesController:GetModifiedMaxMissileAmmo") //int ()
// skip: GetModifiedMaxShields
// skip: GetOverchargeHealth
// skip: GetOverchargeShield
define(PAD,"PassivesController:GetProjectileAddedDamage") //float ()
define(PADS,"PassivesController:GetProjectileAddedDamageScalar") //float ()
define(RS,"PassivesController:GetReverseScalar") //float ()
define(SBS,"PassivesController:GetShieldBlockScalar") //float ()
define(SCS,"PassivesController:GetShieldsCooldownScalar") //float ()
// skip: GetShieldsOverchargeValue
define(SCUDS,"PassivesController:GetSwordChargeUpgradeDamageScalar") //float ()
define(TAS,"PassivesController:GetThrustAccelerationScalar") //float ()
define(TTVS,"PassivesController:GetThrustTerminalVelocityScalar") //float ()
[ENABLE]
  __+1018:// DealHealthDamage float
dd (float)0

  __+1110:// AdditionalMissileMaxLocks int
dd 5

  __+1210:// AdditionalMissilesPerLock int
dd 5

  __+1318:// AdditionalSwordDamage float
dd (float)1

  __+1418:// AdditionalSwordDamageScalar float
dd (float)1

  __+1518:// BoostAccelerationScalar float
dd (float)1

  __+1618:// BoostEnergyScalar float
dd (float)10

  __+1718:// BoostTerminalVelocityScalar float
dd (float)0.2

  __+1818:// EngineSoundRadiusScalar float
dd (float)-0.3

  __+1918:// GrappleDurationScalar float
dd (float)1

  __+1A18:// MissileAddedDamage float
dd (float)1

  __+1B18:// MissileAddedDamageScalar float
dd (float)1

  __+1C18:// MissileHeatGainScalar float   -- should be scale with lock on speed
dd (float)10

  __+1D10:// ModifiedMaxMissileAmmo int
dd 0

  __+1E18:// ProjectileAddedDamage float
dd (float)1

  __+1F18:// ProjectileAddedDamageScalar float
dd (float)1

  __+2018:// ReverseScalar float
dd (float)1

  __+2118:// ShieldBlockScalar float  -- no known if effective or for what use
dd (float)10

  __+2218:// ShieldsCooldownScalar float
dd (float)-0.9

  __+2318:// SwordChargeUpgradeDamageScalar float
dd (float)1

  __+2418:// ThrustAccelerationScalar float
dd (float)1

  __+2518:// ThrustTerminalVelocityScalar float
dd (float)1

assertNot(DHD,e9)
label(_retDHD)
__+1000:
readmem(DHD,16)
//__+1010:
//dd 1,50,(float)1
__+1020: // DealHealthDamage public float
pop  eax
mov  [__+101C],eax
push _retDHD
ExReassemble("PassivesController:DealHealthDamage",,,_lenDHD)
jmp  DHD+_lenDHD
_retDHD:

fadd  dword ptr [__+1018]

jmp   dword ptr [__+101C]

DHD:
jmp   __+1020

MR("Galak/32/&lt;PASSIVE!!&gt;/DealHealthDamage",Type=vtSingle,Address=__+1018)

//

assertNot(AMML,e9)
label(_retAMML)
__+1100:
readmem(AMML,16)
//__+1110:
//dd 1,50,(float)1
__+1120: // AdditionalMissileMaxLocks public int
pop  eax
mov  [__+111C],eax
push _retAMML
ExReassemble("PassivesController:GetAdditionalMissileMaxLocks",,,_lenAMML)
jmp  AMML+_lenAMML
_retAMML:

add eax,[__+1110]

jmp   dword ptr [__+111C]

AMML:
jmp   __+1120

MR(Galak/32/&lt;PASSIVE!!&gt;/AdditionalMissileMaxLocks,Type=vtDword,Address=__+1110)

//

assertNot(AMPL,e9)
label(_retAMPL)
__+1200:
readmem(AMPL,16)
//__+1210:
//dd 1,50,(float)1
__+1220: // AdditionalMissilesPerLock public int
pop  eax
mov  [__+121C],eax
push _retAMPL
ExReassemble("PassivesController:GetAdditionalMissilesPerLock",,,_lenAMPL)
jmp  AMPL+_lenAMPL
_retAMPL:

add eax,[__+1210]

jmp   dword ptr [__+121C]

AMPL:
jmp   __+1220

MR(Galak/32/&lt;PASSIVE!!&gt;/AdditionalMissilesPerLock,Type=vtDword,Address=__+1210)

//

assertNot(ASD,e9)
label(_retASD)
__+1300:
readmem(ASD,16)
//__+1310:
//dd 1,50,(float)1
__+1320: // AdditionalSwordDamage public float
pop  eax
mov  [__+131C],eax
push _retASD
ExReassemble("PassivesController:GetAdditionalSwordDamage",,,_lenASD)
jmp  ASD+_lenASD
_retASD:

fadd  dword ptr [__+1318]

jmp   dword ptr [__+131C]

ASD:
jmp   __+1320

MR(Galak/32/&lt;PASSIVE!!&gt;/AdditionalSwordDamage,Type=vtSingle,Address=__+1318)

//

assertNot(ASDS,e9)
label(_retASDS)
__+1400:
readmem(ASDS,16)
//__+1410:
//dd 1,50,(float)1
__+1420: // AdditionalSwordDamageScalar public float
pop  eax
mov  [__+141C],eax
push _retASDS
ExReassemble("PassivesController:GetAdditionalSwordDamageScalar",,,_lenASDS)
jmp  ASDS+_lenASDS
_retASDS:

fadd  dword ptr [__+1418]

jmp   dword ptr [__+141C]

ASDS:
jmp   __+1420

MR(Galak/32/&lt;PASSIVE!!&gt;/AdditionalSwordDamageScalar,Type=vtSingle,Address=__+1418)

//

assertNot(BAS,e9)
label(_retBAS)
__+1500:
readmem(BAS,16)
//__+1510:
//dd 1,50,(float)1
__+1520: // BoostAccelerationScalar public float
pop  eax
mov  [__+151C],eax
push _retBAS
ExReassemble("PassivesController:GetBoostAccelerationScalar",,,_lenBAS)
jmp  BAS+_lenBAS
_retBAS:

fadd  dword ptr [__+1518]

jmp   dword ptr [__+151C]

BAS:
jmp   __+1520

MR(Galak/32/&lt;PASSIVE!!&gt;/BoostAccelerationScalar,Type=vtSingle,Address=__+1518)

//

assertNot(BES,e9)
label(_retBES)
__+1600:
readmem(BES,16)
//__+1610:
//dd 1,50,(float)1
__+1620: // BoostEnergyScalar public float
pop  eax
mov  [__+161C],eax
push _retBES
ExReassemble("PassivesController:GetBoostEnergyScalar",,,_lenBES)
jmp  BES+_lenBES
_retBES:

fadd  dword ptr [__+1618]

jmp   dword ptr [__+161C]

BES:
jmp   __+1620

MR(Galak/32/&lt;PASSIVE!!&gt;/BoostEnergyScalar,Type=vtSingle,Address=__+1618)

//

assertNot(BTVS,e9)
label(_retBTVS)
__+1700:
readmem(BTVS,16)
//__+1710:
//dd 1,50,(float)1
__+1720: // BoostTerminalVelocityScalar public float
pop  eax
mov  [__+171C],eax
push _retBTVS
ExReassemble("PassivesController:GetBoostTerminalVelocityScalar",,,_lenBTVS)
jmp  BTVS+_lenBTVS
_retBTVS:

fadd  dword ptr [__+1718]

jmp   dword ptr [__+171C]

BTVS:
jmp   __+1720

MR(Galak/32/&lt;PASSIVE!!&gt;/BoostTerminalVelocityScalar,Type=vtSingle,Address=__+1718)

//

assertNot(ESRS,e9)
label(_retESRS)
__+1800:
readmem(ESRS,16)
//__+1810:
//dd 1,50,(float)1
__+1820: // EngineSoundRadiusScalar public float
pop  eax
mov  [__+181C],eax
push _retESRS
ExReassemble("PassivesController:GetEngineSoundRadiusScalar",,,_lenESRS)
jmp  ESRS+_lenESRS
_retESRS:

fadd  dword ptr [__+1818]

jmp   dword ptr [__+181C]

ESRS:
jmp   __+1820

MR(Galak/32/&lt;PASSIVE!!&gt;/EngineSoundRadiusScalar,Type=vtSingle,Address=__+1818)

//

assertNot(GDS,e9)
label(_retGDS)
__+1900:
readmem(GDS,16)
//__+1910:
//dd 1,50,(float)1
__+1920: // GrappleDurationScalar public float
pop  eax
mov  [__+191C],eax
push _retGDS
ExReassemble("PassivesController:GetGrappleDurationScalar",,,_lenGDS)
jmp  GDS+_lenGDS
_retGDS:

fadd  dword ptr [__+1918]

jmp   dword ptr [__+191C]

GDS:
jmp   __+1920

MR(Galak/32/&lt;PASSIVE!!&gt;/GrappleDurationScalar,Type=vtSingle,Address=__+1918)

//

assertNot(MAD,e9)
label(_retMAD)
__+1A00:
readmem(MAD,16)
//__+1A10:
//dd 1,50,(float)1
__+1A20: // MissileAddedDamage public float
pop  eax
mov  [__+1A1C],eax
push _retMAD
ExReassemble("PassivesController:GetMissileAddedDamage",,,_lenMAD)
jmp  MAD+_lenMAD
_retMAD:

fadd  dword ptr [__+1A18]

jmp   dword ptr [__+1A1C]

MAD:
jmp   __+1A20

MR(Galak/32/&lt;PASSIVE!!&gt;/MissileAddedDamage,Type=vtSingle,Address=__+1A18)

//

assertNot(MADS,e9)
label(_retMADS)
__+1B00:
readmem(MADS,16)
//__+1B10:
//dd 1,50,(float)1
__+1B20: // MissileAddedDamageScalar public float
pop  eax
mov  [__+1B1C],eax
push _retMADS
ExReassemble("PassivesController:GetMissileAddedDamageScalar",,,_lenMADS)
jmp  MADS+_lenMADS
_retMADS:

fadd  dword ptr [__+1B18]

jmp   dword ptr [__+1B1C]

MADS:
jmp   __+1B20

MR(Galak/32/&lt;PASSIVE!!&gt;/MissileAddedDamageScalar,Type=vtSingle,Address=__+1B18)

//

assertNot(MHGS,e9)
label(_retMHGS)
__+1C00:
readmem(MHGS,16)
//__+1C10:
//dd 1,50,(float)1
__+1C20: // MissileHeatGainScalar public float
pop  eax
mov  [__+1C1C],eax
push _retMHGS
ExReassemble("PassivesController:GetMissileHeatGainScalar",,,_lenMHGS)
jmp  MHGS+_lenMHGS
_retMHGS:

fadd  dword ptr [__+1C18]

jmp   dword ptr [__+1C1C]

MHGS:
jmp   __+1C20

MR(Galak/32/&lt;PASSIVE!!&gt;/MissileHeatGainScalar,Type=vtSingle,Address=__+1C18)

//

assertNot(MMMA,e9)
label(_retMMMA)
__+1D00:
readmem(MMMA,16)
//__+1D10:
//dd 1,50,(float)1
__+1D20: // ModifiedMaxMissileAmmo public static int
pop  eax
mov  [__+1D1C],eax
push _retMMMA
ExReassemble("PassivesController:GetModifiedMaxMissileAmmo",,,_lenMMMA)
jmp  MMMA+_lenMMMA
_retMMMA:

add eax,[__+1D10]

jmp   dword ptr [__+1D1C]

MMMA:
jmp   __+1D20

MR(Galak/32/&lt;PASSIVE!!&gt;/ModifiedMaxMissileAmmo,Type=vtDword,Address=__+1D10)

//

assertNot(PAD,e9)
label(_retPAD)
__+1E00:
readmem(PAD,16)
//__+1E10:
//dd 1,50,(float)1
__+1E20: // ProjectileAddedDamage public float
pop  eax
mov  [__+1E1C],eax
push _retPAD
ExReassemble("PassivesController:GetProjectileAddedDamage",,,_lenPAD)
jmp  PAD+_lenPAD
_retPAD:

fadd  dword ptr [__+1E18]

jmp   dword ptr [__+1E1C]

PAD:
jmp   __+1E20

MR(Galak/32/&lt;PASSIVE!!&gt;/ProjectileAddedDamage,Type=vtSingle,Address=__+1E18)

//

assertNot(PADS,e9)
label(_retPADS)
__+1F00:
readmem(PADS,16)
//__+1F10:
//dd 1,50,(float)1
__+1F20: // ProjectileAddedDamageScalar public float
pop  eax
mov  [__+1F1C],eax
push _retPADS
ExReassemble("PassivesController:GetProjectileAddedDamageScalar",,,_lenPADS)
jmp  PADS+_lenPADS
_retPADS:

fadd  dword ptr [__+1F18]

jmp   dword ptr [__+1F1C]

PADS:
jmp   __+1F20

MR(Galak/32/&lt;PASSIVE!!&gt;/ProjectileAddedDamageScalar,Type=vtSingle,Address=__+1F18)

//

assertNot(RS,e9)
label(_retRS)
__+2000:
readmem(RS,16)
//__+2010:
//dd 1,50,(float)1
__+2020: // ReverseScalar public float
pop  eax
mov  [__+201C],eax
push _retRS
ExReassemble("PassivesController:GetReverseScalar",,,_lenRS)
jmp  RS+_lenRS
_retRS:

fadd  dword ptr [__+2018]

jmp   dword ptr [__+201C]

RS:
jmp   __+2020

MR(Galak/32/&lt;PASSIVE!!&gt;/ReverseScalar,Type=vtSingle,Address=__+2018)

//

assertNot(SBS,e9)
label(_retSBS)
__+2100:
readmem(SBS,16)
//__+2110:
//dd 1,50,(float)1
__+2120: // ShieldBlockScalar public float
pop  eax
mov  [__+211C],eax
push _retSBS
ExReassemble("PassivesController:GetShieldBlockScalar",,,_lenSBS)
jmp  SBS+_lenSBS
_retSBS:

fadd  dword ptr [__+2118]

jmp   dword ptr [__+211C]

SBS:
jmp   __+2120

MR(Galak/32/&lt;PASSIVE!!&gt;/ShieldBlockScalar,Type=vtSingle,Address=__+2118)

//

assertNot(SCS,e9)
label(_retSCS)
__+2200:
readmem(SCS,16)
//__+2210:
//dd 1,50,(float)1
__+2220: // ShieldsCooldownScalar public float
pop  eax
mov  [__+221C],eax
push _retSCS
ExReassemble("PassivesController:GetShieldsCooldownScalar",,,_lenSCS)
jmp  SCS+_lenSCS
_retSCS:

fadd  dword ptr [__+2218]
//fld   dword ptr [__+2218]
//fstp  st(0)

jmp   dword ptr [__+221C]

SCS:
jmp   __+2220

MR(Galak/32/&lt;PASSIVE!!&gt;/ShieldsCooldownScalar,Type=vtSingle,Address=__+2218)

//

assertNot(SCUDS,e9)
label(_retSCUDS)
__+2300:
readmem(SCUDS,16)
//__+2310:
//dd 1,50,(float)1
__+2320: // SwordChargeUpgradeDamageScalar public float
pop  eax
mov  [__+231C],eax
push _retSCUDS
ExReassemble("PassivesController:GetSwordChargeUpgradeDamageScalar",,,_lenSCUDS)
jmp  SCUDS+_lenSCUDS
_retSCUDS:

fadd  dword ptr [__+2318]

jmp   dword ptr [__+231C]

SCUDS:
jmp   __+2320

MR(Galak/32/&lt;PASSIVE!!&gt;/SwordChargeUpgradeDamageScalar,Type=vtSingle,Address=__+2318)

//

assertNot(TAS,e9)
label(_retTAS)
__+2400:
readmem(TAS,16)
//__+2410:
//dd 1,50,(float)1
__+2420: // ThrustAccelerationScalar public float
pop  eax
mov  [__+241C],eax
push _retTAS
ExReassemble("PassivesController:GetThrustAccelerationScalar",,,_lenTAS)
jmp  TAS+_lenTAS
_retTAS:

fadd  dword ptr [__+2418]

jmp   dword ptr [__+241C]

TAS:
jmp   __+2420

MR(Galak/32/&lt;PASSIVE!!&gt;/ThrustAccelerationScalar,Type=vtSingle,Address=__+2418)

//

assertNot(TTVS,e9)
label(_retTTVS)
__+2500:
readmem(TTVS,16)
//__+2510:
//dd 1,50,(float)1
__+2520: // ThrustTerminalVelocityScalar public float
pop  eax
mov  [__+251C],eax
push _retTTVS
ExReassemble("PassivesController:GetThrustTerminalVelocityScalar",,,_lenTTVS)
jmp  TTVS+_lenTTVS
_retTTVS:

fadd  dword ptr [__+2518]

jmp   dword ptr [__+251C]

TTVS:
jmp   __+2520

MR(Galak/32/&lt;PASSIVE!!&gt;/ThrustTerminalVelocityScalar,Type=vtSingle,Address=__+2518)

//

[DISABLE]
DHD:
readmem(__+1000,16)

AMML:
readmem(__+1100,16)

AMPL:
readmem(__+1200,16)

ASD:
readmem(__+1300,16)

ASDS:
readmem(__+1400,16)

BAS:
readmem(__+1500,16)

BES:
readmem(__+1600,16)

BTVS:
readmem(__+1700,16)

ESRS:
readmem(__+1800,16)

GDS:
readmem(__+1900,16)

MAD:
readmem(__+1A00,16)

MADS:
readmem(__+1B00,16)

MHGS:
readmem(__+1C00,16)

MMMA:
readmem(__+1D00,16)

PAD:
readmem(__+1E00,16)

PADS:
readmem(__+1F00,16)

RS:
readmem(__+2000,16)

SBS:
readmem(__+2100,16)

SCS:
readmem(__+2200,16)

SCUDS:
readmem(__+2300,16)

TAS:
readmem(__+2400,16)

TTVS:
readmem(__+2500,16)


</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"64-bit (empty)"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
assert(__+08,64)
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>130</ID>
              <Description>"shield recharge"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
[DISABLE]




</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>129</ID>
          <Description>"currency gain multiplier"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(add2nd,"PlayerSaveData:AddSecondaryCurrency")
define(set1st,"SessionSaveData:set_spaceBucks")

getmonostruct(SessionSaveData)
define(spbuck,"SessionSaveData._spaceBucks")

[ENABLE]
assertNot(set1st,e9)
assertNot(add2nd,e9)
globalalloc(_money1,$400)
globalalloc(_money2,$400)
_money1:
dq _money1,set1st
_money2:
dq _money2,add2nd

_money1+10:
dd (float)4
_money2+10:
dd (float)50

_money1+20:
readmem(set1st,24)
_money2+20:
readmem(add2nd,24)

// part1
_money1+40:
ExReassemble(set1st,,,_1st)

push esi
push edi
push eax

mov  edi,[ebp+08]
mov  esi,[ebp+0c]
mov  eax,[edi+spbuck]
sub  esi,eax
test esi,esi
jle  @f
  inc   dword ptr [_money1+1c]
  push  esi
  fild  dword ptr [esp]
  fmul  dword ptr [_money1+10]
  fistp dword ptr [esp]
  pop   esi
  add   eax,esi
  mov   [ebp+0c],eax

@@:
pop  eax
pop  edi
pop  esi

jmp   set1st+_1st

set1st:
jmp _money1+40


// part2
_money2+40:
ExReassemble(add2nd,,,_2nd)

push esi
push edi

mov  esi,[ebp+0c]
test esi,esi
jle  @f
  inc   dword ptr [_money2+1c]
  push  esi
  fild  dword ptr [esp]
  fmul  dword ptr [_money2+10]
  fistp dword ptr [esp]
  pop   esi
  mov   [ebp+0c],esi

@@:
pop  edi
pop  esi

jmp  add2nd+_2nd

add2nd:
jmp _money2+40


[DISABLE]
set1st:
readmem(_money1+20,24)
add2nd:
readmem(_money2+20,24)



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>131</ID>
          <Description>"fast charge weapon"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(charge,"ChargingWeaponModule:AimAtTarget")

getmonostruct(ChargingWeaponModule)
define(count,"ChargingWeaponModule._chargeCounter")

define(delta,"UnityEngine:Time:get_deltaTime")

define(cstart,"ProjectileWeaponModule:BeginActivatedCharge")
getmonostruct(ProjectileWeaponModule)
define(tstart,"ProjectileWeaponModule._chargeStartTime")
define(tloop,"ProjectileWeaponModule.ChargeTimeUntilLoop")

[ENABLE]
assertNot(charge,e9)
assertNot(cstart,e9)
globalalloc(_charge,$400)
globalalloc(_start,$400)
_charge:
dq _charge,charge
_start:
dq _start,cstart

_charge+10:
dd (float)3,(float)0.7

_charge+20:
readmem(charge,24)
_start+20:
readmem(cstart,24)

// part 1
_charge+40:
ExReassemble(charge,,,_len)

push  edi
push  ecx

  inc   dword ptr [_charge+1c]

  sub   esp,10
  call  delta
  add   esp,10

  mov   edi,[ebp+08]
  fmul  dword ptr [_charge+10]
  fadd  dword ptr [edi+count]
  fstp  dword ptr [edi+count]]
pop   ecx
pop   edi

jmp  charge+_len

charge:
jmp _charge+40

//part 2
_start+3c:
dd 0
label(_startReturn)
_start+40:
pop  eax
mov  [_start+3c],eax
push _startReturn
  ExReassemble(cstart,,,_len2)
  jmp   cstart+_len2

_startReturn:
push  dword ptr [_start+3c]

  inc   dword ptr [_start+1c]
  push  edi
  mov   edi,[esp+08] // this ptr

  fld   dword ptr [edi+tloop]
  fmul  dword ptr [_charge+14]
  fsubr dword ptr [edi+tstart]
  fstp  dword ptr [edi+tstart]

  pop   edi
ret


cstart:
jmp   _start+40


[DISABLE]
charge:
readmem(_charge+20,24)
cstart:
readmem(_start+20,24)



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>133</ID>
          <Description>"decreasing wp overheat"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(uheat,"ProjectileWeaponModule:UpdateOverheat")

getmonostruct(ProjectileWeaponModule)
define(heat,"ProjectileWeaponModule._weaponHeatValue")

define(delta,"UnityEngine:Time:get_deltaTime")

[ENABLE]
assertNot(uheat,e9)
globalalloc(_heat,$400)
_heat:
dq _heat,uheat
_heat+10:
dd (float)4

_heat+20:
readmem(uheat,24)

_heat+3c:
dd 0
//label(_rapidReturn)
_heat+40:
ExReassemble(uheat,,,_len)

push  edi
push  ecx
  mov   edi,[ebp+08]

  inc   dword ptr [_heat+1c]

  sub   esp,10
  call  delta
  add   esp,10

  fsubr dword ptr [edi+heat]
  fstp  dword ptr [edi+heat]
pop   ecx
pop   edi

jmp   uheat+_len


uheat:
jmp   _heat+40


[DISABLE]
uheat:
readmem(_heat+20,24)



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>132</ID>
          <Description>"rapid projectile weapon"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(rapid,"ProjectileWeaponModule:CalculateShotsPerSecond")

[ENABLE]
assertNot(rapid,e9)
globalalloc(_rapid,$400)
_rapid:
dq _rapid,rapid
_rapid+10:
dd (float)4

_rapid+20:
readmem(rapid,24)

_rapid+3c:
dd 0
label(_rapidReturn)
_rapid+40:
pop  eax
mov  [_rapid+3c],eax
push _rapidReturn
  ExReassemble(rapid,,,_len)
  jmp   rapid+_len

_rapidReturn:
push  dword ptr [_rapid+3c]

inc   dword ptr [_rapid+1c]

fmul  dword ptr [_rapid+10]

ret


rapid:
jmp   _rapid+40


[DISABLE]
rapid:
readmem(_rapid+20,24)



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>138</ID>
          <Description>"shield recharge"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(entity,"Module:get_entity")
define(damage,"Entity:get_damage")

define(getammo,"MissileSystemModule:get_ammoCount")
define(setammo,"MissileSystemModule:set_ammoCount")
define(maxammo,"PlayerMissileSystemModule:CalculateMaxMissileAmmo")
//define(mnuammo,"DatabaseMenu:GetCurrentMissileCount")
getmonostruct(PlayerBrain)
define(pmissle,"PlayerBrain._missileModule")
define(ammoget,"PlayerBrain:Update")

[ENABLE]
assertNot(ammoget,e9)
globalalloc(_mammo,$400)
_mammo:
dq _mammo,ammoget


_mammo+20:
readmem(ammoget,24)
_mammo+40:
ExReassemble(ammoget)

@@:
push esi
push edi
push eax

inc  dword ptr[_mammo+10]

mov  edi,[ebp+08]
mov  esi,[edi+pmissle]
sub  esp,0c
push esi
call getammo
add  esp,10

push eax
  sub  esp,10
  call maxammo
  add  esp,10
  cmp  eax,[esp]
pop  eax
jle  @f
  inc  eax
  sub  esp,08
  push eax
  push esi
  call setammo
  add  esp,10
@@:

pop  eax
pop  edi
pop  esi


jmp   ammoget+_LastReassembleLength

ammoget:
jmp _mammo+40

[DISABLE]
ammoget:
readmem(_mammo+20,24)



</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_arc</Name>
      <Address>04E54000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>__</Name>
      <Address>0B390000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_test</Name>
      <Address>05320000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_mammo</Name>
      <Address>0B394400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_rapid</Name>
      <Address>0DD04C00</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_money1</Name>
      <Address>0DD04400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_money2</Name>
      <Address>0DD04800</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_charge</Name>
      <Address>0DD05000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_start</Name>
      <Address>0DD05400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_heat</Name>
      <Address>0DD05800</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_money</Name>
      <Address>03F20000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
