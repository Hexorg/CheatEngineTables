<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>7</ID>
      <Description>"no reload"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(noreload,Disrupt_64.dll,FF 8B A8 00 00 00 85) // should be unique
registersymbol(noreload)

alloc(newmem,2048,noreload) //"Disrupt_64.dll"+534C899)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
test r15,r15
jnz @f
//dec [rbx+a8] //un-comment if you want the NPC's ammo run out faster. (each firing cost two ammos clip)
jmp originalcode

@@:
cmp dword ptr [rbx+a8],2
jge @f
mov dword ptr [rbx+a8],2

originalcode:
dec [rbx+000000A8]

exit:
jmp returnhere

///

noreload: //"Disrupt_64.dll"+534C899:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
noreload: //"Disrupt_64.dll"+534C899:
db FF 8B A8 00 00 00
//Alt: dec [rbx+000000A8]

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_64.dll"+5385668

"Disrupt_64.dll"+538563C: 48 89 D9                 -  mov rcx,rbx
"Disrupt_64.dll"+538563F: E8 FC 9D 00 00           -  call Disrupt_64.dll+538F440
"Disrupt_64.dll"+5385644: 48 8D 4D 8F              -  lea rcx,[rbp-71]
"Disrupt_64.dll"+5385648: E8 03 A0 FB FF           -  call Disrupt_64.dll+533F650
"Disrupt_64.dll"+538564D: FF 43 60                 -  inc [rbx+60]
"Disrupt_64.dll"+5385650: 80 BB AC 00 00 00 00     -  cmp byte ptr [rbx+000000AC],00
"Disrupt_64.dll"+5385657: 75 21                    -  jne Disrupt_64.dll+538567A
"Disrupt_64.dll"+5385659: 80 BB AD 00 00 00 00     -  cmp byte ptr [rbx+000000AD],00
"Disrupt_64.dll"+5385660: 74 18                    -  je Disrupt_64.dll+538567A
"Disrupt_64.dll"+5385662: 8B 83 A0 00 00 00        -  mov eax,[rbx+000000A0]
// ---------- INJECTING HERE ----------
"Disrupt_64.dll"+5385668: FF 8B A8 00 00 00        -  dec [rbx+000000A8]
// ---------- DONE INJECTING  ----------
"Disrupt_64.dll"+538566E: 85 C0                    -  test eax,eax
"Disrupt_64.dll"+5385670: 7E 08                    -  jle Disrupt_64.dll+538567A
"Disrupt_64.dll"+5385672: FF C8                    -  dec eax
"Disrupt_64.dll"+5385674: 89 83 A0 00 00 00        -  mov [rbx+000000A0],eax
"Disrupt_64.dll"+538567A: 48 8B 0F                 -  mov rcx,[rdi]
"Disrupt_64.dll"+538567D: FF 49 20                 -  dec [rcx+20]
"Disrupt_64.dll"+5385680: 75 10                    -  jne Disrupt_64.dll+5385692
"Disrupt_64.dll"+5385682: 48 8B 01                 -  mov rax,[rcx]
"Disrupt_64.dll"+5385685: BA 0F A2 47 C3           -  mov edx,C347A20F
"Disrupt_64.dll"+538568A: 8D 92 F2 5D B8 3C        -  lea edx,[rdx+3CB85DF2]
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>132</ID>
      <Description>"ignore research requirement"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(chkResearchRequirementAOB,Disrupt_64.dll,39 F8 0F 93 D0 48 ** ** ** ** 48 ** ** ** 5F C3)
registersymbol(chkResearchRequirementAOB)

chkResearchRequirementAOB+2:
db 90 B0 01



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
chkResearchRequirementAOB+2:
db 0F 93 D0

/*
Disrupt_64.AK::Monitor::SetLocalOutput+B76C3F - 48 C1 E2 05           - shl rdx,05 { 5 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C43 - 48 01 DA              - add rdx,rbx
Disrupt_64.AK::Monitor::SetLocalOutput+B76C46 - E8 6A57FEFF           - call Disrupt_64.AK::Monitor::SetLocalOutput+B5C3B5
Disrupt_64.AK::Monitor::SetLocalOutput+B76C4B - 0FBA F7 1F            - btr edi,1F { 31 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C4F - 48 8D 0C BF           - lea rcx,[rdi+rdi*4]
Disrupt_64.AK::Monitor::SetLocalOutput+B76C53 - 48 89 C2              - mov rdx,rax
Disrupt_64.AK::Monitor::SetLocalOutput+B76C56 - 48 C1 E1 05           - shl rcx,05 { 5 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C5A - 48 01 D9              - add rcx,rbx
Disrupt_64.AK::Monitor::SetLocalOutput+B76C5D - 48 8B 5C 24 40        - mov rbx,[rsp+40]
Disrupt_64.AK::Monitor::SetLocalOutput+B76C62 - 48 39 C8              - cmp rax,rcx
Disrupt_64.AK::Monitor::SetLocalOutput+B76C65 - 0F95 D0               - setne al
Disrupt_64.AK::Monitor::SetLocalOutput+B76C68 - 48 83 C4 30           - add rsp,30 { 48 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C6C - 5F                    - pop rdi
Disrupt_64.AK::Monitor::SetLocalOutput+B76C6D - C3                    - ret
Disrupt_64.AK::Monitor::SetLocalOutput+B76C6E - CC                    - int 3
Disrupt_64.AK::Monitor::SetLocalOutput+B76C6F - 90                    - nop
Disrupt_64.AK::Monitor::SetLocalOutput+B76C70 - 48 89 5C 24 08        - mov [rsp+08],rbx
Disrupt_64.AK::Monitor::SetLocalOutput+B76C75 - 57                    - push rdi
Disrupt_64.AK::Monitor::SetLocalOutput+B76C76 - 48 83 EC 20           - sub rsp,20 { 32 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C7A - 44 89 C7              - mov edi,r8d
Disrupt_64.AK::Monitor::SetLocalOutput+B76C7D - 45 85 C0              - test r8d,r8d
Disrupt_64.AK::Monitor::SetLocalOutput+B76C80 - 75 04                 - jne Disrupt_64.AK::Monitor::SetLocalOutput+B76C86
Disrupt_64.AK::Monitor::SetLocalOutput+B76C82 - B0 01                 - mov al,01 { 1 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C84 - EB 0A                 - jmp Disrupt_64.AK::Monitor::SetLocalOutput+B76C90
Disrupt_64.AK::Monitor::SetLocalOutput+B76C86 - E8 5FFAFFFF           - call Disrupt_64.AK::Monitor::SetLocalOutput+B766EA
chkResearchRequirementAOB                     - 39 F8                 - cmp eax,edi
Disrupt_64.AK::Monitor::SetLocalOutput+B76C8D - 0F93 D0               - setae al
Disrupt_64.AK::Monitor::SetLocalOutput+B76C90 - 48 8B 5C 24 30        - mov rbx,[rsp+30]
Disrupt_64.AK::Monitor::SetLocalOutput+B76C95 - 48 83 C4 20           - add rsp,20 { 32 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76C99 - 5F                    - pop rdi
Disrupt_64.AK::Monitor::SetLocalOutput+B76C9A - C3                    - ret
Disrupt_64.AK::Monitor::SetLocalOutput+B76C9B - CC                    - int 3
Disrupt_64.AK::Monitor::SetLocalOutput+B76C9C - 53                    - push rbx
Disrupt_64.AK::Monitor::SetLocalOutput+B76C9D - 48 83 EC 20           - sub rsp,20 { 32 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CA1 - 80 79 2E 00           - cmp byte ptr [rcx+2E],00 { 0 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CA5 - 48 89 CB              - mov rbx,rcx
Disrupt_64.AK::Monitor::SetLocalOutput+B76CA8 - 74 3F                 - je Disrupt_64.AK::Monitor::SetLocalOutput+B76CE9
Disrupt_64.AK::Monitor::SetLocalOutput+B76CAA - 4C 8B 41 08           - mov r8,[rcx+08]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CAE - 48 8B 41 10           - mov rax,[rcx+10]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CB2 - 48 C1 E8 20           - shr rax,20 { 32 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CB6 - 0FBA F0 1F            - btr eax,1F { 31 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CBA - 4D 8D 0C C0           - lea r9,[r8+rax*8]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CBE - 4D 39 C8              - cmp r8,r9
Disrupt_64.AK::Monitor::SetLocalOutput+B76CC1 - 74 26                 - je Disrupt_64.AK::Monitor::SetLocalOutput+B76CE9
Disrupt_64.AK::Monitor::SetLocalOutput+B76CC3 - 41 BA 0FA24FC3        - mov r10d,C34FA20F { [-7336] }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CC9 - 45 8D 92 F05DB04C     - lea r10d,[r10+4CB05DF0]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CD0 - 44 21 D2              - and edx,r10d
Disrupt_64.AK::Monitor::SetLocalOutput+B76CD3 - 49 8B 08              - mov rcx,[r8]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CD6 - 8B 41 30              - mov eax,[rcx+30]
Disrupt_64.AK::Monitor::SetLocalOutput+B76CD9 - 44 21 D0              - and eax,r10d
Disrupt_64.AK::Monitor::SetLocalOutput+B76CDC - 39 D0                 - cmp eax,edx
Disrupt_64.AK::Monitor::SetLocalOutput+B76CDE - 74 13                 - je Disrupt_64.AK::Monitor::SetLocalOutput+B76CF3
Disrupt_64.AK::Monitor::SetLocalOutput+B76CE0 - 49 83 C0 08           - add r8,08 { 8 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CE4 - 4D 39 C8              - cmp r8,r9
Disrupt_64.AK::Monitor::SetLocalOutput+B76CE7 - 75 EA                 - jne Disrupt_64.AK::Monitor::SetLocalOutput+B76CD3
Disrupt_64.AK::Monitor::SetLocalOutput+B76CE9 - 30 C0                 - xor al,al
Disrupt_64.AK::Monitor::SetLocalOutput+B76CEB - 48 83 C4 20           - add rsp,20 { 32 }
Disrupt_64.AK::Monitor::SetLocalOutput+B76CEF - 5B                    - pop rbx
Disrupt_64.AK::Monitor::SetLocalOutput+B76CF0 - C3                    - ret
*/
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>136</ID>
      <Description>"countdown mod"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
define(mythreshold,(float)30)

aobscanmodule(timerChkEndAndWriteAOB,Disrupt_64.dll,0F 2F 49 ** F3 0F 11 49 ** ** ** 48)
registersymbol(timerChkEndAndWriteAOB)

label(pTimer)
registersymbol(pTimer)
label(pTimerWithOnscreenCountdownOutput)
registersymbol(pTimerWithOnscreenCountdownOutput)
label(bIsCountdown)
registersymbol(bIsCountdown)
label(bLockMethod)
registersymbol(bLockMethod)
label(fCustomThreshold)
registersymbol(fCustomThreshold)

alloc(newmem,2048,timerChkEndAndWriteAOB)
label(returnhere)
label(originalcode_timermod)
registersymbol(originalcode_timermod)
label(exit)
label(endchecklockmethod)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfq
mov [pTimer],rcx
push rbx
mov rbx,[pTimerWithOnscreenCountdownOutput]
cmp rcx,rbx
pop rbx
je @f
mov byte ptr [bIsCountdown],0
jmp endchecklockmethod

@@:
mov byte ptr [bIsCountdown],1
cmp byte ptr [bLockMethod],0 //do nothing
je endchecklockmethod

@@:
cmp byte ptr [bLockMethod],1 //lock at full
jne @f
xorps xmm1,xmm1
jmp endchecklockmethod

@@:
cmp byte ptr [bLockMethod],3 //instant end
jne @f
movss xmm1,[rcx+10]
jmp endchecklockmethod

@@:
cmp byte ptr [bLockMethod],2 //lock at threshold
jne endchecklockmethod

sub rsp,10
movdqu dqword [rsp],xmm2

movss xmm2,[rcx+10]
subss xmm2,[fCustomThreshold]
comiss xmm2,xmm1
jae @f
movss xmm1,xmm2

@@:
movdqu xmm2,dqword [rsp]
add rsp,10


endchecklockmethod:
popfq

originalcode_timermod:
readmem(timerChkEndAndWriteAOB,9)
//comiss xmm1,[rcx+10]
//movss [rcx+14],xmm1

exit:
jmp returnhere

///
pTimer:
dq 0
pTimerWithOnscreenCountdownOutput:
dq 0
bIsCountdown:
dd 0
bLockMethod:
dd 0        //0:nothing, 1:full, 2:threshold, 3:end
fCustomThreshold:
dd mythreshold
///

timerChkEndAndWriteAOB:
jmp newmem
nop
nop
nop
nop
returnhere:

///***************************************///

aobscanmodule(onScreenCountDownWritesAOB,Disrupt_64.dll,8B 02 89 41 ** ** ** F3 ** ** ** ** F3 ** ** ** ** C3)
registersymbol(onScreenCountDownWritesAOB)

alloc(newmem2,2048,onScreenCountDownWritesAOB)
label(returnhere2)
label(originalcode2_timermod)
registersymbol(originalcode2_timermod)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pTimerWithOnscreenCountdownOutput],rbx

originalcode2_timermod:
readmem(onScreenCountDownWritesAOB,5)
//mov eax,[rdx]
//mov [rcx+20],eax

exit2:
jmp returnhere2

onScreenCountDownWritesAOB:
jmp newmem2
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
timerChkEndAndWriteAOB:
readmem(originalcode_timermod,9)
//db 0F 2F 49 10 F3 0F 11 49 14
//Alt: comiss xmm1,[rcx+10]
//Alt: movss [rcx+14],xmm1

unregistersymbol(pTimer)
unregistersymbol(pTimerWithOnscreenCountdownOutput)
unregistersymbol(bIsCountdown)
unregistersymbol(bLockMethod)
unregistersymbol(fCustomThreshold)

unregistersymbol(originalcode_timermod)

///***************************************///

dealloc(newmem2)
onScreenCountDownWritesAOB:
readmem(originalcode2_timermod,5)
//db 8B 02 89 41 20
//Alt: mov eax,[rdx]
//Alt: mov [rcx+20],eax
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>137</ID>
          <Description>"is countdown?"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:no
1:yes
</DropDownList>
          <Color>808080</Color>
          <VariableType>Byte</VariableType>
          <Address>bIsCountdown</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>110</Key>
              </Keys>
              <Value>0</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>98</Key>
              </Keys>
              <Value>2</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys/>
              <ID>3</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>144</ID>
          <Description>"lock method"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:disabled
1:full
2:threshold
3:end
</DropDownList>
          <Color>008000</Color>
          <VariableType>Byte</VariableType>
          <Address>bLockMethod</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>110</Key>
              </Keys>
              <Value>0</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>98</Key>
              </Keys>
              <Value>2</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys/>
              <ID>3</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"custom threshold"</Description>
          <Color>008000</Color>
          <VariableType>Float</VariableType>
          <Address>fCustomThreshold</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>138</ID>
          <Description>"current timer"</Description>
          <Color>0000FF</Color>
          <VariableType>Float</VariableType>
          <Address>pTimer</Address>
          <Offsets>
            <Offset>14</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>139</ID>
              <Description>"end at"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>-4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
