<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>43</ID>
      <Description>"SCRIPTS"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Infinite Units"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

AOBScan(aobunits,F3 0F 58 00 F3 0F 11 00 F3 0F 10 41 04 F3 0F 58 40 04 F3 0F 11 40 04 F3 0F 10 41 08 F3 0F 58 40 08 F3 0F 11 40 08 C2)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

registersymbol(aobunits)

newmem:
mov [eax],(float)0

originalcode:
movss xmm0,[ecx+04]

exit:
jmp returnhere

aobunits+4:
jmp newmem
nop
nop
nop
nop

returnhere:
[DISABLE]
aobunits+4:
db F3 0F 11 00 F3 0F 10 41 04
//movss [eax],xmm0
//movss xmm0,[ecx+04]

unregistersymbol(aobunits)

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"Disable Commander Abilities Cooldown"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

AOBScan(aobcooldown,48 89 43 0C 83 7B 0C 00)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

registersymbol(aobcooldown)

newmem:
mov [ebx+0C],00

originalcode:
cmp dword ptr [ebx+0C],00

exit:
jmp returnhere

aobcooldown+1:
jmp newmem
nop
nop

returnhere:
[DISABLE]
aobcooldown+1:
db 89 43 0C 83 7B 0C 00
//mov [ebx+0C],eax
//cmp dword ptr [ebx+0C],00

unregistersymbol(aobcooldown)

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>66</ID>
          <Description>"Only one of them can be activated at the same time !"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>57</ID>
              <Description>"Godmode"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Author        : Recifense

define(LUDO,"RelicCoH2.exe")

[ENABLE]

AOBScan(aobMHPR,8b 81 b4 00 00 00 83 ec 08 85 c0 ?? ?? 8b 50 08 8d 48 08 8b 44 24)
AOBScan(aobGDMD,83 ec 08 0f 57 db 56 8b f1 f3 0f 10 86 80 00 00 00 0f 2f c3 f3 0f)
AOBScan(aobGMD1,f3 0f 11 41 3c ?? ?? f3 0f 11 49 3c f3 0f 10 81 80 00 00 00 f3 0f)
AOBScan(aobMPID,89 17 89 47 04 e8 ?? ?? ?? ?? 8b 56 04 88 46 14 8b 0d ?? ?? ?? ??)
AOBScan(aobMGST,89 9d 78 06 00 00 e8 ?? ?? ?? ?? 8d 8d ac 07 00 00 e8 ?? ?? ?? ??)
AOBScan(aobGMD2,f3 0f 10 54 24 04 56 8b f1 f3 0f 10 46 40 f3 0f 10 4e 3c 0f 28 d8)
AOBScan(aobGMD4,83 ec 20 56 8b f1 80 7e 7d 00 0f 85 ?? ?? ?? ?? 8b 4e 0c 6a 0b e8)
AOBScan(aobMSUN,89 5f 14 3b f3 ?? ?? 83 c6 10 38 5e 06 ?? ?? 38 1d ?? ?? ?? ?? ?? ?? 38)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)
label(_MonGameStart)
label(_BackMGS)
label(_ExitMGS)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(pUnit)
label(pSel)
label(pPlayer)
label(iPlayerID)
label(fValue)
label(pLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pSel)
registersymbol(pPlayer)
registersymbol(iPlayerID)
registersymbol(fValue)
registersymbol(pLast)

registersymbol(aobMHPR)
registersymbol(aobGDMD)
registersymbol(aobGMD1)
registersymbol(aobMPID)
registersymbol(aobMGST)
registersymbol(aobGMD2)
registersymbol(aobGMD4)
registersymbol(aobMSUN)

//=========================================
MyCode:
//========================================= 300.12598
_MonHumanPlayer:
 mov eax,[ecx+000000B4]            // Original code
 test eax,eax
 jz _ExitMHP

 mov ecx,[eax+08]
 cmp ecx,[iPlayerID]
 jne _ExitMHP

 mov [pPlayer],eax

 jmp _ExitMHP

_ExitMHP:
 jmp _BackMHP                      // Back to main code

//=========================================
_GodMode:
 mov dword ptr [pLast],'_GDM'

 push eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGMD

 pop eax
 ret 0008
//==
_ExitGMD:
 pop eax

 sub esp,08                        // Original code
 xorps xmm3,xmm3                   // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
_GodMode1:
 mov dword ptr [pLast],'_GM1'

 push eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM1

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM1

 movss xmm0,[ecx+40]

_ExitGM1:
 pop eax

 comiss xmm0,xmm1                  // Original code
 movss [ecx+3C],xmm0               // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 300.12598
_MonPlayerID:
 mov [iPlayerID],edx

_ExitMPI:
 mov [edi],edx                     // Original code
 mov [edi+04],eax                  // Original code
 jmp _BackMPI                      // Back to main code

//=========================================
_MonGameStart:
 mov dword ptr [iPlayerID],#9999

_ExitMGS:
 mov [ebp+00000678],ebx            // Original code
 jmp _BackMGS                      // Back to main code

//=========================================
_GodMode2:
 mov dword ptr [pLast],'_GM2'

 push eax

 mov eax,[esp+08]
 mov [fValue],eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM2

 pop eax

 ret 0008
//==
_ExitGM2:
 pop eax

 movss xmm2,[esp+04]               // Original code
 jmp _BackGM2                      // Back to main code

//=========================================
_GodMode4:
 mov dword ptr [pLast],'_GM4'

 push eax

 mov [pUnit],ecx                   // Save ptr for debugging

 mov eax,[ecx+0c]                  // pUnit
 test eax,eax
 jz _ExitGM4

 mov eax,[eax+000000b4]            // pPlayer
 cmp eax,[pPlayer]
 jne _ExitGM4

 pop eax

 ret 001c
//==
_ExitGM4:
 pop eax

 sub esp,20                        // Original code
 push esi                          // Original code
 mov esi,ecx                       // Original code
 jmp _BackGM4                      // Back to main code

//=========================================
_MonSelUnit:
 mov [pSel],ebx

_ExitMSU:
 mov [edi+14],ebx                  // Original code
 mov esi,ebx                       // Original code
 jmp _BackMSU                      // Back to main code

//=========================================
 db '====================================&gt;'
 db 'CE6.3 Script by Recifense 030114'
//=========================================
// Variables
pUnit:
 dd 0
pSel:
 dd 0
pPlayer:
 dd MyCode
iPlayerID:
 dd #9999
fValue:
 dd 0
pLast:
 db 'CE63'

//=========================================
// Hacking Points
aobMHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

aobGDMD:
 jmp _GodMode
 nop
_BackGMD:

aobGMD1:
 jmp _GodMode1
_BackGM1:

aobMPID:
 jmp _MonPlayerID
_BackMPI:

aobMGST:
 jmp _MonGameStart
 nop
_BackMGS:

aobGMD2:
 jmp _GodMode2
 nop
_BackGM2:

aobGMD4:
 jmp _GodMode4
 nop
_BackGM4:

aobMSUN:
 jmp _MonSelUnit
_BackMSU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
aobMHPR:
// mov eax,[ecx+000000b4]
 db 8b 81 b4 00 00 00

aobGDMD:
// sub esp,08
// xorps xmm3,xmm3
 db 83 ec 08 0f 57 db

aobGMD1:
// movss [ecx+3C],xmm0
 db f3 0f 11 41 3c

aobMPID:
// mov [edi],edx
// mov [edi+04],eax
 db 89 17 89 47 04

aobMGST:
// mov [ebp+00000678],ebx
 db 89 9d 78 06 00 00

aobGMD2:
// movss xmm2,[esp+04]
 db f3 0f 10 54 24 04

aobGMD4:
// sub esp,20
// push esi
// mov esi,ecx
 db 83 ec 20 56 8b f1

aobMSUN:
// mov [ebp+14],ebx
// mov esi,ebx
 db 89 5f 14 3b f3

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pSel)
unregistersymbol(pPlayer)
unregistersymbol(iPlayerID)
unregistersymbol(fValue)
unregistersymbol(pLast)

unregistersymbol(aobMHPR)
unregistersymbol(aobGDMD)
unregistersymbol(aobGMD1)
unregistersymbol(aobMPID)
unregistersymbol(aobMGST)
unregistersymbol(aobGMD2)
unregistersymbol(aobGMD4)
unregistersymbol(aobMSUN)

//=========================================
dealloc(MyCode)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"Unlimited Ressources(Fuel,Ammo,Manpower,Commandpoints)"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//All Credits to Recifense

define(HUGO,"RelicCoH2.exe")

[ENABLE]

alloc(newmem,4096,HUGO)

AOBScan(aobMHPR,8b 81 b4 00 00 00 83 ec 08 85 c0 ?? ?? 8b 50 08 8d 48 08 8b 44 24)
AOBScan(aobMPID,89 17 89 47 04 e8 ?? ?? ?? ?? 8b 56 04 88 46 14 8b 0d ?? ?? ?? ??)
AOBScan(aobMGST,89 9d 78 06 00 00 e8 ?? ?? ?? ?? 8d 8d ac 07 00 00 e8 ?? ?? ?? ??)

//=========================================

label(HUMPLA)
label(EXITHP)
label(BACKHP)
label(ID)
label(BACKID)
label(EXITID)
label(GS)
label(BACKGS)
label(EXITGS)
label(Player)
label(PID)
label(TESTS)

//=========================================

registersymbol(newmem)
registersymbol(aobMHPR)
registersymbol(aobMPID)
registersymbol(aobMGST)
registersymbol(Player)
registersymbol(PID)
registersymbol(TESTS)

//=========================================

newmem:


HUMPLA:
 mov eax,[ecx+000000B4]            // Original code
 test eax,eax
 jz EXITHP

 mov ecx,[eax+08]
 cmp ecx,[PID]
 jne EXITHP

 mov [Player],eax

 mov ecx,(float)9999.0

 mov edx,[eax+00000094]            // Manpower
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000094],edx

 mov edx,[eax+0000009c]            // Munition
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+0000009c],edx

 mov edx,[eax+00000098]            // Fuel
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000098],edx

 cmp [TESTS],1
 je EXITHP

 mov ecx,(float)20000.0

 cmp ecx,[eax+000000a0]
 mov [eax+000000a0],ecx
 mov [TESTS],1          // Command Point Progres

EXITHP:
 jmp BACKHP

//=========================================

ID:
mov [PID],edx

EXITID:
mov [edi],edx
mov [edi+04],eax
jmp BACKID

//=========================================

GS:
mov dword ptr [PID],#9999

EXITGS:
mov [ebp+00000678],ebx
jmp BACKGS

//=========================================

Player:
 dd newmem
PID:
 dd #9999
TESTS:
 dd 0

//=========================================

aobMHPR:
jmp HUMPLA
nop
BACKHP:

aobMPID:
jmp ID
BACKID:

aobMGST:
jmp GS
nop
BACKGS:

//=========================================

[DISABLE]

aobMHPR:
// mov eax,[ecx+000000B4]
 db 8b 81 b4 00 00 00

aobMPID:
// mov [edi],edx
// mov [edi+04],eax
 db 89 17 89 47 04

aobMGST:
// mov [ebp+00000678],ebx
 db 89 9d 78 06 00 00

//=========================================

unregistersymbol(newmem)
unregistersymbol(aobMHPR)
unregistersymbol(aobMPID)
unregistersymbol(aobMGST)
unregistersymbol(Player)
unregistersymbol(PID)
unregistersymbol(TEST)

//=========================================

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"Godmode and Unlimited Ressources"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//Author        : Recifense

// Definitions
define(LUDO,"RelicCoH2.exe")

//=========================================
define(ctCE64,(float)6.4)
//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScan(aobMHPR,8b 81 b4 00 00 00 83 ec 08 85 c0 ?? ?? 8b 50 08 8d 48 08 8b 44 24)
AOBScan(aobGDMD,83 ec 08 0f 57 db 56 8b f1 f3 0f 10 86 80 00 00 00 0f 2f c3 f3 0f)
AOBScan(aobGMD1,f3 0f 11 41 3c ?? ?? f3 0f 11 49 3c f3 0f 10 81 80 00 00 00 f3 0f)
AOBScan(aobMPID,89 17 89 47 04 e8 ?? ?? ?? ?? 8b 56 04 88 46 14 8b 0d ?? ?? ?? ??)
AOBScan(aobMGST,89 9d 78 06 00 00 e8 ?? ?? ?? ?? 8d 8d ac 07 00 00 e8 ?? ?? ?? ??)
AOBScan(aobGMD2,f3 0f 10 54 24 04 56 8b f1 f3 0f 10 46 40 f3 0f 10 4e 3c 0f 28 d8)
AOBScan(aobGMD4,83 ec 20 56 8b f1 80 7e 7d 00 0f 85 ?? ?? ?? ?? 8b 4e 0c 6a 0b e8)
AOBScan(aobMSUN,89 5f 14 3b f3 ?? ?? 83 c6 10 38 5e 06 ?? ?? 38 1d ?? ?? ?? ?? ?? ?? 38)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)
label(_MonGameStart)
label(_BackMGS)
label(_ExitMGS)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(pUnit)
label(pSel)
label(pPlayer)
label(iPlayerID)
label(iEnableMPR)
label(iEnableGMD)
label(iEnableCPP)
label(fValue)
label(pLast)
label(activated)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pSel)
registersymbol(pPlayer)
registersymbol(iPlayerID)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableCPP)
registersymbol(fValue)
registersymbol(pLast)

registersymbol(aobMHPR)
registersymbol(aobGDMD)
registersymbol(aobGMD1)
registersymbol(aobMPID)
registersymbol(aobMGST)
registersymbol(aobGMD2)
registersymbol(aobGMD4)
registersymbol(aobMSUN)

registersymbol(activated)
//=========================================
MyCode:
//========================================= 300.16104
_MonHumanPlayer:
 mov eax,[ecx+000000B4]            // Original code
 test eax,eax
 jz _ExitMHP

 mov ecx,[eax+08]
 cmp ecx,[iPlayerID]
 jne _ExitMHP

 mov [pPlayer],eax

 mov ecx,(float)9999.0

 mov edx,[eax+00000094]            // Manpower
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000094],edx

 mov edx,[eax+0000009c]            // Munition
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+0000009c],edx

 mov edx,[eax+00000098]            // Fuel
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000098],edx

_MonHP00:

 cmp [activated],#0
 jne _ExitMHP

 mov [activated],#1

 mov ecx,(float)20000.0
 cmp ecx,[eax+000000a0]            // Command Point Progress
 jle _ExitMHP

 mov [eax+000000a0],ecx

_ExitMHP:
 jmp _BackMHP                      // Back to main code

//========================================= 300.14243
_GodMode:
 mov dword ptr [pLast],'_GDM'

 push eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGMD

 pop eax
 ret 0008
//==
_ExitGMD:
 pop eax

 sub esp,08                        // Original code
 xorps xmm3,xmm3                   // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 300.14243
_GodMode1:
 mov dword ptr [pLast],'_GM1'

 push eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM1

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM1

 movss xmm0,[ecx+40]

_ExitGM1:
 pop eax

 comiss xmm0,xmm1                  // Original code
 movss [ecx+3C],xmm0               // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 300.12598
_MonPlayerID:
 mov [iPlayerID],edx

_ExitMPI:
 mov [edi],edx                     // Original code
 mov [edi+04],eax                  // Original code
 jmp _BackMPI                      // Back to main code

//========================================= 300.14243
_MonGameStart:
 mov dword ptr [iPlayerID],#9999

_ExitMGS:
 mov [ebp+00000678],ebx            // Original code
 jmp _BackMGS                      // Back to main code

//========================================= 300.13006
_GodMode2:
 mov dword ptr [pLast],'_GM2'

 push eax

 mov eax,[esp+08]
 mov [fValue],eax

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM2

 pop eax

 ret 0008
//==
_ExitGM2:
 pop eax

 movss xmm2,[esp+04]               // Original code
 jmp _BackGM2                      // Back to main code

//========================================= 300.14243
_GodMode4:
 mov dword ptr [pLast],'_GM4'

 push eax

 mov [pUnit],ecx                   // Save ptr for debugging

 mov eax,[ecx+0c]                  // pUnit
 test eax,eax
 jz _ExitGM4

 mov eax,[eax+000000b4]            // pPlayer
 cmp eax,[pPlayer]
 jne _ExitGM4

 pop eax

 ret 001c
//==
_ExitGM4:
 pop eax

 sub esp,20                        // Original code
 push esi                          // Original code
 mov esi,ecx                       // Original code
 jmp _BackGM4                      // Back to main code

//========================================= 300.14641
_MonSelUnit:
 mov [pSel],ebx

_ExitMSU:
 mov [edi+14],ebx                  // Original code
 cmp esi,ebx                       // Original code
 jmp _BackMSU                      // Back to main code

//=========================================
 db '=================================&gt;'
 db 'CE6.4 Script by Recifense 103014'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableCPP:
 dd 0
pUnit:
 dd 0
pSel:
 dd 0
pPlayer:
 dd MyCode
iPlayerID:
 dd #9999
fValue:
 dd 0
pLast:
 db 'CE64'
activated:
 dd 0

//=========================================
// Hacking Points
aobMHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

aobGDMD:
 jmp _GodMode
 nop
_BackGMD:

aobGMD1:
 jmp _GodMode1
_BackGM1:

aobMPID:
 jmp _MonPlayerID
_BackMPI:

aobMGST:
 jmp _MonGameStart
 nop
_BackMGS:

aobGMD2:
 jmp _GodMode2
 nop
_BackGM2:

aobGMD4:
 jmp _GodMode4
 nop
_BackGM4:

aobMSUN:
 jmp _MonSelUnit
_BackMSU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
aobMHPR:
// mov eax,[ecx+000000B4]
 db 8b 81 b4 00 00 00

aobGDMD:
// sub esp,08
// xorps xmm3,xmm3
 db 83 ec 08 0f 57 db

aobGMD1:
// movss [ecx+3C],xmm0
 db f3 0f 11 41 3c

aobMPID:
// mov [edi],edx
// mov [edi+04],eax
 db 89 17 89 47 04

aobMGST:
// mov [ebp+00000678],ebx
 db 89 9d 78 06 00 00

aobGMD2:
// movss xmm2,[esp+04]
 db f3 0f 10 54 24 04

aobGMD4:
// sub esp,20
// push esi
// mov esi,ecx
 db 83 ec 20 56 8b f1

aobMSUN:
// mov [edi+14],ebx
// cmp esi,ebx
 db 89 5f 14 3b f3

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pSel)
unregistersymbol(pPlayer)
unregistersymbol(iPlayerID)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableCPP)
unregistersymbol(fValue)
unregistersymbol(pLast)

unregistersymbol(aobMHPR)
unregistersymbol(aobGDMD)
unregistersymbol(aobGMD1)
unregistersymbol(aobMPID)
unregistersymbol(aobMGST)
unregistersymbol(aobGMD2)
unregistersymbol(aobGMD4)
unregistersymbol(aobMSUN)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Unit</Name>
      <Address>077D0090</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobcooldown</Name>
      <Address> 0102B227</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobunits</Name>
      <Address> 014EC57A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>activated</Name>
      <Address>0BEA021C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobMHPR</Name>
      <Address> 01065970</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobMPID</Name>
      <Address> 012717FA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobMGST</Name>
      <Address> 0149AE77</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Player</Name>
      <Address>0BEA00AD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>PID</Name>
      <Address>0BEA00B1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TEST</Name>
      <Address>0BEA00B5</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
