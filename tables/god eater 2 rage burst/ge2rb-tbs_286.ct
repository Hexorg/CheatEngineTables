<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>80</ID>
      <Description>"Batle Scripts"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>82</ID>
          <Description>"Inf HP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanInfHP,GE2RB.exe,F3 0F 11 80 9C 00 00 00 5E) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //movss [eax+0000009C],xmm0
  jmp return

AOBScanInfHP:
  jmp code
  nop
  nop
  nop
return:
registersymbol(AOBScanInfHP)

[DISABLE]

AOBScanInfHP:
  db F3 0F 11 80 9C 00 00 00

unregistersymbol(AOBScanInfHP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1ADC000

"GE2RB.exe"+1ADBFDB: F3 0F 11 45 08           -  movss [ebp+08],xmm0
"GE2RB.exe"+1ADBFE0: 0F 2F C1                 -  comiss xmm0,xmm1
"GE2RB.exe"+1ADBFE3: 77 05                    -  ja GE2RB.exe+1ADBFEA
"GE2RB.exe"+1ADBFE5: F3 0F 11 4D 08           -  movss [ebp+08],xmm1
"GE2RB.exe"+1ADBFEA: 56                       -  push esi
"GE2RB.exe"+1ADBFEB: E8 66 D0 A5 FF           -  call GE2RB.exe+1539056
"GE2RB.exe"+1ADBFF0: F3 0F 10 45 08           -  movss xmm0,[ebp+08]
"GE2RB.exe"+1ADBFF5: 83 C4 04                 -  add esp,04
"GE2RB.exe"+1ADBFF8: F3 0F 11 45 08           -  movss [ebp+08],xmm0
"GE2RB.exe"+1ADBFFD: D9 45 08                 -  fld dword ptr [ebp+08]
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1ADC000: F3 0F 11 80 9C 00 00 00  -  movss [eax+0000009C],xmm0
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1ADC008: 5E                       -  pop esi
"GE2RB.exe"+1ADC009: 89 EC                    -  mov esp,ebp
"GE2RB.exe"+1ADC00B: 5D                       -  pop ebp
"GE2RB.exe"+1ADC00C: C3                       -  ret 
"GE2RB.exe"+1ADC00D: CC                       -  int 3 
"GE2RB.exe"+1ADC00E: CC                       -  int 3 
"GE2RB.exe"+1ADC00F: CC                       -  int 3 
"GE2RB.exe"+1ADC010: CC                       -  int 3 
"GE2RB.exe"+1ADC011: CC                       -  int 3 
"GE2RB.exe"+1ADC012: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>86</ID>
          <Description>"Inf OP Reserve"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanInfOPReserveRead,GE2RB.exe,0F BF 80 64 FF 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  cmp word ptr [eax+0000FF64],#1000
  jge code
  mov word ptr [eax+0000FF64],#1000

code:
  movsx eax,word ptr [eax+0000FF64]
  jmp return

AOBScanInfOPReserveRead:
  jmp newmem
  nop
  nop
return:
registersymbol(AOBScanInfOPReserveRead)

[DISABLE]

AOBScanInfOPReserveRead:
  db 0F BF 80 64 FF 00 00

unregistersymbol(AOBScanInfOPReserveRead)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1C2EAFE

"GE2RB.exe"+1C2EAD3: FF 36                 -  push [esi]
"GE2RB.exe"+1C2EAD5: 89 85 F4 FF FF FF     -  mov [ebp-0000000C],eax
"GE2RB.exe"+1C2EADB: E8 3A 11 DD FF        -  call GE2RB.exe+19FFC1A
"GE2RB.exe"+1C2EAE0: 6A 2C                 -  push 2C
"GE2RB.exe"+1C2EAE2: FF 36                 -  push [esi]
"GE2RB.exe"+1C2EAE4: 89 85 F8 FF FF FF     -  mov [ebp-00000008],eax
"GE2RB.exe"+1C2EAEA: E8 2B 11 DD FF        -  call GE2RB.exe+19FFC1A
"GE2RB.exe"+1C2EAEF: 89 85 F0 FF FF FF     -  mov [ebp-00000010],eax
"GE2RB.exe"+1C2EAF5: 83 C4 18              -  add esp,18
"GE2RB.exe"+1C2EAF8: 8B 85 FC FF FF FF     -  mov eax,[ebp-00000004]
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1C2EAFE: 0F BF 80 64 FF 00 00  -  movsx eax,word ptr [eax+0000FF64]
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1C2EB05: E9 84 00 00 00        -  jmp GE2RB.exe+1C2EB8E
"GE2RB.exe"+1C2EB0A: 83 FF 03              -  cmp edi,03
"GE2RB.exe"+1C2EB0D: 0F 85 F7 00 00 00     -  jne GE2RB.exe+1C2EC0A
"GE2RB.exe"+1C2EB13: 6A 6B                 -  push 6B
"GE2RB.exe"+1C2EB15: FF 36                 -  push [esi]
"GE2RB.exe"+1C2EB17: E8 FE 10 DD FF        -  call GE2RB.exe+19FFC1A
"GE2RB.exe"+1C2EB1C: 6A 6D                 -  push 6D
"GE2RB.exe"+1C2EB1E: FF 36                 -  push [esi]
"GE2RB.exe"+1C2EB20: 89 85 F4 FF FF FF     -  mov [ebp-0000000C],eax
"GE2RB.exe"+1C2EB26: E8 EF 10 DD FF        -  call GE2RB.exe+19FFC1A
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"Inf Stamina"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanInfStamina,GE2RB.exe,F3 0F 11 80 A4 00 00 00 5E) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //movss [eax+000000A4],xmm0
  jmp return

AOBScanInfStamina:
  jmp code
  nop
  nop
  nop
return:
registersymbol(AOBScanInfStamina)

[DISABLE]

AOBScanInfStamina:
  db F3 0F 11 80 A4 00 00 00

unregistersymbol(AOBScanInfStamina)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1ADC3AC

"GE2RB.exe"+1ADC387: F3 0F 11 45 08           -  movss [ebp+08],xmm0
"GE2RB.exe"+1ADC38C: 0F 2F C1                 -  comiss xmm0,xmm1
"GE2RB.exe"+1ADC38F: 77 05                    -  ja GE2RB.exe+1ADC396
"GE2RB.exe"+1ADC391: F3 0F 11 4D 08           -  movss [ebp+08],xmm1
"GE2RB.exe"+1ADC396: 56                       -  push esi
"GE2RB.exe"+1ADC397: E8 BA CC A5 FF           -  call GE2RB.exe+1539056
"GE2RB.exe"+1ADC39C: F3 0F 10 45 08           -  movss xmm0,[ebp+08]
"GE2RB.exe"+1ADC3A1: 83 C4 04                 -  add esp,04
"GE2RB.exe"+1ADC3A4: F3 0F 11 45 08           -  movss [ebp+08],xmm0
"GE2RB.exe"+1ADC3A9: D9 45 08                 -  fld dword ptr [ebp+08]
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1ADC3AC: F3 0F 11 80 A4 00 00 00  -  movss [eax+000000A4],xmm0
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1ADC3B4: 5E                       -  pop esi
"GE2RB.exe"+1ADC3B5: 89 EC                    -  mov esp,ebp
"GE2RB.exe"+1ADC3B7: 5D                       -  pop ebp
"GE2RB.exe"+1ADC3B8: C3                       -  ret 
"GE2RB.exe"+1ADC3B9: CC                       -  int 3 
"GE2RB.exe"+1ADC3BA: CC                       -  int 3 
"GE2RB.exe"+1ADC3BB: CC                       -  int 3 
"GE2RB.exe"+1ADC3BC: CC                       -  int 3 
"GE2RB.exe"+1ADC3BD: CC                       -  int 3 
"GE2RB.exe"+1ADC3BE: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Inf Burst"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanInfBurst,GE2RB.exe,F3 0F 11 46 60 72) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:

  //movss [esi+60],xmm0
  jmp return

AOBScanInfBurst:
  jmp newmem
return:
registersymbol(AOBScanInfBurst)

[DISABLE]

AOBScanInfBurst:
  db F3 0F 11 46 60

unregistersymbol(AOBScanInfBurst)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1C92B0B

"GE2RB.exe"+1C92AE4: 83 C4 08                 -  add esp,08
"GE2RB.exe"+1C92AE7: EB 08                    -  jmp GE2RB.exe+1C92AF1
"GE2RB.exe"+1C92AE9: F3 0F 10 0D 64 EA 3E 01  -  movss xmm1,[GE2RB.exe+FEEA64]
"GE2RB.exe"+1C92AF1: F3 0F 10 85 F8 FF FF FF  -  movss xmm0,[ebp-00000008]
"GE2RB.exe"+1C92AF9: F3 0F 5C C1              -  subss xmm0,xmm1
"GE2RB.exe"+1C92AFD: 0F 57 C9                 -  xorps xmm1,xmm1
"GE2RB.exe"+1C92B00: 0F 2F C1                 -  comiss xmm0,xmm1
"GE2RB.exe"+1C92B03: 77 03                    -  ja GE2RB.exe+1C92B08
"GE2RB.exe"+1C92B05: 0F 28 C1                 -  movaps xmm0,xmm1
"GE2RB.exe"+1C92B08: 0F 2F C8                 -  comiss xmm1,xmm0
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1C92B0B: F3 0F 11 46 60           -  movss [esi+60],xmm0
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1C92B10: 72 09                    -  jb GE2RB.exe+1C92B1B
"GE2RB.exe"+1C92B12: 57                       -  push edi
"GE2RB.exe"+1C92B13: E8 FA 90 EC FF           -  call GE2RB.exe+1B5BC12
"GE2RB.exe"+1C92B18: 83 C4 04                 -  add esp,04
"GE2RB.exe"+1C92B1B: 5F                       -  pop edi
"GE2RB.exe"+1C92B1C: 5E                       -  pop esi
"GE2RB.exe"+1C92B1D: B8 01 00 00 00           -  mov eax,00000001
"GE2RB.exe"+1C92B22: 5B                       -  pop ebx
"GE2RB.exe"+1C92B23: 89 EC                    -  mov esp,ebp
"GE2RB.exe"+1C92B25: 5D                       -  pop ebp
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3362</ID>
      <Description>"Grind Reduction"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>77</ID>
          <Description>"Inf Money"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanMoneyRead,GE2RB.exe,8B 82 30 62 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  cmp [edx+00006230],#213456
  jge code
  mov [edx+00006230],#213456

code:
  mov eax,[edx+00006230]
  jmp return

AOBScanMoneyRead:
  jmp newmem
  nop
return:
registersymbol(AOBScanMoneyRead)

[DISABLE]

AOBScanMoneyRead:
  db 8B 82 30 62 00 00

unregistersymbol(AOBScanMoneyRead)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1933E0A

"GE2RB.exe"+1933DF7: 89 45 0C                 -  mov [ebp+0C],eax
"GE2RB.exe"+1933DFA: 5D                       -  pop ebp
"GE2RB.exe"+1933DFB: E9 DF DB 0E 00           -  jmp GE2RB.exe+1A219DF
"GE2RB.exe"+1933E00: CC                       -  int 3 
"GE2RB.exe"+1933E01: CC                       -  int 3 
"GE2RB.exe"+1933E02: CC                       -  int 3 
"GE2RB.exe"+1933E03: CC                       -  int 3 
"GE2RB.exe"+1933E04: 55                       -  push ebp
"GE2RB.exe"+1933E05: 89 E5                    -  mov ebp,esp
"GE2RB.exe"+1933E07: 8B 55 08                 -  mov edx,[ebp+08]
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1933E0A: 8B 82 30 62 00 00        -  mov eax,[edx+00006230]
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1933E10: 8B 92 34 62 00 00        -  mov edx,[edx+00006234]
"GE2RB.exe"+1933E16: 5D                       -  pop ebp
"GE2RB.exe"+1933E17: C3                       -  ret 
"GE2RB.exe"+1933E18: CC                       -  int 3 
"GE2RB.exe"+1933E19: CC                       -  int 3 
"GE2RB.exe"+1933E1A: CC                       -  int 3 
"GE2RB.exe"+1933E1B: CC                       -  int 3 
"GE2RB.exe"+1933E1C: CC                       -  int 3 
"GE2RB.exe"+1933E1D: CC                       -  int 3 
"GE2RB.exe"+1933E1E: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>79</ID>
          <Description>"Item QTY &gt;=101(must own it first)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanItemQtyRead,GE2RB.exe,0F B7 40 04 5D C3 66 89 C8 5D C3 CC CC CC) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  cmp word ptr [eax+04],#101
  jge code
  mov word ptr [eax+04],#101

code:
  movzx eax,word ptr [eax+04]
  pop ebp
  jmp return

AOBScanItemQtyRead:
  jmp newmem
return:
registersymbol(AOBScanItemQtyRead)

[DISABLE]

AOBScanItemQtyRead:
  db 0F B7 40 04 5D

unregistersymbol(AOBScanItemQtyRead)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+17B76BA

"GE2RB.exe"+17B76A0: 55                 -  push ebp
"GE2RB.exe"+17B76A1: 89 E5              -  mov ebp,esp
"GE2RB.exe"+17B76A3: FF 75 10           -  push [ebp+10]
"GE2RB.exe"+17B76A6: FF 75 0C           -  push [ebp+0C]
"GE2RB.exe"+17B76A9: FF 75 08           -  push [ebp+08]
"GE2RB.exe"+17B76AC: E8 DA D1 33 00     -  call GE2RB.exe+1AF488B
"GE2RB.exe"+17B76B1: 83 C4 0C           -  add esp,0C
"GE2RB.exe"+17B76B4: 31 C9              -  xor ecx,ecx
"GE2RB.exe"+17B76B6: 85 C0              -  test eax,eax
"GE2RB.exe"+17B76B8: 74 06              -  je GE2RB.exe+17B76C0
// ---------- INJECTING HERE ----------
"GE2RB.exe"+17B76BA: 0F B7 40 04        -  movzx eax,word ptr [eax+04]
"GE2RB.exe"+17B76BE: 5D                 -  pop ebp
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+17B76BF: C3                 -  ret 
"GE2RB.exe"+17B76C0: 66 89 C8           -  mov ax,cx
"GE2RB.exe"+17B76C3: 5D                 -  pop ebp
"GE2RB.exe"+17B76C4: C3                 -  ret 
"GE2RB.exe"+17B76C5: CC                 -  int 3 
"GE2RB.exe"+17B76C6: CC                 -  int 3 
"GE2RB.exe"+17B76C7: CC                 -  int 3 
"GE2RB.exe"+17B76C8: CC                 -  int 3 
"GE2RB.exe"+17B76C9: CC                 -  int 3 
"GE2RB.exe"+17B76CA: CC                 -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3363</ID>
          <Description>"GAP &gt;=300"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanGAPRead,GE2RB.exe,0F BF 86 C8 B1 01 00 5E) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  cmp word ptr [esi+0001B1C8],#300
  jge code
  mov word ptr [esi+0001B1C8],#300

code:
  movsx eax,word ptr [esi+0001B1C8]
  jmp return

AOBScanGAPRead:
  jmp newmem
  nop
  nop
return:
registersymbol(AOBScanGAPRead)

[DISABLE]

AOBScanGAPRead:
  db 0F BF 86 C8 B1 01 00

unregistersymbol(AOBScanGAPRead)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1B8D594

"GE2RB.exe"+1B8D577: 89 E5                    -  mov ebp,esp
"GE2RB.exe"+1B8D579: 56                       -  push esi
"GE2RB.exe"+1B8D57A: 8B 75 08                 -  mov esi,[ebp+08]
"GE2RB.exe"+1B8D57D: 85 F6                    -  test esi,esi
"GE2RB.exe"+1B8D57F: 75 13                    -  jne GE2RB.exe+1B8D594
"GE2RB.exe"+1B8D581: E8 B6 01 0B 00           -  call GE2RB.exe+1C3D73C
"GE2RB.exe"+1B8D586: 68 DC 28 5D 01           -  push GE2RB.exe+11D28DC
"GE2RB.exe"+1B8D58B: E8 40 FB 0A 00           -  call GE2RB.exe+1C3D0D0
"GE2RB.exe"+1B8D590: 83 C4 04                 -  add esp,04
"GE2RB.exe"+1B8D593: CC                       -  int 3 
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1B8D594: 0F BF 86 C8 B1 01 00     -  movsx eax,word ptr [esi+0001B1C8]
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1B8D59B: 5E                       -  pop esi
"GE2RB.exe"+1B8D59C: 5D                       -  pop ebp
"GE2RB.exe"+1B8D59D: C3                       -  ret 
"GE2RB.exe"+1B8D59E: CC                       -  int 3 
"GE2RB.exe"+1B8D59F: CC                       -  int 3 
"GE2RB.exe"+1B8D5A0: CC                       -  int 3 
"GE2RB.exe"+1B8D5A1: CC                       -  int 3 
"GE2RB.exe"+1B8D5A2: CC                       -  int 3 
"GE2RB.exe"+1B8D5A3: CC                       -  int 3 
"GE2RB.exe"+1B8D5A4: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"Ignore AP Cost"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanIgnoreAP,GE2RB.exe,39 08 7C 06 5F) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //cmp [eax],ecx
  //cmp #2,#1
  jl GE2RB.AmdPowerXpressRequestHighPerformance+A62756
  pop edi
  jmp return

AOBScanIgnoreAP:
  jmp newmem
return:
registersymbol(AOBScanIgnoreAP)

[DISABLE]

AOBScanIgnoreAP:
  db 39 08 7C 06 5F

unregistersymbol(AOBScanIgnoreAP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1C191EC

"GE2RB.exe"+1C191C4: E8 AD 43 F7 FF           -  call GE2RB.exe+1B8D576
"GE2RB.exe"+1C191C9: 8B 7D 0C                 -  mov edi,[ebp+0C]
"GE2RB.exe"+1C191CC: 83 C4 0C                 -  add esp,0C
"GE2RB.exe"+1C191CF: 0F BE 8C 3E 44 04 00 00  -  movsx ecx,byte ptr [esi+edi+00000444]
"GE2RB.exe"+1C191D7: 39 C8                    -  cmp eax,ecx
"GE2RB.exe"+1C191D9: 7C 1B                    -  jl GE2RB.exe+1C191F6
"GE2RB.exe"+1C191DB: 56                       -  push esi
"GE2RB.exe"+1C191DC: E8 D4 AB E0 FF           -  call GE2RB.exe+1A23DB5
"GE2RB.exe"+1C191E1: 0F BF 8C 77 44 03 00 00  -  movsx ecx,word ptr [edi+esi*2+00000344]
"GE2RB.exe"+1C191E9: 83 C4 04                 -  add esp,04
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1C191EC: 39 08                    -  cmp [eax],ecx
"GE2RB.exe"+1C191EE: 7C 06                    -  jl GE2RB.exe+1C191F6
"GE2RB.exe"+1C191F0: 5F                       -  pop edi
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1C191F1: B0 01                    -  mov al,01
"GE2RB.exe"+1C191F3: 5E                       -  pop esi
"GE2RB.exe"+1C191F4: 5D                       -  pop ebp
"GE2RB.exe"+1C191F5: C3                       -  ret 
"GE2RB.exe"+1C191F6: 5F                       -  pop edi
"GE2RB.exe"+1C191F7: 30 C0                    -  xor al,al
"GE2RB.exe"+1C191F9: 5E                       -  pop esi
"GE2RB.exe"+1C191FA: 5D                       -  pop ebp
"GE2RB.exe"+1C191FB: C3                       -  ret 
"GE2RB.exe"+1C191FC: CC                       -  int 3 
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>89</ID>
              <Description>"Ignore AP on Usage"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanIgnoreAPonUse,GE2RB.exe,39 08 0F 8C DA 00 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //cmp [eax],ecx
  jl GE2RB.AmdPowerXpressRequestHighPerformance+A62CB9
  jmp return

AOBScanIgnoreAPonUse:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(AOBScanIgnoreAPonUse)

[DISABLE]

AOBScanIgnoreAPonUse:
  db 39 08 0F 8C DA 00 00 00

unregistersymbol(AOBScanIgnoreAPonUse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1C19677

"GE2RB.exe"+1C19650: 89 75 0C                 -  mov [ebp+0C],esi
"GE2RB.exe"+1C19653: E8 1E 3F F7 FF           -  call GE2RB.exe+1B8D576
"GE2RB.exe"+1C19658: 0F BE 0E                 -  movsx ecx,byte ptr [esi]
"GE2RB.exe"+1C1965B: 83 C4 0C                 -  add esp,0C
"GE2RB.exe"+1C1965E: 39 C8                    -  cmp eax,ecx
"GE2RB.exe"+1C19660: 0F 8C F3 00 00 00        -  jl GE2RB.exe+1C19759
"GE2RB.exe"+1C19666: 53                       -  push ebx
"GE2RB.exe"+1C19667: E8 49 A7 E0 FF           -  call GE2RB.exe+1A23DB5
"GE2RB.exe"+1C1966C: 0F BF 8C 5F 44 03 00 00  -  movsx ecx,word ptr [edi+ebx*2+00000344]
"GE2RB.exe"+1C19674: 83 C4 04                 -  add esp,04
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1C19677: 39 08                    -  cmp [eax],ecx
"GE2RB.exe"+1C19679: 0F 8C DA 00 00 00        -  jl GE2RB.exe+1C19759
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1C1967F: 0F BF 37                 -  movsx esi,word ptr [edi]
"GE2RB.exe"+1C19682: E8 3F 03 95 FF           -  call GE2RB.exe+15699C6
"GE2RB.exe"+1C19687: 56                       -  push esi
"GE2RB.exe"+1C19688: 6A 00                    -  push 00
"GE2RB.exe"+1C1968A: 50                       -  push eax
"GE2RB.exe"+1C1968B: E8 7C FE 94 FF           -  call GE2RB.exe+156950C
"GE2RB.exe"+1C19690: 83 C4 0C                 -  add esp,0C
"GE2RB.exe"+1C19693: 84 C0                    -  test al,al
"GE2RB.exe"+1C19695: 75 13                    -  jne GE2RB.exe+1C196AA
"GE2RB.exe"+1C19697: E8 A0 40 02 00           -  call GE2RB.exe+1C3D73C
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>3361</ID>
          <Description>"Unlock BA After 1 Use"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(AOBScanBARead,GE2RB.exe,0F B7 46 06 03 85 FC FF FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  //cmp word ptr [esi+06],#10000
  //jge code
  //mov word ptr [esi+06],#10000
code:
  //add word ptr [esi+06],#100000
  //movzx eax,word ptr [esi+06]
  // Assign EXP needed to current EXP
  movzx eax,word ptr [edx+04]
  add eax,[ebp-00000004]
  jmp return

AOBScanBARead:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(AOBScanBARead)

[DISABLE]

AOBScanBARead:
  db 0F B7 46 06 03 85 FC FF FF FF

unregistersymbol(AOBScanBARead)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "GE2RB.exe"+1BEE81B

"GE2RB.exe"+1BEE800: E8 40 E3 A9 FF           -  call GE2RB.exe+168CB45
"GE2RB.exe"+1BEE805: 83 C4 0C                 -  add esp,0C
"GE2RB.exe"+1BEE808: 85 C0                    -  test eax,eax
"GE2RB.exe"+1BEE80A: 7E 0D                    -  jle GE2RB.exe+1BEE819
"GE2RB.exe"+1BEE80C: 50                       -  push eax
"GE2RB.exe"+1BEE80D: E8 F2 1F FA FF           -  call GE2RB.exe+1B90804
"GE2RB.exe"+1BEE812: 83 C4 04                 -  add esp,04
"GE2RB.exe"+1BEE815: 84 C0                    -  test al,al
"GE2RB.exe"+1BEE817: 74 54                    -  je GE2RB.exe+1BEE86D
"GE2RB.exe"+1BEE819: 8B 16                    -  mov edx,[esi]
// ---------- INJECTING HERE ----------
"GE2RB.exe"+1BEE81B: 0F B7 46 06              -  movzx eax,word ptr [esi+06]
"GE2RB.exe"+1BEE81F: 03 85 FC FF FF FF        -  add eax,[ebp-00000004]
// ---------- DONE INJECTING  ----------
"GE2RB.exe"+1BEE825: 0F B7 4A 04              -  movzx ecx,word ptr [edx+04]
"GE2RB.exe"+1BEE829: 39 C8                    -  cmp eax,ecx
"GE2RB.exe"+1BEE82B: 0F 4C C8                 -  cmovl ecx,eax
"GE2RB.exe"+1BEE82E: 66 89 4E 06              -  mov [esi+06],cx
"GE2RB.exe"+1BEE832: 66 3B 4A 04              -  cmp cx,[edx+04]
"GE2RB.exe"+1BEE836: 72 35                    -  jb GE2RB.exe+1BEE86D
"GE2RB.exe"+1BEE838: C6 46 04 06              -  mov byte ptr [esi+04],06
"GE2RB.exe"+1BEE83C: A1 54 6A 7C 01           -  mov eax,[GE2RB.exe+13C6A54]
"GE2RB.exe"+1BEE841: 85 C0                    -  test eax,eax
"GE2RB.exe"+1BEE843: 75 18                    -  jne GE2RB.exe+1BEE85D
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
