<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"[X] &lt;== Anno 1404 Venice V2.01 Retail Script v2.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Anno 1404 - Venice (Gold Pack)
 Game Version  : 2.01.5010
 Game Sponsor  : torrent (No Crack)
 Process Name  : Addon.exe
 Relevant Info : 32bits/RTS/2010
 Script Version: 2.0
 CE Version    : 6.4
 Release date  : 11-Aug-2015
 Author        : Recifense
 History:
 11-Mar-10: First Release
 11-Aug-15: Release for version 2.01 (CE64)(s2.0)
 Features:
 - Minimum Treasure
 - Minimum Honor
 - Minimum Cargo on Ships
 - God Mode
 - Minimum/Maximum Resources on Island
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"Addon.exe")
define(MOPT,Addon.exe+001f4bd1)
define(MOSC,Addon.exe+0024a6f6)
define(MOSU,Addon.exe+003a2043)
define(MOWH,Addon.exe+003c85c0)
define(GDMD,Addon.exe+0038721a)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOPT,8b 81 a0 00 00 00 25 00 fc ff ff 83 b9 a4 00 00 00 00 ?? ?? ??)
assert(MOSC,8b 48 04 8b 50 08 8b 40 0c 89 7c 24 28 89 4c 24 2c 89 54 24 30)
assert(MOSU,8b 81 c0 00 00 00 8b 15 ?? ?? ?? ?? 3b 82 ec 00 00 00 57 ?? ??)
assert(MOWH,74 03 8b 69 14 80 7c 24 18 00 0f 84 ?? ?? ?? ?? 33 ff 8d 96 d0)
assert(GDMD,01 43 08 b8 10 27 00 00 8b ce 11 53 0c 33 d2 e8 ?? ?? ?? ?? 8b)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonPlayerTreasure)
label(_MonPT00)
label(_BackMPT)
label(_ExitMPT)
label(_MonShipCargo)
label(_BackMSC)
label(_ExitMSC)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(_MonWareHouse)
label(_MonWH00)
label(_MonWH01)
label(_BackMWH)
label(_ExitMWH)
label(_ExitWH1)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)

label(iEnableMPT)
label(iEnableMPH)
label(iEnableMSC)
label(iEnableMWH)
label(iEnableGMD)

label(iMinTreasure)
label(iMinHonor)
label(pPlayer)
label(pCargo)
label(pShip)
label(pUnit)
label(pWH)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPT)
registersymbol(iEnableMPH)
registersymbol(iEnableMSC)
registersymbol(iEnableMWH)
registersymbol(iEnableGMD)
registersymbol(iMinTreasure)
registersymbol(iMinHonor)
registersymbol(pPlayer)
registersymbol(pCargo)
registersymbol(pShip)
registersymbol(pUnit)
registersymbol(pWH)

//=========================================
MyCode:
//=========================================
// At the strategic screen
_MonPlayerTreasure:
 mov [pPlayer],ecx

 cmp dword ptr [iEnableMPT],0
 je _MonPT00                       // Jump if feature is disabled

 cmp dword ptr [ecx+000000a4],0
 jne _MonPT00

 mov eax,[iMinTreasure]
 cmp eax,[ecx+000000a0]
 jle _MonPT00

 mov [ecx+000000a0],eax

_MonPT00:
 cmp dword ptr [iEnableMPH],0
 je _ExitMPT                       // Jump if feature is disabled

 cmp dword ptr [ecx+000000ac],0
 jne _ExitMPT

 cmp dword ptr [ecx+000000a8],0
 je _ExitMPT

 mov eax,[iMinHonor]
 cmp eax,[ecx+000000a8]
 jle _ExitMPT

 mov [ecx+000000a8],eax

_ExitMPT:
 mov eax,[ecx+000000A0]            // Original code (get Treasure)
 jmp _BackMPT                      // Back to main code

//=========================================
// When a ship is selected
_MonShipCargo:
 mov edx,[eax]                    // Get Cargo Type
 test edx,edx
 jz _ExitMSC                      // Jump if invalid

 mov [pCargo],eax

 mov ecx,[esp+20]
 mov [pShip],ecx

 mov ecx,[eax+04]                 // Get Cargo Amount

 cmp dword ptr [iEnableMSC],0
 je _ExitMSC                      // Jump if feature is disabled

 cmp edx,#100                     // Special cargo?
 jge _ExitMSC

 cmp ecx,#30
 jge _ExitMSC

 mov ecx,#30
 mov [eax+04],ecx                  // Make cargo = 30

_ExitMSC:
 mov ecx,[eax+04]                 // Original code (Get Cargo Amount)
 mov edx,[eax+08]                  // Original code
 jmp _BackMSC                      // Back to main code

//=========================================
// Selected Ship or Building
_MonSelUnit:
 mov [pUnit],ecx

_ExitMSU:
 mov eax,[ecx+000000C0]            // Original code (get OwnerID)
 jmp _BackMSU                      // Back to main code

//=========================================
// When it is visible (freq) (Minimum/Maximum Item Amount)
// ESI = pIslandStore
// ECX = pStoreItem
_MonWareHouse:
 je _ExitWH1                       // Original code (simulating)

 cmp dword ptr [iEnableMWH],0
 je _ExitMWH                       // Jump if feature is disabled

 test esi,esi
 je _ExitMWH

 cmp dword ptr [esi+000007c0],00
 jne _ExitMWH

 mov ebp,[esi+0000033c]            // Get default capacity

 cmp dword ptr [esi+00000354],00
 je _MonWH00

 add ebp,#20000                    // add bonus value (usually 20)

_MonWH00:
 sub ebp,#5000                     // EBP = Maximum Value - 5
 cmp ebp,[ecx+14]
 js _MonWH01

 add ebp,#5000                     // EBP = Base value + Bonus Value
 shr ebp,1                         // EBP = Minimum Value = EBP / 2

 cmp ebp,[ecx+14]
 js _ExitMWH

_MonWH01:
 mov [ecx+14],ebp                  // Update item current value.

_ExitMWH:
 mov ebp,[ecx+14]                  // Original code (get item amount)

_ExitWH1:
 mov [pWH],esi                     // Save pointer for debugging
 jmp _BackMWH                      // Back to main code

//=========================================
// During Combat (Health %)
_GodMode:
 push ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ecx,[ebx+04]                  // Get ptr to unit
 cmp dword ptr [ecx+000000c0],0    // Player's unit?
 jne _ExitGMD                      // Jump if false

 mov dword ptr [ebx+08],#40960000  // Make %HP = 100%
 mov dword ptr [ebx+0c],00         // Make %HP = 100%

 xor eax,eax
 mov edx,eax                       // % to decrease = 0

_ExitGMD:
 pop ecx

 add [ebx+08],eax                  // Original code (upd %HP)
 mov eax,00002710                  // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
 db '===============================&gt;'
 db 'CE6.4 Script by Recifense 081015'
//=========================================
// Variables
iEnableMPT:
 dd 0
iEnableMPH:
 dd 0
iEnableMSC:
 dd 0
iEnableMWH:
 dd 0
iEnableGMD:
 dd 0
iMinTreasure:
 dd #102400000
iMinHonor:
 dd #655360
pPlayer:
 dd 0
pCargo:
 dd 0
pShip:
 dd 0
pUnit:
 dd 0
pWH:
 dd 0

//=========================================
// Hacking Points
MOPT:
 jmp _MonPlayerTreasure
 nop
_BackMPT:

MOSC:
 jmp _MonShipCargo
 nop
_BackMSC:

MOSU:
 jmp _MonSelUnit
 nop
_BackMSU:

MOWH:
 jmp _MonWareHouse
_BackMWH:

GDMD:
 jmp _GodMode
 nop
 nop
 nop
_BackGMD:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOPT:
// mov eax,[ecx+000000A0]
 db 8b 81 a0 00 00 00

MOSC:
// mov ecx,[eax+04]
// mov edx,[eax+08]
 db 8b 48 04 8b 50 08

MOSU:
// mov eax,[ecx+000000C0]
 db 8b 81 c0 00 00 00

MOWH:
// je $+03
// mov ebp,[ecx+14]
 db 74 03 8b 69 14

GDMD:
// add [ebx+08],eax
// mov eax,00002710
 db 01 43 08 b8 10 27 00 00

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
getAddressList().getMemoryRecordByID(97).Active=false
getAddressList().getMemoryRecordByID(97).Color=0x0c08000
getAddressList().getMemoryRecordByID(98).Active=false
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
getAddressList().getMemoryRecordByID(99).Active=false
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
getAddressList().getMemoryRecordByID(100).Active=false
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPT)
unregistersymbol(iEnableMPH)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableMWH)
unregistersymbol(iEnableGMD)
unregistersymbol(iMinTreasure)
unregistersymbol(iMinHonor)
unregistersymbol(pPlayer)
unregistersymbol(pCargo)
unregistersymbol(pShip)
unregistersymbol(pUnit)
unregistersymbol(pWH)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Minimum Treasure ---------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPT",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPT",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"[X] &lt;== Minimum Honour  ----------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPH",1)
getAddressList().getMemoryRecordByID(97).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPH",0)
getAddressList().getMemoryRecordByID(97).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Ship Minimum Cargo  -----------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMSC",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMSC",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Warehouse Minimum/Maximum Resources  ------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWH",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWH",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode (Ships/Buildings) ------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"[X] &lt;========================== Selected Ship Info =========================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>15</ID>
              <Description>"Ship Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pShip</Address>
              <Offsets>
                <Offset>E4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Current Cargo Type ========&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCargo</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>104</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Decrease Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>98</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>1</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>101</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>2</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"Current Cargo Amount ======&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCargo</Address>
              <Offsets>
                <Offset>4</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150811</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Anno 1404 - Venice (Gold Pack)
 Game Version  : 2.01.5010
 Game Sponsor  : torrent (No Crack)
 Process Name  : Addon.exe
 Relevant Info : 32bits/RTS/2010
 Script Version: 2.0
 CE Version    : 6.4
 Release date  : 11-Aug-2015
 Author        : Recifense
 History:
 11-Mar-10: First Release
 11-Aug-15: Release for version 2.01 (CE64)(s2.0)
 Features:
 - Minimum Treasure                    [1]
 - Minimum Honor                       [2]
 - Minimum Cargo on Ships              [3]
 - Minimum/Maximum Resources on Island [4]
 - God Mode (for Ships and Buildings)  [5]                          
 - Some Pointers
===========================================
[1] For Human player only (100.000);
[2] For Human player only (640);
[3] For Human player's Selected Ship only (30);
[4] For Human player's Main Warehouse only;
[5] For Human player's ships and buildings;
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "Addon.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  all cheats;
CTRL+End       = Disable all cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
