<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>1084</ID>
      <Description>"Infinite Health *EXPLOSION AND FALL DAMAGE, ABILITY TO HEAL*"</Description>
      <LastState/>
      <Color>0080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(HP2,gamedll_x64_rwdi.dll,F3 0F 11 83 54 09 00 00 40)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+AAED77)

label(code)
label(return)

newmem:

code:
  //movss [rbx+00000954],xmm0
  mov [rbx+00000954],(float)275
  jmp return

HP2:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HP2)

[DISABLE]

HP2:
  db F3 0F 11 83 54 09 00 00

unregistersymbol(HP2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AAED77

"gamedll_x64_rwdi.dll"+AAED56: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+AAED59: FF 90 48 01 00 00        -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+AAED5F: 0F 2F F7                 -  comiss xmm6,xmm7
"gamedll_x64_rwdi.dll"+AAED62: 73 05                    -  jae gamedll_x64_rwdi.dll+AAED69
"gamedll_x64_rwdi.dll"+AAED64: 0F 28 C7                 -  movaps xmm0,xmm7
"gamedll_x64_rwdi.dll"+AAED67: EB 08                    -  jmp gamedll_x64_rwdi.dll+AAED71
"gamedll_x64_rwdi.dll"+AAED69: 0F 2F F0                 -  comiss xmm6,xmm0
"gamedll_x64_rwdi.dll"+AAED6C: 77 03                    -  ja gamedll_x64_rwdi.dll+AAED71
"gamedll_x64_rwdi.dll"+AAED6E: 0F 28 C6                 -  movaps xmm0,xmm6
"gamedll_x64_rwdi.dll"+AAED71: 44 0F 28 44 24 20        -  movaps xmm8,[rsp+20]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+AAED77: F3 0F 11 83 54 09 00 00  -  movss [rbx+00000954],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+AAED7F: 40 84 F6                 -  test sil,sil
"gamedll_x64_rwdi.dll"+AAED82: 74 15                    -  je gamedll_x64_rwdi.dll+AAED99
"gamedll_x64_rwdi.dll"+AAED84: 0F 2F F8                 -  comiss xmm7,xmm0
"gamedll_x64_rwdi.dll"+AAED87: 72 10                    -  jb gamedll_x64_rwdi.dll+AAED99
"gamedll_x64_rwdi.dll"+AAED89: 41 B1 01                 -  mov cl,01
"gamedll_x64_rwdi.dll"+AAED8C: 45 33 C0                 -  xor r8d,r8d
"gamedll_x64_rwdi.dll"+AAED8F: 33 D2                    -  xor edx,edx
"gamedll_x64_rwdi.dll"+AAED91: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+AAED94: E8 37 5C FF FF           -  call gamedll_x64_rwdi.dll+AA49D0
"gamedll_x64_rwdi.dll"+AAED99: 48 8B 7C 24 60           -  mov rdi,[rsp+60]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1093</ID>
      <Description>"Instant Kill"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(ik_aob1,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(ik_aob1)

ik_aob1:
db F3 0F 5C C9 F3 41 0F 11 4F 78

[Disable]

ik_aob1:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(ik_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1096</ID>
      <Description>"Infinite Stamina"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Weapon Stamina
aobscanmodule(is_aob1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8)
registersymbol(is_aob1)

//Sprinting Stamina
aobscanmodule(is_aob2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10)
registersymbol(is_aob2)

is_aob1+5:
db F3 41 0F 58 C8

is_aob2:
db F3 0F 58 C7

[Disable]

is_aob1+5:
db F3 41 0F 5C C8
unregistersymbol(is_aob1)

is_aob2:
db F3 0F 5C C7
unregistersymbol(is_aob2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2524</ID>
      <Description>"Infinite Weapon Durability"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(iwd_1,128,gamedll_x64_rwdi.dll) //Infinite Weapon Durability
aobscanmodule(iwd_aob1,gamedll_x64_rwdi.dll,F3 0F 11 77 04 FF)
registersymbol(iwd_aob1)
label(returnhere_iwd_1)

//--------------------------------------------------//
iwd_1:
mov [rdi+04],(float)100
jmp returnhere_iwd_1
//--------------------------------------------------//

iwd_aob1:
jmp iwd_1
returnhere_iwd_1:

[Disable]

iwd_aob1:
db F3 0F 11 77 04
unregistersymbol(iwd_aob1)
dealloc(iwd_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1234</ID>
      <Description>"Weapons In Safe Zone *NOT WORKING*"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(wisz_aob1,gamedll_x64_rwdi.dll,48 85 D2 74 03 48 89 3A FF 83 68 08 00 00)
registersymbol(wisz_aob1)

wisz_aob1+8:
db 90 90 90 90 90 90

[Disable]

wisz_aob1+8:
db FF 83 68 08 00 00
unregistersymbol(wisz_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2044</ID>
      <Description>"Easy Lock Picking"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(elp_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(elp_aob1,gamedll_x64_rwdi.dll,F3 0F 10 56 50 F3 0F 10 4E 54)
registersymbol(elp_aob1)
label(returnhere_elp_1)

//--------------------------------------------------//
elp_1:
movss xmm1,[rsi+54]
mov [rsi+54],(float)999999
jmp returnhere_elp_1
//--------------------------------------------------//

elp_aob1+5:
jmp elp_1
returnhere_elp_1:

[Disable]

elp_aob1+5:
db F3 0F 10 4E 54
unregistersymbol(elp_aob1)
dealloc(elp_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1102</ID>
      <Description>"Infinite Crafting Items"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ici_1,32,gamedll_x64_rwdi.dll) //Infinite Crafting Items
aobscanmodule(ici_aob1,gamedll_x64_rwdi.dll,48 39 1C 28 75 59 8B 73 40 48 8D 4B 40)
registersymbol(ici_aob1)
label(returnhere_ici_1)

//--------------------------------------------------//
ici_1:
mov [rbx+40],64
mov esi,[rbx+40]
lea rcx,[rbx+40]
jmp returnhere_ici_1
//--------------------------------------------------//

ici_aob1+6:
jmp ici_1
nop
nop
returnhere_ici_1:

[Disable]

ici_aob1+6:
db 8B 73 40 48 8D 4B 40
unregistersymbol(ici_aob1)
dealloc(ici_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1100</ID>
      <Description>"Infinite Ammo"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Clip Ammo
aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

//Infinite Overall Ammo
aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90

[Disable]

ica_aob1+7:
db FF CA
unregistersymbol(ica_aob1)

ioa_aob1+6:
db 45 89 44 C2 04
unregistersymbol(ioa_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1103</ID>
      <Description>"Infinite Throwables / Weapon Upgrades"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//Infinite Throwables / Weapon Upgrades
aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90


[DISABLE]

itwu_aob1+3:
db 7E 39

itwu_aob1+7:
db FF CA
unregistersymbol(itwu_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2035</ID>
      <Description>"Infinite UV Flashlight"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite UV Flashlight
aobscanmodule(iuf_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28)
registersymbol(iuf_aob1)

iuf_aob1:
db F3 0F 58 C2

[Disable]

iuf_aob1:
db F3 0F 5C C2
unregistersymbol(iuf_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2042</ID>
      <Description>"Infinite Grappling Hook *NOT WORKING*"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Grappling Hook
aobscanmodule(igh_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C7 0F 2F C6 F3 0F 11 43 40)
registersymbol(igh_aob1)

igh_aob1:
db F3 0F 58 C7


[Disable]

igh_aob1:
db F3 0F 5C C7
unregistersymbol(igh_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1063</ID>
      <Description>"Stop Challenge Timer"</Description>
      <LastState/>
      <Color>00FF00</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
AoBScanModule(AlterMissionTimer, gamedll_x64_rwdi.dll, F3 0F 58 83 ?? ?? ?? ?? F3 0F 11 83 ?? ?? ?? ?? 48 85 C9 )
registersymbol(AlterMissionTimer)

AlterMissionTimer:
mov [rbx+F0],(float)5
db 90 90 90 90 90 90

[DISABLE]
unregistersymbol(AlterMissionTimer)

AlterMissionTimer:
addss xmm0,[rbx+000000F0]
movss [rbx+000000F0],xmm0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2525</ID>
      <Description>"Max Level (Survival, Agility, Power, Legend) *PLACEHOLDER*"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0080FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>ik_aob1</Name>
      <Address>7FFE7A3B42A5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>is_aob1</Name>
      <Address>7FFE7AD9B134</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>is_aob2</Name>
      <Address>7FFE7AD8CE6F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iwd_aob1</Name>
      <Address>7FFE7A7EC556</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>elp_aob1</Name>
      <Address>7FFE7A8627BB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ica_aob1</Name>
      <Address>7FFE7AE566D5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ioa_aob1</Name>
      <Address>7FFE7AD7EAC2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ici_aob1</Name>
      <Address>7FFE7AD7F5F9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itwu_aob1</Name>
      <Address>7FFE7AD7F70B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iuf_aob1</Name>
      <Address>7FFE7AD33E55</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AlterMissionTimer</Name>
      <Address>7FFE7AD54E49</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HP2</Name>
      <Address>7FFE7AC4ED77</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
  for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
  end
end

function LBItemListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Item = ItemTable[sender.ItemIndex+1]
  local Quant = readInteger(Item.Address+0x40)
  PackEdit_EItemQuant.text = Quant
  local ItemTypeIndex = 0
  for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
  end
  PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
end

function BItemApplyClick(sender)
  if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
  if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
  local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
  local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
  local Quant = tonumber(PackEdit_EItemQuant.text)
  writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
  writeInteger(Item.Address+0x40,Quant)
  BItemUpdateClick()
end

function EditorShow()
  ItemTable = {}
  WeaponTable = {}
  BaseItemTable = {}
  PackEdit.show()
end

function EditorHide()
  PackEdit.close()
end
</LuaScript>
</CheatTable>
