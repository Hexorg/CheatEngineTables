<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <ID>89</ID>
      <Description>"Total War - Shogun 2 V1.00 Script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Total War - Shogun 2
 Game Version  : 1.00
 Script Version: 1.0
 CE Version    : 6.0
 GM, Ammo, Gold, MP, MSO
 23-Mar-2011
 By Recifense
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Shogun2.dll+00a63e50,55 8b ec 83 e4 f8)
assert(Shogun2.dll+00c7e770,55 8b ec 83 e4 f8)
assert(Shogun2.dll+01199dc3,8b b7 34 01 00 00)
assert(Shogun2.dll+009e7af3,f3 0f 11 86 40 0f 00 00)
assert(Shogun2.dll+00cf54e0,51 8b 8f a0 03 00 00)
assert(Shogun2.dll+011cb77d,89 8e b0 00 00 00)
assert(Shogun2.dll+00b560d7,8b 43 40)
assert(Shogun2.dll+0046df80,?? ?? 6c 04 00 00)
assert(Shogun2.dll+011ad6bc,?? ?? 0c 1c 00 00)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_GodMode)
label(_GodM00)
label(_GodM01)
label(_BackGM)
label(_ExitGM)
label(_GodMode1)
label(_GodM10)
label(_GodM11)
label(_BackGM1)
label(_ExitGM1)
label(_MonSel)
label(_BackMS)
label(_MonAmmo)
label(_MonA0)
label(_MonA1)
label(_BackMA)
label(_ExitMA)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)
label(_MonSelShip)
label(_BackMSS)
label(_ExitMSS)
label(_GodModeSH)
label(_BackGMSH)
label(_ExitGMSH)
label(_MonGold)
label(_BackMG)
label(_ExitMG)
label(_MonMP)
label(_MonM0)
label(_BackMM)
label(_ExitMM)
label(_MonSelOfficer)
label(_BackMSO)
label(_ExitMSO)
label(pSel)
label(pGold)
label(pOfficer)
label(iEnableGM)
label(iEnableGM1)
label(iEnableGM2)
label(iEnableGMS)
label(iEnableMA)
label(iEnableQR)
label(iEnableMG)
label(iEnableMM)
label(iEnableMTS)
label(iPlayerID)
label(iMinGold)
label(iEAX)
label(iCount0)
label(iCount1)
label(iCount2)
label(iCount3)
label(iCountS)

registersymbol(MyCode)
registersymbol(pSel)
registersymbol(pGold)
registersymbol(pOfficer)
registersymbol(iEnableGM)
registersymbol(iEnableGM1)
registersymbol(iEnableGM2)
registersymbol(iEnableGMS)
registersymbol(iEnableMA)
registersymbol(iEnableQR)
registersymbol(iEnableMG)
registersymbol(iEnableMM)
registersymbol(iEnableMTS)
registersymbol(iMinGold)
registersymbol(iPlayerID)
registersymbol(iCount0)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount3)
registersymbol(iCountS)

//=========================================
MyCode:
//=========================================
_GodMode:
 mov [iEAX],eax                    // Save EAX

 mov eax,[esp+04]                  // Get Unit

 mov eax,[eax+00000204]            // Get pTroop
 test eax,eax
 jnz _GodM00                       // Jump if the pointer is null

 mov eax,[eax+0000020c]            // Get pShip
 test eax,eax
 jz _ExitGM                        // Jump if the pointer is null

 mov al,[eax+0000111f]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 inc dword ptr [iCount0]

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

 jmp _GodM01
//=====
_GodM00:
 mov eax,[eax+00000294]            // Get pPlayerInfo
 test eax,eax
 jz _ExitGM                        // Jump if the pointer is null

 mov eax,[eax+04]                  // Get playerID
 cmp eax,[iPlayerID]               // Is it a Player's Troop ?
 jne _ExitGM                       // Jump if false

 inc dword ptr [iCount1]

 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

_GodM01:
 mov eax,[iEAX]                    // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM:
 mov eax,[iEAX]                    // Restore EAX

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 and esp,f8                        // Original code
 jmp _BackGM                       // Back to main code

//=========================================
_GodMode1:
 mov [iEAX],eax                    // Save EAX

 mov eax,[ecx+00000204]            // Get pTroop
 test eax,eax
 jnz _GodM10                       // Jump if the pointer is not null

 mov eax,[ecx+0000020c]            // Get pShip
 test eax,eax
 jz _ExitGM1                       // Jump if the pointer is null
// Ship Crew
 mov al,[eax+0000111f]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

 inc dword ptr [iCount2]

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled
 jmp _GodM11
//Land Soldiers
_GodM10:
 mov eax,[eax+00000294]            // Get pPlayerInfo
 test eax,eax
 jz _ExitGM1                       // Jump if the pointer is null

 mov eax,[eax+04]                  // Get playerID
 cmp eax,[iPlayerID]               // Is it a Player's Troop ?
 jne _ExitGM1                      // Jump if false

 inc dword ptr [iCount3]

 cmp dword ptr [iEnableGM],0
 je _ExitGM1                       // Jump if feature is disabled

_GodM11:
 mov eax,[iEAX]                    // Restore EAX
 ret 0004                          // Avoid routine
//-----
_ExitGM1:
 mov eax,[iEAX]                    // Restore EAX

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 and esp,f8                        // Original code
 jmp _BackGM1                      // Back to main code

//=========================================
_MonSel:
 mov esi,[edi+00000134]            // Original code
 mov [pSel],esi
 jmp _BackMS                       // Back to main code

//=========================================
_MonAmmo:
 mov eax,[esi+00000294]            // Get pPlayerInfo
 test eax,eax
 jz _ExitMA                        // Jump if the pointer is null

 mov eax,[eax+04]                  // Get playerID
 cmp eax,[iPlayerID]               // Is it a Player's Troop ?
 jne _ExitMA                       // Jump if false

 cmp dword ptr [iEnableMA],0
 je _MonA0                         // Jump if feature is disabled

 cvtsi2ss xmm0,[esi+00000F44]      // Get Maximum Ammo

_MonA0:
 cmp dword ptr [iEnableQR],0
 je _ExitMA                        // Jump if feature is disabled

 cmp dword ptr [esi+00000dbc],#15
 jle _MonA1

 mov dword ptr [esi+00000dbc],#15

_MonA1:
 cmp dword ptr [esi+00000dc0],#15
 jle _ExitMA

 mov dword ptr [esi+00000dc0],#15

_ExitMA:
 comiss xmm1,xmm0                  // Update EFLAGS
 movss [esi+00000F40],xmm0         // Original code
 jmp _BackMA                       // Back to main code

//=========================================
_GodModeS:
 mov [iEAX],eax                    // Save EAX

 mov eax,[edi+0000020c]            // Get pShip
 test eax,eax
 jz _ExitGMS                       // Jump if the pointer is null

 mov al,[eax+0000111f]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMS                      // Jump if false

 inc dword ptr [iCountS]

 cmp dword ptr [iEnableGM],0
 je _ExitGMS                       // Jump if feature is disabled

 mov eax,[iEAX]                    // Restore EAX
 ret                               // Avoid routine
//-----
_ExitGMS:
 mov eax,[iEAX]                    // Restore EAX

 push ecx                          // Original code
 mov ecx,[edi+000003A0]            // Original code
 jmp _BackGMS                      // Back to main code

//=========================================
// Card under cursor
_MonSelShip:
 mov [pSel],ecx

_ExitMSS:
 mov [esi+000000B0],ecx            // Original code
 jmp _BackMSS                      // Back to main code

//=========================================
// Ship Hull
_GodModeSH:
 mov eax,[ebx+24]                  // Get pShip
 test eax,eax
 jz _ExitGMSH                      // Jump if the pointer is null

 mov al,[eax+0000111f]             // Get pCommon
 cmp al,[iPlayerID]                // Is it a Player's Troop ?
 jne _ExitGMSH                     // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGMSH                      // Jump if feature is disabled

 mov eax,[ebx+1c]                  // Get max HP
 mov [ebx+40],eax                  // Update cur HP

 xor edi,edi                       // value2decrease = 0

_ExitGMSH:
 mov eax,[ebx+40]                  // Original code
 sub eax,edi                       // Original code
 jmp _BackGMSH                     // Back to main code

//=========================================
// RTS Gold
_MonGold:
 mov eax,[ecx+0000048c]            // Get pointer to info
 test eax,eax
 jz _ExitMG                        // Jump if null pointer

 mov eax,[eax+24]                  // Get pointer to uPlayerID
 test eax,eax
 jz _ExitMG                        // Jump if null pointer

 mov eax,[eax]
 cmp eax,006c0070
 jne _ExitMG                       // Jump if it's an AI

 mov eax,[ecx+00000470]            // Get pointer to player
 mov [pGold],eax

 cmp dword ptr [iEnableMG],0
 je _ExitMG                        // Jump if feature is disabled

 mov eax,[iMinGold]
 cmp eax,[ecx+0000046C]
 jle _ExitMG

 mov [ecx+0000046C],eax            // Update gold

_ExitMG:
 mov eax,[ecx+0000046C]            // Original code
 jmp _BackMG                       // Back to main code

//=========================================
// RTS Troop Movement Points/Size
_MonMP:
 push ecx

 mov ecx,[eax+44]                  // Get pointer to Owner
 cmp ecx,[pGold]                   // Is it a player's troop?
 jne _ExitMM

 cmp dword ptr [iEnableMM],0
 je _MonM0                         // Jump if feature is disabled

 xor edi,edi                       // value2decrease = 0

_MonM0:
 cmp dword ptr [iEnableMTS],0
 je _ExitMM                        // Jump if feature is disabled

 mov ecx,[eax+50]                  // Get troop maximum size
 mov [eax+4c],ecx                  // Update current size

_ExitMM:
 pop ecx

 sub edx,edi                       // Original code
 mov [eax+6C],edx                  // Original code
 jmp _BackMM                       // Back to main code

//=========================================
// RTS Selected Officer
_MonSelOfficer:
 mov [pOfficer],eax

_ExitMSO:
 cmp [eax+00001C0C],ebx            // Original code
 jmp _BackMSO                      // Back to main code

//=========================================
// Variables
iEnableGM:
 dd 1
iEnableGM1:
 dd 0
iEnableGM2:
 dd 1
iEnableMA:
 dd 1
iEnableQR:
 dd 1
iEnableGMS:
 dd 1
iEnableMG:
 dd 1
iEnableMM:
 dd 1
iEnableMTS:
 dd 1
pSel:
 dd 0
pGold:
 dd 0
pOfficer:
 dd 0
iPlayerID:
 dd 1
iEAX:
 dd 0
iCount0:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0
iCount3:
 dd 0
iCountS:
 dd 0
iMinGold:
 dd #50000

//=========================================
// Hacking Points
Shogun2.dll+00a63e50:
 jmp _GodMode
 nop
_BackGM:

Shogun2.dll+00c7e770:
 jmp _GodMode1
 nop
_BackGM1:

Shogun2.dll+01199dc3:
 jmp _MonSel
 nop
_BackMS:

Shogun2.dll+009e7af3:
 jmp _MonAmmo
 nop
 nop
 nop
_BackMA:

Shogun2.dll+00cf54e0:
 jmp _GodModeS
 nop
 nop
_BackGMS:

Shogun2.dll+011cb77d:
 jmp _MonSelShip
 nop
_BackMSS:

Shogun2.dll+00b560d7:
 jmp _GodModeSH
_BackGMSH:

Shogun2.dll+0046df80:
 jmp _MonGold
 nop
_BackMG:

Shogun2.dll+0026a5e0:
 jmp _MonMP
_BackMM:

Shogun2.dll+011ad6bc:
 jmp _MonSelOfficer
 nop
_BackMSO:

//=========================================
// Original Codes
[DISABLE]
Shogun2.dll+00a63e50:
 push ebp
 mov ebp,esp
 and esp,f8

Shogun2.dll+00c7e770:
 push ebp
 mov ebp,esp
 and esp,f8

Shogun2.dll+01199dc3:
 mov esi,[edi+00000134]

Shogun2.dll+009e7af3:
 movss [esi+00000F40],xmm0

Shogun2.dll+00cf54e0:
 push ecx
 mov ecx,[edi+000003A0]

Shogun2.dll+011cb77d:
 mov [esi+000000B0],ecx

Shogun2.dll+00b560d7:
 mov eax,[ebx+40]
 sub eax,edi

Shogun2.dll+0046df80:
 mov eax,[ecx+0000046C]

Shogun2.dll+0026a5e0:
 sub edx,edi
 mov [eax+6C],edx

Shogun2.dll+011ad6bc:
 cmp [eax+00001C0C],ebx

unregistersymbol(MyCode)
unregistersymbol(pSel)
unregistersymbol(pGold)
unregistersymbol(pOfficer)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableGM1)
unregistersymbol(iEnableGM2)
unregistersymbol(iEnableGMS)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableQR)
unregistersymbol(iEnableMG)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMTS)
unregistersymbol(iMinGold)
unregistersymbol(iPlayerID)
unregistersymbol(iCount0)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount3)
unregistersymbol(iCountS)

dealloc(MyCode)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Enable/Disable God Mode"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Enable/Disable Unlimited Ammo"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMA</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"Enable/Disable Unlimited Movement Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"Enable/Disable Auto Troop Size Recover"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMTS</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"Enable/Disable Minimum Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMG</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"Minimum Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iMinGold</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>69</ID>
          <Description>"Player's Current Gold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGold</Address>
          <Offsets>
            <Offset>518</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"Selected General Skill Points"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pOfficer</Address>
          <Offsets>
            <Offset>1C0C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Total War - Shogun 2
 Game Version  : 1.00
 Script Version: 1.0
 CE Version    : 6.0
 GM, Ammo, Gold, MP, MSO
 23-Mar-2011
 By Recifense
===========================================

1) God Mode: For all Units and Ships
2) Unlimited Ammo (Arrows, Bombs, etc)
3) Unlimited Movement Points (Army on campaign)
4) Recover troop size when Army moves (Army on campaign)
5) Minimum Gold (On campaign)
6) Player's Current Gold (On campaign)
7) Skill points of selected army's general (On Campaign)
 </Comments>
</CheatTable>
