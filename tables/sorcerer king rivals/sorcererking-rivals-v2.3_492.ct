<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>104</ID>
      <Description>"           ===================      Modes     =================== "</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Enable God Mode"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(tog_one_shot, 1)
globalalloc(tog_invul, 1)

[ENABLE]

aobscanmodule(inj_god_mode,SorcererKing-Rivals.exe, 0f 9e c0 48 23 c3 89 86 d4 00 00 00) // should be unique
alloc(newmem,$200)

label(code)
label(return)
label(damage_to_ally)


// Globals
tog_one_shot:
db 0
tog_invul:
db 0

newmem:
code:
  setle al
  dec eax
  and eax,ebx
  cmp [esi+74], 0
  jz damage_to_ally
  // damage to enemy
  cmp byte ptr [tog_one_shot], 1
  jz @f
  mov [esi+d4], eax
  jmp return
  @@:
  mov [esi+d4], 0
  jmp return
  damage_to_ally:
  cmp byte ptr [tog_invul], 1
  jz @f
  mov [esi+d4], eax
  @@:
  jmp return

inj_god_mode:
  jmp code
  db CC CC CC CC CC CC CC
return:
registersymbol(inj_god_mode)

[DISABLE]

inj_god_mode:
  db 0F 9E C0 48 23 C3 89 86 d4 00 00 00

unregistersymbol(inj_god_mode)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>67</ID>
          <Description>"One Shot Kill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
tog_one_shot:
db 1
[disable]
tog_one_shot:
db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"Invulnerability"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
tog_invul:
db 1
[disable]
tog_invul:
db 0
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Enable Instant Summon"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inj_summon_disable,SorcererKing-Rivals.exe,8B 8E 20 03 00 00 39 59)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ecx,[esi+00000320]
  mov [ecx+3c], 0
  jmp return

inj_summon_disable:
  jmp code
  nop
return:
registersymbol(inj_summon_disable)

[DISABLE]

inj_summon_disable:
  db 8B 8E 20 03 00 00

unregistersymbol(inj_summon_disable)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"Enable Free Crafting"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inj_costless_crafting,SorcererKing-Rivals.exe,39 93 94 00 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp [ebx+00000094],edx
  jmp SorcererKing-Rivals.exe+2a6f27

inj_costless_crafting:
  jmp code
  nop
return:
registersymbol(inj_costless_crafting)

[DISABLE]

inj_costless_crafting:
  db 39 93 94 00 00 00

unregistersymbol(inj_costless_crafting)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Enable Brute Force Crafting"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : SorcererKing-Rivals.exe
  Version: 
  Date   : 2016-09-27
  Author : u

  This script does blah blah blah
}

[ENABLE]

aobscanmodule( inj_free_crafting, SorcererKing-Rivals.exe,75 07 33 C0 5E 8B E5 5D C3 E8) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax, 1
  pop esi
  mov esp, ebp
  pop ebp
  retn

inj_free_crafting:
  jmp code
return:
registersymbol(inj_free_crafting)

[DISABLE]

inj_free_crafting:
  db 75 07 33 C0 5E

unregistersymbol(inj_free_crafting)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable Free Map Movement"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inj_free_move,SorcererKing-Rivals.exe,89 81 24 02 00 00 74) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp [ecx+74], 0
  jnz @f
  mov eax, #32
  @@:
  mov [ecx+224], eax
  jmp return

inj_free_move:
  jmp code
  nop
return:
registersymbol(inj_free_move)

aobscanmodule(inj_free_move_decrease,SorcererKing-Rivals.exe,29 81 24 02 00 00) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  cmp [ecx+74], 0
  jnz @f
  mov eax, 0
  @@:
  sub [ecx+00000224],eax
  jmp return2

inj_free_move_decrease:
  jmp code2
  nop
return2:
registersymbol(inj_free_move_decrease)

[DISABLE]

inj_free_move:
  db 89 81 24 02 00 00

unregistersymbol(inj_free_move)
dealloc(newmem)
inj_free_move_decrease:
  db 29 81 24 02 00 00

unregistersymbol(inj_free_move_decrease)
dealloc(newmem2)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enable Experience Multiplier"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inj_exp_multiplier,SorcererKing-Rivals.exe,01 86 30 05 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

label(exp_mult_val)
registersymbol(exp_mult_val)

newmem:
exp_mult_val:
dd #175

code:
  cmp [esi+74], 0
  jz @f
  add [esi+00000530],eax
  jmp return
  @@:
  push ebx
  push eax
  mov ebx, [exp_mult_val]
  imul ebx
  mov ebx, #100
  idiv ebx
  add [esi+00000530],eax
  pop eax
  pop ebx
  jmp return

inj_exp_multiplier:
  jmp code
  nop
return:
registersymbol(inj_exp_multiplier)

[DISABLE]

inj_exp_multiplier:
  db 01 86 30 05 00 00

unregistersymbol(inj_exp_multiplier)
unregistersymbol(exp_mult_val)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Multiplier as Percentage"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>exp_mult_val</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"           ==================      Resources     ================== "</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Primary Resources (Double Tap ESC)"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inj_get_mana,SorcererKing-Rivals.exe, d9 47 20 5f dc 05 ?? ?? ?? ?? 5e 5b) // should be unique
registersymbol(inj_get_mana)
alloc(newmem,$1000)


label(code)
label(return)
label(p_mana)
registersymbol(p_mana)
label(p_metal)
registersymbol(p_metal)
label(p_destiny)
registersymbol(p_destiny)
label(p_crystal)
registersymbol(p_crystal)
label(p_horse)
registersymbol(p_horse)


newmem:
p_mana:
dd 0
p_destiny:
dd 0
p_metal:
dd 0
p_crystal:
dd 0
p_horse:
dd 0

code:
  // Mana
  push eax
  mov eax, [edi+4]
  cmp eax, 616e614d
  jnz @f
  mov [p_mana], edi

  @@:
  // Destiny's Favor
  cmp eax, 74736544
  jnz @f
  mov [p_destiny], edi

  @@:
  // Crystal
  cmp eax, 73797243
  jnz @f
  mov [p_crystal], edi

  @@:
  // Metal
  cmp eax, 6174654D
  jnz @f
  mov [p_metal], edi

  @@:
  // Horse
  cmp eax, 73726f48
  jnz @f
  mov [p_horse], edi

  @@:
  pop eax
  fld dword ptr [edi+20]
  pop edi
  fadd qword ptr [SorcererKing-Rivals.exe+93DE48]
  jmp return


inj_get_mana:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:


aobscanmodule(inj_get_logistics,SorcererKing-Rivals.exe,D9 47 20 5F D9 5D 0C) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)
label(p_logistics)
registersymbol(p_logistics)


newmem2:
p_logistics:
dd 0


code2:
  // Logistics
  push eax
  mov eax, [edi+4]
  cmp eax, 69676F4C
  jnz @f
  mov [p_logistics], edi

  @@:
  pop eax
  fld dword ptr [edi+20]
  pop edi
  fstp dword ptr [ebp+0C]
  jmp return2

inj_get_logistics:
  jmp code2
  nop
  nop
return2:
registersymbol(inj_get_logistics)

[DISABLE]

inj_get_mana:
  fld dword ptr [edi+20]
  pop edi
  fadd qword ptr [SorcererKing-Rivals.exe+93DE48]

unregistersymbol(inj_get_mana)
unregistersymbol(p_mana)
unregistersymbol(p_destiny)
unregistersymbol(p_horse)
dealloc(newmem)


inj_get_logistics:
  db D9 47 20 5F D9 5D 0C

unregistersymbol(inj_get_logistics)
unregistersymbol(p_logistics)
dealloc(newmem2)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Mana"</Description>
          <VariableType>Float</VariableType>
          <Address>p_mana</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Logistics"</Description>
          <VariableType>Float</VariableType>
          <Address>p_logistics</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"Destiny"</Description>
          <VariableType>Float</VariableType>
          <Address>p_destiny</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Crystal"</Description>
          <VariableType>Float</VariableType>
          <Address>p_crystal</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Metal"</Description>
          <VariableType>Float</VariableType>
          <Address>p_metal</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"Mounts"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>p_horse</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Get City Population"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(inj_get_current_pop,SorcererKing-Rivals.exe,D9 40 20 D9 5D F8) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(current_pop)
registersymbol(current_pop)
newmem:
current_pop:
dd 0

code:
  mov [current_pop], eax
  fld dword ptr [eax+20]
  fstp dword ptr [ebp-08]
  jmp return

inj_get_current_pop:
  jmp code
  nop
return:
registersymbol(inj_get_current_pop)

[DISABLE]

inj_get_current_pop:
  db D9 40 20 D9 5D F8

unregistersymbol(inj_get_current_pop)
unregistersymbol(current_pop)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>48</ID>
          <Description>"Current Pop    (Click on City)"</Description>
          <VariableType>Float</VariableType>
          <Address>current_pop</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Research Stockpile"</Description>
      <LastState Value="25.59999084" RealAddress="32B9BF40"/>
      <VariableType>Float</VariableType>
      <Address>"SorcererKing-Rivals.exe"+00DAA01C</Address>
      <Offsets>
        <Offset>8</Offset>
        <Offset>660</Offset>
        <Offset>0</Offset>
        <Offset>234</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Skill Stockpile"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="16" RealAddress="32CAE338"/>
      <VariableType>4 Bytes</VariableType>
      <Address>"SorcererKing-Rivals.exe"+00DAA01C</Address>
      <Offsets>
        <Offset>530</Offset>
        <Offset>47C</Offset>
        <Offset>0</Offset>
        <Offset>234</Offset>
      </Offsets>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Skill Up Cost"</Description>
          <LastState Value="150" RealAddress="32CAE33C"/>
          <VariableType>4 Bytes</VariableType>
          <Address>"SorcererKing-Rivals.exe"+00DAA01C</Address>
          <Offsets>
            <Offset>534</Offset>
            <Offset>47C</Offset>
            <Offset>0</Offset>
            <Offset>234</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"           ================      Special Functions     =============== "</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>94</ID>
      <Description>"Add Ultimate Spells (Activate then Open Spellbook)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// "SorcererKing-Rivals.exe"+2F0720
aobscanmodule(inj_spellbook_add_special,SorcererKing-Rivals.exe,8B 48 08 85 C9 74 0D 8B 01 8B 50 04) // should be unique
alloc(newmem,$1000)

label(code)
label(compare_spellnames)
label(return)
label(p_spell)
label(p_spell_name)

label(const_armageddon)
label(const_titans)
label(const_volcano)
label(const_elemental)
label(const_death)
label(const_delin)
label(const_falling)
label(p_armageddon)
label(p_titans)
label(p_volcano)
label(p_elemental)
label(p_death)
label(p_delin)
label(p_falling)
registersymbol(p_armageddon)
registersymbol(p_titans)
registersymbol(p_volcano)
registersymbol(p_elemental)
registersymbol(p_death)
registersymbol(p_delin)
registersymbol(p_falling)



newmem:
const_armageddon:
db 41 72 6D 61 67 65 64 64 6F 6E 5F 53 70 65 6C 6C 00
const_titans:
db 43 61 6C 6C 4F 66 54 68 65 54 69 74 61 6E 73 00
const_volcano:
db 43 75 72 67 65 6E 73 56 6F 6C 63 61 6E 6F 00
const_elemental:
db 53 75 6D 6D 6F 6E 49 41 69 72 45 6C 65 6D 65 6E 74 61 6C 5F 53 74 72 61 74 65 67 69 63 00
const_death:
db 44 65 61 74 68 57 61 72 64 00
const_delin:
db 53 75 6D 6D 6F 6E 44 65 6C 69 6E 5F 54 61 63 74 69 63 61 6C 00
const_falling:
db 46 61 6C 6C 69 6E 67 53 74 61 72 5F 53 70 65 6C 6C 00

p_armageddon:
dd 0
p_titans:
dd 0
p_volcano:
dd 0
p_elemental:
dd 0
p_death:
dd 0
p_delin:
dd 0
p_falling:
dd 0


p_spell:
dd 0
p_spell_name:
dq 0



code:
  push ebx
  mov ebx, ecx
  mov [p_spell], ebx

  cmp ebx, 0
  je @@original

  add ecx, 14
  cmp dword ptr [ebx+24], F
  jle @f
  mov ecx, [ecx]
  @@:
  mov [p_spell_name], ecx
  pushad

  push p_armageddon
  push ecx
  push const_armageddon
  call compare_spellnames
  add esp, c

  push p_titans
  push ecx
  push const_titans
  call compare_spellnames
  add esp, c

  push p_volcano
  push ecx
  push const_volcano
  call compare_spellnames
  add esp, c

  push p_elemental
  push ecx
  push const_elemental
  call compare_spellnames
  add esp, c

  push p_death
  push ecx
  push const_death
  call compare_spellnames
  add esp, c

  push p_delin
  push ecx
  push const_delin
  call compare_spellnames
  add esp, c

  push p_falling
  push ecx
  push const_falling
  call compare_spellnames
  add esp, c

  popad

  @@original:
  mov ecx,[eax+08]
  test ecx,ecx
  pop ebx
  jmp return

compare_spellnames:
  push ebp
  mov ebp, esp
  pushad
  push [ebp+8]
  push [ebp+c]
  call strcmp
  add esp, 8
  cmp eax, 0
  jne @f
  mov eax, [ebp+10]
  mov [eax], ebx
  mov dword ptr [ebx+3dc], 1
  mov dword ptr [ebx+1d4], 0
  mov dword ptr [ebx+46c], 0
  mov dword ptr [ebx+470], 0
  mov dword ptr [ebx+474], 0
  @@:
  popad
  mov esp, ebp
  pop ebp
  ret


inj_spellbook_add_special:
  jmp code
return:
registersymbol(inj_spellbook_add_special)

[DISABLE]

inj_spellbook_add_special:
  db 8B 48 08 85 C9

unregistersymbol(inj_spellbook_add_special)
unregistersymbol(p_armageddon)
unregistersymbol(p_titans)
unregistersymbol(p_volcano)
unregistersymbol(p_elemental)
unregistersymbol(p_death)
unregistersymbol(p_delin)
unregistersymbol(p_falling)
dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>ma</Name>
      <Address>28AEFB08</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_man</Name>
      <Address>28AEFAEC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_grab_mana</Name>
      <Address>00CCAEA3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_craft_aeisd</Name>
      <Address>011C6F25</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_edi</Name>
      <Address>07160000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_ebx</Name>
      <Address>07160004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_eax</Name>
      <Address>07160008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject_memcpy</Name>
      <Address>010B476E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>exp_mult_val</Name>
      <Address>06C90000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_exp_multiplier</Name>
      <Address>00BA7B07</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_summon_disable</Name>
      <Address>00CBF6C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tog_1</Name>
      <Address>06D60010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>glob</Name>
      <Address>06D60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tog_one_shot</Name>
      <Address>06330000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tog_invul</Name>
      <Address>06330010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_costless_crafting</Name>
      <Address>014B6F1F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pp_sp</Name>
      <Address>06470000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sc</Name>
      <Address>00EF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_spells</Name>
      <Address>06900000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_cpy</Name>
      <Address>06900016</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inj_ecxcheck</Name>
      <Address>01055294</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_metal</Name>
      <Address>038E0008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>p_crystal</Name>
      <Address>038E000C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
