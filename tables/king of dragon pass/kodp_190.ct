<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"INF MAGIC"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : KoDP.exe
  Version: 
  Date   : 2015-08-17
  Author : woosh

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,Basic.x32,89 41 10 83 C4 08 C3 80) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
 mov eax,999
  mov [ecx+10],eax
  add esp,08
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 89 41 10 83 C4 08

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Basic.x32"+16F37

"Basic.x32"+16F17: 50                    -  push eax
"Basic.x32"+16F18: 8D 44 24 04           -  lea eax,[esp+04]
"Basic.x32"+16F1C: DD 5C 24 04           -  fstp qword ptr [esp+04]
"Basic.x32"+16F20: 50                    -  push eax
"Basic.x32"+16F21: 51                    -  push ecx
"Basic.x32"+16F22: E8 69 A5 FF FF        -  call Basic.x32+11490
"Basic.x32"+16F27: DD 44 24 0C           -  fld qword ptr [esp+0C]
"Basic.x32"+16F2B: 83 C4 0C              -  add esp,0C
"Basic.x32"+16F2E: E8 1D 22 01 00        -  call Basic.x32+29150
"Basic.x32"+16F33: 8B 4C 24 10           -  mov ecx,[esp+10]
// ---------- INJECTING HERE ----------
"Basic.x32"+16F37: 89 41 10              -  mov [ecx+10],eax
"Basic.x32"+16F3A: 83 C4 08              -  add esp,08
// ---------- DONE INJECTING  ----------
"Basic.x32"+16F3D: C3                    -  ret 
"Basic.x32"+16F3E: 80 79 02 01           -  cmp byte ptr [ecx+02],01
"Basic.x32"+16F42: 1B C0                 -  sbb eax,eax
"Basic.x32"+16F44: 8B 4C 24 10           -  mov ecx,[esp+10]
"Basic.x32"+16F48: 40                    -  inc eax
"Basic.x32"+16F49: 89 41 10              -  mov [ecx+10],eax
"Basic.x32"+16F4C: 83 C4 08              -  add esp,08
"Basic.x32"+16F4F: C3                    -  ret 
"Basic.x32"+16F50: 8B 41 02              -  mov eax,[ecx+02]
"Basic.x32"+16F53: 8B 4C 24 10           -  mov ecx,[esp+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"WEAPONTHANES"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : KoDP.exe
  Version: 
  Date   : 2015-08-17
  Author : woosh

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT,Opal.r32,66 89 41 6E 8B 55 F0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ax,999
  mov [ecx+6E],ax
  mov edx,[ebp-10]
  jmp return

INJECT:
  jmp code
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 66 89 41 6E 8B 55 F0

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Opal.r32"+43E1C

"Opal.r32"+43E01: 55                          -  push ebp
"Opal.r32"+43E02: 8B EC                       -  mov ebp,esp
"Opal.r32"+43E04: 83 EC 10                    -  sub esp,10
"Opal.r32"+43E07: 89 4D F0                    -  mov [ebp-10],ecx
"Opal.r32"+43E0A: 0F BF 45 08                 -  movsx eax,word ptr [ebp+08]
"Opal.r32"+43E0E: 50                          -  push eax
"Opal.r32"+43E0F: 6A 00                       -  push 00
"Opal.r32"+43E11: E8 4A 7F FC FF              -  call Opal.r32+BD60
"Opal.r32"+43E16: 83 C4 08                    -  add esp,08
"Opal.r32"+43E19: 8B 4D F0                    -  mov ecx,[ebp-10]
// ---------- INJECTING HERE ----------
"Opal.r32"+43E1C: 66 89 41 6E                 -  mov [ecx+6E],ax
"Opal.r32"+43E20: 8B 55 F0                    -  mov edx,[ebp-10]
// ---------- DONE INJECTING  ----------
"Opal.r32"+43E23: 0F BF 42 6E                 -  movsx eax,word ptr [edx+6E]
"Opal.r32"+43E27: 85 C0                       -  test eax,eax
"Opal.r32"+43E29: 75 1D                       -  jne Opal.r32+43E48
"Opal.r32"+43E2B: 8B 4D F0                    -  mov ecx,[ebp-10]
"Opal.r32"+43E2E: 66 C7 81 24 01 00 00 00 00  -  mov word ptr [ecx+00000124],0000
"Opal.r32"+43E37: 8B 55 F0                    -  mov edx,[ebp-10]
"Opal.r32"+43E3A: 66 C7 82 A6 00 00 00 00 00  -  mov word ptr [edx+000000A6],0000
"Opal.r32"+43E43: E9 4E 01 00 00              -  jmp Opal.r32+43F96
"Opal.r32"+43E48: 8B 45 F0                    -  mov eax,[ebp-10]
"Opal.r32"+43E4B: 0F BF 88 A6 00 00 00        -  movsx ecx,word ptr [eax+000000A6]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
