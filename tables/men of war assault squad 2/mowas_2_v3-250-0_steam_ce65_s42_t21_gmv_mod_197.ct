<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>42</ID>
      <Description>"[X] &lt;== Men of War Assault Squad II v3.250.0 Steam Script v4.2"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Men of War: Assault Squad II
 Game Version  : 3.250.0
 Game Sponsor  : Myself
 Process Name  : mowas_2.exe
 Script Version: 4.2 (AOB)
 CE Version    : 6.5
 Release date  : 25-Jun-2016
 Author        : Recifense
 History:
 15-May-14: First Release
 16-May-14: Release for version 3.032.0 (Patch by RLD)
 22-May-14: Fixed Command Points (s2.1)
 26-May-14: Release for version 3.033.0 (Patch by RLD)
 06-Jun-14: Release for version 3.035.0 (Patch by 3DM)
 14-Jun-14: Release for version 3.036.0 (Patch by 3DM)
 23-Jul-14: Release for version 3.037.0 (Patch by 3DM)
 21-Dec-14: Release for version 3.040.0 (Patch by CODEX)
 26-Feb-15: Release for version 3.114.0 (Steam)
 01-Mar-15: Release for version 3.115.0 (Steam)
 06-Mar-15: Release for version 3.116.0 (Steam)
 15-Mar-15: Release for version 3.117.0 (Steam)
 22-Mar-15: Release for version 3.118.0 (Steam)
 24-Mar-15: Release for version 3.119.0 (Steam)
 27-Mar-15: Release for version 3.121.2 (Steam)
 28-Mar-15: Release for version 3.121.3 (Steam) (v3.0)(AOB)
 04-Jun-15: Release for version 3.126.0 (Steam)
 14-Aug-15: Release for version 3.127.5 (Steam)
 19-Sep-15: Release for version 3.201.1 (Steam) (s4.0) (GM was Improved)
 13-Nov-15: Release for version 3.205.0 (Steam)
 28-Nov-15: Added more scripts for helping with MODs (Steam) (4.1)
 04-Jan-16: Release for version 3.205.2 (Steam) (4.2)
 25-Jun-16: Release for version 3.250.0 (Steam)
 Features:
 - God Mode
 - Full Stamina
 - Unlimited Ammo
   - Soldiers (loaded ammo)
   - Tanks (Missiles in Inv)
 - Unlimited Fuel
 - Unlimited Command Points
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "mowas_2.exe") then
    ShowMessage('Error. Expected Process = mowas_2.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"mowas_2.exe")
define(GDMD,mowas_2.exe+004d4d47)
define(MUSA,mowas_2.exe+004d5bc7)
define(MPAO,mowas_2.exe+003e9090)
define(MUFL,mowas_2.exe+0044bb18)
define(MOCP,mowas_2.exe+0064a47e)
define(MTAO,mowas_2.exe+003e96f4)
define(GMD2,mowas_2.exe+00390cd4)
define(MOSV,mowas_2.exe+00666d19)
define(GMD4,mowas_2.exe+003ac9b9)
define(MUUC,mowas_2.exe+00628160)
define(MOPI,mowas_2.exe+0058d646)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE65,(float)6.5)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(GDMD,f3 0f 11 8e e4 00 00 00 f3 0f 5e 86 e0 00 00 00 f3 0f 11 45 08)
assert(MUSA,8b 00 89 47 6c 0f 54 c1 0f 2f c2 ?? ?? 8b 47 10 6a 00 68 15 04)
assert(MPAO,55 8b ec 8b 45 08 89 41 2c 5d c2 04 00 cc cc cc 55 8b ec 51 57)
assert(MUFL,89 86 fc 02 00 00 8b 86 34 05 00 00 6a 00 68 17 04 00 00 ff 70)
assert(MOCP,83 e0 06 3c 06 0f 85 ?? ?? ?? ?? a1 ?? ?? ?? ?? 89 45 f8 a1 ??)
assert(MTAO,8B 45 08 89 47 24 29 46 24 8b c7 5f 5e 5b 5d c2 04 00 cc cc cc)
assert(GMD2,8b 75 08 8b 16 85 d2 ?? ?? f6 42 18 02 ?? ?? 8b 01 52 56 ff 50 10)
assert(MOSV,f3 0f 10 47 04 83 ec 08 8b cb f3 0f 11 44 24 04 f3 0f 10 47 08)
assert(GMD4,88 9f 10 01 00 00 8b 01 57 ff 50 04 5f 5e 5b 8b e5 5d c2 0c 00)
assert(MUUC,8a 87 00 08 00 00 88 45 17 8d 45 ff 50 e8 ?? ?? ?? ?? 8b c8 83)
assert(MOPI,8a 45 ff 83 c4 04 3c 12 ?? ?? 0f b6 c0 69 d0 a8 00 00 00 81 c2)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonUnitStamina)
label(_BackMUS)
label(_ExitMUS)
label(_MonPlayerAmmo)
label(_BackMPA)
label(_ExitMPA)
label(_MonUnitFuel)
label(_BackMUF)
label(_ExitMUF)
label(_MonCommandPoints)
label(_BackMCP)
label(_ExitMCP)
label(_MonTankAmmo)
label(_BackMTA)
label(_ExitMTA)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_MonSelVehicle)
label(_BackMSV)
label(_ExitMSV)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_MonUnitUndercursor)
label(_BackMUU)
label(_ExitMUU)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)

label(iEnableGMD)
label(iEnableMUS)
label(iEnableMPA)
label(iEnableMUF)
label(iEnableMCP)
label(iEnableGMV)
label(iOwnerID)
label(pHero)
label(pPoints)
label(pUnit)
label(pHero2)
label(pHero3)
label(pVehicle)
label(pTest0)
label(pTest1)
label(pCurVal)
label(pMaxVal)
label(pUnitUC)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMUS)
registersymbol(iEnableMPA)
registersymbol(iEnableMUF)
registersymbol(iEnableMCP)
registersymbol(iEnableGMV)
registersymbol(iOwnerID)
registersymbol(pHero)
registersymbol(pPoints)
registersymbol(pUnit)
registersymbol(pHero2)
registersymbol(pHero3)
registersymbol(pVehicle)
registersymbol(pTest0)
registersymbol(pTest1)
registersymbol(pUnitUC)
// AOB
{
registersymbol(GDMD)
registersymbol(MUSA)
registersymbol(MPAO)
registersymbol(MUFL)
registersymbol(MOCP)
registersymbol(MTAO)
registersymbol(GMD2)
registersymbol(MOSV)
registersymbol(GMD4)
}
//=========================================
MyCode:
//========================================= 3.250.0 ok
// During Combat
_GodMode:
 pushfd                            // Save EFLAGS
 push eax

 mov [pHero],esi                   // Save pointer for debugging

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[esi+10]
 test eax,eax
 jz _ExitGMD

 movzx eax,byte ptr [eax+00000800]
 cmp eax,[iOwnerID]
 jne _ExitGMD

 movss xmm1,[esi+000000e0]

_ExitGMD:
 pop eax
 popfd                             // Restore EFLAGS

 movss [esi+000000E4],xmm1         // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 3.250.0 ok
// When updating
_MonUnitStamina:
 push ebx

 mov eax,[eax]                     // Original code

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 mov ebx,[edi+10]
 test ebx,ebx
 jz _ExitMUS

 movzx ebx,byte ptr [ebx+00000800]
 cmp ebx,[iOwnerID]
 jne _ExitMUS

 mov eax,(float)100.0

_ExitMUS:
 pop ebx

 mov [edi+44],eax                  // Original code
 jmp _BackMUS                      // Back to main code

//========================================= 3.250.0 ok
// When updating
_MonPlayerAmmo:
 push ebp                          // Original code
 mov ebp,esp                       // Original code

 mov eax,[ebp+08]
 test eax,eax
 jz _ExitMPA

 cmp dword ptr [iEnableMPA],0
 je _ExitMPA                       // Jump if feature is disabled

 mov eax,[ecx+18]
 test eax,eax
 jz _ExitMPA

 mov eax,[eax+24]
 test eax,eax
 jz _ExitMPA

 cmp eax,[eax+000003d8]
 jne _ExitMPA

 movzx eax,byte ptr [eax+00000800]
 cmp eax,[iOwnerID]
 jne _ExitMPA

 mov eax,[ecx+20]
 test eax,eax
 jz _ExitMPA

 mov eax,[eax+00000360]
 dec eax
 cmp eax,[ebp+08]
 js _ExitMPA

 mov [ebp+08],eax

_ExitMPA:
 mov eax,[ebp+08]                  // Original code
 mov [ecx+2C],eax                  // Original code (upd Ammo)
 jmp _BackMPA                      // Back to main code

//========================================= 3.250.0 ok
// When updating
_MonUnitFuel:
 push ebx

 cmp dword ptr [iEnableMUF],0
 je _ExitMUF                       // Jump if feature is disabled

 mov ebx,[esi+0c]                  // Get pMoreInfo
 test ebx,ebx
 jz _ExitMUF

 movzx ebx,byte ptr [ebx+00000800]
 cmp ebx,[iOwnerID]
 jne _ExitMUF

 mov eax,[esi+000002f8]

 mov [pUnit],esi

_ExitMUF:
 pop ebx

 mov [esi+000002FC],eax            // Original code (upd fuel)
 jmp _BackMUF                      // Back to main code

//========================================= 3.250.0 ok
// Game Screen
_MonCommandPoints:
 push ebx
 push ecx
 push edx

 mov ebx,[pCurVal]
 mov [pTest0],ebx

 mov ecx,[pMaxVal]
 mov [pTest1],ecx

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 lea edx,[ebx+04]
 cmp edx,ecx
 jne _ExitMCP

 mov edx,[ecx]
 mov [ebx],edx

_ExitMCP:
 pop edx
 pop ecx
 pop ebx

 and eax,06                        // Original code
 cmp al,06                        // Original code
 jmp _BackMCP                      // Back to main code

//========================================= 3.250.0 ok
// When decreasing ammo in Inv
// ESI = Ammo Structure
_MonTankAmmo:
 mov eax,[ebp+08]
 cmp eax,[esi+24]
 je _ExitMTA

 cmp dword ptr [iEnableMPA],0
 je _ExitMTA                       // Jump if feature is disabled

 mov eax,[esi+18]
 test eax,eax
 jz _ExitMTA

 mov eax,[eax+24]
 test eax,eax
 jz _ExitMTA

 movzx eax,byte ptr [eax+00000800]
 cmp eax,[iOwnerID]
 jne _ExitMTA

 mov eax,[ebp+08]
 add [esi+24],eax

_ExitMTA:
 mov eax,[ebp+08]                  // Original code
 mov [edi+24],eax                  // Original code
 jmp _BackMTA                      // Back to main code

//========================================= 3.250.0 NHP ok
// During Combat
_GodMode2:
 push eax

 mov esi,[ebp+08]                  // Original code
 mov edx,[esi]                     // Original code
 test edx,edx                      // Original code
 jz _ExitGM2

 mov [pHero2],edx                  // Save pointer for debugging

 mov eax,[edx+000003d8]
 cmp eax,edx
 jne _ExitGM2

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 movzx eax,byte ptr [edx+00000800]
 cmp eax,[iOwnerID]
 jne _ExitGM2

 pop eax

 pop esi
 pop ebp
 ret 0004
//====
_ExitGM2:
 pop eax

 test edx,edx                      // Original code
 jmp _BackGM2                      // Back to main code

//========================================= 3.250.0 ok
// On Selecting a player's vehicle (For debugging)
_MonSelVehicle:
 mov [pVehicle],eax                // pFuel

_ExitMSV:
 movss xmm0,[edi+04]               // Original code (Get mFuel)
 jmp _BackMSV                      // Back to main code

//========================================= 3.250.0 ok
// During Combat (vehicles)
_GodMode4:
 mov [edi+00000110],bl             // Original code
 mov eax,[edi]

 mov [pHero3],eax                  // Save pointer for debugging
 test eax,eax
 jz _ExitGM4

 cmp dword ptr [iEnableGMV],0
 je _ExitGM4                       // Jump if feature is disabled

 cmp eax,[eax+000003d8]
 jne _ExitGM4

 test byte ptr [eax+18],02
 jz _ExitGM4

 cmp byte ptr [eax+18],07
 je _ExitGM4

 movzx eax,byte ptr [eax+00000800]
 cmp eax,[iOwnerID]
 jne _ExitGM4

 mov eax,[ecx]                     // Original code
 jmp _BackGM4                      // Back to main code
//===
_ExitGM4:
 mov eax,[ecx]                     // Original code
 push edi                          // Original code
 call dword ptr [eax+04]           // Original code
 jmp _BackGM4                      // Back to main code

//========================================= 3.250.0
// On passing the cursor over the unit (for debugging)
_MonUnitUndercursor:
 mov [pUnitUC],edi                 // pUnitInfo

_ExitMUU:
 mov al,[edi+00000800]             // Original code
 jmp _BackMUU                      // Back to main code

//========================================= 3.250.0
// During match (in order to work with MODs)
_MonPlayerID:
 mov al,[ebp-01]                   // Original code
 add esp,04                        // Original code

 movzx eax,al
 mov [iOwnerID],eax

_ExitMPI:
 jmp _BackMPI                      // Back to main code

//=========================================
 db '========================================&gt;'
 db 'CE6.5 Script by Recifense 062516'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMUS:
 dd 0
iEnableMPA:
 dd 0
iEnableMUF:
 dd 0
iEnableMCP:
 dd 0
iEnableGMV:
 dd 0
iOwnerID:
 dd 0
pHero:
 dd 0
pPoints:
 dd 0
pUnit:
 dd 0
pHero2:
 dd 0
pHero3:
 dd 0
pVehicle:
 dd 0
pTest0:
 dd 0
pTest1:
 dd 0
pUnitUC:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 nop
 nop
 nop
_BackGMD:

MUSA:
 jmp _MonUnitStamina
_BackMUS:

MPAO:
 jmp _MonPlayerAmmo
 nop
 nop
 nop
 nop
_BackMPA:

MUFL:
 jmp _MonUnitFuel
 nop
_BackMUF:

MOCP:
 jmp _MonCommandPoints
_BackMCP:

MOCP+0c:
pMaxVal:
MOCP+14:
pCurVal:

MTAO:
 jmp _MonTankAmmo
 nop
_BackMTA:

GMD2:
 jmp _GodMode2
 nop
 nop
_BackGM2:

MOSV:
 jmp _MonSelVehicle
_BackMSV:

GMD4:
 jmp _GodMode4
 db 90 90 90 90 90 90 90
_BackGM4:

MUUC:
 jmp _MonUnitUndercursor
 nop
_BackMUU:

MOPI:
 jmp _MonPlayerID
 nop
_BackMPI:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// movss [esi+000000E4],xmm1
 db f3 0f 11 8e e4 00 00 00

MUSA:
// mov eax,[eax]
// mov [edi+6c],eax
 db 8b 00 89 47 6c

MPAO:
// push ebp
// mov ebp,esp
// mov eax,[ebp+08]
// mov [ecx+2C],eax
 db 55 8b ec 8b 45 08 89 41 2C

MUFL:
// mov [esi+000002FC],eax
 db 89 86 fc 02 00 00

MOCP:
// and eax,06
// cmp al,06
 db 83 e0 06 3c 06

MTAO:
// mov eax,[ebp+08]
// mov [edi+24],eax
 db 8b 45 08 89 47 24

GMD2:
// mov esi,[ebp+08]
// mov edx,[esi]
// test edx,edx
 db 8b 75 08 8b 16 85 d2

MOSV:
// movss xmm0,[edi+04]
 db f3 0f 10 47 04

GMD4:
// mov [edi+00000110],bl
// mov eax,[ecx]
// push edi
// call dword ptr [eax+04]
 db 88 9f 10 01 00 00 8b 01 57 ff 50 04

MUUC:
// mov al,[edi+00000800]
 db 8a 87 00 08 00 00

MOPI:
// mov al,[ebp-01]
// add esp,04
 db 8a 45 ff 83 c4 04

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMUS)
unregistersymbol(iEnableMPA)
unregistersymbol(iEnableMUF)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableGMV)
unregistersymbol(iOwnerID)
unregistersymbol(pHero)
unregistersymbol(pPoints)
unregistersymbol(pUnit)
unregistersymbol(pHero2)
unregistersymbol(pHero3)
unregistersymbol(pVehicle)
unregistersymbol(pTest0)
unregistersymbol(pTest1)
unregistersymbol(pUnitUC)
//AOB
{
unregistersymbol(GDMD)
unregistersymbol(MUSA)
unregistersymbol(MPAO)
unregistersymbol(MUFL)
unregistersymbol(MOCP)
unregistersymbol(MTAO)
unregistersymbol(GMD2)
unregistersymbol(MOSV)
unregistersymbol(GMD4)
unregistersymbol(MUUC)
unregistersymbol(MOPI)
}
//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Unlimited Stamina ---------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Unlimited Ammo ------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPA",1)
getAddressList().getMemoryRecordByID(101).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPA",0)
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"[X] &lt;== Unlimited Fuel ---------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUF",1)
getAddressList().getMemoryRecordByID(102).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUF",0)
getAddressList().getMemoryRecordByID(102).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Unlimited Command Points -------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Stronger Vehicles ---------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMV",1)
getAddressList().getMemoryRecordByID(229).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMV",0)
getAddressList().getMemoryRecordByID(229).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20160625</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Men of War: Assault Squad II
 Game Version  : 3.250.0
 Game Sponsor  : Myself
 Process Name  : mowas_2.exe
 Script Version: 4.2
 CE Version    : 6.5
 Release date  : 25-Jun-2016
 Author        : Recifense
 History:
 15-May-14: First Release
 16-May-14: Release for version 3.032.0 (Patch by RLD)
 22-May-14: Fixed Command Points (s2.1)
 26-May-14: Release for version 3.033.0 (Patch by RLD)
 06-Jun-14: Release for version 3.035.0 (Patch by 3DM)
 14-Jun-14: Release for version 3.036.0 (Patch by 3DM)
 23-Jul-14: Release for version 3.037.0 (Patch by 3DM)
 21-Dec-14: Release for version 3.040.0 (Patch by CODEX)
 26-Feb-15: Release for version 3.114.0 (Steam)
 01-Mar-15: Release for version 3.115.0 (Steam)
 06-Mar-15: Release for version 3.116.0 (Steam)
 15-Mar-15: Release for version 3.117.0 (Steam)
 22-Mar-15: Release for version 3.118.0 (Steam)
 24-Mar-15: Release for version 3.119.0 (Steam)
 27-Mar-15: Release for version 3.121.2 (Steam)
 28-Mar-15: Release for version 3.121.3 (Steam) (v3.0)(AOB)
 04-Jun-15: Release for version 3.126.0 (Steam)
 14-Aug-15: Release for version 3.127.5 (Steam)
 19-Sep-15: Release for version 3.201.1 (Steam) (s4.0) (GM was Improved)
 13-Nov-15: Release for version 3.205.0 (Steam)
 28-Nov-15: Added more scripts for helping with MODs (Steam) (4.1)
 04-Jan-16: Release for version 3.205.2 (Steam) (4.2)
 25-Jun-16: Release for version 3.250.0 (Steam) (not AOB)
 Features:
 - God Mode                 [1]
 - Full Stamina             [2]
 - Unlimited Ammo           [3]
   - Soldiers (loaded ammo) 
   - Tanks (Missiles in Inv)
 - Unlimited Fuel           [4]
 - Unlimited Command Points [5]
===========================================
[1] For human player's soldiers only;
[2] For human player's soldiers only;
[3] For human player's soldiers and vehicles only;
[4] For human player's vehicles only;
[5] For human player only;
===========================================
[USAGE]
1) Run CE65;
2) Run Game;
3) Load the game process "mowas_2.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home  = Enable  GM/US/UA/UF cheats;
CTRL+End   = Disable GM/US/UA/UF cheats;
-----------
CTRL+PageUp   = Enable  UCP cheat;
CTRL+PageDown = Disable UCP cheat;
-----------
CTRL+Insert   = Enable  SU cheat;
CTRL+Delete   = Disable SU cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
