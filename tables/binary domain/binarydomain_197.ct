<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Undead"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pHealth,4)
alloc(tHealth,4)
aobscan(AOB2,8B 46 60 F3 0F 11 40 50 C2 04 00 CC CC CC CC CC)
label(AOB2_jmp)
registersymbol(AOB2_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//cmp ebx,eax
//jle originalcode
//push ecx
//mov ecx,eax
//sub ecx,ebx
//cmp ecx,00001000
//pop ecx
//jle originalcode
cmp [eax],594C502E
jne originalcode
mov [pHealth],eax
movss [tHealth],xmm0
push ecx
mov ecx,[tHealth]
cmp ecx,(float)10.0
pop ecx
jge originalcode
mov [eax+50],(float)10.0
jmp exit

originalcode:
movss [eax+50],xmm0

exit:
jmp returnhere

///
pHealth:
dd 0
tHealth:
dd 0
///

AOB2+3:                             //"BinaryDomain.exe"+1F4DF:
AOB2_jmp:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB2_jmp:                           //"BinaryDomain.exe"+1F4DF:
db F3 0F 11 40 50
//Alt: movss [eax+50],xmm0
dealloc(pHealth)
dealloc(tHealth)
unregistersymbol(AOB2_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pHealth</Address>
          <Offsets>
            <Offset>50</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Inf. Ammo"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pAmmoPouch,4)
globalalloc(minAmmoPouch,4)
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(originalcode1)
label(exit1)
aobscan(AOB0,66 85 C0 ** ** 48 66 89 87 66 02 00 00 85 DB)
label(AOB0_jmp)
registersymbol(AOB0_jmp)
aobscan(AOB1,BA FF FF 00 00 66 01 97 64 02 00 00 8B C7)
label(AOB1_jmp)
registersymbol(AOB1_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoPouch],edi

cmp ax,[minAmmoPouch]
jge originalcode
mov ax,[minAmmoPouch]

originalcode:
mov [edi+00000266],ax

exit:
jmp returnhere

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[edi+00000264]
add cx,dx
cmp cx,1
pop ecx
jge originalcode1
mov dx,00000

originalcode1:
add [edi+00000264],dx

exit1:
jmp returnhere1

///
pAmmoPouch:
dd 0
minAmmoPouch:
dd #40
///

AOB0+6:                              //"BinaryDomain.exe"+40194C:
AOB0_jmp:
jmp newmem
nop
nop
returnhere:

AOB1+5:                              //"BinaryDomain.exe"+40190F:
AOB1_jmp:
jmp newmem1
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB0_jmp:                            //"BinaryDomain.exe"+40194C:
db 66 89 87 66 02 00 00
//Alt: mov [edi+00000266],ax
dealloc(pAmmoPouch)
dealloc(minAmmoPouch)
dealloc(newmem1)
AOB1_jmp:                            //"BinaryDomain.exe"+40190F:
db 66 01 97 64 02 00 00
//Alt: add [edi+00000264],dx
unregistersymbol(AOB0_jmp)
unregistersymbol(AOB1_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Ammo Pouch"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>pAmmoPouch</Address>
          <Offsets>
            <Offset>266</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"min Ammo Pouch"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>minAmmoPouch</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Inf. Bosonic Charge"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pBosonic,4)
aobscan(AOB6,8B 44 24 18 8B 40 60 66 29 A8 82 00 00 00 5F 5E)
label(AOB6_jmp)
registersymbol(AOB6_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pBosonic],eax
mov [pFirstAidKit],eax
push ecx
mov ecx,[eax+00000082]
sub cx,bp
cmp cx,#100
pop ecx
jge originalcode
mov word ptr [eax+00000082],#100
jmp exit

originalcode:
sub [eax+00000082],bp

exit:
jmp returnhere

///
pBosonic:
dd 0
///

AOB6+7:                              //"BinaryDomain.exe"+A9FE1C:
AOB6_jmp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB6_jmp:                            //"BinaryDomain.exe"+A9FE1C:
db 66 29 A8 82 00 00 00
//Alt: sub [eax+00000082],bp
dealloc(pBosonic)
unregistersymbol(AOB6_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Bosonic Charge"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>pBosonic</Address>
          <Offsets>
            <Offset>82</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Inf. First Aid Kit"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pFirstAidKit,4)
aobscan(AOB7,80 B9 81 00 00 00 00 76 08 8B C1 FE 88 81 00 00 00)
label(AOB7_jmp)
registersymbol(AOB7_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pFirstAidKit],eax
push ecx
mov ecx,[eax+00000081]
dec ecx
cmp cl,01
jge originalcode
mov cl,01

originalcode:
//dec [eax+00000081]
mov byte ptr [eax+00000081],cl

exit:
pop ecx
jmp returnhere

///
pFirstAidKit:
dd 0
///

AOB7+B:                                   //"BinaryDomain.exe"+213CE:
AOB7_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB7_jmp:                                 //"BinaryDomain.exe"+213CE:
db FE 88 81 00 00 00
//Alt: dec [eax+00000081]
dealloc(pFirstAidKit)
unregistersymbol(AOB7_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>22</ID>
          <Description>"First Aid Kit"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pFirstAidKit</Address>
          <Offsets>
            <Offset>81</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"get Trust (hold Enter and access the character's status menu to max it out)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pTrust,4)
aobscan(AOB4,8D 14 76 C1 E2 04 8B 44 02 1C)
label(AOB4_jmp)
registersymbol(AOB4_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
shl edx,04

push ecx
mov ecx,edx
add ecx,eax
//add ecx,0000001C
mov [pTrust],ecx
pop ecx

pushad
push 0D      //key Enter
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov [edx+eax+1C],#40000

originalcode:
//shl edx,04
mov eax,[edx+eax+1C]

exit:
jmp returnhere

///
pTrust:
dd 0
///

AOB4+3:                             //"BinaryDomain.exe"+34ED6F:
AOB4_jmp:
jmp newmem
nop
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB4_jmp:                           //"BinaryDomain.exe"+34ED6F:
db C1 E2 04 8B 44 02 1C
//Alt: shl edx,04
//Alt: mov eax,[edx+eax+1C]
dealloc(pTrust)
unregistersymbol(AOB4_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Trust"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pTrust</Address>
          <Offsets>
            <Offset>1C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"max out Trust (max comrade's trust when it's being altered)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
aobscan(AOB5,3B C2 0F 4C C2 89 44 24 18 8B 4C 24 18 89 4D 1C)
label(AOB5_jmp)
registersymbol(AOB5_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,#40000

originalcode:
mov [esp+18],eax
mov ecx,[esp+18]

exit:
jmp returnhere

AOB5+5:                                 //"BinaryDomain.exe"+4E8BA2:
AOB5_jmp:
jmp newmem
nop
nop
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB5_jmp:                               //"BinaryDomain.exe"+4E8BA2:
db 89 44 24 18 8B 4C 24 18
//Alt: mov [esp+18],eax
//Alt: mov ecx,[esp+18]
unregistersymbol(AOB5_jmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Inf. Funds"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pFunds,4)
aobscan(AOB3,2B C7 89 46 14 8B 04 24 8B 10 6A 00 8D 4C 24 04)
label(AOB3_jmp)
registersymbol(AOB3_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pFunds],esi
cmp [esi+14],eax
jle originalcode
mov eax,[esi+14]

originalcode:
mov [esi+14],eax
mov eax,[esp+esp]

exit:
jmp returnhere

///
pFunds:
dd 0
///

AOB3+2:                                 //"BinaryDomain.exe"+4646FA:
AOB3_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB3_jmp:                               //"BinaryDomain.exe"+4646FA:
db 89 46 14 8B 04 24
//Alt: mov [esi+14],eax
//Alt: mov eax,[esp+esp]
dealloc(pFunds)
unregistersymbol(AOB3_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Funds"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pFunds</Address>
          <Offsets>
            <Offset>14</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>ammo pouch +- Code :mov [edi+00000266],ax</Description>
      <Address>0080194C</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>40194C</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>76</Byte>
        <Byte>1D</Byte>
        <Byte>48</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>66</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>DB</Byte>
        <Byte>74</Byte>
        <Byte>11</Byte>
        <Byte>66</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo +- Code :add [edi+00000264],dx</Description>
      <Address>0080190F</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>40190F</ModuleNameOffset>
      <Before>
        <Byte>BA</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>01</Byte>
        <Byte>97</Byte>
        <Byte>64</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C7</Byte>
        <Byte>E8</Byte>
        <Byte>83</Byte>
        <Byte>E6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo reload + Code :mov [esi+00000264],ax</Description>
      <Address>00801603</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>401603</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>40</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>5F</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>64</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>0C</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health +- Code :movss [eax+50],xmm0</Description>
      <Address>0041F4DF</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>1F4DF</ModuleNameOffset>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>60</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>40</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>funds +- Code :mov [esi+14],eax</Description>
      <Address>008646FA</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>4646FA</ModuleNameOffset>
      <Before>
        <Byte>F8</Byte>
        <Byte>77</Byte>
        <Byte>1B</Byte>
        <Byte>2B</Byte>
        <Byte>C7</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>04</Byte>
        <Byte>24</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>trust +- Code :mov [ebp+1C],ecx</Description>
      <Address>008E8BAA</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>4E8BAA</ModuleNameOffset>
      <Before>
        <Byte>18</Byte>
        <Byte>8B</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>4D</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>35</Byte>
        <Byte>7C</Byte>
        <Byte>9B</Byte>
        <Byte>54</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>trust menu read Code :mov eax,[eax+ecx+1C]</Description>
      <Address>00766F17</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>366F17</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>40</Byte>
        <Byte>C1</Byte>
        <Byte>E0</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>08</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>trust status read Code :mov eax,[edx+eax+1C]</Description>
      <Address>0074ED72</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>34ED72</ModuleNameOffset>
      <Before>
        <Byte>14</Byte>
        <Byte>76</Byte>
        <Byte>C1</Byte>
        <Byte>E2</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>02</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>bosonic +- Code :sub [eax+00000082],bp</Description>
      <Address>00E9FE1C</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>A9FE1C</ModuleNameOffset>
      <Before>
        <Byte>24</Byte>
        <Byte>18</Byte>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>60</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>29</Byte>
        <Byte>A8</Byte>
        <Byte>82</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>5D</Byte>
        <Byte>66</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>first aid kit + Code :inc byte ptr [eax+00000081]</Description>
      <Address>00756475</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>356475</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>73</Byte>
        <Byte>0A</Byte>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>FE</Byte>
        <Byte>80</Byte>
        <Byte>81</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>59</Byte>
        <Byte>C3</Byte>
        <Byte>8B</Byte>
        <Byte>C6</Byte>
        <Byte>E8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>first aid kit - Code :dec [eax+00000081]</Description>
      <Address>004213CE</Address>
      <ModuleName>BinaryDomain.exe</ModuleName>
      <ModuleNameOffset>213CE</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>76</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>FE</Byte>
        <Byte>88</Byte>
        <Byte>81</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pBullet</Name>
      <Address>075B0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoPouch</Name>
      <Address>0F5B0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minAmmoPouch</Name>
      <Address>0F5C0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHealth</Name>
      <Address>0F590000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFunds</Name>
      <Address>0F630000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pTrust</Name>
      <Address>0F600000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBosonic</Name>
      <Address>0F5E0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB2_jmp</Name>
      <Address>0041F4DF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB0_jmp</Name>
      <Address>0080194C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB1_jmp</Name>
      <Address>0080190F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB4_jmp</Name>
      <Address>0074ED6F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB5_jmp</Name>
      <Address>008E8BA2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB3_jmp</Name>
      <Address>008646FA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFirstAidKit</Name>
      <Address>03BA0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB6_jmp</Name>
      <Address>00E9FE1C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AOB7_jmp</Name>
      <Address>004213CE</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
