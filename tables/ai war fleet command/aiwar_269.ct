<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>57</ID>
      <Description>"&lt;----- README -----&gt; (click on &lt;script&gt; to the right) ----&gt;"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{

Thanks to [b]WarStalkeR[/b] for finding that metal and crystal are 64 bit values and the displayed value * 4096.  That made finding the addresses a snap.

These scripts will take several seconds to activate since they have to AOBSCAN all game memory.

* Script: Resources - Set minimum values and the resources will be updated to those values if they are lower.  Expanding the gray 'Extra' table entry gives you direct access to the values and the pointer to the resources structure.  The values for metal and crystal here are as they are stored in the game, 64 bit values that are the numbers you see in game multiplied by 4096.

* Script: Energy - Set Minimum Energy value and you can keep building ships/structures without building more matter converters.

* Script: Instant Build - Set bInstantBuild to 1 to enable instant build.  This completes building tasks immediately by updating the amounts of metal and crystal used to build the item to the required amount found in a linked structure.

* Script: Ship Building - Same as above, but works for building all kinds of ships

* Script: Damage (god + one hit kill) - Set bGodMode to 1 and your ships and stations won't take damage.  Set bOneHitKill to 1 and enemies will die with one hit.

* Script: AI Progress - The AI Progress level won't increase (at least when destroying command stations), but you can still get reduction by destroying data centers

* Script: Fast Reload - Set bFastReload to 1 and the effective reload time of all of your ships will be 1 second although it won't be reflected in the tooltip.  Set bSlowEnemyReload to 1 and enemies will take 127 seconds to reload.

* Script: Ship Counts - Set bIgnoreShipLimit to 1 and you can create all the ships you want

* Script: Speed - Set multipliers (1.0 is 100%, 0.5 is 1/2 speed, 10 is 10x speed) for player and ai ships

**********************************************************************

If the scripts aren't enabled for you, you might have to do what is affected by the script in the game before enabling the them.  For resources you just need to let a second pass so your resources are updated.  For instant build you have to at least start building some station.  For Damage and InstantBuildShips you can just start building a ship.  For AI Progress you might have to actually do something to piss off the AI.

Resources, Energy, Ship Counts and Speed should be useable right away as they are executed at least every game second.

**********************************************************************

Blue entries are scripts you can enable.  Each one uses AOBSCAN, but since the
game is written in MONO, it doesn't compile the code until it is used and it
compiles it into random memory.  This means the AOBSCAN cannot just look at
one module and it may take several seconds, as long as doing a new AOBSCAN
with CE itself.

Each script then expands to give you options.  Options starting with 'b', i.e.
'bInstantBuild' are true/false so you enable them by setting the value column
to 1.

Resources and Energy have minimum values you can set and the values for them
will be upped to the value you set if they fall below.

Speed has floating point multipliers for Player and AI ship speed.  Set the
values to '1' for normal speed, lower for less than normal (i.e. 0.25 is 1/4
speed) and higher than one for faster (i.e. 4.0 is 4 times as fast).

Expand this readme entry by checking 'active' and you'll see gray entries
used for testing.  Misc has various version of scripts I've used for testing
with different injection points and game code that may be useful in the
future for finding code if the game is updated.  Data has values used for
investigation that are set by other scripts, and the blue 'Script: Select Ship'
entry which will give you a pointer to the selected ship for investigation.

Version 6 - Added "Script: Speed" and this readme.
}

[ENABLE]
[DISABLE]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Misc (testing scripts)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>17</ID>
              <Description>"INVESTIGATE: Locations for loading ship template metal value when building"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-09
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT_ShipTemplate1,8B 48 5C 8D 85 F0 FE FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ecx,[eax+5C]
  lea eax,[ebp-00000110]
  jmp return

INJECT_ShipTemplate1:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT_ShipTemplate1)

aobscan(INJECT_ShipTemplate2,ERROR: Could not find unique AOB, tried code "8B 40 5C 83 EC 04") // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov eax,[eax+5C]
  sub esp,04
  jmp return2

INJECT_ShipTemplate2+A1:
  jmp code2
  nop
return2:
registersymbol(INJECT_ShipTemplate2)

aobscan(INJECT_ShipTemplate3,1C 8B 87 B4 00 00 00 8B 40 5C 83 EC 04) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  mov eax,[eax+5C]
  sub esp,04
  jmp return5

INJECT_ShipTemplate3+07:
  jmp code5
  nop
return5:
registersymbol(INJECT_ShipTemplate3)

aobscan(INJECT_ShipTemplate4,ERROR: Could not find unique AOB, tried code "8B 40 5C 83 EC 04") // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  mov eax,[eax+5C]
  sub esp,04
  jmp return9

INJECT_ShipTemplate4+A1:
  jmp code9
  nop
return9:
registersymbol(INJECT_ShipTemplate4)

aobscan(INJECT_ShipTemplate5,ERROR: Could not find unique AOB, tried code "8B 40 5C 83 EC 04") // should be unique
alloc(newmem14,$1000)

label(code14)
label(return14)

newmem14:

code14:
  mov eax,[eax+5C]
  sub esp,04
  jmp return14

INJECT_ShipTemplate5+A1:
  jmp code14
  nop
return14:
registersymbol(INJECT_ShipTemplate5)

aobscan(INJECT_ShipTemplate6,85 * * * * 8B 40 5C 83 EC 04) // should be unique
alloc(newmem20,$1000)

label(code20)
label(return20)

newmem20:

code20:
  mov eax,[eax+5C]
  sub esp,04
  jmp return20

INJECT_ShipTemplate6+05:
  jmp code20
  nop
return20:
registersymbol(INJECT_ShipTemplate6)

[DISABLE]

INJECT_ShipTemplate1:
  db 8B 48 5C 8D 85 F0 FE FF FF

unregistersymbol(INJECT_ShipTemplate1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 37DBB9DE

37DBB9B4: 89 65 E4        - mov [ebp-1C],esp
37DBB9B7: 8D 85 08FFFFFF  - lea eax,[ebp-000000F8]
37DBB9BD: 89 85 D4FEFFFF  - mov [ebp-0000012C],eax
37DBB9C3: 8B 85 D4FEFFFF  - mov eax,[ebp-0000012C]
37DBB9C9: 39 00           - cmp [eax],eax
37DBB9CB: 8B 85 D4FEFFFF  - mov eax,[ebp-0000012C]
37DBB9D1: C7 00 00000000  - mov [eax],00000000
37DBB9D7: 8B 65 E4        - mov esp,[ebp-1C]
37DBB9DA: C3              - ret 
37DBB9DB: 8B 45 08        - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
37DBB9DE: 8B 48 5C        - mov ecx,[eax+5C]
37DBB9E1: 8D 85 F0FEFFFF  - lea eax,[ebp-00000110]
// ---------- DONE INJECTING  ----------
37DBB9E7: 83 EC 08        - sub esp,08
37DBB9EA: 8B 55 14        - mov edx,[ebp+14]
37DBB9ED: 89 14 24        - mov [esp],edx
37DBB9F0: 8B 55 18        - mov edx,[ebp+18]
37DBB9F3: 89 54 24 04     - mov [esp+04],edx
37DBB9F7: 51              - push ecx
37DBB9F8: 50              - push eax
37DBB9F9: E8 8A13F7D5     - call 0DD2CD88
37DBB9FE: 83 C4 0C        - add esp,0C
37DBBA01: 8B 85 F0FEFFFF  - mov eax,[ebp-00000110]
}
INJECT_ShipTemplate2+A1:
  db 8B 40 5C 83 EC 04

unregistersymbol(INJECT_ShipTemplate2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 37D9564A

37D95627: 85 C0             - test eax,eax
37D95629: 0F85 09F2FFFF     - jne 37D94838
37D9562F: 8D 85 68FBFFFF    - lea eax,[ebp-00000498]
37D95635: 83 EC 08          - sub esp,08
37D95638: 57                - push edi
37D95639: 50                - push eax
37D9563A: 39 3F             - cmp [edi],edi
37D9563C: E8 4FD1FED5       - call 0DD82790
37D95641: 83 C4 0C          - add esp,0C
37D95644: 8B 87 B4000000    - mov eax,[edi+000000B4]
// ---------- INJECTING HERE ----------
37D9564A: 8B 40 5C          - mov eax,[eax+5C]
37D9564D: 83 EC 04          - sub esp,04
// ---------- DONE INJECTING  ----------
37D95650: 50                - push eax
37D95651: 83 EC 08          - sub esp,08
37D95654: 8B 85 68FBFFFF    - mov eax,[ebp-00000498]
37D9565A: 89 04 24          - mov [esp],eax
37D9565D: 8B 85 6CFBFFFF    - mov eax,[ebp-00000494]
37D95663: 89 44 24 04       - mov [esp+04],eax
37D95667: E8 CCAEF7D5       - call 0DD10538
37D9566C: 83 C4 10          - add esp,10
37D9566F: 85 C0             - test eax,eax
37D95671: 0F84 5E000000     - je 37D956D5
}
INJECT_ShipTemplate3+07:
  db 8B 40 5C 83 EC 04

unregistersymbol(INJECT_ShipTemplate3)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 37D94F26

37D94EFD: 89 4C 24 04     - mov [esp+04],ecx
37D94F01: 83 EC 08        - sub esp,08
37D94F04: 8B 8D C8FAFFFF  - mov ecx,[ebp-00000538]
37D94F0A: 89 0C 24        - mov [esp],ecx
37D94F0D: 8B 8D CCFAFFFF  - mov ecx,[ebp-00000534]
37D94F13: 89 4C 24 04     - mov [esp+04],ecx
37D94F17: 50              - push eax
37D94F18: E8 FB57ACCC     - call 0485A718
37D94F1D: 83 C4 1C        - add esp,1C
37D94F20: 8B 87 B4000000  - mov eax,[edi+000000B4]
// ---------- INJECTING HERE ----------
37D94F26: 8B 40 5C        - mov eax,[eax+5C]
37D94F29: 83 EC 04        - sub esp,04
// ---------- DONE INJECTING  ----------
37D94F2C: 50              - push eax
37D94F2D: 83 EC 08        - sub esp,08
37D94F30: 8B 85 D0FAFFFF  - mov eax,[ebp-00000530]
37D94F36: 89 04 24        - mov [esp],eax
37D94F39: 8B 85 D4FAFFFF  - mov eax,[ebp-0000052C]
37D94F3F: 89 44 24 04     - mov [esp+04],eax
37D94F43: E8 88A1ACCC     - call 0485F0D0
37D94F48: 83 C4 10        - add esp,10
37D94F4B: 85 C0           - test eax,eax
37D94F4D: 0F94 C0         - sete al
}
INJECT_ShipTemplate4+A1:
  db 8B 40 5C 83 EC 04

unregistersymbol(INJECT_ShipTemplate4)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: 37D94853

37D9482D: E9 DA0D0000             - jmp 37D9560C
37D94832: 8D AD 00000000          - lea ebp,[ebp+00000000]
37D94838: 8D 85 48FAFFFF          - lea eax,[ebp-000005B8]
37D9483E: 83 EC 08                - sub esp,08
37D94841: 57                      - push edi
37D94842: 50                      - push eax
37D94843: 39 3F                   - cmp [edi],edi
37D94845: E8 46DFFED5             - call 0DD82790
37D9484A: 83 C4 0C                - add esp,0C
37D9484D: 8B 87 B4000000          - mov eax,[edi+000000B4]
// ---------- INJECTING HERE ----------
37D94853: 8B 40 5C                - mov eax,[eax+5C]
37D94856: 83 EC 04                - sub esp,04
// ---------- DONE INJECTING  ----------
37D94859: 50                      - push eax
37D9485A: 83 EC 08                - sub esp,08
37D9485D: 8B 85 48FAFFFF          - mov eax,[ebp-000005B8]
37D94863: 89 04 24                - mov [esp],eax
37D94866: 8B 85 4CFAFFFF          - mov eax,[ebp-000005B4]
37D9486C: 89 44 24 04             - mov [esp+04],eax
37D94870: E8 C3BCF7D5             - call 0DD10538
37D94875: 83 C4 10                - add esp,10
37D94878: 85 C0                   - test eax,eax
37D9487A: 0F84 4C000000           - je 37D948CC
}
INJECT_ShipTemplate5+A1:
  db 8B 40 5C 83 EC 04

unregistersymbol(INJECT_ShipTemplate5)
dealloc(newmem14)

{
// ORIGINAL CODE - INJECTION POINT: 37D9460E

37D945EB: E8 F8860200     - call 37DBCCE8
37D945F0: 83 C4 10        - add esp,10
37D945F3: 8D 85 18FAFFFF  - lea eax,[ebp-000005E8]
37D945F9: 83 EC 08        - sub esp,08
37D945FC: 57              - push edi
37D945FD: 50              - push eax
37D945FE: 39 3F           - cmp [edi],edi
37D94600: E8 8BE1FED5     - call 0DD82790
37D94605: 83 C4 0C        - add esp,0C
37D94608: 8B 87 B4000000  - mov eax,[edi+000000B4]
// ---------- INJECTING HERE ----------
37D9460E: 8B 40 5C        - mov eax,[eax+5C]
37D94611: 83 EC 04        - sub esp,04
// ---------- DONE INJECTING  ----------
37D94614: 50              - push eax
37D94615: 83 EC 08        - sub esp,08
37D94618: 8B 85 18FAFFFF  - mov eax,[ebp-000005E8]
37D9461E: 89 04 24        - mov [esp],eax
37D94621: 8B 85 1CFAFFFF  - mov eax,[ebp-000005E4]
37D94627: 89 44 24 04     - mov [esp+04],eax
37D9462B: E8 00A6ACCC     - call 0485EC30
37D94630: 83 C4 10        - add esp,10
37D94633: 85 C0           - test eax,eax
37D94635: 0F85 4C000000   - jne 37D94687
}
INJECT_ShipTemplate6+05:
  db 8B 40 5C 83 EC 04

unregistersymbol(INJECT_ShipTemplate6)
dealloc(newmem20)

{
// ORIGINAL CODE - INJECTION POINT: 37D33EEF

37D33EC5: 0FB6 85 8BF9FFFF  - movzx eax,byte ptr [ebp-00000675]
37D33ECC: 85 C0             - test eax,eax
37D33ECE: 0F84 E3000000     - je 37D33FB7
37D33ED4: 8D 85 58FCFFFF    - lea eax,[ebp-000003A8]
37D33EDA: 83 EC 08          - sub esp,08
37D33EDD: FF 75 08          - push [ebp+08]
37D33EE0: 50                - push eax
37D33EE1: E8 AAE804D6       - call 0DD82790
37D33EE6: 83 C4 0C          - add esp,0C
37D33EE9: 8B 85 84F9FFFF    - mov eax,[ebp-0000067C]
// ---------- INJECTING HERE ----------
37D33EEF: 8B 40 5C          - mov eax,[eax+5C]
37D33EF2: 83 EC 04          - sub esp,04
// ---------- DONE INJECTING  ----------
37D33EF5: 50                - push eax
37D33EF6: 83 EC 08          - sub esp,08
37D33EF9: 8B 85 58FCFFFF    - mov eax,[ebp-000003A8]
37D33EFF: 89 04 24          - mov [esp],eax
37D33F02: 8B 85 5CFCFFFF    - mov eax,[ebp-000003A4]
37D33F08: 89 44 24 04       - mov [esp+04],eax
37D33F0C: E8 27C6FDD5       - call 0DD10538
37D33F11: 83 C4 10          - add esp,10
37D33F14: 85 C0             - test eax,eax
37D33F16: 0F84 9B000000     - je 37D33FB7
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>19</ID>
              <Description>"INVESTIGATE: AI Progress"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-10
  Author : Jason

  Four injection points that access AI progress.

Structure:
  01F0: Total AI Progress (in tooltip)
  01F4: AI Progress Reduction (in tooltip)
}

[ENABLE]

aobscan(INJECT_AIPROGRESS1,8B 87 F0 01 00 00 85 C0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[edi+000001F0]
  jmp return

INJECT_AIPROGRESS1:
  jmp code
  nop
return:
registersymbol(INJECT_AIPROGRESS1)

aobscan(INJECT_AIPROGRESS2,8B 87 F0 01 00 00 B9 05) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov eax,[edi+000001F0]
  jmp return2

INJECT_AIPROGRESS2:
  jmp code2
  nop
return2:
registersymbol(INJECT_AIPROGRESS2)

aobscan(INJECT_AIPROGRESS3,8B 88 F0 01 00 00 8B 90) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  mov ecx,[eax+000001F0]
  jmp return5

INJECT_AIPROGRESS3:
  jmp code5
  nop
return5:
registersymbol(INJECT_AIPROGRESS3)

aobscan(INJECT_AIPROGRESS4,8B 80 F0 01 00 00 C9) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  mov eax,[eax+000001F0]
  jmp return9

INJECT_AIPROGRESS4:
  jmp code9
  nop
return9:
registersymbol(INJECT_AIPROGRESS4)

[DISABLE]

INJECT_AIPROGRESS1:
  db 8B 87 F0 01 00 00

unregistersymbol(INJECT_AIPROGRESS1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0DD2C85A

0DD2C83E: 00 00             - add [eax],al
0DD2C840: 55                - push ebp
0DD2C841: 8B EC             - mov ebp,esp
0DD2C843: 53                - push ebx
0DD2C844: 57                - push edi
0DD2C845: 56                - push esi
0DD2C846: 83 EC 2C          - sub esp,2C
0DD2C849: 8B 7D 08          - mov edi,[ebp+08]
0DD2C84C: C7 45 D0 00000000 - mov [ebp-30],00000000
0DD2C853: C7 45 D4 00000000 - mov [ebp-2C],00000000
// ---------- INJECTING HERE ----------
0DD2C85A: 8B 87 F0010000    - mov eax,[edi+000001F0]
// ---------- DONE INJECTING  ----------
0DD2C860: 85 C0             - test eax,eax
0DD2C862: 0F9C C0           - setl al
0DD2C865: 0FB6 C0           - movzx eax,al
0DD2C868: 85 C0             - test eax,eax
0DD2C86A: 0F94 C0           - sete al
0DD2C86D: 0FB6 C0           - movzx eax,al
0DD2C870: 8B D8             - mov ebx,eax
0DD2C872: 85 DB             - test ebx,ebx
0DD2C874: 75 0C             - jne 0DD2C882
0DD2C876: C7 45 CC 00000000 - mov [ebp-34],00000000
}
INJECT_AIPROGRESS2:
  db 8B 87 F0 01 00 00

unregistersymbol(INJECT_AIPROGRESS2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 0DD2C957

0DD2C93C: 85 C0             - test eax,eax
0DD2C93E: 75 17             - jne 0DD2C957
0DD2C940: 8B 8F F0010000    - mov ecx,[edi+000001F0]
0DD2C946: 8B C1             - mov eax,ecx
0DD2C948: C1 F8 1F          - sar eax,1F
0DD2C94B: C1 E8 1E          - shr eax,1E
0DD2C94E: 03 C1             - add eax,ecx
0DD2C950: 8B F0             - mov esi,eax
0DD2C952: C1 FE 02          - sar esi,02
0DD2C955: EB 10             - jmp 0DD2C967
// ---------- INJECTING HERE ----------
0DD2C957: 8B 87 F0010000    - mov eax,[edi+000001F0]
// ---------- DONE INJECTING  ----------
0DD2C95D: B9 05000000       - mov ecx,00000005
0DD2C962: 99                - cdq 
0DD2C963: F7 F9             - idiv ecx
0DD2C965: 8B F0             - mov esi,eax
0DD2C967: 83 FE 0A          - cmp esi,0A
0DD2C96A: 0F9C C0           - setl al
0DD2C96D: 0FB6 C0           - movzx eax,al
0DD2C970: 85 C0             - test eax,eax
0DD2C972: 0F94 C0           - sete al
0DD2C975: 0FB6 C0           - movzx eax,al
}
INJECT_AIPROGRESS3:
  db 8B 88 F0 01 00 00

unregistersymbol(INJECT_AIPROGRESS3)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 0DD2C7F9

0DD2C7D8: 68 A0D33B0D       - push 0D3BD3A0
0DD2C7DD: E9 46386DF6       - jmp 04400028
0DD2C7E2: 00 00             - add [eax],al
0DD2C7E4: 68 80D33B0D       - push 0D3BD380
0DD2C7E9: E9 3A386DF6       - jmp 04400028
0DD2C7EE: 00 00             - add [eax],al
0DD2C7F0: 55                - push ebp
0DD2C7F1: 8B EC             - mov ebp,esp
0DD2C7F3: 83 EC 08          - sub esp,08
0DD2C7F6: 8B 45 08          - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0DD2C7F9: 8B 88 F0010000    - mov ecx,[eax+000001F0]
// ---------- DONE INJECTING  ----------
0DD2C7FF: 8B 90 F4010000    - mov edx,[eax+000001F4]
0DD2C805: 2B CA             - sub ecx,edx
0DD2C807: 89 4D FC          - mov [ebp-04],ecx
0DD2C80A: 83 EC 0C          - sub esp,0C
0DD2C80D: 50                - push eax
0DD2C80E: E8 2D000000       - call 0DD2C840
0DD2C813: 83 C4 10          - add esp,10
0DD2C816: 8B C8             - mov ecx,eax
0DD2C818: 8B 45 FC          - mov eax,[ebp-04]
0DD2C81B: 3B C1             - cmp eax,ecx
}
INJECT_AIPROGRESS4:
  db 8B 80 F0 01 00 00

unregistersymbol(INJECT_AIPROGRESS4)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: 0DD7A531

0DD7A515: 00 00           - add [eax],al
0DD7A517: 00 83 44240408  - add [ebx+08042444],al
0DD7A51D: E9 0E98FFFF     - jmp 0DD73D30
0DD7A522: 00 00           - add [eax],al
0DD7A524: 00 00           - add [eax],al
0DD7A526: 00 00           - add [eax],al
0DD7A528: 55              - push ebp
0DD7A529: 8B EC           - mov ebp,esp
0DD7A52B: 83 EC 08        - sub esp,08
0DD7A52E: 8B 45 08        - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0DD7A531: 8B 80 F0010000  - mov eax,[eax+000001F0]
// ---------- DONE INJECTING  ----------
0DD7A537: C9              - leave 
0DD7A538: C3              - ret 
0DD7A539: 00 00           - add [eax],al
0DD7A53B: 00 00           - add [eax],al
0DD7A53D: 00 00           - add [eax],al
0DD7A53F: 00 55 8B        - add [ebp-75],dl
0DD7A542: EC              - in al,dx
0DD7A543: 83 EC 08        - sub esp,08
0DD7A546: 8B 45 08        - mov eax,[ebp+08]
0DD7A549: 8B 80 F4010000  - mov eax,[eax+000001F4]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Script: SETAIREDUCTION"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-10
  Author : jgoemat

  This code is executed to set the AI reduction
}

[ENABLE]

aobscan(INJECT_SETAIREDUCTION,89 88 F4 01 00 00 83) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+000001F4],ecx
  jmp return

INJECT_SETAIREDUCTION:
  jmp code
  nop
return:
registersymbol(INJECT_SETAIREDUCTION)

[DISABLE]

INJECT_SETAIREDUCTION:
  db 89 88 F4 01 00 00

unregistersymbol(INJECT_SETAIREDUCTION)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0DD2C6C4

0DD2C6A8: 68 B0D23B0D       - push 0D3BD2B0
0DD2C6AD: E9 76396DF6       - jmp 04400028
0DD2C6B2: 00 00             - add [eax],al
0DD2C6B4: 00 00             - add [eax],al
0DD2C6B6: 00 00             - add [eax],al
0DD2C6B8: 55                - push ebp
0DD2C6B9: 8B EC             - mov ebp,esp
0DD2C6BB: 83 EC 08          - sub esp,08
0DD2C6BE: 8B 4D 0C          - mov ecx,[ebp+0C]
0DD2C6C1: 8B 45 08          - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0DD2C6C4: 89 88 F4010000    - mov [eax+000001F4],ecx
// ---------- DONE INJECTING  ----------
0DD2C6CA: 83 EC 0C          - sub esp,0C
0DD2C6CD: 50                - push eax
0DD2C6CE: E8 15000000       - call 0DD2C6E8
0DD2C6D3: 83 C4 10          - add esp,10
0DD2C6D6: C9                - leave 
0DD2C6D7: C3                - ret 
0DD2C6D8: 68 E8D23B0D       - push 0D3BD2E8
0DD2C6DD: E9 46396DF6       - jmp 04400028
0DD2C6E2: 00 00             - add [eax],al
0DD2C6E4: 00 00             - add [eax],al
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"Script: Ship Limit (OLD ONE, just doesn't add when creating new ships)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-11
  Author : jgoemat

  This injection point is executed when a ship is created, it increases the
  tally for that ship, eventually preventing you from creating more.
}

[ENABLE]

aobscan(INJECT_SHIPLIMIT2,8D 44 88 10 8B 08 41 89 08 8b 46) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)
label(pShipCounts2)
registersymbol(pShipCounts2)

newmem:
pShipCounts2:
  dd 0
  dd 0 // bIgnoreShipLimit2

code:
  mov [pShipCounts2],eax
  lea eax,[eax+ecx*4+10]
  mov ecx,[eax]

  cmp dword ptr [pShipCounts2+4],1
  jne skip
  dec ecx // next statement is inc ecx so this counters it

skip:
  jmp return

INJECT_SHIPLIMIT2:
  jmp code
  nop
return:
registersymbol(INJECT_SHIPLIMIT2)

[DISABLE]

INJECT_SHIPLIMIT2:
  db 8D 44 88 10 8B 08

unregistersymbol(INJECT_SHIPLIMIT2)
unregistersymbol(pShipCounts2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2BC12363

* * * * * * 8D 44 88 10 8B 08 * * * * * * * * * * * * * * * * * * - 53 results
0F 86 C6 00 00 00 8D 44 88 10 8B 08 * * * * * * * * * * * * * * * * * * - 2 results (this first)
8D 44 88 10 8B 08 41 89 08 8b 46 * * * * * * * * * * * * * - 1 result

2BC12340: 50                - push eax
2BC12341: 39 00             - cmp [eax],eax
2BC12343: E8 30FFD1D8       - call 04932278
2BC12348: 83 C4 10          - add esp,10
2BC1234B: 8B 46 50          - mov eax,[esi+50]
2BC1234E: 8B 4F 0C          - mov ecx,[edi+0C]
2BC12351: 8B 49 08          - mov ecx,[ecx+08]
2BC12354: 8B 89 C4000000    - mov ecx,[ecx+000000C4]
2BC1235A: 39 48 0C          - cmp [eax+0C],ecx
2BC1235D: 0F86 C6000000     - jbe 2BC12429
// ---------- INJECTING HERE ----------
2BC12363: 8D 44 88 10       - lea eax,[eax+ecx*4+10]
2BC12367: 8B 08             - mov ecx,[eax]
// ---------- DONE INJECTING  ----------
2BC12369: 41                - inc ecx
2BC1236A: 89 08             - mov [eax],ecx
2BC1236C: 8B 46 54          - mov eax,[esi+54]
2BC1236F: 8B 4F 0C          - mov ecx,[edi+0C]
2BC12372: 8B 49 08          - mov ecx,[ecx+08]
2BC12375: 8B 89 CC000000    - mov ecx,[ecx+000000CC]
2BC1237B: 39 48 0C          - cmp [eax+0C],ecx
2BC1237E: 0F86 96000000     - jbe 2BC1241A
2BC12384: 8D 44 88 10       - lea eax,[eax+ecx*4+10]
2BC12388: 8B 08             - mov ecx,[eax]
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>33</ID>
                  <Description>"bIgnoreShipLimit"</Description>
                  <Color>C0C0C0</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pShipCounts+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>32</ID>
                  <Description>"pShipCounts"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pShipCounts</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>34</ID>
              <Description>"Script: Test Soft Ship Limit (OLD, hard-coded address)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-12
  Author : jgoemat

  For testing, I'm sure address will be different for you, try this aob plus 0F:
    8B 40 50 8B 4D 0C 39 48 0C 0F 86 08 00 00 00 8D 44 88 10 8B 00
}

define(address,2B813FF8)
define(bytes,8D 44 88 10 8B 00)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  xor eax,eax
  jmp return
  lea eax,[eax+ecx*4+10]
  mov eax,[eax]
  jmp return

address:
  jmp code
  nop
return:

[DISABLE]

address:
  db bytes
  // lea eax,[eax+ecx*4+10]
  // mov eax,[eax]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2B813FF8

2B813FDB: 2B F8                   - sub edi,eax
2B813FDD: 3C 81                   - cmp al,-7F
2B813FDF: 2B 55 8B                - sub edx,[ebp-75]
2B813FE2: EC                      - in al,dx
2B813FE3: 83 EC 08                - sub esp,08
2B813FE6: 8B 45 08                - mov eax,[ebp+08]
2B813FE9: 8B 40 50                - mov eax,[eax+50]
2B813FEC: 8B 4D 0C                - mov ecx,[ebp+0C]
2B813FEF: 39 48 0C                - cmp [eax+0C],ecx
2B813FF2: 0F86 08000000           - jbe 2B814000
// ---------- INJECTING HERE ----------
2B813FF8: 8D 44 88 10             - lea eax,[eax+ecx*4+10]
2B813FFC: 8B 00                   - mov eax,[eax]
// ---------- DONE INJECTING  ----------
2B813FFE: C9                      - leave 
2B813FFF: C3                      - ret 
2B814000: 6A 1A                   - push 1A
2B814002: 68 76060000             - push 00000676
2B814007: E8 2CCFC8D8             - call 044A0F38
2B81400C: 68 90788E2C             - push 2C8E7890
2B814011: E9 22C7C8D8             - jmp 044A0738
2B814016: 00 00                   - add [eax],al
2B814018: 55                      - push ebp
2B814019: 8B EC                   - mov ebp,esp
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>44</ID>
              <Description>"Script: Static Address (doesn't work)"</Description>
              <Options moHideChildren="1"/>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-13
  Author : jgoemat

  This code embodies a static pointer to a structure with information on
  the ship that is being hovered over and the selected ship among other
  things.  The *s in the AOB are the address
}

[ENABLE]

aobscan(INJECT_STATICHOVER,E9 EC 00 00 00 8B 05 * * * * 8B 80 3C) // should be unique
registersymbol(INJECT_STATICHOVER)

[DISABLE]

unregistersymbol(INJECT_STATICHOVER)

{
// ORIGINAL CODE - INJECTION POINT: 2F95DA3F

2F95DA21: 50              - push eax
2F95DA22: 6A 04           - push 04
2F95DA24: 57              - push edi
2F95DA25: E8 3637FED4     - call 04941160
2F95DA2A: 83 C4 10        - add esp,10
2F95DA2D: 83 EC 0C        - sub esp,0C
2F95DA30: 57              - push edi
2F95DA31: E8 065C01D5     - call 0497363C
2F95DA36: 83 C4 10        - add esp,10
2F95DA39: 89 85 FCFDFFFF  - mov [ebp-00000204],eax
// ---------- INJECTING HERE ----------
2F95DA3F: E9 EC000000     - jmp 2F95DB30
// ---------- DONE INJECTING  ----------
2F95DA44: 8B 05 644DBA0A  - mov eax,[0ABA4D64] // static
2F95DA4A: 8B 80 3C010000  - mov eax,[eax+0000013C] // hovered ship
2F95DA50: 8B 80 20030000  - mov eax,[eax+00000320]
2F95DA56: 8B 0D 644DBA0A  - mov ecx,[0ABA4D64] // static
2F95DA5C: 8B 89 3C010000  - mov ecx,[ecx+0000013C] // hovered ship
2F95DA62: 8B 49 0C        - mov ecx,[ecx+0C] // template
2F95DA65: 8B 49 6C        - mov ecx,[ecx+6C] // speed
2F95DA68: 3B C1           - cmp eax,ecx
2F95DA6A: 0F9C C0         - setl al
2F95DA6D: 0FB6 C0         - movzx eax,al
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>45</ID>
                  <Description>"pStatic"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>INJECT_STATICHOVER+7</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>47</ID>
                  <Description>"pStatic-&gt;pHoveredShip"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>INJECT_STATICHOVER+7</Address>
                  <Offsets>
                    <Offset>13C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>46</ID>
                  <Description>"pStatic"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>INJECT_STATICHOVER+7</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Script: Test - setting X position"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-14
  Author : Jason

  INJECT_SETX is where the high-resolution X values is set ([pShip+0108])
  INJECT_SETX_CALLER is what calls the proc
}

[ENABLE]

aobscan(INJECT_SETX,89 08 8D 83 08 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax],ecx
  lea eax,[ebx+00000108]
  jmp return

INJECT_SETX:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_SETX)

aobscan(INJECT_SETX_CALLER,04 FF B5 60 F9 FF FF) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  push [ebp-000006A0]
  jmp return5

INJECT_SETX_CALLER+01:
  jmp code5
  nop
return5:
registersymbol(INJECT_SETX_CALLER)

[DISABLE]

INJECT_SETX:
  db 89 08 8D 83 08 01 00 00

unregistersymbol(INJECT_SETX)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2F8E9DC5

2F8E9D91: 0FB6 C0                 - movzx eax,al
2F8E9D94: 89 85 94FEFFFF          - mov [ebp-0000016C],eax
2F8E9D9A: EB 0A                   - jmp 2F8E9DA6
2F8E9D9C: C7 85 94FEFFFF 00000000 - mov [ebp-0000016C],00000000
2F8E9DA6: 8B BD 94FEFFFF          - mov edi,[ebp-0000016C]
2F8E9DAC: 83 BD 94FEFFFF 00       - cmp dword ptr [ebp-0000016C],00
2F8E9DB3: 75 07                   - jne 2F8E9DBC
2F8E9DB5: C6 83 40010000 00       - mov byte ptr [ebx+00000140],00
2F8E9DBC: 8D 83 08010000          - lea eax,[ebx+00000108]
2F8E9DC2: 8B 4D 0C                - mov ecx,[ebp+0C] // new x, [ebp+08] is ship pointer, [ebp+10] is new y
          // [ebp+4] is unknown, looks like a pointer but doesn't exist in memory
// ---------- INJECTING HERE ----------
2F8E9DC5: 89 08                   - mov [eax],ecx
2F8E9DC7: 8D 83 08010000          - lea eax,[ebx+00000108]
// ---------- DONE INJECTING  ----------
2F8E9DCD: 8B 4D 10                - mov ecx,[ebp+10]
2F8E9DD0: 89 48 04                - mov [eax+04],ecx
2F8E9DD3: 8B 43 24                - mov eax,[ebx+24]
2F8E9DD6: 85 C0                   - test eax,eax
2F8E9DD8: 74 37                   - je 2F8E9E11
2F8E9DDA: 8B 43 0C                - mov eax,[ebx+0C]
2F8E9DDD: 8B 40 08                - mov eax,[eax+08]
2F8E9DE0: 0FB6 80 F2030000        - movzx eax,byte ptr [eax+000003F2]
2F8E9DE7: 85 C0                   - test eax,eax
2F8E9DE9: 75 26                   - jne 2F8E9E11
}

INJECT_SETX_CALLER+01:
  db FF B5 60 F9 FF FF

unregistersymbol(INJECT_SETX_CALLER)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 2F8DCDF8

2F8DCDC7: 8B 80 60020000    - mov eax,[eax+00000260]
2F8DCDCD: 01 85 60F9FFFF    - add [ebp-000006A0],eax
2F8DCDD3: 8B 45 08          - mov eax,[ebp+08]
2F8DCDD6: 0FB6 80 59020000  - movzx eax,byte ptr [eax+00000259]
2F8DCDDD: 85 C0             - test eax,eax
2F8DCDDF: 0F94 85 1BFAFFFF  - sete [ebp-000005E5]
2F8DCDE6: 0FB6 85 1BFAFFFF  - movzx eax,byte ptr [ebp-000005E5]
2F8DCDED: 85 C0             - test eax,eax
2F8DCDEF: 0F85 F30D0000     - jne 2F8DDBE8
2F8DCDF5: 83 EC 04          - sub esp,04
// ---------- INJECTING HERE ----------
2F8DCDF8: FF B5 60F9FFFF    - push [ebp-000006A0]
// ---------- DONE INJECTING  ----------
2F8DCDFE: FF B5 5CF9FFFF    - push [ebp-000006A4]
2F8DCE04: FF 75 08          - push [ebp+08]
2F8DCE07: E8 2CCE0000       - call 2F8E9C38
2F8DCE0C: 83 C4 10          - add esp,10
2F8DCE0F: 8B 45 08          - mov eax,[ebp+08]
2F8DCE12: 8B 40 0C          - mov eax,[eax+0C]
2F8DCE15: 8B 40 08          - mov eax,[eax+08]
2F8DCE18: 8B 80 0C010000    - mov eax,[eax+0000010C]
2F8DCE1E: 85 C0             - test eax,eax
2F8DCE20: 0F9F C0           - setg al
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>42</ID>
              <Description>"Script: Test Speed"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-13
  Author : Jason

  This script does blah blah blah
}

define(address,06B964C2)
define(bytes,8B 40 0C 8B 40 6C)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  push eax
  mov eax,[eax+2c]
  test eax,eax
  jz skip // team not set
  mov eax,[esp]
  mov eax,[eax+2c]
  mov eax,[eax+38]
  test eax,eax
  jnz skip // enemy
  pop eax
  mov eax,[eax+0c]
  mov eax,[eax+6c]
  shl eax,2 // 4x speed!
  jmp return

skip:
  pop eax
  mov eax,[eax+0C]
  mov eax,[eax+6C]
  jmp return

address:
  jmp code
  nop
return:

[DISABLE]

address:
  db bytes
  // mov eax,[eax+0C]
  // mov eax,[eax+6C]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 06B964C2

06B964A7: 8B 40 78          - mov eax,[eax+78]
06B964AA: 85 C0             - test eax,eax
06B964AC: 0F9F C0           - setg al
06B964AF: 0FB6 C0           - movzx eax,al
06B964B2: 8B D8             - mov ebx,eax
06B964B4: 85 C0             - test eax,eax
06B964B6: 75 07             - jne 06B964BF
06B964B8: 33 F6             - xor esi,esi
06B964BA: E9 C0000000       - jmp 06B9657F
06B964BF: 8B 45 08          - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
06B964C2: 8B 40 0C          - mov eax,[eax+0C]
06B964C5: 8B 40 6C          - mov eax,[eax+6C]
// ---------- DONE INJECTING  ----------
06B964C8: 85 C0             - test eax,eax
06B964CA: 0F9F C0           - setg al
06B964CD: 0FB6 C0           - movzx eax,al
06B964D0: 8B D8             - mov ebx,eax
06B964D2: 85 C0             - test eax,eax
06B964D4: 75 07             - jne 06B964DD
06B964D6: 33 F6             - xor esi,esi
06B964D8: E9 A2000000       - jmp 06B9657F
06B964DD: 8B 45 08          - mov eax,[ebp+08]
06B964E0: 0FB6 80 42010000  - movzx eax,byte ptr [eax+00000142]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>43</ID>
              <Description>"Script: Test speed B"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-13
  Author : Jason

  Testing where speed is loaded frequently...  CAN be used to slow down, but
  not speed up by itself
}


define(address,0D53C10F)
define(bytes,8B 40 0C 8B 40 6C)

define(address2,0D53C435)
define(bytes2,8B 40 0C 8B 40 6C)

define(address3,06B964C2)
define(bytes3,8B 40 0C 8B 40 6C)

[ENABLE]

assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[eax+0C]
  mov eax,[eax+6C]
  shl eax,2
  jmp return

address:
  jmp code
  nop
return:

assert(address2,bytes2)
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov eax,[eax+0C]
  mov eax,[eax+6C]
  shl eax,2
  jmp return2

address2:
  jmp code2
  nop
return2:

assert(address3,bytes3)
alloc(newmem3,$1000)

label(code3)
label(return3)

newmem3:

code3:
  mov eax,[eax+0C]
  mov eax,[eax+6C]
  shl eax,2
  jmp return3

address3:
  jmp code3
  nop
return3:

[DISABLE]

address:
  db bytes
  // mov eax,[eax+0C]
  // mov eax,[eax+6C]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0D53C10F

0D53C0E8: 39 00                   - cmp [eax],eax
0D53C0EA: E8 1D5946F7             - call 049A1A0C
0D53C0EF: 83 C4 10                - add esp,10
0D53C0F2: 39 85 94F9FFFF          - cmp [ebp-0000066C],eax
0D53C0F8: 0F9C C0                 - setl al
0D53C0FB: 0FB6 C0                 - movzx eax,al
0D53C0FE: 88 85 1BFBFFFF          - mov [ebp-000004E5],al
0D53C104: 85 C0                   - test eax,eax
0D53C106: 0F85 9CFDFFFF           - jne 0D53BEA8
0D53C10C: 8B 45 08                - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0D53C10F: 8B 40 0C                - mov eax,[eax+0C]
0D53C112: 8B 40 6C                - mov eax,[eax+6C]
// ---------- DONE INJECTING  ----------
0D53C115: 85 C0                   - test eax,eax
0D53C117: 0F9F C0                 - setg al
0D53C11A: 0FB6 C0                 - movzx eax,al
0D53C11D: 85 C0                   - test eax,eax
0D53C11F: 0F94 85 1BFBFFFF        - sete [ebp-000004E5]
0D53C126: 0FB6 85 1BFBFFFF        - movzx eax,byte ptr [ebp-000004E5]
0D53C12D: 85 C0                   - test eax,eax
0D53C12F: 0F85 750C0000           - jne 0D53CDAA
0D53C135: 8B 45 08                - mov eax,[ebp+08]
0D53C138: 8B 80 9C010000          - mov eax,[eax+0000019C]
}
address2:
  db bytes2
  // mov eax,[eax+0C]
  // mov eax,[eax+6C]

dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 0D53C435

0D53C410: 8B 80 F0020000          - mov eax,[eax+000002F0]
0D53C416: 85 C0                   - test eax,eax
0D53C418: 0F94 C0                 - sete al
0D53C41B: 0FB6 C0                 - movzx eax,al
0D53C41E: 85 C0                   - test eax,eax
0D53C420: 0F94 85 1BFBFFFF        - sete [ebp-000004E5]
0D53C427: 0FB6 85 1BFBFFFF        - movzx eax,byte ptr [ebp-000004E5]
0D53C42E: 85 C0                   - test eax,eax
0D53C430: 75 11                   - jne 0D53C443
0D53C432: 8B 45 08                - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0D53C435: 8B 40 0C                - mov eax,[eax+0C]
0D53C438: 8B 40 6C                - mov eax,[eax+6C]
// ---------- DONE INJECTING  ----------
0D53C43B: 89 85 98F9FFFF          - mov [ebp-00000668],eax
0D53C441: EB 0F                   - jmp 0D53C452
0D53C443: 8B 45 08                - mov eax,[ebp+08]
0D53C446: 8B 80 00030000          - mov eax,[eax+00000300]
0D53C44C: 89 85 98F9FFFF          - mov [ebp-00000668],eax
0D53C452: 0FB6 85 A7F9FFFF        - movzx eax,byte ptr [ebp-00000659]
0D53C459: 85 C0                   - test eax,eax
0D53C45B: 0F94 85 1BFBFFFF        - sete [ebp-000004E5]
0D53C462: 0FB6 85 1BFBFFFF        - movzx eax,byte ptr [ebp-000004E5]
0D53C469: 85 C0                   - test eax,eax
}
address3:
  db bytes3
  // mov eax,[eax+0C]
  // mov eax,[eax+6C]

dealloc(newmem3)

{
// ORIGINAL CODE - INJECTION POINT: 06B964C2

06B964A7: 8B 40 78          - mov eax,[eax+78]
06B964AA: 85 C0             - test eax,eax
06B964AC: 0F9F C0           - setg al
06B964AF: 0FB6 C0           - movzx eax,al
06B964B2: 8B D8             - mov ebx,eax
06B964B4: 85 C0             - test eax,eax
06B964B6: 75 07             - jne 06B964BF
06B964B8: 33 F6             - xor esi,esi
06B964BA: E9 C0000000       - jmp 06B9657F
06B964BF: 8B 45 08          - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
06B964C2: 8B 40 0C          - mov eax,[eax+0C]
06B964C5: 8B 40 6C          - mov eax,[eax+6C]
// ---------- DONE INJECTING  ----------
06B964C8: 85 C0             - test eax,eax
06B964CA: 0F9F C0           - setg al
06B964CD: 0FB6 C0           - movzx eax,al
06B964D0: 8B D8             - mov ebx,eax
06B964D2: 85 C0             - test eax,eax
06B964D4: 75 07             - jne 06B964DD
06B964D6: 33 F6             - xor esi,esi
06B964D8: E9 A2000000       - jmp 06B9657F
06B964DD: 8B 45 08          - mov eax,[ebp+08]
06B964E0: 0FB6 80 42010000  - movzx eax,byte ptr [eax+00000142]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Script: Test new speed"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: 
  Date   : 2013-09-14
  Author : Jason

  This script does blah blah blah
}

[ENABLE]


aobscan(INJECT_TESTNEWSPEED,8B 40 6C 89 85 98 F9 FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[eax+6C]
  shl eax,4
  mov [ebp-00000668],eax
  jmp return

INJECT_TESTNEWSPEED:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT_TESTNEWSPEED)

[DISABLE]

INJECT_TESTNEWSPEED:
  db 8B 40 6C 89 85 98 F9 FF FF

unregistersymbol(INJECT_TESTNEWSPEED)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2BD2A108

2BD2A0E6: 85 C0                   - test eax,eax
2BD2A0E8: 0F94 C0                 - sete al
2BD2A0EB: 0FB6 C0                 - movzx eax,al
2BD2A0EE: 85 C0                   - test eax,eax
2BD2A0F0: 0F94 85 1BFBFFFF        - sete [ebp-000004E5]
2BD2A0F7: 0FB6 85 1BFBFFFF        - movzx eax,byte ptr [ebp-000004E5]
2BD2A0FE: 85 C0                   - test eax,eax
2BD2A100: 75 11                   - jne 2BD2A113
2BD2A102: 8B 45 08                - mov eax,[ebp+08]
2BD2A105: 8B 40 0C                - mov eax,[eax+0C]
// ---------- INJECTING HERE ----------
2BD2A108: 8B 40 6C                - mov eax,[eax+6C]
2BD2A10B: 89 85 98F9FFFF          - mov [ebp-00000668],eax
// ---------- DONE INJECTING  ----------
2BD2A111: EB 0F                   - jmp 2BD2A122
2BD2A113: 8B 45 08                - mov eax,[ebp+08]
2BD2A116: 8B 80 00030000          - mov eax,[eax+00000300]
2BD2A11C: 89 85 98F9FFFF          - mov [ebp-00000668],eax
2BD2A122: 0FB6 85 A7F9FFFF        - movzx eax,byte ptr [ebp-00000659]
2BD2A129: 85 C0                   - test eax,eax
2BD2A12B: 0F94 85 1BFBFFFF        - sete [ebp-000004E5]
2BD2A132: 0FB6 85 1BFBFFFF        - movzx eax,byte ptr [ebp-000004E5]
2BD2A139: 85 C0                   - test eax,eax
2BD2A13B: 0F85 69000000           - jne 2BD2A1AA
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Data"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>48</ID>
              <Description>"Script: Select Ship"</Description>
              <Options moHideChildren="1"/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-13
  Author : Jason

  This is called when the player selects a ship.
}

[ENABLE]

aobscan(INJECT_SELECTSHIP,89 88 24 01 00 00 EB) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pSelectedShip)
label(pSelectedShipBase)
registersymbol(pSelectedShip)
registersymbol(pSelectedShipBase)

newmem:
pSelectedShip:
  dd 0
pSelectedShipBase:
  dd 0

code:
  mov [pSelectedShip],ecx
  mov [pSelectedShipBase],eax
  mov [eax+00000124],ecx
  jmp return

INJECT_SELECTSHIP:
  jmp code
  nop
return:
registersymbol(INJECT_SELECTSHIP)

[DISABLE]

INJECT_SELECTSHIP:
  db 89 88 24 01 00 00

unregistersymbol(INJECT_SELECTSHIP)
unregistersymbol(pSelectedShip)
unregistersymbol(pSelectedShipBase)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2F904FEF

2F904FBC: 0FB6 C0                 - movzx eax,al
2F904FBF: 89 85 84F8FFFF          - mov [ebp-0000077C],eax
2F904FC5: EB 0A                   - jmp 2F904FD1
2F904FC7: C7 85 84F8FFFF 00000000 - mov [ebp-0000077C],00000000
2F904FD1: 8B 85 84F8FFFF          - mov eax,[ebp-0000077C]
2F904FD7: 88 85 BFF7FFFF          - mov [ebp-00000841],al
2F904FDD: 83 BD 84F8FFFF 00       - cmp dword ptr [ebp-0000077C],00
2F904FE4: 75 11                   - jne 2F904FF7
2F904FE6: 8B 45 08                - mov eax,[ebp+08]
2F904FE9: 8B 8D 14F6FFFF          - mov ecx,[ebp-000009EC]
// ---------- INJECTING HERE ----------
2F904FEF: 89 88 24010000          - mov [eax+00000124],ecx
// ---------- DONE INJECTING  ----------
2F904FF5: EB 31                   - jmp 2F905028
2F904FF7: 83 85 64F6FFFF 01       - add dword ptr [ebp-0000099C],01
2F904FFE: 8B 45 08                - mov eax,[ebp+08]
2F905001: 8B 80 20010000          - mov eax,[eax+00000120]
2F905007: 8B C8                   - mov ecx,eax
2F905009: 39 09                   - cmp [ecx],ecx
2F90500B: 8B 40 0C                - mov eax,[eax+0C]
2F90500E: 39 85 64F6FFFF          - cmp [ebp-0000099C],eax
2F905014: 0F9C C0                 - setl al
2F905017: 0FB6 C0                 - movzx eax,al
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>49</ID>
                  <Description>"pSelectedShip"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pSelectedShip</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>50</ID>
                  <Description>"pSelectedShipBase"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pSelectedShipBase</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>51</ID>
                  <Description>"pSelectedShipBase-&gt;pHoveredShip"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pSelectedShipBase</Address>
                  <Offsets>
                    <Offset>13C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>39</ID>
              <Description>"InstantBuild - last pointer"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bInstantBuild+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>40</ID>
              <Description>"Last Cheated Pointer"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bInstantBuild+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>30</ID>
              <Description>"pEnergy"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pEnergy</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"pDamage - last damaged ship"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pDamage</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>36</ID>
              <Description>"pShipCounts"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pShipCounts</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"pAiProgression"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAiProgression</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Resources - direct"</Description>
              <Options moHideChildren="1"/>
              <Color>C0C0C0</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>1</ID>
                  <Description>"pResources"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pResources</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2</ID>
                  <Description>"Metals (*4096)"</Description>
                  <Color>80000008</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pResources</Address>
                  <Offsets>
                    <Offset>280</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>3</ID>
                  <Description>"Crystals (*4096)"</Description>
                  <Color>80000008</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pResources</Address>
                  <Offsets>
                    <Offset>288</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>4</ID>
                  <Description>"Knowledge"</Description>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pResources</Address>
                  <Offsets>
                    <Offset>2A0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>27</ID>
                  <Description>"Total Energy"</Description>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pResources</Address>
                  <Offsets>
                    <Offset>20C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Script: Resources"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle - 2013-09-09
  Date   : 2013-09-09
  Author : Jason

  This is where metals value is copied for display I think.  This script lets
  you set a minimum number of each resource.

Structure:
	0280: Metals (*4096)
	0288: Crystals (*4096)
	02A0: Knowledge
}

[ENABLE]

aobscan(INJECT_Resources,00 00 00 8B 45 08 05 80 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(okMetal)
label(skipMetal)
label(okCrystal)
label(skipCrystal)
label(done)
label(return)
label(pResources)
registersymbol(pResources)

newmem:
pResources:
  dd 0
  dd 0 // minimum metals
  dd 0 // minimum crystals
  dd 0 // minimum knowledge

code:
  mov [pResources],eax
  push esi
  push eax
  mov esi, eax

  // metal
  mov eax, [pResources+04] // minimum metal
  cmp eax, 000fffff // we shift left 0x0c bits so this is the max value
  jna okMetal
  mov eax, 000fffff
okMetal:
  shl eax, 0c // value in struct is * 4096
  cmp eax, [esi+0280]
  jb skipMetal
  mov [esi+0280], eax
  cmp eax, [ebp+0c] // metal also in ebp+0c and set from there about 20 instructions later after a call
  jb skipMetal
  mov [ebp+0c], eax

skipMetal:
  // crystal
  mov eax, [pResources+08] // minimum crystal
  cmp eax, 000fffff // we shift left 0x0c bits so this is the max value
  jna okCrystal
  mov eax, 000fffff
okCrystal:
  shl eax, 0c // value in struct is * 4096
  cmp eax, [esi+0288]
  jb skipCrystal
  mov [esi+0288], eax

skipCrystal:
  // knowledge - this isn't multiplied by 4096
  mov eax, [pResources+0c] // minimum knowledge
  cmp eax, [esi+02a0]
  jb done
  mov [esi+02a0], eax

done:
  pop eax
  pop esi
  add eax,00000280 // original code
  jmp return

INJECT_Resources+06:
  jmp code
return:
registersymbol(INJECT_Resources)

[DISABLE]

INJECT_Resources+06:
  db 05 80 02 00 00

unregistersymbol(INJECT_Resources)
unregistersymbol(pResources)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0524BECF

0524BE72: C7 85 BCFEFFFF 00000000 - mov [ebp-00000144],00000000
0524BE7C: C7 85 C0FEFFFF 00000000 - mov [ebp-00000140],00000000
0524BE86: C7 85 C4FEFFFF 00000000 - mov [ebp-0000013C],00000000
0524BE90: C7 85 C8FEFFFF 00000000 - mov [ebp-00000138],00000000
0524BE9A: C7 85 CCFEFFFF 00000000 - mov [ebp-00000134],00000000
0524BEA4: C7 85 D0FEFFFF 00000000 - mov [ebp-00000130],00000000
0524BEAE: C7 85 D4FEFFFF 00000000 - mov [ebp-0000012C],00000000
0524BEB8: C7 85 D8FEFFFF 00000000 - mov [ebp-00000128],00000000
0524BEC2: C7 85 DCFEFFFF 00000000 - mov [ebp-00000124],00000000
0524BECC: 8B 45 08                - mov eax,[ebp+08] // structure pointer?
// ---------- INJECTING HERE ----------
0524BECF: 05 80020000             - add eax,00000280 // offset of 64bit metals
// ---------- DONE INJECTING  ----------
0524BED4: 8B 08                   - mov ecx,[eax] // first 32 bits
0524BED6: 89 8D E0FEFFFF          - mov [ebp-00000120],ecx
0524BEDC: 8B 40 04                - mov eax,[eax+04] // second 32 bits
0524BEDF: 89 85 E4FEFFFF          - mov [ebp-0000011C],eax
0524BEE5: 8D 85 A0FEFFFF          - lea eax,[ebp-00000160]
0524BEEB: 83 EC 0C                - sub esp,0C
0524BEEE: 83 EC 08                - sub esp,08
0524BEF1: 8B 8D E0FEFFFF          - mov ecx,[ebp-00000120]
0524BEF7: 89 0C 24                - mov [esp],ecx
0524BEFA: 8B 8D E4FEFFFF          - mov ecx,[ebp-0000011C]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Minimum: Metal"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pResources+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Minimum: Crystal"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pResources+8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Minimum: Knowledge"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pResources+c</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Script: Energy"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-11
  Author : jgoemat

  Energy is set here several times per second.  The cheat does not let it go
  below a minimum value.

  Offset: 020C

  Note: This is called for 8 slots + each computer player I think.  Playing
  by myself anyway there is one value with my energy and 7 0s, then
  two 100,000,000 values.  I think this means the AI have unlimited
  energy basically.
}

[ENABLE]


aobscan(INJECT_ENERGY,89 88 0C 02 00 00 C7 40) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)
label(pEnergy)
registersymbol(pEnergy)

newmem:
pEnergy:
  dd 0
  dd 0 // minimum energy

code:
  mov [pEnergy],eax
  cmp ecx,[pEnergy+4]
  jge skip
  mov ecx,[pEnergy+4]

skip:
  mov [eax+0000020C],ecx
  jmp return

INJECT_ENERGY:
  jmp code
  nop
return:
registersymbol(INJECT_ENERGY)

[DISABLE]

INJECT_ENERGY:
  db 89 88 0C 02 00 00

unregistersymbol(INJECT_ENERGY)
unregistersymbol(pEnergy)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2B7E7FC5

2B7E7FA0: 0FB6 C0                 - movzx eax,al
2B7E7FA3: 83 EC 08                - sub esp,08
2B7E7FA6: 50                      - push eax
2B7E7FA7: FF B5 30F9FFFF          - push [ebp-000006D0]
2B7E7FAD: 8B 85 30F9FFFF          - mov eax,[ebp-000006D0]
2B7E7FB3: 39 00                   - cmp [eax],eax
2B7E7FB5: E8 06B20200             - call 2B8131C0
2B7E7FBA: 83 C4 10                - add esp,10
2B7E7FBD: 8B C8                   - mov ecx,eax
2B7E7FBF: 8B 85 E8F8FFFF          - mov eax,[ebp-00000718]
// ---------- INJECTING HERE ----------
2B7E7FC5: 89 88 0C020000          - mov [eax+0000020C],ecx
// ---------- DONE INJECTING  ----------
2B7E7FCB: C7 40 10 C0BF1301       - mov [eax+10],0113BFC0
2B7E7FD2: 83 85 20FBFFFF 01       - add dword ptr [ebp-000004E0],01
2B7E7FD9: 8B 85 1CFBFFFF          - mov eax,[ebp-000004E4]
2B7E7FDF: 8B 40 0C                - mov eax,[eax+0C]
2B7E7FE2: 39 85 20FBFFFF          - cmp [ebp-000004E0],eax
2B7E7FE8: 0F9C C0                 - setl al
2B7E7FEB: 0FB6 C0                 - movzx eax,al
2B7E7FEE: 88 85 CFFAFFFF          - mov [ebp-00000531],al
2B7E7FF4: 85 C0                   - test eax,eax
2B7E7FF6: 0F85 6CFFFFFF           - jne 2B7E7F68
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Minimum: Energy"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pEnergy+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Script: Instant Build"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Steam
  Date   : 2013-09-09
  Author : jgoemat

  This injection is where the health of the ship is updated as it is being
  built.  Structure:

Raise these two to finish construction
	0288: Metals spent on construction so far (*4096)
	0290: Crystal spent on construction so far (*4096)

	009C: Pointer -
	0118: Set to something like 4316 when built
	0120: Set to high number when built
	0128: Cleared from 256 to 0 when built
	0320: Type?  120 for scilab 2, 104 for scilab
	0328: Type?  120 for scilab 2, 104 for scilab

000C is pointer to information about ship
	0054: Knowledge Produced
	005C: Metals (not multiplied) (not displayed, but used for calculating finish)
	0060: Crystals (not multiplied) (not displayed, but used for calculating finish)
	0064: Energy
	0068: Energy again?
	006C: Speed
	0070: Health
	0074: Health again
	0088: Armor
}

[ENABLE]

aobscan(INJECT_Build,89 86 C8 01 00 00 0F) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(skipMetal)
label(skipMetal2)
label(skipCrystal)
label(skipCrystal2)
label(return)
label(bInstantBuild)
registerSymbol(bInstantBuild)

newmem:
bInstantBuild:
  dd 0
  dd 0
  dd 0

code:
  mov [bInstantBuild+4],esi // last built station
  mov [esi+000001C8],eax
  cmp dword ptr [bInstantBuild],1
  jne skip
  mov eax,[esi+2c]
  test eax,eax
  jz skip // team pointer not set
  cmp [eax+38],0
  jne skip // not player

  // cheat - load metal and crystal from blueprint and store in current spent
  mov [bInstantBuild+8],esi // last instant-built station
  mov eax,[esi+0c]
  mov eax,[eax+5c]
  shl eax,0c // 12 bits
  cmp eax,[esi+0288]
  jna skipMetal
  mov [esi+0288],eax
skipMetal:
  mov eax,[esi+0c]
  mov eax,[eax+5c]
  shr eax,14 // 20 bits
  cmp eax,[esi+028c]
  jna skipMetal2
  mov [esi+028c],eax

skipMetal2:
  // crystals
  mov eax,[esi+0c]
  mov eax,[eax+60]
  shl eax,0c
  cmp eax,[esi+0290]
  jna skipCrystal
  mov [esi+0290],eax
skipCrystal:
  mov eax,[esi+0c]
  mov eax,[eax+60]
  shr eax,14
  cmp eax,[esi+0294]
  jna skipCrystal2
  mov [esi+0294],eax

skipCrystal2:
skip:
  jmp return

INJECT_Build:
  jmp code
  nop
return:
registersymbol(INJECT_Build)

[DISABLE]

INJECT_Build:
  db 89 86 C8 01 00 00

unregistersymbol(INJECT_Build)
unregisterSymbol(bInstantBuild)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2BF91594

2BF9156F: 8B 8D 74FFFFFF  - mov ecx,[ebp-0000008C]
2BF91575: 89 4C 24 04     - mov [esp+04],ecx
2BF91579: 50              - push eax
2BF9157A: E8 B99092D8     - call 048BA638
2BF9157F: 83 C4 0C        - add esp,0C
2BF91582: 8D 85 78FFFFFF  - lea eax,[ebp-00000088]
2BF91588: 83 EC 0C        - sub esp,0C
2BF9158B: 50              - push eax
2BF9158C: E8 B7CA92D8     - call 048BE048
2BF91591: 83 C4 10        - add esp,10
// ---------- INJECTING HERE ----------
2BF91594: 89 86 C8010000  - mov [esi+000001C8],eax
// ---------- DONE INJECTING  ----------
2BF9159A: 0FB6 45 1C      - movzx eax,byte ptr [ebp+1C]
2BF9159E: 8B D8           - mov ebx,eax
2BF915A0: 0FB6 45 1C      - movzx eax,byte ptr [ebp+1C]
2BF915A4: 85 C0           - test eax,eax
2BF915A6: 0F85 E5000000   - jne 2BF91691
2BF915AC: 8D 86 88020000  - lea eax,[esi+00000288]
2BF915B2: 8B 08           - mov ecx,[eax]
2BF915B4: 89 4D D0        - mov [ebp-30],ecx
2BF915B7: 8B 40 04        - mov eax,[eax+04]
2BF915BA: 89 45 D4        - mov [ebp-2C],eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"bInstantBuild"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bInstantBuild</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Script: Ship Building"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Steam
  Date   : 2013-09-09
  Author : jgoemat

  This injection point updates the crystal used to build a certain ship.
  When it and the metal reach the total amounts, the ship is finished.

  Here the ship template is at 00B4 instead of 000C as it is with stations,
  but I'm using fake values.

Raise these two to finish construction
	0288: Metals spent on construction so far (*4096)
	0290: Crystal spent on construction so far (*4096)
}

[ENABLE]

aobscan(INJECT_BuildShipCrystal,89 08 8B 4D 18 89 48 04 0F) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)
label(bInstantBuildShips)
registerSymbol(bInstantBuildShips)

newmem:
bInstantBuildShips:
  dd 0

code:
  cmp dword ptr [bInstantBuildShips],00000001
  jne done

  mov ecx,ffffffff // max value
  mov [eax-8],ecx // update metals too

done:
  mov [eax],ecx
  mov ecx,[ebp+18]
  jmp return

INJECT_BuildShipCrystal:
  jmp code
return:
registersymbol(INJECT_BuildShipCrystal)

[DISABLE]

INJECT_BuildShipCrystal:
  db 89 08 8B 4D 18

unregistersymbol(INJECT_BuildShipCrystal)
unregisterSymbol(bInstantBuildShips)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 37E049F9

37E049C1: C7 85 74FFFFFF 00000000 - mov [ebp-0000008C],00000000
37E049CB: C7 85 78FFFFFF 00000000 - mov [ebp-00000088],00000000
37E049D5: C7 85 7CFFFFFF 00000000 - mov [ebp-00000084],00000000
37E049DF: 8D 86 88020000          - lea eax,[esi+00000288]
37E049E5: 8B 4D 0C                - mov ecx,[ebp+0C]
37E049E8: 89 08                   - mov [eax],ecx
37E049EA: 8B 4D 10                - mov ecx,[ebp+10]
37E049ED: 89 48 04                - mov [eax+04],ecx
37E049F0: 8D 86 90020000          - lea eax,[esi+00000290] // esi has base
37E049F6: 8B 4D 14                - mov ecx,[ebp+14]
// ---------- INJECTING HERE ----------
37E049F9: 89 08                   - mov [eax],ecx // low 32 bits
37E049FB: 8B 4D 18                - mov ecx,[ebp+18]
// ---------- DONE INJECTING  ----------
37E049FE: 89 48 04                - mov [eax+04],ecx // high 32 bits
37E04A01: 0FB6 86 29010000        - movzx eax,byte ptr [esi+00000129]
37E04A08: 85 C0                   - test eax,eax
37E04A0A: 0F94 C0                 - sete al
37E04A0D: 0FB6 C0                 - movzx eax,al
37E04A10: 8B D8                   - mov ebx,eax
37E04A12: 85 DB                   - test ebx,ebx
37E04A14: 0F85 7B030000           - jne 37E04D95
37E04A1A: 8B 46 0C                - mov eax,[esi+0C]
37E04A1D: 8B 40 5C                - mov eax,[eax+5C]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"bInstantBuildShips"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bInstantBuildShips</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Script: Damage"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-09
  Author : jgoemat

  This is where new health is stored after taking damage.  I'm using pointer
  at offset 34 to denote that it is a player.  HEre are all the possibilities
  I've found:

002C: Same pointer for all enemies, Same pointer for all player ships
	-- not set on constructed ships so check for 0 if using!
	0034: 8 for enemy, 0 for player
	0038: 1 for enemy, 0 for player
0034: Ptr for player, 0 for enemy -- not set on newly constructed ships
0118: Set for player, 0 for enemy -- not set on newly constructed ships
0120: Set for player, 0 for enemy -- not set on newly constructed ships
0174: 0077 for player, 0001 for enemy (2BF on new ship)
0208: 009B for player, 0000 for enemy (0 on new ship)
020C: 0001 for player, 0000 for enemy (0 on new ship)
02B8: # for player (4800-4900), 0000 for enemy (0 on new ship)
02BC: # for player (2D690, 2DA78), 000 for enemy (0 on new ship)
02E4: # for player, 0 for enemy (0 on new ship)
02E8: # for player, 0 for enemy (0 on new ship)

  If player/enemy isn't working right, try some other values, or slow down the
  game and use structure dissector with pointer at pDamage for the last
  ship that should have taken damage.
}

[ENABLE]

aobscan(INJECT_Damage,89 88 C8 01 00 00 83) // should be unique
alloc(newmem,$1000)

label(code)
label(skipGod)
label(skipOHK)
label(done)
label(return)
label(pDamage)
registersymbol(pDamage)

newmem:
pDamage:
  dd 0 // pointer to last ship to take damage
  dd 0 // flag for god mode
  dd 0 // flag for one hit kills

code:
  mov [pDamage],eax
  push esi

  // only do god/ohk if health is decreasing due to damage
  cmp ecx,[eax+01C8]
  jnl done

  // if 2C isn't set, it's a new ship and enemy/player identifiers aren't set
  cmp [eax+2C],00000000
  je done
{
  // other values are also set for known players AND enemies
  cmp [eax+2C8],00000000
  je done
  cmp [eax+2CC],00000000
  je done
  cmp [eax+2E0],00000000
  je done
  cmp [eax+2B4],00000000
  je done
}
  cmp [pDamage+04],1
  jne skipGod
  //cmp [eax+34],00000000 // original method, doesn't work for enemy bombers apparently in a real game
  //je skipGod // not player ship
  mov esi,[eax+2c]
  cmp [esi+38],0
  jne skipGod // not a player ship

  mov ecx,[eax+000001C8] // use current health
  jmp done

skipGod:
  cmp [pDamage+08],1
  jne skipOHK
  //cmp [eax+34],00000000
  //jne skipOHK // not an enemy
  mov esi,[eax+2c]
  cmp [esi+38],1
  jne skipOHK
  xor ecx,ecx

skipOHK:
done:
  pop esi
  mov [eax+000001C8],ecx
  jmp return

INJECT_Damage:
  jmp code
  nop
return:
registersymbol(INJECT_Damage)

[DISABLE]

INJECT_Damage:
  db 89 88 C8 01 00 00

unregistersymbol(INJECT_Damage)
unregistersymbol(pDamage)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0DD1D447

0DD1D42C: 0FB6 C0         - movzx eax,al
0DD1D42F: 8B D8           - mov ebx,eax
0DD1D431: 85 C0           - test eax,eax
0DD1D433: 75 0C           - jne 0DD1D441
0DD1D435: 8B 45 08        - mov eax,[ebp+08]
0DD1D438: 8B 40 0C        - mov eax,[eax+0C]
0DD1D43B: 8B 40 74        - mov eax,[eax+74]
0DD1D43E: 89 45 0C        - mov [ebp+0C],eax
0DD1D441: 8B 4D 0C        - mov ecx,[ebp+0C]
0DD1D444: 8B 45 08        - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0DD1D447: 89 88 C8010000  - mov [eax+000001C8],ecx
// ---------- DONE INJECTING  ----------
0DD1D44D: 83 EC 0C        - sub esp,0C
0DD1D450: 50              - push eax
0DD1D451: E8 DA000000     - call 0DD1D530
0DD1D456: 83 C4 10        - add esp,10
0DD1D459: 8B 45 94        - mov eax,[ebp-6C]
0DD1D45C: 89 85 6CFFFFFF  - mov [ebp-00000094],eax
0DD1D462: 8B 85 6CFFFFFF  - mov eax,[ebp-00000094]
0DD1D468: 8D 65 F4        - lea esp,[ebp-0C]
0DD1D46B: 5E              - pop esi
0DD1D46C: 5F              - pop edi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"bGodMode"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pDamage+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"bOneHitKill"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pDamage+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Script: AI Progress"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-10
  Author : jgoemat

  This script does blah blah blah
}

[ENABLE]


aobscan(INJECT_SETAIPROGRESS,89 88 F0 01 00 00 83) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)
label(pAiProgression)
registersymbol(pAiProgression)

newmem:
pAiProgression:
  dd 0
  dd 0 // bAiProgression - disables it when set to 1

code:
  mov [pAiProgression],ecx
  cmp dword ptr [pAiProgression+4],1
  jne skip
  cmp ecx,[eax+000001F0]
  jna skip
  mov ecx,[eax+000001F0]
skip:
  mov [eax+000001F0],ecx
  jmp return

INJECT_SETAIPROGRESS:
  jmp code
  nop
return:
registersymbol(INJECT_SETAIPROGRESS)

[DISABLE]

INJECT_SETAIPROGRESS:
  db 89 88 F0 01 00 00

unregistersymbol(INJECT_SETAIPROGRESS)
unregistersymbol(pAiProgression)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0DD95ADC

0DD95AC3: EB EF            - jmp 0DD95AB4
0DD95AC5: 68 8B030000      - push 0000038B
0DD95ACA: EB E8            - jmp 0DD95AB4
0DD95ACC: 00 00            - add [eax],al
0DD95ACE: 00 00            - add [eax],al
0DD95AD0: 55               - push ebp
0DD95AD1: 8B EC            - mov ebp,esp
0DD95AD3: 83 EC 08         - sub esp,08
0DD95AD6: 8B 4D 0C         - mov ecx,[ebp+0C]
0DD95AD9: 8B 45 08         - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
0DD95ADC: 89 88 F0010000   - mov [eax+000001F0],ecx
// ---------- DONE INJECTING  ----------
0DD95AE2: 83 EC 0C         - sub esp,0C
0DD95AE5: 50               - push eax
0DD95AE6: E8 FD6BF9FF      - call 0DD2C6E8
0DD95AEB: 83 C4 10         - add esp,10
0DD95AEE: C9               - leave 
0DD95AEF: C3               - ret 
0DD95AF0: 55               - push ebp
0DD95AF1: 8B EC            - mov ebp,esp
0DD95AF3: 53               - push ebx
0DD95AF4: 57               - push edi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>23</ID>
          <Description>"bDisableAiProgress"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pAiProgression+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Script: Fast Reload"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-11
  Author : jgoemat

  This is where the seconds until able to fire again has been
  set and we are copying the total seconds until able to fire
  again into the ship structure.
}

[ENABLE]

aobscan(INJECT_FASTRELOAD,89 87 68 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(enemy)
label(skip)
label(return)
label(bFastReload)
registersymbol(bFastReload)

newmem:
bFastReload:
  dd 1
  dd 1 // enemies have long recharge

code:
  push esi

  // if 2C isn't set, it's a new ship and enemy/player identifiers aren't set
  cmp [edi+2C],00000000
  je skip

  mov esi,[edi+2c]
  cmp [esi+38],0
  jne enemy // not a player ship

  cmp dword ptr [bFastReload],1
  jne skip

  mov eax,00000001
  mov [edi+00000264],eax
  jmp skip

enemy:
  cmp dword ptr [bFastReload+4],1
  jne skip

  mov eax,0000007f
  mov [edi+00000264],eax

skip:
  pop esi
  mov [edi+00000268],eax
  jmp return

INJECT_FASTRELOAD:
  jmp code
  nop
return:
registersymbol(INJECT_FASTRELOAD)

[DISABLE]

INJECT_FASTRELOAD:
  db 89 87 68 02 00 00

unregistersymbol(INJECT_FASTRELOAD)
unregistersymbol(bFastReload)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2D56E15A

2D56E13A: 85 C0             - test eax,eax
2D56E13C: 0F94 C0           - sete al
2D56E13F: 0FB6 C0           - movzx eax,al
2D56E142: 8B D8             - mov ebx,eax
2D56E144: 85 C0             - test eax,eax
2D56E146: 75 18             - jne 2D56E160
2D56E148: 8B 45 F0          - mov eax,[ebp-10]             // ship template reload speed from stack
2D56E14B: 89 87 64020000    - mov [edi+00000264],eax       // set ship's time to be able to fire
2D56E151: 8B 47 0C          - mov eax,[edi+0C]             // ship template pointer
2D56E154: 8B 80 9C000000    - mov eax,[eax+0000009C]       // ship template reload speed
// ---------- INJECTING HERE ----------
2D56E15A: 89 87 68020000    - mov [edi+00000268],eax       // save reload speed into ship struct (why?)
// ---------- DONE INJECTING  ----------
2D56E160: 0FB6 45 10        - movzx eax,byte ptr [ebp+10]
2D56E164: 85 C0             - test eax,eax
2D56E166: 0F94 C0           - sete al
2D56E169: 0FB6 C0           - movzx eax,al
2D56E16C: 8B D8             - mov ebx,eax
2D56E16E: 85 C0             - test eax,eax
2D56E170: 0F85 30010000     - jne 2D56E2A6
2D56E176: 8B 47 0C          - mov eax,[edi+0C]
2D56E179: 8B 40 08          - mov eax,[eax+08]
2D56E17C: 0FB6 80 E0030000  - movzx eax,byte ptr [eax+000003E0]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>25</ID>
          <Description>"bFastReload"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bFastReload</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"bSlowEnemyReload"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bFastReload+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Script: Ship Counts"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-11
  Author : jgoemat

  This is where ship count is loaded for a single type.  If this returns
  0, then you can build to your heart's content.
}

[ENABLE]

aobscan(INJECT_SHIPLIMIT,8B 40 50 8B 4D 0C 39 48 0C 0F 86 08 00 00 00 8D 44 88 10 8B 00 ) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)
label(pShipCounts)
registersymbol(pShipCounts)

newmem:
pShipCounts:
  dd 0
  dd 0 // bIgnoreShipLimit

code:
  mov [pShipCounts],eax
  lea eax,[eax+ecx*4+10]
  mov eax,[eax]
  cmp dword ptr [pShipCounts+4],1
  jne skip
  xor eax,eax // say we haven't created any yet

skip:
  jmp return

INJECT_SHIPLIMIT+0F:
  jmp code
  nop
return:
registersymbol(INJECT_SHIPLIMIT)

[DISABLE]

INJECT_SHIPLIMIT+0F:
  db 8D 44 88 10 8B 00

unregistersymbol(INJECT_SHIPLIMIT)
unregistersymbol(pShipCounts)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2B813FF8

8B 40 50 8B 4D 0C 39 48 0C 0F 86 08 00 00 00 8D 44 88 10 8B 00

2B813FDB: 2B F8                   - sub edi,eax
2B813FDD: 3C 81                   - cmp al,-7F
2B813FDF: 2B 55 8B                - sub edx,[ebp-75]
2B813FE2: EC                      - in al,dx
2B813FE3: 83 EC 08                - sub esp,08
2B813FE6: 8B 45 08                - mov eax,[ebp+08]
2B813FE9: 8B 40 50                - mov eax,[eax+50]
2B813FEC: 8B 4D 0C                - mov ecx,[ebp+0C]
2B813FEF: 39 48 0C                - cmp [eax+0C],ecx
2B813FF2: 0F86 08000000           - jbe 2B814000
// ---------- INJECTING HERE ----------
2B813FF8: 8D 44 88 10             - lea eax,[eax+ecx*4+10]
2B813FFC: 8B 00                   - mov eax,[eax]
// ---------- DONE INJECTING  ----------
2B813FFE: C9                      - leave 
2B813FFF: C3                      - ret 
2B814000: 6A 1A                   - push 1A
2B814002: 68 76060000             - push 00000676
2B814007: E8 2CCFC8D8             - call 044A0F38
2B81400C: 68 90788E2C             - push 2C8E7890
2B814011: E9 22C7C8D8             - jmp 044A0738
2B814016: 00 00                   - add [eax],al
2B814018: 55                      - push ebp
2B814019: 8B EC                   - mov ebp,esp
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>35</ID>
          <Description>"bIgnoreShipLimit"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pShipCounts+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>54</ID>
      <Description>"Script: Speed"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : AIWar.exe
  Version: Humble Bundle
  Date   : 2013-09-14
  Author : jgoemat

  This is where the modified ship max speed is stored at 0320 in the ship
  structure once every game tick.
}

[ENABLE]

aobscan(INJECT_SPEED3,89 88 20 03 00 00 8B 45 08 8B 40 60) // should be unique
alloc(newmem,$1000)

label(code)
label(isPlayer)
label(isAI)
label(skip)
label(return)
label(PlayerSpeedMultiplier)
registersymbol(PlayerSpeedMultiplier)

newmem:
PlayerSpeedMultiplier:
  dd (float)1 // player
  dd (float)1 // ai

code:
  // note, we can trash eax because it is reloaded next and we can load
  // from [ebp+08] whenever we want
  mov [eax+00000320],ecx
  mov eax,[eax+2c]
  test eax,eax
  jz skip // side isn't set yet
  mov eax,[eax+38]
  cmp eax,0
  je isPlayer
  cmp eax,1
  je isAI
  jmp skip

isPlayer:
  mov eax,[ebp+08]
  fild dword ptr [eax+320]
  fmul dword ptr [PlayerSpeedMultiplier]
  fistp dword ptr [eax+320]
  jmp skip

isAI:
  mov eax,[ebp+08]
  fild dword ptr [eax+320]
  fmul dword ptr [PlayerSpeedMultiplier+4]
  fistp dword ptr [eax+320]
  jmp skip

skip:
  mov eax,[ebp+08] // load just in case
  jmp return

INJECT_SPEED3:
  jmp code
  nop
return:
registersymbol(INJECT_SPEED3)

[DISABLE]

INJECT_SPEED3:
  db 89 88 20 03 00 00

unregistersymbol(INJECT_SPEED3)
unregistersymbol(PlayerSpeedMultiplier)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2BD2A48D

2BD2A45E: 8B 85 64FBFFFF          - mov eax,[ebp-0000049C]
2BD2A464: 88 85 1BFBFFFF          - mov [ebp-000004E5],al
2BD2A46A: 83 BD 64FBFFFF 00       - cmp dword ptr [ebp-0000049C],00
2BD2A471: 75 11                   - jne 2BD2A484
2BD2A473: 8B 45 08                - mov eax,[ebp+08]
2BD2A476: 8B 88 0C030000          - mov ecx,[eax+0000030C]
2BD2A47C: 89 88 20030000          - mov [eax+00000320],ecx
2BD2A482: EB 0F                   - jmp 2BD2A493
2BD2A484: 8B 8D 98F9FFFF          - mov ecx,[ebp-00000668]
2BD2A48A: 8B 45 08                - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
2BD2A48D: 89 88 20030000          - mov [eax+00000320],ecx
// ---------- DONE INJECTING  ----------
2BD2A493: 8B 45 08                - mov eax,[ebp+08]
2BD2A496: 8B 40 60                - mov eax,[eax+60]
2BD2A499: 85 C0                   - test eax,eax
2BD2A49B: 74 30                   - je 2BD2A4CD
2BD2A49D: 8B 4D 08                - mov ecx,[ebp+08]
2BD2A4A0: 8B 81 20030000          - mov eax,[ecx+00000320]
2BD2A4A6: 8B 49 60                - mov ecx,[ecx+60]
2BD2A4A9: 8B 89 20030000          - mov ecx,[ecx+00000320]
2BD2A4AF: 83 C1 05                - add ecx,05
2BD2A4B2: 3B C1                   - cmp eax,ecx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>55</ID>
          <Description>"PlayerSpeedMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>PlayerSpeedMultiplier</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"AISpeedMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>PlayerSpeedMultiplier+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pEnergy</Name>
      <Address>02A00000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_ENERGY</Name>
      <Address> 2F8A3505</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAiProgression</Name>
      <Address>044D0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SETAIPROGRESS</Name>
      <Address> 2BD0CE74</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDamage</Name>
      <Address>044E0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_Damage</Name>
      <Address> 2BCC1527</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInstantBuildShips</Name>
      <Address>04BB0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_BuildShipCrystal</Name>
      <Address> 2BD1BD59</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInstantBuild</Name>
      <Address>04D50000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_Build</Name>
      <Address> 2BD1BFEC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pResources</Name>
      <Address>04D60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_Resources</Name>
      <Address> 2F8C48E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pShipCounts</Name>
      <Address>04D90000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SHIPLIMIT</Name>
      <Address> 055572E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bFastReload</Name>
      <Address>04D10000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_FASTRELOAD</Name>
      <Address> 055FDB52</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>PlayerSpeedMultiplier</Name>
      <Address>04D20000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SPEED3</Name>
      <Address> 2BD2A48D</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Thanks to [b]WarStalkeR[/b] for finding that metal and crystal are 64 bit values and the displayed value * 4096.  That made finding the addresses a snap.

These scripts will take several seconds to activate since they have to AOBSCAN all game memory.

* Script: Resources - Set minimum values and the resources will be updated to those values if they are lower.  Expanding the gray 'Extra' table entry gives you direct access to the values and the pointer to the resources structure.  The values for metal and crystal here are as they are stored in the game, 64 bit values that are the numbers you see in game multiplied by 4096.

* Script: Energy - Set Minimum Energy value and you can keep building ships/structures without building more matter converters.

* Script: Instant Build - Set bInstantBuild to 1 to enable instant build.  This completes building tasks immediately by updating the amounts of metal and crystal used to build the item to the required amount found in a linked structure.

* Script: Ship Building - Same as above, but works for building all kinds of ships

* Script: Damage (god + one hit kill) - Set bGodMode to 1 and your ships and stations won't take damage.  Set bOneHitKill to 1 and enemies will die with one hit.

* Script: AI Progress - The AI Progress level won't increase (at least when destroying command stations), but you can still get reduction by destroying data centers

* Script: Fast Reload - Set bFastReload to 1 and the effective reload time of all of your ships will be 1 second although it won't be reflected in the tooltip.  Set bSlowEnemyReload to 1 and enemies will take 127 seconds to reload.

* Script: Ship Counts - Set bIgnoreShipLimit to 1 and you can create all the ships you want

* Script: Speed - Set multipliers (1.0 is 100%, 0.5 is 1/2 speed, 10 is 10x speed) for player and ai ships

**********************************************************************

If the scripts aren't enabled for you, you might have to do what is affected by the script in the game before enabling the them.  For resources you just need to let a second pass so your resources are updated.  For instant build you have to at least start building some station.  For Damage and InstantBuildShips you can just start building a ship.  For AI Progress you might have to actually do something to piss off the AI.

Resources, Energy, Ship Counts and Speed should be useable right away as they are executed at least every game second.
</Comments>
</CheatTable>
