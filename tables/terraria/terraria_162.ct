<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Infinite Jetpack and Wings"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(Jetpack)
registersymbol(Jetpack)
aobscan(aobJetpack, FF 88 ?? ?? ?? ?? 8B 85 ?? ?? ?? ?? 83 B8 ?? ?? ?? ?? 04)

newmem: //this is allocated memory, you have read,write,execute access
sub [eax+000000D0],0

originalcode:
//dec [eax+000000D0]

exit:
jmp returnhere

aobJetpack:
Jetpack:
jmp newmem
nop
returnhere:


[DISABLE]
dealloc(newmem)
Jetpack:
dec [eax+000000D0]
//Alt: db FF 88 D0 00 00 00
unregistersymbol(Jetpack)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Infinite mana"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(mana)
registersymbol(mana)
aobscan(aobmana, 29 90 ?? ?? ?? ?? E9 ?? ?? ?? ?? 8B 85 ?? ?? ?? ?? 80 B8 ?? ?? ?? ?? 00)

newmem:
sub [eax+000001F4],0

originalcode:
//sub [eax+000001F4],edx

exit:
jmp returnhere

aobmana:
mana:
jmp newmem
nop
returnhere:


[DISABLE]
dealloc(newmem)
mana:
sub [eax+000001F4],edx
//Alt: db 29 90 F4 01 00 00
unregistersymbol(mana)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Fast Mana Regen"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(manar)
registersymbol(manar)
aobscan(aobmanar, FF 80 ?? ?? ?? ?? B8 ?? ?? ?? ?? 25 ?? ?? ?? ?? 89 85 ?? ?? ?? ?? 8B 85 ?? ?? ?? ??)

newmem:
add [eax+000001F4],#50

originalcode:
//inc [eax+000001F4]

exit:
jmp returnhere

aobmanar:
manar:
jmp newmem
nop
returnhere:


[DISABLE]
dealloc(newmem)
manar:
inc [eax+000001F4]
//Alt: db FF 80 F4 01 00 00
unregistersymbol(manar)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Infinite Items (Building)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2013-10-02
  Author : Nathan

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(INJECT,FC FF FF FF 48 44 8B 85 8C F2 FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  sub [eax+44],0
  mov eax,[ebp-00000D74]
  jmp return

INJECT+03:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT+03:
  db FF 48 44 8B 85 8C F2 FF FF

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C5E4E67

0C5E4E39: 8B 40 3C              -  mov eax,[eax+3C]
0C5E4E3C: 8B 95 8C F2 FF FF     -  mov edx,[ebp-00000D74]
0C5E4E42: 8B 92 28 01 00 00     -  mov edx,[edx+00000128]
0C5E4E48: 3B 50 04              -  cmp edx,[eax+04]
0C5E4E4B: 0F 83 5A 01 00 00     -  jae 0C5E4FAB
0C5E4E51: 8B 7C 90 0C           -  mov edi,[eax+edx*4+0C]
0C5E4E55: 83 7F 44 00           -  cmp dword ptr [edi+44],00
0C5E4E59: 7E 0F                 -  jle 0C5E4E6A
0C5E4E5B: 89 BD 40 FC FF FF     -  mov [ebp-000003C0],edi
0C5E4E61: 8B 85 40 FC FF FF     -  mov eax,[ebp-000003C0]
// ---------- INJECTING HERE ----------
0C5E4E67: FF 48 44              -  dec [eax+44]
0C5E4E6A: 8B 85 8C F2 FF FF     -  mov eax,[ebp-00000D74]
// ---------- DONE INJECTING  ----------
0C5E4E70: 8B 40 3C              -  mov eax,[eax+3C]
0C5E4E73: 8B 95 8C F2 FF FF     -  mov edx,[ebp-00000D74]
0C5E4E79: 8B 92 28 01 00 00     -  mov edx,[edx+00000128]
0C5E4E7F: 3B 50 04              -  cmp edx,[eax+04]
0C5E4E82: 0F 83 23 01 00 00     -  jae 0C5E4FAB
0C5E4E88: 8B 7C 90 0C           -  mov edi,[eax+edx*4+0C]
0C5E4E8C: 83 7F 44 00           -  cmp dword ptr [edi+44],00
0C5E4E90: 7F 18                 -  jg 0C5E4EAA
0C5E4E92: 8B 85 8C F2 FF FF     -  mov eax,[ebp-00000D74]
0C5E4E98: 8B 80 2C 01 00 00     -  mov eax,[eax+0000012C]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Infinite Items (Crafting)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2013-10-02
  Author : Nathan

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(craft,29 59 44 33 DB) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  sub [ecx+44],0
  xor ebx,ebx
  jmp return

craft:
  jmp code
return:
registersymbol(craft)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
craft:
  db 29 59 44 33 DB

unregistersymbol(craft)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0BA14E7B

0BA14E57: 3B 50 04                       -  cmp edx,[eax+04]
0BA14E5A: 0F 83 AE 00 00 00              -  jae 0BA14F0E
0BA14E60: 8B 44 90 0C                    -  mov eax,[eax+edx*4+0C]
0BA14E64: 8B 70 3C                       -  mov esi,[eax+3C]
0BA14E67: 3B 7E 04                       -  cmp edi,[esi+04]
0BA14E6A: 0F 83 9E 00 00 00              -  jae 0BA14F0E
0BA14E70: 8B 4C BE 0C                    -  mov ecx,[esi+edi*4+0C]
0BA14E74: 8B 41 44                       -  mov eax,[ecx+44]
0BA14E77: 3B C3                          -  cmp eax,ebx
0BA14E79: 7E 07                          -  jle 0BA14E82
// ---------- INJECTING HERE ----------
0BA14E7B: 29 59 44                       -  sub [ecx+44],ebx
0BA14E7E: 33 DB                          -  xor ebx,ebx
// ---------- DONE INJECTING  ----------
0BA14E80: EB 5F                          -  jmp 0BA14EE1
0BA14E82: 2B D8                          -  sub ebx,eax
0BA14E84: B9 DC AA 2D 02                 -  mov ecx,022DAADC
0BA14E89: E8 46 D2 B7 F4                 -  call 005920D4
0BA14E8E: C7 40 20 FF FF FF FF           -  mov [eax+20],FFFFFFFF
0BA14E95: C7 40 24 FF FF FF FF           -  mov [eax+24],FFFFFFFF
0BA14E9C: C7 40 5C FF FF FF FF           -  mov [eax+5C],FFFFFFFF
0BA14EA3: C7 40 60 FF FF FF FF           -  mov [eax+60],FFFFFFFF
0BA14EAA: D9 E8                          -  fld1 
0BA14EAC: D9 58 7C                       -  fstp dword ptr [eax+7C]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Infinite Items (Ammo)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2013-10-02
  Author : Nathan

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(ammo,FF 48 44 8B 85 04 ?? ?? ??) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  sub [eax+44],0
  mov eax,[ebp-000000FC]
  jmp return

ammo:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(ammo)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
ammo:
  db FF 48 44 8B 85 04 FF FF FF

unregistersymbol(ammo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0E9D680C

0E9D67DA: 8B 80 2C 01 00 00              -  mov eax,[eax+0000012C]
0E9D67E0: 8B 95 8C F2 FF FF              -  mov edx,[ebp-00000D74]
0E9D67E6: 8B 92 30 01 00 00              -  mov edx,[edx+00000130]
0E9D67EC: 83 C2 FB                       -  add edx,-05
0E9D67EF: 3B C2                          -  cmp eax,edx
0E9D67F1: 7D 0A                          -  jnl 0E9D67FD
0E9D67F3: C7 85 F4 FE FF FF 01 00 00 00  -  mov [ebp-0000010C],00000001
0E9D67FD: 83 BD F4 FE FF FF 00           -  cmp dword ptr [ebp-0000010C],00
0E9D6804: 75 4D                          -  jne 0E9D6853
0E9D6806: 8B 85 04 FF FF FF              -  mov eax,[ebp-000000FC]
// ---------- INJECTING HERE ----------
0E9D680C: FF 48 44                       -  dec [eax+44]
0E9D680F: 8B 85 04 FF FF FF              -  mov eax,[ebp-000000FC]
// ---------- DONE INJECTING  ----------
0E9D6815: 83 78 44 00                    -  cmp dword ptr [eax+44],00
0E9D6819: 7F 38                          -  jg 0E9D6853
0E9D681B: 8B 85 04 FF FF FF              -  mov eax,[ebp-000000FC]
0E9D6821: C6 80 DA 00 00 00 00           -  mov byte ptr [eax+000000DA],00
0E9D6828: 8B 05 34 21 FD 04              -  mov eax,[04FD2134]
0E9D682E: 8B 95 04 FF FF FF              -  mov edx,[ebp-000000FC]
0E9D6834: 8D 52 04                       -  lea edx,[edx+04]
0E9D6837: E8 B4 B4 4B 5B                 -  call clr.dll+1CF0
0E9D683C: 8B 85 04 FF FF FF              -  mov eax,[ebp-000000FC]
0E9D6842: 33 D2                          -  xor edx,edx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Item Pickup does not increase Item Count"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2013-10-02
  Author : Nathan

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(incr,01 41 44 8B 45 E0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [ecx+44],0
  mov eax,[ebp-20]
  jmp return

incr:
  jmp code
  nop
return:
registersymbol(incr)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
incr:
  db 01 41 44 8B 45 E0

unregistersymbol(incr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0BFBC66C

0BFBC649: 0F 83 07 03 00 00              -  jae 0BFBC956
0BFBC64F: 8B 4C 99 0C                    -  mov ecx,[ecx+ebx*4+0C]
0BFBC653: 8B 51 44                       -  mov edx,[ecx+44]
0BFBC656: 89 55 E4                       -  mov [ebp-1C],edx
0BFBC659: 03 C2                          -  add eax,edx
0BFBC65B: 8B 79 48                       -  mov edi,[ecx+48]
0BFBC65E: 3B C7                          -  cmp eax,edi
0BFBC660: 0F 8F 8A 00 00 00              -  jg 0BFBC6F0
0BFBC666: 8B 45 E0                       -  mov eax,[ebp-20]
0BFBC669: 8B 40 44                       -  mov eax,[eax+44]
// ---------- INJECTING HERE ----------
0BFBC66C: 01 41 44                       -  add [ecx+44],eax
0BFBC66F: 8B 45 E0                       -  mov eax,[ebp-20]
// ---------- DONE INJECTING  ----------
0BFBC672: 8B 50 44                       -  mov edx,[eax+44]
0BFBC675: 8B 4D 08                       -  mov ecx,[ebp+08]
0BFBC678: FF 15 50 2E 84 02              -  call dword ptr [02842E50]
0BFBC67E: 8B CE                          -  mov ecx,esi
0BFBC680: 8B D3                          -  mov edx,ebx
0BFBC682: FF 15 98 47 84 02              -  call dword ptr [02844798]
0BFBC688: 8B 45 F0                       -  mov eax,[ebp-10]
0BFBC68B: 3B 05 40 38 73 00              -  cmp eax,[00733840]
0BFBC691: 75 05                          -  jne 0BFBC698
0BFBC693: E8 08 9E B6 00                 -  call 0CB264A0
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
