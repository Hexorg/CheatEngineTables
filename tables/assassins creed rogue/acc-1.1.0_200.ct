<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>194</ID>
      <Description>"[DebugMenu]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc( pHook, 256, ACC.exe )
alloc( pContext, 4, ACC.exe )
registersymbol( pContext )
label( back )

pContext:
dd 0

aobscanmodule( pBase_AOB, ACC.exe, 488BC4488958084889681048897018488978204154415541564881EC800000004C8B )
label( pBase )
registersymbol( pBase )
pBase_AOB:
pBase:
jmp pHook
nop
nop
back:

pHook:
mov [pContext],rcx
mov rax,rsp
mov [rax+08],rbx
jmp back

[DISABLE]

pBase:
mov rax,rsp
mov [rax+08],rbx

unregistersymbol( pBase )
unregistersymbol( pContext )
dealloc( pContext )
dealloc( pHook )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>209</ID>
          <Description>"pBase"</Description>
          <LastState Value="13391BE9" Activated="0" RealAddress="141EBC6E0"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pBase</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>195</ID>
              <Description>"pContext"</Description>
              <LastState Value="2B4DD2A0" Activated="0" RealAddress="13FFF0100"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pContext</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>196</ID>
          <Description>"Cheat Handler"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 4096 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
alloc( KeyHandlerOff, 4 )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( KeyHandlerThread_loop )
label( ExecuteFunction )
label( positive )

// Functions list start

label( IncreaseSpawnedHorseJumpLength )
label( DecreaseSpawnedHorseJumpLength )
label( NavalSinkPlayerShip )
label( OnlineIncrementKillCount )
label( ResetConflict )
label( IncreaseNotoriety )
label( DecreaseNotoriety )
label( IncreaseWantedLevel )
label( DecreaseWantedLevel )
label( UnfogCurrentMap )
label( NavalShowSpeedInfo )
label( NavalIgnoreWindDirection )
label( ChangeDebugDudeType )
label( ToggleHud )
label( SetMaxAssassinRank )
label( TogglePlayerVanish )
label( EnableAssassinCollisionWithTriggerZones )
label( NavalCrewMode )
label( NavalRaiseBeaufortScale )
label( NavalLowerBeaufortScale )
label( LockAllWorldUpgrades )
label( SpawnFollowDude )
label( SpawnFightDude )
label( SpawnShipDude )
label( SpawnRedBallDude )
label( SpawnStillDude )
label( NavalDamagePlayerShip )
label( ToggleFullProgressTrackerUnlock )
label( UnlockAllWorldUpgrades )
label( UnlockAndGainAllWorldUpgrades )
label( InfiniteBreathMode )
label( FightCheatMode )
label( FightActionsPacing )
label( FightDecisionsPacing )
label( FightDecisionsPacingStreak )
label( FightActionsPacingStreak )
label( ComboKillOverride )
label( RangedComboKillOverride )
label( ForceSingleHiddenBlade )
label( IncrementAllEquippedFirearmsDamageRating )
label( IncrementAllEquippedFirearmsIncapacitateRating )
label( DisableGroupPhysics )
label( NavalAddCrew )
label( NavalRemoveCrew )
//label( NukeEnemies )
//label( NukeAllies )
label( NukeYourself )
label( RefillAllEquipment )
label( ToggleCrowdAirAssassination )
label( NavalIncapacitateNearbyEnemyShips )
label( NavalIncapacitateNearbyAllyShips )
label( Invisible )
label( RefillPlayerHealth )
label( NavalInvisible )
label( GodMode )

// end of Functions list

KeyHandlerOff:
dq 0

KeyHandlerThread:
sub rsp,28

KeyHandlerThread_loop:
mov rcx,0a
call Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

mov rcx,60 // VK_NUMPAD0
call GetAsyncKeyState
test ax,ax
jne TogglePlayerVanish

mov rcx,6E // VK_DECIMAL
call GetAsyncKeyState
test ax,ax
jne GodMode

mov rcx,61 // VK_NUMPAD1
call GetAsyncKeyState
test ax,ax
jne RefillAllEquipment

mov rcx,62 // VK_NUMPAD2
call GetAsyncKeyState
test ax,ax
jne Invisible

mov rcx,63 // VK_NUMPAD3
call GetAsyncKeyState
test ax,ax
jne NavalInvisible

mov rcx,64 // VK_NUMPAD4
call GetAsyncKeyState
test ax,ax
jne InfiniteBreathMode

mov rcx,65 // VK_NUMPAD5
call GetAsyncKeyState
test ax,ax
jne ResetConflict

mov rcx,66 // VK_NUMPAD6
call GetAsyncKeyState
test ax,ax
jne NavalIgnoreWindDirection

mov rcx,67 // VK_NUMPAD7
call GetAsyncKeyState
test ax,ax
jne IncreaseWantedLevel

mov rcx,68 // VK_NUMPAD8
call GetAsyncKeyState
test ax,ax
jne ToggleHud

mov rcx,69 // VK_NUMPAD9
call GetAsyncKeyState
test ax,ax
jne DecreaseWantedLevel

jmp KeyHandlerThread_loop

//******************************************
//*                                        *
//*          Debug Menu Functions          *
//*                                        *
//******************************************

// Refill player's health
// pseudo: Refill_PlayerHealth( 1, pContext )

RefillPlayerHealth:
mov rdi,81E
jmp ExecuteFunction

// Reset Conflict
// pseudo: Reset_Conflict( 1, pContext )

ResetConflict:
mov rdi,8D5
jmp ExecuteFunction

// Refill All Equipment
// pseudo: Refill_AllEquipment( 1, pContext )

RefillAllEquipment:
mov rdi,990
jmp ExecuteFunction

// Nuke Yourself
// pseudo: Nuke_Yourself( 1, pContext )

NukeYourself:
mov rdi,A51
jmp ExecuteFunction

// Toggle Crowd Air Assassination
// pseudo: Toggle_Crowd_AirAssassination( 1, pContext )

ToggleCrowdAirAssassination:
mov rdi,BA0
jmp ExecuteFunction

// Change Debug Dude Type
// pseudo: Change_Debug_DudeType( 1, pContext )

ChangeDebugDudeType:
mov rdi,C44
jmp ExecuteFunction

// Spawn Follow Dude
// pseudo: Spawn_FollowDude( 1, pContext )

SpawnFollowDude:
mov rdi,D05
jmp ExecuteFunction

// Spawn RedBall Dude
// pseudo: Spawn_RedBallDude( 1, pContext )

SpawnRedBallDude:
mov rdi,DC6
jmp ExecuteFunction

// Spawn Still Dude
// pseudo: Spawn_StillDude( 1, pContext )

SpawnStillDude:
mov rdi,E87
jmp ExecuteFunction

// Spawn Fight Dude
// pseudo: Spawn_FightDude( 1, pContext )

SpawnFightDude:
mov rdi,F48
jmp ExecuteFunction

// Spawn Ship Dude
// pseudo: Spawn_ShipDude( 1, pContext )

SpawnShipDude:
mov rdi,1009
jmp ExecuteFunction

// Increase JumpLength for Spawned Debug Horse
// pseudo: Increase_JumpLength( 1 )

IncreaseSpawnedHorseJumpLength:
mov rdi,10CE
jmp ExecuteFunction

// Decrease JumpLength for Spawned Debug Horse
// pseudo: Decrease_JumpLength( 1 )

DecreaseSpawnedHorseJumpLength:
mov rdi,1193
jmp ExecuteFunction

// Decrease Notoriety
// pseudo: Decrease_Notoriety( 1, pContext )

DecreaseNotoriety:
mov rdi,1254
jmp ExecuteFunction

// Increase Notoriety
// pseudo: Increase_Notoriety( 1, pContext )

IncreaseNotoriety:
mov rdi,1315
jmp ExecuteFunction

// Decrease Wanted Level
// pseudo: Decrease_WantedLevel( 1, pContext )

DecreaseWantedLevel:
mov rdi,13D6
jmp ExecuteFunction

// Increase Wanted Level
// pseudo: Increase_WantedLevel( 1, pContext )

IncreaseWantedLevel:
mov rdi,1497
jmp ExecuteFunction

// [Blend Action] Toggle Player Vanish :
// pseudo: Toggle_PlayerVanish( 1, pContext )

TogglePlayerVanish:
mov rdi,1558
jmp ExecuteFunction

// Unfog current map
// pseudo: Unfog_CurrentMap( 1, pContext )

UnfogCurrentMap:
mov rdi,1619
jmp ExecuteFunction

// Unlock All World Upgrades
// pseudo: Unlock_All_WorldUpgrades( 1, pContext )

UnlockAllWorldUpgrades:
mov rdi,179B
jmp ExecuteFunction

// Toggle Full Progress Tracker Unlock
// pseudo: Toggle_Full_ProgressTrackerUnlock( 1, pContext )

ToggleFullProgressTrackerUnlock:
mov rdi,19DE
jmp ExecuteFunction

// Unlock And Gain All World Upgrades
// pseudo: Unlock_And_GainAllWorldUpgrades( 1, pContext )

UnlockAndGainAllWorldUpgrades:
mov rdi,1A9F
jmp ExecuteFunction

// Lock All World Upgrades
// pseudo: Lock_All_WorldUpgrades( 1, pContext )

LockAllWorldUpgrades:
mov rdi,1B60
jmp ExecuteFunction

// ***DISABLED***Set Max Assassin Rank (All Abilities):
// pseudo: Set_Max_AssassinRank( 1, pContext )

SetMaxAssassinRank:
mov rdi,1C21
jmp ExecuteFunction

// Invisible :
// pseudo: Invisible( 1, pContext )

Invisible:
mov rdi,1CDC
jmp ExecuteFunction

// God Mode :
// pseudo: God_Mode( 1, pContext )

GodMode:
mov rdi,1D99
jmp ExecuteFunction

// Infinite Breath Mode :
// pseudo: Infinite_BreathMode( 1, pContext )

InfiniteBreathMode:
mov rdi,1E54
jmp ExecuteFunction

// Enable assassin collision with trigger zones :
// pseudo: Enable_Assassin_CollisionWithTriggerZones( 1, pContext )

EnableAssassinCollisionWithTriggerZones:
mov rdi,1EDE
jmp ExecuteFunction

// ToggleHud
// pseudo: Toggle_HUD( 1, pContext )

ToggleHud:
mov rdi,203F
jmp ExecuteFunction

// [Online] Increment kill count
// pseudo: Increment_KillCount( 1 )

OnlineIncrementKillCount:
mov rdi,2263
jmp ExecuteFunction

// Naval Invisible:
// pseudo: Naval_Invisible( 1, pContext )

NavalInvisible:
mov rdi,22D8
jmp ExecuteFunction

// Naval Incapacitate nearby Enemy ships
// pseudo: Naval_Incapacitate_NearbyEnemyShips( 1, pContext )

NavalIncapacitateNearbyEnemyShips:
mov rdi,2357
jmp ExecuteFunction

// Naval Incapacitate nearby Ally ships
// pseudo: Naval_Incapacitate_NearbyAllyShips( 1, pContext )

NavalIncapacitateNearbyAllyShips:
mov rdi,23D6
jmp ExecuteFunction

// Naval Sink player ship
// pseudo: Naval_Sink_PlayerShip( 1, pContext )

NavalSinkPlayerShip:
mov rdi,244A
jmp ExecuteFunction

// Naval Damage player ship
// pseudo: Naval_Damage_PlayerShip( 1, pContext )

NavalDamagePlayerShip:
mov rdi,24C1
jmp ExecuteFunction

// Naval Show Speed Info
// pseudo: Naval_Show_SpeedInfo( 1, pContext )

NavalShowSpeedInfo:
mov rdi,2538
jmp ExecuteFunction

// Naval Ignore Wind Direction
// pseudo: Naval_Ignore_WindDirection( 1, pContext )

NavalIgnoreWindDirection:
mov rdi,25AD
jmp ExecuteFunction

// Naval Raise Beaufort Scale :
// pseudo: Naval_Raise_BeaufortScale( 1, pContext )

NavalRaiseBeaufortScale:
mov rdi,2624
jmp ExecuteFunction

// Naval Lower Beaufort Scale :
// pseudo: Naval_Lower_BeaufortScale( 1, pContext )

NavalLowerBeaufortScale:
mov rdi,269A
jmp ExecuteFunction

// Naval Crew Mode :
// pseudo: Naval_CrewMode( 1, pContext )

NavalCrewMode:
mov rdi,271C
jmp ExecuteFunction

// Naval Add Crew :
// pseudo: Naval_AddCrew( 1, pContext )

NavalAddCrew:
mov rdi,2790
jmp ExecuteFunction

// Naval Remove Crew :
// pseudo: Naval_RemoveCrew( 1, pContext )

NavalRemoveCrew:
mov rdi,2807
jmp ExecuteFunction

// Fight Cheat Mode :
// pseudo: Fight_CheatMode( 1, pContext )

FightCheatMode:
mov rdi,288F
jmp ExecuteFunction

// [Fight Tests] Fight Actions pacing :
// pseudo: Fight_ActionsPacing( 1, pContext )

FightActionsPacing:
mov rdi,2903
jmp ExecuteFunction

// [Fight Tests] Fight Decisions pacing :
// pseudo: Fight_DecisionsPacing( 1, pContext )

FightDecisionsPacing:
mov rdi,2979
jmp ExecuteFunction

// [Fight Tests] Fight Decisions pacing (Streak) :
// pseudo: Fight_Decisions_PacingStreak( 1, pContext )

FightDecisionsPacingStreak:
mov rdi,29ED
jmp ExecuteFunction

// [Fight Tests] Fight Actions pacing (Streak) :
// pseudo: Fight_Actions_PacingStreak( 1, pContext )

FightActionsPacingStreak:
mov rdi,2A63
jmp ExecuteFunction

// [Fight Tests] Combo Kill Override :
// pseudo: Combo_KillOverride( 1, pContext )

ComboKillOverride:
mov rdi,2AD9
jmp ExecuteFunction

// [Fight Tests] Ranged Combo Kill Override :
// pseudo: Ranged_Combo_KillOverride( 1, pContext )

RangedComboKillOverride:
mov rdi,2B4F
jmp ExecuteFunction

// [Fight Tests] Force Single Hidden Blade :
// pseudo: Force_Single_HiddenBlade( 1, pContext )

ForceSingleHiddenBlade:
mov rdi,2BC5
jmp ExecuteFunction

// [Fight Tests] Disable Group Physics :
// pseudo: Disable_GroupPhysics( 1, pContext )

DisableGroupPhysics:
mov rdi,2C3B
jmp ExecuteFunction

// Increment All Equipped Firearms Damage Rating :
// pseudo: Increment_All_EquippedFirearmsDamageRating( 1, pContext )

IncrementAllEquippedFirearmsDamageRating:
mov rdi,2CBC
jmp ExecuteFunction

// Increment All Equipped Firearms Incapacitate Rating :
// pseudo: Increment_All_EquippedFirearmsIncapacitateRating( 1, pContext )

IncrementAllEquippedFirearmsIncapacitateRating:
mov rdi,2D3B

ExecuteFunction:
mov rdx,pContext
mov rdx,[rdx]
mov rsi,pBase
add rsi,rdi
xor rdi,rdi
cmp dword [esi+3],80000000 // thanks to Dark Byte for this --
jb short positive
mov rdi,FFFFFFFF00000000
positive:
mov ecx,[rsi+3]
add rdi,rcx // -- end of thanks :)
add rsi,edi
add rsi,7
mov rcx,1
call rsi
mov rcx,C8
call Sleep
jmp KeyHandlerThread_loop

ExitKeyHandler:
add rsp,28
mov [KeyHandlerOff],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( KeyHandlerOff )
dealloc( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
dealloc( KeyHandlerThread )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"[Cheats]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( DisableDisabler_AOB, ACC.exe, 84C00F94C084C9 )
label( DisableDisabler )
registersymbol( DisableDisabler )
DisableDisabler_AOB+2:
DisableDisabler:
xor al,al
nop

[DISABLE]

DisableDisabler:
sete al

unregistersymbol( DisableDisabler )

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"[Cheats] (0 - locked; 1 - unlocked)"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>0</ID>
              <Description>"[1] Immortal"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44428"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>1F8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"[2] Cornucopia"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44448"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>218</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"[3] Fairy Gunpowder"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44468"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>238</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"[4] Gray Men"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44488"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>258</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"[5] Master of the wind"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E444A8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>278</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"[6] Burn Them!"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E444C8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>298</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"[7] Timeless"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E444E8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>2B8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"[8] Lord of Thunder"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44508"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>2D8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"[9] Big Mouth"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44528"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>2F8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"[10] Hunted"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44548"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>318</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"[11] Endurance Challenge"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44568"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>338</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>3</ID>
              <Description>"[12] Wanted"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E44588"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>358</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2</ID>
              <Description>"[13] Veterans"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E445A8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>378</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1</ID>
              <Description>"[14] Cailleach's Gift"</Description>
              <LastState Value="0" Activated="0" RealAddress="15E445C8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>1432F87B8</Address>
              <Offsets>
                <Offset>398</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>211</ID>
          <Description>"Cheat Handler"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 4096 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
alloc( KeyHandlerOff, 4 )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( KeyHandlerThread_loop )
label( KeyHandlerSleep )

// Functions list start

label( ToggleHud )

// end of Functions list

KeyHandlerOff:
dd 0

KeyHandlerThread:
sub rsp,28

KeyHandlerThread_loop:
mov rcx,0a
call kernel32.Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

mov rcx,68 // VK_NUMPAD8
call GetAsyncKeyState
test ax,ax
jne ToggleHud

jmp KeyHandlerThread_loop

//******************************************
//*                                        *
//*          Debug Menu Functions          *
//*                                        *
//******************************************

// ToggleHud
// pseudo: Toggle_HUD( 1, pContext )

ToggleHud:
mov rdx,pContext
mov rdx,[rdx]
mov rcx,1
mov rsi,pBase+203F
xor rdi,rdi
mov edi,[rsi+3]
add rsi,edi
add rsi,7
xor rdi,rdi
add rdi,10000000
shl rdi,44
sub rsi,rdi
call rsi
jmp KeyHandlerSleep

KeyHandlerSleep:
mov rcx,C8
call kernel32.Sleep
jmp KeyHandlerThread_loop

ExitKeyHandler:
add rsp,28
mov [KeyHandlerOff],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( KeyHandlerOff )
dealloc( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
dealloc( KeyHandlerThread )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>210</ID>
          <Description>"CreateThread x64"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( TextBlock, 256 )
registersymbol( TextBlock )
alloc( KeyHandlerThread, 1024 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
alloc( KeyHandlerOff, 4 )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( KeyHandlerThread_loop )

label( szCaption )
label( szText )
label( ToggleText )

TextBlock:
szCaption:
db 'Message',0
szText:
db 'This should pop-up on key press!',0

KeyHandlerThread+500:
KeyHandlerOff:
dd 0

KeyHandlerThread:
sub rsp,28

KeyHandlerThread_loop:
mov rcx,A
call Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

  mov rcx,6F // NUM_DIVIDE
  call GetAsyncKeyState
  test ax,ax
  jne short ToggleText

      jmp short KeyHandlerThread_loop

  ToggleText:
  xor r9d,r9d // MB_OK
  mov r8,szCaption
  mov rdx,szText
  xor rcx,rcx // hWnd
  call MessageBoxA
  mov rcx,C8
  call Sleep
  jmp KeyHandlerThread_loop

ExitKeyHandler:
add rsp,28
mov [KeyHandlerOff],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

dealloc( KeyHandlerOff )
dealloc( KeyHandlerThread )
dealloc( TextBlock )
unregistersymbol( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pBase</Name>
      <Address>141EBC6E0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
