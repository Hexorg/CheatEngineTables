<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"HP"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"CaveStory+.exe"+C4054</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Weapon 1 Power"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"CaveStory+.exe"+B4418</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Air"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"CaveStory+.exe"+C4064</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"X Position"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>CaveStory+.exe+C3FDC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Y Position"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"CaveStory+.exe"+C3FE0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Ground Type"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>"CaveStory+.exe"+C3FC4</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Booster Fuel"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"CaveStory+.exe"+C4070</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Infinite Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//Comment out the reduction.
//sub [01454054],cx

exit:
jmp returnhere

"CaveStory+.exe"+4CB43:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4CB43:
sub [01454054],cx
//Alt: db 66 29 0D 54 40 45 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Invulnerable"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
//push ebp
mov ebp,esp
sub esp,08

exit:
jmp returnhere

"CaveStory+.exe"+4CAA0:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4CAA0:
push ebp
mov ebp,esp
sub esp,08
//Alt: db 55 8B EC 83 EC 08
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Infinite Air"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//dec eax
mov [CaveStory+.exe+C4064],eax

exit:
jmp returnhere

"CaveStory+.exe"+4A72E:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4A72E:
dec eax
mov [CaveStory+.exe+C4064],eax
//Alt: db 48 A3 64 40 93 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"No Power Loss"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
jmp CaveStory+.exe+4CB82
sub [esi+CaveStory+.exe+B4418],ecx

exit:
jmp returnhere

"CaveStory+.exe"+4CB6E:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4CB6E:
je CaveStory+.exe+4CB78
sub [esi+CaveStory+.exe+B4418],ecx
//Alt: db 74 08 29 8E 18 44 A0 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Easy Weapon Level"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
add [eax+CaveStory+.exe+B4418],esp

exit:
jmp returnhere

"CaveStory+.exe"+4C927:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4C927:
add [eax+CaveStory+.exe+B4418],edi
//Alt: db 01 B8 18 44 41 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"No Ammo Usage"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//dec ecx
mov [eax+CaveStory+.exe+B4420],ecx

exit:
jmp returnhere

"CaveStory+.exe"+10B72:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+10B72:
dec ecx
mov [eax+CaveStory+.exe+B4420],ecx
//Alt: db 49 89 88 20 44 41 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Infinite Booster"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//mov [CaveStory+.exe+C4070],edi

exit:
jmp returnhere

"CaveStory+.exe"+49C1F:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+49C1F:
mov [CaveStory+.exe+C4070],edi
//Alt: db 89 3D 70 40 42 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Can Always Jump"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//Normally puts 0 to mark air, instead put 8 to mark flat ground.
mov [CaveStory+.exe+C3FC4],00000008

exit:
jmp returnhere

"CaveStory+.exe"+2C071:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+2C071:
mov [CaveStory+.exe+C3FC4],00000000
//Alt: db C7 05 C4 3F A1 00 00 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Reverse Gravity"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
sub [CaveStory+.exe+C3FE0],ebx

exit:
jmp returnhere

"CaveStory+.exe"+4A3C6:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"CaveStory+.exe"+4A3C6:
add [CaveStory+.exe+C3FE0],ebx
//Alt: db 01 1D E0 3F 20 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=6.3
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end
addresslist=getAddressList()
memrec2=addresslist_getMemoryRecordByID(addresslist,2)
memrec10=addresslist_getMemoryRecordByID(addresslist,10)
memrec22=addresslist_getMemoryRecordByID(addresslist,22)
memrec21=addresslist_getMemoryRecordByID(addresslist,21)
memrec16=addresslist_getMemoryRecordByID(addresslist,16)
memrec15=addresslist_getMemoryRecordByID(addresslist,15)
memrec19=addresslist_getMemoryRecordByID(addresslist,19)
memrec20=addresslist_getMemoryRecordByID(addresslist,20)

memrec2_hotkey0=memoryrecord_getHotkeyByID(memrec2,0)
memrec10_hotkey0=memoryrecord_getHotkeyByID(memrec10,0)
memrec22_hotkey0=memoryrecord_getHotkeyByID(memrec22,0)
memrec21_hotkey0=memoryrecord_getHotkeyByID(memrec21,0)
memrec16_hotkey0=memoryrecord_getHotkeyByID(memrec16,0)
memrec15_hotkey0=memoryrecord_getHotkeyByID(memrec15,0)
memrec19_hotkey0=memoryrecord_getHotkeyByID(memrec19,0)
memrec20_hotkey0=memoryrecord_getHotkeyByID(memrec20,0)

function onPostHotkey0(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT0, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec2_hotkey0,onPostHotkey0)

function onPostHotkey1(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT1, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec10_hotkey0,onPostHotkey1)

function onPostHotkey2(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT2, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec22_hotkey0,onPostHotkey2)

function onPostHotkey3(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT3, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec21_hotkey0,onPostHotkey3)

function onPostHotkey4(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT4, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec16_hotkey0,onPostHotkey4)

function onPostHotkey5(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT5, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec15_hotkey0,onPostHotkey5)

function onPostHotkey6(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT6, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec19_hotkey0,onPostHotkey6)

function onPostHotkey7(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT7, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec20_hotkey0,onPostHotkey7)

control_setVisible(CETrainer_SEPERATOR, false)

strings_add(getAutoAttachList(), "CaveStory+.exe")
gBeepOnAction=false
form_show(CETrainer)
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[Build 3 or something for Marcel, 
because I'm too lazy to test shit.

~Rydian]]

function CloseClick()
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--
</LuaScript>
</CheatTable>
