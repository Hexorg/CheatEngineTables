<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>59</ID>
      <Description>"Infinite Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [ecx+00000904],(float)999999

originalcode:
fdivr dword ptr [ecx+00000904]

exit:
jmp returnhere

"rfg.exe"+422D9D:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+422D9D:
fdivr dword ptr [ecx+00000904]
//Alt: db D8 B9 04 09 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Infinite Clip"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//add dword ptr [ebx+00000204],FF

exit:
jmp returnhere

"rfg.exe"+32DFE5:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+32DFE5:
add dword ptr [ebx+00000204],FF
//Alt: db 83 83 04 02 00 00 FF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Infinite Bombs"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov [ebx+00000208],18

exit:
jmp returnhere

"rfg.exe"+32BCF2:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+32BCF2:
mov [ebx+00000208],eax
//Alt: db 89 83 08 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"Infinite Car Health (do not use with carmageddon)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
originalcode:
sub eax,[ecx+00003D10]
cmp byte ptr [ecx+00004031],1
jne exit
mov [ecx+00003D10],#99919
jmp exit

exit:
jmp returnhere

"rfg.exe"+28F8BD:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+28F8BD:
sub eax,[ecx+00003D10]
//Alt: db 2B 81 10 3D 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>67</ID>
      <Description>"CARMAGEDDON!"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(set_inf_health)

alloc(edi_add,4)
registersymbol(edi_add)

newmem: //this is allocated memory, you have read,write,execute access
//cmp [edi+00003d10],#99919
//mov [edi_add],edi
cmp byte ptr [edi+00004031],1
je set_inf_health
mov [edi+00003D10],1
jmp originalcode

set_inf_health:
mov [edi_add],edi
mov [edi+00003D10],#9999 //added code to make the car im in infinite
jmp originalcode

originalcode:
mov ecx,[edi+00003D10]

exit:
jmp returnhere

"rfg.exe"+287C06:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(edi_add)
"rfg.exe"+287C06:
mov ecx,[edi+00003D10]
//Alt: db 8B 8F 10 3D 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"One Shot Kill (explosions will kill you dead)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)
label(enemy_exit)


alloc(zero_space,4)
registersymbol(zero_space)

newmem:
test esi,esi //enemy check
jne enemy_exit
jmp exit

enemy_exit:
fld dword ptr [zero_space]
fst dword ptr [ebx+00000904]
jmp exit


exit:
jmp returnhere

"rfg.exe"+3CB7A1:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(zero_space)
"rfg.exe"+3CB7A1:
fld dword ptr [esp+0C]
fst dword ptr [ebx+00000904]
//Alt: db D9 44 24 0C D9 93 04 09 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of add dword ptr [ebx+00000204],FF</Description>
      <Address>0072DFE5</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>32DFE5</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>75</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>83</Byte>
        <Byte>04</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>BB</Byte>
        <Byte>34</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of fst dword ptr [ebx+00000904]</Description>
      <Address>007C47C2</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>3C47C2</ModuleNameOffset>
      <Before>
        <Byte>14</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>93</Byte>
        <Byte>04</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>83</Byte>
        <Byte>D0</Byte>
        <Byte>0A</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of fst dword ptr [ebx+00000904]</Description>
      <Address>007CB8FD</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>3CB8FD</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>93</Byte>
        <Byte>04</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>59</Byte>
        <Byte>F6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of fst dword ptr [ebx+00000904]</Description>
      <Address>007CB7A5</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>3CB7A5</ModuleNameOffset>
      <Before>
        <Byte>0C</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>93</Byte>
        <Byte>04</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>80</Byte>
        <Byte>3D</Byte>
        <Byte>96</Byte>
        <Byte>B5</Byte>
        <Byte>4E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [ebx+00003D10],ecx</Description>
      <Address>006913DC</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>2913DC</ModuleNameOffset>
      <Before>
        <Byte>2E</Byte>
        <Byte>05</Byte>
        <Byte>90</Byte>
        <Byte>7E</Byte>
        <Byte>06</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
        <Byte>3D</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>E8</Byte>
        <Byte>B6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jle rfg.exe+2913E2</Description>
      <Address>006913DA</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>2913DA</ModuleNameOffset>
      <Before>
        <Byte>27</Byte>
        <Byte>EC</Byte>
        <Byte>2E</Byte>
        <Byte>05</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>06</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
        <Byte>3D</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je rfg.exe+3CB78D</Description>
      <Address>007CB784</Address>
      <ModuleName>rfg.exe</ModuleName>
      <ModuleNameOffset>3CB784</ModuleNameOffset>
      <Before>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>10</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>88</Byte>
        <Byte>C0</Byte>
        <Byte>0D</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
