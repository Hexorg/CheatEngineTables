<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Inf. Health (Ctrl/Alt num1 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthAddSubA_AOB,D9 86 84 00 00 00 8B 44 24 20 D8 64 24 18)
label(healthAddSubAJmp)
registersymbol(healthAddSubAJmp)
aobscan(healthAddSubB_AOB,D9 44 24 04 D8 81 84 00 00 00 D9 91 84 00 00 00)
label(healthAddSubBJmp)
registersymbol(healthAddSubBJmp)

label(healthTP)
registersymbol(healthTP)
label(minHealth)
registersymbol(minHealth)

alloc(newmemA,128) //2kb should be enough
label(returnhereA)
label(originalcodeA)
label(exitA)

label(newmemB)
label(returnhereB)
label(originalcodeB)
label(exitB)

newmemA: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[esp+20]
fsub dword ptr [esp+18]
cmp [esp+18],0
jle exitA

fst dword ptr [healthTP]
push ecx
mov ecx,[minHealth]
cmp dword ptr [healthTP],ecx
pop ecx
jge exitA

mov dword ptr [esp+18],0
fstp dword ptr [healthTP]
fld dword ptr [esi+00000084]

originalcodeA:
//mov eax,[esp+20]
//fsub dword ptr [esp+18]

exitA:
jmp returnhereA

///

newmemB:
fld dword ptr [esp+04]
fadd dword ptr [ecx+00000084]
cmp dword ptr [esp+04],(float)0
jge exitB

fst [healthTP]
push eax
mov eax,[minHealth]
cmp [healthTP],eax
pop eax
jge exitB

fstp [healthTP]
fld dword ptr [ecx+00000084]
mov dword ptr [esp+04],(float)0

originalcodeB:
//fld dword ptr [esp+04]
//fadd dword ptr [ecx+00000084]

exitB:
jmp returnhereB

///
healthTP:
dd 0
minHealth:
dd (float)10
///

healthAddSubA_AOB+6:
healthAddSubAJmp:
jmp newmemA
nop
nop
nop
returnhereA:

healthAddSubB_AOB:
healthAddSubBJmp:
jmp newmemB
nop
nop
nop
nop
nop
returnhereB:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmemA)
healthAddSubAJmp:
db 8B 44 24 20 D8 64 24 18
//Alt: mov eax,[esp+20]
//Alt: fsub dword ptr [esp+18]
healthAddSubBJmp:
db D9 44 24 04 D8 81 84 00 00 00
//Alt: fld dword ptr [esp+04]
//Alt: fadd dword ptr [ecx+00000084]
unregistersymbol(healthAddSubAJmp)
unregistersymbol(healthAddSubBJmp)
unregistersymbol(healthTP)
unregistersymbol(minHealth)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>97</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>97</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Inf. Sanity (Ctrl/Alt num2 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(sanitySubDark_AOB,D9 86 88 00 00 00 D8 64 24 08 D9 96 88 00 00 00)
label(sanitySubDarkJmp)
registersymbol(sanitySubDarkJmp)
aobscan(sanitySubEventA_AOB,D9 86 88 00 00 00 D8 64 24 68 D9 96 88 00 00 00)
label(sanitySubEventAJmp)
registersymbol(sanitySubEventAJmp)
aobscan(sanitySubEventB_AOB,D9 44 24 04 D8 81 88 00 00 00 D9 91 88 00 00 00)
label(sanitySubEventBJmp)
registersymbol(sanitySubEventBJmp)

label(sanityTP)
registersymbol(sanityTP)
label(minSanity)
registersymbol(minSanity)

alloc(newmemD,128) //2kb should be enough
label(returnhereD)
label(originalcodeD)
label(exitD)

label(newmemEA)
label(returnhereEA)
label(originalcodeEA)
label(exitEA)

label(newmemEB)
label(returnhereEB)
label(originalcodeEB)
label(exitEB)

newmemD: //this is allocated memory, you have read,write,execute access
//place your code here
fsub dword ptr [esp+08]
fst [sanityTP]
push eax
mov eax,[minSanity]
cmp [sanityTP],eax
pop eax
jge originalcodeD

fstp [sanityTP]
fld dword ptr [esi+00000088]
mov dword ptr [esp+08],(float)0

originalcodeD:
//fsub dword ptr [esp+08]
fst dword ptr [esi+00000088]

exitD:
jmp returnhereD

///

newmemEA:
fsub dword ptr [esp+68]
fst [sanityTP]
push eax
mov eax,[minSanity]
cmp [sanityTP],eax
pop eax
jge originalcodeEA

fstp [sanityTP]
fld dword ptr [esi+00000088]
mov dword ptr [esp+68],(float)0

originalcodeEA:
//fsub dword ptr [esp+68]
fst dword ptr [esi+00000088]

exitEA:
jmp returnhereEA

///

newmemEB:
fld dword ptr [esp+04]
fadd dword ptr [ecx+00000088]
cmp dword ptr [esp+04],(float)0
jge exitEB

fst [sanityTP]
push eax
mov eax,[minSanity]
cmp [sanityTP],eax
pop eax
jge exitEB

fstp [sanityTP]
fld dword ptr [ecx+00000088]
mov dword ptr [esp+04],(float)0

originalcodeEB:
//fld dword ptr [esp+04]
//fadd dword ptr [ecx+00000088]

exitEB:
jmp returnhereEB

///
sanityTP:
dd 0
minSanity:
dd (float)5
///

sanitySubDark_AOB+6:
sanitySubDarkJmp:
jmp newmemD
nop
nop
nop
nop
nop
returnhereD:

sanitySubEventA_AOB+6:
sanitySubEventAJmp:
jmp newmemEA
nop
nop
nop
nop
nop
returnhereEA:

sanitySubEventB_AOB:
sanitySubEventBJmp:
jmp newmemEB
nop
nop
nop
nop
nop
returnhereEB:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmemD)
sanitySubDarkJmp:
db D8 64 24 08 D9 96 88 00 00 00
//Alt: fsub dword ptr [esp+08]
//Alt: fst dword ptr [esi+00000088]
sanitySubEventAJmp:
db D8 64 24 68 D9 96 88 00 00 00
//Alt: fsub dword ptr [esp+68]
//Alt: fst dword ptr [esi+00000088]
sanitySubEventBJmp:
db D9 44 24 04 D8 81 88 00 00 00
//Alt: fld dword ptr [esp+04]
//Alt: fadd dword ptr [ecx+00000088]
unregistersymbol(sanitySubDarkJmp)
unregistersymbol(sanitySubEventAJmp)
unregistersymbol(sanitySubEventBJmp)
unregistersymbol(sanityTP)
unregistersymbol(minSanity)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>98</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>98</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Inf. Oil Level (Ctrl/Alt num3 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(oilLvlAddSub_AOB,8B 44 24 04 89 81 8C 00 00 00 C2 04 00)
label(oilLvlAddSubJmp)
registersymbol(oilLvlAddSubJmp)

label(minOilLvl)
registersymbol(minOilLvl)

alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[esp+04]
cmp [ecx+0000008C],eax
jle originalcode

push ecx
mov ecx,[minOilLvl]
cmp eax,ecx
pop ecx
jg originalcode
mov eax,[ecx+0000008C]

originalcode:
//mov eax,[esp+04]
mov [ecx+0000008C],eax

exit:
jmp returnhere

///
minOilLvl:
dd (float)10
///

oilLvlAddSub_AOB:     //"Amnesia.exe"+CD420:
oilLvlAddSubJmp:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
oilLvlAddSubJmp:      //"Amnesia.exe"+CD420:
db 8B 44 24 04 89 81 8C 00 00 00
//Alt: mov eax,[esp+04]
//Alt: mov [ecx+0000008C],eax
unregistersymbol(oilLvlAddSubJmp)
unregistersymbol(minOilLvl)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>99</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>99</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Inf. Tinderbox (Ctrl/Alt num4 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(tinderboxSub_AOB,8B 80 84 00 00 00 FF 88 98 00 00 00)
label(tinderboxSubJmp)
registersymbol(tinderboxSubJmp)

tinderboxSub_AOB+6:
tinderboxSubJmp:
db 90 90 90 90 90 90


 
 
[DISABLE]
tinderboxSubJmp:
db FF 88 98 00 00 00
//Alt: dec [eax+00000098]
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>100</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>100</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Inf. Items (Ctrl/Alt num5 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(itemAddSub_AOB,8B D7 3B D1 89 B8 B4 00 00 00)
label(itemAddSubJmp)
registersymbol(itemAddSubJmp)

alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [eax+000000B4],edi
jg exit

originalcode:
mov [eax+000000B4],edi

exit:
jmp returnhere

itemAddSub_AOB+4:     //"Amnesia.exe"+6EE68:
itemAddSubJmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
itemAddSubJmp:        //"Amnesia.exe"+6EE68:
db 89 B8 B4 00 00 00
//Alt: mov [eax+000000B4],edi
unregistersymbol(itemAddSubJmp)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>101</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>101</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"min Values"</Description>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"min Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>minHealth</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"min Sanity"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>minSanity</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"min Oil Level"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>minOilLvl</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"get pointers (Ctrl/Alt num6 - Activate/Deactivate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthAccessA_AOB,E8 xx xx xx xx 8B 4E 38 D9 81 84 00 00 00)
label(healthAccessAJmp)
registersymbol(healthAccessAJmp)
aobscan(sanityAccessA_AOB,D9 5E 54 88 56 45 D9 81 88 00 00 00)
label(sanityAccessAJmp)
registersymbol(sanityAccessAJmp)

label(pCurHealth)
registersymbol(pCurHealth)
label(pCurSanity)
registersymbol(pCurSanity)

alloc(newmemGCH,128) //2kb should be enough
label(returnhereGCH)
label(originalcodeGCH)
label(exitGCH)

label(newmemGCS)
label(returnhereGCS)
label(originalcodeGCS)
label(exitGCS)

newmemGCH: //this is allocated memory, you have read,write,execute access
//place your code here
mov ecx,[esi+38]
mov [pCurHealth],ecx
pushad
push 12      //key Alt
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcodeGCH
mov dword ptr [ecx+00000084],(float)100

originalcodeGCH:
//mov ecx,[esi+38]
fld dword ptr [ecx+00000084]

exitGCH:
jmp returnhereGCH

///

newmemGCS:
mov [pCurSanity],ecx
pushad
push 12      //key Alt
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcodeGCS
mov dword ptr [ecx+00000088],(float)100

originalcodeGCS:
mov [esi+45],dl
fld dword ptr [ecx+00000088]

exitGCS:
jmp returnhereGCS

///
pCurHealth:
dd 0
pCurSanity:
dd 0
///

healthAccessA_AOB+5:
healthAccessAJmp:
jmp newmemGCH
nop
nop
nop
nop
returnhereGCH:

sanityAccessA_AOB+3:
sanityAccessAJmp:
jmp newmemGCS
nop
nop
nop
nop
returnhereGCS:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmemGCH)
healthAccessAJmp:
db 8B 4E 38 D9 81 84 00 00 00
//Alt: mov ecx,[esi+38]
//Alt: fld dword ptr [ecx+00000084]
sanityAccessAJmp:
db 88 56 45 D9 81 88 00 00 00
//Alt: mov [esi+45],dl
//Alt: fld dword ptr [ecx+00000088]
unregistersymbol(healthAccessAJmp)
unregistersymbol(sanityAccessAJmp)
unregistersymbol(pCurHealth)
unregistersymbol(pCurSanity)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>102</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>18</Key>
            <Key>102</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Current Health, hold Alt to set full Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pCurHealth</Address>
          <Offsets>
            <Offset>84</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Current Sanity, hold Alt to set full Sanity"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pCurSanity</Address>
          <Offsets>
            <Offset>88</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"------------------------------------------------------------------------"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>22</ID>
          <Description>"get Health pointer"</Description>
          <Color>808080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(pCurHealth)
registersymbol(pCurHealth)
label(healthAccessAJmp)
registersymbol(healthAccessAJmp)
aobscan(healthAccessA_AOB,E8 xx xx xx xx 8B 4E 38 D9 81 84 00 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov ecx,[esi+38]
mov [pCurHealth],ecx
pushad
push 12      //key Alt
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov dword ptr [ecx+00000084],(float)100

originalcode:
//mov ecx,[esi+38]
fld dword ptr [ecx+00000084]

exit:
jmp returnhere

///
pCurHealth:
dd 0
///

healthAccessA_AOB+5:
healthAccessAJmp:
jmp newmem
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthAccessAJmp:
db 8B 4E 38 D9 81 84 00 00 00
//Alt: mov ecx,[esi+38]
//Alt: fld dword ptr [ecx+00000084]
unregistersymbol(pCurHealth)
unregistersymbol(healthAccessAJmp)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>23</ID>
              <Description>"Current Health, hold Alt to set full Health"</Description>
              <Color>808080</Color>
              <VariableType>Float</VariableType>
              <Address>pCurHealth</Address>
              <Offsets>
                <Offset>84</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"get Sanity pointer"</Description>
          <Color>808080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(pCurSanity)
registersymbol(pCurSanity)
label(sanityAccessAJmp)
registersymbol(sanityAccessAJmp)
aobscan(sanityAccessA_AOB,D9 5E 54 88 56 45 D9 81 88 00 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pCurSanity],ecx
pushad
push 12      //key Alt
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov dword ptr [ecx+00000088],(float)100

originalcode:
mov [esi+45],dl
fld dword ptr [ecx+00000088]

exit:
jmp returnhere

///
pCurSanity:
dd 0
///

sanityAccessA_AOB+3:
sanityAccessAJmp:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
sanityAccessAJmp:
db 88 56 45 D9 81 88 00 00 00
//Alt: mov [esi+45],dl
//Alt: fld dword ptr [ecx+00000088]
unregistersymbol(pCurSanity)
unregistersymbol(sanityAccessAJmp)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Current Sanity, hold Alt to set full Sanity"</Description>
              <Color>808080</Color>
              <VariableType>Float</VariableType>
              <Address>pCurSanity</Address>
              <Offsets>
                <Offset>88</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>[1.0] tinderboxes - Code :dec [eax+78]</Description>
      <Address>004443B1</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>443B1</ModuleNameOffset>
      <Before>
        <Byte>80</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>48</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>68</Byte>
        <Byte>7C</Byte>
        <Byte>E7</Byte>
        <Byte>6B</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] tinderboxes + Code :inc [eax+78]</Description>
      <Address>00435EF3</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>35EF3</ModuleNameOffset>
      <Before>
        <Byte>80</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>40</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>54</Byte>
        <Byte>B0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity - event1 Code :fst dword ptr [esi+68]</Description>
      <Address>004CD923</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD923</ModuleNameOffset>
      <Before>
        <Byte>68</Byte>
        <Byte>D8</Byte>
        <Byte>64</Byte>
        <Byte>24</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity - event2 Code :fst dword ptr [ecx+68]</Description>
      <Address>004CD998</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD998</ModuleNameOffset>
      <Before>
        <Byte>24</Byte>
        <Byte>04</Byte>
        <Byte>D8</Byte>
        <Byte>41</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>51</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>DC</Byte>
        <Byte>D7</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity - darkness Code :fst dword ptr [esi+68]</Description>
      <Address>004CD35A</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD35A</ModuleNameOffset>
      <Before>
        <Byte>68</Byte>
        <Byte>D8</Byte>
        <Byte>64</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity + light Code :mov [ecx+68],eax</Description>
      <Address>004CD414</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD414</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity access1 Code :fld dword ptr [ecx+68]</Description>
      <Address>004DC478</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>DC478</ModuleNameOffset>
      <Before>
        <Byte>5E</Byte>
        <Byte>54</Byte>
        <Byte>88</Byte>
        <Byte>56</Byte>
        <Byte>45</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>57</Byte>
        <Byte>D8</Byte>
        <Byte>9E</Byte>
        <Byte>9C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity access2 Code :fld dword ptr [eax+68]</Description>
      <Address>004D48C6</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D48C6</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>9E</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity access3 Code :fld dword ptr [eax+68]</Description>
      <Address>004D4EEE</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D4EEE</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>9E</Byte>
        <Byte>8C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity access4 Code :fld dword ptr [ecx+68]</Description>
      <Address>004D5CA7</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D5CA7</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>96</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] sanity access5 Code :fld dword ptr [eax+68]</Description>
      <Address>004DB6E0</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>DB6E0</ModuleNameOffset>
      <Before>
        <Byte>75</Byte>
        <Byte>1A</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>68</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>5E</Byte>
        <Byte>34</Byte>
        <Byte>DF</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access1 Code :fld dword ptr [ecx+64]</Description>
      <Address>00466924</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>66924</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access2 Code :fld dword ptr [ecx+64]</Description>
      <Address>004663C9</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>663C9</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access3 Code :fld dword ptr [ebp+64]</Description>
      <Address>004D52AE</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D52AE</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>6E</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>45</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>57</Byte>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access4 Code :fld dword ptr [eax+64]</Description>
      <Address>004D49F6</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D49F6</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access5 Code :fld dword ptr [edx+64]</Description>
      <Address>004D5C84</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D5C84</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>56</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>42</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access6 Code :fld dword ptr [ecx+64]</Description>
      <Address>004D41EE</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D41EE</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>F1</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>9E</Byte>
        <Byte>90</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access7 Code :fld dword ptr [eax+64]</Description>
      <Address>004D4227</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>D4227</ModuleNameOffset>
      <Before>
        <Byte>7A</Byte>
        <Byte>14</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>5E</Byte>
        <Byte>44</Byte>
        <Byte>DF</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health access8 Code :fld dword ptr [ecx+64]</Description>
      <Address>004A288E</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>A288E</ModuleNameOffset>
      <Before>
        <Byte>88</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>54</Byte>
        <Byte>9A</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] oil lvl +- Code :mov [ecx+6C],eax</Description>
      <Address>004CD424</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD424</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] Oil Refils +- Code :mov [eax+000000B4],edi</Description>
      <Address>0046EE68</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>6EE68</ModuleNameOffset>
      <Before>
        <Byte>4F</Byte>
        <Byte>8B</Byte>
        <Byte>D7</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>B8</Byte>
        <Byte>B4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
        <Byte>85</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health +- 1 Code :fstp dword ptr [esi+64]</Description>
      <Address>004CE65C</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CE65C</ModuleNameOffset>
      <Before>
        <Byte>20</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>50</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5E</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>6C</Byte>
        <Byte>C4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.0] health +- 2 Code :fst dword ptr [ecx+64]</Description>
      <Address>004CD468</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>CD468</ModuleNameOffset>
      <Before>
        <Byte>24</Byte>
        <Byte>04</Byte>
        <Byte>D8</Byte>
        <Byte>41</Byte>
        <Byte>64</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>51</Byte>
        <Byte>64</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>DC</Byte>
        <Byte>D7</Byte>
        <Byte>6B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.2] tinderboxes - Code :dec [eax+00000098]</Description>
      <Address>00444BF7</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>44BF7</ModuleNameOffset>
      <Before>
        <Byte>80</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>88</Byte>
        <Byte>98</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>68</Byte>
        <Byte>6C</Byte>
        <Byte>A8</Byte>
        <Byte>6C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>[1.2] oil lvl +- Code :mov [ecx+0000008C],eax</Description>
      <Address>005973D4</Address>
      <ModuleName>Amnesia.exe</ModuleName>
      <ModuleNameOffset>1973D4</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>81</Byte>
        <Byte>8C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>healthAddSubAJmp</Name>
      <Address>004CF8D3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthAddSubBJmp</Name>
      <Address>004CE597</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthTP</Name>
      <Address>040600CA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minHealth</Name>
      <Address>040600CE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sanitySubDarkJmp</Name>
      <Address>004CE49C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sanitySubEventAJmp</Name>
      <Address>004CEAE5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sanitySubEventBJmp</Name>
      <Address>004CEB64</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sanityTP</Name>
      <Address>0C8E014A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minSanity</Name>
      <Address>0C8E014E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>oilLvlAddSubJmp</Name>
      <Address>005973D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minOilLvl</Name>
      <Address>0CC00031</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tinderboxSubJmp</Name>
      <Address>00444BF7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itemAddSubJmp</Name>
      <Address>0046F848</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCurHealth</Name>
      <Address>0CC200B5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthAccessAJmp</Name>
      <Address>00467471</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCurSanity</Name>
      <Address>0CC200B9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sanityAccessAJmp</Name>
      <Address>004DDB45</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
