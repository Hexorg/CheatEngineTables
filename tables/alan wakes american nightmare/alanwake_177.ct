<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Health (press Enter to refill)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pHealth,4)
aobscan(hHR_AOB,D9 1C 24 D9 41 0C D9 04 24 DE D9 DF E0 F6 C4 41)
label(hHRJMP)
registersymbol(hHRJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHealth],ecx
pushad
push 0D      //key Enter
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov dword ptr [ecx+0C],(float)2

originalcode:
fld dword ptr [ecx+0C]
fld dword ptr [esp+esp]

exit:
jmp returnhere

hHR_AOB+3:             //"AlanWake.exe"+CE8E8:
hHRJMP:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
hHRJMP:                //"AlanWake.exe"+CE8E8:
db D9 41 0C D9 04 24
//Alt: fld dword ptr [ecx+0C]
//Alt: fld dword ptr [esp+esp]
dealloc(pHealth)
unregistersymbol(hHRJMP)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Undead"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(doNormal1)
label(originalcode1)
label(exit1)
alloc(vHealth,4)
aobscan(hSub_AOB,D9 56 0C D9 46 20 DE C3 D9 CA D9 5E 20 D9 56 24)
label(hSubJMP)
registersymbol(hSubJMP)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp [pHealth],esi
jne originalcode1

fstp dword ptr [vHealth]
cmp [vHealth],(float)0.0
jg doNormal1
mov dword ptr [esi+0C],(float)0.01
fld dword ptr [esi+0C]
jmp originalcode1

doNormal1:
fld dword ptr [vHealth]

originalcode1:
popfd
fst dword ptr [esi+0C]
fld dword ptr [esi+20]

exit1:
jmp returnhere1

hSub_AOB:             //"AlanWake.exe"+CEAED:
hSubJMP:
jmp newmem1
nop
returnhere1:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
hSubJMP:              //"AlanWake.exe"+CEAED:
db D9 56 0C D9 46 20
//Alt: fst dword ptr [esi+0C]
//Alt: fld dword ptr [esi+20]
dealloc(vHealth)
unregistersymbol(hSubJMP)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pHealth</Address>
          <Offsets>
            <Offset>C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Inf. Sprint"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
aobscan(staminaSub_AOB,D9 5C 24 08 D9 44 24 08 D9 56 7C D9 E8)
label(staminaSubJMP)
registersymbol(staminaSubJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fst dword ptr [esi+7C]
pushfd
cmp dword ptr [esi+7C],(float)0.3
jge originalcode
mov dword ptr [esi+7C],(float)0.3

originalcode:
popfd
//fst dword ptr [esi+7C]
fld1 

exit:
jmp returnhere

staminaSub_AOB+8:                //"AlanWake.exe"+CB569:
staminaSubJMP:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminaSubJMP:                   //"AlanWake.exe"+CB569:
db D9 56 7C D9 E8
//Alt: fst dword ptr [esi+7C]
//Alt: fld1
unregistersymbol(staminaSubJMP)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>52</ID>
      <Description>"Inf. Ammo v3"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(pAmmoPouch1,4)
alloc(pAmmoPouch2,4)
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(checkFAP1)
label(checkSAP1)
label(setMinAmmoPouch1)
label(originalcode1)
label(exit1)
label(minAmmoPouch)
registersymbol(minAmmoPouch)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(checkFA2)
label(checkSA2)
label(doFalseAmmoCheck2)
label(originalcode2)
label(exit2)
alloc(newmem3,2048) //2kb should be enough
label(returnhere3)
label(originalcode3)
label(exit3)
alloc(pFAmmoPouch1,4)
alloc(pFAmmoPouch2,4)
alloc(newmem4,2048) //2kb should be enough
label(returnhere4)
label(originalcode4)
label(exit4)
alloc(pSAmmoPouch1,4)
alloc(pSAmmoPouch2,4)
aobscan(AOB1,5E C2 04 00 33 C0 8B 44 86 20 5E C2 04 00 CC CC)
aobscan(AOB2,4A 23 C2 89 44 8E 20 85 C0 ** ** 8B 4E 34)
aobscan(AOB3,CC CC CC 8B 01 83 7C 81 14 00 0F 9F C2 83 F8 FF)
aobscan(AOB4,B8 01 00 00 00 8B 44 86 20 5E C2 04 00 80 78 40 00)
label(aPRJMP)
registersymbol(aPRJMP)
label(aAPSJMP)
registersymbol(aAPSJMP)
label(aACJMP)
registersymbol(aACJMP)
label(fAPRJMP)
registersymbol(fAPRJMP)
label(sAPRJMP)
registersymbol(sAPRJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoPouch1],esi
mov [pAmmoPouch2],eax

originalcode:
mov eax,[esi+eax*4+20]
pop esi

exit:
jmp returnhere

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pAmmoPouch1],esi
jne checkFAP1
cmp [pAmmoPouch2],ecx
jne checkFAP1
jmp setMinAmmoPouch1

checkFAP1:
cmp [pFAmmoPouch1],esi
jne checkSAP1
cmp [pFAmmoPouch2],ecx
jne checkSAP1
jmp setMinAmmoPouch1

checkSAP1:
cmp [pSAmmoPouch1],esi
jne originalcode1
cmp [pSAmmoPouch2],ecx
jne originalcode1

setMinAmmoPouch1:
cmp eax,[minAmmoPouch]
jge originalcode1
mov eax,[esi+ecx*4+20]

originalcode1:
mov [esi+ecx*4+20],eax
test eax,eax

exit1:
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pAmmoPouch1],ecx
jne checkFA2
cmp [pAmmoPouch2],eax
jne checkFA2
jmp doFalseAmmoCheck2

checkFA2:
cmp [pFAmmoPouch1],ecx
jne checkSA2
cmp [pFAmmoPouch2],eax
jne checkSA2
jmp doFalseAmmoCheck2

checkSA2:
//cmp [pSAmmoPouch1],ecx
//jne originalcode2
//cmp [pSAmmoPouch2],eax
//jne originalcode2

cmp dword ptr [ecx+eax*4+14],00000001
jg doFalseAmmoCheck2
mov dword ptr [ecx+eax*4+14],00000002
jmp originalcode2

doFalseAmmoCheck2:
cmp dword ptr [ecx+eax*4+14],FFFFFFFF
jmp exit2

originalcode2:
cmp dword ptr [ecx+eax*4+14],00

exit2:
jmp returnhere2

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pFAmmoPouch1],esi
mov [pFAmmoPouch2],eax

originalcode3:
mov eax,[esi+eax*4+20]
pop esi

exit3:
jmp returnhere3

newmem4: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSAmmoPouch1],esi
mov [pSAmmoPouch2],eax

originalcode4:
mov eax,[esi+eax*4+20]
pop esi

exit4:
jmp returnhere4

///
minAmmoPouch:
dd 8
///

AOB1+6:                      //"AlanWake.exe"+140EFD:
aPRJMP:
jmp newmem
returnhere:

AOB2+3:                      //"AlanWake.exe"+14146D:
aAPSJMP:
jmp newmem1
nop
returnhere1:

AOB3+5:                      //"AlanWake.exe"+140D62:
aACJMP:
jmp newmem2
returnhere2:

AOB4+5:                      //"AlanWake.exe"+140ED7:
fAPRJMP:
jmp newmem3
returnhere3:

AOB1-4:                      //"AlanWake.exe"+140EF3:
sAPRJMP:
jmp newmem4
returnhere4:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
aPRJMP:                      //"AlanWake.exe"+140EFD:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pAmmoPouch1)
dealloc(pAmmoPouch2)
dealloc(newmem1)
aAPSJMP:                     //"AlanWake.exe"+14146D:
db 89 44 8E 20 85 C0
//Alt: mov [esi+ecx*4+20],eax
//Alt: test eax,eax
unregistersymbol(minAmmoPouch)
dealloc(newmem2)
aACJMP:                      //"AlanWake.exe"+140D62:
db 83 7C 81 14 00
//Alt: cmp dword ptr [ecx+eax*4+14],00
dealloc(newmem3)
fAPRJMP:                     //"AlanWake.exe"+140ED7:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pFAmmoPouch1)
dealloc(pFAmmoPouch2)
dealloc(newmem4)
sAPRJMP:                     //"AlanWake.exe"+140EF3:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pSAmmoPouch1)
dealloc(pSAmmoPouch2)
unregistersymbol(aPRJMP)
unregistersymbol(aAPSJMP)
unregistersymbol(aACJMP)
unregistersymbol(fAPRJMP)
unregistersymbol(sAPRJMP)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>53</ID>
          <Description>"min ammo"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>minAmmoPouch</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"Inf. Flare / Flashbang"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
aobscan(flareSub_AOB,0F 98 C2 4A 23 C2 89 01 8B 06)
label(flareSubJMP)
registersymbol(flareSubJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,0
jg originalcode
mov eax,1

originalcode:
mov [ecx],eax
mov eax,[esi]
cmp dword ptr [esi+eax*4+0C],00

exit:
jmp returnhere

flareSub_AOB+6:                     //"AlanWake.exe"+152444:
flareSubJMP:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
flareSubJMP:                        //"AlanWake.exe"+152444:
db 89 01 8B 06 83 7C 86 0C 00
//Alt: mov [ecx],eax
//Alt: mov eax,[esi]
//Alt: cmp dword ptr [esi+eax*4+0C],00
unregistersymbol(flareSubJMP)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Inf. Flash Light + Car Light"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(doNormal)
label(originalcode)
label(exit)
alloc(vLightFuel,4)
alloc(newmem1,128) //2kb should be enough
label(returnhere1)
label(originalcode1)
label(exit1)
globalalloc(pLightBat,4)
label(minBattery)
registersymbol(minBattery)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(doNormal2)
label(originalcode2)
label(exit2)
alloc(vCarLight,4)
aobscan(lFS_AOB,D9 5C 24 04 D9 44 24 04 D9 96 E0 00 00 00 D9 EE DE D9)
label(lFSJMP)
registersymbol(lFSJMP)
aobscan(lBS_AOB,8B 86 E4 00 00 00 85 C0 ** ** 48 89 86 E4 00 00 00)
label(lBSJMP)
registersymbol(lBSJMP)
aobscan(carLightSub_AOB,DC 6C 24 08 D9 5C 24 04 D9 44 24 04 D9 56 08)
label(carLightSubJMP)
registersymbol(carLightSubJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [vLightFuel]
cmp [vLightFuel],(float)0.15
jge doNormal
fld dword ptr [esi+000000E0]
jmp originalcode

doNormal:
fld dword ptr [vLightFuel]

originalcode:
fst dword ptr [esi+000000E0]

exit:
jmp returnhere

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pLightBat],esi
cmp eax,[minBattery]
jge originalcode1
mov eax,[minBattery]

originalcode1:
mov [esi+000000E4],eax

exit1:
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
fld dword ptr [esp+04]

fstp dword ptr [vCarLight]
cmp [vCarLight],(float)0.15
jge doNormal2
fld dword ptr [esi+08]
jmp originalcode2

doNormal2:
fld dword ptr [vCarLight]

originalcode2:
//fld dword ptr [esp+04]
fst dword ptr [esi+08]

exit2:
jmp returnhere2

///
minBattery:
dd 2
///

lFS_AOB+8:                          //"AlanWake.exe"+D34E3:
lFSJMP:
jmp newmem
nop
returnhere:

lBS_AOB+B:                          //"AlanWake.exe"+D3899:
lBSJMP:
jmp newmem1
nop
returnhere1:

carLightSub_AOB+8:                  //"AlanWake.exe"+134140:
carLightSubJMP:
jmp newmem2
nop
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
lFSJMP:                             //"AlanWake.exe"+D34E3:
db D9 96 E0 00 00 00
//Alt: fst dword ptr [esi+000000E0]
dealloc(vLightFuel)
dealloc(newmem1)
lBSJMP:                             //"AlanWake.exe"+D3899:
db 89 86 E4 00 00 00
//Alt: mov [esi+000000E4],eax
dealloc(pLightBat)
unregistersymbol(minBattery)
unregistersymbol(lFSJMP)
unregistersymbol(lBSJMP)
dealloc(newmem2)
carLightSubJMP:                     //"AlanWake.exe"+134140:
db D9 44 24 04 D9 56 08
//Alt: fld dword ptr [esp+04]
//Alt: fst dword ptr [esi+08]
dealloc(vCarLight)
unregistersymbol(carLightSubJMP)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"battery"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pLightBat</Address>
          <Offsets>
            <Offset>E4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"min battery"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>minBattery</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>54</ID>
      <Description>"=== old script ======================================="</Description>
      <Color>808080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>"Inf. Ammo v1"</Description>
          <Color>808080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(pAmmoPouch1,4)
alloc(pAmmoPouch2,4)
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(checkFAP1)
label(checkSAP1)
label(setMinAmmoPouch1)
label(originalcode1)
label(exit1)
label(minAmmoPouch)
registersymbol(minAmmoPouch)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(checkFA2)
label(checkSA2)
label(doFalseAmmoCheck2)
label(originalcode2)
label(exit2)
alloc(newmem3,2048) //2kb should be enough
label(returnhere3)
label(originalcode3)
label(exit3)
alloc(pFAmmoPouch1,4)
alloc(pFAmmoPouch2,4)
alloc(newmem4,2048) //2kb should be enough
label(returnhere4)
label(originalcode4)
label(exit4)
alloc(pSAmmoPouch1,4)
alloc(pSAmmoPouch2,4)
aobscan(AOB1,5E C2 04 00 33 C0 8B 44 86 20 5E C2 04 00 CC CC)
aobscan(AOB2,4A 23 C2 89 44 8E 20 85 C0 ** ** 8B 4E 34)
aobscan(AOB3,CC CC CC 8B 01 83 7C 81 14 00 0F 9F C2 83 F8 FF)
aobscan(AOB4,B8 01 00 00 00 8B 44 86 20 5E C2 04 00 80 78 40 00)
label(aPRJMP)
registersymbol(aPRJMP)
label(aAPSJMP)
registersymbol(aAPSJMP)
label(aACJMP)
registersymbol(aACJMP)
label(fAPRJMP)
registersymbol(fAPRJMP)
label(sAPRJMP)
registersymbol(sAPRJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoPouch1],esi
mov [pAmmoPouch2],eax

originalcode:
mov eax,[esi+eax*4+20]
pop esi

exit:
jmp returnhere

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pAmmoPouch1],esi
jne checkFAP1
cmp [pAmmoPouch2],ecx
jne checkFAP1
jmp setMinAmmoPouch1

checkFAP1:
cmp [pFAmmoPouch1],esi
jne checkSAP1
cmp [pFAmmoPouch2],ecx
jne checkSAP1
jmp setMinAmmoPouch1

checkSAP1:
cmp [pSAmmoPouch1],esi
jne originalcode1
cmp [pSAmmoPouch2],ecx
jne originalcode1

setMinAmmoPouch1:
cmp eax,[minAmmoPouch]
jge originalcode1
mov eax,[minAmmoPouch]

originalcode1:
mov [esi+ecx*4+20],eax
test eax,eax

exit1:
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pAmmoPouch1],ecx
jne checkFA2
cmp [pAmmoPouch2],eax
jne checkFA2
jmp doFalseAmmoCheck2

checkFA2:
cmp [pFAmmoPouch1],ecx
jne checkSA2
cmp [pFAmmoPouch2],eax
jne checkSA2
jmp doFalseAmmoCheck2

checkSA2:
cmp [pSAmmoPouch1],ecx
jne originalcode2
cmp [pSAmmoPouch2],eax
jne originalcode2

doFalseAmmoCheck2:
cmp dword ptr [ecx+eax*4+14],FFFFFFFF
jmp exit2

originalcode2:
cmp dword ptr [ecx+eax*4+14],00

exit2:
jmp returnhere2

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pFAmmoPouch1],esi
mov [pFAmmoPouch2],eax

originalcode3:
mov eax,[esi+eax*4+20]
pop esi

exit3:
jmp returnhere3

newmem4: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSAmmoPouch1],esi
mov [pSAmmoPouch2],eax

originalcode4:
mov eax,[esi+eax*4+20]
pop esi

exit4:
jmp returnhere4

///
minAmmoPouch:
dd 8
///

AOB1+6:                      //"AlanWake.exe"+140EFD:
aPRJMP:
jmp newmem
returnhere:

AOB2+3:                      //"AlanWake.exe"+14146D:
aAPSJMP:
jmp newmem1
nop
returnhere1:

AOB3+5:                      //"AlanWake.exe"+140D62:
aACJMP:
jmp newmem2
returnhere2:

AOB4+5:                      //"AlanWake.exe"+140ED7:
fAPRJMP:
jmp newmem3
returnhere3:

AOB1-4:                      //"AlanWake.exe"+140EF3:
sAPRJMP:
jmp newmem4
returnhere4:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
aPRJMP:                      //"AlanWake.exe"+140EFD:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pAmmoPouch1)
dealloc(pAmmoPouch2)
dealloc(newmem1)
aAPSJMP:                     //"AlanWake.exe"+14146D:
db 89 44 8E 20 85 C0
//Alt: mov [esi+ecx*4+20],eax
//Alt: test eax,eax
unregistersymbol(minAmmoPouch)
dealloc(newmem2)
aACJMP:                      //"AlanWake.exe"+140D62:
db 83 7C 81 14 00
//Alt: cmp dword ptr [ecx+eax*4+14],00
dealloc(newmem3)
fAPRJMP:                     //"AlanWake.exe"+140ED7:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pFAmmoPouch1)
dealloc(pFAmmoPouch2)
dealloc(newmem4)
sAPRJMP:                     //"AlanWake.exe"+140EF3:
db 8B 44 86 20 5E
//Alt: mov eax,[esi+eax*4+20]
//Alt: pop esi
dealloc(pSAmmoPouch1)
dealloc(pSAmmoPouch2)
unregistersymbol(aPRJMP)
unregistersymbol(aAPSJMP)
unregistersymbol(aACJMP)
unregistersymbol(fAPRJMP)
unregistersymbol(sAPRJMP)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>51</ID>
              <Description>"min ammo"</Description>
              <Color>808080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>minAmmoPouch</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Inf. Ammo v2"</Description>
          <Color>808080</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(setMinAmmoPouch1)
label(originalcode1)
label(exit1)
label(minAmmoPouch)
registersymbol(minAmmoPouch)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(doFalseAmmoCheck2)
label(originalcode2)
label(exit2)
aobscan(AOB2,4A 23 C2 89 44 8E 20 85 C0 ** ** 8B 4E 34)
aobscan(AOB3,CC CC CC 8B 01 83 7C 81 14 00 0F 9F C2 83 F8 FF)
label(aAPSJMP)
registersymbol(aAPSJMP)
label(aACJMP)
registersymbol(aACJMP)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
setMinAmmoPouch1:
cmp eax,[minAmmoPouch]
jge originalcode1
mov eax,[minAmmoPouch]

originalcode1:
mov [esi+ecx*4+20],eax
test eax,eax

exit1:
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
doFalseAmmoCheck2:
cmp dword ptr [ecx+eax*4+14],FFFFFFFF
jmp exit2

originalcode2:
cmp dword ptr [ecx+eax*4+14],00

exit2:
jmp returnhere2

///
minAmmoPouch:
dd 8
///

AOB2+3:                      //"AlanWake.exe"+14146D:
aAPSJMP:
jmp newmem1
nop
returnhere1:

AOB3+5:                      //"AlanWake.exe"+140D62:
aACJMP:
jmp newmem2
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
aAPSJMP:                     //"AlanWake.exe"+14146D:
db 89 44 8E 20 85 C0
//Alt: mov [esi+ecx*4+20],eax
//Alt: test eax,eax
unregistersymbol(minAmmoPouch)
dealloc(newmem2)
aACJMP:                      //"AlanWake.exe"+140D62:
db 83 7C 81 14 00
//Alt: cmp dword ptr [ecx+eax*4+14],00
unregistersymbol(aAPSJMP)
unregistersymbol(aACJMP)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>34</ID>
              <Description>"min ammo"</Description>
              <Color>808080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>minAmmoPouch</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>ammo pouch - Code :mov [esi+ecx*4+20],eax</Description>
      <Address>0054146D</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>14146D</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>C2</Byte>
        <Byte>4A</Byte>
        <Byte>23</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>44</Byte>
        <Byte>8E</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>75</Byte>
        <Byte>54</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch reload Code :mov [esi+eax*4+20],ecx</Description>
      <Address>00541B44</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141B44</ModuleNameOffset>
      <Before>
        <Byte>D1</Byte>
        <Byte>7E</Byte>
        <Byte>02</Byte>
        <Byte>8B</Byte>
        <Byte>CA</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>4C</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>E3</Byte>
        <Byte>76</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch + Code :add [ebx+eax*4+20],edi</Description>
      <Address>0054117A</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>14117A</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>01</Byte>
        <Byte>7C</Byte>
        <Byte>83</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>5B</Byte>
        <Byte>C2</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch read 1 Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540EFD</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140EFD</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch read 2 Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540F59</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140F59</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch read 3 Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540E65</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140E65</ModuleNameOffset>
      <Before>
        <Byte>20</Byte>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo - Code :mov [ecx],eax</Description>
      <Address>00541422</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141422</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>C2</Byte>
        <Byte>4A</Byte>
        <Byte>23</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo reload Code :inc [esi+edx*4+14]</Description>
      <Address>00541AE7</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141AE7</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>16</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>44</Byte>
        <Byte>96</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>96</Byte>
        <Byte>14</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo read Code :mov eax,[ecx+eax*4+14]</Description>
      <Address>00540E74</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140E74</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>81</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo fire check zero Code :cmp dword ptr [ecx+eax*4+14],00</Description>
      <Address>00540D62</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140D62</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>7C</Byte>
        <Byte>81</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>9F</Byte>
        <Byte>C2</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo pouch - Code :mov [esi+ecx*4+20],eax</Description>
      <Address>01BC0819</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>44</Byte>
        <Byte>8E</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>E9</Byte>
        <Byte>4F</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo pouch reload Code :mov [esi+eax*4+20],ecx</Description>
      <Address>00541B44</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141B44</ModuleNameOffset>
      <Before>
        <Byte>D1</Byte>
        <Byte>7E</Byte>
        <Byte>02</Byte>
        <Byte>8B</Byte>
        <Byte>CA</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>4C</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>E3</Byte>
        <Byte>76</Byte>
        <Byte>06</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo - Code :mov [ecx],eax</Description>
      <Address>00541422</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141422</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>C2</Byte>
        <Byte>4A</Byte>
        <Byte>23</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo reload Code :inc [esi+edx*4+14]</Description>
      <Address>00541AE7</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141AE7</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>16</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>44</Byte>
        <Byte>96</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>96</Byte>
        <Byte>14</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo pouch read 1 Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540ED7</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140ED7</ModuleNameOffset>
      <Before>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo pouch read 2 Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540E43</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140E43</ModuleNameOffset>
      <Before>
        <Byte>B8</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>80</Byte>
        <Byte>78</Byte>
        <Byte>40</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>f ammo fire check zero Code :cmp dword ptr [ecx+eax*4+14],00</Description>
      <Address>01BC1025</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>EB</Byte>
        <Byte>08</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>7C</Byte>
        <Byte>81</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>38</Byte>
        <Byte>FD</Byte>
        <Byte>97</Byte>
        <Byte>FE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp read 1 Code :fld dword ptr [ecx+0C]</Description>
      <Address>004CE8E8</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CE8E8</ModuleNameOffset>
      <Before>
        <Byte>63</Byte>
        <Byte>00</Byte>
        <Byte>D9</Byte>
        <Byte>1C</Byte>
        <Byte>24</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>04</Byte>
        <Byte>24</Byte>
        <Byte>DE</Byte>
        <Byte>D9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp read 2 Code :fld dword ptr [ecx+0C]</Description>
      <Address>004B2A30</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>B2A30</ModuleNameOffset>
      <Before>
        <Byte>10</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp +- 1 Code :fst dword ptr [esi+0C]</Description>
      <Address>004CEAED</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CEAED</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>46</Byte>
        <Byte>20</Byte>
        <Byte>DE</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp +- 2 Code :fstp dword ptr [esi+0C]</Description>
      <Address>004CEB1A</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CEB1A</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>56</Byte>
        <Byte>AA</Byte>
        <Byte>F3</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5E</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>DD</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp +- 3 Code :fst dword ptr [esi+0C]</Description>
      <Address>004CEF47</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CEF47</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>08</Byte>
        <Byte>D9</Byte>
        <Byte>05</Byte>
        <Byte>58</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>hp regen Code :fst dword ptr [esi+0C]</Description>
      <Address>004CF171</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CF171</ModuleNameOffset>
      <Before>
        <Byte>14</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>E8</Byte>
        <Byte>DE</Byte>
        <Byte>D9</Byte>
        <Byte>DF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :fstp dword ptr [ecx+0C]</Description>
      <Address>004CE7E9</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CE7E9</ModuleNameOffset>
      <Before>
        <Byte>2C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>59</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>05</Byte>
        <Byte>58</Byte>
        <Byte>3F</Byte>
        <Byte>63</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>light fuel - Code :fst dword ptr [esi+000000E0]</Description>
      <Address>004D34E3</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>D34E3</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>96</Byte>
        <Byte>E0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>DE</Byte>
        <Byte>D9</Byte>
        <Byte>DF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>light regen Code :fstp dword ptr [esi+000000E0]</Description>
      <Address>004D35A1</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>D35A1</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>84</Byte>
        <Byte>DB</Byte>
        <Byte>5B</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>9E</Byte>
        <Byte>E0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>76</Byte>
        <Byte>D9</Byte>
        <Byte>86</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>battery +- Code :mov [esi+000000E4],eax</Description>
      <Address>004D3899</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>D3899</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7E</Byte>
        <Byte>5E</Byte>
        <Byte>48</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>86</Byte>
        <Byte>E4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>BC</Byte>
        <Byte>6B</Byte>
        <Byte>0D</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>s ammo pouch read Code :mov eax,[esi+eax*4+20]</Description>
      <Address>00540EF3</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>140EF3</ModuleNameOffset>
      <Before>
        <Byte>83</Byte>
        <Byte>C1</Byte>
        <Byte>02</Byte>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>86</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>flare - Code :mov [ecx],eax</Description>
      <Address>00552444</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>152444</ModuleNameOffset>
      <Before>
        <Byte>98</Byte>
        <Byte>C2</Byte>
        <Byte>4A</Byte>
        <Byte>23</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>83</Byte>
        <Byte>7C</Byte>
        <Byte>86</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>flare - check zero Code :cmp dword ptr [esi+eax*4+0C],00</Description>
      <Address>00552448</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>152448</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>89</Byte>
        <Byte>01</Byte>
        <Byte>8B</Byte>
        <Byte>06</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>7C</Byte>
        <Byte>86</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>0F</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
        <Byte>C7</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>flare read Code :mov eax,[ecx+eax*4+0C]</Description>
      <Address>00551980</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>151980</ModuleNameOffset>
      <Before>
        <Byte>81</Byte>
        <Byte>04</Byte>
        <Byte>FF</Byte>
        <Byte>74</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>81</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>7F</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina - Code :fst dword ptr [esi+7C]</Description>
      <Address>004CB569</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CB569</ModuleNameOffset>
      <Before>
        <Byte>08</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>E8</Byte>
        <Byte>D9</Byte>
        <Byte>96</Byte>
        <Byte>84</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina +/normal Code :fstp dword ptr [esi+7C]</Description>
      <Address>004CB702</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CB702</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>9E</Byte>
        <Byte>DE</Byte>
        <Byte>F3</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5E</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>D8</Byte>
        <Byte>96</Byte>
        <Byte>80</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina read Code :fld dword ptr [ecx+7C]</Description>
      <Address>004CAF80</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>CAF80</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>7C</Byte>
      </Actual>
      <After>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>car light - Code :fst dword ptr [esi+08]</Description>
      <Address>00534144</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>134144</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>05</Byte>
        <Byte>B0</Byte>
        <Byte>FE</Byte>
        <Byte>6D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>car light -/regen Code :fstp dword ptr [esi+08]</Description>
      <Address>00534229</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>134229</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5E</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>0C</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>fire lock Code :setg dl</Description>
      <Address>00541407</Address>
      <ModuleName>AlanWake.exe</ModuleName>
      <ModuleNameOffset>141407</ModuleNameOffset>
      <Before>
        <Byte>83</Byte>
        <Byte>7C</Byte>
        <Byte>81</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>9F</Byte>
        <Byte>C2</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>FF</Byte>
        <Byte>74</Byte>
        <Byte>11</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pAmmoPouch1</Name>
      <Address>05BC0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoPouch2</Name>
      <Address>05BD0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoPouch</Name>
      <Address>05C40000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFAmmoPouch1</Name>
      <Address>05BE0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFAmmoPouch2</Name>
      <Address>05BF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHealth</Name>
      <Address>0CB00000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pLightBat</Name>
      <Address>0CB60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>flareReadJMP</Name>
      <Address>00551980</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hHRJMP</Name>
      <Address>004CEE48</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hSubJMP</Name>
      <Address>004CF04D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>staminaSubJMP</Name>
      <Address>004CBB69</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>flareSubJMP</Name>
      <Address>00552984</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minBattery</Name>
      <Address>0CB708B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>lFSJMP</Name>
      <Address>004D3A33</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>lBSJMP</Name>
      <Address>004D3DE9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>carLightSubJMP</Name>
      <Address>00534730</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>minAmmoPouch</Name>
      <Address>05C52026</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aPRJMP</Name>
      <Address>0054159D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aAPSJMP</Name>
      <Address>00541B8D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aACJMP</Name>
      <Address>00541402</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fAPRJMP</Name>
      <Address>00541577</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sAPRJMP</Name>
      <Address>00541593</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
