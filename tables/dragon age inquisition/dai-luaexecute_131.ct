<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Execute lua scripts"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]

define(LUA_REGISTRYINDEX,FFFFFFFFFFFFD8F0)
define(LUA_ENVIRONINDEX, FFFFFFFFFFFFD8EF)
define(LUA_GLOBALSINDEX, FFFFFFFFFFFFD8EE)

define(lua_getfield,DragonAgeInquisition.exe+411396D)
define(lua_setfield,DragonAgeInquisition.exe+41145A0)
define(luaS_newlstr,DragonAgeInquisition.exe+411C62C)
define(lua_pcall,DragonAgeInquisition.exe+4113E69)
define(lua_gettop,DragonAgeInquisition.exe+4113A6C)
define(lua_settop,DragonAgeInquisition.exe+4114701)
define(lua_load,DragonAgeInquisition.exe+4113CA2)
define(luaL_loadstring,DragonAgeInquisition.exe+4115EF0)
define(lua_tolstring,DragonAgeInquisition.exe+41148E2)
define(lua_newuserdata,DragonAgeInquisition.exe+4113D32)
define(lua_pushcclosure,DragonAgeInquisition.exe+4113F1A)
define(lua_iscfunction,DragonAgeInquisition.exe+4113B6A)
define(lua_rawset, DragonAgeInquisition.exe+411435C)
define(lua_pushstring, DragonAgeInquisition.exe+4114120)
define(lua_pushlstring,DragonAgeInquisition.exe+411406A)


alloc(newmem,2048,"DragonAgeInquisition.exe")
alloc(func_ceprint, 2048,"DragonAgeInquisition.exe")
alloc(str_ceprint, 16,"DragonAgeInquisition.exe")
alloc(lastscriptresult,8,"DragonAgeInquisition.exe")
alloc(initialized,8, "DragonAgeInquisition.exe") //8 bytes to keep alignment
alloc(luascript, 4096,"DragonAgeInquisition.exe")
label(returnhere)
label(originalcode)
label(exit)
label(noscript)

registersymbol(func_ceprint)
registersymbol(luascript)
registersymbol(lastscriptresult)
label(postinit)


initialized:
db 0

str_ceprint:
db 'ceprint',0

func_ceprint:
//lua function to print some stuff to the debug system (or something else)
mov [rsp+8],rcx
push rdx
push r9
sub rsp,28 //functioncall scratchspace+alignment

//rcx contains the luavm
mov edx,ffffffff  //-1
xor r9,r9
call lua_tolstring  //lua_tolstring(luavm, -1, NULL)

mov rcx,rax
call OutputDebugStringA  //note that this will most likely be a 14 byte call
add rsp,28

pop r9
pop rdx
mov rcx,[rsp+8]
xor eax,eax //no return values
ret



newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//lua_pcall parameters
//rcx=luavm
//edx=number of parameters
//r8d=number of results
//r9d=error function

//save some registers (rsp+8 to rsp+28 is provided by the caller function)

mov [rsp+8],rcx
mov [rsp+10],rdx
mov [rsp+18],r8
mov [rsp+20],r9

sub rsp,20+8 //scratchspace for functions to call and local vars (oldtop) (and this alligns properly as well)

//

mov rcx,[rsp+20+8+8] //rcx gets the luavm
call lua_gettop

mov [rsp+20+0],rax //store the oldtop

{
cmp byte ptr [initialized],0
jne postinit

mov byte ptr [initialized],1
}

//check if ceprint is defined
mov rcx,[rsp+20+8+8]
mov rdx,LUA_GLOBALSINDEX
mov r8,str_ceprint
call lua_getfield

mov rcx,[rsp+20+8+8]
mov rdx,ffffffffffffffff
call lua_iscfunction

cmp eax,1
je postinit //already defined


mov rcx,[rsp+20+8+8]
mov rdx,func_ceprint
mov r8,0
call lua_pushcclosure

mov rcx,[rsp+20+8+8]
mov edx,ffffffff
call lua_iscfunction

//debug
mov rcx,[rsp+20+8+8] //rcx gets the luavm
call lua_gettop


mov rcx,[rsp+20+8+8]
mov rdx,LUA_GLOBALSINDEX
mov r8,str_ceprint
call lua_setfield

//debug
mov rcx,[rsp+20+8+8] //rcx gets the luavm
call lua_gettop

mov rcx,[rsp+20+8+8]
mov rdx,LUA_GLOBALSINDEX
mov r8,str_ceprint
call lua_getfield

//debug
mov rcx,[rsp+20+8+8] //rcx gets the luavm
call lua_gettop


mov rcx,[rsp+20+8+8]
mov edx,ffffffff
call lua_iscfunction

postinit:
mov rcx,[rsp+20+8+8]
mov edx,[rsp+20]
call lua_settop


cmp byte ptr [luascript],0
je noscript

//still here so load the script and execute it

mov rcx,[rsp+20+8+8]
mov rdx,luascript
call luaL_loadstring

mov [lastscriptresult],rax

mov byte ptr [luascript],0

cmp rax,0
jne noscript //failed to parse

//lua_pcall(L, 0, LUA_MULTRET, 0);
mov rcx,[rsp+20+8+8]
mov edx,0
mov r8d,ffffffff
mov r9,0
call lua_pcall
mov [lastscriptresult],rax

cmp eax,2
jne noscript

mov rcx,[rsp+20+8+8]
mov edx,ffffffff
xor r8,r8
call lua_tolstring


noscript:
//restore the state
mov rcx,[rsp+20+8+8] //rcx gets the luavm
mov edx,[rsp+20]
call lua_settop

//restore the registers

add rsp,20+8

mov rcx,[rsp+8]
mov rdx,[rsp+10]
mov r8,[rsp+18]
mov r9,[rsp+20]





originalcode:
mov [rsp+08],rbx

exit:
jmp returnhere

"DragonAgeInquisition.exe"+4113E69:
jmp newmem
returnhere:

[disable]
"DragonAgeInquisition.exe"+4113E69:
mov [rsp+08],rbx
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"paste script in here"</Description>
          <LastState Activated="0" RealAddress="13FFA1020"/>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>4096</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>luascript</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"result (0=success, 2=error while exec, 3=syntax error in script)"</Description>
          <LastState Value="2" Activated="0" RealAddress="13FFA1010"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>lastscriptresult</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"DragonAgeInquisition.exe"+3269F0E</Address>
      <Comment>LUA_GLOBALSINDEX
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
