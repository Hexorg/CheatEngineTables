<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Get crypto key"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>0080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
local CustomDatatype=[[///////////////////////////////////////
alloc(ConvertRoutine,1024)
alloc(ConvertBackRoutine,1024)
alloc(TypeName,256)
alloc(ByteSize,4)
alloc(UsesFloat,1)
globalalloc(AGECryptoKey_buffer,4)
label(AGECryptoKey)
registersymbol(AGECryptoKey)
TypeName:
db 'AGE Engine 4.33G encrypted int',0
//version 1
//by Gniarf
ByteSize:
dd 4
UsesFloat:
db 0
AGECryptoKey_buffer:
AGECryptoKey:
dd 0
//The convert routine should hold a routine that converts the data to an integer (in eax)
//function declared as: stdcall int ConvertRoutine(unsigned char *input);
ConvertRoutine:
[64-bit]
//rcx=address of input
mov eax,[rcx] //eax now contains the bytes 'input' pointed to
//decrypt
xor eax,dword [AGECryptoKey]
ror eax,#14
ret
[/64-bit]
[32-bit]
//parameters: (32-bit)
push ebp
mov ebp,esp
//[ebp+8]=input
mov eax,[ebp+8] //place the address that contains the bytes into eax
mov eax,[eax] //place the bytes into eax so it's handled as a normal 4 byte value
//decrypt
xor eax,dword [AGECryptoKey]
ror eax,#14
pop ebp
ret 4
[/32-bit]
//The convert back routine should hold a routine that converts the given integer back to a row of bytes (e.g when the user wats to write a new value)
//function declared as: stdcall void ConvertBackRoutine(int i, unsigned char *output);
ConvertBackRoutine:
[64-bit]
//parameters: (64-bit)
//ecx=input
//rdx=address of output
//encrypt
rol ecx,#14
xor ecx,dword [AGECryptoKey]
mov [rdx],ecx //place the integer the 4 bytes pointed to by rdx
ret
[/64-bit]
[32-bit]
//parameters: (32-bit)
push ebp
mov ebp,esp
//[ebp+8]=input
//[ebp+c]=address of output
push eax
push ebx
mov eax,[ebp+8] //load the value into eax
mov ebx,[ebp+c] //load the address into ebx
//encrypt
rol eax,#14
xor eax,dword [AGECryptoKey]
mov [ebx],eax //write the value into the address
pop ebx
pop eax
pop ebp
ret 8
[/32-bit]
]]
registerCustomTypeAutoAssembler(CustomDatatype)
function bRol(Value, Count)
  return bAnd(bOr(bShl(Value,Count),bShr(Value,32-Count)),0xFFFFFFFF)
end

local TrueKey=readInteger("[AGE.EXE+1C9BC8]+593AC"); --we need to do a rol,21 on this
local HandyKey=bRol(TrueKey,21)
writeIntegerLocal(getAddress("AgeCryptoKey",true),HandyKey)
{$asm}
 
 
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"0 here means decryption OK"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="3F000000"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>Custom</VariableType>
          <CustomType>AGE Engine 4.33G encrypted int</CustomType>
          <Address>AGE.EXE+1C9BC8</Address>
          <Offsets>
            <Offset>FFFF7E24</Offset>
            <Offset>57F20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>17521</ID>
          <Description>"money"</Description>
          <LastState Value="99999" Activated="0" RealAddress="3F202AC0"/>
          <Color>80000008</Color>
          <VariableType>Custom</VariableType>
          <CustomType>AGE Engine 4.33G encrypted int</CustomType>
          <Address>AGE.EXE+1C9BC8</Address>
          <Offsets>
            <Offset>1FA8E4</Offset>
            <Offset>57F20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>17522</ID>
          <Description>"[template pointer]"</Description>
          <LastState Value="6" Activated="0" RealAddress="3F0081DC"/>
          <Color>80000008</Color>
          <VariableType>Custom</VariableType>
          <CustomType>AGE Engine 4.33G encrypted int</CustomType>
          <Address>AGE.EXE+1C9BC8</Address>
          <Offsets>
            <Offset>0</Offset>
            <Offset>57F20</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
