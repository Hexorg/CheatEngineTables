<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <frmHookScanner Class="TCEForm" Encoding="Ascii85">by7WU,b_TSq+#:qBuIdc9kdkaP#EzMVkJQe+ic{+=$CCirDuyUMG7S4^9K?i$@_m!4)-.pdrL^Sl[stL0+?c^-uFXJ9fT(:m#26VU0e#8AI*WcCB$-@5Y9pF4PdUF?0NQ7bdhQ2hviH{VP}DsG{W2(,rkkkG!?*@S9OJ_X$!wZ7vZ2J.WaB4lz#_U2J3ZCza2!30?vGVL9@dXdlLz,v=P;k*g4m4!QGgTGjW5xN?7*@z}}*NrKc2bPTF!P)vpFyW!q=?]VrNt)N:ZmjL],h9l^L0A7zj%XW_x:fA};DuDSzqe?-.n_B4W+*{C2@o[%JEEVE_2z,?Mg=g9Zvf_WT{M^SOHZDFnTr{-{!mQ2$zFi5oTjew+vXLr6gA,uPfAZ[GV-pBfm0rpmE1ci_LFy?t,,8m[#=W;TUouWF:i3C]g@PnwzFOvLKC,R%Biqa#jxyqAsm:mM7n%+=o$E^N1#y3p.QftBendYC0lxX.u#eQFtJXkwO]oeVP,qB%KAIIFVCrf/1F8Z6vEw$a492bmg4KirUo+R]=35mT#PHXUm9/SE)[?DQ4FakyI.fyDlnb9FjgPF[y3j</frmHookScanner>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(mmm, 10)
registersymbol(mmm)

 mmm:
 db ff ff ff
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(mmm)
unregistersymbol(mmm)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>-- Hook scanner [CE Lua Plugin, ver 1.0]
allocMemory = false

local mainFrm = getMainForm()
storyBeginAdrressScaner = mainFrm.FromAddress.Lines.Text
storyEndAdrressScaner = mainFrm.ToAddress.Lines.Text


-- Устанавливает регион сканирования в главную форму CE
function SetMemoryScanOptions(startAddress, endAddress)
	local mainFrm = getMainForm()
	mainFrm.FromAddress.Lines.Text = string.format('%X', startAddress)
	mainFrm.ToAddress.Lines.Text = string.format('%X', endAddress)
end

function ResetMemoryScanOptions(startAddress, endAddress)
	local mainFrm = getMainForm()
	mainFrm.FromAddress.Lines.Text = storyBeginAdrressScaner
	mainFrm.ToAddress.Lines.Text = storyEndAdrressScaner
end

function convert(T)
	local tmp={}
	for k,v in pairs(T) do tmp[#tmp+1]={k,v} end
	table.sort(tmp,function (a,b) return a[1]&lt;b[1] end)
	return tmp
end



hookScannerModuleListTableData = {}

-- Этот модуль добавлен?
function ContainModule(module)
	for i = 1, #hookScannerModuleListTableData do
		if(hookScannerModuleListTableData[i][1] == module) then
			return hookScannerModuleListTableData[i]
		end
	end
	return nil
end

-- Этот Адрес добавлен?
function ContainAdress(aAddress)
	for i = 1, #hookScannerModuleListTableData do
		local storyData = hookScannerModuleListTableData[i][1][3]
		for j = 1, #storyData do
			if(storyData[j][1] == aAddress) then
				return true
			end
		end
	end
	return false
end

-- Добавить модуль и данные
function AddModule(moduleName)
	local line = {}
	table.insert(line, moduleName)
	if (dissectCode == nil) then dissectCode = getDissectCode() end
	dissectCode.clear()
	dissectCode.dissect(moduleName)
	tableReferencedFunctions = dissectCode.getReferencedFunctions()
	table.insert(line, tableReferencedFunctions)
	local tableData = GetStoryDataCalls(tableReferencedFunctions, dissectCode)
	table.insert(line, tableData)
	table.insert(line, true)
	table.insert(hookScannerModuleListTableData, line)
	return line
end

-- Выделить память размера iSize
function AllocMem(iSizeCodeMem, iSizeDataMem)
	local txtAA = [[
alloc(codeMem, ]]..tostring(iSizeCodeMem)..[[)
alloc(dataMem, ]]..tostring(iSizeDataMem)..[[)
registersymbol(codeMem)
registersymbol(dataMem)
]]
	print("AllocMem")
	print(txtAA)
	autoAssemble(txtAA)

	print('H')
	adressCodeMem = getAddress('codeMem')
	print('K')
	addressDataMem = getAddress('dataMem')

	return adressCodeMem, addressDataMem
end

-- Удалить память
function DeallocMem()
	local txtAA = [[
unregistersymbol(codeMem)
unregistersymbol(dataMem)
dealloc(codeMem)
dealloc(dataMem)
]]
	print("DeallocMem")
	print(txtAA)
	autoAssemble(txtAA)
end


-- Сохраняет оригинальный код
function GetStoryDataCalls(argTableReferencedFunctions, dissectCode)
	local storyData = {}

	for i = 1, #argTableReferencedFunctions do

		tableRefData = dissectCode.getReferences(argTableReferencedFunctions[i])

		referencesConv = convert(tableRefData)
		-- Выводим адреса инструкций, которые ссылаются на адрес функции
		for j=1,#referencesConv do
			local ref = referencesConv[j][1]
			-- type = 0 - jtCall,
			-- type = 1 - jtUnconditional (jmp dword ptr [00458014], jmp 00402DDC ...)
			-- type = 2 - jtConditional (je 0041F2D4,  jae 00414B48,  jl 00414428...)
			-- type = 3 - jtMemory ( mov [esi+30],00422950, mov eax,0040FD4C...)
			local type = referencesConv[j][2]
			if(type == 0 and not ContainAdress(ref)) then
				table.insert(storyData, {ref, readBytes(ref, 5, true ) })
			end
		end
	end
	return storyData
end

-- Отменяет хук
function RestoryDataCalls()
	for i = 1, #hookScannerModuleListTableData do
		local storyTable = hookScannerModuleListTableData[i][3]
		for j = 1, #storyTable do
			writeBytes(storyTable[1], storyTable[2])
		end
	end
end




function CEListViewModulesItemChecked(sender, listitem)


	pause()

	sizeInstructions = 0

	-- перед разрушением памяти вернуть оригинальный код по всем адресам
	RestoryDataCalls()
	print("A")

	-- очищение памяти
	if(allocMemory) then
		DeallocMem()
		allocMemory = false
	end

	local moduleName = ''
	local items = frmHookScanner.CEListViewModules.Items
	local count = items.Count


	for i = 0, count-1 do
		local item = items[i]

		moduleName = string.gsub(item.Caption, '(.*)\\', '')
		if (moduleName == '') then
			print('Not finding module ' .. moduleName)
			return
		end

		local itemModuleData = ContainModule(moduleName)
		if(itemModuleData ~= nil) then
			itemModuleData[4] = item.Checked
		end
		print("B")
		if (item.Checked) then
			-- Если этого модуля нет в истории, то добавить его
			if(itemModuleData == nil) then
				itemModuleData = AddModule(moduleName)
			end
		end
		print("C")
	end



	local callCount = 0	-- кол-во функций

	for i = 1, #hookScannerModuleListTableData do
		if(hookScannerModuleListTableData[i][4] == true) then
			callCount = callCount + #hookScannerModuleListTableData[i][3]
		end
	end

	print("D")
	-- Выделяем память специального размера под inc и прыжок обратно
	local sizeCodeMem = callCount * 12 -- размер памяти под код
	local sizeDataMem = callCount * 4  -- размер памяти под счетчики
	local allSize = sizeCodeMem + sizeDataMem

	if(callCount == 0) then
		ResetMemoryScanOptions()
		unpause()
		return
	end


	adressCodeMem, addressDataMem = AllocMem(sizeCodeMem, sizeDataMem)
	allocMemory = true


	print("E")
	-- Теперь пишем инъекции

	disassembler = getDefaultDisassembler()

	for i = 1, #hookScannerModuleListTableData do
		if(hookScannerModuleListTableData[i][4] == true) then
			local storyTable = hookScannerModuleListTableData[i][3]
			for j = 1, #storyTable do
				local currentAddress = storyTable[j][1]
				local sizeCurrentInstruction = getInstructionSize(currentAddress)

				if(sizeCurrentInstruction &lt; 5) then
					print(string.format('Пропущенна инструкция по адресу %s', currentAddress))
				else
					adressCodeCount = adressCodeMem + sizeInstructions
					adressDataCount = i*j*4 + addressDataMem

					local data = disassembler.getLastDisassembleData()

					if(sizeCurrentInstruction &gt; 5) then

						aaCode = string.format([[
	%x:
	inc [%x]
	jmp %s
	%x:
	call %x
	db %s
	]],
						adressCodeCount,
						adressDataCount,
						data["parameters"],
						currentAddress,
						adressCodeCount,
						string.rep(' 90', sizeCurrentInstruction - 5))
					else
						aaCode = string.format([[
	%x:
	inc [%x]
	jmp %s
	%x:
	call %x
	]],
						adressCodeCount,
						adressDataCount,
						data["parameters"],
						currentAddress,
						adressCodeCount)
					end


					autoAssemble(aaCode)
					sizeJmp = getInstructionSize(adressCodeCount + 6) -- PushF=2, Inc=6, Popf = 2
					sizeInstructions = sizeInstructions + 6 + sizeJmp
				end

			end
		end
	end

	unpause()

	SetMemoryScanOptions(addressDataMem, addressDataMem + sizeDataMem)

	print("F")
end




function UpdateHookScaner()
	if(getOpenedProcessID() == 0) then return end
	local items = frmHookScanner.CEListViewModules.Items
	items.clear()
	local modulesTable = enumModules()
	for i = 2,#modulesTable do
		local itemModule = items.add()
		itemModule.Caption = modulesTable[i].PathToFile
	end
end


function FormShow(sender)
	UpdateHookScaner()
end

function OnClickBtnUpdate(sender)
	UpdateHookScaner()
end


</LuaScript>
</CheatTable>
