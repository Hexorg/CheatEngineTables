<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Set Instruction (Set values to 1 to activate)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(lStartMoney)
label(retStartMoney)
label(lInfCores)
label(retInfCores)
label(lAllMoney)
label(retAllMoney)

registersymbol(bStartMoney)
registersymbol(bInfCores)
registersymbol(bAllMoney)

alloc(bStartMoney,1)
alloc(bInfCores,1)
alloc(bAllMoney,1)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here


originalcode:
movss [edx+10],xmm0
//if user wants to change starting money value
cmp byte ptr [bStartMoney],#01
je lStartMoney
retStartMoney:
cmp byte ptr [bInfCores],#01
je lInfCores
retInfCores:
cmp byte ptr [bAllMoney],#01
je lAllMoney
retAllMoney:
jmp exit
//if starting money value is at instruction
//jump to label that deals with it

//cmp [edx+c],(int)7 //if starting money value
//jne exit
//mov [edx+10],(float)24
lStartMoney:
cmp [edx+c],(int)10
jne retStartMoney
mov [edx+10],(float)50000
jmp retStartMoney

lInfCores:
cmp [edx+c],(int)6
jne retInfCores
mov [edx+10],(float)24
jmp retInfCores

lAllMoney:
cmp [edx+c],(int)13
jne retAllMoney
mov [edx+10],(float)50000
jmp retAllMoney

exit:
jmp returnhere

"DefenseGrid.exe"+516B2B:
jmp newmem

returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(bStartMoney)
dealloc(bInfCores)
dealloc(bAllMoney)
"DefenseGrid.exe"+516B2B:
movss [edx+10],xmm0
//Alt: db F3 0F 11 42 10
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"StartingResources = 50000"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>bStartMoney</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Freeze Cores at 24 (Can't Lose)"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>bInfCores</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Freeze Resources at 50000"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>bAllMoney</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"No CD on Orbital Strike"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//je DefenseGrid.exe+4D6A56
fst qword ptr [esi+000001A0]

exit:
jmp returnhere

"DefenseGrid.exe"+4D6A4E:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"DefenseGrid.exe"+4D6A4E:
je DefenseGrid.exe+4D6A56
fst qword ptr [esi+000001A0]
//Alt: db 74 06 DD 96 A0 01 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Orbital Strike is a double.
</Comments>
</CheatTable>
