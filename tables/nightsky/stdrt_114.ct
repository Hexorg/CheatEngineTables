<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>48</ID>
      <Description>"Environmental Station Alpha (steam) - use process stdrt.exe"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Cheats: (must enable &amp; trigger immunity cheat before using others)"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Lock damage immunity (enable this first &amp; take dmg to get base address)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)
globalalloc(_immune,4)

newmem:
mov ecx,[eax+08]
cmp ebx,00000040      // Assuming ebx is x40 only for player
//cmp ecx,3F
jne exit
mov [_immune],eax
mov ecx,03            // Set immune counter (seems to disable input if higher - game wont let you pause unless the counter is near 0)

exit:
mov [esp+18],ecx
jmp returnhere

"stdrt.exe"+11A26:
jmp newmem
nop
nop
returnhere:


[DISABLE]
dealloc(newmem)
"stdrt.exe"+11A26:
mov ecx,[eax+08]
mov [esp+18],ecx
//Alt: db 8B 48 08 89 4C 24 18
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Infinite double jump (requires having the jump boots item)"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
mov [eax+08],ecx
mov ebx,[_immune]   // Check if addressing player data
add ebx,30
cmp eax,ebx
jne exit
mov [eax+08],1     // Set double jump flag

exit:
pop edi
pop esi
jmp returnhere

"stdrt.exe"+11AD6:
jmp newmem
returnhere:



[DISABLE]
dealloc(newmem)
"stdrt.exe"+11AD6:
mov [eax+08],ecx
pop edi
pop esi
//Alt: db 89 48 08 5F 5E
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"Instant charge shot (requires charge shot item)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
mov ecx,[esp+18]
mov [eax+08],ecx
mov edi,[_immune]
sub edi,20
cmp eax,edi
jne exit
mov [eax+08],28

exit:
jmp returnhere

"stdrt.exe"+11982:
jmp newmem
nop
nop
returnhere:


[DISABLE]
dealloc(newmem)
"stdrt.exe"+11982:
mov ecx,[esp+18]
mov [eax+08],ecx
//Alt: db 8B 4C 24 18 89 48 08
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"Disable weapon cooldown"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
mov ecx,[eax+08]
cmp ecx,0000000C  // Cooldown constant
jne exit
mov edi,[_immune] // Check if writing to the counter variable
sub edi,30
cmp esi,edi
jne exit
mov ecx,0

exit:
mov [esi+08],ecx
jmp returnhere

"stdrt.exe"+117E6:
jmp newmem
nop
returnhere:


[DISABLE]
dealloc(newmem)
"stdrt.exe"+117E6:
mov ecx,[eax+08]
mov [esi+08],ecx
//Alt: db 8B 48 08 89 4E 08
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>65</ID>
      <Description>"Issues:"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <Color>000080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>66</ID>
          <Description>"Can't use teleporter while player is immune to damage"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"Using the dash items will remove damage immunity"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"Heat environment &amp; green liquid ignores damage immunity"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Base variables - cheats usable if these values are set"</Description>
      <Options moManualExpandCollapse="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>38</ID>
          <Description>"immune counter"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]+8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"double jump flag"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]+38</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"jump timer/gravity?"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]+58</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"gravity?"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]+B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"weapon cooldown"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]-28</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"weapon charge counter"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[_immune]-18</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"DEBUG STUFF - WIP"</Description>
      <Options moManualExpandCollapse="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Find HP (AOB sig lookup)"</Description>
          <Options moManualExpandCollapse="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(player, 3D 00 00 00 42 02 00 00 ?? ?? ?? ?? ?? ?? ?? ?? 07 00 7B 00 20 80 00 80 07 00 3E 00 ?? ?? ?? ??)
label(_player)
registersymbol(_player)

player:
_player:

[DISABLE]
unregistersymbol(_player)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"255 - HP"</Description>
              <VariableType>Byte</VariableType>
              <Address>_player+20A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"HP"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>_player+22A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"202?"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>_player+202</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"1FE?"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>_player+1FE</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"1FA?"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>_player+1FA</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"find HP (enable this &amp; take dmg, slight delay (copying data?))"</Description>
          <Options moManualExpandCollapse="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(INJECT,stdrt.exe,89 BE 0A 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

globalalloc(_playerbase,4)

newmem:
code:
  mov [_playerbase],esi
  mov [esi+0000020A],edi
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]
INJECT:
  db 89 BE 0A 02 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "stdrt.exe"+E446

"stdrt.exe"+E41B: 74 04                          -  je stdrt.exe+E421
"stdrt.exe"+E41D: 33 C0                          -  xor eax,eax
"stdrt.exe"+E41F: EB 13                          -  jmp stdrt.exe+E434
"stdrt.exe"+E421: DD 86 0A 02 00 00              -  fld qword ptr [esi+0000020A]
"stdrt.exe"+E427: E8 C2 28 04 00                 -  call stdrt.exe+50CEE
"stdrt.exe"+E42C: EB 06                          -  jmp stdrt.exe+E434
"stdrt.exe"+E42E: 8B 86 0A 02 00 00              -  mov eax,[esi+0000020A]
"stdrt.exe"+E434: 3B F8                          -  cmp edi,eax
"stdrt.exe"+E436: 0F 84 B4 00 00 00              -  je stdrt.exe+E4F0
"stdrt.exe"+E43C: C7 86 02 02 00 00 00 00 00 00  -  mov [esi+00000202],00000000
// ---------- INJECTING HERE ----------
"stdrt.exe"+E446: 89 BE 0A 02 00 00              -  mov [esi+0000020A],edi
// ---------- DONE INJECTING  ----------
"stdrt.exe"+E44C: E9 87 00 00 00                 -  jmp stdrt.exe+E4D8
"stdrt.exe"+E451: 83 E8 00                       -  sub eax,00
"stdrt.exe"+E454: 74 12                          -  je stdrt.exe+E468
"stdrt.exe"+E456: 83 E8 02                       -  sub eax,02
"stdrt.exe"+E459: 74 08                          -  je stdrt.exe+E463
"stdrt.exe"+E45B: DD 05 18 29 45 00              -  fld qword ptr [stdrt.exe+52918]
"stdrt.exe"+E461: EB 08                          -  jmp stdrt.exe+E46B
"stdrt.exe"+E463: DD 41 08                       -  fld qword ptr [ecx+08]
"stdrt.exe"+E466: EB 03                          -  jmp stdrt.exe+E46B
"stdrt.exe"+E468: DB 41 08                       -  fild dword ptr [ecx+08]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"hp"</Description>
              <VariableType>Byte</VariableType>
              <Address>[_playerbase]+20A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"hp value"</Description>
              <VariableType>Byte</VariableType>
              <Address>[_playerbase]+22A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"+0FC (slime flag?)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+0FC</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"+1FA"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+1FA</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>29</ID>
              <Description>"+1FE"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+1FE</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>30</ID>
              <Description>"+202"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+202</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>27</ID>
              <Description>"+20E"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+20E</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"+21A"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+21A</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"+222"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[_playerbase]+222</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_immune</Name>
      <Address>094A0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_playerbase</Name>
      <Address>069A0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
