<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">(6rJZ,cp?-B]dM}lEht-CflKah926)mNpm$6l+WB8lzd0C5W5]$c=tyn6pe8B)ucBKERGU=;p=cFR.sY+nMATq$o=4BFY*l0:xJ^Bp+Hh-{6FB-*;u0[oVaO=fUy2LdQ#IuRFU-hwwdjUf9)*5M2)r@ONm#$.A1=T0TbuK6HMuT@}$1BDfmOU-3f)F.8YU*(JS#hd#lKQ-CmMJ4Xm7@EPt;vjw#i!jLrYwkG5=WFt-^zAy-;RTF,5f+uTOVK3_w60*j*MH!*PvrpduJUAi3S_p(-i2bj$r2CbI@1kvYalXo;fiIdTfC{qA2==!P:]B^oEslV:D+[=g,Qa:Jp#d5_X=#bx(M67q#E+@K1o@_Q14i3}b25II4hv@*FJI4(C##iiy}y2SkzcL12@}NhOh6yu%N,$IQQjEObZON$g:cT!@nk.$R)yt#8GwulQwX;i!q+ERjNsHmQlAz:U3eEvV5pD)JSH.(@A-#NIKNrN1iW$rE^n8j/v$RvodSFb2j;t;M6v29q?2tcr0Y!y^G%aoQBI(mBYEDn)pTCGe853CWn4=*7A]Xwx6GI[d1*6jdA@]7]ZJ,g91R)-A%fvxabq.=e2USX,xz2K,;:kT.v)URwi.7jYn8QRKY{5I3o=F:fLWC144AgPm(F9m%EP-hmhu+6yo{Et9TTb{kSAq@A#cSr+MGH(VLUE{Q3X/;7Q$Ktfs$,1CLu4*@?x?EAs__AD+jK6]2BM6t00p0tS7aVZvtX9@T]ho1I%=4a/I%./cydS+_Lj=1dFx/DfC%CR.p#PD!lxThz$W:5/0y?k1%fn_FI3eiiNgI,u#Z(UO*C.D^?@pcg7(=PA72CL7?PyQ/}+r7Wu4:@1v)Uyjc3Hq8L9-vz_+m-up//H#zb0IcR?=[y!aocNAa1$(5gOp;hn^;FB8hkyu)jzQ(Ml:7*1]s8aboX((1V#uxEZ-rtt1+0bg@7;SW87_8]L7*92sBFxJh+@8$tKD93B9n0$#yB5GO.DGXqRTn:GA-*tbvn.D2@A0iICO0dg]0kOL)uWVF?m_TKFx-;kr_G!5ka5Bv5)cppqH=x1d#L]*ifCWNw5eTAy9P$edLi}!LAAGvL$R5=s+F{z4e4T;2UZ#]E7$Z:Ir=Y9x!9G1+OP1YI6gQR9k?G0;:=r:J5{$[t^oSACqWlOOJNnO-Ao(y668s5b-iF,[JUwYt^02XA}NrTsf}{^04f*m]ggvJu^uxe57,:sAs8Iva9U4utD/cMbwR#.B_OCWL=}_t#[2YOWBH/}Pf=T;xpez1.=kX@,xPl)tL/HJ5{,Spy_79)wU:b$g9GncX!W:d;k$k.PhmOpRMrI+nUHfXYftGpfQF}@qIz[GwlsvU7H}*fOBLQAm5}ZwQU!P/B9jl#eUjj#HTzrJQ9NE*a!G2PMBpCT_C3!^@$:mmb@.!qgYD^e0LGIL(PT{O?P:DyJvV}BkRP?IW$qedGVt#p/*^zBG=;foJH$^ggtfHhx3V;#dAHz]D[nBo%Iq.8-}@BhO7yzB?-_LpyV)(YcjB;=%qG!Lf8,$QVOakH</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"show helper"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(module,DarkSoulsIII.exe,00 00)
luacall(showHelper())

[DISABLE]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>function tohex(o) return string.format("%X",o) end
function tohex08(o) return string.format("%08X",o) end
function escape(str) return str:gsub('[[.*+?()^$%%-]','%%%1') end
getAutoAttachList().add('DarkSoulsIII.exe')

function readIntegerSigned(...)
  local val = readInteger(...)
  if val==nil then return nil end
  if val&gt;0x7fffffff then val=val-0x100000000 end
  return val
end

function findDescription(id,group)
  local descID = id &amp; 0x0FFFFFFF
  local descGroup = group+0xA
  local messageRepoGroup = readQword(readQword(readQword(messageRepo+8))+descGroup*8)
  if messageRepoGroup==0 then return '' end

  local regionsCount = readInteger(messageRepoGroup+0x0C)
  if regionsCount==0 then return '' end

  local TableWithIndexesToStrings = readQword(messageRepoGroup+0x18)
  local counter,adjust=0,0

  local left, right, I = 0, regionsCount-1, 0
  local ID_low,ID_hi

  ::loop::
  if left&gt;right then return '' end
  I = (left+right) // 2
  ID_low  = readInteger(messageRepoGroup+I*16+0x2C)
  if descID&lt;ID_low then right=I-1; goto loop end
  ID_hi  =  readInteger(messageRepoGroup+I*16+0x30)
  if descID&gt;ID_hi then left=I+1; goto loop end

  local offset = readInteger(messageRepoGroup+I*16+0x28)
  local index=descID-ID_low+offset
  local StringTableIndex = readQword(TableWithIndexesToStrings+index*8)
  if StringTableIndex~=0 then
    return AnsiToUtf8(readString(messageRepoGroup+StringTableIndex,2000,true))
  else
    return ''
  end
end

function showDescription(sender)
  local isBold = (sender.Font.Style == '[fsBold]')

  if isBold then
    sender.Font.Style = '[]'
    UDF1.memoDescription.Visible=false
  else
    sender.Font.Style = '[fsBold]'
    UDF1.memoDescription.Visible=true
    if selectedItemDetails~=nil then
      local id=selectedItemDetails.id
      local group=globalList[id].group
      local desc = findDescription(id,group)..'\r\n'..findDescription(id,group+4)
      UDF1.memoDescription.Lines.Text = desc
    end
  end
end

function userChoseItem(sender)
  if sender.ItemIndex==-1 then return end
  selectedItemDetails = listToShow[sender.ItemIndex+1]
  local id=selectedItemDetails.id
  local name=selectedItemDetails.name
  local group = globalList[id].group
  UDF1.editShowChosenItem.Text = 'ID: '..tohex08(id)..' ,  name: '..name

  if (UDF1.btnShowDescription.Font.Style == '[fsBold]') then
    local desc = findDescription(id,group)..'\r\n'..findDescription(id,group+4)
    UDF1.memoDescription.Lines.Text = desc
  end
end

function listItemsFromGroup(group)
  local messageRepoGroup = readQword(readQword(readQword(messageRepo+8))+group*8)
  if messageRepoGroup==0 then print('blah 1') return 0 end

  local regionsCount = readInteger(messageRepoGroup+0x0C)
  if regionsCount==0 then print('blah 2') return 0 end

  local TableWithIndexesToStrings = readQword(messageRepoGroup+0x18)
  local counter,adjust=0,0

  if group==0xA then adjust = 0x40000000 end --goods
  if group==0xB then adjust = 0x00000000 end --weapons
  if group==0xC then adjust = 0x10000000 end --protectors
  if group==0xD then adjust = 0x20000000 end --accessory
  if group==0xE then adjust = 0x40000000 end --magic


  for i=0,regionsCount-1 do repeat
    local ID_low  = readInteger(messageRepoGroup+i*16+0x2C)
    local ID_hi   = readInteger(messageRepoGroup+i*16+0x30)
    local offset  = readInteger(messageRepoGroup+i*16+0x28)

    if group==0xB and (ID_low&lt;=0x1ADB0 ) then break end --skip bogus weapon items
    if group==0xC and (ID_low&lt;=0xF4DF8 ) then break end --skip bogus protector items
    if group==0xE and (ID_low&lt;=0x1716 )  then break end --skip bogus magic items

    for subID=ID_low,ID_hi do
      local index=subID-ID_low+offset
      local StringTableIndex = readQword(TableWithIndexesToStrings+index*8)

      if StringTableIndex~=0 then
        local name=AnsiToUtf8(readString(messageRepoGroup+StringTableIndex,200,true))
        local ID=subID | adjust
        if not globalList[ID] then
          --print(tohex08(ID),name)
          globalList[ID]={name=name,group=group}
        end
        counter=counter+1
      end
    end -- subID loop

  until true end -- regions loop
  globalCounter=globalCounter+counter
  return counter
end

function gatherAllItems()
  --signatureUsedToFindPointerToMessageRepo
  local sig=([[
40 53 48 83 EC 20 48 8B D9 48 8B 0D xx xx xx xx 48 85 C9 75 26
4C 8D 0D xx xx xx xx 4C 8D 05 xx xx xx xx 48 8D 0D xx xx xx xx
BA AA 00 00 00 E8 xx xx xx xx 48 8B 0D xx xx xx xx 8B 13 48 83
C4 20 5B E9]]):gsub('\n',' ')

  if not
  autoAssemble("aobscanmodule(spotAOB,DarkSoulsIII.exe,"..sig..")\n"..
               "label(messageRepoP)\n"..
               "registersymbol(messageRepoP)\n"..
               "spotAOB+C:\n"..
               "messageRepoP:\n")
  then print('no signature') return end

  local messageRepoP = readIntegerSigned('messageRepoP')+getAddress('messageRepoP')+4
  local tmpMessageRepo = readQword(messageRepoP)
  if tmpMessageRepo==nil then print('blah 0') return end
  messageRepo=tmpMessageRepo

  globalList={}
  globalListSorted={}
  globalCounter=0

  tools={}; materials={}; keyItems={}; spells={}
  rangedWeapons={}; catalysts={}; shields={}
  meleeWeapons={}; armor={}; arrowsAndBolts={}
  ringsAndCovenant={}; noCategory={}

  listItemsFromGroup(0xE)
  listItemsFromGroup(0xA)
  listItemsFromGroup(0xB)
  listItemsFromGroup(0xC)
  listItemsFromGroup(0xD)

  for k,v in pairs(globalList) do
    globalListSorted[#globalListSorted+1]={id=k,name=v.name}
  end
  table.sort(globalListSorted,function (a,b) return a.id&lt;b.id end)

  for i,v in ipairs(globalListSorted) do
    local id = v.id
    local firstDigit = id // 0x10000000
    local t = {id=v.id, name=v.name}
    if     firstDigit==1                   then table.insert(armor,t)
    elseif firstDigit==2                   then table.insert(ringsAndCovenant,t)
    elseif id&gt;0x40000063 and id&lt;0x400002E8 then table.insert(tools,t)
    elseif id&gt;0x400003E7 and id&lt;0x400004E3 then table.insert(materials,t)
    elseif id&gt;0x400007D0 and id&lt;0x40000869 then table.insert(keyItems,t)
    elseif id&gt;0x40124F7F and id&lt;0x4039ADA1 then table.insert(spells,t)
    elseif id&gt;0x00CF84FF and id&lt;0x00D83D6D then table.insert(rangedWeapons,t)
    elseif id&gt;0x00C7208F and id&lt;0x00CE2571 then table.insert(catalysts,t)
    elseif id&gt;0x01312CFF and id&lt;0x015EF3C1 then table.insert(shields,t)
    elseif id&gt;0x00061A7F and id&lt;0x00062C79 then table.insert(arrowsAndBolts,t)
    elseif firstDigit==0                   then table.insert(meleeWeapons,t)
    else                                        table.insert(noCategory,t)
    end
  end
  return true
end

function bindLabelsWithTables_andSetEvents()
  local function bindingHelper(C,T)
    binds_LabelsTables[userDataToInteger(C)]={tab=T,comp=C}
    C.OnClick = thisGroupOnly
  end

  binds_LabelsTables={}
  bindingHelper(UDF1.lblTools,tools)
  bindingHelper(UDF1.lblKeyItems,keyItems)
  bindingHelper(UDF1.lblMaterials,materials)
  bindingHelper(UDF1.lblSpells,spells)
  bindingHelper(UDF1.lblRangedWeapons,rangedWeapons)
  bindingHelper(UDF1.lblCatalysts,catalysts)
  bindingHelper(UDF1.lblShields,shields)
  bindingHelper(UDF1.lblMeleeWeapons,meleeWeapons)
  bindingHelper(UDF1.lblArmor,armor)
  bindingHelper(UDF1.lblArrowsBolts,arrowsAndBolts)
  bindingHelper(UDF1.lblRingsCovenant,ringsAndCovenant)
  bindingHelper(UDF1.lblNoCategory,noCategory)
  UDF1.editUserTypedFilter.OnChange=filterAndUpdate
  UDF1.btnShowDescription.OnClick=showDescription
  UDF1.listboxItems.OnSelectionChange=userChoseItem
  UDF1.btnIWantThisOne.Enabled=false
end

function thisGroupOnly(sender)
  local isBold = (sender.Font.Style == '[fsBold]')

  for _,v in pairs(binds_LabelsTables) do
    if v.comp~=sender then v.comp.Font.Style='[]' end
  end

  if isBold then
    sender.Font.Style = '[]'
    chosenList=globalListSorted
  else
    sender.Font.Style = '[fsBold]'
    chosenList=binds_LabelsTables[userDataToInteger(sender)].tab
  end

  filterAndUpdate(UDF1.editUserTypedFilter)
end

if delayedUpdateTheList==nil then delayedUpdateTheList=createTimer(nil,false) end
delayedUpdateTheList.OnTimer = function (t) t.Enabled=false; updateTheList() end
delayedUpdateTheList.Interval=500

function filterAndUpdate(sender)
  local filter = escape(sender.Text)

  listToShow={}
  for i,v in ipairs(chosenList) do
   if v.name:upper():match( filter:upper() ) then
    listToShow[1+#listToShow]=v
   end
  end

  delayedUpdateTheList.Enabled=false
  delayedUpdateTheList.Enabled=true
end

function updateTheList()
  UDF1.listboxItems.Items.clear()
  local str=createStringlist()
  for _,v in ipairs(listToShow) do
    str.add( v.name )
  end
  UDF1.listboxItems.Items=str
  UDF1.lblCounter.Caption='counter: '..#listToShow
end

function showHelper()
  if (globalList==nil) or (globalList==0) then
    if gatherAllItems() then
      bindLabelsWithTables_andSetEvents()
      chosenList=globalListSorted
      filterAndUpdate(UDF1.editUserTypedFilter)
    end
  end

  UDF1.show()
end
</LuaScript>
</CheatTable>
