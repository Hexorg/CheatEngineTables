<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>613</ID>
      <Description>"UNLOCK ALL PATREON STUFF - EMULATE UNLOCKER FILE"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>614</ID>
          <Description>"--[UNLOCKER]--"</Description>
          <DropDownList>0:OFF
6356240 :ON
</DropDownList>
          <LastState Value="6356240" Activated="1" RealAddress="0F7E65F0"/>
          <Color>000000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>TQPointer</Address>
          <Offsets>
            <Offset>6B0EC8</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>615</ID>
              <Description>"====== Double click Value for Dropdown list"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>787878</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>616</ID>
          <Description>"Debug Command"</Description>
          <LastState Value="0" RealAddress="0F6DD7BE"/>
          <VariableType>4 Bytes</VariableType>
          <Address>TQPointer</Address>
          <Offsets>
            <Offset>5A8096</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>617</ID>
              <Description>"====== 0 = Off | 1 = On  &gt;&gt;&gt; See the link below for debug commands"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>787878</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>618</ID>
              <Description>"http://trapquest.com/wiki/index.php?title=Commands#Debug_commands"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <Color>787878</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>619</ID>
          <Description>"Menu Choices only work when Unlocker Pointer has been activated"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>624</ID>
              <Description>"File Based Undo"</Description>
              <LastState Value="0" RealAddress="0F7E6AA2"/>
              <VariableType>4 Bytes</VariableType>
              <Address>TQPointer</Address>
              <Offsets>
                <Offset>6B137A</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>625</ID>
                  <Description>"====== guaranted to make undo work properly, but can slow down game"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>787878</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>-- Credit to Dark Byte for included Type: http://forum.cheatengine.org/viewtopic.php?p=5599863#5599863
-- Credit to Zanzer for offset identifer: http://forum.cheatengine.org/viewtopic.php?p=5611308#5611308

registerCustomTypeAutoAssembler([[
alloc(TypeName,256)
alloc(ByteSize,4)
alloc(ConvertRoutine,1024)
alloc(ConvertBackRoutine,1024)

TypeName:
db 'TQ Big Endian',0

ByteSize:
dd 4

//The convert routine should hold a routine that converts the data to an integer (in eax)
//function declared as: stdcall int ConvertRoutine(unsigned char *input);
//Note: Keep in mind that this routine can be called by multiple threads at the same time.
ConvertRoutine:
//jmp dllname.functionname
[64-bit]
//or manual:
//parameters: (64-bit)
//rcx=address of input
xor eax,eax
mov eax,[rcx] //eax now contains the bytes 'input' pointed to
bswap eax //convert to big endian

ret
[/64-bit]

[32-bit]
//jmp dllname.functionname
//or manual:
//parameters: (32-bit)
push ebp
mov ebp,esp
//[ebp+8]=input
//example:
mov eax,[ebp+8] //place the address that contains the bytes into eax
mov eax,[eax] //place the bytes into eax so it's handled as a normal 4 byte value

bswap eax

pop ebp
ret 4
[/32-bit]

//The convert back routine should hold a routine that converts the given integer back to a row of bytes (e.g when the user wats to write a new value)
//function declared as: stdcall void ConvertBackRoutine(int i, unsigned char *output);
ConvertBackRoutine:
//jmp dllname.functionname
//or manual:
[64-bit]
//parameters: (64-bit)
//ecx=input
//rdx=address of output
//example:
bswap ecx //convert the little endian input into a big endian input
mov [rdx],ecx //place the integer the 4 bytes pointed to by rdx

ret
[/64-bit]

[32-bit]
//parameters: (32-bit)
push ebp
mov ebp,esp
//[ebp+8]=input
//[ebp+c]=address of output
//example:
push eax
push ebx
mov eax,[ebp+8] //load the value into eax
mov ebx,[ebp+c] //load the address into ebx

//convert the value to big endian
bswap eax

mov [ebx],eax //write the value into the address
pop ebx
pop eax

pop ebp
ret 8
[/32-bit]
]])


-- list of process names with their corresponding offsets
offset_list = {
  ["git.exe"] = "161CC", --Gargoyle git
  ["glulxe.exe"] = "10020", --Gargoyle Glulxe
--  ["Git.exe"] = "1B1E8", --WinGit 1.3.3
  ["Git.exe"] = "191B8", --WinGit 1.3.4
  ["Glulxe.exe"] = "10238", --WinGlulxe
  ["Glulxe (no memory checks).exe"] = "F238" --WinGlulxe alt

}
-- function to retrieve process name from id
function GetProcessNameFromId(processId)
  local processName = nil
  local list = createStringlist()
  getProcesslist(list)
  for i = 0, list.Count-1 do
    local id, name = list.String[i]:match("(.*)-(.*)")
    if processId == tonumber(id, 16) then
      processName = name
      break
    end
  end
  return processName
end

-- function to call when attached
function onOpenProcess(processId)
  unregisterSymbol("TQPointer")
  -- find our process name
  local processName = GetProcessNameFromId(processId)
  -- find our offset
  local offset = nil
  if processName ~= nil then
    offset = offset_list[processName]
  end
  if offset == nil then
    -- name or offset was not found
    showMessage("Unknown Process: "..processName)
  else
    -- register our table variable
    reinitializeSymbolhandler()
    registerSymbol("TQPointer", processName.."+"..offset, true)
  end
end
</LuaScript>
</CheatTable>
