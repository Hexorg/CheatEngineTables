<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"setup testing"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

function step_count(i)
  local e = errorOnLookupFailure(false)
  local b = readBytes('step_count+8')
  if b~=nil then
    if type(i)=='number' then b = i else b = b + 1 end
    writeBytes('step_count+8',b % 256 )
  end
  errorOnLookupFailure(e)
  return tostring(b)
end

function aa_showtext(s,sc)
  if s=='' or s=='TEST' or sc==true then return '// test' end -- don't execute this AA when syntaxcheck or testing
  print('text:&lt;'..s..'&gt;  step: '..step_count())
  return '//'..s
end

function pp_showtext(script,sc) -- script is StringList of unmodified common section + [ENABLE/DISABLE] section of
  if sc==true then script.Text = '// test' end -- don't execute original script(StringList) when syntaxcheck
  -- else unmodified script but just a message
  print(" ")
  print("Prologue start- step: "..step_count(0))
end

if _regID~=nil then unregisterAutoAssemblerPrologue(_regID) _regID=nil end
_regID = registerAutoAssemblerPrologue(pp_showtext)

if autoAssemble('AAShowText()') then unregisterAutoAssemblerCommand('aashowtext') end
registerAutoAssemblerCommand('aashowtext',aa_showtext)

openProcess('cheatengine-x86_64.exe')

{$asm}

globalalloc(step_count,16)

[ENABLE]

//alloc(aob_pattern,$100,7fffffffffffffff)
alloc(aob_pattern,$100,7fffffff)

aob_pattern:
db 11 22 34 55 67 11 23 45 66 77 88

registersymbol(aob_pattern)

[DISABLE]
dealloc(aob_pattern)
unregistersymbol(aob_pattern)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"aa script execute order (scan pattern found W/O syntax error)"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// AA test start

AAShowText(1st AA command)

define(LUDO,cheatengine-x86_64.exe) // or replace with currently *.exe having most memory

AAShowText(after LUDO)

[ENABLE]

AAShowText(before AobScan)


// pattern existed
AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28)

// pattern not existed
//AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28 11 11 11 11 11)

AAShowText(after AobScan)


aob_pattern+10:
readmem(step_count+8,4)


AAShowText(before Lua Block, after readmem)

{$lua}
print('Lua Block return')
return 'AAShowText(AAShowText generated by Lua Block Return)'
{$asm}

AAShowText(after Lua Block, before syntaxerror)

{
-- syntax error on purpose ---

-- AAShowText itself never throw error,
-- so if using 'AOBSCANMODULE for existed pattern' and REMOVE COMMENT of this
-- Block. AAShowText will alway run till previous command before on-purpose
-- syntax error. THAT MEANS AAShowText can run even till an error.

-- Now, remove the comment before 'AOBSCANMODULE for NOT existed pattern',
-- and comment out this Block,
-- the script should not activate, AND NOT ANY AAShowText run.

-- that means the 'AOBSCANMODULE NOT FOUND' Error happended
-- before OTHER AA command even start eg. define(LUDO,...) etc.

}

AAShowText(after syntax error)



[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"aa script execute order (scan pattern found with syntax error)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// AA test start

AAShowText(1st AA command)

define(LUDO,cheatengine-x86_64.exe) // or replace with currently *.exe having most memory

AAShowText(after LUDO)

[ENABLE]

AAShowText(before AobScan)


// pattern existed
AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28)

// pattern not existed
//AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28 11 11 11 11 11)

AAShowText(after AobScan)


aob_pattern+10:
readmem(step_count+8,4)


AAShowText(before Lua Block, after readmem)

{$lua}
print('Lua Block return')
return 'AAShowText(AAShowText generated by Lua Block Return)'
{$asm}

AAShowText(after Lua Block, before syntaxerror)


-- syntax error on purpose ---

-- AAShowText itself never throw error,
-- so if using 'AOBSCANMODULE for existed pattern' and REMOVE COMMENT of this
-- Block. AAShowText will alway run till previous command before on-purpose
-- syntax error. THAT MEANS AAShowText can run even till an error.

-- Now, remove the comment before 'AOBSCANMODULE for NOT existed pattern',
-- and comment out this Block,
-- the script should not activate, AND NOT ANY AAShowText run.

-- that means the 'AOBSCANMODULE NOT FOUND' Error happended
-- before OTHER AA command even start eg. define(LUDO,...) etc.



AAShowText(after syntax error)



[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"aa script execute order (scan with pattern not existed)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// AA test start

AAShowText(1st AA command)

define(LUDO,cheatengine-x86_64.exe) // or replace with currently *.exe having most memory

AAShowText(after LUDO)

[ENABLE]

AAShowText(before AobScan)


// pattern existed
//AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28)

// pattern not existed
AOBScanModule(TUT1,cheatengine-x86_64.exe,48 8d 64 24 28 11 11 11 11 11)

AAShowText(after AobScan)


aob_pattern+10:
readmem(step_count+8,4)


AAShowText(before Lua Block, after readmem)

{$lua}
print('Lua Block return')
return 'AAShowText(AAShowText generated by Lua Block Return)'
{$asm}

AAShowText(after Lua Block, before syntaxerror)

{
-- syntax error on purpose ---

-- AAShowText itself never throw error,
-- so if using 'AOBSCANMODULE for existed pattern' and REMOVE COMMENT of this
-- Block. AAShowText will alway run till previous command before on-purpose
-- syntax error. THAT MEANS AAShowText can run even till an error.

-- Now, remove the comment before 'AOBSCANMODULE for NOT existed pattern',
-- and comment out this Block,
-- the script should not activate, AND NOT ANY AAShowText run.

-- that means the 'AOBSCANMODULE NOT FOUND' Error happended
-- before OTHER AA command even start eg. define(LUDO,...) etc.

}

AAShowText(after syntax error)



[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>step_count</Name>
      <Address>08AE0010</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>--

function step_count(i)
  local b = readBytes('step_count+8')
  if b~=nil then
    if type(i)=='number' then b = i else b = b + 1 end
    writeBytes('step_count+8',b % 256 )
  end
  return tostring(b)
end

function aa_showtext(s,sc)
  if s=='' or s=='TEST' or sc==true then return '// test' end -- don't execute this AA when syntaxcheck or testing
  print('text:&lt;'..s..'&gt;  step: '..step_count())
  return '//'..s
end

function pp_showtext(script,sc) -- script is StringList of unmodified common section + [ENABLE/DISABLE] section of
  if sc==true then script.Text = '// test' end -- don't execute original script(StringList) when syntaxcheck
  -- else unmodified script but just a message
  print("Prologue start- step: "..step_count(0))
end

if _regID~=nil then unregisterAutoAssemblerPrologue(_regID) end
_regID = registerAutoAssemblerPrologue(pp_showtext)

if autoAssemble('AAShowText()') then unregisterAutoAssemblerCommand('aashowtext') end
registerAutoAssemblerCommand('aashowtext',aa_showtext)


autoAssemble('AAShowText(Hello ShowText)')
</LuaScript>
</CheatTable>
