<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>122</ID>
      <Description>"Infinite Jetpack"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//Jetpack is (float)1 decreasing to 0. Right value is a green static address.

originalcode:
//fsub dword ptr [esp+14]
fldz 

exit:
jmp returnhere

"rfg.exe"+3FD368:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+3FD368:
fsub dword ptr [esp+14]
fldz 
//Alt: db D8 64 24 14 D9 EE
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Infinite Clip"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//Clip is a 4-byte in green static memory. Easy to find.

originalcode:
mov dword ptr [ebx+00000204],#99

exit:
jmp returnhere

"rfg.exe"+32F945:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+32F945:
add dword ptr [ebx+00000204],FF
//Alt: db 83 83 04 02 00 00 FF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>59</ID>
      <Description>"Infinite Health"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [ecx+00000904],(float)999999

originalcode:
fdivr dword ptr [ecx+00000904]

exit:
jmp returnhere

"rfg.exe"+42484d:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
//"rfg.exe"+422D9D:
"rfg.exe"+42484d:
fdivr dword ptr [ecx+00000904]
//Alt: db D8 B9 04 09 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>232</ID>
      <Description>"Infinite Health for Everyone (because hostages are dumb)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)

newmem:
//This can be found easily with an aobscan. I'd switch but lazy.
fld dword ptr [ebx+00000AD0] //load max health
fst dword ptr [ebx+00000904]
jmp exit

exit:
jmp returnhere

"rfg.exe"+3CD181:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
//"rfg.exe"+3CB7A1:
"rfg.exe"+3CD181:
fld dword ptr [esp+0C]
fst dword ptr [ebx+00000904]
//Alt: db D9 44 24 0C D9 93 04 09 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Infinite Bombs"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//can find easily through aob.

originalcode:
mov [ebx+00000208],#99

exit:
jmp returnhere

"rfg.exe"+32d652:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+32d652:
mov [ebx+00000208],eax
//Alt: db 89 83 08 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"One Shot Kill (explosions will kill you dead)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)
label(enemy_exit)


alloc(zero_space,4)
registersymbol(zero_space)

newmem:
//simple aobscan to find this again
test esi,esi //enemy check
jne enemy_exit
jmp exit

enemy_exit:
fld dword ptr [zero_space]
fst dword ptr [ebx+00000904]
jmp exit


exit:
jmp returnhere

"rfg.exe"+3Cd181:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(zero_space)
"rfg.exe"+3Cd181:
fld dword ptr [esp+0C]
fst dword ptr [ebx+00000904]
//Alt: db D9 44 24 0C D9 93 04 09 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>241</ID>
      <Description>"Set Zone Morale to 100"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//Zone morale is in float and in green static memory

mov dword ptr [ecx+00000098],(float)100

originalcode:
fld dword ptr [ecx+00000098]

exit:
jmp returnhere

"rfg.exe"+85b7:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+85b7:
fld dword ptr [ecx+00000098]
//Alt: db D9 81 98 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>131</ID>
      <Description>"Keep Alarm Green"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(zero_space,4)
registersymbol(zero_space)

newmem:
//Green is 0, yellow is float 300+, value is in green static memory. the compare value
//is a 4-byte that is 0 on green, 1 on yellow, it's just there to know when to kick in the code I wrote
//since shoving zero in there all the time doesn't work right.
cmp dword ptr [rfg.exe+Dc0148],0
je originalcode
fstp dword ptr [zero_space]
mov dword ptr [rfg.exe+Dc0140],0
jmp exit


originalcode:
fld dword ptr [rfg.exe+Dc0140]
jmp exit

exit:
jmp returnhere

"rfg.exe"+10Ec39:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(zero_space)
"rfg.exe"+10Ec39:
fld dword ptr [rfg.exe+Dc0140]
//Alt: db D9 05 98 92 1A 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>265</ID>
      <Description>"Super Jump (l0wb1t)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
//found again via aob
mov dword ptr [ebp+00000B20], (float)10 //1.2 is normal.

originalcode:
fld dword ptr [ebp+00000B20]

exit:
jmp returnhere

"rfg.exe"+3C65f3:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+3C65f3:
fld dword ptr [ebp+00000B20]
//Alt: db D9 85 20 0B 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>269</ID>
      <Description>"Super Sprint"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//found again via aob, took a few tries

mov dword ptr [ebp+00000284],(float)30 //Sprint is normally 8.

originalcode:
fcomp dword ptr [ebp+00000314]

exit:
jmp returnhere

"rfg.exe"+3Fae31:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+3Fae31:
fcomp dword ptr [ebp+00000314]
//Alt: db D8 9D 14 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"Infinite Car Health"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
originalcode:
//found again via aob
sub eax,[ecx+00003D10]
cmp byte ptr [ecx+00004031],1
jne exit
mov [ecx+00003D10],#99919
jmp exit

exit:
jmp returnhere

"rfg.exe"+2914cd:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"rfg.exe"+2914cd:
sub eax,[ecx+00003D10]
//Alt: db 2B 81 10 3D 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Info about this table:
</Comments>
</CheatTable>
