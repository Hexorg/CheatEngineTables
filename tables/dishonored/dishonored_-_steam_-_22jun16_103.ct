<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Inf. Mines"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [eax],#99
originalcode:
mov eax,[eax]
mov [ebp-28],eax

exit:
jmp returnhere

"Dishonored.exe"+79F991:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+79F991:
mov eax,[eax]
mov [ebp-28],eax
//Alt: db 8B 00 89 45 D8
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Inf. Health"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

//alloc(max_health,4)
//registersymbol(max_health)

newmem: //this is allocated memory, you have read,write,execute access
//called cont.
//mov [max_health],ebx
//mov ebx+00000344,[max_health+348]
//mov eax,[ebx+00000348] //move max health value into current health
//mov [ebx+00000344],eax
mov [ebx+00000344],#1000
originalcode:
//mov eax,[ebx+00000344]

exit:
jmp returnhere

"Dishonored.exe"+79F4D8:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
//dealloc(max_health)
//unregistersymbol(max_health)
"Dishonored.exe"+79F4D8:
mov eax,[ebx+00000344]
//Alt: db 8B 83 44 03 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Inf. Ammo"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [eax+esi*8],#99

originalcode:
mov edx,[eax+esi*8]
xor ecx,ecx

exit:
jmp returnhere

"Dishonored.exe"+804E92:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+804E92:
mov edx,[eax+esi*8]
xor ecx,ecx
//Alt: db 8B 14 F0 33 C9
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Inf. Mana"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[ecx+00000A64]
mov [ecx+00000A60],eax

originalcode:
//mov eax,[ecx+00000A60]

exit:
jmp returnhere

"Dishonored.exe"+6A1690:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+6A1690:
mov eax,[ecx+00000A60]
//Alt: db 8B 81 60 0A 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Inf. RedEye"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//Red Eye
mov [ecx+00000094],(float)1
originalcode:
movss xmm1,[ecx+00000094]

exit:
jmp returnhere

"Dishonored.exe"+7E6D80:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+7E6D80:
movss xmm1,[ecx+00000094]
//Alt: db F3 0F 10 89 94 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Inf. Bend Time"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
fstp dword ptr [esi+00000098]
mov [esi+00000098],(float)9999999
exit:
jmp returnhere

"Dishonored.exe"+7F4F2F:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+7F4F2F:
fstp dword ptr [esi+00000098]
//Alt: db D9 9E 98 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Triple Blink Distance"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//called once on right click

originalcode:
fstp dword ptr [esi+00000104]
mov [esi+00000104],(float)6000 //1920f is the max with upgrades and Void charm
//mov [esi+00000108],(float)1200 //600f is the normal for vertical distance
exit:
jmp returnhere

"Dishonored.exe"+7F8876:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+7F8876:
fstp dword ptr [esi+00000104]
//Alt: db D9 9E 04 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Double Vert Distance"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
fstp dword ptr [esi+00000108]
mov [esi+00000108],(float)1200 //600f is the normal for vertical distance

exit:
jmp returnhere

"Dishonored.exe"+7F888E:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+7F888E:
fstp dword ptr [esi+00000108]
//Alt: db D9 9E 08 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>40</ID>
      <Description>"Inf. Possession"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+00000094],(float)5
originalcode:
comiss xmm0,[esi+00000094]

exit:
jmp returnhere

"Dishonored.exe"+7FB2E6:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Dishonored.exe"+7FB2E6:
comiss xmm0,[esi+00000094]
//Alt: db 0F 2F 86 94 00 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
