<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <Description>"iEnableWare "</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableWare </Address>
    </CheatEntry>
    <CheatEntry>
      <Description>"iEnableGold"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGold</Address>
    </CheatEntry>
    <CheatEntry>
      <Description>"iEnableMP"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMP</Address>
    </CheatEntry>
    <CheatEntry>
      <Description>"iEnableGM"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGM</Address>
    </CheatEntry>
    <CheatEntry>
      <Description>"Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// The Settlers 6 - Rise of an Empire
// The Settlers 6 - Rise of an Empire - The Eastern Realm
// Game Version  : 1.5.4279
// Script Version: 1.0
// CE Version    : 5.5
// GodMode, Gold and Basic Resources
// 14-Feb-09

[ENABLE]
alloc(MyCode,1024)

// Declaration session
label(_MonGoldWare)
label(_MonProd)
label(_GodMode)
label(_BackMG)
label(_BackMP)
label(_BackGM)
label(_ExitMG)
label(_ExitMP)
label(_ExitGM)
label(_MonP0)
label(_MonP1)
label(_MonG0)
label(_MonG1)
label(_MonG2)
label(_MonG3)
label(_MonG4)
label(_MonG5)
label(pGold)
label(pGoldQtt)
label(pWarehouse)
label(iEnableGold)
label(iEnableWare)
label(iAvSpace)
label(iEnableMP)
label(iEnableGM)
label(iOffsetDisp)
label(iOffsetWH)
label(iMinimum1)
label(iMinimum2)

registersymbol(MyCode)
registersymbol(pGold)
registersymbol(pGoldQtt)
registersymbol(pWarehouse)
registersymbol(iEnableGold)
registersymbol(iEnableWare)
registersymbol(iEnableMP)
registersymbol(iEnableGM)

//=========================================
// Hacking Points
Settlers6.exe+13a271:
 jmp _MonProd
 nop
_BackMP:

Settlers6.exe+141234:
 jmp _MonGoldWare
 nop
_BackMG:

Settlers6.exe+136f47:
 jmp _GodMode
 nop
_BackGM:

MyCode:
//=========================================
_MonGoldWare:
 push ecx
 push edx
 push edi
 push ebp

 cmp dword ptr [iEnableGold],0
 je _MonG0                    // Jump if feature is disabled

 cmp dword ptr [esi+38],#99000
 jne _MonG0                   // Jump if it is not gold

 cmp esi,[pGold]              // PlayerÂ´s gold?
 jne _ExitMG                  // Jump if false

 mov eax,[esi+18]             // Get poiter to gold quantity
 mov [pGoldQtt],eax           // Save it for debugging

 mov ecx,#30000
 cmp ecx,[eax+04]             // Current gold &gt; 30000?
 jle _ExitMG                  // Jump if true

 mov [eax+04],ecx             // Make gold = 30000

 mov eax,[Settlers6.exe+700EBC]
 mov eax,[eax+28]
 mov eax,[eax+08]

 mov [eax+0000009c],ecx       // Update displayed value
 jmp _ExitMG

_MonG0:
 cmp dword ptr [iEnableWare],0
 je _ExitMG                   // Jump if feature is disabled

 cmp esi,[pWarehouse]         // PlayerÂ´s warehouse?
 jne _ExitMG                  // Jump if false

 xor edx,edx
 mov ecx,#250
 mov [esi+4c],#100000         // Set Warehouse limit to 100000
 mov eax,[esi+4c]             // Get maximum value
 div ecx                      // EAX = Maximum / 250
 mov ecx,#20
 mul ecx                      // EAX = EAX * 20
 mov [iMinimum1],eax
 shr eax,1                    // EAX = EAX / 2
 mov [iMinimum2],eax

 mov ecx,[esi+4c]             // Get maximum value
 sub ecx,[esi+48]             // Decrease total in stock
 cmp ecx,#100                 // Is there space in the Warehouse?
 jle _ExitMG                  // Jump if false

 sub ecx,#100
 mov [iAvSpace],ecx           // Space available in the warehouse

 mov eax,[Settlers6.exe+700EBC]
 mov eax,[eax+28]
 mov edi,[eax+08]             // Get display structure address

 mov edx,[esi+18]             // Get pointer to warehouse stock

 mov ecx,2                    // Wood and Stone

_MonG1:
 or ecx,ecx                   // Finished?
 jz _MonG3                    // Jump if true

 dec ecx                      // Adjust Index
 mov eax,[iMinimum1]          // Minimum value
 cmp eax,[iAvSpace]           // Is this value available?
 jle _MonG2                   // Jump if true

 mov eax,[iAvSpace]           // EAX = Available value

_MonG2:
 mov ebp,[iOffsetDisp+ecx*4]  // Get display offset
 cmp eax,[edi+ebp]            // Current value &gt;= minimum?
 jle _MonG1                   // Jump if true

 sub eax,[edi+ebp]            // Adjust value
 add [edi+ebp],eax            // Update display
 mov ebp,[iOffsetWH+ecx*4]    // Get warehouse offset
 add [edx+ebp],eax            // Update warehouse
 add [esi+48],eax             // Update Total in stock
 sub [iAvSpace],eax           // Update space available
 jnz _MonG1                   // Continue if there is space available
 jmp _ExitMG

_MonG3:
 mov ecx,8                    // Remaining items

_MonG4:
 or ecx,ecx                   // Finished?
 jz _ExitMG                   // Jump if true

 dec ecx                      // Adjust Index
 mov eax,[iMinimum2]          // Minimum value
 cmp eax,[iAvSpace]           // Is this value available?
 jle _MonG5                   // Jump if true

 mov eax,[iAvSpace]           // EAX = Available value

_MonG5:
 mov ebp,[iOffsetDisp+ecx*4+08] // Get display offset
 cmp eax,[edi+ebp]            // Current value &gt;= minimum?
 jle _MonG4                   // Jump if true

 sub eax,[edi+ebp]            // Adjust value
 add [edi+ebp],eax            // Update display
 mov ebp,[iOffsetWH+ecx*4+08] // Get warehouse offset
 add [edx+ebp],eax            // Update warehouse
 add [esi+48],eax             // Update Total in stock
 sub [iAvSpace],eax           // Update space available
 jnz _MonG4                   // Continue if there is space available

_ExitMG:
 pop ebp
 pop edi
 pop edx
 pop ecx

 mov eax,[esi+18]             // Original code
 mov eax,[eax+ecx*8]          // Original code
 jmp _BackMG                  // Back to main code

//=========================================
_MonProd:
 push ebx

 cmp dword ptr [esi+0c],80000000
 jne _ExitMP                // Jump if a not valid building

 cmp dword ptr [esi+28],1   // PlayerÂ´s building?
 jne _ExitMP                // Jump if false

 mov eax,[esi+000000a8]
 mov eax,[eax+edi*4]
 cmp eax,01000000           // Valid pointer?
 jle _ExitMP                // Jump if false

 cmp dword ptr [eax],00933bf4
 je _MonP0                  // Jump if it is a basic building

 cmp dword ptr [eax],00937e3c
 jne _ExitMP                // Jump if it is not a warehouse

 mov [pWarehouse],eax      // Save pointer for further use
 jmp _ExitMP

_MonP0:
 cmp dword ptr [eax+04],1   // Is it a level 1 building?
 jne _ExitMP                // Jump if false

 cmp dword ptr [eax+34],1   // Could it be gold?
 jg _MonP1                  // Jump if false

 cmp dword ptr [eax+38],#99000
 jne _ExitMP                // Jump if it is not gold

 mov [pGold],eax            // Save pointer for further use
 jmp _ExitMP

_MonP1:
 cmp dword ptr [iEnableMP],0
 je _ExitMP                 // Jump if feature is disabled

 mov ebx,[eax+34]           // Get maximum production for this building
 mov eax,[eax+18]           // Get pointer to current production
 dec ebx                    // Max production - 1
 cmp ebx,[eax+04]           // Current production &lt; maximum - 1?
 jle _ExitMP                // Jump if false

 mov [eax+04],ebx           // Make current prod = max - 1

_ExitMP:
 pop ebx
 mov eax,[esi+000000a8]     // Original code
 jmp _BackMP                // Back to main code

//=========================================
_GodMode:
 cmp dword ptr [iEnableGM],0
 je _ExitGM                 // Jump if feature is disabled

 cmp dword ptr [esi+0c],80000000
 jne _ExitGM                // Jump if a not valid unit

 cmp dword ptr [esi+28],1   // PlayerÂ´s unit?
 jne _ExitGM                // Jump if false

 cmp eax,[esi+000000a0]     // Next HP &gt;= Current HP?
 jge _ExitGM                // Jump if true

 mov eax,[esi+000000a0]     // EAX = Current HP

_ExitGM:
 mov [esi+000000a0],eax     // Original code
 jmp _BackGM                // Back to main code

//=========================================
// Variables
pGold:
 dd 0
pGoldQtt:
 dd 0
pWarehouse:
 dd 0
iMinimum1:
 dd #20
iMinimum2:
 dd #10
iAvSpace:
 dd 0
iEnableWare:
 dd 0
iEnableGold:
 dd 0
iEnableMP:
 dd 0
iEnableGM:
 dd 1
iOffsetDisp:
 dd 30,34,40,2c,24,28,1c,20,3c,38
iOffsetWH:
 dd 2c,34,44,4c,04,0c,14,1c,24,3c
//=========================================
// Original Codes
[DISABLE]
Settlers6.exe+141234:
 mov eax,[esi+18]
 mov eax,[eax+ecx*8]

Settlers6.exe+13a271:
 mov eax,[esi+000000a8]

Settlers6.exe+136f47:
 mov [esi+000000a0],eax

dealloc(MyCode)
unregistersymbol(MyCode)
unregistersymbol(pGold)
unregistersymbol(pGoldQtt)
unregistersymbol(pWarehouse)
unregistersymbol(iEnableGold)
unregistersymbol(iEnableWare)
unregistersymbol(iEnableMP)
unregistersymbol(iEnableGM)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>MyCode</Name>
      <Address>03D40000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGold</Name>
      <Address>03D40259</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGoldQtt</Name>
      <Address>03D4025D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pWarehouse</Name>
      <Address>03D40261</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGold</Name>
      <Address>03D40275</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableWare</Name>
      <Address>03D40271</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMP</Name>
      <Address>03D40279</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>03D4027D</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
