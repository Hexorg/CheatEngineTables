<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <Forms>
    <CETrainer Class="TTrainerForm" Encoding="Ascii85">eUsmA):Zgq-Gns%Cg2t;P[MW_._+^.Z.ck3sPP2c.UsQrHL*w#9pWJo7YOY(cm%SzP17-UWgREyJD-1[^lf-.WS8e;geb{dQ/qXTKEnIzS.7_DCeC:u[.RJ}Kfoq)WAl.oiC21Me.B!lZZwx-^CXxQv1ZM7a/NlfEGI{d1:W-Dckj/o(6(];Mri6?A^D5XTjmDc)ta%0UM9EvUe_rTk$I@Y6R2%r3WNmVd^cAX7JiO1JclHmcSf!1*TafEP0InmYuhp@SRLTcWDYYp!-.7E_7ofmSo5WD$F#oxFNoMJt7FkpasA;pk;8kNmDx;q]egU116!3xXpyRlDQg7$*;gFBT8a:x:=#f*2uWwgn6*:%z3QO/J^bGDH_Ehgl5K0#XW,m;=sUhqW#_T7X=XTCfngChbjh6fBfP=:*9hacgZ1w.a_$:tis@FYgCSKk#gGiB@2e##ci@Gklegmz9GzR.xP%t04yP%)#$OT]9p)iGSTDM9!QTDbp3QhF@[qPTGpbs3Bx_WWa8!JGfpavEGZLq;fo%1-=3/%3UMyItAIJ]3MM._DVXRlDvHm;7dhJ3^uB6)A9$lMY!7+9$Li%I{FJ,i40Dl1</CETrainer>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>26</ID>
      <Description>"No Items During Combat"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DDDA.exe
  Version:
  Date   : 2016-10-06
  Author : spoofy

  This script blocks item use during combat
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//aobscanmodule(CombatModeAOB1,DDDA.exe,C6 43 08 00 EB 1B)  //you may just replace the aob with an unique one, as I don't have the game installed now.
//registersymbol(CombatModeAOB1)
//aobscanmodule(CombatModeAOB2,DDDA.exe,76 04 C6 43 08 01)  //you may just replace the aob with an unique one, as I don't have the game installed now.
//registersymbol(CombatModeAOB2)
aobscanmodule(CombatModeAOB3,DDDA.exe,89 BB 5C E2 0B 00) // should be unique
registersymbol(CombatModeAOB3)
aobscanmodule(USEITEM,DDDA.exe,8B 7D 00 0F BF 47 10) // should be unique

//registersymbol(combatmode)
//registersymbol(combatmodeAddress)
//alloc(combatmode,1)
//alloc(combatmodeAddress,4)

// ---------- Set combat mode to false --------------- //

/*alloc(newmem,2048,CombatModeAOB1)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov byte ptr [ebx+08],00
mov byte ptr [combatmode],00
mov [combatmodeAddress],ebx
//push ebx
//mov [ebx], ebx+08
//mov [combatmodeAddress],ebx       // this function might be shared
//add [combatmodeAddress],08
jmp CombatModeAOB1+21 //"DDDA.exe"+87FCE

exit:
jmp returnhere

///

CombatModeAOB1: //"DDDA.exe"+87FAD
jmp newmem
nop
returnhere:

// ---------- Set combat mode to true --------------- //

label(returnhere2)
alloc(newmem2,2048,CombatModeAOB2)
label(originalcode2)
//label(storecombatmode)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access

originalcode2:
//jna DDDA.exe+87FCE
jna CombatModeAOB1+21         //"DDDA.exe"+87FCE
mov byte ptr [ebx+08],01
mov byte ptr [combatmode],01
mov [combatmodeAddress],ebx
//add [combatmodeAddress],0x8
//cmp [combatmodeAddress],0000        // no address, use item
//jng storecombatmode

exit2:
jmp returnhere2

//storecombatmode:
//mov [combatmodeAddress],ebx
//add [combatmodeAddress],08
//jmp exit2


///

CombatModeAOB2: //"DDDA.exe"+87FAD
jmp newmem2
nop
returnhere2:*/


// ---------- Alternate combatmode check --------------- //

registersymbol(combatmodeAddress2)
alloc(combatmodeAddress2,4)
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  mov [ebx+000BE25C],edi
  mov [combatmodeAddress2],ebx
  jmp return5

CombatModeAOB3:
  jmp newmem5
  nop
return5:
registersymbol(CombatModeAOB3)

// ---------- Block item use based on combat mode --------------- //

alloc(newmem3,$1000)
label(code)
label(useitemcode)
label(exit3)
label(return)

newmem3:

code:
//  cmp byte ptr [combatmode],01
  cmp [combatmodeAddress2],0000        // no address, use item
  jng useitemcode

  push eax
//  mov eax,[combatmodeAddress]
//  cmp byte ptr [eax+08],01     // better, check actual var via pointer
  mov eax,[combatmodeAddress2]
  cmp byte ptr [eax+000BE25C],01     // better, check actual var via pointer
//  je return         // abort item use if combat mode is 1
  jge exit3         // abort item use if combat mode is greater/equal to 1
  //jmp return
//  mov edi,[ebp+00]
//  movsx eax,word ptr [edi+10]
  pop eax
  jmp useitemcode
//  jmp exit3

useitemcode:
//  pop eax
  mov edi,[ebp+00]
  movsx eax,word ptr [edi+10]
  jmp return

exit3:
  pop eax
  jmp return

USEITEM:
  jmp code
  nop
  nop
return:
registersymbol(USEITEM)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//unregistersymbol(combatmode)
//unregistersymbol(combatmodeAddress)
unregistersymbol(USEITEM)
dealloc(newmem)
dealloc(newmem2)
dealloc(newmem3)
//dealloc(combatmode)
//dealloc(combatmodeAddress)
//CombatModeAOB1: //"DDDA.exe"+87FAD
//  db C6 43 08 00 EB 1B
//CombatModeAOB2:
//  db 76 04 C6 43 08 01
USEITEM:
  db 8B 7D 00 0F BF 47 10

CombatModeAOB3:
  db 89 BB 5C E2 0B 00

unregistersymbol(CombatModeAOB3)
unregistersymbol(combatmodeAddress2)
dealloc(combatmodeAddress2,4)
dealloc(newmem5)

//Alt: mov byte ptr [ebx+08],00
//Alt: jmp uAOB+21 //"DDDA.exe"+87FCE


// ORIGINAL CODE - INJECTION POINT: "DDDA.exe"+87FC8

{
"DDDA.exe"+87FA7: 0F 2F 45 30           -  comiss xmm0,[ebp+30]
"DDDA.exe"+87FAB: 76 21                 -  jna DDDA.exe+87FCE
"DDDA.exe"+87FAD: C6 43 08 00           -  mov byte ptr [ebx+08],00
"DDDA.exe"+87FB1: EB 1B                 -  jmp DDDA.exe+87FCE
"DDDA.exe"+87FB3: 8B 43 0C              -  mov eax,[ebx+0C]
"DDDA.exe"+87FB6: E8 35 79 11 00        -  call DDDA.exe+19F8F0
"DDDA.exe"+87FBB: 84 C0                 -  test al,al
"DDDA.exe"+87FBD: 74 0F                 -  je DDDA.exe+87FCE
"DDDA.exe"+87FBF: F3 0F 10 43 10        -  movss xmm0,[ebx+10]
"DDDA.exe"+87FC4: 0F 2F 45 2C           -  comiss xmm0,[ebp+2C]
// ---------- INJECTING HERE ----------
"DDDA.exe"+87FC8: 76 04                 -  jna DDDA.exe+87FCE
"DDDA.exe"+87FCA: C6 43 08 01           -  mov byte ptr [ebx+08],01
// ---------- DONE INJECTING  ----------
"DDDA.exe"+87FCE: 8B 0D 1C 74 8F 01     -  mov ecx,[DDDA.exe+14F741C]
"DDDA.exe"+87FD4: 8B 91 84 E2 0B 00     -  mov edx,[ecx+000BE284]
"DDDA.exe"+87FDA: 33 C0                 -  xor eax,eax
"DDDA.exe"+87FDC: 85 D2                 -  test edx,edx
"DDDA.exe"+87FDE: 74 26                 -  je DDDA.exe+88006
"DDDA.exe"+87FE0: 8B 73 0C              -  mov esi,[ebx+0C]
"DDDA.exe"+87FE3: 8B 89 90 E2 0B 00     -  mov ecx,[ecx+000BE290]
"DDDA.exe"+87FE9: 8D A4 24 00 00 00 00  -  lea esp,[esp+00000000]
"DDDA.exe"+87FF0: 39 31                 -  cmp [ecx],esi
"DDDA.exe"+87FF2: 74 0A                 -  je DDDA.exe+87FFE
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Infinite Item"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DDDA.exe
  Version: 
  Date   : 2016-10-05
  Author : Anonymous

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat


 
 
aobscanmodule(INJECT,DDDA.exe,66 89 51 12 8B 51 04) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ecx+12],dx
  mov edx,[ecx+04]
  jmp return

INJECT:
//  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 66 89 51 12 8B 51 04

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "DDDA.exe"+59572

"DDDA.exe"+59558: C7 40 04 00 00 00 00  -  mov [eax+04],00000000
"DDDA.exe"+5955F: C3                    -  ret 
"DDDA.exe"+59560: 0F B7 51 12           -  movzx edx,word ptr [ecx+12]
"DDDA.exe"+59564: 56                    -  push esi
"DDDA.exe"+59565: 0F BF F2              -  movsx esi,dx
"DDDA.exe"+59568: 2B F0                 -  sub esi,eax
"DDDA.exe"+5956A: 79 04                 -  jns DDDA.exe+59570
"DDDA.exe"+5956C: 33 D2                 -  xor edx,edx
"DDDA.exe"+5956E: EB 02                 -  jmp DDDA.exe+59572
"DDDA.exe"+59570: 2B D0                 -  sub edx,eax
// ---------- INJECTING HERE ----------
"DDDA.exe"+59572: 66 89 51 12           -  mov [ecx+12],dx
"DDDA.exe"+59576: 8B 51 04              -  mov edx,[ecx+04]
// ---------- DONE INJECTING  ----------
"DDDA.exe"+59579: 66 83 7A 60 00        -  cmp word ptr [edx+60],00
"DDDA.exe"+5957E: 76 66                 -  jna DDDA.exe+595E6
"DDDA.exe"+59580: 0F B7 51 18           -  movzx edx,word ptr [ecx+18]
"DDDA.exe"+59584: 8B F2                 -  mov esi,edx
"DDDA.exe"+59586: 3B F0                 -  cmp esi,eax
"DDDA.exe"+59588: 76 06                 -  jna DDDA.exe+59590
"DDDA.exe"+5958A: 2B D0                 -  sub edx,eax
"DDDA.exe"+5958C: 33 C0                 -  xor eax,eax
"DDDA.exe"+5958E: EB 04                 -  jmp DDDA.exe+59594
"DDDA.exe"+59590: 2B C6                 -  sub eax,esi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Disable Item Use"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DDDA.exe
  Version: 
  Date   : 2016-10-06
  Author : Anonymous

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(USEITEM,DDDA.exe,8B 7D 00 0F BF 47 10) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
//  mov edi,[ebp+00]
//  movsx eax,word ptr [edi+10]
  nop
  nop
  jmp return

USEITEM:
  jmp code
  nop
  nop
return:
registersymbol(USEITEM)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
USEITEM:
  db 8B 7D 00 0F BF 47 10

unregistersymbol(USEITEM)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "DDDA.exe"+58480

"DDDA.exe"+58467: 55                    -  push ebp
"DDDA.exe"+58468: 56                    -  push esi
"DDDA.exe"+58469: 33 DB                 -  xor ebx,ebx
"DDDA.exe"+5846B: 57                    -  push edi
"DDDA.exe"+5846C: 89 4C 24 10           -  mov [esp+10],ecx
"DDDA.exe"+58470: 85 C9                 -  test ecx,ecx
"DDDA.exe"+58472: 0F 84 B6 00 00 00     -  je DDDA.exe+5852E
"DDDA.exe"+58478: 8B 68 14              -  mov ebp,[eax+14]
"DDDA.exe"+5847B: EB 03                 -  jmp DDDA.exe+58480
"DDDA.exe"+5847D: 8D 49 00              -  lea ecx,[ecx+00]
// ---------- INJECTING HERE ----------
"DDDA.exe"+58480: 8B 7D 00              -  mov edi,[ebp+00]
"DDDA.exe"+58483: 0F BF 47 10           -  movsx eax,word ptr [edi+10]
// ---------- DONE INJECTING  ----------
"DDDA.exe"+58487: 3B 44 24 1C           -  cmp eax,[esp+1C]
"DDDA.exe"+5848B: 0F 85 91 00 00 00     -  jne DDDA.exe+58522
"DDDA.exe"+58491: 8B 54 24 20           -  mov edx,[esp+20]
"DDDA.exe"+58495: F7 C2 F0 FF FF FF     -  test edx,FFFFFFF0
"DDDA.exe"+5849B: 75 71                 -  jne DDDA.exe+5850E
"DDDA.exe"+5849D: 0F BF 47 10           -  movsx eax,word ptr [edi+10]
"DDDA.exe"+584A1: 8B 35 34 74 8F 01     -  mov esi,[DDDA.exe+14F7434]
"DDDA.exe"+584A7: 8B B6 10 01 00 00     -  mov esi,[esi+00000110]
"DDDA.exe"+584AD: C1 E0 07              -  shl eax,07
"DDDA.exe"+584B0: 03 46 60              -  add eax,[esi+60]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Combat mode test"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DDDA.exe
  Version: 
  Date   : 2016-10-16
  Author : Anonymous

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT5,DDDA.exe,89 BB 5C E2 0B 00) // should be unique
registersymbol(combatmode5)
alloc(combatmode5,4)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+000BE25C],edi
  mov [combatmode5],ebx
  jmp return

INJECT5:
  jmp newmem
  nop
return:
registersymbol(INJECT5)

[DISABLE]

INJECT5:
  db 89 BB 5C E2 0B 00

unregistersymbol(INJECT5)
unregistersymbol(combatmode5)
dealloc(combatmode5,4)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "DDDA.exe"+40330

"DDDA.exe"+4030B: FF 83 70 E2 0B 00        -  inc [ebx+000BE270]
"DDDA.exe"+40311: 0F 57 C9                 -  xorps xmm1,xmm1
"DDDA.exe"+40314: 8B 54 24 14              -  mov edx,[esp+14]
"DDDA.exe"+40318: 42                       -  inc edx
"DDDA.exe"+40319: 89 54 24 14              -  mov [esp+14],edx
"DDDA.exe"+4031D: 3B 93 5C E2 0B 00        -  cmp edx,[ebx+000BE25C]
"DDDA.exe"+40323: 0F 82 6B FF FF FF        -  jb DDDA.exe+40294
"DDDA.exe"+40329: 33 FF                    -  xor edi,edi
"DDDA.exe"+4032B: 8D 44 24 30              -  lea eax,[esp+30]
"DDDA.exe"+4032F: 50                       -  push eax
// ---------- INJECTING HERE ----------
"DDDA.exe"+40330: 89 BB 5C E2 0B 00        -  mov [ebx+000BE25C],edi
// ---------- DONE INJECTING  ----------
"DDDA.exe"+40336: 53                       -  push ebx
"DDDA.exe"+40337: C6 83 C0 E2 0B 00 00     -  mov byte ptr [ebx+000BE2C0],00
"DDDA.exe"+4033E: 89 7C 24 50              -  mov [esp+50],edi
"DDDA.exe"+40342: 89 7C 24 54              -  mov [esp+54],edi
"DDDA.exe"+40346: 89 7C 24 58              -  mov [esp+58],edi
"DDDA.exe"+4034A: 89 7C 24 5C              -  mov [esp+5C],edi
"DDDA.exe"+4034E: 89 7C 24 60              -  mov [esp+60],edi
"DDDA.exe"+40352: 89 7C 24 64              -  mov [esp+64],edi
"DDDA.exe"+40356: 89 7C 24 68              -  mov [esp+68],edi
"DDDA.exe"+4035A: 89 7C 24 6C              -  mov [esp+6C],edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"combatmode pointer 2"</Description>
      <VariableType>Byte</VariableType>
      <Address>combatmodeAddress2</Address>
      <Offsets>
        <Offset>+000BE25C</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Combat mode test (bad)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(CombatModeAOB1,DDDA.exe,C6 43 08 00 EB 1B)  //you may just replace the aob with an unique one, as I don't have the game installed now.
aobscanmodule(CombatModeAOB2,DDDA.exe,76 04 C6 43 08 01)  //you may just replace the aob with an unique one, as I don't have the game installed now.
registersymbol(CombatModeAOB1)
registersymbol(CombatModeAOB2)

registersymbol(combatmode)
alloc(combatmode,1)
alloc(newmem,2048,CombatModeAOB1)
alloc(newmem2,2048,CombatModeAOB2)
label(returnhere)
label(returnhere2)
label(originalcode)
label(originalcode2)
label(exit)
label(exit2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov byte ptr [ebx+08],00
mov byte ptr [combatmode],00
jmp CombatModeAOB1+21 //"DDDA.exe"+87FCE

exit:
jmp returnhere

///

CombatModeAOB1: //"DDDA.exe"+87FAD
jmp newmem
nop
returnhere:

///

newmem2: //this is allocated memory, you have read,write,execute access

originalcode2:
//jna DDDA.exe+87FCE
jna CombatModeAOB1+21         //"DDDA.exe"+87FCE
mov byte ptr [ebx+08],01
mov byte ptr [combatmode],01

exit2:
jmp returnhere2

///

CombatModeAOB2: //"DDDA.exe"+87FAD
jmp newmem2
nop
returnhere2:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(combatmode)
dealloc(newmem)
dealloc(newmem2)
dealloc(combatmode)
CombatModeAOB1: //"DDDA.exe"+87FAD
  db C6 43 08 00 EB 1B
CombatModeAOB2:
  db 76 04 C6 43 08 01
//Alt: mov byte ptr [ebx+08],00
//Alt: jmp uAOB+21 //"DDDA.exe"+87FCE


// ORIGINAL CODE - INJECTION POINT: "DDDA.exe"+87FC8

{
"DDDA.exe"+87FA7: 0F 2F 45 30           -  comiss xmm0,[ebp+30]
"DDDA.exe"+87FAB: 76 21                 -  jna DDDA.exe+87FCE
"DDDA.exe"+87FAD: C6 43 08 00           -  mov byte ptr [ebx+08],00
"DDDA.exe"+87FB1: EB 1B                 -  jmp DDDA.exe+87FCE
"DDDA.exe"+87FB3: 8B 43 0C              -  mov eax,[ebx+0C]
"DDDA.exe"+87FB6: E8 35 79 11 00        -  call DDDA.exe+19F8F0
"DDDA.exe"+87FBB: 84 C0                 -  test al,al
"DDDA.exe"+87FBD: 74 0F                 -  je DDDA.exe+87FCE
"DDDA.exe"+87FBF: F3 0F 10 43 10        -  movss xmm0,[ebx+10]
"DDDA.exe"+87FC4: 0F 2F 45 2C           -  comiss xmm0,[ebp+2C]
// ---------- INJECTING HERE ----------
"DDDA.exe"+87FC8: 76 04                 -  jna DDDA.exe+87FCE
"DDDA.exe"+87FCA: C6 43 08 01           -  mov byte ptr [ebx+08],01
// ---------- DONE INJECTING  ----------
"DDDA.exe"+87FCE: 8B 0D 1C 74 8F 01     -  mov ecx,[DDDA.exe+14F741C]
"DDDA.exe"+87FD4: 8B 91 84 E2 0B 00     -  mov edx,[ecx+000BE284]
"DDDA.exe"+87FDA: 33 C0                 -  xor eax,eax
"DDDA.exe"+87FDC: 85 D2                 -  test edx,edx
"DDDA.exe"+87FDE: 74 26                 -  je DDDA.exe+88006
"DDDA.exe"+87FE0: 8B 73 0C              -  mov esi,[ebx+0C]
"DDDA.exe"+87FE3: 8B 89 90 E2 0B 00     -  mov ecx,[ecx+000BE290]
"DDDA.exe"+87FE9: 8D A4 24 00 00 00 00  -  lea esp,[esp+00000000]
"DDDA.exe"+87FF0: 39 31                 -  cmp [ecx],esi
"DDDA.exe"+87FF2: 74 0A                 -  je DDDA.exe+87FFE
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"combatmode var"</Description>
      <VariableType>Byte</VariableType>
      <Address>combatmode</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"combatmode add"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>combatmodeAddress</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"combatmode pointer"</Description>
      <VariableType>Byte</VariableType>
      <Address>combatmodeAddress</Address>
      <Offsets>
        <Offset>8</Offset>
      </Offsets>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>TEST1</Name>
      <Address>00487FCA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT</Name>
      <Address>00487FCA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT4</Name>
      <Address>0044033E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT3</Name>
      <Address>0044033E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>uAOB</Name>
      <Address>00487FAD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CombatModeAOB1</Name>
      <Address>00487FAD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CombatModeAOB2</Name>
      <Address>00487FC8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CombatModeAOB3</Name>
      <Address>00440330</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>USEITEM</Name>
      <Address>00458480</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=6.6
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end
addresslist=getAddressList()


CETrainer.SEPERATOR.Visible=false

getAutoAttachList().add("DDDA.exe")
gPlaySoundOnAction=false
CETrainer.show()
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[This trainer was made by Cheat Engine
www.cheatengine.org]]

function CloseClick()
  --called by the close button onClick event, and when closing the form
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--

-- Auto Run script code

function onOpenProcess(processId)
 if getProcessIDFromProcessName("DDDA.exe") == processId then
  reinitializeSymbolhandler()
  --LoadTable(getCheatEngineDir()..'autorun/DDDA.CT',merge);
  --LoadTable(getCheatEngineDir()..'autorun/DS2_endless mobs.CT',merge);
  getAddressList().getMemoryRecordByDescription("No Items During Combat").Active=true;
 end
end

</LuaScript>
</CheatTable>
