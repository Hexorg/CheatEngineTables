<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">,r!Af5E9@Kz#ii4;Xu*W%M$A1X2^{]npVQh((cMHnwg$a!hDW[IV8V.c[9O9cxFmT2D1YryK]beNoIZ=8)2M$b53SzUI_/@H-ryY=4ReHlV6/5(Iz(s%w+sM,UHbSQj)v=31dL4WfFnf$_MQ0l!,f:CzChaN{ht8#7c$W^L.J;1w+jenaSDgd}jpHe2$RBB;$q6*FLJZ25goYVYSQ%uVqG/mKmX0#*#E2W2{}i./d}e):uZ.%RpWO00</UDF1>
  </Forms>
  <Files>
    <shutdown.mp3 Encoding="Ascii85">y=J,3lij:JNdh4hA%TE2F,k_ODc#V!@d:yoH/6_SA]m)V3MfrMdM@S33W]z%M5R_nK]eAZX-a[H?ZFhp+UTSt:g!;q,iN8!D^Ce1-uv0-yytn3J{(?znlcpN1gsY3:33.D9sro3),zhyIq}!2Qj)H?L:+*78Em_,dXNVy?:E^!UO}XjeD;@FetvOr?pI:=R8%xH3:9m,%+/=U?p!z4ho7I^jT.dW5eW$ickgCpWj%USQc[Y_]^c:!+49[AUiJ3(zIih:G(D9gJw5(L/NW.m+RNlfme$tRHaEAoxA+snL=VgwzmWW(!2bI^BIanG48YU}00bw2J-m/r)NT@vdQb]:GN*FWWC)!O)me%0wr+VzXNXz(ql$0[hG)-cAQh:(NN-QRVAL#ixJLeyNC0plWZ/E(3nWPr;CXZH94bs#vB]!LC*d)!(WAknE@kk.pmrYc,rQx/K0X-2OrP!:e@/%!GOb5wM8(6jn_yuaVOb%:2fpG.Y}^LRrQ^z%R5K)$IXq-?F+YcBe(zhPpEN=/%$K*u4!.6gM3}ItFAq;pCY.sdFnn?gZrgP8sdU)ki[62}U{F1rDm7i^)u;@F.o/XZDgd_=EQHD!;sRoJUuFASi$L/,LFH+Q3=FCH^,8.}OSseV/ImND60TYw7K5JRk7t)FcHon]vHJJ?2tc-/H]iDX!RzH1qI![99bNeI9?eXIx4P{4QnR@s/X}T5%E![]r#!,liIA1z8(k]W9zz-B[kI]N^H.2r@hEtf)QOQS9}?e#GWz9^s#h6r$!D$]sz1ZyMlatjGhsEXI5or5SB4Swc/k%9vVB,@-[v_/[Xjo-[HaJ(=HtM6e#N)-u[e=YSf/RPzei)MP4qPF[uE#syoX{_u6@C:j;7[:ZxT%@4s2@yy.16wbWv=+vhCF$4)%3WMSe6l,uGqkON2UFG[{LIt0}3hv}DY-X6+}ZNC@N5Zg+6[OV!yY-_NNUTLIt5upH/SSvi9[uLcwGC@J#]b?xk4LML5Va7*$r?@98ohZ^Gnl]t2Q*g)zoPtDpW*G*W?rV5{?:vCZY%7JLNMma1MR@dlcBF*;{V%@mxF(oLZNPibX4QIVzf/LJx^sx:,R_{?(IY{gyG_nrz:t6/]/b/5hBt.UmUi]6yvhR/06K(L0;}r?sT${F[2d9nZNuv^Y6A.u25xe[6+MW=^HLq}/1%O)Tth*W(/JI%dOJ}J0i]J}A!o*svc2Ba#?oTzWqmNu@t2^G]F8Ga!3d$.?0rFNiyi.8ZfkN:O4dtM]!Z@EqMSz{jwj8lIN1EE8^Eckth*GogVn@Dv-vsFEm*A3w^s9JKHn_O7ydBTqwY)hHi@U9xZj}f?%+kRsdq(U;GcgW7T!*.K:Sz%br=3wF3=ueV484oRSsF[-MVLT0tN0:P]xqxne!P+cTAYYW;{=7bV8kATdg?1a2Fc#5fT*Z{:=Dvc40Yj+;,@t]3JU]YSfY.hy+$97O}B0D7U3olbzSG9P%pWs_NdaN5id=Y%g3ugC0OHFQR./%kuIj)OD(e;!{%LF$cjfxN0h.x=tR,YSIMp:uKHLaKV23NR)hRws:Mi6sm)T+bli3]c;?:tW;^-T;.PcoF-slWobG.b:p_-Mzu%]T64w#PHzoXIavk%l+BG[$Icy+=0OfoJnGSV!FqvCiqmAHZdAg8HTk)s^slp)r_CzNnAO95TxMgbd[R)a9V3Mz}QD(NRqPySK$Ia4*Z$F3A3@^nG6gP-9K.1k8G/[0A:-x%UtmqLASxspmxZ6#9vW.6%O(lN6i28V^;T]-OIBlK58/MCDcu%x^1E@M@,0Y-1He!n,60Cg,h-:AC;zFG1RNA]oeP+#v[0rukqf4R07vdCA8qU%hg((K}9$VPyxgvcbk7OQd8f[(QxBuSs+ItZ!G*^8jO_K8?:4PTudKjZSDh@:w5@AB]KTQ_#CSAIk=?zUO$!(J1luq)=V,BkywW11E*m:PRDtq1nM(Uumm##M5byQJo(a!Pz(o!Obn;{lo9sHE?zEdfhDFhQK@(ADXmNFdM*{u^;f/OKYg^7ryOk-z(p,+jSgU,ZjoAzt[GY[+3igiRo[AIrg;Wi*,C{#C=u.Nilv(SQbwhlpCi-08-C,$um,PE%6F.dFg^9R%66vrB+vhf%o^)Ny-Z]Z3Vj9/T%QJP1X1KguX,[po%.vHgM.T;_k(i$xtEFIIDKa%2Ocs!dab_-Z^wIEY_:ls?^u9nN8PE4$VL}mV}uaSuIQ9S@gc{M)Em#+%6R!dC+oFN)xwQqT:GVWa]5gW81uH+Z{8O9_8,q7=)Xo^{P0WbbgZ/Dkj?x,SK#vqpa@ZQi-@D*A,pF%H,S]Gyw)4w90;W;!G/b:v,5utrauTIh9E)JNug}gU[9Xe%nDe1M^O3-7.r76bM[_V-o2[Jg*D=V.mw:01kGG)e=%)VatDN[;*5)Go{C,#U},TN-T$4}i@NTJz{kbC_YhwAfCNapmpp?2kVy[0NgLKrEyXTzx3ZKR4h9QhaosQlx,+2)jt6.XSuKjqum.MCFT?iw)FEj}w_?-fO-3]]jTAo9[atCqYn0{*SZ/(zVePy5B2=?f;M]MTelCnd8.[B^G)mAe.DI_9-h%78o%.7w}PWIGyndw/$RT@df$lVyoQT*1LS3K}1=+Ud;vTVg.XZ9:^Wz*q1i41Bq5UuBvn7P,0R_BR/X7D5wSjksAYaCY5O^#Lxkqit2cQqt1U@+*uEliHtq^YZD%LsB}u9jbvH.#=tm0pKuVY=T]R5nDq$wcci8:%+g%W-V:Zm*/2wS;74de_*/iLn6w%Za]4GJhntZb^i2Gv7WVCLFZkJTWzf#z5woft2ZTYq0vlnTOpTJV}nIUEIMG-wRhRWK+ci#CU:wwK:)=fnu:N!BEj.B=8P;nA*egztjS:cE3=3ktiyv^YBMGiQ7vN#JGAxN*Du5WunsdZ)*IS9R-%1?is47e/[WcZFK}RRa7Eq]DbKISMD;;TerZu:*eqiIU1{N+5P7U[G@C0b]{K*,[V//eQ0a13rq=%p5qg^%mb(^xtpkjyvhj.87@1xIRR(9#A8jtCgA/%(ejdU_B^A#6(uAk[q4-I.,W.Xs;^iEFRoQsAR)U7m,mvQV6{y6A=-24LmO;k*7pGVrH:-Z7S#XcIsuk:MFxO.jw=r=$6/aCKLplV42U+/UZKkYOxFY}cuOQBpy]8c3:j^JJ/8JRldp}J3wXdH4BdMm5dZbNgY=z2uc=B#WTcJVp7V$41:A]iN[1)9.y4ROf+P89_LraBuLQlUd(f;,vE5FtH;)Mv697)T?6$FY,0JIB1T}u0cM(mX:g#k}C.%{*0IGtONa[[ryql=*PFR_dCdT^!ZCA1r*gCFbQ;HAym3l.QQb5+OeFp8$A[aA5,1Dz%xAm@*b6cp(kYjHQ]BtAD=^/zwkPD[J+,PwSxB:Z^tsbk=.A8lb9DRl$KlY7C8lW#571M=uEu5}9R=,GoST:aNOz%vY36MzTRoV8%Y#yd%qRl3)a)9oufg;60OKR15u:Dwb#IJ-NyIeE//F#y,DfSP%iJ$e0n#xv9*ueD2y]W$obc8gNWskRM7cTdLpdL]YSoyeBoQO2@QyxM9AF-$;T7cL4-MvwP:;Er/6k}oU9GSX(*,7qX5uZl^:RXn(oX}r3Q=fmNc6^9ZHPk1U2xY,9ymm(1MngYP=KqN-MGG{Ir!_j1+kE,[0ble8Gha/22Ui@@jm{ADTO!Sd@woj[cNU8J-lrnkOcar(@05!v5:flf3AgG}KfbCYGs.%(/W!1yy$B7;P%E;U@oph{EW.v7C!/V{ex[NU0tDD9PSSlq{0X0yVD]:z}QA$Fx##TLuNpf_UI3BP-(z1^riHwE24IYe;j=;uaRy)DMfC2G/GOj4is[zk#EAQT5S!@36i/47kQ,[aN+-3kC+:f%3NR,B$X1{A{+s4T:J};a9,!vUL90T{o(7q$v6D4jvh_YEs=59r}0dq%CXfF-ds)JQYW0Y?r/o+E=4wyXS[j7:{OW62HO{_DnqJ=bMv;9zg*N+N+]vef@J8pFtJ$!d@P30c=8;FXl@+dkHnL5ZDsV{Ki8mYoee47)**$]VS5l.[E$5^$fKig*8EgW{z@?/CNhxnLC#}Vv:Jd5,l1spQ(76RO7kfzx/Uey)V#W-!rrf+mCJcJI?;xPnkee#$^d99416e.eDt[,zck=xN3cw(H.z%#%e)qTmZ=s,nM;;^h:p5@.l;k]W11W,-Grx,-!zNLy2AG6*P8GZwKniwT1-^xY97p9J;wP8(_;1lNqf}_HlUhbmrCbGJm=]NaoP^^p^on8C0;%[,-5}:hu-ANCk;$)7-%4*M?=W/zYw/=m)3RIfDK6O_fObfhrhn)lxkA,Z!;H8+.1;x@HiquRhd5mc8bj6!LNbkIQYT(D@/8vK?ZPOB?z.}@3G5[.#xsKX]sH*36WoRnp;9hU55CjmdqpP2%;ajMiA9E!nIouxo*[p3ju/)11nVD8}@YP_K5?^kS?)ux-a8WXj:Lhbdts#pBeXz1+;#Wn0@Z88Uya6fdljk8.]yWy}-B(H-rCHA^?(qk$HA#hZm;(JqwO#)@kbo-$0DhGfFuN/IPzaeTiatvz6[RDjdn6xmo%txNkx^ddQy/Z;YIjv{p0p(ecCyxeCTquiSc5aJ%4vwuIFaXao^q0!sRt%6cB45XC8HQcZh.)jGk}S,-F{WIGv3V#BH=kkuCfUubcM87^Xt4o/2)3-hQdG*PsWmM^[WxU;Dju9j*[!jzyME.GcfLSv.-IcbS{IhK*2^jG?Bf:d$5)tbo_Xv2uKZC5c#PeT}EiUHpubi2i4o.XS3pVzZCxd9b7*rwL3IR3#Zf1Rs8ivlj{1!M;Z78=60xeegD}XNB/2*)=]rdcEsxI9V@C2p^rjYF:bhySHd[,Z(OrfaAev-!S5SDdGlFQPm/m+4_;#J]q9d%z0H8r9Zd#QQ:!@R(r:93W_HX_]]2D}EOxPggY^iWaw]g.cE3{:Df@RbtR,Hza$YhQVjB=Q4pUTF5kMIFxNj)XV7e*5ukANv?bys_nO+I1W*.eKy]pr^i?M3SB(YB.w$O+OZ_)[2[q1_Ub9:1_@m;5^CP;*Ec;$--Kz)H:o32bvh0GBcbVvb.6yLIItrk-G[:[}SXCj3*8[-iCYowtc/udIT3!=[t^OUw4Y#-Ux?2f;e=$8jr#@3xA.6egm@s(DI*Yz!gU)t39q[cs*dfQ3kmL.xi:r%F6Y53l[?s8{Mc%c5.@6F{kFNx?+QzX82E:Y/;!{st)H(,jTOfo}}pxJK%kkXsIpXBi5;0:f/9]8+F,dR^gY@:mVc[lyi2r:56hpdT7eHEZeY4Kh!*x(;FB5Tk223,g;wzR8R*Z-]gj+?S{]8vLL2oh%bt9oCiNt3l^[-.1=5oHta[iMAv(-33tW}X0Jf+U9of1c#?CO*n:?[pVSoIaeb)0%-J[=UBZdNuuspLbxAt:#eN/?/uULSC:;T}8ht1TPXG4SHWL1PWX8jv(pmEWaN8ddu!Zx:52dZxrL[m,g},9p%6N.%@u%gY+ms]E:wDpp#T+K3Acyb=QEZCL1g$D=HM9Q%AU%(XONpSQ-8GG3!KPQX=(k:rdH)LkNh^D9H9NoXV@ufQ{^$0H=TAo]3LUaxf9h-OCwVy2w!)c9[CCB7CY8L[C#m/Q6.eXA=xrFwU,=unnlh*_@pUG)gNPdDRx]RSw6mEgxd?R9;hCY+,LBX.8!$Pb,GZmB2}4g{_$n*10Q_fr4-d#,CX4b%Fu=4Z2kp;7-^Ex+*0-f_;WMZ+WdK2vcqE@ITq$TH,0Q]RSKe2:]j%v_coT#01_R0d!9NkieaHOab]]k2Fhk=Tq04#P)rP50:@QH-Flvl6KdVNxU*gQJ5@7Df^aDy98KnZy^h4g)M=-^Bj5CmT#]cKu]hi)^y6L[Nmc1NFdgh-VL)A6xlE:+pb2WS.+S92maCeXNlg-SeA26I#p!y#)rZo4eXo/[Ah3o6cD:[mHh?Qr*L-eS[nbB#n^}NQqNM:apBR4%.T@B;:P297vyc%blJV7yFMI_:MGh?gh#Dp?4[5hq$)jLuM;DKWqHYGi:L8jME,KlO,pUxq[nU[W*g+Guyg]S3QjKh+VhHFtK))f-jc_K[mm^DPCx/F?;MecS^9Tag77x8mT?KuL%wob$x.QnSo=D!x^xe%D:Qb+O%[kTz!6INOq_;?@iW$8$gPaT(O}],2Oj7$zQL[GtI/!KqSrIEO2}1mx4EN9t#O9EWBvF:*nHQ1N0-PVHe8PL,cWpZ!}X!lW536+N={T=KIFthDV*Q;^O(MJ=q-;o8k{cs.V$!w43]f[rkcr-JW;E4#z-gGSWIMOL)cdZvnk5Ev2Uo5]zA;phq^J-OnH1w@By7)OP:}O._Xz3ta:.hK0Pjyx?)V#4pisBYBs.gF%Km!=T[Ste6p9ZY{6WM!D,lniYX3yR+wS@;Ys{@z=[(OwTG].SFp2LR:t,-VA1boQsXeZSMK;{D)mJi1Umh5tjgwo1OZS]20zva!%7AA]B@}Q4Ih_%#{iO@y5e]9BO@Pcn,n/.*0sO57f$.)JiSXIVS1=9IT_4Bs$*@oY}E$Mza@p0x@V3T5q2AiKNd;^E9cVHK!YM(Wos{t6J)N09ZVDhAc#4dQpK:p-a#zFX]:cUwUAd_0pFg%;pLmGYu=JM]Y2v5QU2kanEO$]*w[/:?:rDpsA-h-njYJLEVp8v3!IOty}Wz7P_veIu_^=$?f,iJmKfjq,LK3jS/2Y{$WyCn3FW%])RDnT^+lLO%6(JfPPb=Djsr%/Luy_+,^#!,rhQ1.oNb*g#0h]B:iBlpO,.sZ];In77eoBVM_!v)[o{=gB]q8N*)6;#t3MyBxes-0@P?4T8@:Z}Y2P,S02=a0[9#LoAn}C#M],f(sWq$AS_MJ@+bTk_2hzmqSJkCwN@,KFkEh):)Yo[lD93uK*5l}JAQbKeew}0W)cpHE0DHK8s2e0M-_q_d@dNuwP#I?^t;yZleU18y$1EaJCws^CDAY$TYaczfK{nvQFP*qf.Dx+nb.^0[CD1j(Jyt]8N.!kEzYx}gX.L$Q??pAiZ}y;ip;2bXXZJiy(m^gac$[a*mq+;.9%/}ojVyZP#.(.3[lKlM%K!$Uv?Q[X0g!y.C+qZ1.[[zajulF*9Ssc*:w?vwVY,_F^qW]*nth$Hw5vLSrKI%}6[#K_Bz_/^!JE]W*pbvR.C_7Y8p5*e$zOV5[%(6MbBs[d1l/LD@v+o#:AR.+q]_kH;XT;4iTV2rfR3nL9J0bm(b.QAB-BstDIY!dOUiES@PbKIT3b$z;p2yIAJRl#mQaha$?)av*4#Xyh?PWMdAMnp@3KCm@L*9ByGKy:?pT:qM/ym#m)l;R6nL/]KrT5d?pWK[T6/Th8p}C{RR/hK#?c2Hp}wPg[8oG]j:+)NgCXAP*3aY4gE1kQDi0YUy4KDQJqmj@pWBZlu1^Y4,2V4lk?QDH4I1$59Kco[6Bod.MXG7EN=}h/OFpu^SbO$qQ2oJ7HTB%$6.Ak=%#.uS)H$$T0Jwc%9P8?Ael.r(S?e2H!Cm$^J3[5QDJYTllKmNpM$*yHw:sY(od:]J2;=q1B}9a^Cz7{K95g:UtYp$[ODqr*?2niZ$3vmnMAh/;x@Dv1FuQdaztErr[rbi1kO0D;$YBFph0mh(xwVs$VI,vnkNwVY*$F.!(_6uqH0U_n!7qBj@}-Uu1ft5/$$h%e7oO_fbLsw:Ye)@/32@*6A9$ebsuj)f^*(KG:mRqdQ=/=+md-F:A3)TriDVUOGqk151=HEs%D)5vsA/UYjqji3+q4aE^;CUqkf*Sm]q!8CK::*-]A!Po4@%J$0QNYR+XCAZ,vWW9iJU;[I!GBMk%w)+fNr;h6vG$oHu(gQO}llKA*6{SaC6g%t[29HmVcT@=w19kF3l[V?WGX%;@9I_o[REDvcD3*DOG,Y(A,)dDgCw/uAQFkddlk/n%%9@,zKTueWmVvGWI2}CD[=(ys}8)4fJl.vZS}Nc5G*oCy_ac/E8hefgseG5Z+zqI6hzK?![,@B,XoGI/Cie)82DK/80epJlfSs_6X;_Ag3fdIInY#a4G{/D!ofFl?zsr4P#PR/ZT=z?M+IHhr+zF,Z[%SS77M,zcRZw1K+EI8qjDtYmW!l1hppv+1/o}X!qyHgcDu!5UI:5Rz5/k*x1TD@U81d.3Hwybq{a8eiS}*og9ns2e16M2z+Y%#1Y]^J[NwWo8K,(ai_AC65lHwmymuF[y9AIOGqXGK*+PO6]gz(//^Kp%1n7L?qHBiCsE=LCB[h=$Aw.1ln_YbWeC5O(B?6Qpe$vV-ZJ(2PR3)TlLmkw%jlm4E.g@r]SP}U::4ydthNdt9Ep6G3dS:Mdv*JfEhs){u_obV)C9[pd/qj,-kqa}y=4[%)vq8k.pn(1E}N1)DY6rQYl505x_SiR6lO}wA-2J?)3;xnixuD$Zq^_B^eq8;*h$ufqA%q7BC:jSWdz!-#oiu7@F?6qe1((7+}ydu-,DKMiX;B^eS@jvvzt*9US{iRTb;H5Yn!pMU7NRcZbm2IYQ-A/[]^=+%T(?4d}le(8NEh*Tn8tdD_lZgFFDFkcmkM6*/}c?0wbhwywLNbtS{[Z%Kgqh01O/OXMAd,zBRsEPQi96/]$eMUEWohz#.tO5%+c}Hb{*8y6K,?eNmcCCMP!sn0G{r@!9]Xi74p$6C(k[wj?%c2F=[I7+[6Kf,t2:Z%FE3F2}f!?1z*3j0i=Q-j0BLmZstP*^:9;=yfVw]x^G]!$#nz[8FfW=l*%NWpSP1u)1wb]^jO?LvV!q22J0C7qn#SAYyq@S[5qG.taelA,0IQxo9i2nsCAZg1Tm0rJe_B5LE(fIzb1,(875vz*$zy9Syb@bqv*yO*Ty7D$K@yAB1.O%D]kgAFlfo7JS7bPdKkep+*$a!Zc6:r!gPqMZK6PEDS8]:yWh*6yAq;q80}d53S)WgdYI%x];D(/f;5:T$_%o%g#6grnHiPk$indClt={H;NxF2Yk]^=!g,?=7vbID$uvfo(CH_B}#*icSY#v8T;k?ef=GMu5*],#aRa?MD,ncC-mUp+TvG#qI;5dL6;l@]s56VemAdO=TU%LaQrYwKXS1!nHGPd5!Fk^-1L,V!?*x$vbt[YNr@B^uJNG.[!bU2R8p8:b7w7UvCep73Q[rtM2ppB7*8HMm=yj0LkYqmM1;?4A(vTYR0yc*mXN{,8XBvHYDQWz.tC4la?GH5)7k+:aza3@K^Xc@ss%J)pc#)r_2aMM$M,O6cb?S15fzYxvJBHh4WI{wxcFd9nhQRbb=6F:XpDrs3!Nd/(9*F!bK;#T,6HVs7qGO+F%{C!7:=GkHEzrQpkn!70CnY}e_RAl-n44q8[bqjez@XRGfh[4MF=[(?/YIiWDb3y(sBsML{QM[dcAHD=,Ej]wOeYaAG.t%Yp!/Id:795e76?:dMP#V.(-npPOZ11:*cN]vOJUk)#Z*0y1wH5CXMuRofb4Q@Sft^8?y?%ozF7NzX?*0!iQ/$!%tBmCYU[0Z-2XUp*j/?Bpz_/WEx%ari#x2peSHOza[[t)*cfagcceNKKuT@]STw?1pEIJAu7#ZTU-#%6Fz${Qg(;XL/!UY1O6:,T^jc7[q0cUSu_cQ]e!RQ*].c08Xo/Rn@bI4I1,((RD,$dEf#7R7duh=e.u9w6zo;yW$Yh,V+Ily:YFk];xHp/MWGK-J4Cs3C3a$?U=P7q:=q/gtE$BSc{D[Wqrl/h0a$Adv7UP@:Y#/*djG%v^BJnn@DV_do@sB:2l/ekA1:Cbh(niZy+I?f(qi1@!4oJDCb*mxq06C-xidiiO#6{[2VE5G5r!0e_L@1D3vmCQpQRZ83Apv(bzBY(f#V[tfIzmGocbH@[%jf)5Hx]T0HHt9k}aN)3}yg0o*A03bMlU,;a.!5_L=2UKRDqtpWvSivkIg]B4{{T7b!6i2%x?^kOKtSA*bZ31d8f@Ax]+wi1D_CPH=XS8cG69FL@}*t7Nw8Z?{Rhfe5+Kr2JR(nW6IchfW4}ArO;!VM/8:!HrOBp+sPFhOiW!1OD}=5I[oawA[$v#R9ur7ug@jgLW$hAOX10Lk]NnlFz;Z</shutdown.mp3>
    <ON.mp3 Encoding="Ascii85">y[acJQ)3mh(rKkNFa-jL0ulis48:Soh%yBTlNDwVDS^%CAVY*L3MLFPDTvIdv.njP6hXwPs.dHs6pEH00o$nvgUX.nDX0v_:@Nj*-db//;.BO7TS=COboT%J[r5#)rV.]0pj%1,F:[$,^.udM4+:FX?=f.JwTZ2XxtSS(YZUPR5fXPG23?4kF9]r56WEIJ5wllJ?;jCN6pE:3bM]A2#B[,cEvEM=gJMR,yb$y1EAPd876ZlnFOmO,=td)Bt)lH4k3dis0Qe0Y!b2]V6uaibR[XyVpknA=-2n:}9wJtW3IMVwYAnl4cA$E?X$cC{xn$gLfRxJtSc.l#W$sk::lrb{rLyeYcM87fnFJ8M(1i.!=jjRAEpP]%yi?wZ,xX#!bWA)c,zKsK42nY+UmenG2+EUmluw#+Gz-X(YdkFR$:{rNbxaIWnCz+RbF7HpZ71LU+;7OFvu}SH[%RnfS-Ymet0?)6[1oJY+^[Kn8oo*7xi[j=V9ZNxshZB:iLbmOLVtD-E}C5eTq*[Oh9D+:$8pdNrowjh$j[1e,2rpFL,Xvgtxin1Ic_7Jj_r?[%#,v+Fu2?,5xgNmgK,/WtYUBWsb6HDt=SvIQN$Ix,I;](j63;UlQO@Bwk5fFzY}0ECOGoBT@v$4]*C2emo.po+._FjP[ynb0nXw^8}etq#h;;v;u,E%h-Yt)wi]X/FB^Ei2)de6OTGcAXnOY#xn.wC]WI5uRhYwizVyDKRF[f3tD$S]v7(UX@FFf4le;H%T)wBP=uZ2vxJ-b,In$[NbKI.wvI#tGkStJQH2K=HBaxKx!+of67{WwBi%(4^mGt#Q[{pBN-dI*T@6l+R#e-cy2?gOg/bVw.+O{Gd:4UD;Jr7l8WFw!B9ewAKuLOBxb)_W;H7NRCq{Q^R^t(%c$CTz44v,-[2Diw78v_QnsVnM(QI/i-OWo%!70WR:?OvmyWGQ6YYq3SOC+odPJkZg%t{UBb,1C8!5uB6,?*Tea(q1L4y^-{=i949#]mTadI}sYvOzB9p-#3g0akigE,a[*;A$-IR+=9=#TH%wih)jg{dO+}^,:P@K1#}pCnGYxS-VMDo)KfaK+XWM;iz04_.0Z%)7lp!^Eexu=BwUN7_HQ%kLVLpA!NEHnTWxzigy7cS=49sw.jX9_+(7-d%WyNy.XHG7JA^m!O.Y[7!80VCwYL(n.Mk.f_K5Y$Gc8v*#35pd#9C_CwL4R4y)Cmnn]O!%)fdl#k5iB0HXR[UZRlLpm!8.(@kIt++QH3gGzlH-?M,KC]mEHlqVuHhr8/y_(9-mk5D!Tm@BeG4YoNc-#:D#w*ryRMs:*uXu#)dsLr}Y1Cl2?5?UKnZgu.Xhelg}TG!A;1YF?sNul@hj]?q_aqsH))+$Ds?m{EF2Ekm[u?.E;Kd_JYOhmFu[/NCtfPYB3;A_5_b2h[uv9^=d4$1;IC5T)6?])09$Ob=9y(Fvzrn}[/x;b^a6C$bxdpG2%3Tf{wyWr=C#mQgFTxq2)6[vO6f.).Dzc3WDW.CgG*?[sYvDAe^jq6;}gVQB%5@0g^.X-1f*+yks5NGEM/#wtGcPqB6-4guj3Z])syJ{r=uxNkFCebdU[%3YG3]aU_]/DW9cGbMMPAf:!65:uchztUaabW/F=Ii+Q[FVi}!X_qzzUVK72]Qnz9b0EUe@jqpyKAk[!8{Lr$4)!I9LmvSZCfYhJ^+2^NuscsXAG2Pax{2tHvunq9BY3h(,T:kG:z@a4v77d[?0B9^Z_:l51Y_2HypeG-(k?*Q7bVJHW6mtB59!!KD9Y.[0:/$mWZbhmWm*Qa#rUo3UH3ZlYBe%ztggVbap(MtJ2$^XQ,$_,8ILv)4v/.o0Eci-]Bz%L75F{t:A(h_(M-Xpb:e9%/n-YewB2n6zK#/Za9AeLBRkE.p,%c*/ceD?sf$HIF#KSr;hTfP*NjxO-Ib!pq0mc!+eX2z=KGHBfBu-!ry4kVxqf?eP[Ns(o7Y^-o8TIiK2ws-Fba,)]h^2*8aWVR!X:pPyID;xtP!rUJ.6E,uG2W4rMP.#Xh+jGg*29co10efOT*E-O?v;+f4Q@.u#6ng^v:)EI+o,)0c7sDzZY(iL$T,)#PK?i53$MD.Mg9_i+Qb_8@_M0ivS$1JUcH-F%?.uaWHI5n-lKg^uEwza{hj(c?(9--laJ%%l0+cqbywU-5z2IJdPN$BV(1Rq=.}pQWGXa(W}tQDfN%_xWaT]e,tQzS7k%@[P{0LfzQHSfGqvzy]qc*XGne[rUNn#824{qiMHJ:9{m]5txJC.Xr?}xAF@5N*P5+xoCsARkvEeLHV85MOks!),Ff/!:Y{1?pUZa++)=PlSmT=1Ve^lh)yiIku5jIaDB,6UNb4kX.hCF}+6M9DTei@o:n;TP8#V(lc2d{-J*Ilkt0x/rj^M14NxGn$r;,kJ.;{QzE2qlQJm,BzsE%N{rtt{+g]9b_,IA/warmol1k6Jnl1q(QASNQ2O3JFq#:!o4trikWNiZ6%l4+1Xpud,srKcHuNUmtW,%/k2;GYD(NDt:PNRex+TDx#9#?*wlCg2N7##nh_s!!I.i9PDQ]1Afjyt(P.=QluLcCBRfh5yJtDUVXO#D1MRL7f9U8-@ZE?d3bG@/5r7X5Z@;9QAF^-dsJuRFvC;=7$e8-i%mpJOUpl0MH$LR2E1zICpuwn+6A=vGl[?KOnT2%al8lG_Sx(7vC9RDO(aZoU*zIZrH]Q(xtj@DLSR388{0T8[;nJwjmufY-L6.SJR!GsnWWHyKd{diO*F:m$lR;:?HJ$ZK2JNu=7i.jc9n.4T(FJQ;=XhrS2)guUM@AhwEsk0yc=]01.iKCIy/yQ6+(GFU#Je;gZ,g*;Hv7Gf3:3OJLVo6YQJAFZ!bWqbrAPwx66B.#7IAUVUND7I_]BCYz=crOF+hRRbThE.DSKA1F9X;a$nnNOHsM)Lw}SsnOpTo!X!o6iX-=+n)_cKzwM{sJ39PK=@It;Z?jlG2]+RFGG@N@#C@Pi!26Ui;y0ZI]8%=6P1KM;h00o%i,b2kvySWZ#Mvn-:O1;+8548.TV6S3^SXQa,_MGazB3o@0T3kRX3H+KJO*]KIW!/9B!?[C;,jIgv$jz8;k38OF.ERO-q-{X$Bp[[zq{ojsFSEd0{s%c}]kePExtlC23(1x!z3+XJ,J[=8}b=+I$-ww+XgLQ9Ws9KuXvnuo#K(S4@6D%0zp{fQ_.5!b;Kx0o#@,Lt(LhKTCI.5Q:i6nw1rnb,xK+EURJ9tuB,.qMXLpNlv14R=zCN/w=T0;7ftoPi!HY*2MOjQ:2tLXC(hWw5QOVw$ZT4;Aqaei^z5hRx4cdv@AP1TXYIVAk]u%NQbzn9hS8u),I]G8,l#.+bST%7+?/tDBksR=%oh)9e%npKIko0BseDIQx$pbcnW)kPop^.vUtBz2:HY]E20!{H[,S3$JNq:Ml%6eY99a!@V9;I+d6D!*W(aOF?CTH010DsQbvS)7_tun3LjDtyqsVWD-!4QRZ-cDX26V.=__-_*[QSHy?S8ys/?LwOXp?Jm8W}GGOQEsw}4-J$n-l-0j*2QKgp+ei9DVXV8s7-VC(ZZ1N2rU1hgt4C8Q}fWIhGoOVz#?TtX+8vIYyCgwNVRcNl#icY*@!wxa!;E6)YpblJ3}e:LSJpsmxI1=FfNe(_ktfjc;YFuR29n)kkdCKGA![u9,54FN}tvv.Jk#@7gt[NRgFwf]{}I]E$b6^*R.mIGq?][Q0,h*?WC9QudzL1DcaBlc(!sO(E*BP:P{fO[Mzda*i)x_gHXMZlCXIFIR=*=Z3c+/^6ufUhHyR@^01hVou*^v=kpKfX;s^Ez,lml69jTU6Gk;K^w,9oUp{KLNDSFuK9MT*aD)aon(Ap-iK$GeCr3eC3$KWH%8A-9I1Q9P#Q}[A54D6!dS/vrtraOVy8w]a^Cp4,qXP3=/Z.OL.=fK2Dht;-k6g8{uv_mEBf-9E)1Kq=}7oz!UW,bO*!)o$Pv=)uHdlwElsJ@{LoYD@(3nU{+P:,COXr=lh!3*Umtp4Ox$H)GgLe[:EM)pPcLnlOO6PD@jHzJS72UD];^/K+ucf=K%eS$r69GKle[e),=YskG;].pj!m{oEP@*0IWEFu%5pI</ON.mp3>
    <OFF.mp3 Encoding="Ascii85">y[acFQ(_;)=?IznSVCk,NE48KeaaRV1*3nxY,+-H35#rv2x2RuNWvnEf^18=q,1Y[s9.0mf}ZYE5JUt.v1ybBLfEB6Kx7MV61%3RW]4^{O-:Pz?6}zre%$*+x#!,f[mUI/E;sf=5TfYo/KrlZ1OU*)Ax9$2%#19Iw!$z#*@xysA{}5GQV[6$R_Wv7Bw!]PO-Qhi17A2MBtuA@kdiN45mGJWj+wrz(;]fdkO3jQFU$(A5]qZ%C(_B}?n:BR+i:Cnz]pTQ1UM3B@=3z:B+]fuD[v;!-/,OlGGRa+(:d}/E]Q;?RtW:s1gD9-nP.Rk3A71pzhD{r3.=J^ZAwhLpv/WZqS2mJCKjbgFYi_U(JNh2$PBzs?0ZM;PH;/gW6T}lDhS.gA3_0MBU[1?yB0Fgq{,CUQJccz;Tl_^9)q-2xr#Zsr]GEISE(x[l8.=Udl%)OzFzdC;eSAv[3uha^Jg.+^lKf:Y^b3d9dW4aXjBq_Y=%N}MI^Y/nG{i_=g^TpGGK(PDnG:);/kHI@oY0YLo+g=!swd[y3E_ZPff2Qo#ZnfI!LAun/}T8=KLqKr59HHHP[18gCv[jbLRx)I4%Rg55B3{XOc0ak/;CBS_/m:BCm36AcbvHa}oMXrn{E2b-8o49l9BJ$Hn]V(ZI?1ys;(NNuzL@5]7KZ:y(k#Hnp{0H=m,b.=OdH,}aDD@;[62W}FJd[1)uG/OQXn?D/@(]keRkFSbnGG?M]Ixps^g)SUZA7X{TJ8qoXzZ6=+oqNkc2l31)J[hUWgmO/?gciM{lajhDvj,4]Mq]EP:7ey9b.$DqrS#6/hOO#0Ft}{mL(ujE9;0XeNxSN^4KDf_cKt2@:n%ZQ?H}EHW;,{8SITSf^7y$j,NZb%mxvdoburaGYhG?NT-Y^6:elK_b.E=nySy#.zTYo9#MGPA-P@_59K:ng%Yd3BvXw-+d*tCFJYRkdVK1[*bOXt!DnSzM4J#CrHy}l@voUSXU*Ld-q_5P!xfOIXyrF/*y)1(KF/0,#?WvqpD$#rHQPw0p?e/BASV_H,6ywN@S^KK=k@NOy,ZI_tQLMnfrNPHw*C[ReImVhx]lJQ7$2L?tnzYUap$6@nM,jUi+o9JG.c:TtdK/eQU3^0gVYk{0aOzHg@eFx+^IMXn)rdd-,q}W^Zk,CZB@G$kpoJtIMzYcVXoH}Il2F)vcE%Uz+Zd7?/KZPXhR1T#g*6?${?//V]Py{VZRj}fHNm%l?@O-Pzo?98q]VrR5Z=7^Cz8cIgoI%Dztac2ow;6bf7#u.V][_^(U{_913o@sJOOEyKa:z.UtXy.MUeyo(be[?V)6rGw9%[03L7ttFLWvRb+GIq$o7/9OdjqiV,?EHl96nCXEP21sNq5duMiw?an[*)t-Q71sjjmp:h}7%1gg^27[xzQQ=AaCB9X_#09aKm=Z.@$JTqy*88c:S:n(krkEx_GPI,.5WLk+;2PeSg.P4MSu.iB#6%Ns[-YVcl_pGhWkjN}]D,pA.u+rldOV@/N^F0b/FDm7]j:{,#C2BI[)TpR{,+DB2:igxS@[LmVG)aO%MQ]l=$2FZ;ML-[WUu=La$C^5Of6+=BCC8jTlVgj;RUFOy[M{vj1fC?tig.Px%v=4V)#bQ0idTL7YUM]DSS#ly+WM@tW/;^5x2kmc)Pwye=dikly9Q[WsD8B1h0tWyabj5OJ!%q(ezXagjdp]zV40/z4=(jNntWyg4@dkVOYux2iof1*gf3(N_8:h_b#jYsiOz]-Lx0wjSZ+eBUpOKBUdSHdFHn6RO15XxL4;p^=-7}x#!/F4;s,qcRg^IGzw*;g?cp-SRuf!:gM-N*)/,SqrMIFb@=nl-r*M?ml-6a3z-:aIVU5y#@IN+w?-4*avQboRVp+lt6j:_:82/*.S9KliKnL@[hqMjDsB.M4[VZ-C%Ns2THc@z1bqaQBFQW3O;E)zj]e%c9Xl=(NDdAGiK5prx=u=OkIy8-oqMOZt2yID.*G(1?#hPbJ#OXk5Cht%AQitK2K(3e*m7OG}R4X0qe8v4,GIExZI5#)VmWY[Ai2)bP7u]To!hCjTf?qVKm(,Co9-=ZW#2M8YV#8JVKd:hfDbwB#c+L4z*i%JUxy??*LzDZl(Z!+cN!=/#Dll!bInjH_tdE]W^DA0fS]MLpocl%Zq(I4q:%m9eRz:Rftt:CcU!D{2fM!QtVI+n].nTWcFY{Nrpk9.ZB3[Q3-DXGU=Zn=?@^[T)U4kl!}Lc1RWu)}+x1c8AGY)tXi)yUxxRjB*@ckU/[$pNxHa.E@a472G];N-:LlZ(nPKZkbshBl[9A[Pp?j}hg2^.-}M(R+0DSm-;C-XtLvux#u=F^}7OWGm+1E)qAgc^oANI/0S]z}ULY^dSzn,cI09Sm{Vsq)5e%AKDEQoHaD$HfQxDBu4os6]d!%@F%m$z(^WhDX=0ZvXjL$TR6B5wz?shIg^l3JOAYXu;WCq0T3POJfMPizec@$lKkwfrN@}(8QG$R*J}w;BZ)vQinLz!HGsByz{wqEPPA/:CT)Cz7Fvu=He2F98eYqLbnn16WKEGe0l_xMZ/6#aJJdrvheReUQSYri8F2V.TJ8*+-hg+eRU@fz]7yFQI1Qrn6;/f.c3rf!xorc!adt:jf}6]m0Ga3D4z-+Uv/:(;#/H2!gwtEkebhc5A4(]yK:[af6lCg4MlWH0w?5e;=9U9(@9VJ,hAa_58mkhvrS03j]]sL?@?B}OFo)lT[:CJR-BaL$YHSjjwnTFRyhh,E?^!Z{6m2$7IobX]qX,pO+vAE)5z54oqSmf1Eidc5i=Ki$95MDy2LRT}(xM9bdqUO=bCo}T6u4)k;LXkr];SZHhyh2?=Bu/K:dO+3d16g7DEkXRII#Mey/xrUaB.M*c-4+Y!XQf;xphYXKl3V6ouFTm=^6?lEzBv*.UhH(4cPg1J]/i@-=wR_y%Xdxe40t+65cFJgiuIV8e^QkmT0!MS6NNQaBS_)3At/?nj@8t@^1U4Ge:0PoFAWwmUnqx3hTd-S/H8o(qtnNj:n(/,+N}j96I0=ch=6qUO#qOhSYc(.gW!PKS8j4-rv%yHLP!#MJA5bm1a1m@05?u+].=JU_vjTd:ej#t+Wq;Yg?3L0:NELQ^tqQU%dV=%2#RwvCs!=RKJNQ!ytV4+l9geZ5D48Kxxuiigc^i:p)]tr-wTV#z6#YX?iOvt$#.GbMv=hVYhCVs%AK,ojQEHM7n4Bf{1?cmgaTeCR%opiAr,k1KAeOf[@Xp.9T/:fTp[SM!Q?o*l@H,p2Tk$01+orN9yM*MP^g?)1+t*zLI-ADOgidXy+ZuF-tTiz[Z-Oi5#9gRjZ{KtKiU[Anb_24,X%Eo4sX/zO)3w!v491j=Q4dn47*3qluBFrIFc/^^V1]KnarNV^cKcgYQ47]Fe.A%E?S!z9HqMG*dDTUwVV}t/Yy2B0iAoo7B=nQ05BOi**E0w*SEeVuruXie6NxWUUZY7%[Ta3+}Fs@:LMxVV^nlRJLj2;!]?q.9LK[(%c6Wh)0TpUT?Zb:tT6dV$*/Qar/VWkDz_.5PAb8wo+2i4{5?5X]@miI_7@5.o#G^?e0^I_K,A$poVezyucWA%#Q-j-_L_WwbGIwO]2[X_L.CuKmin:X2Y{7Sf!bi0iwFFo/Bmw:Yl/GtlObfK2QziXrtzgcMThc4?Y667v+lVAhz1w3;AZIdiZ2r=(fZ8nG7HjEO57!+a??W^lmxa_AEkFfl0hhcuAIsrpPr5;bXiA*oSfXH^{hxWKJ1}YOwz80RMj/;U27M5$8,C,OcJt2XIiN7L.x10Cad_HX?T^BH1jzzYw7hHyz$7PGdusIz,VrMJQAo3RkrUkUHH0GbyP5qQBZ[SR9TJ?7B?Nr4X3OvXGNDsD$jw03gHYiD97O[E-BnJuA2%r3%[9PH;AAd[sb!QqZmhHyu.KU)8=W@EU</OFF.mp3>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>194</ID>
      <Description>"[Enable]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc( pHook, 256, AC4BFSP.exe )
alloc( pContext, 4, AC4BFSP.exe )
registersymbol( pContext )
label( back )

pContext:
dd 0

aobscanmodule( pBase_AOB, AC4BFSP.exe, 558BEC83EC10A1????????5356578BF1506A03 )
label( pBase )
registersymbol( pBase )
pBase_AOB:
pBase:
push pHook
ret
back:

pHook:
mov [pContext],ecx
push ebp
mov ebp,esp
sub esp,10
jmp back

[DISABLE]

pBase:
push ebp
mov ebp,esp
sub esp,10

unregistersymbol( pBase )
unregistersymbol( pContext )
dealloc( pContext )
dealloc( pHook )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>198</ID>
          <Description>"pBase"</Description>
          <LastState Value="1E000068" Activated="0" RealAddress="019E88C0"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pBase</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>195</ID>
          <Description>"pContext"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="0B1E0100"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pContext</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>196</ID>
          <Description>"Cheat Handler"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 4096 )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
alloc( KeyHandlerOff, 4 )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )

// Functions list start

label( IncreaseSpawnedHorseJumpLength )
label( DecreaseSpawnedHorseJumpLength )
label( NavalSinkPlayerShip )
label( OnlineIncrementKillCount )
label( ResetConflict )
label( IncreaseNotoriety )
label( DecreaseNotoriety )
label( IncreaseWantedLevel )
label( DecreaseWantedLevel )
label( UnfogCurrentMap )
label( NavalShowSpeedInfo )
label( NavalIgnoreWindDirection )
label( ChangeDebugDudeType )
label( ToggleHud )
label( SetMaxAssassinRank )
label( TogglePlayerVanish )
label( EnableAssassinCollisionWithTriggerZones )
label( NavalCrewMode )
label( NavalRaiseBeaufortScale )
label( NavalLowerBeaufortScale )
label( LockAllWorldUpgrades )
label( SpawnFollowDude )
label( SpawnFightDude )
label( SpawnShipDude )
label( SpawnRedBallDude )
label( SpawnStillDude )
label( NavalDamagePlayerShip )
label( ToggleFullProgressTrackerUnlock )
label( UnlockAllWorldUpgrades )
label( UnlockAndGainAllWorldUpgrades )
label( InfiniteBreathMode )
label( FightCheatMode )
label( FightActionsPacing )
label( FightDecisionsPacing )
label( FightDecisionsPacingStreak )
label( FightActionsPacingStreak )
label( ComboKillOverride )
label( RangedComboKillOverride )
label( ForceSingleHiddenBlade )
label( IncrementAllEquippedFirearmsDamageRating )
label( IncrementAllEquippedFirearmsIncapacitateRating )
label( DisableGroupPhysics )
label( NavalAddCrew )
label( NavalRemoveCrew )
label( NukeEnemies )
label( NukeAllies )
label( NukeYourself )
label( RefillAllEquipment )
label( ToggleCrowdAirAssassination )
label( NavalIncapacitateNearbyEnemyShips )
label( NavalIncapacitateNearbyAllyShips )
label( Invisible )
label( RefillPlayerHealth )
label( NavalInvisible )
label( GodMode )

// end of Functions list

KeyHandlerOff:
dd 0

KeyHandlerThread:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff],1
je ExitKeyHandler

push 60 // VK_NUMPAD0
call GetAsyncKeyState
test ax,ax
jne TogglePlayerVanish

push 6E // VK_DECIMAL
call GetAsyncKeyState
test ax,ax
jne GodMode

push 61 // VK_NUMPAD1
call GetAsyncKeyState
test ax,ax
jne RefillAllEquipment

push 62 // VK_NUMPAD2
call GetAsyncKeyState
test ax,ax
jne Invisible

push 63 // VK_NUMPAD3
call GetAsyncKeyState
test ax,ax
jne NavalInvisible

push 64 // VK_NUMPAD4
call GetAsyncKeyState
test ax,ax
jne InfiniteBreathMode

push 65 // VK_NUMPAD5
call GetAsyncKeyState
test ax,ax
jne ResetConflict

push 66 // VK_NUMPAD6
call GetAsyncKeyState
test ax,ax
jne NavalIgnoreWindDirection

push 67 // VK_NUMPAD7
call GetAsyncKeyState
test ax,ax
jne IncreaseWantedLevel

push 69 // VK_NUMPAD9
call GetAsyncKeyState
test ax,ax
jne DecreaseWantedLevel


jmp KeyHandlerThread

//******************************************
//*                                        *
//*          Debug Menu Functions          *
//*                                        *
//******************************************

// Nuke Enemies
// pseudo: Nuke_Enemies( 1, pContext )

NukeEnemies:
push [pContext]
push [pContext]
push 1
mov ecx,[pBase+3F4]
call ecx
add esp,C
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Nuke Allies
// pseudo: Nuke_Allies( 1, pContext )

NukeAllies:
push [pContext]
push 1
mov ecx,[pBase+4F4]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Refill player's health
// pseudo: Refill_PlayerHealth( 1, pContext )

RefillPlayerHealth:
push [pContext]
push 1
mov ecx,[pBase+587]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Reset Conflict
// pseudo: Reset_Conflict( 1, pContext )

ResetConflict:
push [pContext]
push 1
mov ecx,[pBase+622]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Refill All Equipment
// pseudo: Refill_AllEquipment( 1, pContext )

RefillAllEquipment:
push [pContext]
push 1
mov ecx,[pBase+671]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Nuke Yourself
// pseudo: Nuke_Yourself( 1, pContext )

NukeYourself:
push [pContext]
push 1
mov ecx,[pBase+6C1]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Toggle Crowd Air Assassination
// pseudo: Toggle_Crowd_AirAssassination( 1, pContext )

ToggleCrowdAirAssassination:
push [pContext]
push 1
mov ecx,[pBase+7C6]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Change Debug Dude Type
// pseudo: Change_Debug_DudeType( 1, pContext )

ChangeDebugDudeType:
push [pContext]
push 1
mov ecx,[pBase+87C]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Spawn Follow Dude
// pseudo: Spawn_FollowDude( 1, pContext )

SpawnFollowDude:
push [pContext]
push 1
mov ecx,[pBase+8C3]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Spawn RedBall Dude
// pseudo: Spawn_RedBallDude( 1, pContext )

SpawnRedBallDude:
push [pContext]
push 1
mov ecx,[pBase+913]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Spawn Still Dude
// pseudo: Spawn_StillDude( 1, pContext )

SpawnStillDude:
push [pContext]
push 1
mov ecx,[pBase+963]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Spawn Fight Dude
// pseudo: Spawn_FightDude( 1, pContext )

SpawnFightDude:
push [pContext]
push 1
mov ecx,[pBase+9B7]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Spawn Ship Dude
// pseudo: Spawn_ShipDude( 1, pContext )

SpawnShipDude:
push [pContext]
push 1
mov ecx,[pBase+A26]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Increase JumpLength for Spawned Debug Horse
// pseudo: Increase_JumpLength( 1 )

IncreaseSpawnedHorseJumpLength:
push 1
mov ecx,[pBase+A80]
call ecx
add esp,4
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Decrease JumpLength for Spawned Debug Horse
// pseudo: Decrease_JumpLength( 1 )

DecreaseSpawnedHorseJumpLength:
push 1
mov ecx,[pBase+AF6]
call ecx
add esp,4
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Decrease Notoriety
// pseudo: Decrease_Notoriety( 1, pContext )

DecreaseNotoriety:
push [pContext]
push 1
mov ecx,[pBase+B64]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Increase Notoriety
// pseudo: Increase_Notoriety( 1, pContext )

IncreaseNotoriety:
push [pContext]
push 1
mov ecx,[pBase+BB4]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Decrease Wanted Level
// pseudo: Decrease_WantedLevel( 1, pContext )

DecreaseWantedLevel:
push [pContext]
push 1
mov ecx,[pBase+C04]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Increase Wanted Level
// pseudo: Increase_WantedLevel( 1, pContext )

IncreaseWantedLevel:
push [pContext]
push 1
mov ecx,[pBase+C54]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Blend Action] Toggle Player Vanish :
// pseudo: Toggle_PlayerVanish( 1, pContext )

TogglePlayerVanish:
{$lua}
if( syntaxcheck == false ) then
if readInteger( "bSound" ) == 0 then --could be 2 already
  playSound(ONSound)
  writeInteger( "bSound", 1 ) --tell the thread to kill itself
else
  playSound(OFFSound)
  writeInteger( "bSound", 0 ) --tell the thread to kill itself
end
end
{$asm}
push [pContext]
push 1
mov ecx,[pBase+CA3]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Unfog current map
// pseudo: Unfog_CurrentMap( 1, pContext )

UnfogCurrentMap:
push [pContext]
push 1
mov ecx,[pBase+CF3]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Unlock All World Upgrades
// pseudo: Unlock_All_WorldUpgrades( 1, pContext )

UnlockAllWorldUpgrades:
push [pContext]
push 1
mov ecx,[pBase+D92]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Toggle Full Progress Tracker Unlock
// pseudo: Toggle_Full_ProgressTrackerUnlock( 1, pContext )

ToggleFullProgressTrackerUnlock:
push [pContext]
push 1
mov ecx,[pBase+F44]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Unlock And Gain All World Upgrades
// pseudo: Unlock_And_GainAllWorldUpgrades( 1, pContext )

UnlockAndGainAllWorldUpgrades:
push [pContext]
push 1
mov ecx,[pBase+FB5]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Lock All World Upgrades
// pseudo: Lock_All_WorldUpgrades( 1, pContext )

LockAllWorldUpgrades:
push [pContext]
push 1
mov ecx,[pBase+1026]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// ***DISABLED***Set Max Assassin Rank (All Abilities):
// pseudo: Set_Max_AssassinRank( 1, pContext )

SetMaxAssassinRank:
push [pContext]
push 1
mov ecx,[pBase+1098]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Invisible :
// pseudo: Invisible( 1, pContext )

Invisible:
push [pContext]
push 1
mov ecx,[pBase+10E7]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// God Mode :
// pseudo: God_Mode( 1, pContext )

GodMode:
push [pContext]
push 1
mov ecx,[pBase+1137]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Infinite Breath Mode :
// pseudo: Infinite_BreathMode( 1, pContext )

InfiniteBreathMode:
push [pContext]
push 1
mov ecx,[pBase+1185]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Enable assassin collision with trigger zones :
// pseudo: Enable_Assassin_CollisionWithTriggerZones( 1, pContext )

EnableAssassinCollisionWithTriggerZones:
push [pContext]
push 1
mov ecx,[pBase+11D5]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// ToggleHud
// pseudo: Toggle_HUD( 1, pContext )

ToggleHud:
push [pContext]
push 1
mov ecx,[pBase+12D2]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Online] Increment kill count
// pseudo: Increment_KillCount( 1 )

OnlineIncrementKillCount:
push 1
mov ecx,[pBase+1415]
call ecx
add esp,4
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Invisible:
// pseudo: Naval_Invisible( 1, pContext )

NavalInvisible:
push [pContext]
push 1
mov ecx,[pBase+1465]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Incapacitate nearby Enemy ships
// pseudo: Naval_Incapacitate_NearbyEnemyShips( 1, pContext )

NavalIncapacitateNearbyEnemyShips:
push [pContext]
push 1
mov ecx,[pBase+14BC]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Incapacitate nearby Ally ships
// pseudo: Naval_Incapacitate_NearbyAllyShips( 1, pContext )

NavalIncapacitateNearbyAllyShips:
push [pContext]
push 1
mov ecx,[pBase+152F]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Sink player ship
// pseudo: Naval_Sink_PlayerShip( 1, pContext )

NavalSinkPlayerShip:
push [pContext]
push 1
mov ecx,[pBase+159E]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Damage player ship
// pseudo: Naval_Damage_PlayerShip( 1, pContext )

NavalDamagePlayerShip:
push [pContext]
push 1
mov ecx,[pBase+15ED]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Show Speed Info
// pseudo: Naval_Show_SpeedInfo( 1, pContext )

NavalShowSpeedInfo:
push [pContext]
push 1
mov ecx,[pBase+163D]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Ignore Wind Direction
// pseudo: Naval_Ignore_WindDirection( 1, pContext )

NavalIgnoreWindDirection:
push [pContext]
push 1
mov ecx,[pBase+168C]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Raise Beaufort Scale :
// pseudo: Naval_Raise_BeaufortScale( 1, pContext )

NavalRaiseBeaufortScale:
push [pContext]
push 1
mov ecx,[pBase+16E0]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Lower Beaufort Scale :
// pseudo: Naval_Lower_BeaufortScale( 1, pContext )

NavalLowerBeaufortScale:
push [pContext]
push 1
mov ecx,[pBase+1735]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Crew Mode :
// pseudo: Naval_CrewMode( 1, pContext )

NavalCrewMode:
push [pContext]
push 1
mov ecx,[pBase+1787]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Add Crew :
// pseudo: Naval_AddCrew( 1, pContext )

NavalAddCrew:
push [pContext]
push 1
mov ecx,[pBase+17F5]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Naval Remove Crew :
// pseudo: Naval_RemoveCrew( 1, pContext )

NavalRemoveCrew:
push [pContext]
push 1
mov ecx,[pBase+1845]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Fight Cheat Mode :
// pseudo: Fight_CheatMode( 1, pContext )

FightCheatMode:
push [pContext]
push 1
mov ecx,[pBase+189C]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Fight Actions pacing :
// pseudo: Fight_ActionsPacing( 1, pContext )

FightActionsPacing:
push [pContext]
push 1
mov ecx,[pBase+190E]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Fight Decisions pacing :
// pseudo: Fight_DecisionsPacing( 1, pContext )

FightDecisionsPacing:
push [pContext]
push 1
mov ecx,[pBase+1963]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Fight Decisions pacing (Streak) :
// pseudo: Fight_Decisions_PacingStreak( 1, pContext )

FightDecisionsPacingStreak:
push [pContext]
push 1
mov ecx,[pBase+19B7]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Fight Actions pacing (Streak) :
// pseudo: Fight_Actions_PacingStreak( 1, pContext )

FightActionsPacingStreak:
push [pContext]
push 1
mov ecx,[pBase+1A0B]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Combo Kill Override :
// pseudo: Combo_KillOverride( 1, pContext )

ComboKillOverride:
push [pContext]
push 1
mov ecx,[pBase+1A60]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Ranged Combo Kill Override :
// pseudo: Ranged_Combo_KillOverride( 1, pContext )

RangedComboKillOverride:
push [pContext]
push 1
mov ecx,[pBase+1AB5]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Force Single Hidden Blade :
// pseudo: Force_Single_HiddenBlade( 1, pContext )

ForceSingleHiddenBlade:
push [pContext]
push 1
mov ecx,[pBase+1B0C]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// [Fight Tests] Disable Group Physics :
// pseudo: Disable_GroupPhysics( 1, pContext )

DisableGroupPhysics:
push [pContext]
push 1
mov ecx,[pBase+1B5E]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Increment All Equipped Firearms Damage Rating :
// pseudo: Increment_All_EquippedFirearmsDamageRating( 1, pContext )

IncrementAllEquippedFirearmsDamageRating:
push [pContext]
push 1
mov ecx,[pBase+1BB4]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

// Increment All Equipped Firearms Incapacitate Rating :
// pseudo: Increment_All_EquippedFirearmsIncapacitateRating( 1, pContext )

IncrementAllEquippedFirearmsIncapacitateRating:
push [pContext]
push 1
mov ecx,[pBase+1C26]
call ecx
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread

ExitKeyHandler:
mov [KeyHandlerOff],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( KeyHandlerOff )
dealloc( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
dealloc( KeyHandlerThread )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>197</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>47</ID>
          <Description>"ToggleHud_CallCheatWithArgs"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread_ToggleHud, 1024 )
registersymbol( KeyHandlerThread_ToggleHud )
CreateThread( KeyHandlerThread_ToggleHud )
alloc( KeyHandlerOff_ToggleHud, 4 )
registersymbol( KeyHandlerOff_ToggleHud )
alloc( pToggleHud, 2048 )
registersymbol( pToggleHud )
label( ExitKeyHandler_ToggleHud )
label( ToggleHud )

KeyHandlerOff_ToggleHud:
dd 0

pToggleHud+7C8:
dd 0

KeyHandlerThread_ToggleHud:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff_ToggleHud],1
je ExitKeyHandler_ToggleHud

push 6F // NUM_DIVIDE
call GetAsyncKeyState
test ax,ax
jne ToggleHud

jmp KeyHandlerThread_ToggleHud

ToggleHud:
push 2F9B51B4
push 1
call 019B0BE0
add esp,8
push C8
call kernel32.Sleep
jmp KeyHandlerThread_ToggleHud

ExitKeyHandler_ToggleHud:
mov [KeyHandlerOff_ToggleHud],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff_ToggleHud" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff_ToggleHud", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff_ToggleHud" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( pToggleHud )
dealloc( pToggleHud )
unregistersymbol( KeyHandlerOff_ToggleHud )
dealloc( KeyHandlerOff_ToggleHud )
unregistersymbol( KeyHandlerThread_ToggleHud )
dealloc( KeyHandlerThread_ToggleHud )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"ToggleHud_CallOffAndOn"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread_ToggleHud, 1024 )
registersymbol( KeyHandlerThread_ToggleHud )
CreateThread( KeyHandlerThread_ToggleHud )
alloc( KeyHandlerOff_ToggleHud, 4 )
registersymbol( KeyHandlerOff_ToggleHud )
label( ExitKeyHandler_ToggleHud )
label( ToggleHud )
label( ToggleHud_exit )
label( bHud )

KeyHandlerOff_ToggleHud:
dd 0

KeyHandlerOff_ToggleHud+300:
bHud:
dd 0

KeyHandlerThread_ToggleHud:
push 0a
call kernel32.Sleep

cmp [KeyHandlerOff_ToggleHud],1
je ExitKeyHandler_ToggleHud

push 6F // NUM_DIVIDE
call GetAsyncKeyState
test ax,ax
jne ToggleHud

jmp KeyHandlerThread_ToggleHud

ToggleHud:
xor [bHud],1
mov ecx,[04DF38A8]
push 0E
cmp [bHud],0
je @f
call 012D5AD0
jmp ToggleHud_exit
@@:
call 012D5AE0
ToggleHud_exit:
push C8
call kernel32.Sleep
jmp KeyHandlerThread_ToggleHud

ExitKeyHandler_ToggleHud:
mov [KeyHandlerOff_ToggleHud],2
ret

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff_ToggleHud" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff_ToggleHud", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff_ToggleHud" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( pToggleHud )
dealloc( pToggleHud )
unregistersymbol( KeyHandlerOff_ToggleHud )
dealloc( KeyHandlerOff_ToggleHud )
unregistersymbol( KeyHandlerThread_ToggleHud )
dealloc( KeyHandlerThread_ToggleHud )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>188</ID>
          <Description>"Coords"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( cave, 1024 )
label( PlayerCoordsPtr )
registersymbol( PlayerCoordsPtr )
label( back )

cave:
push ecx
mov ecx,PlayerCoordsPtr
mov [ecx],eax
pop ecx
movaps [esi+000001F0],xmm0
jmp back

cave+500:
PlayerCoordsPtr:
dd 0

47A27D:
jmp cave
db 90 90
back:

[DISABLE]

47A27D:
movaps [esi+000001F0],xmm0

unregistersymbol( PlayerCoordsPtr )
dealloc( cave )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>189</ID>
              <Description>"X"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000030"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>PlayerCoordsPtr</Address>
              <Offsets>
                <Offset>30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>191</ID>
              <Description>"Y"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000034"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>PlayerCoordsPtr</Address>
              <Offsets>
                <Offset>34</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>190</ID>
              <Description>"Z"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000038"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>PlayerCoordsPtr</Address>
              <Offsets>
                <Offset>38</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pRefill</Name>
      <Address>02713B80</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pRefil1</Name>
      <Address>019E8A1C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwRefillPlayerHealth</Name>
      <Address>019DA330</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MarkerAddress</Name>
      <Address>015F99B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>XYZAddress</Name>
      <Address>0047A109</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MapMarkerCoordinates</Name>
      <Address>096A00BC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Toggler</Name>
      <Address>08D80500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMenu</Name>
      <Address>04DFDD5C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dwContextHook</Name>
      <Address>01AFA710</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>DisableDisabler</Name>
      <Address>01448453</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>PlayerCoordsPtr</Name>
      <Address>23860500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBase</Name>
      <Address>019E88C0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>by mgr.inz.Player
</Comments>
  <LuaScript>-- TRICK STARTS HERE


-- fix MemoryStream write, and add other useful methods
if oldcreateMemoryStream==nil then oldcreateMemoryStream = createMemoryStream end
function createMemoryStream()
  local obj = oldcreateMemoryStream()
  local oldwrite=obj.write

  obj.write = function (t,n)  -- override default write
              local count=0
              for _,v in ipairs(t) do
                if count==n then break end
                oldwrite({v},1)
                count=count+1
              end
            end

  obj.writeDword = function (v) obj.write(dwordToByteTable(v)) end
  obj.writeWord = function (v) obj.write(wordToByteTable(v)) end

  return obj
end



header = {
0x46464952,0x00000000,0x45564157,0x20746D66,0x0000001E,0x00020055,
0x0000AC44,0x00000020,0x00000001,0x0001000C,0x00000002,0x00010001,
0x61660571,0x00047463,0x2FF80000,0x61640014
} -- 44100Hz  , Stereo

--convertMP3ToRIFFMP3(stream, stereo, rate)
--convertMP3ToRIFFMP3(stream) == convertMP3ToRIFFMP3(stream, true, 44100)
--convertMP3ToRIFFMP3(stream, false) == convertMP3ToRIFFMP3(stream, false, 44100)
function convertMP3ToRIFFMP3(stream, stereo, rate)
  local riffmp3 = createMemoryStream()
  for i,v in ipairs(header) do riffmp3.writeDword(v) end

  riffmp3.writeWord(0x6174)
  riffmp3.writeDword(stream.Size)
  riffmp3.copyFrom(stream,stream.Size)

  riffmp3.Position = 0x4; riffmp3.writeDword(stream.Size+0x24)

  if stereo==false then riffmp3.Position = 0x16; riffmp3.writeWord(1) end
  if tonumber(rate) then riffmp3.Position = 0x18; riffmp3.writeDword(rate) end

  riffmp3.Position = riffmp3.Size - 1
  return riffmp3
end


if oldplaySound==nil then oldplaySound=playSound end

function playSound(track, ...)
  if track==nil then return end

  local stream
  if track.ClassName=='TMemoryStream' then stream=track else stream=track.Stream end

  if streamSwapTable==nil then streamSwapTable = {} end

  local ID=userDataToInteger(stream)
  if streamSwapTable[ID]~=nil then oldplaySound(streamSwapTable[ID], ...) return end

  stream.Position = 0
  if table.concat(stream.read(4),'-')=='73-68-51-4' then
    -- found mp3 file, converting
    -- convertMP3ToRIFFMP3(stream, stereo, rate)
    stream.Position = 0
    local riffmp3 = convertMP3ToRIFFMP3(stream, true, 32000)  -- ADJUST THIS LINE
    streamSwapTable[ID]=riffmp3
    oldplaySound(riffmp3, ...)
  else
    -- other file (wav)
    streamSwapTable[ID]=stream
    oldplaySound(stream, ...)
  end
end

-- TRICK ENDS HERE ^^^^^



ONSound = findTableFile([[ON.mp3]])
OFFSound = findTableFile([[OFF.mp3]])
shutdownSound = findTableFile([[shutdown.mp3]])


function CEButton1Click(sender)
  playSound(ONSound)
end

function CEButton2Click(sender)
  playSound(OFFSound)
end

function CEButton3Click(sender)
  playSound(shutdownSound)
end

UDF1.show()

function FormClose(sender)
  closeCE()
  return caFree
end
</LuaScript>
</CheatTable>
