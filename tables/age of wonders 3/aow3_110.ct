<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Set Gold"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentGold)
label(Gold)
registersymbol(Gold)
registersymbol(CurrentGold)
aobscan(Goldaob,8b 83 84 04 00 00 50 68 ** ** ** ** 8d 4c 24 18 51)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[CurrentGold]
mov [ebx+00000484],ecx
pop ecx

originalcode:
mov eax,[ebx+00000484]

exit:
jmp returnhere

CurrentGold:
dd 0

Goldaob:
Gold:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Gold:
mov eax,[ebx+00000484]
//Alt: db 8B 83 84 04 00 00
unregistersymbol(Gold)
unregistersymbol(CurrentGold)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"CurrentGold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentGold</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Set Mana"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentMana)
label(Mana)
registersymbol(Mana)
registersymbol(CurrentMana)
aobscan(Manaaob,8b 83 88 04 00 00 50 68 ** ** ** ** 8d 44 24 18 50)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[CurrentMana]
mov [ebx+00000488],ecx
pop ecx

originalcode:
mov eax,[ebx+00000488]

exit:
jmp returnhere

CurrentMana:
dd 0

Manaaob:
Mana:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Mana:
mov eax,[ebx+00000488]
//Alt: db 8B 83 88 04 00 00
unregistersymbol(Mana)
unregistersymbol(CurrentMana)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"CurrentMana"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentMana</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Set CastingPoints"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentCastingPoints)
label(CastingPoints)
registersymbol(CastingPoints)
registersymbol(CurrentCastingPoints)
aobscan(CastingPointsaob,8b 83 ** 0a 00 00 50 68 ** ** ** ** 8d 4c 24 18 51)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[CurrentCastingPoints]
mov [ebx+00000AD8],ecx
pop ecx

originalcode:
mov eax,[ebx+00000AD8]

exit:
jmp returnhere

CurrentCastingPoints:
dd 0

CastingPointsaob:
CastingPoints:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
CastingPoints:
mov eax,[ebx+00000AD8]
//Alt: db 8B 83 D0 0A 00 00
unregistersymbol(CastingPoints)
unregistersymbol(CurrentCastingPoints)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"CurrentCastingPoints"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentCastingPoints</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>56</ID>
      <Description>"Set Knowledge"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentKnowledge)
label(Knowledge)
registersymbol(CurrentKnowledge)
registersymbol(Knowledge)
aobscan(Knowledgeaob,8b 81 58 01 00 00 c3 8b 91 6c 01 00 00 53 33 c0)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ebx
mov ebx,[CurrentKnowledge]
mov [ecx+00000158],ebx
pop ebx

originalcode:
mov eax,[ecx+00000158]

exit:
jmp returnhere

CurrentKnowledge:
dd 0

Knowledgeaob:
Knowledge:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Knowledge:
mov eax,[ecx+00000158]
//Alt: db 8B 81 58 01 00 00
unregistersymbol(Knowledge)
unregistersymbol(CurrentKnowledge)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>57</ID>
          <Description>"CurrentKnowledge"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentKnowledge</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Set Population"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentPopulation)
label(Population)
registersymbol(Population)
registersymbol(CurrentPopulation)
aobscan(Populationaob,8b 89 c0 06 00 00 89 4d ac 3b c3 74 **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[CurrentPopulation]
mov [ecx+000006C0],eax
pop eax

originalcode:
mov ecx,[ecx+000006C0]

exit:
jmp returnhere

CurrentPopulation:
dd 0

Populationaob:
Population:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Population:
mov ecx,[ecx+000006C0]
//Alt: db 8B 91 C0 06 00 00
unregistersymbol(Population)
unregistersymbol(CurrentPopulation)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"CurrentPopulation"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentPopulation</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"Add Unit Experience #20"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(Experience)
registersymbol(Experience)
aobscan(Experienceaob,8b 53 10 8b ba 54 02 00 00 b9 01 00 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov edx,[ebx+10]
add [edx+00000254],(int)20
mov edi,[edx+00000254]

exit:
jmp returnhere

Experienceaob:
Experience:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Experience:
mov edx,[ebx+10]
mov edi,[edx+00000254]
//Alt: db 8B 53 10 8B BA 54 02 00 00
unregistersymbol(Experience)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Restore Combat Health"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CombatHealth)
registersymbol(CombatHealth)
aobscan(CombatHealthaob,8b 80 04 04 00 00 50 68 ** ** ** ** 8b cf 51)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ebx
mov ebx,[eax+00000250]
mov [eax+00000404],ebx
pop ebx

originalcode:
mov eax,[eax+00000404]

exit:
jmp returnhere

CombatHealthaob:
CombatHealth:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
CombatHealth:
mov eax,[eax+00000404]
//Alt: db 8B 80 04 04 00 00
unregistersymbol(CombatHealth)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"Combat Casting Points 500"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CombatCastingPoints)
registersymbol(CombatCastingPoints)
aobscan(CombatCastingPointsaob,83 bf ** 00 00 00 00 75 ** b8 07 00 00 00 5e c3)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [edi+000000CC],(int)500

originalcode:
cmp dword ptr [edi+000000CC],00

exit:
jmp returnhere

CombatCastingPointsaob:
CombatCastingPoints:
jmp newmem
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
CombatCastingPoints:
cmp dword ptr [edi+000000CC],00
//Alt: db 83 BF C8 00 00 00 00
unregistersymbol(CombatCastingPoints)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Infinite Main Map Movement"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(Movement)
registersymbol(Movement)
aobscan(Movementaob,39 93 00 04 00 00 7d ** 8b 4d 08 8b 51 10)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [ebx+00000400],(int)100

originalcode:
cmp [ebx+00000400],edx

exit:
jmp returnhere

Movementaob:
Movement:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Movement:
cmp [ebx+00000400],edx
//Alt: db 39 93 00 04 00 00
unregistersymbol(Movement)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Infinite Combat Movement"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CombatMovement)
registersymbol(CombatMovement)
aobscan(CombatMovementaob,0f b6 11 39 90 00 04 00 00 7c ** b0 01 c3)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [eax+00000400],(int)100

originalcode:
movzx edx,byte ptr [ecx]
cmp [eax+00000400],edx

exit:
jmp returnhere

CombatMovementaob:
CombatMovement:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
CombatMovement:
movzx edx,byte ptr [ecx]
cmp [eax+00000400],edx
//Alt: db 0F B6 11 39 90 00 04 00 00
unregistersymbol(CombatMovement)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Instant Build"</Description>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(Production)
registersymbol(Production)
aobscan(Productionaob,2b 46 28 5e 5d c2 04 00 cc cc cc cc cc 8b 49 20)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
sub eax,[esi+28]
mov [esi+28],(int)10000
pop esi
pop ebp

exit:
jmp returnhere

Productionaob:
Production:
jmp newmem
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Production:
sub eax,[esi+28]
pop esi
pop ebp
//Alt: db 2B 46 28 5E 5D
unregistersymbol(Production)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>AoW3.exe+44B254 - E8 57D6CAFF           - call AoW3.exe+F88B0
AoW3.exe+44B259 - 8B 83 84040000        - mov eax,[ebx+00000484]
AoW3.exe+44B25F - 50                    - push eax
AoW3.exe+44B260 - 68 B80CD600           - push AoW3.exe+960CB8
AoW3.exe+44B265 - 8D 4C 24 18           - lea ecx,[esp+18]
AoW3.exe+44B269 - 51                    - push ecx
Read gold me only AoW3.exe+44B259    8b 83 84 04 00 00 50 68 ** ** ** ** 8d 4c 24 18 51

AoW3.exe+44B2C0 - 8B 83 88040000        - mov eax,[ebx+00000488]
AoW3.exe+44B2C6 - 50                    - push eax
AoW3.exe+44B2C7 - 68 C00CD600           - push AoW3.exe+960CC0
AoW3.exe+44B2CC - 8D 44 24 18           - lea eax,[esp+18]
AoW3.exe+44B2D0 - 50                    - push eax
Read mana me only AoW3.exe+44B2C0     8b 83 88 04 00 00 50 68 ** ** ** ** 8d 44 24 18 50

AoW3.exe+4D6D50 - 3B B9 50010000        - cmp edi,[ecx+00000150]
AoW3.exe+4D6D56 - 75 07                 - jne AoW3.exe+4D6D5F
AoW3.exe+4D6D58 - 8B 81 58010000        - mov eax,[ecx+00000158]
AoW3.exe+4D6D5E - C3                    - ret 
AoW3.exe+4D6D5F - 8B 91 6C010000        - mov edx,[ecx+0000016C]
AoW3.exe+4D6D65 - 53                    - push ebx
AoW3.exe+4D6D66 - 33 C0                 - xor eax,eax
read knmowledge me only AoW3.exe+4D6D58    8b 81 58 01 00 00 c3 8b 91 6c 01 00 00 53 33 c0

AoW3.exe+44B35E - 8B 83 D00A0000        - mov eax,[ebx+00000AD0]
AoW3.exe+44B364 - 50                    - push eax
AoW3.exe+44B365 - 68 88A1D600           - push AoW3.exe+96A188
AoW3.exe+44B36A - 8D 4C 24 18           - lea ecx,[esp+18]
AoW3.exe+44B36E - 51                    - push ecx
read casting points me only AoW3.exe+44B35E      8b 83 ** 0a 00 00 50 68 ** ** ** ** 8d 4c 24 18 51

AoW3.exe+58AAA5 - 39 93 00040000        - cmp [ebx+00000400],edx
AoW3.exe+58AAAB - 7D 1F                 - jnl AoW3.exe+58AACC
AoW3.exe+58AAAD - 8B 4D 08              - mov ecx,[ebp+08]
AoW3.exe+58AAB0 - 8B 51 10              - mov edx,[ecx+10]
AoW3.exe+58AAB3 - 8B 8A 48020000        - mov ecx,[edx+00000248]
AoW3.exe+58AAB9 - 8B 54 C1 04           - mov edx,[ecx+eax*8+04]
read movement points me only AoW3.exe+58AAA5     39 93 00 04 00 00 7d ** 8b 4d 08 8b 51 10

AoW3.exe+6FEE23 - 2B 46 28              - sub eax,[esi+28]
AoW3.exe+6FEE26 - 5E                    - pop esi
AoW3.exe+6FEE27 - 5D                    - pop ebp
AoW3.exe+6FEE28 - C2 0400               - ret 0004
AoW3.exe+6FEE2B - CC                    - int 3 
AoW3.exe+6FEE2C - CC                    - int 3 
AoW3.exe+6FEE2D - CC                    - int 3 
AoW3.exe+6FEE2E - CC                    - int 3 
AoW3.exe+6FEE2F - CC                    - int 3 
AoW3.exe+6FEE30 - 8B 49 20              - mov ecx,[ecx+20]
read production when i click city me only AoW3.exe+6FEE23    2b 46 28 5e 5d c2 04 00 cc cc cc cc cc 8b 49 20

AoW3.exe+4269D4 - 8B 49 08              - mov ecx,[ecx+08]
AoW3.exe+4269D7 - 8B 89 0C030000        - mov ecx,[ecx+0000030C]
AoW3.exe+4269DD - 8B 91 C0060000        - mov edx,[ecx+000006C0]
AoW3.exe+4269E3 - 89 55 B0              - mov [ebp-50],edx
AoW3.exe+4269E6 - 3B C3                 - cmp eax,ebx
AoW3.exe+4269E8 - 74 05                 - je AoW3.exe+4269EF
Population read me when i click city AoW3.exe+4269DD     8b 89 c0 06 00 00 89 4d ac 3b c3 74 **

AoW3.exe+6806B2 - 0FB6 11               - movzx edx,byte ptr [ecx]
AoW3.exe+6806B5 - 39 90 00040000        - cmp [eax+00000400],edx
AoW3.exe+6806BB - 7C 03                 - jnge AoW3.exe+6806C0
AoW3.exe+6806BD - B0 01                 - mov al,01
AoW3.exe+6806BF - C3                    - ret 
read me on click combat movement AoW3.exe+6806B5    0f b6 11 39 90 00 04 00 00 7c ** b0 01

AoW3.exe+555C96 - 8B 80 04040000        - mov eax,[eax+00000404]
AoW3.exe+555C9C - 50                    - push eax
AoW3.exe+555C9D - 68 F486D800           - push AoW3.exe+9886F4
AoW3.exe+555CA2 - 8B CF                 - mov ecx,edi
AoW3.exe+555CA4 - 51                    - push ecx
AoW3.exe+555CA5 - E8 B62EBAFF           - call AoW3.exe+F8B60
read all on click combat health AoW3.exe+555C96    8b 80 04 04 00 00 50 68 ** ** ** ** 8b cf 51

AoW3.exe+5D69DF - 83 BF C8000000 00     - cmp dword ptr [edi+000000C8],00
AoW3.exe+5D69E6 - 75 17                 - jne AoW3.exe+5D69FF
AoW3.exe+5D69E8 - B8 07000000           - mov eax,00000007
AoW3.exe+5D69ED - 5E                    - pop esi
AoW3.exe+5D69EE - C3                    - ret 
read combat casting points when opening combat spell book AoW3.exe+5D69DF   83 bf ** 00 00 00 00 75 ** b8 07 00 00 00 5e c3

AoW3.exe+61687B - 8B 4B 08              - mov ecx,[ebx+08]
AoW3.exe+61687E - 83 B9 04040000 00     - cmp dword ptr [ecx+00000404],00
AoW3.exe+616885 - 0F8E 4AFEFFFF         - jng AoW3.exe+6166D5
AoW3.exe+61688B - 8B C3                 - mov eax,ebx
AoW3.exe+61688D - E8 0E000000           - call AoW3.exe+6168A0
AoW3.exe+616892 - 5F                    - pop edi
AoW3.exe+616893 - 5E                    - pop esi
AoW3.exe+616894 - B0 01                 - mov al,01
read combat enemy units only AoW3.exe+61687E

AoW3.exe+5616F3 - 8B 53 10              - mov edx,[ebx+10]
AoW3.exe+5616F6 - 8B BA 54020000        - mov edi,[edx+00000254]
AoW3.exe+5616FC - B9 01000000           - mov ecx,00000001
AoW3.exe+561701 - E8 3A240C00           - call AoW3.exe+623B40
AoW3.exe+561706 - 50                    - push eax
AoW3.exe+561707 - 57                    - push edi
AoW3.exe+561708 - 68 D021DA00           - push AoW3.exe+9A21D0
experience read me when i click on unit AoW3.exe+5616F6    8b 53 10 8b ba 54 02 00 00 b9 01 00 00 00</Comments>
</CheatTable>
