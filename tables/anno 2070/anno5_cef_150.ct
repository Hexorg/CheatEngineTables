<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"1. Minimum Money (10k) and Licenses (1k)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobBasePointer,8B 8B 84 00 00 00 0F AC)
label(aobBasePointer_r)
label(return)
registersymbol(aobBasePointer_r)

label(money)
label(license)

newmem:
//==========MONEY==========
push ecx
mov ecx,[ebx+80]
cmp ecx,#10240000
jae money
mov [ebx+80],#10240000
money:
pop ecx
//==========MONEY==========
//==========LICENSES==========
push ecx
mov ecx,[ebx+88]
cmp ecx,#1024000
jae license
mov [ebx+88],#1024000
license:
pop ecx
//==========LICENSES==========
mov ecx,[ebx+00000084]
jmp return

aobBasePointer:
aobBasePointer_r:
jmp newmem
nop
return:
//=======================================//
[DISABLE]
aobBasePointer_r:
db 8B 8B 84 00 00 00
dealloc(basemem)
unregistersymbol(aobBasePointer_r)
//=======================================//
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>87</ID>
      <Description>"2. Current Money and Licenses (x*1024)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobBasePointer,8B 8B 84 00 00 00 0F AC)

label(aobBasePointer_r)
label(return)
registersymbol(aobBasePointer_r)
label(pBasePointer)
registersymbol(pBasePointer)

newmem:
mov dword ptr [pBasePointer],ebx
mov ecx,[ebx+00000084]
jmp return

pBasePointer:
dd 0

aobBasePointer:
aobBasePointer_r:
jmp newmem
nop
return:
//=======================================//
[DISABLE]
aobBasePointer_r:
db 8B 8B 84 00 00 00
dealloc(basemem)
unregistersymbol(aobBasePointer_r)
unregistersymbol(pBasePointer)
//=======================================//
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>88</ID>
          <Description>"Money"</Description>
          <Color>80000008</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>[pBasePointer]+80</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"License"</Description>
          <Color>80000008</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>[pBasePointer]+88</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>74</ID>
      <Description>"3. Energy (x*4096)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
AoBscan(aobEnergy,01 56 08 8B 5E 14)
label(aobEnergy_r)
label(returnhere)
registersymbol(aobEnergy_r)
registersymbol(pEnergy)
label(pEnergy)

newmem:
mov dword ptr [pEnergy],esi
mov [esi+08],#40960000
add [esi+08],edx
mov ebx,[esi+14]
jmp returnhere

pEnergy:
dd 0

aobEnergy:
aobEnergy_r:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
aobEnergy_r:
db 01 56 08 8B 5E 14
unregistersymbol(aobEnergy_r)
unregistersymbol(pEnergy)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>75</ID>
          <Description>"energy"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>[pEnergy]+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>66</ID>
      <Description>"4. Ecology (x*4096)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
AoBscan(aobEcology,01 5C C7 08 11 4C C7 0C)
label(aobEcology_r)
label(returnhere)
registersymbol(aobEcology_r)
registersymbol(pEcology)
label(pEcology)

newmem:
mov dword ptr [pEcology],edi
add [edi+eax*8+08],ebx
adc [edi+eax*8+0C],ecx
jmp returnhere

pEcology:
dd 0

aobEcology:
aobEcology_r:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
unregistersymbol(aobEcology_r)
unregistersymbol(pEcology)
aobEcology_r:
db 01 5C C7 08 11 4C C7 0C
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>67</ID>
          <Description>"ecology"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>[pEcology]+18</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"5. god mode - may be buggy"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
AoBscan(aobHP,01 46 08 B8 10 27 00 00)
label(aobHP_r)
label(returnhere)
label(exit)
registersymbol(aobHP_r)
registersymbol(pHP)
label(pHP)

newmem:
push ecx

mov ecx,[esi+04]
test ecx,ecx
jz exit

cmp dword ptr [ecx+48],0
jne exit

xor eax,eax
mov ecx,#40960000                 // 100%

mov [esi+08],ecx
mov [esi+0c],eax
mov edx,eax

exit:
pop ecx
mov dword ptr [pHP],ecx
add [esi+08],eax
mov eax,00002710
jmp returnhere

pHP:
dd 0

aobHP:
aobHP_r:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
unregistersymbol(aobHP_r)
unregistersymbol(pHP)
aobHP_r:
db 01 46 08 B8 10 27 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>85</ID>
      <Description>"6. Buildings Productivity - 1 = 100%"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
registersymbol(multiplier)
label(multiplier)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
imul edi,[multiplier],#1000
add [esi+0C],edi
test ebx,ebx

exit:
jmp returnhere

multiplier:
dd #1

"anno5.exe"+5352C5:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"anno5.exe"+5352C5:
add [esi+0C],edi
test ebx,ebx
//Alt: db 01 7E 0C 85 DB
unregistersymbol(multiplier)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>86</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>multiplier</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"7. Warehouse cargo"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
AoBscan(aobWH,8B 50 10 89 55 FC 80 7D 0C 00)
label(exit)
label(jump)
label(aobWH1_r)
label(returnhere)
registersymbol(aobWH1_r)
newmem:
mov edx,[esi+04]
cmp esi,[edx+00005f70]
jne exit

mov edx,[esi+0000039c]
lea edx,[edx-00004e20]
cmp edx,[eax+10]
jle jump


mov [eax+10],edx
jmp exit

jump:
mov edx,[esi+0000039c]
lea edx,[edx-0000176f]
cmp edx,[eax+10]
jge exit

mov [eax+10],edx

exit:
mov edx,[eax+10]
mov [ebp-04],edx
jmp returnhere

aobWH:
aobWH1_r:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
unregistersymbol(aobWH1_r)
aobWH1_r:
db 8B 50 10 89 55 FC
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>71</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>aobHP_r</Name>
      <Address>0079A359</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHP</Name>
      <Address>14B60039</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gBasePointer</Name>
      <Address>05C60011</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGold</Name>
      <Address>0D3302B8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCargo</Name>
      <Address>0D3302BC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSel</Name>
      <Address>0D3302C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pResInfo</Name>
      <Address>0D3302C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pIsland</Name>
      <Address>0D3302C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMG</Name>
      <Address>0D3302A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableML</Name>
      <Address>0D3302A4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMC</Name>
      <Address>0D3302A8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMW</Name>
      <Address>0D3302AC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>0D3302B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMF</Name>
      <Address>0D3302B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aLast</Name>
      <Address>0D3302CC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pEfficiency_r</Name>
      <Address>009342EF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>multiplier</Name>
      <Address>0C7A0014</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>money_</Name>
      <Address>10F1003C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>licenses_</Name>
      <Address>10F10040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobEcology_r</Name>
      <Address>015F680C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pEcology</Name>
      <Address>13930013</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobWH1_r</Name>
      <Address>01600F96</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobBasePointer_r</Name>
      <Address>01285A62</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
