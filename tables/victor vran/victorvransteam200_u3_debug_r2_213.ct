<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>166</ID>
      <Description>"ClassSearch"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(_ClassSearching,VictorVranSteam.exe,8D 7D E4 83 C4 04 83 7D F8 10)
aobscan(OffsetBase_NoHits,07 00 00 00 6E 6F 5F 68 69 74 73)
aobscan(OffsetBaseTimer,0A 00 00 00 74 69 6D 65 5F 6C 69 6D 69 74)
aobscan(OffsetBaseWeapon,62 61 73 65 5F 64 61 6D 61 67 65 00 20)
aobscan(OffsetBaseCardDamage,61 64 6D 00 24)
aobscan(OffsetBaseCardCritCh,03 00 00 00 61 63 63)
aobscan(OffsetBaseOverdrive,4D 61 78 4F 76 65 72 64 72 69 76 65)
aobscan(OffsetBaseCooldn,08 00 00 00 63 6F 6F 6C 64 6F 77 6E 00)
aobscan(OffsetBaseCooldnCh,63 6F 6F 6C 64 6F 77 6E 5F 63 68)
aobscan(OffsetBaseHltBase,49 6E 69 74 69 61 6C 48 65 61 6C 74 68)
aobscan(OffsetBaseHealth,68 65 61 6C 74 68 5F 6E 6F 5F 64 65 62 75 66)
aobscan(OffsetBaseMoveSp,0E 00 00 00 6D 6F 76 65 6D)
aobscan(OffsetBaseCardArmor,61 72 6D 6F 72 5F 70 65 72 5F 63 61 72 64)
aobscan(OffsetBaseCardHealth,68 65 61 6C 74 68 5F 70 65 72 5F 6F 72 62)
aobscan(OffsetBaseCardAP,68 65 61 6C 74 68 5F 70 65 72 5F 6F 72 62)
aobscan(OffsetBaseStacks,06 00 00 00 73 74 61 63 6B 73)
aobscan(OffsetBaseGold,04 00 00 00 47 6F 6C 64)
aobscan(OffsetBaseXP,02 00 00 00 58 50)
aobscan(OffsetBaseLevel,05 00 00 00 4C 65 76 65 6C 00)
aobscan(OffsetBaseWpnLevel,05 00 00 00 6C 65 76 65 6C 00)

alloc(newmem,256)
alloc(RefClass_no_hits,4) //Maps' Hit awareness: (get hit = challenge failed)
alloc(RefClass_time_limit,4) //Maps' Timed challenges limit

alloc(RefClass_base_damage,4) //Weapons' base damage
alloc(RefClass_adm,4) //Bonus damage prc from single card and combined bonuses from all equipped cards
alloc(RefClass_acc,4) //Bonus critical chance prc from single card and combined bonuses from all equipped cards
alloc(RefClass_MaxOverdrive,4)
alloc(RefClass_cooldown,4) //Cooldown for weapons' attacks &amp; consumables (potions category)
alloc(RefClass_cooldown_charged,4) //Cooldown for Lightning Gun overheat
alloc(RefClass_InitialHealth,4) //Character's Initial Health
alloc(RefClass_health_no_debuf,4) //MedKit's Health restoration
alloc(RefClass_movement_speed,4) //Bonus speed prc from single card and character's speed bonuses
alloc(RefClass_armor_per_card,4) //Bonus armor from The Saint Card
alloc(RefClass_health_per_orb,4) //Bonus health from The Saint Card
alloc(RefClass_ap_per_card,4) //Bonus armor penetration from The Devil Card
alloc(RefClass_stacks,4) //Charged amount for next (special) attack
alloc(RefClass_Gold,4) //Money acquired
alloc(RefClass_XP,4) //Full XP obtained
alloc(RefClass_Level,4) //Player actual level
alloc(RefClass_level__w,4) //Non-Legendary Weapon Level

label(code)
label(return)

registersymbol(RefClass_no_hits)
registersymbol(RefClass_time_limit)
registersymbol(RefClass_base_damage)
registersymbol(RefClass_adm)
registersymbol(RefClass_acc)
registersymbol(RefClass_MaxOverdrive)
registersymbol(RefClass_cooldown)
registersymbol(RefClass_cooldown_charged)
registersymbol(RefClass_InitialHealth)
registersymbol(RefClass_health_no_debuf)
registersymbol(RefClass_movement_speed)
registersymbol(RefClass_armor_per_card)
registersymbol(RefClass_health_per_orb)
registersymbol(RefClass_ap_per_card)
registersymbol(RefClass_stacks)
registersymbol(RefClass_Gold)
registersymbol(RefClass_XP)
registersymbol(RefClass_Level)
registersymbol(RefClass_level__w)
registersymbol(_ClassSearching)

newmem:
mov [RefClass_no_hits],OffsetBase_NoHits-0C
mov [RefClass_time_limit],OffsetBaseTimer-0C
mov [RefClass_base_damage],OffsetBaseWeapon-10
mov [RefClass_adm],OffsetBaseCardDamage-10
mov [RefClass_acc],OffsetBaseCardCritCh-0C
mov [RefClass_MaxOverdrive],OffsetBaseOverdrive-10
mov [RefClass_cooldown],OffsetBaseCooldn-0C
mov [RefClass_cooldown_charged],OffsetBaseCooldnCh-10
mov [RefClass_InitialHealth],OffsetBaseHltBase-10
mov [RefClass_health_no_debuf],OffsetBaseHealth-10
mov [RefClass_movement_speed],OffsetBaseMoveSp-0C
mov [RefClass_armor_per_card],OffsetBaseCardArmor-10
mov [RefClass_health_per_orb],OffsetBaseCardHealth-10
mov [RefClass_ap_per_card],OffsetBaseCardAP-10
mov [RefClass_stacks],OffsetBaseStacks-0C
mov [RefClass_Gold],OffsetBaseGold-0C
mov [RefClass_XP],OffsetBaseXP-0C
mov [RefClass_Level],OffsetBaseLevel-0C
mov [RefClass_level__w],OffsetBaseWpnLevel-0C

code:
  sub esp,34
  push ebx
  push esi
  jmp return

_ClassSearching-1E:
  jmp newmem
return:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
_ClassSearching-1E:
  db 83 EC 34 53 56
//sub esp,34
//push ebx
//push esi

unregistersymbol(RefClass_no_hits)
unregistersymbol(RefClass_time_limit)
unregistersymbol(RefClass_base_damage)
unregistersymbol(RefClass_adm)
unregistersymbol(RefClass_acc)
unregistersymbol(RefClass_MaxOverdrive)
unregistersymbol(RefClass_cooldown)
unregistersymbol(RefClass_cooldown_charged)
unregistersymbol(RefClass_InitialHealth)
unregistersymbol(RefClass_health_no_debuf)
unregistersymbol(RefClass_movement_speed)
unregistersymbol(RefClass_armor_per_card)
unregistersymbol(RefClass_health_per_orb)
unregistersymbol(RefClass_ap_per_card)
unregistersymbol(RefClass_stacks)
unregistersymbol(RefClass_Gold)
unregistersymbol(RefClass_XP)
unregistersymbol(RefClass_Level)
unregistersymbol(RefClass_level__w)
unregistersymbol(_ClassSearching)
dealloc(RefClass_no_hits)
dealloc(RefClass_time_limit)
dealloc(RefClass_base_damage)
dealloc(RefClass_adm)
dealloc(RefClass_MaxOverdrive)
dealloc(RefClass_cooldown)
dealloc(RefClass_cooldown_charged)
dealloc(RefClass_InitialHealth)
dealloc(RefClass_health_no_debuf)
dealloc(RefClass_movement_speed)
dealloc(RefClass_armor_per_card)
dealloc(RefClass_health_per_orb)
dealloc(RefClass_ap_per_card)
dealloc(RefClass_stacks)
dealloc(RefClass_Gold)
dealloc(RefClass_XP)
dealloc(RefClass_Level)
dealloc(RefClass_level__w)
dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>173</ID>
          <Description>"Huge Health"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(HH_Inject,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
alloc(newmem,256)
label(returnhere)
label(originalcode)
label(_freeze)
label(exit)
registersymbol(HH_Inject)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

mov edi,[RefClass_InitialHealth]
cmp [edx+08],edi
jne originalcode

_freeze:
mov eax,#250000
mov [edx],eax

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]


exit:
jmp returnhere

HH_Inject:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
HH_Inject:
  db 8B 4D 0C 8B 02

unregistersymbol(HH_Inject)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>174</ID>
          <Description>"FastFight (weapon cooldown)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
aobscanmodule(RetCheck1,VictorVranSteam.exe,89 4C 24 10 E9 x x x x 8B 44 24 1C 8B CF C1)
alloc(newmem,256)
label(code)
label(return)
label(_freeze)
registersymbol(INJECT)

newmem:
  pushfd
  mov edi,[ebp+04]
  cmp edi,RetCheck1-0A
  jne code

  mov edi,[RefClass_cooldown]
  cmp [edx+08],edi
  jne code
  cmp [edx+10],0
  jne code

  mov eax,[edx]
  cmp eax,#12000   //Hammer &amp; Shotgun Attacks, Shythe Shockwave, Mortar Fire Lake
  je _freeze
  cmp eax,#8000    //Lightning Trap, Sword Dash, Mortar Explosive Jump
  je _freeze
  cmp eax,#6000    //Ball Lightning
  je _freeze
  cmp eax,#5000    //Sword Slash
  je _freeze
  cmp eax,#3000    //Rapier Coupe De Grace
  je _freeze
  cmp eax,#16000   //Rapier Charge
  je _freeze
  cmp eax,#28000   //Shythe Whirlwind
  jne code

_freeze:
  mov eax,#500
  mov [edx],eax

code:
  popfd
  mov ecx,[ebp+0C]
  mov eax,[edx]
  jmp return

INJECT:
  jmp newmem
return:


[DISABLE]
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>175</ID>
          <Description>"Weapon Damage"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
alloc(newmem,256)
label(returnhere)
label(originalcode)
label(_freeze)
label(exit)
registersymbol(INJECT)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

mov edi,[RefClass_base_damage]
cmp [edx+08],edi
jne originalcode
cmp [edx+10],0
jne originalcode

mov eax,[edx]
cmp eax,3C   //Hammer
je _freeze
cmp eax,28   //Lightning Gun
je _freeze
cmp eax,19   //Mortar
je _freeze
cmp eax,18   //Rapier
je _freeze
cmp eax,17   //Sword
je _freeze
cmp eax,16   //Shotgun
je _freeze
cmp eax,08   //Shythe
jne originalcode

_freeze:
shl eax,3    //Base Damage x 8
mov [edx],eax

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]


exit:
jmp returnhere

INJECT:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>176</ID>
          <Description>"Potions/Bombs cooldowns"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
aobscan(RetCheck1,89 4C 24 10 E9 x x x x 8B 44 24 1C 8B CF C1) // should be unique
alloc(newmem,256)
label(returnhere)
label(originalcode)
label(_cooldn1)
label(_cooldn2)
label(exit)
registersymbol(INJECT)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
mov edi,[ebp+04]
cmp edi,RetCheck1-0A
jne originalcode

mov edi,[RefClass_cooldown]
cmp [edx+08],edi
jne originalcode
cmp [edx+10],03E40000
jna originalcode

mov eax,[edx]
cmp eax,#20000   //Med Kit
je _cooldn1
//cmp eax,#30000   //Healing: Potions &amp; Ambrosia
//je _cooldn1
cmp eax,#40000   //Potions: duration 20sec - Aether Vial excepted
je _cooldn2
//cmp eax,#60000   //Blood: duration 45sec
//je _cooldn2
cmp eax,#90000   //Bombs
je _cooldn1
jmp originalcode

_cooldn1:
mov eax,#1500
mov [edx],eax
jmp originalcode

_cooldn2:
mov eax,#5000
mov [edx],eax

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]

exit:
jmp returnhere

INJECT:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>177</ID>
          <Description>"Card Bonus Damage"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
aobscan(OffsetBase,61 64 6D 00 24) // should be unique
alloc(newmem,256)
label(returnhere)
label(originalcode)
label(_freeze)
label(exit)
registersymbol(INJECT)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

mov edi,[RefClass_adm]
cmp [edx+08],edi
jne originalcode
cmp [edx],3
jne originalcode

mov eax,[edx]

_freeze:
add eax,#500   //Damage Percentage (#1000 about x10 Damage
mov [edx],eax

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]


exit:
jmp returnhere

INJECT:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>178</ID>
          <Description>"Map's Hit awareness &amp; Timer(s)"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(__No_Hits_Timer_,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
aobscan(_GameTimers_,C3 CC 55 8B EC A1 xx xx 9B 00 56 8B 75 08)
alloc(newmem,256)
alloc(_storetimer,24)

label(original)
label(_exit)
label(return)
label(_timercode)
label(_counter_)
label(_savetime)
registersymbol(_storetimer)
registersymbol(__No_Hits_Timer_)

newmem:
mov edi,_GameTimers_+06
mov edi,[edi]
mov [_storetimer+10],edi
add edi,4010
mov [_storetimer+14],edi

pushfd
mov edi,[edx+08]
cmp [RefClass_no_hits],edi
jne _timercode
cmp [edx+10],0
jne original

mov edi,[edx]
cmp edi,0
je original
xor edi,edi
mov [edx],edi
jmp original

_timercode:
cmp [RefClass_time_limit],edi
jne original

cmp [edx],0
je original

push ecx
  xor ecx,ecx
  lea edi,[_storetimer]

_counter_:
  cmp [edi+ecx*4],edx
  je _exit
  cmp [edi+ecx*4],0
  je _savetime
  inc ecx
  cmp ecx,4
  jne _counter_
//in order to have a rolling storage
  xor ecx,ecx
  mov [edi+04],ecx
  mov [edi+08],ecx
  mov [edi+0C],ecx

_savetime:
  mov [edi+ecx*4],edx

_exit:
pop ecx


original:
popfd
  mov ecx,[ebp+0C]
  mov eax,[edx]
  jmp return

__No_Hits_Timer_:
  jmp newmem
return:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
__No_Hits_Timer_:
  db 8B 4D 0C 8B 02
//mov ecx,[ebp+0C]
//mov eax,[edx]

unregistersymbol(_storetimer)
unregistersymbol(__No_Hits_Timer_)
dealloc(_storetimer)
dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>727</ID>
              <Description>"Timer1"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>728</ID>
              <Description>"Timer2"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer+04</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>756</ID>
              <Description>"Timer3"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer+08</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>755</ID>
              <Description>"Timer4"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer+0C</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>758</ID>
              <Description>"Session Timer"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer+10</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>757</ID>
              <Description>"Map Timer"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storetimer+14</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys/>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys/>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>735</ID>
          <Description>"Items selection"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(Items_Inject,VictorVranSteam.exe,8B D0 89 54 24 14) // should be unique
//aobscan(OffsetBase_testing,0A 00 00 00 74 69 6D 65 5F 6C 69 6D 69 74)
alloc(newmem,1024)
alloc(store_mem,128)

label(returnhere)
label(originalcode)
label(exit)
label(_armor)
label(_bombs)
label(_cards)
label(_cardscc)
label(_cardsms)
label(_cooldn)
label(_cons_cooldn)
label(_cooldnch)
label(_fullXp)
label(_health)
label(_money)
label(_overdrive)
label(_pl_level)
label(_stacking)
label(_weapon)
label(_weapons)
label(_wpn_level)
label(_counter_)
label(_storage)
label(_savemulti_)

label(_storec_)
label(_storew_)
label(_storecd_)
label(_storeccd_)
label(_storeh_)
label(_stores_)
label(_storestk_)
label(_storegold_)
label(_storeMOverdr_)
label(_storelvl_)
label(_storexp_)
label(_storewlvl_)
registersymbol(Items_Inject)
registersymbol(_storew_)
registersymbol(_storec_)
registersymbol(_storecd_)
registersymbol(_storeccd_)
registersymbol(_storeh_)
registersymbol(_stores_)
registersymbol(_storeMOverdr_)
registersymbol(_storestk_)
registersymbol(_storegold_)
registersymbol(_storelvl_)
registersymbol(_storexp_)
registersymbol(_storewlvl_)

store_mem:
_storew_:
dd 0
dd 0
_storec_:
dd 0
dd 0
dd 0
_storecd_:
dd 0
dd 0
dd 0
dd 0
_storeccd_:
dd 0
_storeh_:
dd 0
_stores_:
dd 0
_storeMOverdr_:
dd 0
_storestk_:
dd 0
_storegold_:
dd 0
_storelvl_:
dd 0
_storexp_:
dd 0
_storewlvl_:
dd 0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
mov edx,[eax+08]

cmp edx,[RefClass_base_damage]
//Check for base_damage: Weapons, Bombs, Demon Powers
je _weapons
cmp edx,[RefClass_adm]
//Check for adm: Cards bonus damage
je _cards
cmp edx,[RefClass_movement_speed]
//Check for movement_speed: Card bonus speed
je _cardsms
cmp edx,[RefClass_acc]
//Check for movement_speed: Card bonus speed
je _cardscc
cmp edx,[RefClass_health_no_debuf]
//Check for health_no_debuf: MedKit class
je _health
cmp edx,[RefClass_armor_per_card]
//Check for armor_per_card: The Saint bonus armor
je _armor
cmp edx,[RefClass_stacks]
//Check for stacks: Stackable bonuses from weapons
je _stacking
cmp edx,[RefClass_Gold]
//Check for Gold: Money
je _money
cmp edx,[RefClass_XP]
//Check for XP: Overall Xp gained
je _fullXp
cmp edx,[RefClass_Level]
//Check for Level: current player level
je _pl_level
cmp edx,[RefClass_MaxOverdrive]
//Check for MaxOverdrive
je _overdrive
cmp edx,[RefClass_cooldown]
//Check for cooldown: Weapons' attack and consumable cooldowns
je _cooldn
cmp edx,[RefClass_cooldown_charged]
//Check for cooldown_charged: Shock cooldown
je _cooldnch
cmp edx,[RefClass_level__w]
//Check for cooldown_charged: Shock cooldown
je _wpn_level

jmp originalcode


_weapons:
//base_damage for Weapons, Demon Powers
  cmp [eax+10],0
  jne _bombs

_weapon:
    mov [_storew_],eax
    jmp originalcode

_bombs:
//base_damage for Bombs
    cmp [eax+10],03E40000
    jna originalcode

    mov [_storew_+04],eax
    jmp originalcode

_cards:
//Cards bonus damage (single or overall)
  mov [_storec_],eax
  jmp originalcode

_cardsms:
//Card bonus speed (or overall bonus speed)
  mov [_storec_+04],eax
  jmp originalcode

_cardscc:
//Card bonus speed (or overall bonus speed)
  mov [_storec_+08],eax
  jmp originalcode

_health:
//MedKit class
  mov [_storeh_],eax
  jmp originalcode

_armor:
//"The Saint" bonus armor
  mov [_stores_],eax
  jmp originalcode

_stacking:
//Stackable bonuses from weapons (Soul Shard an so on)
  cmp [eax],10     // overall stack charges max = 15
  jae originalcode

  mov [_storestk_],eax
  jmp originalcode

_money:
//Money available (mainly on Inventory) and piles collected
  cmp [eax+10],0
  jne originalcode

  mov [_storegold_],eax
  jmp originalcode

_fullXp:
//Overall Xp gained
  mov [_storexp_],eax
  jmp originalcode

_pl_level:
//current player level
  mov [_storelvl_],eax
  jmp originalcode

_overdrive:
//when overdrive bar is fully charged
  mov [_storeMOverdr_],eax
  jmp originalcode

_wpn_level:
//when overdrive bar is fully charged
  mov [_storewlvl_],eax
  jmp originalcode

//==========================================
//New classes go before the above line

_cooldn:
//Weapons' attack cooldowns
  cmp [eax+10],0
  jne _cons_cooldn

  cmp [eax],#3000
  jb originalcode
  cmp [eax],#28000
  jbe _storage
  jmp originalcode

_cons_cooldn:
//Consumable cooldowns (because have different structure)
    cmp [eax+10],03E40000
    jna originalcode

    cmp [eax],#20000
    jb originalcode
    cmp [eax],#90000
    ja originalcode

    mov [_storeccd_],eax
    jmp originalcode

_cooldnch:
//Shock cooldown (typically due by overheating)
//  cmp [eax+10],03E00000
//  jb originalcode

_storage:
//All cooldowns get here
//... but some values are from unknown sources
  push ecx
  xor ecx,ecx
  lea edx,[_storecd_]

_counter_:
  cmp [edx+ecx*4],eax
  je exit
  cmp [edx+ecx*4],0
  je _savemulti_

  inc ecx
  cmp ecx,4
  jne _counter_
//in order to have a rolling storage...
  xor ecx,ecx
  mov [edx+04],ecx
  mov [edx+08],ecx
  mov [edx+0C],ecx

_savemulti_:
  mov [edx+ecx*4],eax

exit:
  pop ecx

originalcode:
popfd
mov edx,eax
mov [esp+14],edx

jmp returnhere

Items_Inject:
jmp newmem
nop
returnhere:



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Items_Inject:
  db 8B D0 89 54 24 14
//mov edx,eax
//mov [esp+14],edx


unregistersymbol(_storew_)
unregistersymbol(_storec_)
unregistersymbol(_storecd_)
unregistersymbol(_storeccd_)
unregistersymbol(_storeh_)
unregistersymbol(_stores_)
unregistersymbol(_storeMOverdr_)
unregistersymbol(_storestk_)
unregistersymbol(_storegold_)
unregistersymbol(_storelvl_)
unregistersymbol(_storexp_)
unregistersymbol(_storewlvl_)
unregistersymbol(Items_Inject)
dealloc(store_mem)
dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>737</ID>
              <Description>"Weapon (damage) selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storew_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>738</ID>
              <Description>"Bomb (damage) selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storew_+04</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>739</ID>
              <Description>"Card (damage) selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storec_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>740</ID>
              <Description>"Card (speed) selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storec_+04</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>770</ID>
              <Description>"Card (crit chance) selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storec_+08</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>741</ID>
              <Description>"Health selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storeh_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>742</ID>
              <Description>"Stacking available"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storestk_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>120</Key>
                  </Keys>
                  <Value>15</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>743</ID>
              <Description>"Armor selected"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_stores_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>759</ID>
              <Description>"Level of selected weapon"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storewlvl_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>744</ID>
              <Description>"Max Overdrive"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storeMoverdr_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>745</ID>
              <Description>"Money"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storegold_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>746</ID>
              <Description>"Full XP"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storexp_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>747</ID>
              <Description>"Player level"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storelvl_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>748</ID>
              <Description>"Wpn cooldown1"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storecd_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>749</ID>
              <Description>"Wpn cooldown2"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storecd_+4</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>750</ID>
              <Description>"Wpn cooldown3"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storecd_+8</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>751</ID>
              <Description>"Wpn cooldown4"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storecd_+0C</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>752</ID>
              <Description>"Consumable cooldown"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_storeccd_</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>771</ID>
      <Description>"Fastest End Game walkthrough"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
[DISABLE]

{

Fastest End Game walkthrough
----------------------------

BIG WARNING: what follows contains game
spoilers. I suggest you to complete the game
at least once before continuing ............
............................................
............................................







1) Start new game;
2) Kill/Destroy everything in tutorial maps,
   as quickly as you can;
3) From now on, no chests loot at all, nor
   fights unless I state it;
4) Apply Huge Health and Weapon Damage for
   weapons of your choice; if you don't have
   them, do it when you return to hub;
5) Talk to the Queen then run through Royal
   Gardens and Talk Irene, then head to the
   Sepulcher of the Damned;
6) Jump over the railings and Talk to Private
   Stash; exit and run through Befouled Tomb;
7) Approach the Royal Crypt portal and skip
   to the Hub;
8) Talk to the Queen, load the Royal Crypt,
   and run to the portal for the Well of Worlds (farther chamber),
   then run and enter the Weeping Halls
9) Approach Adrian: kill him and all of his
   minions, loot that room and skip to Hub;
10) Talk to Sir Krum, then load the Hunting
    Grounds and run up and through Watchtower
    Ruins, Frostteeth Grotto and Widows' Mine,
    to talk to Irene (and Tzar Borimir), then
    skip back to the Hub;
11) Talk to the Queen;

Note) Now your tasks, to be clear, will be:
    - kill the Volkovs in Forlorn Chateau,
    - kill Screeching Calamity and its Wraits
      in Defiled Chapel,
    - kill Vail the Immortal (and a bunch of
      annoying skeletons) in the Mausoleum of
      Bones,
    - kill Rachnoss the Host and its minions
      in the Tangle,
    and just leveling up to level 10, because
    it is required to enter in the Den of the
    Broodmother. So, keep count of your kills.

12) Once killed the Volkovs, run through the
    Cemetery Grounds to the Onion Quarter,
    then up to the Defiled Chapel and kill
    everything after jumping down; talk to
    Tzar Borimir after looting;
13) Skip to the Hub, load the Onion Quarter
    to return to Cemetery Ground and into
    Mausoleum of Bones (if not available for
    fast travel), destroy the altar (Lich
    Phylactery), then Vail and the annoying
    skeletons surrounding you; loot all the
    drops;
14) Skip to the Hub, load Frostteeth Grotto or
    Widows' Mine, then exit out and run to The
    Tangle for Rachnoss the Host and its
    minions;
15) If you haven't still reached level 10,
    kill enough monsters (better in a high
    rewarding area) and get into the Den;

Note) From now on, kill monsters if you really
      need to, but never level up.

16) You need to go through the Merchant Quarter
    and through Heart of Frost to the exit,
    where you need to talk to Tzar Borimir,
    so you have to kill some kind of Champion;
17) Skip to the Hub and kill Apocalypse, then
    talk to Tzar Birimir;
18) Load the Well of Worlds and open the Portal:
    there, you can avoid any killing just
    circling around the room;
19) In the Demon World, you just need to
    defeat Wa-Lee;
20) Run through the Steam Quarter up to the
    Shunned Manor, via The Junction;
21) Again, kill if you have to (and you have),
    to reach the Sanctum Sanctorum;
22) Do just whatever it takes to defeat the
    Final Boss

END) Now, level up and, one map after another,
     complete all normal and Elite challenges
     and collect all the goodies you can.

Ending note: Exit to Main Menu and find out
    that your whole gaming time is far less
    then 2 hours, on Hard Mode!!!
    You also know that, to complete all the
    challenges, it will take another 30 hours.
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>754</ID>
      <Description>"Debug Info"</Description>
      <Options moManualExpandCollapse="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

[DISABLE]

{ Game   : VictorVranSteam.exe

Contents
I-Advanced Option addresses
II-Items selection full description
III-Map's Hit awareness &amp; Timer(s)
IV-Test scripts and new Invulnerabily
V-Base parameters
VI-Various analysis
VII-Conclusions


I - Advanced Option addresses

Primary hook code:   mov edx,eax
- Moved there, because variable to be red get their
  references moved for the following operations.
  If they need to be updated this part get
  skipped (they are already into stack)

Secondary hook code:   mov eax,[edx]
- It's not exactly the hook address
  (in cheats I hook 3 bytes above).
  There, variables/values are typically red
  and  copied to internal processing stack
  (mov [ecx],eax); when finished they are
  eventually reverted back, updated.
  You obtain this address if you use
  "Find what access this address" function
  on a value you're interested in.
  You obtain address to the next instruction
  if you use "Find what write ..." function
  instead.

Code following variable retrieval:
  lea ecx,[ecx+00]
  - Class reference is at [ebx]
  - Class mask is at [ebx+08]
  - Class descriptor starts at [ebx+10]
  - Most of the time in eax we have our
  reference, quite the same times is still
  to be initialized or re-located, less times
  it is a sub-reference or secondary factor
  and retrieved after one or more steps
  (mov eax,[eax+10])
  - We should hook also there for testing
    purposes, copying the whole check part and
    exiting to the first pop, or overwriting
    pop sequence plus ret without jumping back

Code following temp variable retrieval:
  cmp dword ptr [eax+0C],03
  - I called "temp variable", but there the
    program just retrieves non-masked variables;
    I got there in my former analysis when
    climbing up the chain of temporary addresses
    and finding out the origin:
    - Ex.: cooldown in recharge, and trying to
      find out "cooldown class", which was
      unknown at the time

Value/Variable move for calc/update:
  mov [ecx],eax
  - There, we are inside internal processing
    stack where valuesare moved for calculations
    or references are copied to get the next
    variable or call address

Addressing to all the above:
  jmp dword ptr [eax*4+VictorVranSteam.exe+4B430C]
  (VVS.exe+4B430C is version dependant)
  - Both primary and secondary hook are inside
    one routine.
    In the long outer (caller) routine, our
    call to our routine can be reached only if
    the case is met.
    So, in order to avoid a loooong scrolling
    up, I saved the select_case jump

Loading map call from MAIN:
  call VictorVranSteam.exe+4CD570
  (mind for game version)
  - ClassSearch hook is inside this call:
    through stack trace I found the Main and
    this one get executed only once when loading
    a map (hub included even when loading a saveslot).
    I thought it was a good idea avoiding continuous
    refreshes during play for all needed classes.


II - Items selection full description

The script hooks on primary code.
Weapon (damage) selected shows:
  - base_damage in Inventory on mouse over and
    when weapons are switched on the fly
  - calculated damage when firing
  - nominal minimum weapon damage
  - Demon power damage when firing
  - monster calculated damage when fighting
  - monster Demon power damage when fighting
  Reliable only outside combat and without
  using Demon powers, because their addresses
  mostly change on each use
Bomb (damage) selected shows:
  - Bomb damage in Inventory on mouse over, not
    refreshed on the fly
  Reliable for 1 bomb
Card (damage) selected shows:
  - Card damage bonus prc (%) in Inventory on
    mouse over and overall cards bonus damage
    (calculated on map loading and when
    equipping/removing card)
  It's Reliable, but:
  WARNING, the game performs multiplied sums
  and if the whole calc exceeds 7FFFFFFF the
  results it's considered negative (=healing
  effects)
Card (speed) selected shows:
  - movement_speed card bonus prc (%) in
    Inventory on mouse over and when Victor
    moves
  Reliable
Card (crit chance) selected shows:
  - critical chance card bonus prc (%) in
    Inventory on mouse over and overall cards
    bonus damage when hitting a monster
  Reliable
Health selected shows:
  - MedKit value from first use or in Inventory
    on mouse over
  Reliable
Stacking available shows:
  - last stacking (soul shards, aether charges)
  Monsters can stack too, and some other
  counts are made with the same class, so
  be warned that changes can even result in
  crashes or weird behaviours
Armor selected shows:
  - "The Saint" armor bonus only
  I saw nothing else, so far, and the value
  can be changed (when you have it equipped).
  "The Saint" card has, at the moment, side
  effects, like less money and items drops
Level of selected weapon shows:
  - actual level of selected weapon
  Be careful to change the right value, of
  course if you really want to equip something
  you couldn't at the price of reduced damage
Max Overdrive shows:
  - player Max Overdrive only
  Reliable. Can be changed on the fly, but
  the game restores it on next map loading,
  opening inventory or leveling up
Money shows:
  - gold count in Inventory on mouse over and
    picked money/new amount on the fly
  - an address or other values from time to time
  Be careful to change the right value
Full XP shows:
  - player's full XP all the time
Player level shows:
  - player actual level all the time
  You can change it up or down, but it can
  mess achievements stats
Wpn cooldown 1-:-4 show:
  - Weapon cooldown for equipped weapons until
    inside hub, usually, if you didn't already
    changed values outside default range
    (3000-28000), because of cheat filter
  - outside hub can get any other cooldown
    values, always in same range
Consumable cooldown shows:
  - cooldown for the last consumable equipped
    from Inventory (range 20000-90000)


III - Map's Hit awareness &amp; Timer(s)

The script hooks on secondary code, the same
goes for all others one time cheats.
I add this after the end of main quest and
discovering that Elite challenges had really
weird conditions, discovering in the process
other interesting info.
Hit awareness is:
  - disabled by default on activation, because,
    really, how you are supposed to go through
    hundreds of monsters and kill one champion
    in a ridiculous amount of time and never
    get hit once, while in Hard Mode....
    As side effect, challenges stop reporting
    you have not to be hit
Timer 1-:-4 show:
  - Rolling challenges time limits (in seconds)
  You can't change the timer (next point for
  explanations), but you can increase time
  limit for each challenge
Session timer shows:
  - session timer, of course, which starts as
    soon as you launch the game and never stops
    It shows values in milliseconds.
  NEVER touch it during gameplay
Map timer shows:
  - map timer, of course, which starts as soon
    as you load a map, and pause whenever you
    enter in "administrative mode" (Inventory,
    Transmutations, Stash, Pause Menu)
    It shows values in milliseconds.
  It is the real timer, but it's used to perform
  every action you take.
  Note that even change it, your game time will
  be increased anyway
  To test its visual effects, enter hub, wait
  a while (15-20 seconds), reset it, then make
  Victor go forward


IV - Test scripts and new Invulnerabily

Those are some script I used for debugging
purposes without completely switching to debug
mode.
They are a bit messy, but my thinking it's a
bit chaotic and their goal was quick testing.
"test" and "test2" hook on secondary code,
"test3" on primary.
For their use you need, of course, to disable
overlapping cheats

Invulnerability (more or less)
It hooks in the third possible position, after
variable retrieval.
I decided to avoid releasing it officially,
because during testing phase one named boss
got affected too (and I had to finish it in a
more standard way).
I tested it also in Bottomless Pit, so now it's
sure the map is cheated, because I wasn't killed,
but just declared "Dead" out of the blue.


V - Base parameters

The following are some of base parameters used
by the game

Weapon's base damage (base_damage)
Hammer: 0x3C,(60)
Lightning Gun: 0x28,(40)
Hand Mortar: 0x19,(25)
Rapier: 0x18,(24)
Sword: 0x17,(23)
Shotgun: 0x16,(22)
Shythe: 8

Cooldowns (cooldown and cooldown_charged)
Hammer &amp; Shotgun Attacks, Shythe Shockwave,
Mortar Fire Lake:    12000 (ms)
Lightning Trap, Sword Dash,
Mortar Explosive Jump:    8000 (ms)
Ball Lightning:    6000 (ms)
Sword Slash:    5000 (ms)
Rapier Coupe De Grace:    3000 (ms)
Rapier Charge:    16000 (ms)
Shythe Whirlwind:    28000 (ms)
MedKit:    20000 (ms)
Healing Potion, Ambrosia:    30000 (ms)
Aether Vial, Barkskin Potion,
Adrenalin Shot:    40000 (ms)
Vampire Blood:    60000 (ms)
Bombs:    90000 (ms)
Lightning Gun overheat refresh:    2000 (ms)
Rainbow Gun refresh:    2000 (ms) (no overheating)


VI-Various analysis

Game structure is far from be understood by my side.
When I tried to obtain the included Invulnerability
cheat I found out that many variable retrieved get
placed in table structures which are then sent for
visual output generation and/or grouped to obtain
a bigger higher level function.
I guess that the game continuosly rebuilds lua functions
which are then executed at once, when values and flags
(many variables are just that) refill a given function.
That can be more true, because some of them are none
but return parameters in nested functions.
My guess comes from a glimpse I had at some of the
source files I partially decompiled (thanks to the tools
made by enthusiasts for modding Tropico series - same
software house).
I don't know if it's possible to make some cheats working
in a more traditional way, instead of making session
cheats, but, if it's even possible, the intervention of
somebody more skilled than me it's needed.


VII-Conclusions

I announced I wouldn't continue supporting this game and
still I updated table and this info once more.
I'm going to archive this game because its manageable
dimensions and because I think it's possible we will
witness an evolution of this kind of builds, probably
without symbols, stripped out in the process, and this
one will be some sort of reference map for them.

Good luck everybody
GrandPa

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>65</ID>
          <Description>"test"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
//aobscan(RetCheck,89 4C 24 10 E9 x x x x 8B 44 24 1C 8B CF C1) // should be unique
//aobscan(OffsetBase,08 00 00 00 63 6F 6F 6C 64 6F 77 6E 00) // should be unique
//aobscan(OffsetBase,62 61 73 65 5F 64 61 6D 61 67 65 00 20) // should be unique
alloc(newmem,512)
label(returnhere)
label(originalcode)
label(exit)
label(_counter_)
label(_store_)
registersymbol(INJECT)


//newmem+0E0:
//_counter_:
//dd 0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

//mov edi,OffsetBase
//lea edi,[edi-0C]
//lea edi,[edi-10]
//cmp [edx+08],edi
//jne originalcode

//cmp [edx],#1500
//jb originalcode
cmp [edx],#10
jne originalcode

push ecx
xor ecx,ecx
lea edi,[newmem+50]

_counter_:
cmp [edi+ecx*4],edx
je exit
cmp [edi+ecx*4],0
je _store_
inc ecx
cmp ecx,60
jne _counter_
jmp exit

_store_:
mov [edi+ecx*4],edx

exit:
pop ecx

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]

jmp returnhere

INJECT:
//"VictorVranSteam.exe"+4A8F6E:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)
//"VictorVranSteam.exe"+4A8F6E:
//mov ecx,[ebp+0C]
//mov eax,[edx]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>152</ID>
          <Description>"test2"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B 4D 0C 8B 02 89 01 8B 42 04 89 41 04 5F) // should be unique
aobscan(OffsetBase_mindmg,6D 69 6E 5F 64 61 6D 61 67 65 00) // should be unique
aobscan(OffsetBase_maxdmg,6D 61 78 5F 64 61 6D 61 67 65 00)
aobscan(OffsetBaseWeapon,62 61 73 65 5F 64 61 6D 61 67 65 00 20) // should be unique
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)
label(_record_)
label(_counter_)
label(_store_)
registersymbol(INJECT)


//newmem+0E0:
//_counter_:
//dd 0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

mov edi,OffsetBase_mindmg-10
cmp [edx+08],edi
je _record_
mov edi,OffsetBase_maxdmg-10
cmp [edx+08],edi
je _record_
mov edi,OffsetBaseWeapon-10
cmp [edx+08],edi
jne originalcode
//mov eax,[edx]
//cmp eax,#400
//jb originalcode
//cmp eax,#600
//ja originalcode

_record_:
push ecx
xor ecx,ecx
lea edi,[newmem+80]

_counter_:
cmp [edi+ecx*8],edx
je exit
cmp [edi+ecx*8],0
je _store_
inc ecx
cmp ecx,0B8
jne _counter_
jmp exit

_store_:
lea eax,[edi+ecx*8]
mov [eax],edx
mov ecx,[edx+08]
mov [eax+04],ecx

exit:
pop ecx

originalcode:
popfd
mov ecx,[ebp+0C]
mov eax,[edx]

jmp returnhere

INJECT:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B 4D 0C 8B 02

unregistersymbol(INJECT)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>182</ID>
          <Description>"test3"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJECT,VictorVranSteam.exe,8B D0 89 54 24 14) // should be unique
//aobscan(RetCheck,89 4C 24 10 E9 x x x x 8B 44 24 1C 8B CF C1) // should be unique
aobscan(OffsetBase,05 00 00 00 6C 65 76 65 6C 00) // should be unique
//aobscan(OffsetBase,69 74 65 6D 5F 6C 65 76 65 6C) // should be unique
alloc(newmem,512)
label(returnhere)
label(originalcode)
label(exit)
label(_counter_)
label(_store_)
registersymbol(INJECT)


//newmem+0E0:
//_counter_:
//dd 0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd

//mov edx,OffsetBase-10
mov edx,OffsetBase-0C
cmp [eax+08],edx
jne originalcode

//mov edx,[eax]
//push eax
//mov eax,[ebp+0C]
//mov [eax-08],edx
//pop eax
//jmp originalcode

//cmp [edx],#1500
//jb originalcode
cmp [eax],#50
jne originalcode

push ecx
xor ecx,ecx
lea edx,[newmem+50]

_counter_:
cmp [edx+ecx*4],eax
je exit
cmp [edx+ecx*4],0
je _store_
inc ecx
cmp ecx,60
jne _counter_
jmp exit

_store_:
mov [edx+ecx*4],eax

exit:
pop ecx

originalcode:
popfd
  mov edx,eax
  mov [esp+14],edx

jmp returnhere

INJECT:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 8B D0 89 54 24 14

unregistersymbol(INJECT)
dealloc(newmem)
//mov edx,eax
//mov [esp+14],edx

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>772</ID>
          <Description>"Invulnerabilty (more or less)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(INJ_Invulnerable,VictorVranSteam.exe,75 EE B8 xx xx xx 00 5F 5E 5B C3 CC) // should be unique
aobscan(OffBase_health,06 00 00 00 68 65 61 6C 74 68) // should be unique
aobscan(OffBaseOnDmgTkn,4F 6E 44 61 6D 61 67 65 54 61 6B 65 6E) // should be unique
aobscan(OffBaseMaxH,09 00 00 00 4D 61 78 48 65 61 6C 74 68)
alloc(newmem,512)
label(originalcode)
label(exit)
label(_count_)
label(_Pl_Health)
label(_stage0)
label(_stage1)
label(_stage2)
registersymbol(INJ_Invulnerable)


newmem+0F0:
_count_:
dd 0
_Pl_Health:
dd 0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
mov edi,[eax+08]
mov edx,[_count_]
cmp ebx,OffBaseOnDmgTkn-10
je _stage0
cmp ebx,OffBase_health-0C
je _stage1
cmp ebx,OffBaseMaxH-0C
je _stage2
jmp originalcode

_stage0:
cmp edi,OffBaseOnDmgTkn-10
//Compare repeated on the Variable
//to be sure it's valid
jne originalcode
mov edx,1  //This is always our starting step,
//         hence we are setting for the next
mov [_count_],edx
jmp originalcode

_stage1:
cmp edx,1  //Check made to be sure
//           that the sequence is correct
jne exit
cmp edi,OffBase_health-0C
//Compare repeated on the Variable
//to be sure it's valid
jne exit

mov [_Pl_Health],eax  //We save the address now
//                  because we can always
//                  overwrite it if out of sequence
inc [_count_]  //Right sequence, setting for next step
jmp originalcode

_stage2:
cmp edx,2  //Check made to be sure
//           that the sequence is correct
jne exit
cmp edi,OffBaseMaxH-0C
//Compare repeated on the Variable
//to be sure it's valid
jne exit
mov ebx,[eax]  //This is our Max Total Health
mov edi,[_Pl_Health]  //Retrieving address of Current Health
mov [edi],ebx  //Restoring Health to Max
//             Final step

exit:
xor edx,edx  //Re-initialize sequence
mov [_count_],edx

originalcode:
popfd
  pop edi
  pop esi
  pop ebx
  ret


INJ_Invulnerable+07:
  jmp newmem
//No return to the hook because we are overwriting
//on the return of the function


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJ_Invulnerable+07:
  db 5F 5E 5B C3 CC

unregistersymbol(INJ_Invulnerable)
dealloc(newmem)
//mov ecx,[ebp+0C]
//mov eax,[edx]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Primary hook code :    mov edx,eax</Description>
      <Address>008B437C</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4B437C</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>04</Byte>
        <Byte>B6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>D0</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>14</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Secondary hook code :    mov eax,[edx]</Description>
      <Address>008B4471</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4B4471</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>02</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>01</Byte>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code following variable retrieval :    lea ecx,[ecx+00]</Description>
      <Address>008AEEBD</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4AEEBD</ModuleNameOffset>
      <Before>
        <Byte>0C</Byte>
        <Byte>BF</Byte>
        <Byte>8D</Byte>
        <Byte>04</Byte>
        <Byte>88</Byte>
      </Before>
      <Actual>
        <Byte>8D</Byte>
        <Byte>49</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>78</Byte>
        <Byte>0C</Byte>
        <Byte>04</Byte>
        <Byte>75</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code following temp variable retrieval :    cmp dword ptr [eax+0C],03</Description>
      <Address>008AFBA8</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4AFBA8</ModuleNameOffset>
      <Before>
        <Byte>47</Byte>
        <Byte>10</Byte>
        <Byte>8D</Byte>
        <Byte>04</Byte>
        <Byte>88</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>78</Byte>
        <Byte>0C</Byte>
        <Byte>03</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>05</Byte>
        <Byte>39</Byte>
        <Byte>70</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Value/Variable move for calc/update :    mov [ecx],eax</Description>
      <Address>008B4966</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4B4966</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>42</Byte>
        <Byte>04</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Addressing to all the above :    jmp dword ptr [eax*4+VictorVranSteam.exe+4B429C]</Description>
      <Address>008B3319</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4B3319</ModuleNameOffset>
      <Before>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>25</Byte>
        <Byte>77</Byte>
        <Byte>B0</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>24</Byte>
        <Byte>85</Byte>
        <Byte>9C</Byte>
        <Byte>42</Byte>
        <Byte>8B</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C1</Byte>
        <Byte>EB</Byte>
        <Byte>17</Byte>
        <Byte>8B</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Loading map call from MAIN :    call VictorVranSteam.exe+4CD500</Description>
      <Address>008CE393</Address>
      <ModuleName>VictorVranSteam.exe</ModuleName>
      <ModuleNameOffset>4CE393</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>05</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>68</Byte>
        <Byte>F1</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>3D</Byte>
        <Byte>EC</Byte>
        <Byte>05</Byte>
        <Byte>9E</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_ClassSearching</Name>
      <Address>008CD521</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Items_Inject</Name>
      <Address>008B437C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storew_</Name>
      <Address>0C300400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storec_</Name>
      <Address>0C300408</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storecd_</Name>
      <Address>0C300414</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storeccd_</Name>
      <Address>0C300424</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storeh_</Name>
      <Address>0C300428</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_stores_</Name>
      <Address>0C30042C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storeMOverdr_</Name>
      <Address>0C300430</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storestk_</Name>
      <Address>0C300434</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storegold_</Name>
      <Address>0C300438</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storelvl_</Name>
      <Address>0C30043C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storexp_</Name>
      <Address>0C300440</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_storewlvl_</Name>
      <Address>0C300444</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>__No_Hits_Timer_</Name>
      <Address>008B446E</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===============================================
Gold cheat:
1)search for the exact amount shown in Inventory [value type:4 Bytes]
2)sell something or collect gold
3)search for new value
4)repeat 2) and 3) if necessary
5)increase value
===============================================
Potion cheat:
1)sell potion slot
2)buy back at least 2 potion
3)search for the exact amount shown in Inventory slot [value type:4 Bytes]
4)buy back 1 potion
5)search for new value
6)repeat 4) and 5) if necessary
5)increase value
===============================================
Experience &amp; Level cheats:
1)Through Items selection
2)In order to heavily change the value, you have to perform the following calculation: 
((New_level-2)*200+2000)*(New_level-1)/2.
Example for level 25:
(23*200+2000)*24/2, which it gives 6600*12=79200.
2a)Increasing:
-write your calculated XP in "Full XP"
-level up to get goodies or change your "Player level" accordingly
2b)De-leveling.
-Why? Monsters becomes stronger in relationship with your level, so it can be easier to face them. Named boss have their starting level, though, and the same applies to monster 
categories. Item's rarity are related, too.
Simple de-leveling:
-reduce your "Player level"
Gameplay de-leveling:
-reduce both "Player level" and "Full XP" accordingly
Note: recorded level in savegame header won't be affected
===============================================
Gift boxes cheat:
-you need to achieve level 16 for this and own more then 1 gift boxes of a kind (better 4).
1)use transmutation
2)search for the exact amount of boxes [value type:4 Bytes]
3)move 1 box to transmutation slot
4)search for new value
5)repeat 3) and 4) if necessary
6)increase value up to 20 
7)transmute boxes to get better quality boxes
8)repeat the above until you find legendary box address, and so you have 4 addresses
9)increase values
Note: boxes stack always in 1 slot
===============================================
Runes and Dyes cheat:
-the same as Gift boxes
===============================================
</Comments>
</CheatTable>
