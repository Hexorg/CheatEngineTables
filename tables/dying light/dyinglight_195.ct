<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>10934</ID>
      <Description>"                              Creator Credits"</Description>
      <LastState/>
      <Color>FF00FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


{$lua}



showMessage("Dying Light the following Enhanced Edition cheat table Steam v1.12.0 \n\n--------------------------------------------------------------------------\n\n WarnÂ·ing \n\n VAC (Valve Anti-Cheat System) was enabled for Dying Light on the 29th of January 2016 \n\n make sure to go to options to disable it before using table \n\n--------------------------------------------------------------------------\n\n this table is designed for single player and LAN line party")
showMessage("Thanks/Credits \n\n all credit goes to vng21092 for his table this table is based off of his plus stuff that I have worked on enjoy \n\n all credit goes to Matze500 for Weapons In Save Zone (thank you) \n\n all credit goes to mgr.inz.Player for Weapon Cloning (thank you)  \n\n all credit goes to akumakuja28 for Time of Day (thank you) \n\n all credit goes to ray2160 for: \n\n Instant Cooldown Flare/Airstrike ect.,Grappling Hook Instant Cooldown,Unlimited Camouflage,Challenge Time Freeze / Bozak Horde / The Following / Gaining Cradence,Hunter Shoot A Spit Instant Cooldown,Survivor Rank XP Points,Drive Level (Test Only),Power Level (Test Only),Agility Level (Test Only), Survivor Rank (Test Only),Legend Level (Test Only),Car Flamethrower Instant Cooldown,Unlimited Gas,Infinite Nitro,The Button Instant Cooldown,Instant LVL Agility/Power/Legend/Driver/Level Of Trust,Survivor Rank,Challenge CheckPoint Instantly Collect,Infinite Health,Cash")






{$asm}

82578923465792384567983425489364587346y5089726508937654:
nop


 
 
[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2721</ID>
      <Description>"Cash"</Description>
      <LastState/>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(Cash,gamedll_x64_rwdi.dll,89 43 40 E8 05 D0 73 FF)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BE78B3)

label(code)
label(return)

newmem:

code:
  mov [rbx+40],9999999
  call gamedll_x64_rwdi.ShutdownGameScriptDLL+321E40
  jmp return

Cash:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Cash)

[DISABLE]

Cash:
  db 89 43 40 E8 05 D0 73 FF

unregistersymbol(Cash)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2689</ID>
      <Description>"Simple Time of Day Adjuster"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>327648</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version:
  Date   : 2016-03-02
  Author : Akuma

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Time_of_Day_Adjuster_ret ,gamedll_x64_rwdi.dll,F3 0F 59 F7 F3 0F 58 B7 A4 00 00 00) // should be unique
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+3929B7)

label(code)
label(return)

alloc(Time_Variables,48)
registersymbol(Time_Variables)

alloc(Sky_Pointer,48)
registersymbol(Sky_Pointer)

alloc(TOD2,8)
registersymbol(TOD2)

TOD2+4:
dd (float)9






newmem:

code:
  mov [Sky_Pointer],rdi

  movss [Time_Variables],xmm0
  movss [Time_Variables+4],xmm6
  movss xmm6,[Time_Variables+4]
  movss [Time_Variables+8],xmm7
  movss xmm7,[Time_Variables+8]
  mulss xmm6,xmm7
  addss xmm6,[rdi+000000A4]
  movss [Time_Variables+C],xmm6
  mulss Xmm6,[TOD2+4]      // Current Time in Real CLock
  cmp [TOD2],1
  je Flag_Out
  mov [TOD2],1
  movss [Time_Variables+10],xmm6
  divss xmm6,[TOD2+4]
  jmp return

Flag_Out:
  movss xmm6,[Time_Variables+10]   //24 hour cycle
  divss xmm6,[TOD2+4]
  //movss xmm6,[Time_Variables+10]
  // Dawn is .25
  // Fuck This I will fix this script later

  jmp return

Time_of_Day_Adjuster_ret :
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(Time_of_Day_Adjuster_ret )

[DISABLE]

Time_of_Day_Adjuster_ret :
  db F3 0F 59 F7 F3 0F 58 B7 A4 00 00 00

unregistersymbol(Time_of_Day_Adjuster_ret )
dealloc(newmem)

dealloc(Time_Variables)
unregistersymbol(Time_Variables)

dealloc(Sky_Pointer)
unregistersymbol(Sky_Pointer)

dealloc(TOD2)
unregistersymbol(TOD2)




{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+3929B7

"gamedll_x64_rwdi.dll"+392993: 0F 28 7C 24 30           -  movaps xmm7,[rsp+30]
"gamedll_x64_rwdi.dll"+392998: 48 8B 6C 24 78           -  mov rbp,[rsp+78]
"gamedll_x64_rwdi.dll"+39299D: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+3929A1: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+3929A2: C3                       -  ret
"gamedll_x64_rwdi.dll"+3929A3: 39 AF E0 00 00 00        -  cmp [rdi+000000E0],ebp
"gamedll_x64_rwdi.dll"+3929A9: 75 E3                    -  jne gamedll_x64_rwdi.dll+39298E
"gamedll_x64_rwdi.dll"+3929AB: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+3929AE: E8 2D 01 00 00           -  call gamedll_x64_rwdi.dll+392AE0
"gamedll_x64_rwdi.dll"+3929B3: F3 0F 5E F0              -  divss xmm6,xmm0
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+3929B7: F3 0F 59 F7              -  mulss xmm6,xmm7
"gamedll_x64_rwdi.dll"+3929BB: F3 0F 58 B7 A4 00 00 00  -  addss xmm6,[rdi+000000A4]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+3929C3: F3 0F 11 B7 A4 00 00 00  -  movss [rdi+000000A4],xmm6
"gamedll_x64_rwdi.dll"+3929CB: EB C1                    -  jmp gamedll_x64_rwdi.dll+39298E
"gamedll_x64_rwdi.dll"+3929CD: 33 ED                    -  xor ebp,ebp
"gamedll_x64_rwdi.dll"+3929CF: 89 AF A8 00 00 00        -  mov [rdi+000000A8],ebp
"gamedll_x64_rwdi.dll"+3929D5: 48 8B 6C 24 78           -  mov rbp,[rsp+78]
"gamedll_x64_rwdi.dll"+3929DA: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+3929DE: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+3929DF: C3                       -  ret
"gamedll_x64_rwdi.dll"+3929E0: 40 57                    -  push rdi
"gamedll_x64_rwdi.dll"+3929E2: 48 83 EC 40              -  sub rsp,40
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2694</ID>
          <Description>" Time  ( Ctrl + up and down arrows = 1 hour )"</Description>
          <Color>0080FF</Color>
          <VariableType>Float</VariableType>
          <Address>Time_Variables+10</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>38</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>40</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2757</ID>
      <Description>"Activate all in this group"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2737</ID>
          <Description>"Infinite Health"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(HP1a,gamedll_x64_rwdi.dll,0F 2F F7 73 05 0F 28 C7 EB 08)
alloc(newmema,$100,"gamedll_x64_rwdi.dll"+AB83DF)

label(codea)
label(returna)

aobscanmodule(HP2b,gamedll_x64_rwdi.dll,0F 2F F0 77 03 0F 28 C6 44)
alloc(newmemb,$100,"gamedll_x64_rwdi.dll"+AB83E9)

label(codeb)
label(returnb)

newmema:

codea:
  jae gamedll_x64_rwdi.ShutdownGameScriptDLL+AB5969
  jmp returna

HP1a:
  jmp codea
  nop
  nop
  nop
returna:
registersymbol(HP1a)


newmemb:

codeb:
  ja gamedll_x64_rwdi.ShutdownGameScriptDLL+AB5971
  jmp returnb

HP2b:
  jmp codeb
returnb:
registersymbol(HP2b)


[DISABLE]

HP1a:
  db 0F 2F F7 73 05

unregistersymbol(HP1a)
dealloc(newmema)

HP2b:
  db 0F 2F F0 77 03

unregistersymbol(HP2b)
dealloc(newmemb)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2521</ID>
          <Description>"Instant Kill"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(InstantKill)

InstantKill:
db F3 0F 5C C9 F3 41 0F 11 4F 78

[Disable]

InstantKill:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(InstantKill)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2717</ID>
          <Description>"Instant Cooldown Flares"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InstantCooldownFlares,gamedll_x64_rwdi.dll,F3 0F 11 01 77 23)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+B9D8F9)

label(code)
label(return)

newmem:

code:
  nop
  ja gamedll_x64_rwdi.ShutdownGameScriptDLL+B9AEA2
  jmp return

InstantCooldownFlares:
  jmp code
  nop
return:
registersymbol(InstantCooldownFlares)

[DISABLE]

InstantCooldownFlares:
  db F3 0F 11 01 77 23

unregistersymbol(InstantCooldownFlares)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2522</ID>
          <Description>"Infinite Stamina"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(InfiniteStamina1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8)
registersymbol(InfiniteStamina1)

aobscanmodule(InfiniteStamina2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10)
registersymbol(InfiniteStamina2)

InfiniteStamina1+5:
db F3 41 0F 58 C8

InfiniteStamina2:
db F3 0F 58 C7

[Disable]

InfiniteStamina1+5:
db F3 41 0F 5C C8
unregistersymbol(InfiniteStamina1)

InfiniteStamina2:
db F3 0F 5C C7
unregistersymbol(InfiniteStamina2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1102</ID>
          <Description>"Infinite Crafting Items"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(ici_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(ici_aob1,gamedll_x64_rwdi.dll,48 39 1C 28 75 59 8B 73 40 48 8D 4B 40)
registersymbol(ici_aob1)
label(returnhere_ici_1)


ici_1:
mov [rbx+40],10
mov esi,[rbx+40]
lea rcx,[rbx+40]
jmp returnhere_ici_1


ici_aob1+6:
jmp ici_1
nop
nop
returnhere_ici_1:

[Disable]

ici_aob1+6:
db 8B 73 40 48 8D 4B 40
unregistersymbol(ici_aob1)
dealloc(ici_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>328</ID>
          <Description>"Unlimited Potion Duration"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(UnlimitedPotionDuration,gamedll_x64_rwdi.dll,0F 28 F9 F3 0F 5C C7)
UnlimitedPotionDuration+3:
  db 90 90 90 90
registersymbol(UnlimitedPotionDuration)

[DISABLE]
UnlimitedPotionDuration+3:
  db F3 0F 5C C7
unregistersymbol(UnlimitedPotionDuration)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>354</ID>
          <Description>"Free Blueprint Requirements"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(FreeBluAOB1,gamedll_x64_rwdi.dll,41 8B 44 0D 00 85 C0)
aobscanmodule(FreeBluAOB2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01)
alloc(newmem,2048,gamedll_x64_rwdi.dll)

label(FreeBlu1Start)
label(FreeBlu2Start)
label(FreeBlue1End)
label(FreeBlue2End)
registersymbol(FreeBluAOB1)
registersymbol(FreeBluAOB2)

newmem:

FreeBlu1Start:
mov eax,0
jmp FreeBlue1End

FreeBlu2Start:
mov r12d,0
lea edx,[r9+01]
jmp FreeBlue2End

FreeBluAOB1:
jmp FreeBlu1Start
FreeBlue1End:

FreeBluAOB2:
jmp FreeBlu2Start
nop
nop
nop
FreeBlue2End:
 
[DISABLE]

dealloc(newmem)

FreeBluAOB1:
db 41 8B 44 0D 00

FreeBluAOB2:
db 44 8B 24 17 41 8D 51 01

unregistersymbol(FreeBluAOB1)
unregistersymbol(FreeBluAOB2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1236</ID>
          <Description>"Indestructible Weapons"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(iw_aob1,gamedll_x64_rwdi.dll,0F 2F F0 76 11 48 8B 47 18)
registersymbol(iw_aob1)

iw_aob1+3:
db 90 90


[DISABLE]

iw_aob1+3:
db 76 11
unregistersymbol(iw_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1100</ID>
          <Description>"Infinite Ammo"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90

[Disable]

ica_aob1+7:
db FF CA
unregistersymbol(ica_aob1)

ioa_aob1+6:
db 45 89 44 C2 04
unregistersymbol(ioa_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1103</ID>
          <Description>"Infinite Throwables / Weapon Upgrades"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90


[DISABLE]

itwu_aob1+3:
db 7E 39

itwu_aob1+7:
db FF CA
unregistersymbol(itwu_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2035</ID>
          <Description>"Infinite UV Flashlight"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(iuf_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28)
registersymbol(iuf_aob1)

iuf_aob1:
db F3 0F 58 C2

[Disable]

iuf_aob1:
db F3 0F 5C C2
unregistersymbol(iuf_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2044</ID>
          <Description>"Easy Lock Picking "</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(elp_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(elp_aob1,gamedll_x64_rwdi.dll,F3 0F 10 56 50 F3 0F 10 4E 54)
registersymbol(elp_aob1)
label(returnhere_elp_1)


elp_1:
movss xmm1,[rsi+54]
mov [rsi+54],(float)999999
jmp returnhere_elp_1


elp_aob1+5:
jmp elp_1
returnhere_elp_1:

[Disable]

elp_aob1+5:
db F3 0F 10 4E 54
unregistersymbol(elp_aob1)
dealloc(elp_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2457</ID>
          <Description>"Grappling Hook Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InfiniteGrapplingHook,gamedll_x64_rwdi.dll,F3 0F 11 43 40 77)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+C9352A)

label(code)
label(return)

newmem:

code:
  jmp return

InfiniteGrapplingHook:
  jmp code
return:
registersymbol(InfiniteGrapplingHook)

[DISABLE]

InfiniteGrapplingHook:
  db F3 0F 11 43 40

unregistersymbol(InfiniteGrapplingHook)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2605</ID>
          <Description>"The Button Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(TheButton,gamedll_x64_rwdi.dll,F3 0F 11 83 48 2A 00 00)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AC1CEE)

label(code)
label(return)

newmem:

code:
  jmp return

TheButton:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TheButton)

[DISABLE]

TheButton:
  db F3 0F 11 83 48 2A 00 00

unregistersymbol(TheButton)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2601</ID>
          <Description>"Unlimited Gas"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(GasFreeFlamethrower,gamedll_x64_rwdi.dll,F3 0F 11 80 20 03 00 00)
alloc(newmema,$100,"gamedll_x64_rwdi.dll"+F883B2)

label(codea)
label(returna)

aobscanmodule(Gas1,gamedll_x64_rwdi.dll,48 8B 43 18 F3 0F 11 90 20 03 00 00)
alloc(newmemb,$100,"gamedll_x64_rwdi.dll"+F93001)

label(codeb)
label(returnb)

newmema:

codea:
  jmp returna

GasFreeFlamethrower:
  jmp codea
  nop
  nop
  nop
returna:
registersymbol(GasFreeFlamethrower)

newmemb:

codeb:
  movss [rax+00000320],xmm2
  jmp returnb

Gas1:
  jmp codeb
  nop
  nop
  nop
  nop
  nop
  nop
  nop
returnb:
registersymbol(Gas1)

[DISABLE]

GasFreeFlamethrower:
  db F3 0F 11 80 20 03 00 00

unregistersymbol(GasFreeFlamethrower)
dealloc(newmema)

Gas1:
  db 48 8B 43 18 F3 0F 11 90 20 03 00 00

unregistersymbol(Gas1)
dealloc(newmemb)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2603</ID>
          <Description>"Infinite Nitro"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InfiniteNitro,gamedll_x64_rwdi.dll,F3 0F 11 4B 10 C7)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+F8AC1A)

label(code)
label(return)

newmem:

code:
  jmp return

InfiniteNitro:
  jmp code
return:
registersymbol(InfiniteNitro)

[DISABLE]

InfiniteNitro:
  db F3 0F 11 4B 10

unregistersymbol(InfiniteNitro)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2543</ID>
          <Description>"Car Flamethrower Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(CarFire,gamedll_x64_rwdi.dll,F3 0F 11 43 1C 76)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+F867C1)

label(code)
label(return)

newmem:

code:
  jmp return

CarFire:
  jmp code
return:
registersymbol(CarFire)

[DISABLE]

CarFire:
  db F3 0F 11 43 1C

unregistersymbol(CarFire)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1095</ID>
          <Description>"Instant "Hold" Actions"</Description>
          <LastState/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(iha_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(iha_aob1,gamedll_x64_rwdi.dll,0F 28 F7 F3 0F 11 B3 FC 01 00 00)
registersymbol(iha_aob1)
label(returnhere_iha_1)


iha_1:
mov [rbx+000001FC],(float)1
jmp returnhere_iha_1


iha_aob1+3:
jmp iha_1
nop
nop
nop
returnhere_iha_1:

[Disable]

iha_aob1+3:
db F3 0F 11 B3 FC 01 00 00
unregistersymbol(iha_aob1)
dealloc(iha_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2666</ID>
          <Description>"Weapons In Save Zone"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

 aobscanmodule(wisz_aob1,gamedll_x64_rwdi.dll,48 85 D2 74 03 48 89 3A FF 83 68 09 00 00)
 registersymbol(wisz_aob1)

 wisz_aob1+8:
 db 90 90 90 90 90 90

 [Disable]

 wisz_aob1+8:
 db FF 83 68 09 00 00
 unregistersymbol(wisz_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2420</ID>
          <Description>"Unlimited Camouflage (activate script camouflage self) Off/On = P"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(UnlimitedCamouflage,gamedll_x64_rwdi.dll,F3 0F 11 43 14 0F 28)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BE7DA7)

label(code)
label(return)

newmem:

code:
  jmp return

UnlimitedCamouflage:
  jmp code
return:
registersymbol(UnlimitedCamouflage)

[DISABLE]

UnlimitedCamouflage:
  db F3 0F 11 43 14

unregistersymbol(UnlimitedCamouflage)
dealloc(newmem)
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>80</Key>
              </Keys>
              <ID>2</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10946</ID>
      <Description>"MINE_InfiniteStamina"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

Cheat changes subtracts to adds

}

[ENABLE]

aobscanmodule(MINE_InfiniteStamina1,gamedll_x64_rwdi.dll,F3 41 0F 5C C8 0F 2F CF) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+C05104)

label(code)
label(return)

newmem:

code:
  movss xmm1,[rbx+10]
  jmp return

MINE_InfiniteStamina1:
  jmp code
return:
registersymbol(MINE_InfiniteStamina1)

aobscanmodule(MINE_InfiniteStamina2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+BF6E6F)

label(code2)
label(return2)

newmem2:

code2:
  subss xmm0,xmm7
  movss [rbx+10],xmm0
  jmp return2

MINE_InfiniteStamina2:
  jmp code2
  nop
  nop
  nop
  nop
return2:
registersymbol(MINE_InfiniteStamina2)

[DISABLE]

MINE_InfiniteStamina1:
  db F3 0F 10 4B 10

unregistersymbol(MINE_InfiniteStamina1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+C05104

"gamedll_x64_rwdi.dll"+C050D4: 48 8B 0D 5D E4 01 01  -  mov rcx,[gamedll_x64_rwdi.dll+1C23538]
"gamedll_x64_rwdi.dll"+C050DB: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+C050DD: 74 07                 -  je gamedll_x64_rwdi.dll+C050E6
"gamedll_x64_rwdi.dll"+C050DF: 48 8B 8F 18 0E 00 00  -  mov rcx,[rdi+00000E18]
"gamedll_x64_rwdi.dll"+C050E6: 48 8B 89 D0 00 00 00  -  mov rcx,[rcx+000000D0]
"gamedll_x64_rwdi.dll"+C050ED: BA 41 02 00 00        -  mov edx,00000241
"gamedll_x64_rwdi.dll"+C050F2: E8 89 D8 F5 FF        -  call gamedll_x64_rwdi.dll+B62980
"gamedll_x64_rwdi.dll"+C050F7: F3 44 0F 59 C0        -  mulss xmm8,xmm0
"gamedll_x64_rwdi.dll"+C050FC: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+C050FF: E8 2C FD FF FF        -  call gamedll_x64_rwdi.dll+C04E30
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+C05104: F3 0F 10 4B 10        -  movss xmm1,[rbx+10]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+C05109: F3 41 0F 5C C8        -  subss xmm1,xmm8 // CHEAT CHANGE TO ADD
"gamedll_x64_rwdi.dll"+C0510E: 0F 2F CF              -  comiss xmm1,xmm7
"gamedll_x64_rwdi.dll"+C05111: 72 0D                 -  jb gamedll_x64_rwdi.dll+C05120
"gamedll_x64_rwdi.dll"+C05113: 0F 2F C8              -  comiss xmm1,xmm0
"gamedll_x64_rwdi.dll"+C05116: 76 05                 -  jna gamedll_x64_rwdi.dll+C0511D
"gamedll_x64_rwdi.dll"+C05118: 0F 28 F8              -  movaps xmm7,xmm0
"gamedll_x64_rwdi.dll"+C0511B: EB 03                 -  jmp gamedll_x64_rwdi.dll+C05120
"gamedll_x64_rwdi.dll"+C0511D: 0F 28 F9              -  movaps xmm7,xmm1
"gamedll_x64_rwdi.dll"+C05120: 0F 2F 3D 29 4D 7D 00  -  comiss xmm7,[gamedll_x64_rwdi.dll+13D9E50]
"gamedll_x64_rwdi.dll"+C05127: F3 0F 11 7B 10        -  movss [rbx+10],xmm7
}
MINE_InfiniteStamina2:
  db F3 0F 5C C7 F3 0F 11 43 10

unregistersymbol(MINE_InfiniteStamina2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BF6E6F

"gamedll_x64_rwdi.dll"+BF6E4D: F3 0F 10 43 10        -  movss xmm0,[rbx+10]
"gamedll_x64_rwdi.dll"+BF6E52: 48 89 74 24 50        -  mov [rsp+50],rsi
"gamedll_x64_rwdi.dll"+BF6E57: 0F 29 74 24 30        -  movaps [rsp+30],xmm6
"gamedll_x64_rwdi.dll"+BF6E5C: 0F 57 F6              -  xorps xmm6,xmm6
"gamedll_x64_rwdi.dll"+BF6E5F: 0F 2F C6              -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+BF6E62: 76 05                 -  jna gamedll_x64_rwdi.dll+BF6E69
"gamedll_x64_rwdi.dll"+BF6E64: 40 B7 01              -  mov dil,01
"gamedll_x64_rwdi.dll"+BF6E67: EB 03                 -  jmp gamedll_x64_rwdi.dll+BF6E6C
"gamedll_x64_rwdi.dll"+BF6E69: 40 32 FF              -  xor dil,dil
"gamedll_x64_rwdi.dll"+BF6E6C: 0F 2F FE              -  comiss xmm7,xmm6
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BF6E6F: F3 0F 5C C7           -  subss xmm0,xmm7 // CHEAT CHANGE TO ADD
"gamedll_x64_rwdi.dll"+BF6E73: F3 0F 11 43 10        -  movss [rbx+10],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BF6E78: 76 0C                 -  jna gamedll_x64_rwdi.dll+BF6E86
"gamedll_x64_rwdi.dll"+BF6E7A: 0F 2F C6              -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+BF6E7D: 77 07                 -  ja gamedll_x64_rwdi.dll+BF6E86
"gamedll_x64_rwdi.dll"+BF6E7F: B8 01 00 00 00        -  mov eax,00000001
"gamedll_x64_rwdi.dll"+BF6E84: EB 02                 -  jmp gamedll_x64_rwdi.dll+BF6E88
"gamedll_x64_rwdi.dll"+BF6E86: 33 C0                 -  xor eax,eax
"gamedll_x64_rwdi.dll"+BF6E88: 40 22 F8              -  and dil,al
"gamedll_x64_rwdi.dll"+BF6E8B: 48 8B 03              -  mov rax,[rbx]
"gamedll_x64_rwdi.dll"+BF6E8E: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+BF6E91: FF 50 20              -  call qword ptr [rax+20]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10941</ID>
      <Description>"&lt;---------- MINE ----------&gt;"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>10966</ID>
          <Description>"MINE_InfiniteHealth"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-11
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_InfiniteHealth,gamedll_x64_rwdi.dll,F3 0F 11 83 54 09 00 00 40) // should be unique
alloc(newmem,$1000,MINE_InfiniteHealth)
assert(MINE_InfiniteHealth-B,77 03)
assert(MINE_InfiniteHealth-18,0F 2F F7)

label(code)
label(skip1)
label(skip2)
label(skip3)
label(return)

newmem:
  dd (float)100.0

code:
  comiss xmm0,[newmem]
  jae skip1
  movss xmm0,[newmem]

skip1:
  comiss xmm0,[rbx+00000954]
  jae skip2
  movss xmm0,[rbx+00000954]

skip2:
  comiss xmm0,[rbx+00000958] // think this is max health
  jae skip3
  movss xmm0,[rbx+00000958]

skip3:
  movss [rbx+00000954],xmm0
  jmp return

MINE_InfiniteHealth-18:
  nop
  nop
  nop

MINE_InfiniteHealth-B:
  nop
  nop

MINE_InfiniteHealth:
  jmp code
  nop
  nop
  nop
return:

registersymbol(MINE_InfiniteHealth)

[DISABLE]

MINE_InfiniteHealth-18:
  db 0F 2F F7

MINE_InfiniteHealth-B:
  db 77 03

MINE_InfiniteHealth:
  db F3 0F 11 83 54 09 00 00

unregistersymbol(MINE_InfiniteHealth)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AB83F7

"gamedll_x64_rwdi.dll"+AB83D6: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+AB83D9: FF 90 48 01 00 00        -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+AB83DF: 0F 2F F7                 -  comiss xmm6,xmm7                  // also NOP this for infinite health
"gamedll_x64_rwdi.dll"+AB83E2: 73 05                    -  jae gamedll_x64_rwdi.dll+AB83E9
"gamedll_x64_rwdi.dll"+AB83E4: 0F 28 C7                 -  movaps xmm0,xmm7
"gamedll_x64_rwdi.dll"+AB83E7: EB 08                    -  jmp gamedll_x64_rwdi.dll+AB83F1
"gamedll_x64_rwdi.dll"+AB83E9: 0F 2F F0                 -  comiss xmm6,xmm0
"gamedll_x64_rwdi.dll"+AB83EC: 77 03                    -  ja gamedll_x64_rwdi.dll+AB83F1    // NOP this for infinite health
"gamedll_x64_rwdi.dll"+AB83EE: 0F 28 C6                 -  movaps xmm0,xmm6
"gamedll_x64_rwdi.dll"+AB83F1: 44 0F 28 44 24 20        -  movaps xmm8,[rsp+20]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+AB83F7: F3 0F 11 83 54 09 00 00  -  movss [rbx+00000954],xmm0         // change this to store a positive health
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+AB83FF: 40 84 F6                 -  test sil,sil
"gamedll_x64_rwdi.dll"+AB8402: 74 15                    -  je gamedll_x64_rwdi.dll+AB8419
"gamedll_x64_rwdi.dll"+AB8404: 0F 2F F8                 -  comiss xmm7,xmm0
"gamedll_x64_rwdi.dll"+AB8407: 72 10                    -  jb gamedll_x64_rwdi.dll+AB8419
"gamedll_x64_rwdi.dll"+AB8409: 41 B1 01                 -  mov cl,01
"gamedll_x64_rwdi.dll"+AB840C: 45 33 C0                 -  xor r8d,r8d
"gamedll_x64_rwdi.dll"+AB840F: 33 D2                    -  xor edx,edx
"gamedll_x64_rwdi.dll"+AB8411: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+AB8414: E8 67 5C FF FF           -  call gamedll_x64_rwdi.dll+AAE080
"gamedll_x64_rwdi.dll"+AB8419: 48 8B 7C 24 60           -  mov rdi,[rsp+60]
}

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AB83DF

"gamedll_x64_rwdi.dll"+AB83BB: 72 34                    -  jb gamedll_x64_rwdi.dll+AB83F1
"gamedll_x64_rwdi.dll"+AB83BD: 41 0F 2F F0              -  comiss xmm6,xmm8
"gamedll_x64_rwdi.dll"+AB83C1: 76 2B                    -  jna gamedll_x64_rwdi.dll+AB83EE
"gamedll_x64_rwdi.dll"+AB83C3: 41 0F 28 C0              -  movaps xmm0,xmm8
"gamedll_x64_rwdi.dll"+AB83C7: EB 28                    -  jmp gamedll_x64_rwdi.dll+AB83F1
"gamedll_x64_rwdi.dll"+AB83C9: 48 8D BB 38 F7 FF FF     -  lea rdi,[rbx-000008C8]
"gamedll_x64_rwdi.dll"+AB83D0: 83 CA FF                 -  or edx,-01
"gamedll_x64_rwdi.dll"+AB83D3: 48 8B 07                 -  mov rax,[rdi]
"gamedll_x64_rwdi.dll"+AB83D6: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+AB83D9: FF 90 48 01 00 00        -  call qword ptr [rax+00000148]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+AB83DF: 0F 2F F7                 -  comiss xmm6,xmm7 // cheat nops this
"gamedll_x64_rwdi.dll"+AB83E2: 73 05                    -  jae gamedll_x64_rwdi.dll+AB83E9
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+AB83E4: 0F 28 C7                 -  movaps xmm0,xmm7
"gamedll_x64_rwdi.dll"+AB83E7: EB 08                    -  jmp gamedll_x64_rwdi.dll+AB83F1
"gamedll_x64_rwdi.dll"+AB83E9: 0F 2F F0                 -  comiss xmm6,xmm0
"gamedll_x64_rwdi.dll"+AB83EC: 77 03                    -  ja gamedll_x64_rwdi.dll+AB83F1
"gamedll_x64_rwdi.dll"+AB83EE: 0F 28 C6                 -  movaps xmm0,xmm6
"gamedll_x64_rwdi.dll"+AB83F1: 44 0F 28 44 24 20        -  movaps xmm8,[rsp+20]
"gamedll_x64_rwdi.dll"+AB83F7: F3 0F 11 83 54 09 00 00  -  movss [rbx+00000954],xmm0 // looks like this storing health
"gamedll_x64_rwdi.dll"+AB83FF: 0F 2F F7                 -  comiss xmm6,xmm7
"gamedll_x64_rwdi.dll"+AB8402: 74 15                    -  je gamedll_x64_rwdi.dll+AB8419
"gamedll_x64_rwdi.dll"+AB8404: 0F 2F F8                 -  comiss xmm7,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10965</ID>
          <Description>"MINE_InfiniteStamina"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-11
  Author : Jason

  This script does blah blah blah
}


[ENABLE]

aobscanmodule(MINE_InfiniteStamina1,gamedll_x64_rwdi.dll,F3 41 0F 5C C8 0F 2F CF) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+C05109)

label(code)
label(return)

newmem:

code:
  //subss xmm1,xmm8 // original code
  addss xmm1,xmm8
  jmp return

MINE_InfiniteStamina1:
  jmp code
return:
registersymbol(MINE_InfiniteStamina1)

aobscanmodule(MINE_InfiniteStamina2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+BF6E6F)

label(code2)
label(return2)

newmem2:

code2:
  //subss xmm0,xmm7 // original code
  addss xmm0,xmm7
  movss [rbx+10],xmm0
  jmp return2

MINE_InfiniteStamina2:
  jmp code2
  nop
  nop
  nop
  nop
return2:
registersymbol(MINE_InfiniteStamina2)

[DISABLE]

MINE_InfiniteStamina1:
  db F3 41 0F 5C C8

unregistersymbol(MINE_InfiniteStamina1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+C05109

"gamedll_x64_rwdi.dll"+C050DB: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+C050DD: 74 07                 -  je gamedll_x64_rwdi.dll+C050E6
"gamedll_x64_rwdi.dll"+C050DF: 48 8B 8F 18 0E 00 00  -  mov rcx,[rdi+00000E18]
"gamedll_x64_rwdi.dll"+C050E6: 48 8B 89 D0 00 00 00  -  mov rcx,[rcx+000000D0]
"gamedll_x64_rwdi.dll"+C050ED: BA 41 02 00 00        -  mov edx,00000241
"gamedll_x64_rwdi.dll"+C050F2: E8 89 D8 F5 FF        -  call gamedll_x64_rwdi.dll+B62980
"gamedll_x64_rwdi.dll"+C050F7: F3 44 0F 59 C0        -  mulss xmm8,xmm0
"gamedll_x64_rwdi.dll"+C050FC: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+C050FF: E8 2C FD FF FF        -  call gamedll_x64_rwdi.dll+C04E30
"gamedll_x64_rwdi.dll"+C05104: F3 0F 10 4B 10        -  movss xmm1,[rbx+10]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+C05109: F3 41 0F 5C C8        -  subss xmm1,xmm8
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+C0510E: 0F 2F CF              -  comiss xmm1,xmm7
"gamedll_x64_rwdi.dll"+C05111: 72 0D                 -  jb gamedll_x64_rwdi.dll+C05120
"gamedll_x64_rwdi.dll"+C05113: 0F 2F C8              -  comiss xmm1,xmm0
"gamedll_x64_rwdi.dll"+C05116: 76 05                 -  jna gamedll_x64_rwdi.dll+C0511D
"gamedll_x64_rwdi.dll"+C05118: 0F 28 F8              -  movaps xmm7,xmm0
"gamedll_x64_rwdi.dll"+C0511B: EB 03                 -  jmp gamedll_x64_rwdi.dll+C05120
"gamedll_x64_rwdi.dll"+C0511D: 0F 28 F9              -  movaps xmm7,xmm1
"gamedll_x64_rwdi.dll"+C05120: 0F 2F 3D 29 4D 7D 00  -  comiss xmm7,[gamedll_x64_rwdi.dll+13D9E50]
"gamedll_x64_rwdi.dll"+C05127: F3 0F 11 7B 10        -  movss [rbx+10],xmm7
"gamedll_x64_rwdi.dll"+C0512C: 0F 28 7C 24 60        -  movaps xmm7,[rsp+60]
}
MINE_InfiniteStamina2:
  db F3 0F 5C C7 F3 0F 11 43 10

unregistersymbol(MINE_InfiniteStamina2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BF6E6F

"gamedll_x64_rwdi.dll"+BF6E4D: F3 0F 10 43 10        -  movss xmm0,[rbx+10]
"gamedll_x64_rwdi.dll"+BF6E52: 48 89 74 24 50        -  mov [rsp+50],rsi
"gamedll_x64_rwdi.dll"+BF6E57: 0F 29 74 24 30        -  movaps [rsp+30],xmm6
"gamedll_x64_rwdi.dll"+BF6E5C: 0F 57 F6              -  xorps xmm6,xmm6
"gamedll_x64_rwdi.dll"+BF6E5F: 0F 2F C6              -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+BF6E62: 76 05                 -  jna gamedll_x64_rwdi.dll+BF6E69
"gamedll_x64_rwdi.dll"+BF6E64: 40 B7 01              -  mov dil,01
"gamedll_x64_rwdi.dll"+BF6E67: EB 03                 -  jmp gamedll_x64_rwdi.dll+BF6E6C
"gamedll_x64_rwdi.dll"+BF6E69: 40 32 FF              -  xor dil,dil
"gamedll_x64_rwdi.dll"+BF6E6C: 0F 2F FE              -  comiss xmm7,xmm6
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BF6E6F: F3 0F 5C C7           -  subss xmm0,xmm7
"gamedll_x64_rwdi.dll"+BF6E73: F3 0F 11 43 10        -  movss [rbx+10],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BF6E78: 76 0C                 -  jna gamedll_x64_rwdi.dll+BF6E86
"gamedll_x64_rwdi.dll"+BF6E7A: 0F 2F C6              -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+BF6E7D: 77 07                 -  ja gamedll_x64_rwdi.dll+BF6E86
"gamedll_x64_rwdi.dll"+BF6E7F: B8 01 00 00 00        -  mov eax,00000001
"gamedll_x64_rwdi.dll"+BF6E84: EB 02                 -  jmp gamedll_x64_rwdi.dll+BF6E88
"gamedll_x64_rwdi.dll"+BF6E86: 33 C0                 -  xor eax,eax
"gamedll_x64_rwdi.dll"+BF6E88: 40 22 F8              -  and dil,al
"gamedll_x64_rwdi.dll"+BF6E8B: 48 8B 03              -  mov rax,[rbx]
"gamedll_x64_rwdi.dll"+BF6E8E: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+BF6E91: FF 50 20              -  call qword ptr [rax+20]
}

{ ORIGINAL CHEAT FROM OTHER TABLE:

aobscanmodule(InfiniteStamina1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8)
registersymbol(InfiniteStamina1)

aobscanmodule(InfiniteStamina2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10)
registersymbol(InfiniteStamina2)

InfiniteStamina1+5:
db F3 41 0F 58 C8

InfiniteStamina2:
db F3 0F 58 C7

}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10949</ID>
          <Description>"MINE_FreeBlueprintRequirements"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  Cheat seems to replace loading a number with loading 0 in two spots.  I'm
  guessing one spot is checking for if requirements are met when determining if
  crafting a blueprint is possible, other is for when to actually subtract
  items when crafting?

Original:
aobscanmodule(FreeBluAOB1,gamedll_x64_rwdi.dll,41 8B 44 0D 00 85 C0)
aobscanmodule(FreeBluAOB2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01)
alloc(newmem,2048,gamedll_x64_rwdi.dll)

label(FreeBlu1Start)
label(FreeBlu2Start)
label(FreeBlue1End)
label(FreeBlue2End)
registersymbol(FreeBluAOB1)
registersymbol(FreeBluAOB2)

newmem:

FreeBlu1Start:
mov eax,0
jmp FreeBlue1End

FreeBlu2Start:
mov r12d,0
lea edx,[r9+01]
jmp FreeBlue2End

FreeBluAOB1:
jmp FreeBlu1Start
FreeBlue1End:

FreeBluAOB2:
jmp FreeBlu2Start
nop
nop
nop
FreeBlue2End:

}

[ENABLE]

aobscanmodule(MINE_FreeBlueprintRequirements1,gamedll_x64_rwdi.dll,41 8B 44 0D 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+2E6595)

label(code)
label(return)

newmem:

code:
  //mov eax,[r13+rcx+00] // cheat replace with 'mov eax,0', guessing it is the number of components required?
  xor eax,eax
  jmp return

MINE_FreeBlueprintRequirements1:
  jmp code
return:
registersymbol(MINE_FreeBlueprintRequirements1)

aobscanmodule(MINE_FreeBlueprintRequirements2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+2E606E)

label(code2)
label(return2)

newmem2:

code2:
  //mov r12d,[rdi+rdx] // cheat replace with 'mov r12d,0', guessing it is the number of components required
  mov r12d,0
  lea edx,[r9+01]
  jmp return2

MINE_FreeBlueprintRequirements2:
  jmp code2
  nop
  nop
  nop
return2:
registersymbol(MINE_FreeBlueprintRequirements2)

[DISABLE]

MINE_FreeBlueprintRequirements1:
  db 41 8B 44 0D 00

unregistersymbol(MINE_FreeBlueprintRequirements1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+2E6595

"gamedll_x64_rwdi.dll"+2E656F: 48 8D 4C 24 38     -  lea rcx,[rsp+38]
"gamedll_x64_rwdi.dll"+2E6574: 89 44 24 40        -  mov [rsp+40],eax
"gamedll_x64_rwdi.dll"+2E6578: E8 53 1D 36 00     -  call gamedll_x64_rwdi.dll+6482D0
"gamedll_x64_rwdi.dll"+2E657D: 48 8B 55 00        -  mov rdx,[rbp+00]
"gamedll_x64_rwdi.dll"+2E6581: 48 8B CD           -  mov rcx,rbp
"gamedll_x64_rwdi.dll"+2E6584: 8B D8              -  mov ebx,eax
"gamedll_x64_rwdi.dll"+2E6586: 85 C0              -  test eax,eax
"gamedll_x64_rwdi.dll"+2E6588: 41 0F 48 DF        -  cmovs ebx,r15d
"gamedll_x64_rwdi.dll"+2E658C: FF 92 D8 0B 00 00  -  call qword ptr [rdx+00000BD8]
"gamedll_x64_rwdi.dll"+2E6592: 48 8B 08           -  mov rcx,[rax]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+2E6595: 41 8B 44 0D 00     -  mov eax,[r13+rcx+00]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+2E659A: 85 C0              -  test eax,eax
"gamedll_x64_rwdi.dll"+2E659C: 7E 47              -  jle gamedll_x64_rwdi.dll+2E65E5
"gamedll_x64_rwdi.dll"+2E659E: 66 0F 6E CB        -  movd xmm1,ebx
"gamedll_x64_rwdi.dll"+2E65A2: 66 0F 6E C0        -  movd xmm0,eax
"gamedll_x64_rwdi.dll"+2E65A6: 0F 5B C9           -  cvtdq2ps xmm1,xmm1
"gamedll_x64_rwdi.dll"+2E65A9: 0F 5B C0           -  cvtdq2ps xmm0,xmm0
"gamedll_x64_rwdi.dll"+2E65AC: F3 0F 5E C8        -  divss xmm1,xmm0
"gamedll_x64_rwdi.dll"+2E65B0: F3 0F 2C C9        -  cvttss2si ecx,xmm1
"gamedll_x64_rwdi.dll"+2E65B4: 81 F9 00 00 00 80  -  cmp ecx,80000000
"gamedll_x64_rwdi.dll"+2E65BA: 74 20              -  je gamedll_x64_rwdi.dll+2E65DC
}
MINE_FreeBlueprintRequirements2:
  db 44 8B 24 17 41 8D 51 01

unregistersymbol(MINE_FreeBlueprintRequirements2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+2E606E

"gamedll_x64_rwdi.dll"+2E604C: 49 63 DE                 -  movsxd  rbx,r14d
"gamedll_x64_rwdi.dll"+2E604F: 49 8B CF                 -  mov rcx,r15
"gamedll_x64_rwdi.dll"+2E6052: 48 C1 E3 04              -  shl rbx,04
"gamedll_x64_rwdi.dll"+2E6056: 48 03 18                 -  add rbx,[rax]
"gamedll_x64_rwdi.dll"+2E6059: 49 8B 07                 -  mov rax,[r15]
"gamedll_x64_rwdi.dll"+2E605C: FF 90 D8 0B 00 00        -  call qword ptr [rax+00000BD8]
"gamedll_x64_rwdi.dll"+2E6062: 45 33 C9                 -  xor r9d,r9d
"gamedll_x64_rwdi.dll"+2E6065: 48 8B CB                 -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+2E6068: 48 8B 10                 -  mov rdx,[rax]
"gamedll_x64_rwdi.dll"+2E606B: 0F 28 D6                 -  movaps xmm2,xmm6
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+2E606E: 44 8B 24 17              -  mov r12d,[rdi+rdx]
"gamedll_x64_rwdi.dll"+2E6072: 41 8D 51 01              -  lea edx,[r9+01]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+2E6076: E8 25 EA 36 00           -  call gamedll_x64_rwdi.dll+654AA0
"gamedll_x64_rwdi.dll"+2E607B: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+2E607E: 0F 84 1B 01 00 00        -  je gamedll_x64_rwdi.dll+2E619F
"gamedll_x64_rwdi.dll"+2E6084: 48 8B 10                 -  mov rdx,[rax]
"gamedll_x64_rwdi.dll"+2E6087: 48 8D AE 00 09 00 00     -  lea rbp,[rsi+00000900]
"gamedll_x64_rwdi.dll"+2E608E: 48 8B C8                 -  mov rcx,rax
"gamedll_x64_rwdi.dll"+2E6091: 48 8B 5D 00              -  mov rbx,[rbp+00]
"gamedll_x64_rwdi.dll"+2E6095: FF 92 B0 01 00 00        -  call qword ptr [rdx+000001B0]
"gamedll_x64_rwdi.dll"+2E609B: 48 8D 54 24 30           -  lea rdx,[rsp+30]
"gamedll_x64_rwdi.dll"+2E60A0: 4C 8B C0                 -  mov r8,rax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10950</ID>
          <Description>"MINE_WeaponDurability"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  Cheat just NOPs the conditional jump, probably skips something that will
  destroy the weapon when it reaches 0 or subtract if new value is lower?
}

[ENABLE]

aobscanmodule(MINE_WeaponDurability,gamedll_x64_rwdi.dll,0F 2F F0 76 11) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+64F998)

label(code)
label(return)

newmem:

code:
  comiss xmm6,xmm0
//  jna gamedll_x64_rwdi.ShutdownGameScriptDLL+64CF2E // NOP this for cheat
  jmp return

MINE_WeaponDurability:
  jmp code
return:
registersymbol(MINE_WeaponDurability)

[DISABLE]

MINE_WeaponDurability:
  db 0F 2F F0 76 11

unregistersymbol(MINE_WeaponDurability)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+64F998

"gamedll_x64_rwdi.dll"+64F974: FF 90 78 09 00 00     -  call qword ptr [rax+00000978]
"gamedll_x64_rwdi.dll"+64F97A: 0F 57 C9              -  xorps xmm1,xmm1
"gamedll_x64_rwdi.dll"+64F97D: 0F 2F C1              -  comiss xmm0,xmm1
"gamedll_x64_rwdi.dll"+64F980: 76 2C                 -  jna gamedll_x64_rwdi.dll+64F9AE
"gamedll_x64_rwdi.dll"+64F982: 0F 2F F1              -  comiss xmm6,xmm1
"gamedll_x64_rwdi.dll"+64F985: 73 03                 -  jae gamedll_x64_rwdi.dll+64F98A
"gamedll_x64_rwdi.dll"+64F987: 0F 28 F1              -  movaps xmm6,xmm1
"gamedll_x64_rwdi.dll"+64F98A: 48 8B 47 18           -  mov rax,[rdi+18]
"gamedll_x64_rwdi.dll"+64F98E: 48 8D 4F 18           -  lea rcx,[rdi+18]
"gamedll_x64_rwdi.dll"+64F992: FF 90 78 09 00 00     -  call qword ptr [rax+00000978]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+64F998: 0F 2F F0              -  comiss xmm6,xmm0
"gamedll_x64_rwdi.dll"+64F99B: 76 11                 -  jna gamedll_x64_rwdi.dll+64F9AE
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+64F99D: 48 8B 47 18           -  mov rax,[rdi+18]
"gamedll_x64_rwdi.dll"+64F9A1: 48 8D 4F 18           -  lea rcx,[rdi+18]
"gamedll_x64_rwdi.dll"+64F9A5: FF 90 78 09 00 00     -  call qword ptr [rax+00000978]
"gamedll_x64_rwdi.dll"+64F9AB: 0F 28 F0              -  movaps xmm6,xmm0
"gamedll_x64_rwdi.dll"+64F9AE: 48 8B 47 18           -  mov rax,[rdi+18]
"gamedll_x64_rwdi.dll"+64F9B2: 48 8D 4F 18           -  lea rcx,[rdi+18]
"gamedll_x64_rwdi.dll"+64F9B6: F3 0F 11 77 04        -  movss [rdi+04],xmm6
"gamedll_x64_rwdi.dll"+64F9BB: FF 90 B0 0B 00 00     -  call qword ptr [rax+00000BB0]
"gamedll_x64_rwdi.dll"+64F9C1: 48 8B 57 18           -  mov rdx,[rdi+18]
"gamedll_x64_rwdi.dll"+64F9C5: 48 8D 4F 18           -  lea rcx,[rdi+18]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10951</ID>
          <Description>"MINE_InfiniteAmmo"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

Works for arrows and shotgun shells I know.  When using ammo, instead make
sure you have at least 20.

Original:
aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90


}

[ENABLE]

aobscanmodule(MINE_InfiniteAmmo1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+CC0955)

label(code)
label(skip)
label(return)

newmem:

code:
  mov edx,[rax+40] // load ammo, a latter instruction is dec edx
  cmp edx,#20
  jge skip
  mov edx,#20
skip:
  inc edx
  lea rcx,[rax+40]
  jmp return

MINE_InfiniteAmmo1:
  jmp code
  nop
  nop
return:
registersymbol(MINE_InfiniteAmmo1)

aobscanmodule(MINE_InfiniteAmmo2,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+BE8932)

label(code2)
label(skip2)
label(return2)

newmem2:

code2:
  movsxd  rax,ebx
  add rax,rax

  // r8d is ammo?
  cmp r8d,#20
  jge skip2
  mov r8d,#20
skip2:
  jmp return2

MINE_InfiniteAmmo2:
  jmp code2
  nop
return2:
registersymbol(MINE_InfiniteAmmo2)

[DISABLE]

MINE_InfiniteAmmo1:
  db 8B 50 40 48 8D 48 40

unregistersymbol(MINE_InfiniteAmmo1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+CC0955

"gamedll_x64_rwdi.dll"+CC092C: FF 50 28              -  call qword ptr [rax+28]
"gamedll_x64_rwdi.dll"+CC092F: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+CC0931: 0F 84 1B 01 00 00     -  je gamedll_x64_rwdi.dll+CC0A52
"gamedll_x64_rwdi.dll"+CC0937: 49 8B 45 00           -  mov rax,[r13+00]
"gamedll_x64_rwdi.dll"+CC093B: 49 8B CD              -  mov rcx,r13
"gamedll_x64_rwdi.dll"+CC093E: FF 50 20              -  call qword ptr [rax+20]
"gamedll_x64_rwdi.dll"+CC0941: 41 8B 95 58 01 00 00  -  mov edx,[r13+00000158]
"gamedll_x64_rwdi.dll"+CC0948: 4C 8B 00              -  mov r8,[rax]
"gamedll_x64_rwdi.dll"+CC094B: 48 8B C8              -  mov rcx,rax
"gamedll_x64_rwdi.dll"+CC094E: 41 FF 90 58 07 00 00  -  call qword ptr [r8+00000758]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+CC0955: 8B 50 40              -  mov edx,[rax+40]
"gamedll_x64_rwdi.dll"+CC0958: 48 8D 48 40           -  lea rcx,[rax+40]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+CC095C: FF CA                 -  dec edx                 // NOP THIS FOR INFINITE AMMO (1)
"gamedll_x64_rwdi.dll"+CC095E: E8 6D E9 98 FF        -  call gamedll_x64_rwdi.dll+64F2D0
"gamedll_x64_rwdi.dll"+CC0963: 4D 8B 5D 00           -  mov r11,[r13+00]
"gamedll_x64_rwdi.dll"+CC0967: 49 8B CD              -  mov rcx,r13
"gamedll_x64_rwdi.dll"+CC096A: 41 FF 53 20           -  call qword ptr [r11+20]
"gamedll_x64_rwdi.dll"+CC096E: 48 8B C8              -  mov rcx,rax
"gamedll_x64_rwdi.dll"+CC0971: E8 2A A9 E3 FF        -  call gamedll_x64_rwdi.dll+AFB2A0
"gamedll_x64_rwdi.dll"+CC0976: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+CC0978: 75 56                 -  jne gamedll_x64_rwdi.dll+CC09D0
"gamedll_x64_rwdi.dll"+CC097A: 49 8B 45 00           -  mov rax,[r13+00]
}
MINE_InfiniteAmmo2:
  db 48 63 C3 48 03 C0

unregistersymbol(MINE_InfiniteAmmo2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BE8932

"gamedll_x64_rwdi.dll"+BE8913: 48 03 4F 40              -  add rcx,[rdi+40]
"gamedll_x64_rwdi.dll"+BE8917: E8 34 09 00 00           -  call gamedll_x64_rwdi.dll+BE9250
"gamedll_x64_rwdi.dll"+BE891C: 48 8B 74 24 38           -  mov rsi,[rsp+38]
"gamedll_x64_rwdi.dll"+BE8921: 8B C3                    -  mov eax,ebx
"gamedll_x64_rwdi.dll"+BE8923: 48 8B 5C 24 30           -  mov rbx,[rsp+30]
"gamedll_x64_rwdi.dll"+BE8928: 48 83 C4 20              -  add rsp,20
"gamedll_x64_rwdi.dll"+BE892C: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+BE892D: C3                       -  ret 
"gamedll_x64_rwdi.dll"+BE892E: 85 DB                    -  test ebx,ebx
"gamedll_x64_rwdi.dll"+BE8930: 78 81                    -  js gamedll_x64_rwdi.dll+BE88B3
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BE8932: 48 63 C3                 -  movsxd  rax,ebx
"gamedll_x64_rwdi.dll"+BE8935: 48 03 C0                 -  add rax,rax
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BE8938: 45 89 44 C2 04           -  mov [r10+rax*8+04],r8d // NOP THIS FOR INFINITE AMMO
"gamedll_x64_rwdi.dll"+BE893D: EB CA                    -  jmp gamedll_x64_rwdi.dll+BE8909
"gamedll_x64_rwdi.dll"+BE893F: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BE8940: 48 83 C1 40              -  add rcx,40
"gamedll_x64_rwdi.dll"+BE8944: E9 27 0A 00 00           -  jmp gamedll_x64_rwdi.dll+BE9370
"gamedll_x64_rwdi.dll"+BE8949: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BE894A: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BE894B: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BE894C: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BE894D: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10952</ID>
          <Description>"MINE_InfiniteThrowablesAndUpgrades"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  Original:
aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90
}

[ENABLE]


aobscanmodule(MINE_InfiniteThrowablesAndUpgrades,gamedll_x64_rwdi.dll,83 39 01 7E 39) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BE956B)

label(code)
label(skip)
label(return)

newmem:

code:
//  cmp dword ptr [rcx],01
//  jle gamedll_x64_rwdi.ShutdownGameScriptDLL+BE6B29 // nop this for cheat and also dec a few instructions later
  mov edx,[rcx]
  cmp edx,#21
  jge skip
  mov edx,#21
  mov [rcx],edx
skip:
  jmp return

MINE_InfiniteThrowablesAndUpgrades:
  jmp code
return:
registersymbol(MINE_InfiniteThrowablesAndUpgrades)

[DISABLE]

MINE_InfiniteThrowablesAndUpgrades:
  db 83 39 01 7E 39

unregistersymbol(MINE_InfiniteThrowablesAndUpgrades)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BE956B

"gamedll_x64_rwdi.dll"+BE9543: 48 8B 0C DA        -  mov rcx,[rdx+rbx*8]
"gamedll_x64_rwdi.dll"+BE9547: 48 89 6C 24 30     -  mov [rsp+30],rbp
"gamedll_x64_rwdi.dll"+BE954C: 48 8B 41 58        -  mov rax,[rcx+58]
"gamedll_x64_rwdi.dll"+BE9550: 48 83 C1 58        -  add rcx,58
"gamedll_x64_rwdi.dll"+BE9554: FF 90 10 05 00 00  -  call qword ptr [rax+00000510]
"gamedll_x64_rwdi.dll"+BE955A: 83 F8 01           -  cmp eax,01
"gamedll_x64_rwdi.dll"+BE955D: 7E 4A              -  jle gamedll_x64_rwdi.dll+BE95A9
"gamedll_x64_rwdi.dll"+BE955F: 48 8B 46 40        -  mov rax,[rsi+40]
"gamedll_x64_rwdi.dll"+BE9563: 48 8B 0C D8        -  mov rcx,[rax+rbx*8]
"gamedll_x64_rwdi.dll"+BE9567: 48 83 C1 40        -  add rcx,40
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BE956B: 83 39 01           -  cmp dword ptr [rcx],01
"gamedll_x64_rwdi.dll"+BE956E: 7E 39              -  jle gamedll_x64_rwdi.dll+BE95A9
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BE9570: 8B 11              -  mov edx,[rcx]
"gamedll_x64_rwdi.dll"+BE9572: FF CA              -  dec edx // NOP THIS TOO
"gamedll_x64_rwdi.dll"+BE9574: E8 57 5D A6 FF     -  call gamedll_x64_rwdi.dll+64F2D0
"gamedll_x64_rwdi.dll"+BE9579: 48 8B 56 40        -  mov rdx,[rsi+40]
"gamedll_x64_rwdi.dll"+BE957D: 45 8B C4           -  mov r8d,r12d
"gamedll_x64_rwdi.dll"+BE9580: 48 8B 14 DA        -  mov rdx,[rdx+rbx*8]
"gamedll_x64_rwdi.dll"+BE9584: 48 8B CE           -  mov rcx,rsi
"gamedll_x64_rwdi.dll"+BE9587: E8 E4 EC FF FF     -  call gamedll_x64_rwdi.dll+BE8270
"gamedll_x64_rwdi.dll"+BE958C: 48 8B 6C 24 30     -  mov rbp,[rsp+30]
"gamedll_x64_rwdi.dll"+BE9591: B0 01              -  mov al,01
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10955</ID>
          <Description>"MINE_InfiniteGrapplingHook"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_InfiniteGrapplingHook,gamedll_x64_rwdi.dll,F3 0F 11 43 40 77) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+C9D6DA)

label(code)
label(return)

newmem:

code:
  // movss [rbx+40],xmm0 // skip this for cheat?
  jmp return

MINE_InfiniteGrapplingHook:
  jmp code
return:
registersymbol(MINE_InfiniteGrapplingHook)

[DISABLE]

MINE_InfiniteGrapplingHook:
  db F3 0F 11 43 40

unregistersymbol(MINE_InfiniteGrapplingHook)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+C9D6DA

"gamedll_x64_rwdi.dll"+C9D6B3: 74 0C                    -  je gamedll_x64_rwdi.dll+C9D6C1
"gamedll_x64_rwdi.dll"+C9D6B5: 48 8B C8                 -  mov rcx,rax
"gamedll_x64_rwdi.dll"+C9D6B8: E8 23 C0 73 FF           -  call gamedll_x64_rwdi.dll+3D96E0
"gamedll_x64_rwdi.dll"+C9D6BD: 84 C0                    -  test al,al
"gamedll_x64_rwdi.dll"+C9D6BF: 75 0D                    -  jne gamedll_x64_rwdi.dll+C9D6CE
"gamedll_x64_rwdi.dll"+C9D6C1: E8 EA 9B 6F FF           -  call gamedll_x64_rwdi.dll+3972B0
"gamedll_x64_rwdi.dll"+C9D6C6: F3 0F 59 B0 AC 01 00 00  -  mulss xmm6,[rax+000001AC]
"gamedll_x64_rwdi.dll"+C9D6CE: F3 0F 10 43 40           -  movss xmm0,[rbx+40]
"gamedll_x64_rwdi.dll"+C9D6D3: F3 0F 5C C6              -  subss xmm0,xmm6
"gamedll_x64_rwdi.dll"+C9D6D7: 0F 2F C7                 -  comiss xmm0,xmm7
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+C9D6DA: F3 0F 11 43 40           -  movss [rbx+40],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+C9D6DF: 77 07                    -  ja gamedll_x64_rwdi.dll+C9D6E8
"gamedll_x64_rwdi.dll"+C9D6E1: C6 43 44 01              -  mov byte ptr [rbx+44],01
"gamedll_x64_rwdi.dll"+C9D6E5: 89 7B 40                 -  mov [rbx+40],edi
"gamedll_x64_rwdi.dll"+C9D6E8: 48 8B 5C 24 60           -  mov rbx,[rsp+60]
"gamedll_x64_rwdi.dll"+C9D6ED: 0F 28 74 24 40           -  movaps xmm6,[rsp+40]
"gamedll_x64_rwdi.dll"+C9D6F2: 0F 28 7C 24 30           -  movaps xmm7,[rsp+30]
"gamedll_x64_rwdi.dll"+C9D6F7: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+C9D6FB: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+C9D6FC: C3                       -  ret 
"gamedll_x64_rwdi.dll"+C9D6FD: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10975</ID>
          <Description>"MINE_InstantHoldActions"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Supposed to do 'hold' actions (hold F) instantly.  Replace with mov
  of (float)1 to [rbx+000001FC]
}

[ENABLE]

aobscanmodule(MINE_InstantHoldActions,gamedll_x64_rwdi.dll,0F 28 F7 F3 0F 11 B3 FC 01 00 00) // should be unique
alloc(newmem,$1000,MINE_InstantHoldActions)

label(code)
label(return)

newmem:
  dd (float)1

code:
  movaps xmm6,xmm7
  movss xmm6,[newmem]
  movss [rbx+000001FC],xmm6
  jmp return

MINE_InstantHoldActions:
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(MINE_InstantHoldActions)

[DISABLE]

MINE_InstantHoldActions:
  db 0F 28 F7 F3 0F 11 B3 FC 01 00 00

unregistersymbol(MINE_InstantHoldActions)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+E22503

"gamedll_x64_rwdi.dll"+E224D5: 76 37                    -  jna gamedll_x64_rwdi.dll+E2250E
"gamedll_x64_rwdi.dll"+E224D7: 48 8D 4B 28              -  lea rcx,[rbx+28]
"gamedll_x64_rwdi.dll"+E224DB: FF 15 FF B6 50 00        -  call qword ptr [gamedll_x64_rwdi.dll+132DBE0]
"gamedll_x64_rwdi.dll"+E224E1: F3 0F 58 BB FC 01 00 00  -  addss xmm7,[rbx+000001FC]
"gamedll_x64_rwdi.dll"+E224E9: 0F 2F FE                 -  comiss xmm7,xmm6
"gamedll_x64_rwdi.dll"+E224EC: F3 0F 11 BB FC 01 00 00  -  movss [rbx+000001FC],xmm7
"gamedll_x64_rwdi.dll"+E224F4: 72 10                    -  jb gamedll_x64_rwdi.dll+E22506
"gamedll_x64_rwdi.dll"+E224F6: F3 0F 10 35 7E 2D 5B 00  -  movss xmm6,[gamedll_x64_rwdi.dll+13D527C]
"gamedll_x64_rwdi.dll"+E224FE: 0F 2F FE                 -  comiss xmm7,xmm6
"gamedll_x64_rwdi.dll"+E22501: 77 03                    -  ja gamedll_x64_rwdi.dll+E22506
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+E22503: 0F 28 F7                 -  movaps xmm6,xmm7
"gamedll_x64_rwdi.dll"+E22506: F3 0F 11 B3 FC 01 00 00  -  movss [rbx+000001FC],xmm6
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+E2250E: 0F 28 74 24 30           -  movaps xmm6,[rsp+30]
"gamedll_x64_rwdi.dll"+E22513: 0F 28 7C 24 20           -  movaps xmm7,[rsp+20]
"gamedll_x64_rwdi.dll"+E22518: 48 83 C4 40              -  add rsp,40
"gamedll_x64_rwdi.dll"+E2251C: 5B                       -  pop rbx
"gamedll_x64_rwdi.dll"+E2251D: C3                       -  ret 
"gamedll_x64_rwdi.dll"+E2251E: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+E2251F: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+E22520: 48 8B C4                 -  mov rax,rsp
"gamedll_x64_rwdi.dll"+E22523: 48 89 58 08              -  mov [rax+08],rbx
"gamedll_x64_rwdi.dll"+E22527: 48 89 68 10              -  mov [rax+10],rbp
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10959</ID>
          <Description>"MINE_WeaponsInSafeZones"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  Basically nop this inc instruction...
}

[ENABLE]

aobscanmodule(MINE_WeaponsInSafeZones,gamedll_x64_rwdi.dll,FF 83 68 09 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+AEB594)

label(code)
label(return)

newmem:

code:
  // inc [rbx+00000968]
  jmp return

MINE_WeaponsInSafeZones:
  jmp code
  nop
return:
registersymbol(MINE_WeaponsInSafeZones)

[DISABLE]

MINE_WeaponsInSafeZones:
  db FF 83 68 09 00 00

unregistersymbol(MINE_WeaponsInSafeZones)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AEB594

"gamedll_x64_rwdi.dll"+AEB564: 48 8B 8B 60 09 00 00  -  mov rcx,[rbx+00000960]
"gamedll_x64_rwdi.dll"+AEB56B: C1 E2 03              -  shl edx,03
"gamedll_x64_rwdi.dll"+AEB56E: FF 15 9C 1E 84 00     -  call qword ptr [gamedll_x64_rwdi.dll+132D410]
"gamedll_x64_rwdi.dll"+AEB574: 48 89 83 60 09 00 00  -  mov [rbx+00000960],rax
"gamedll_x64_rwdi.dll"+AEB57B: 8B 8B 68 09 00 00     -  mov ecx,[rbx+00000968]
"gamedll_x64_rwdi.dll"+AEB581: 48 8B 83 60 09 00 00  -  mov rax,[rbx+00000960]
"gamedll_x64_rwdi.dll"+AEB588: 48 8D 14 C8           -  lea rdx,[rax+rcx*8]
"gamedll_x64_rwdi.dll"+AEB58C: 48 85 D2              -  test rdx,rdx
"gamedll_x64_rwdi.dll"+AEB58F: 74 03                 -  je gamedll_x64_rwdi.dll+AEB594
"gamedll_x64_rwdi.dll"+AEB591: 48 89 3A              -  mov [rdx],rdi
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+AEB594: FF 83 68 09 00 00     -  inc [rbx+00000968]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+AEB59A: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+AEB59D: E8 1E 2B FF FF        -  call gamedll_x64_rwdi.dll+ADE0C0
"gamedll_x64_rwdi.dll"+AEB5A2: 40 32 C6              -  xor al,sil
"gamedll_x64_rwdi.dll"+AEB5A5: 48 8B 74 24 40        -  mov rsi,[rsp+40]
"gamedll_x64_rwdi.dll"+AEB5AA: 74 26                 -  je gamedll_x64_rwdi.dll+AEB5D2
"gamedll_x64_rwdi.dll"+AEB5AC: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+AEB5AF: E8 0C 2B FF FF        -  call gamedll_x64_rwdi.dll+ADE0C0
"gamedll_x64_rwdi.dll"+AEB5B4: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+AEB5B6: 74 1A                 -  je gamedll_x64_rwdi.dll+AEB5D2
"gamedll_x64_rwdi.dll"+AEB5B8: 48 8B CB              -  mov rcx,rbx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10943</ID>
          <Description>"MINE_InstantCooldownFlares"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_InstantCooldownFlares,gamedll_x64_rwdi.dll,F3 0F 11 01 77 23) // should be unique
//alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B9D8F9)
alloc(newmem,$1000,MINE_InstantCooldownFlares)

label(code)
label(return)
label(doreturn)

newmem:

code:
  //movss [rcx],xmm0 // original code, skip for no cooldown
//   ja gamedll_x64_rwdi.ShutdownGameScriptDLL+B9AEA2 // jmps to 'xor al,al', then 'ret'
  ja doreturn
  jmp return

doreturn:
  xor al,al
  ret


MINE_InstantCooldownFlares:
  jmp code
  nop
return:
registersymbol(MINE_InstantCooldownFlares)

[DISABLE]

MINE_InstantCooldownFlares:
  db F3 0F 11 01 77 23

unregistersymbol(MINE_InstantCooldownFlares)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+B9D8F9

"gamedll_x64_rwdi.dll"+B9D8DE: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+B9D8DF: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+B9D8E0: 0F 57 D2                 -  xorps xmm2,xmm2
"gamedll_x64_rwdi.dll"+B9D8E3: 0F 2F CA                 -  comiss xmm1,xmm2
"gamedll_x64_rwdi.dll"+B9D8E6: 76 3A                    -  jna gamedll_x64_rwdi.dll+B9D922
"gamedll_x64_rwdi.dll"+B9D8E8: F3 0F 10 01              -  movss xmm0,[rcx]
"gamedll_x64_rwdi.dll"+B9D8EC: 8B 41 14                 -  mov eax,[rcx+14]
"gamedll_x64_rwdi.dll"+B9D8EF: F3 0F 5C C1              -  subss xmm0,xmm1
"gamedll_x64_rwdi.dll"+B9D8F3: 89 41 28                 -  mov [rcx+28],eax
"gamedll_x64_rwdi.dll"+B9D8F6: 0F 2F C2                 -  comiss xmm0,xmm2
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+B9D8F9: F3 0F 11 01              -  movss [rcx],xmm0
"gamedll_x64_rwdi.dll"+B9D8FD: 77 23                    -  ja gamedll_x64_rwdi.dll+B9D922 // jmp to 'xor al,al' then ret
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+B9D8FF: 80 79 19 00              -  cmp byte ptr [rcx+19],00
"gamedll_x64_rwdi.dll"+B9D903: C6 41 05 01              -  mov byte ptr [rcx+05],01
"gamedll_x64_rwdi.dll"+B9D907: 75 0A                    -  jne gamedll_x64_rwdi.dll+B9D913
"gamedll_x64_rwdi.dll"+B9D909: 80 79 04 00              -  cmp byte ptr [rcx+04],00
"gamedll_x64_rwdi.dll"+B9D90D: 74 04                    -  je gamedll_x64_rwdi.dll+B9D913
"gamedll_x64_rwdi.dll"+B9D90F: C6 41 04 00              -  mov byte ptr [rcx+04],00
"gamedll_x64_rwdi.dll"+B9D913: 8B 41 20                 -  mov eax,[rcx+20]
"gamedll_x64_rwdi.dll"+B9D916: C7 01 00 00 00 00        -  mov [rcx],00000000
"gamedll_x64_rwdi.dll"+B9D91C: 89 41 28                 -  mov [rcx+28],eax
"gamedll_x64_rwdi.dll"+B9D91F: B0 01                    -  mov al,01
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2545</ID>
          <Description>"MINE_ChallengeTimer"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-08
  Author : Jason

  This is part of the timer for the 'Ultimate Weapon' challenge.
  [rbx+F0] is the elapsed time for the challenge.  Seems to work for
  other normal challenges.  It just sets a max time for the timer to tick down.


}

[ENABLE]

aobscanmodule(INJECT_Timer2,gamedll_x64_rwdi.dll,F3 0F 5C 83 F0 00 00 00 0F) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+48F5D9)

label(code)
label(skip)
label(return)
label(ChallengeMaxTime)

newmem:
ChallengeMaxTime:
  dd (float)17.0

code:
  push rax
  mov eax,[ChallengeMaxTime]
  cmp eax,[rbx+000000F0]
  jge skip
  mov [rbx+000000F0],eax

skip:
  pop rax
  subss xmm0,[rbx+000000F0]
  jmp return

INJECT_Timer2:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_Timer2)
registersymbol(ChallengeMaxTime)

[DISABLE]

INJECT_Timer2:
  db F3 0F 5C 83 F0 00 00 00

unregistersymbol(INJECT_Timer2)
unregistersymbol(ChallengeMaxTime)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+48F5D9

"gamedll_x64_rwdi.dll"+48F5B3: 48 8B 49 60              -  mov rcx,[rcx+60]
"gamedll_x64_rwdi.dll"+48F5B7: 48 85 C9                 -  test rcx,rcx
"gamedll_x64_rwdi.dll"+48F5BA: 74 2A                    -  je gamedll_x64_rwdi.dll+48F5E6
"gamedll_x64_rwdi.dll"+48F5BC: 80 B9 70 02 00 00 00     -  cmp byte ptr [rcx+00000270],00
"gamedll_x64_rwdi.dll"+48F5C3: 74 0A                    -  je gamedll_x64_rwdi.dll+48F5CF
"gamedll_x64_rwdi.dll"+48F5C5: F3 0F 10 81 74 02 00 00  -  movss xmm0,[rcx+00000274]
"gamedll_x64_rwdi.dll"+48F5CD: EB 05                    -  jmp gamedll_x64_rwdi.dll+48F5D4
"gamedll_x64_rwdi.dll"+48F5CF: E8 9C 22 72 00           -  call gamedll_x64_rwdi.dll+BB1870
"gamedll_x64_rwdi.dll"+48F5D4: 0F 2F C6                 -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+48F5D7: 76 0D                    -  jna gamedll_x64_rwdi.dll+48F5E6
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+48F5D9: F3 0F 5C 83 F0 00 00 00  -  subss xmm0,[rbx+000000F0]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+48F5E1: 0F 2F C6                 -  comiss xmm0,xmm6
"gamedll_x64_rwdi.dll"+48F5E4: 77 03                    -  ja gamedll_x64_rwdi.dll+48F5E9
"gamedll_x64_rwdi.dll"+48F5E6: 0F 28 C6                 -  movaps xmm0,xmm6
"gamedll_x64_rwdi.dll"+48F5E9: 0F 28 74 24 20           -  movaps xmm6,[rsp+20]
"gamedll_x64_rwdi.dll"+48F5EE: 48 8B 5C 24 40           -  mov rbx,[rsp+40]
"gamedll_x64_rwdi.dll"+48F5F3: 48 83 C4 30              -  add rsp,30
"gamedll_x64_rwdi.dll"+48F5F7: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+48F5F8: C3                       -  ret 
"gamedll_x64_rwdi.dll"+48F5F9: 0F 57 C0                 -  xorps xmm0,xmm0
"gamedll_x64_rwdi.dll"+48F5FC: 48 8B 5C 24 40           -  mov rbx,[rsp+40]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2546</ID>
              <Description>"Max Time"</Description>
              <LastState Value="17" RealAddress="7FFE85FA0000"/>
              <VariableType>Float</VariableType>
              <Address>ChallengeMaxTime</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>10948</ID>
          <Description>"MINE_UnlimitedPotionDuration"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_UnlimitedPotionDuration,gamedll_x64_rwdi.dll,0F 28 F9 F3 0F 5C C7) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+A6B70C)

label(code)
label(skip)
label(return)

newmem:
  dd (float)5 // leave 5 seconds on potion, when it starts to wear off

code:
  movaps xmm7,xmm1
  subss xmm0,xmm7 // NOP this for cheat
  comiss xmm0,[newmem]
  ja skip
  movss xmm0,[newmem]
skip:
  jmp return

MINE_UnlimitedPotionDuration:
  jmp code
  nop
  nop
return:
registersymbol(MINE_UnlimitedPotionDuration)

[DISABLE]

MINE_UnlimitedPotionDuration:
  db 0F 28 F9 F3 0F 5C C7

unregistersymbol(MINE_UnlimitedPotionDuration)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+A6B70C

"gamedll_x64_rwdi.dll"+A6B6ED: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+A6B6EE: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+A6B6EF: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+A6B6F0: 48 89 5C 24 08           -  mov [rsp+08],rbx
"gamedll_x64_rwdi.dll"+A6B6F5: 57                       -  push rdi
"gamedll_x64_rwdi.dll"+A6B6F6: 48 83 EC 40              -  sub rsp,40
"gamedll_x64_rwdi.dll"+A6B6FA: F3 0F 10 41 10           -  movss xmm0,[rcx+10]
"gamedll_x64_rwdi.dll"+A6B6FF: 0F 29 74 24 30           -  movaps [rsp+30],xmm6
"gamedll_x64_rwdi.dll"+A6B704: 0F 29 7C 24 20           -  movaps [rsp+20],xmm7
"gamedll_x64_rwdi.dll"+A6B709: 48 8B D9                 -  mov rbx,rcx
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+A6B70C: 0F 28 F9                 -  movaps xmm7,xmm1
"gamedll_x64_rwdi.dll"+A6B70F: F3 0F 5C C7              -  subss xmm0,xmm7
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+A6B713: 0F 2F 05 5E E8 96 00     -  comiss xmm0,[gamedll_x64_rwdi.dll+13D9F78]
"gamedll_x64_rwdi.dll"+A6B71A: F3 0F 11 41 10           -  movss [rcx+10],xmm0
"gamedll_x64_rwdi.dll"+A6B71F: 48 8B 49 08              -  mov rcx,[rcx+08]
"gamedll_x64_rwdi.dll"+A6B723: 76 24                    -  jna gamedll_x64_rwdi.dll+A6B749
"gamedll_x64_rwdi.dll"+A6B725: 40 B7 01                 -  mov dil,01
"gamedll_x64_rwdi.dll"+A6B728: 48 85 C9                 -  test rcx,rcx
"gamedll_x64_rwdi.dll"+A6B72B: 74 0E                    -  je gamedll_x64_rwdi.dll+A6B73B
"gamedll_x64_rwdi.dll"+A6B72D: F3 0F 10 B1 94 00 00 00  -  movss xmm6,[rcx+00000094]
"gamedll_x64_rwdi.dll"+A6B735: F3 0F 5C F0              -  subss xmm6,xmm0
"gamedll_x64_rwdi.dll"+A6B739: EB 28                    -  jmp gamedll_x64_rwdi.dll+A6B763
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10974</ID>
          <Description>"MINE_InstantKill"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version:
  Date   : 2016-11-12
  Author : Jason

  Seems to be called first with health when zombie taking damage.  I think that
  xmm8 has the damage being done (5.0 when kicking in early game) and xmm9
  is 0.  So the little secion of compares and jumps stores max(new hp, 0) in
  [rbp+01C0].
}

[ENABLE]

aobscanmodule(MINE_InstantKill,gamedll_x64_rwdi.dll,F3 41 0F 10 47 78) // should be unique
alloc(newmem,$1000,MINE_InstantKill)

label(code)
label(return)

newmem:
  dd (float)0

code:
  //movss xmm0,[r15+78]
  movss xmm0,[newmem] // load 0 as health instead of actual health
  jmp return

MINE_InstantKill:
  jmp code
  nop
return:
registersymbol(MINE_InstantKill)

[DISABLE]

MINE_InstantKill:
  db F3 41 0F 10 47 78

unregistersymbol(MINE_InstantKill)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+213F62

"gamedll_x64_rwdi.dll"+213F2A: 44 0F 28 9C 24 20 02 00 00  -  movaps xmm11,[rsp+00000220]
"gamedll_x64_rwdi.dll"+213F33: 4C 8B A4 24 88 02 00 00     -  mov r12,[rsp+00000288]
"gamedll_x64_rwdi.dll"+213F3B: 44 38 AD 10 02 00 00        -  cmp [rbp+00000210],r13l
"gamedll_x64_rwdi.dll"+213F42: 0F 85 F7 01 00 00           -  jne gamedll_x64_rwdi.dll+21413F
"gamedll_x64_rwdi.dll"+213F48: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213F4B: 49 8B CE                    -  mov rcx,r14
"gamedll_x64_rwdi.dll"+213F4E: FF 90 88 0B 00 00           -  call qword ptr [rax+00000B88]
"gamedll_x64_rwdi.dll"+213F54: 8B BD E8 01 00 00           -  mov edi,[rbp+000001E8]
"gamedll_x64_rwdi.dll"+213F5A: 84 C0                       -  test al,al
"gamedll_x64_rwdi.dll"+213F5C: 0F 85 B3 00 00 00           -  jne gamedll_x64_rwdi.dll+214015
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+213F62: F3 41 0F 10 47 78           -  movss xmm0,[r15+78]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+213F68: F3 41 0F 5C C0              -  subss xmm0,xmm8
"gamedll_x64_rwdi.dll"+213F6D: 41 0F 2F C1                 -  comiss xmm0,xmm9
"gamedll_x64_rwdi.dll"+213F71: 73 0B                       -  jae gamedll_x64_rwdi.dll+213F7E
"gamedll_x64_rwdi.dll"+213F73: F3 44 0F 11 8D C0 01 00 00  -  movss [rbp+000001C0],xmm9
"gamedll_x64_rwdi.dll"+213F7C: EB 08                       -  jmp gamedll_x64_rwdi.dll+213F86
"gamedll_x64_rwdi.dll"+213F7E: F3 0F 11 85 C0 01 00 00     -  movss [rbp+000001C0],xmm0
"gamedll_x64_rwdi.dll"+213F86: 48 8D 95 C0 01 00 00        -  lea rdx,[rbp+000001C0]
"gamedll_x64_rwdi.dll"+213F8D: 49 8B CF                    -  mov rcx,r15
"gamedll_x64_rwdi.dll"+213F90: E8 9B 09 E3 FF              -  call gamedll_x64_rwdi.dll+44930
"gamedll_x64_rwdi.dll"+213F95: 0F BA E7 08                 -  bt edi,08
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10960</ID>
          <Description>"MINE_Speed"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  These speed scripts appear to run the same code, just chaning the value in
  the source location first.  The value is a float, changes are 15.0, 25.0 and
  9999.0.  The default seems to be 6, so I'll use 12 to double speed.
}

[ENABLE]

aobscanmodule(MINE_Speed1,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+C68EA4)

label(code)
label(return)

newmem:

code:
  mov [rdx+08],(float)12
  mulss xmm6,[rdx+08]
  jmp return

MINE_Speed1:
  jmp code
return:
registersymbol(MINE_Speed1)

aobscanmodule(MINE_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+C68D66)

label(code2)
label(return2)

newmem2:

code2:
  mov [rdx+08],(float)10
  mulss xmm7,[rdx+08]
  jmp return2

MINE_Speed2:
  jmp code2
return2:
registersymbol(MINE_Speed2)

aobscanmodule(MINE_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81) // should be unique
alloc(newmem5,$1000,"gamedll_x64_rwdi.dll"+B629F1)

label(code5)
label(return5)

newmem5:

code5:
  mov [r9+08],(float)10
  mulss xmm0,[r9+08]
  jmp return5

MINE_Speed3:
  jmp code5
  nop
return5:
registersymbol(MINE_Speed3)

[DISABLE]

MINE_Speed1:
  db F3 0F 59 72 08

unregistersymbol(MINE_Speed1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+C68EA4

"gamedll_x64_rwdi.dll"+C68E82: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+C68E85: 74 1D                    -  je gamedll_x64_rwdi.dll+C68EA4
"gamedll_x64_rwdi.dll"+C68E87: 48 8B 88 70 29 00 00     -  mov rcx,[rax+00002970]
"gamedll_x64_rwdi.dll"+C68E8E: 48 85 C9                 -  test rcx,rcx
"gamedll_x64_rwdi.dll"+C68E91: 74 11                    -  je gamedll_x64_rwdi.dll+C68EA4
"gamedll_x64_rwdi.dll"+C68E93: 48 83 79 18 00           -  cmp qword ptr [rcx+18],00
"gamedll_x64_rwdi.dll"+C68E98: 74 0A                    -  je gamedll_x64_rwdi.dll+C68EA4
"gamedll_x64_rwdi.dll"+C68E9A: 83 79 0C 01              -  cmp dword ptr [rcx+0C],01
"gamedll_x64_rwdi.dll"+C68E9E: 7C 04                    -  jl gamedll_x64_rwdi.dll+C68EA4
"gamedll_x64_rwdi.dll"+C68EA0: 41 0F 28 F0              -  movaps xmm6,xmm8
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+C68EA4: F3 0F 59 72 08           -  mulss xmm6,[rdx+08]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+C68EA9: 80 7B 10 00              -  cmp byte ptr [rbx+10],00
"gamedll_x64_rwdi.dll"+C68EAD: 48 8B 7C 24 78           -  mov rdi,[rsp+78]
"gamedll_x64_rwdi.dll"+C68EB2: 74 6E                    -  je gamedll_x64_rwdi.dll+C68F22
"gamedll_x64_rwdi.dll"+C68EB4: 80 7B 48 00              -  cmp byte ptr [rbx+48],00
"gamedll_x64_rwdi.dll"+C68EB8: 75 1F                    -  jne gamedll_x64_rwdi.dll+C68ED9
"gamedll_x64_rwdi.dll"+C68EBA: 45 0F 57 C0              -  xorps xmm8,xmm8
"gamedll_x64_rwdi.dll"+C68EBE: 44 0F 2F 43 54           -  comiss xmm8,[rbx+54]
"gamedll_x64_rwdi.dll"+C68EC3: 77 5D                    -  ja gamedll_x64_rwdi.dll+C68F22
"gamedll_x64_rwdi.dll"+C68EC5: 48 8B 03                 -  mov rax,[rbx]
"gamedll_x64_rwdi.dll"+C68EC8: 48 8B CB                 -  mov rcx,rbx
}
MINE_Speed2:
  db F3 0F 59 7A 08

unregistersymbol(MINE_Speed2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+C68D66

"gamedll_x64_rwdi.dll"+C68D44: 48 8B 88 70 29 00 00        -  mov rcx,[rax+00002970]
"gamedll_x64_rwdi.dll"+C68D4B: 48 85 C9                    -  test rcx,rcx
"gamedll_x64_rwdi.dll"+C68D4E: 74 16                       -  je gamedll_x64_rwdi.dll+C68D66
"gamedll_x64_rwdi.dll"+C68D50: 48 83 79 18 00              -  cmp qword ptr [rcx+18],00
"gamedll_x64_rwdi.dll"+C68D55: 74 0F                       -  je gamedll_x64_rwdi.dll+C68D66
"gamedll_x64_rwdi.dll"+C68D57: 83 79 0C 01                 -  cmp dword ptr [rcx+0C],01
"gamedll_x64_rwdi.dll"+C68D5B: 7C 06                       -  jl gamedll_x64_rwdi.dll+C68D63
"gamedll_x64_rwdi.dll"+C68D5D: 41 0F 28 F8                 -  movaps xmm7,xmm8
"gamedll_x64_rwdi.dll"+C68D61: EB 03                       -  jmp gamedll_x64_rwdi.dll+C68D66
"gamedll_x64_rwdi.dll"+C68D63: 0F 28 FE                    -  movaps xmm7,xmm6
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+C68D66: F3 0F 59 7A 08              -  mulss xmm7,[rdx+08]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+C68D6B: 48 8B 03                    -  mov rax,[rbx]
"gamedll_x64_rwdi.dll"+C68D6E: 40 84 F6                    -  test sil,sil
"gamedll_x64_rwdi.dll"+C68D71: 48 8B 74 24 70              -  mov rsi,[rsp+70]
"gamedll_x64_rwdi.dll"+C68D76: 48 8B CB                    -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+C68D79: 0F 84 9A 00 00 00           -  je gamedll_x64_rwdi.dll+C68E19
"gamedll_x64_rwdi.dll"+C68D7F: FF 50 20                    -  call qword ptr [rax+20]
"gamedll_x64_rwdi.dll"+C68D82: 48 8B F8                    -  mov rdi,rax
"gamedll_x64_rwdi.dll"+C68D85: 80 78 50 00                 -  cmp byte ptr [rax+50],00
"gamedll_x64_rwdi.dll"+C68D89: 74 17                       -  je gamedll_x64_rwdi.dll+C68DA2
"gamedll_x64_rwdi.dll"+C68D8B: 48 8B 10                    -  mov rdx,[rax]
}
MINE_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(MINE_Speed3)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+B629F1

"gamedll_x64_rwdi.dll"+B629CB: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+B629CE: 74 21                    -  je gamedll_x64_rwdi.dll+B629F1
"gamedll_x64_rwdi.dll"+B629D0: 48 8B 88 70 29 00 00     -  mov rcx,[rax+00002970]
"gamedll_x64_rwdi.dll"+B629D7: 48 85 C9                 -  test rcx,rcx
"gamedll_x64_rwdi.dll"+B629DA: 74 15                    -  je gamedll_x64_rwdi.dll+B629F1
"gamedll_x64_rwdi.dll"+B629DC: 48 83 79 18 00           -  cmp qword ptr [rcx+18],00
"gamedll_x64_rwdi.dll"+B629E1: 74 0E                    -  je gamedll_x64_rwdi.dll+B629F1
"gamedll_x64_rwdi.dll"+B629E3: 83 79 0C 01              -  cmp dword ptr [rcx+0C],01
"gamedll_x64_rwdi.dll"+B629E7: 7C 08                    -  jl gamedll_x64_rwdi.dll+B629F1
"gamedll_x64_rwdi.dll"+B629E9: F3 0F 10 05 3B 4F BE 00  -  movss xmm0,[gamedll_x64_rwdi.dll+174792C]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+B629F1: F3 41 0F 59 41 08        -  mulss xmm0,[r9+08]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+B629F7: C3                       -  ret 
"gamedll_x64_rwdi.dll"+B629F8: 81 FA BB 02 00 00        -  cmp edx,000002BB
"gamedll_x64_rwdi.dll"+B629FE: 75 5A                    -  jne gamedll_x64_rwdi.dll+B62A5A
"gamedll_x64_rwdi.dll"+B62A00: 48 8B 05 11 14 0C 01     -  mov rax,[gamedll_x64_rwdi.dll+1C23E18]
"gamedll_x64_rwdi.dll"+B62A07: 48 8B 80 00 05 00 00     -  mov rax,[rax+00000500]
"gamedll_x64_rwdi.dll"+B62A0E: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+B62A11: 74 19                    -  je gamedll_x64_rwdi.dll+B62A2C
"gamedll_x64_rwdi.dll"+B62A13: 48 8B 80 B8 00 00 00     -  mov rax,[rax+000000B8]
"gamedll_x64_rwdi.dll"+B62A1A: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+B62A1D: 74 0D                    -  je gamedll_x64_rwdi.dll+B62A2C
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10973</ID>
          <Description>"MINE_ZombiesDie"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  This seems to check npc health each frame.  It compares 0 with NPC health and
  does a conditional jump if 0 &gt; health, so maybe jump will kill npc?

  Yes!  Kills all zombies, Doesn't appear to affect good guys.  Tested with:
    1) Friendly NPCs in the tower
    2) Protection mission: werewolf
}

[ENABLE]

aobscanmodule(TEST_KILLALL,gamedll_x64_rwdi.dll,0F 2F 76 78 0F 83 A7 00 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+278DBC)

label(code)
label(return)

newmem:

code:
  comiss xmm6,[rsi+78]
  // jae gamedll_x64_rwdi.ShutdownGameScriptDLL+2763ED
  jmp return+A7

TEST_KILLALL:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(TEST_KILLALL)

[DISABLE]

TEST_KILLALL:
  db 0F 2F 76 78 0F 83 A7 00 00 00

unregistersymbol(TEST_KILLALL)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+278DBC

"gamedll_x64_rwdi.dll"+278D97: 0F 2E 73 4C           -  ucomiss xmm6,[rbx+4C]
"gamedll_x64_rwdi.dll"+278D9B: 74 02                 -  je gamedll_x64_rwdi.dll+278D9F
"gamedll_x64_rwdi.dll"+278D9D: 33 DB                 -  xor ebx,ebx
"gamedll_x64_rwdi.dll"+278D9F: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DA2: E8 A9 09 FC FF        -  call gamedll_x64_rwdi.dll+239750
"gamedll_x64_rwdi.dll"+278DA7: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DAA: 48 8B F0              -  mov rsi,rax
"gamedll_x64_rwdi.dll"+278DAD: E8 2E A6 F7 FF        -  call gamedll_x64_rwdi.dll+1F33E0
"gamedll_x64_rwdi.dll"+278DB2: 80 78 79 00           -  cmp byte ptr [rax+79],00
"gamedll_x64_rwdi.dll"+278DB6: 0F 85 B1 00 00 00     -  jne gamedll_x64_rwdi.dll+278E6D
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+278DBC: 0F 2F 76 78           -  comiss xmm6,[rsi+78]
"gamedll_x64_rwdi.dll"+278DC0: 0F 83 A7 00 00 00     -  jae gamedll_x64_rwdi.dll+278E6D
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+278DC6: 48 85 DB              -  test rbx,rbx
"gamedll_x64_rwdi.dll"+278DC9: 74 0D                 -  je gamedll_x64_rwdi.dll+278DD8
"gamedll_x64_rwdi.dll"+278DCB: 0F 2F B3 C8 00 00 00  -  comiss xmm6,[rbx+000000C8]
"gamedll_x64_rwdi.dll"+278DD2: 0F 83 95 00 00 00     -  jae gamedll_x64_rwdi.dll+278E6D
"gamedll_x64_rwdi.dll"+278DD8: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DDB: E8 90 36 EC FF        -  call gamedll_x64_rwdi.dll+13C470
"gamedll_x64_rwdi.dll"+278DE0: 8B 88 E8 00 00 00     -  mov ecx,[rax+000000E8]
"gamedll_x64_rwdi.dll"+278DE6: 0F BA E1 0B           -  bt ecx,0B
"gamedll_x64_rwdi.dll"+278DEA: 72 2C                 -  jb gamedll_x64_rwdi.dll+278E18
"gamedll_x64_rwdi.dll"+278DEC: 0F BA E1 0C           -  bt ecx,0C
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10984</ID>
          <Description>"MINE_NoDetection"</Description>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Cool, this single script seems to keep at least normal zombies from becoming
  alarmed.
}

[ENABLE]

aobscanmodule(MINE_NoDetection,gamedll_x64_rwdi.dll,39 81 F0 0B 00 00) // should be unique
alloc(newmem,$1000,MINE_NoDetection)

label(code)
label(return)

newmem:

code:
  mov al,1
  ret

  // original code
  cmp [rcx+00000BF0],eax
  jmp return

MINE_NoDetection:
  jmp code
  nop
return:
registersymbol(MINE_NoDetection)

[DISABLE]

MINE_NoDetection:
  db 39 81 F0 0B 00 00

unregistersymbol(MINE_NoDetection)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+103BB2

"gamedll_x64_rwdi.dll"+103BA5: 32 C0                 -  xor al,al
"gamedll_x64_rwdi.dll"+103BA7: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BA8: B0 01                 -  mov al,01
"gamedll_x64_rwdi.dll"+103BAA: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BAB: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAC: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAD: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAE: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAF: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BB0: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+103BB2: 39 81 F0 0B 00 00     -  cmp [rcx+00000BF0],eax
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+103BB8: 0F 94 C0              -  sete al
"gamedll_x64_rwdi.dll"+103BBB: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BBC: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBD: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBE: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBF: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BC0: 89 91 34 06 00 00     -  mov [rcx+00000634],edx
"gamedll_x64_rwdi.dll"+103BC6: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BC7: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BC8: CC                    -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2537</ID>
          <Description>"MINE_XP"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-07
  Author : Jason

  This script checks "AGI: Current XP" each frame.  It stores the structure
  address in a global offset so that it can be used anywhere.  The structure
  has sections for each of the ???: AGI or Agility, SUR or Survivor, POW or
  Power and LEG or Legendary.  Each one has the following structure:

    0000: Current XP (Total XP for all levels) (dword)
    0004: Level Start XP (Amount of XP to reach current level) (dword)
    0008: This Level XP (Amounto of XP for JUST this level) (dword)

  So for instance if you add the values at +04 and +08 and store it at +00, it
  should be just enough to get you to the next level.

  0028: AGI (total 259800?)
  0048: POW (total 856050?)
  0068: SUR (total 2000000?)
  00A8: LEG
}

[ENABLE]

aobscanmodule(INJECT_XP,gamedll_x64_rwdi.dll,8B 48 28 89 4B 48) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+3F1365)

label(code)
label(return)
label(pXP)

newmem:
pXP:
  dd 0 0 0 0

code:
  mov [newmem],rax
  mov ecx,[rax+28]
  mov [rbx+48],ecx
  jmp return

INJECT_XP:
  jmp code
  nop
return:
registersymbol(INJECT_XP)
registersymbol(pXP)

[DISABLE]

INJECT_XP:
  db 8B 48 28 89 4B 48

unregistersymbol(INJECT_XP)
unregistersymbol(pXP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+3F1365

"gamedll_x64_rwdi.dll"+3F1341: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1345: 0F B7 48 14           -  movzx ecx,word ptr [rax+14]
"gamedll_x64_rwdi.dll"+3F1349: 89 4B 70              -  mov [rbx+70],ecx
"gamedll_x64_rwdi.dll"+3F134C: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1350: 8B 48 08              -  mov ecx,[rax+08]
"gamedll_x64_rwdi.dll"+3F1353: 89 4B 44              -  mov [rbx+44],ecx
"gamedll_x64_rwdi.dll"+3F1356: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F135A: 0F B7 48 34           -  movzx ecx,word ptr [rax+34]
"gamedll_x64_rwdi.dll"+3F135E: 89 4B 74              -  mov [rbx+74],ecx
"gamedll_x64_rwdi.dll"+3F1361: 48 8B 42 40           -  mov rax,[rdx+40]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+3F1365: 8B 48 28              -  mov ecx,[rax+28]
"gamedll_x64_rwdi.dll"+3F1368: 89 4B 48              -  mov [rbx+48],ecx
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+3F136B: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F136F: 0F B7 48 54           -  movzx ecx,word ptr [rax+54]
"gamedll_x64_rwdi.dll"+3F1373: 89 4B 78              -  mov [rbx+78],ecx
"gamedll_x64_rwdi.dll"+3F1376: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F137A: 8B 48 48              -  mov ecx,[rax+48]
"gamedll_x64_rwdi.dll"+3F137D: 89 4B 4C              -  mov [rbx+4C],ecx
"gamedll_x64_rwdi.dll"+3F1380: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1384: 0F B7 48 74           -  movzx ecx,word ptr [rax+74]
"gamedll_x64_rwdi.dll"+3F1388: 89 4B 7C              -  mov [rbx+7C],ecx
"gamedll_x64_rwdi.dll"+3F138B: 48 8B 42 40           -  mov rax,[rdx+40]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2538</ID>
              <Description>"AGI XP"</Description>
              <LastState Value="259800" RealAddress="78E7DE98"/>
              <VariableType>4 Bytes</VariableType>
              <Address>pXP</Address>
              <Offsets>
                <Offset>28</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2539</ID>
              <Description>"POW XP"</Description>
              <LastState Value="856050" RealAddress="78E7DEB8"/>
              <VariableType>4 Bytes</VariableType>
              <Address>pXP</Address>
              <Offsets>
                <Offset>48</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2540</ID>
              <Description>"SUR XP"</Description>
              <LastState Value="2000000" RealAddress="78E7DED8"/>
              <VariableType>4 Bytes</VariableType>
              <Address>pXP</Address>
              <Offsets>
                <Offset>68</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2541</ID>
              <Description>"LEG XP"</Description>
              <LastState Value="789230000" RealAddress="78E7DF18"/>
              <VariableType>4 Bytes</VariableType>
              <Address>pXP</Address>
              <Offsets>
                <Offset>A8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2530</ID>
          <Description>"INJECT: Bozak Horde Challenge Timer"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-06
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_CHALLENGE_TIMER,gamedll_x64_rwdi.dll,F3 0F 58 40 D8) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+3EE186)

label(code)
label(return)

newmem:

code:
  //addss xmm0,[rax-28] // original code
  xorps xmm0,xmm0
  jmp return

INJECT_CHALLENGE_TIMER:
  jmp code
return:
registersymbol(INJECT_CHALLENGE_TIMER)

[DISABLE]

INJECT_CHALLENGE_TIMER:
  db F3 0F 58 40 D8

unregistersymbol(INJECT_CHALLENGE_TIMER)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+3EE186

"gamedll_x64_rwdi.dll"+3EE165: 74 14                       -  je gamedll_x64_rwdi.dll+3EE17B
"gamedll_x64_rwdi.dll"+3EE167: 66 0F 1F 84 00 00 00 00 00  -  nop [rax+rax+00000000]
"gamedll_x64_rwdi.dll"+3EE170: 48 8B C1                    -  mov rax,rcx
"gamedll_x64_rwdi.dll"+3EE173: 48 8B 09                    -  mov rcx,[rcx]
"gamedll_x64_rwdi.dll"+3EE176: 48 85 C9                    -  test rcx,rcx
"gamedll_x64_rwdi.dll"+3EE179: 75 F5                       -  jne gamedll_x64_rwdi.dll+3EE170
"gamedll_x64_rwdi.dll"+3EE17B: 48 85 C0                    -  test rax,rax
"gamedll_x64_rwdi.dll"+3EE17E: 74 7D                       -  je gamedll_x64_rwdi.dll+3EE1FD
"gamedll_x64_rwdi.dll"+3EE180: 0F 57 C9                    -  xorps xmm1,xmm1
"gamedll_x64_rwdi.dll"+3EE183: 0F 28 C2                    -  movaps xmm0,xmm2
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+3EE186: F3 0F 58 40 D8              -  addss xmm0,[rax-28]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+3EE18B: F3 0F 11 40 D8              -  movss [rax-28],xmm0
"gamedll_x64_rwdi.dll"+3EE190: 80 78 F0 00                 -  cmp byte ptr [rax-10],00
"gamedll_x64_rwdi.dll"+3EE194: C7 40 F4 00 00 80 BF        -  mov [rax-0C],BF800000
"gamedll_x64_rwdi.dll"+3EE19B: 74 17                       -  je gamedll_x64_rwdi.dll+3EE1B4
"gamedll_x64_rwdi.dll"+3EE19D: F3 0F 10 40 F8              -  movss xmm0,[rax-08]
"gamedll_x64_rwdi.dll"+3EE1A2: F3 0F 5C 40 D8              -  subss xmm0,[rax-28]
"gamedll_x64_rwdi.dll"+3EE1A7: 0F 2F C1                    -  comiss xmm0,xmm1
"gamedll_x64_rwdi.dll"+3EE1AA: 73 03                       -  jae gamedll_x64_rwdi.dll+3EE1AF
"gamedll_x64_rwdi.dll"+3EE1AC: 0F 28 C1                    -  movaps xmm0,xmm1
"gamedll_x64_rwdi.dll"+3EE1AF: F3 0F 11 40 F4              -  movss [rax-0C],xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10947</ID>
          <Description>"MINE_InfiniteCraftingItems"</Description>
          <LastState Activated="1"/>
          <Color>808000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

Cheat sets initial value to 10, must be when crafting?:

mov [rbx+40],10
mov esi,[rbx+40]
lea rcx,[rbx+40]

}

[ENABLE]

aobscanmodule(MINE_InfiniteCraftingItems,gamedll_x64_rwdi.dll,8B 73 40 48 8D 4B 40) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BE945F)

label(code)
label(skip)
label(return)

newmem:

code:
  mov esi,[rbx+40] // original code
  cmp esi,10
  jge skip
  mov esi,10
  mov [rbx+40],esi
skip:
  lea rcx,[rbx+40] // original code
  jmp return

MINE_InfiniteCraftingItems:
  jmp code
  nop
  nop
return:
registersymbol(MINE_InfiniteCraftingItems)

[DISABLE]

MINE_InfiniteCraftingItems:
  db 8B 73 40 48 8D 4B 40

unregistersymbol(MINE_InfiniteCraftingItems)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BE945F

"gamedll_x64_rwdi.dll"+BE9436: 41 8B FE           -  mov edi,r14d
"gamedll_x64_rwdi.dll"+BE9439: 45 39 75 48        -  cmp [r13+48],r14d
"gamedll_x64_rwdi.dll"+BE943D: 0F 86 90 00 00 00  -  jbe gamedll_x64_rwdi.dll+BE94D3
"gamedll_x64_rwdi.dll"+BE9443: 48 89 6C 24 50     -  mov [rsp+50],rbp
"gamedll_x64_rwdi.dll"+BE9448: 4C 89 7C 24 20     -  mov [rsp+20],r15
"gamedll_x64_rwdi.dll"+BE944D: 48 89 74 24 58     -  mov [rsp+58],rsi
"gamedll_x64_rwdi.dll"+BE9452: 41 8B EE           -  mov ebp,r14d
"gamedll_x64_rwdi.dll"+BE9455: 49 8B 45 40        -  mov rax,[r13+40]
"gamedll_x64_rwdi.dll"+BE9459: 48 39 1C 28        -  cmp [rax+rbp],rbx
"gamedll_x64_rwdi.dll"+BE945D: 75 59              -  jne gamedll_x64_rwdi.dll+BE94B8
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BE945F: 8B 73 40           -  mov esi,[rbx+40]
"gamedll_x64_rwdi.dll"+BE9462: 48 8D 4B 40        -  lea rcx,[rbx+40]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BE9466: 85 F6              -  test esi,esi
"gamedll_x64_rwdi.dll"+BE9468: 7E 4E              -  jle gamedll_x64_rwdi.dll+BE94B8
"gamedll_x64_rwdi.dll"+BE946A: 41 3B F4           -  cmp esi,r12d
"gamedll_x64_rwdi.dll"+BE946D: 7F 2C              -  jg gamedll_x64_rwdi.dll+BE949B
"gamedll_x64_rwdi.dll"+BE946F: 49 8D 4D 40        -  lea rcx,[r13+40]
"gamedll_x64_rwdi.dll"+BE9473: 8B D7              -  mov edx,edi
"gamedll_x64_rwdi.dll"+BE9475: E8 26 91 29 00     -  call gamedll_x64_rwdi.dll+E825A0
"gamedll_x64_rwdi.dll"+BE947A: 44 8B 44 24 68     -  mov r8d,[rsp+68]
"gamedll_x64_rwdi.dll"+BE947F: 48 8B D3           -  mov rdx,rbx
"gamedll_x64_rwdi.dll"+BE9482: 49 8B CD           -  mov rcx,r13
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10953</ID>
          <Description>"MINE_InfiniteUVFlashlight"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_InfiniteUVFlashlight,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B9D835)

label(code)
label(return)

newmem:

code:
  addss xmm0,xmm2 // change from subss to addss for cheat
  mov [rcx+28],eax
  jmp return

MINE_InfiniteUVFlashlight:
  jmp code
  nop
  nop
return:
registersymbol(MINE_InfiniteUVFlashlight)

[DISABLE]

MINE_InfiniteUVFlashlight:
  db F3 0F 5C C2 89 41 28

unregistersymbol(MINE_InfiniteUVFlashlight)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+B9D835

"gamedll_x64_rwdi.dll"+B9D810: 80 79 04 00              -  cmp byte ptr [rcx+04],00
"gamedll_x64_rwdi.dll"+B9D814: 0F 28 E1                 -  movaps xmm4,xmm1
"gamedll_x64_rwdi.dll"+B9D817: 74 4D                    -  je gamedll_x64_rwdi.dll+B9D866
"gamedll_x64_rwdi.dll"+B9D819: F3 0F 59 51 0C           -  mulss xmm2,[rcx+0C]
"gamedll_x64_rwdi.dll"+B9D81E: 0F 57 C9                 -  xorps xmm1,xmm1
"gamedll_x64_rwdi.dll"+B9D821: F3 0F 59 D4              -  mulss xmm2,xmm4
"gamedll_x64_rwdi.dll"+B9D825: 0F 2F D1                 -  comiss xmm2,xmm1
"gamedll_x64_rwdi.dll"+B9D828: 0F 86 A0 00 00 00        -  jbe gamedll_x64_rwdi.dll+B9D8CE
"gamedll_x64_rwdi.dll"+B9D82E: F3 0F 10 01              -  movss xmm0,[rcx]
"gamedll_x64_rwdi.dll"+B9D832: 8B 41 14                 -  mov eax,[rcx+14]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+B9D835: F3 0F 5C C2              -  subss xmm0,xmm2
"gamedll_x64_rwdi.dll"+B9D839: 89 41 28                 -  mov [rcx+28],eax
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+B9D83C: 0F 2F C1                 -  comiss xmm0,xmm1
"gamedll_x64_rwdi.dll"+B9D83F: F3 0F 11 01              -  movss [rcx],xmm0
"gamedll_x64_rwdi.dll"+B9D843: 0F 87 85 00 00 00        -  ja gamedll_x64_rwdi.dll+B9D8CE
"gamedll_x64_rwdi.dll"+B9D849: 80 79 19 00              -  cmp byte ptr [rcx+19],00
"gamedll_x64_rwdi.dll"+B9D84D: C6 41 05 01              -  mov byte ptr [rcx+05],01
"gamedll_x64_rwdi.dll"+B9D851: 75 04                    -  jne gamedll_x64_rwdi.dll+B9D857
"gamedll_x64_rwdi.dll"+B9D853: C6 41 04 00              -  mov byte ptr [rcx+04],00
"gamedll_x64_rwdi.dll"+B9D857: 8B 41 20                 -  mov eax,[rcx+20]
"gamedll_x64_rwdi.dll"+B9D85A: C7 01 00 00 00 00        -  mov [rcx],00000000
"gamedll_x64_rwdi.dll"+B9D860: 89 41 28                 -  mov [rcx+28],eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10977</ID>
          <Description>"MINE_InfiniteCamo"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Decreases camo timer, starts at 90 seconds.  NOP to keep timer from
  decreasing.
}

[ENABLE]

aobscanmodule(MINE_InfiniteCamo,gamedll_x64_rwdi.dll,F3 0F 11 43 14 0F 28) // should be unique
alloc(newmem,$1000,MINE_InfiniteCamo)

label(code)
label(return)

newmem:

code:
  // movss [rbx+14],xmm0
  jmp return

MINE_InfiniteCamo:
  jmp code
return:
registersymbol(MINE_InfiniteCamo)

[DISABLE]

MINE_InfiniteCamo:
  db F3 0F 11 43 14

unregistersymbol(MINE_InfiniteCamo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BF1DA7

"gamedll_x64_rwdi.dll"+BF1D78: 66 0F EF C9              -  pxor xmm1,xmm1
"gamedll_x64_rwdi.dll"+BF1D7C: 83 E0 01                 -  and eax,01
"gamedll_x64_rwdi.dll"+BF1D7F: 2B C8                    -  sub ecx,eax
"gamedll_x64_rwdi.dll"+BF1D81: F3 0F 2A C9              -  cvtsi2ss xmm1,ecx
"gamedll_x64_rwdi.dll"+BF1D85: F3 0F 59 0D A3 81 7E 00  -  mulss xmm1,[gamedll_x64_rwdi.dll+13D9F30]
"gamedll_x64_rwdi.dll"+BF1D8D: F3 0F 10 43 14           -  movss xmm0,[rbx+14]
"gamedll_x64_rwdi.dll"+BF1D92: F3 0F 58 0D E2 34 7E 00  -  addss xmm1,[gamedll_x64_rwdi.dll+13D527C]
"gamedll_x64_rwdi.dll"+BF1D9A: F3 41 0F 59 C8           -  mulss xmm1,xmm8
"gamedll_x64_rwdi.dll"+BF1D9F: F3 0F 59 CE              -  mulss xmm1,xmm6
"gamedll_x64_rwdi.dll"+BF1DA3: F3 0F 5C C1              -  subss xmm0,xmm1
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BF1DA7: F3 0F 11 43 14           -  movss [rbx+14],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BF1DAC: 0F 28 74 24 40           -  movaps xmm6,[rsp+40]
"gamedll_x64_rwdi.dll"+BF1DB1: 44 0F 28 44 24 30        -  movaps xmm8,[rsp+30]
"gamedll_x64_rwdi.dll"+BF1DB7: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+BF1DBB: 5B                       -  pop rbx
"gamedll_x64_rwdi.dll"+BF1DBC: C3                       -  ret 
"gamedll_x64_rwdi.dll"+BF1DBD: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BF1DBE: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BF1DBF: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+BF1DC0: 40 53                    -  push rbx
"gamedll_x64_rwdi.dll"+BF1DC2: 48 83 EC 20              -  sub rsp,20
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10954</ID>
          <Description>"MINE_EasyLockPicking"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_EasyLockPicking,gamedll_x64_rwdi.dll,F3 0F 10 4E 54 B1) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+6C64C0)

label(code)
label(return)

newmem:

code:
  movss xmm1,[rsi+54]
  mov [rsi+54],(float)999999 // CHEAT
  jmp return

MINE_EasyLockPicking:
  jmp code
return:
registersymbol(MINE_EasyLockPicking)

[DISABLE]

MINE_EasyLockPicking:
  db F3 0F 10 4E 54

unregistersymbol(MINE_EasyLockPicking)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+6C64C0

"gamedll_x64_rwdi.dll"+6C649B: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+6C649E: 74 0A                    -  je gamedll_x64_rwdi.dll+6C64AA
"gamedll_x64_rwdi.dll"+6C64A0: F3 0F 10 B0 28 01 00 00  -  movss xmm6,[rax+00000128]
"gamedll_x64_rwdi.dll"+6C64A8: EB 03                    -  jmp gamedll_x64_rwdi.dll+6C64AD
"gamedll_x64_rwdi.dll"+6C64AA: 0F 28 F3                 -  movaps xmm6,xmm3
"gamedll_x64_rwdi.dll"+6C64AD: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+6C64B0: 74 3F                    -  je gamedll_x64_rwdi.dll+6C64F1
"gamedll_x64_rwdi.dll"+6C64B2: 44 38 A0 14 01 00 00     -  cmp [rax+00000114],r12l
"gamedll_x64_rwdi.dll"+6C64B9: 74 36                    -  je gamedll_x64_rwdi.dll+6C64F1
"gamedll_x64_rwdi.dll"+6C64BB: F3 0F 10 56 50           -  movss xmm2,[rsi+50]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+6C64C0: F3 0F 10 4E 54           -  movss xmm1,[rsi+54]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+6C64C5: B1 01                    -  mov cl,01
"gamedll_x64_rwdi.dll"+6C64C7: F3 0F 5C 90 18 01 00 00  -  subss xmm2,[rax+00000118]
"gamedll_x64_rwdi.dll"+6C64CF: F3 0F 59 0D 71 3A D1 00  -  mulss xmm1,[gamedll_x64_rwdi.dll+13D9F48]
"gamedll_x64_rwdi.dll"+6C64D7: 0F 54 0D 22 B2 26 01     -  andps xmm1,[gamedll_x64_rwdi.dll+1931700]
"gamedll_x64_rwdi.dll"+6C64DE: 0F 54 15 1B B2 26 01     -  andps xmm2,[gamedll_x64_rwdi.dll+1931700]
"gamedll_x64_rwdi.dll"+6C64E5: F3 0F 5C D1              -  subss xmm2,xmm1
"gamedll_x64_rwdi.dll"+6C64E9: 0F 2F D3                 -  comiss xmm2,xmm3
"gamedll_x64_rwdi.dll"+6C64EC: 73 03                    -  jae gamedll_x64_rwdi.dll+6C64F1
"gamedll_x64_rwdi.dll"+6C64EE: 0F 28 D3                 -  movaps xmm2,xmm3
"gamedll_x64_rwdi.dll"+6C64F1: 48 8B 7E 40              -  mov rdi,[rsi+40]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10956</ID>
          <Description>"MINE_TheButton"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_TheButton,gamedll_x64_rwdi.dll,F3 0F 11 83 48 2A 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+ACBC1E)

label(code)
label(return)

newmem:

code:
  // movss [rbx+00002A48],xmm0 NOP for cheat
  jmp return

MINE_TheButton:
  jmp code
  nop
  nop
  nop
return:
registersymbol(MINE_TheButton)

[DISABLE]

MINE_TheButton:
  db F3 0F 11 83 48 2A 00 00

unregistersymbol(MINE_TheButton)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+ACBC1E

"gamedll_x64_rwdi.dll"+ACBBF5: 0F 57 C0                 -  xorps xmm0,xmm0
"gamedll_x64_rwdi.dll"+ACBBF8: 0F 2F 83 48 2A 00 00     -  comiss xmm0,[rbx+00002A48]
"gamedll_x64_rwdi.dll"+ACBBFF: 72 25                    -  jb gamedll_x64_rwdi.dll+ACBC26
"gamedll_x64_rwdi.dll"+ACBC01: 48 8B CB                 -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+ACBC04: E8 27 07 03 00           -  call gamedll_x64_rwdi.dll+AFC330
"gamedll_x64_rwdi.dll"+ACBC09: 48 8B CB                 -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+ACBC0C: E8 2F FF FE FF           -  call gamedll_x64_rwdi.dll+ABBB40
"gamedll_x64_rwdi.dll"+ACBC11: BA 14 00 00 00           -  mov edx,00000014
"gamedll_x64_rwdi.dll"+ACBC16: 48 8B C8                 -  mov rcx,rax
"gamedll_x64_rwdi.dll"+ACBC19: E8 62 6D 09 00           -  call gamedll_x64_rwdi.dll+B62980
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+ACBC1E: F3 0F 11 83 48 2A 00 00  -  movss [rbx+00002A48],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+ACBC26: 48 83 C4 20              -  add rsp,20
"gamedll_x64_rwdi.dll"+ACBC2A: 5B                       -  pop rbx
"gamedll_x64_rwdi.dll"+ACBC2B: F3 C3                    - repe  ret 
"gamedll_x64_rwdi.dll"+ACBC2D: 0F 1F 00                 -  nop [rax]
"gamedll_x64_rwdi.dll"+ACBC30: 50                       -  push rax
"gamedll_x64_rwdi.dll"+ACBC31: BB AC 00 7D BB           -  mov ebx,BB7D00AC
"gamedll_x64_rwdi.dll"+ACBC36: AC                       -  lodsb 
"gamedll_x64_rwdi.dll"+ACBC37: 00 9D BB AC 00 7D        -  add [rbp+7D00ACBB],bl
"gamedll_x64_rwdi.dll"+ACBC3D: BB AC 00 7D BB           -  mov ebx,BB7D00AC
"gamedll_x64_rwdi.dll"+ACBC42: AC                       -  lodsb 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10958</ID>
          <Description>"MINE_UnlimitedGas"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_UnlimitedGas1,gamedll_x64_rwdi.dll,F3 0F 11 80 20 03 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+F95FA2)

label(code)
label(return)

newmem:

code:
  // movss [rax+00000320],xmm0 // cheat nops this
  jmp return

MINE_UnlimitedGas1:
  jmp code
  nop
  nop
  nop
return:
registersymbol(MINE_UnlimitedGas1)

aobscanmodule(MINE_UnlimitedGas2,gamedll_x64_rwdi.dll,48 8B 43 18 F3 0F 11 90 20 03 00 00) // should be unique
alloc(newmem2,$1000,"gamedll_x64_rwdi.dll"+F95941)

label(code2)
label(return2)

newmem2:

code2:
  mov rax,[rbx+18] // nop this for cheat?
  movss [rax+00000320],xmm2
  jmp return2

MINE_UnlimitedGas2:
  jmp code2
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return2:
registersymbol(MINE_UnlimitedGas2)

[DISABLE]

MINE_UnlimitedGas1:
  db F3 0F 11 80 20 03 00 00

unregistersymbol(MINE_UnlimitedGas1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+F95FA2

"gamedll_x64_rwdi.dll"+F95F83: 33 C0                    -  xor eax,eax
"gamedll_x64_rwdi.dll"+F95F85: F3 0F 58 B0 20 03 00 00  -  addss xmm6,[rax+00000320]
"gamedll_x64_rwdi.dll"+F95F8D: 0F 2F F0                 -  comiss xmm6,xmm0
"gamedll_x64_rwdi.dll"+F95F90: 72 03                    -  jb gamedll_x64_rwdi.dll+F95F95
"gamedll_x64_rwdi.dll"+F95F92: 0F 28 C6                 -  movaps xmm0,xmm6
"gamedll_x64_rwdi.dll"+F95F95: 48 85 C9                 -  test rcx,rcx
"gamedll_x64_rwdi.dll"+F95F98: 74 06                    -  je gamedll_x64_rwdi.dll+F95FA0
"gamedll_x64_rwdi.dll"+F95F9A: 48 8B 43 18              -  mov rax,[rbx+18]
"gamedll_x64_rwdi.dll"+F95F9E: EB 02                    -  jmp gamedll_x64_rwdi.dll+F95FA2
"gamedll_x64_rwdi.dll"+F95FA0: 33 C0                    -  xor eax,eax
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+F95FA2: F3 0F 11 80 20 03 00 00  -  movss [rax+00000320],xmm0
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+F95FAA: C7 43 34 00 00 00 00     -  mov [rbx+34],00000000
"gamedll_x64_rwdi.dll"+F95FB1: C7 43 38 00 00 00 3F     -  mov [rbx+38],3F000000
"gamedll_x64_rwdi.dll"+F95FB8: 0F 28 74 24 20           -  movaps xmm6,[rsp+20]
"gamedll_x64_rwdi.dll"+F95FBD: 48 83 C4 30              -  add rsp,30
"gamedll_x64_rwdi.dll"+F95FC1: 5B                       -  pop rbx
"gamedll_x64_rwdi.dll"+F95FC2: C3                       -  ret 
"gamedll_x64_rwdi.dll"+F95FC3: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+F95FC4: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+F95FC5: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+F95FC6: CC                       -  int 3 
}
MINE_UnlimitedGas2:
  db 48 8B 43 18 F3 0F 11 90 20 03 00 00

unregistersymbol(MINE_UnlimitedGas2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+F95941

"gamedll_x64_rwdi.dll"+F95921: 74 06                    -  je gamedll_x64_rwdi.dll+F95929
"gamedll_x64_rwdi.dll"+F95923: 48 8B 4B 18              -  mov rcx,[rbx+18]
"gamedll_x64_rwdi.dll"+F95927: EB 03                    -  jmp gamedll_x64_rwdi.dll+F9592C
"gamedll_x64_rwdi.dll"+F95929: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+F9592C: F3 0F 58 89 20 03 00 00  -  addss xmm1,[rcx+00000320]
"gamedll_x64_rwdi.dll"+F95934: 0F 2F CA                 -  comiss xmm1,xmm2
"gamedll_x64_rwdi.dll"+F95937: 72 03                    -  jb gamedll_x64_rwdi.dll+F9593C
"gamedll_x64_rwdi.dll"+F95939: 0F 28 D1                 -  movaps xmm2,xmm1
"gamedll_x64_rwdi.dll"+F9593C: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+F9593F: 74 26                    -  je gamedll_x64_rwdi.dll+F95967
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+F95941: 48 8B 43 18              -  mov rax,[rbx+18] // basically nop this for cheat?
"gamedll_x64_rwdi.dll"+F95945: F3 0F 11 90 20 03 00 00  -  movss [rax+00000320],xmm2
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+F9594D: C7 43 38 00 00 00 3F     -  mov [rbx+38],3F000000
"gamedll_x64_rwdi.dll"+F95954: 89 7B 34                 -  mov [rbx+34],edi
"gamedll_x64_rwdi.dll"+F95957: 48 8B 5C 24 58           -  mov rbx,[rsp+58]
"gamedll_x64_rwdi.dll"+F9595C: 0F 28 7C 24 20           -  movaps xmm7,[rsp+20]
"gamedll_x64_rwdi.dll"+F95961: 48 83 C4 40              -  add rsp,40
"gamedll_x64_rwdi.dll"+F95965: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+F95966: C3                       -  ret 
"gamedll_x64_rwdi.dll"+F95967: 48 8B C7                 -  mov rax,rdi
"gamedll_x64_rwdi.dll"+F9596A: F3 0F 11 90 20 03 00 00  -  movss [rax+00000320],xmm2
"gamedll_x64_rwdi.dll"+F95972: C7 43 38 00 00 00 3F     -  mov [rbx+38],3F000000
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10961</ID>
          <Description>"MINE_SuperJump"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_SuperJump,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B484C1)

label(code)
label(return)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)
label(original)

newmem:
label(pStats)
pStats:
registersymbol(pStats)

  dq 0 0 0 0 0 0 0 0 0 0

code:
  mov [pStats],rcx
  push rbx

  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp original

runspeed:
  mov [pStats+8],rax
  mov [rax+10],(float)1.0 // default?
  jmp original

stun:
  mov [pStats+10],rax
  mov [rax+10],(float)1.0 // default 1.0, super 100
  jmp original

throwmelee:
  mov [pStats+18],rax
  mov [rax+10],(float)4.0 // default 4.0, super 50
  jmp original

critical:
  mov [pStats+20],rax
  mov [rax+10],(float)3.0 // default 1.0, super 100 // 3.0 is enough to jump straight onto a normal roof, so this must be jumping
  jmp original

original:
  pop rbx
  movss xmm0,[rax+10]
  jmp return

MINE_SuperJump+04:
  jmp code
return:
registersymbol(MINE_SuperJump)

[DISABLE]

MINE_SuperJump+04:
  db F3 0F 10 40 10

unregistersymbol(MINE_SuperJump)
unregistersymbol(pStats)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+B484C1

"gamedll_x64_rwdi.dll"+B48496: 49 8B 04 09           -  mov rax,[r9+rcx]
"gamedll_x64_rwdi.dll"+B4849A: 89 70 10              -  mov [rax+10],esi
"gamedll_x64_rwdi.dll"+B4849D: F3 0F 10 40 14        -  movss xmm0,[rax+14]
"gamedll_x64_rwdi.dll"+B484A2: F3 0F 58 C1           -  addss xmm0,xmm1
"gamedll_x64_rwdi.dll"+B484A6: F3 0F 59 40 0C        -  mulss xmm0,[rax+0C]
"gamedll_x64_rwdi.dll"+B484AB: F3 0F 11 40 08        -  movss [rax+08],xmm0
"gamedll_x64_rwdi.dll"+B484B0: 48 8B 87 D0 00 00 00  -  mov rax,[rdi+000000D0]
"gamedll_x64_rwdi.dll"+B484B7: 48 8B 08              -  mov rcx,[rax]
"gamedll_x64_rwdi.dll"+B484BA: 49 8B 04 09           -  mov rax,[r9+rcx]
"gamedll_x64_rwdi.dll"+B484BE: 89 70 14              -  mov [rax+14],esi
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+B484C1: F3 0F 10 40 10        -  movss xmm0,[rax+10]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+B484C6: F3 0F 58 40 0C        -  addss xmm0,[rax+0C]
"gamedll_x64_rwdi.dll"+B484CB: F3 0F 11 40 08        -  movss [rax+08],xmm0
"gamedll_x64_rwdi.dll"+B484D0: EB 28                 -  jmp gamedll_x64_rwdi.dll+B484FA
"gamedll_x64_rwdi.dll"+B484D2: 49 8D 40 01           -  lea rax,[r8+01]
"gamedll_x64_rwdi.dll"+B484D6: 48 3D 87 00 00 00     -  cmp eax,00000087
"gamedll_x64_rwdi.dll"+B484DC: 77 1C                 -  ja gamedll_x64_rwdi.dll+B484FA
"gamedll_x64_rwdi.dll"+B484DE: 48 8B 87 D0 00 00 00  -  mov rax,[rdi+000000D0]
"gamedll_x64_rwdi.dll"+B484E5: 48 8B 08              -  mov rcx,[rax]
"gamedll_x64_rwdi.dll"+B484E8: 4A 8B 14 09           -  mov rdx,[rcx+r9]
"gamedll_x64_rwdi.dll"+B484EC: 0F B6 42 08           -  movzx eax,byte ptr [rdx+08]
}

{

Original cheat, not sure what all the compares are for:

aobscanmodule(playerStats,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+A0B12C)

label(code)
label(return)
label(bypass)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)

newmem:
  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp code

runspeed:
  mov [rax+10],(float)50.0
  jmp bypass

stun:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

throwmelee:
  mov [rax+10],(float)50.0 // default 4.0
  jmp bypass

critical:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

bypass:
  movss xmm0,[rax+10]
  jmp return

code:
  movss xmm0,[rax+10]
  jmp return

playerStats+04:
  jmp newmem
return:
registersymbol(playerStats)

}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>10962</ID>
              <Description>"No description"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>pStats</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10944</ID>
      <Description>"&lt;---------- OTHER ----------&gt;"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2722</ID>
          <Description>"Weapon Cloning (Drop Weapon) Off/On = Alt+A"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game   : DyingLightGame.exe
 // Version:
 // Date   :
 // Author : mgr.inz.Player
 [ENABLE]
 aobscanmodule(aob_cloneWeapon,gamedll_x64_rwdi.dll,7E 1A 8B 55 7F)
 registersymbol(aob_cloneWeapon)

 aob_cloneWeapon:
   db 90 90

 [DISABLE]
 aob_cloneWeapon:
   db 7E 1A

 unregistersymbol(aob_cloneWeapon)

 {
 // ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AA70A4

 "gamedll_x64_rwdi.dll"+AA7079: 44 8B C3                 -  mov r8d,ebx
 "gamedll_x64_rwdi.dll"+AA707C: E8 1F EB BA FF           -  call gamedll_x64_rwdi.dll+655BA0
 "gamedll_x64_rwdi.dll"+AA7081: 4C 8B E0                 -  mov r12,rax
 "gamedll_x64_rwdi.dll"+AA7084: 40 38 75 6F              -  cmp [rbp+6F],sil
 "gamedll_x64_rwdi.dll"+AA7088: 74 79                    -  je gamedll_x64_rwdi.dll+AA7103
 "gamedll_x64_rwdi.dll"+AA708A: 48 8B 54 24 48           -  mov rdx,[rsp+48]
 "gamedll_x64_rwdi.dll"+AA708F: 48 8D 4C 24 48           -  lea rcx,[rsp+48]
 "gamedll_x64_rwdi.dll"+AA7094: FF 92 10 05 00 00        -  call qword ptr [rdx+00000510]
 "gamedll_x64_rwdi.dll"+AA709A: 48 8D 8F 00 09 00 00     -  lea rcx,[rdi+00000900]
 "gamedll_x64_rwdi.dll"+AA70A1: 83 F8 01                 -  cmp eax,01
 // ---------- INJECTING HERE ----------
 "gamedll_x64_rwdi.dll"+AA70A4: 7E 1A                    -  jle gamedll_x64_rwdi.dll+AA70C0
 // ---------- DONE INJECTING  ----------
 "gamedll_x64_rwdi.dll"+AA70A6: 8B 55 7F                 -  mov edx,[rbp+7F]
 "gamedll_x64_rwdi.dll"+AA70A9: 4C 8B 11                 -  mov r10,[rcx]
 "gamedll_x64_rwdi.dll"+AA70AC: 44 8B 45 77              -  mov r8d,[rbp+77]
 "gamedll_x64_rwdi.dll"+AA70B0: 89 54 24 20              -  mov [rsp+20],edx
 "gamedll_x64_rwdi.dll"+AA70B4: 45 8B CE                 -  mov r9d,r14d
 "gamedll_x64_rwdi.dll"+AA70B7: 49 8B D5                 -  mov rdx,r13
 "gamedll_x64_rwdi.dll"+AA70BA: 41 FF 52 78              -  call qword ptr [r10+78]
 "gamedll_x64_rwdi.dll"+AA70BE: EB 10                    -  jmp gamedll_x64_rwdi.dll+AA70D0
 "gamedll_x64_rwdi.dll"+AA70C0: 48 8B 01                 -  mov rax,[rcx]
 "gamedll_x64_rwdi.dll"+AA70C3: 44 8B 4D 7F              -  mov r9d,[rbp+7F]
 "gamedll_x64_rwdi.dll"+AA70C7: 45 8B C6                 -  mov r8d,r14d
 }
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>18</Key>
                <Key>65</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>2665</ID>
          <Description>"Super Jump"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(playerStats,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+A0B12C)

label(code)
label(return)
label(bypass)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)

newmem:
  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp code

runspeed:
  mov [rax+10],(float)50.0
  jmp bypass

stun:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

throwmelee:
  mov [rax+10],(float)50.0 // default 4.0
  jmp bypass

critical:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

bypass:
  movss xmm0,[rax+10]
  jmp return

code:
  movss xmm0,[rax+10]
  jmp return

playerStats+04:
  jmp newmem
return:
registersymbol(playerStats)

[DISABLE]
playerStats+04:
  db F3 0F 10 40 10

unregistersymbol(playerStats)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>332</ID>
          <Description>"Walk Speed 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)15
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)15
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)15
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2110</ID>
          <Description>"Walk Speed 2"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)25
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)25
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)25
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2111</ID>
          <Description>"Walk Speed 3"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)9999
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)9999
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)9999
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2725</ID>
          <Description>"Teleport Preset / Player Location"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2508</ID>
              <Description>"Teleport"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[Enable]

alloc(teleport,1024,engine_x64_rwdi.dll)

label(t_1) //Teleport
aobscanmodule(t_aob1,engine_x64_rwdi.dll,70 F3 41 0F 10 90 BC 00 00 00)
registersymbol(t_aob1)
label(returnhere_t_1)

label(gw_1) //Get Waypoint
aobscanmodule(gw_aob1,gamedll_x64_rwdi.dll,F3 0F 10 83 8C 08 00 00)
registersymbol(gw_aob1)
label(returnhere_gw_1)

label(saveLocation) //Save Location
label(saveLocation_status)
registersymbol(saveLocation_status)
label(saved_X)
registersymbol(saved_X)
label(saved_Z)
registersymbol(saved_Z)
label(saved_Y)
registersymbol(saved_Y)

label(goToSaved) //Go To Saved
label(goToSaved_status)
registersymbol(goToSaved_status)

label(goToWaypoint) //Go To Waypoint
label(goToWaypoint_status)
registersymbol(goToWaypoint_status)

label(waypoint_X)
registersymbol(waypoint_X)
label(waypoint_Y)
registersymbol(waypoint_Y)

label(t_orig) //Original Code

label(t_values) //Holds All Values For This Script
registersymbol(t_values)

//--------------------------------------------------//
teleport:
//--------------------------------------------------//
t_1:
cmp [saveLocation_status],1
je saveLocation
cmp [goToSaved_status],1
je goToSaved
cmp [goToWaypoint_status],1
je goToWaypoint
movss xmm2,[r8+000000BC]
jmp returnhere_t_1
//--------------------------------------------------//
saveLocation:
movss xmm2,[r8+000000BC]
fld [r8+BC]
fstp [saved_X]
fld [r8+C0]
fstp [saved_Z]
fld [r8+C4]
fstp [saved_Y]
mov [saveLocation_status],0
jmp returnhere_t_1

saveLocation_status:
dd 1

saved_X:
dd 0

saved_Z:
dd 0

saved_Y:
dd 0
//--------------------------------------------------//
goToSaved:
movss xmm2,[r8+000000BC]
fld [saved_X]
fstp [r8+BC]
fld [saved_Z]
fstp [r8+C0]
fld [saved_Y]
fstp [r8+C4]
mov [goToSaved_status],0
jmp returnhere_t_1

goToSaved_status:
dd 0
//--------------------------------------------------//
goToWaypoint:
movss xmm2,[r8+000000BC]
fld [waypoint_X]
fstp [r8+BC]
//mov [r8+C0],(float)200 original code
//mov [r8+C0],(float)60
mov [r8+C0],(float)100
fld [waypoint_Y]
fstp [r8+C4]
mov [goToWaypoint_status],0
jmp returnhere_t_1

goToWaypoint_status:
dd 0
//--------------------------------------------------//
t_orig:
movss xmm0,[rbx+00000850]
jmp returnhere_t_1
//--------------------------------------------------//
gw_1:
movss xmm0,[rbx+0000088C]
fld [rbx+88C]
fstp [waypoint_X]
fld [rbx+894]
fstp [waypoint_Y]
jmp returnhere_gw_1

waypoint_X:
dd 0

waypoint_Y:
dd 0
//--------------------------------------------------//
t_values:
dd 1
//--------------------------------------------------//

t_aob1+1:
jmp t_1
nop
nop
nop
nop
returnhere_t_1:

gw_aob1:
jmp gw_1
nop
nop
nop
returnhere_gw_1:

[Disable]

t_aob1+1:
db F3 41 0F 10 90 BC 00 00 00
unregistersymbol(t_aob1)

unregistersymbol(saveLocation_status)
unregistersymbol(saved_X)
unregistersymbol(saved_Z)
unregistersymbol(saved_Y)

unregistersymbol(goToSaved_status)

unregistersymbol(goToWaypoint_status)

gw_aob1:
db F3 0F 10 83 8C 08 00 00
unregistersymbol(gw_aob1)

unregistersymbol(waypoint_X)
unregistersymbol(waypoint_Y)

unregistersymbol(t_values)

dealloc(teleport)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>2509</ID>
                  <Description>"Save Location ( Ctrl+numeric 7 )"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>saveLocation_status</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>17</Key>
                        <Key>103</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>2514</ID>
                  <Description>"Go To Saved ( Ctrl+numeric 8 )"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>goToSaved_status</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>17</Key>
                        <Key>104</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>2518</ID>
                  <Description>"Go To Waypoint ( Ctrl+numeric 9 )"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>goToWaypoint_status</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>17</Key>
                        <Key>105</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>2513</ID>
                  <Description>"See Coordinates"</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" RealAddress="00000000"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2510</ID>
                      <Description>"Saved X"</Description>
                      <VariableType>Float</VariableType>
                      <Address>saved_X</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2511</ID>
                      <Description>"Saved Z"</Description>
                      <VariableType>Float</VariableType>
                      <Address>saved_Z</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2512</ID>
                      <Description>"Saved Y"</Description>
                      <VariableType>Float</VariableType>
                      <Address>saved_Y</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2519</ID>
                      <Description>"Waypoint X"</Description>
                      <VariableType>Float</VariableType>
                      <Address>waypoint_X</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2520</ID>
                      <Description>"Waypoint Y"</Description>
                      <VariableType>Float</VariableType>
                      <Address>waypoint_Y</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>2121</ID>
              <Description>"Player Location Grabber"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
              <LastState/>
              <Color>000000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(aobPlayerLocationGrabber,engine_x64_rwdi.dll,40 53 48 83 EC 40 4C 8B 49 ?? 0F 29 74 24 ?? 48 8B D9)

alloc(newmem,2048,"engine_x64_rwdi.dll"+383ED0)

label(aobPlayerLocationGrabber_r)
registersymbol(aobPlayerLocationGrabber_r)

label(lblPlayerLocationGrabber)
label(lblPlayerLocationGrabberSkip)
label(lblPlayerLocationGrabberRet)

label(pPlayerLocation)
registersymbol(pPlayerLocation)

newmem:

lblPlayerLocationGrabber:
test rcx,rcx
jz short lblPlayerLocationGrabberSkip
cmp dword ptr [rcx+114],64
jne short lblPlayerLocationGrabberSkip
mov qword ptr [pPlayerLocation],rcx
lblPlayerLocationGrabberSkip:
//push rbx
//sub rsp,40
db 40 53 48 83 EC 40
jmp lblPlayerLocationGrabberRet
pPlayerLocation:
dq 0

//"engine_x64_rwdi.dll"+383ED0:
aobPlayerLocationGrabber:
aobPlayerLocationGrabber_r:
jmp lblPlayerLocationGrabber
nop
lblPlayerLocationGrabberRet:

[DISABLE]
aobPlayerLocationGrabber_r:
//"engine_x64_rwdi.dll"+383ED0:
//Alt: push rbx
//Alt: sub rsp,40
db 40 53 48 83 EC 40

unregistersymbol(aobPlayerLocationGrabber_r)

unregistersymbol(pPlayerLocation)

dealloc(newmem)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>2120</ID>
                  <Description>"Player Location"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>0000FF</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>pPlayerLocation</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2726</ID>
                      <Description>"Gas Station = Alt+Q  / The Following SECRET ROOM = Alt+S"</Description>
                      <LastState Value="" RealAddress="00000000"/>
                      <Color>FF0000</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2124</ID>
                      <Description>"Player Location X"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>pPlayerLocation</Address>
                      <Offsets>
                        <Offset>BC</Offset>
                      </Offsets>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>83</Key>
                          </Keys>
                          <Value>51.7703743</Value>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>81</Key>
                          </Keys>
                          <Value>-483.463623</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2125</ID>
                      <Description>"Player Location Z"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>pPlayerLocation</Address>
                      <Offsets>
                        <Offset>C0</Offset>
                      </Offsets>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>83</Key>
                          </Keys>
                          <Value>21.28673553</Value>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>81</Key>
                          </Keys>
                          <Value>49.00283813</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>2126</ID>
                      <Description>"Player Location Y"</Description>
                      <Color>0000FF</Color>
                      <VariableType>Float</VariableType>
                      <Address>pPlayerLocation</Address>
                      <Offsets>
                        <Offset>C4</Offset>
                      </Offsets>
                      <Hotkeys>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>83</Key>
                          </Keys>
                          <Value>-133.0413666</Value>
                          <ID>0</ID>
                        </Hotkey>
                        <Hotkey>
                          <Action>Set Value</Action>
                          <Keys>
                            <Key>18</Key>
                            <Key>81</Key>
                          </Keys>
                          <Value>-880.3660278</Value>
                          <ID>1</ID>
                        </Hotkey>
                      </Hotkeys>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2384</ID>
          <Description>"Challenges / Time Freeze Options "</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2607</ID>
              <Description>"Challenge / The Following Time Freeze"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(ChallengeTimeFreeze,gamedll_x64_rwdi.dll,F3 0F 11 83 F0 00 00 00 48 85)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AD7D1D)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

ChallengeTimeFreeze:
  jmp code
  nop
  nop
  nop
return:
registersymbol(ChallengeTimeFreeze)

[DISABLE]

ChallengeTimeFreeze:
  db F3 0F 11 83 F0 00 00 00

unregistersymbol(ChallengeTimeFreeze)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2294</ID>
              <Description>"Bozak Horde  / Gaining Cradence Time Freeze"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(BozakHorde,gamedll_x64_rwdi.dll,F3 0F 11 40 D8 80)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+3A640B)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

BozakHorde:
  jmp code
return:
registersymbol(BozakHorde)

[DISABLE]

BozakHorde:
  db F3 0F 11 40 D8

unregistersymbol(BozakHorde)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2659</ID>
              <Description>"Challenge CheckPoint Instantly Collect (may have reverse effect on some challenges)"</Description>
              <LastState/>
              <Color>000000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(CheckPoint,gamedll_x64_rwdi.dll,39 43 14 72 1F)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BCB7DE)

label(code)
label(return)

newmem:

code:
  jb gamedll_x64_rwdi.ShutdownGameScriptDLL+BC8CF2
  jmp return

CheckPoint:
  jmp code
return:
registersymbol(CheckPoint)

[DISABLE]

CheckPoint:
  db 39 43 14 72 1F

unregistersymbol(CheckPoint)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2025</ID>
          <Description>"Backpack Editor"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{
The editor is pretty straight forward. Before use, hit the update button. It will
pull your current inventory for that tab. Make your changes and hit apply. If it
errors out for any reason, let me know.
}
aobscanmodule(ItemEditDataAOB,gamedll_x64_rwdi.dll,48 8B 78 60 48 8B D9)
aobscanmodule(BaseItemTableAOB,gamedll_x64_rwdi.dll,8B C8 48 8B 42 E8 4C 8B 04 C8)
alloc(newmem,2048,gamedll_x64_rwdi.dll)
label(ItemEditStart)
label(ItemEditEnd)
label(BaseItemStart)
label(BaseItemEnd)
label(ItemEditData)
registersymbol(ItemEditDataAOB)
registersymbol(BaseItemTableAOB)
registersymbol(ItemEditData)

newmem:

ItemEditStart:
mov [ItemEditData],rax
mov rdi,[rax+60]
mov rbx,rcx
jmp ItemEditEnd

BaseItemStart:
mov [ItemEditData+8],rdx
mov ecx,eax
mov rax,[rdx-18]
jmp BaseItemEnd

ItemEditData:

ItemEditDataAOB:
jmp ItemEditStart
nop
nop
ItemEditEnd:

BaseItemTableAOB:
jmp BaseItemStart
nop
BaseItemEnd:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

ItemEditDataAOB:
db 48 8B 78 60 48 8B D9

BaseItemTableAOB:
db 8B C8 48 8B 42 E8

unregistersymbol(ItemEditDataAOB)
unregistersymbol(BaseItemTableAOB)
unregistersymbol(ItemEditData)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2027</ID>
              <Description>"Show Editor"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
LuaCall(EditorShow())
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
LuaCall(EditorHide())
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2634</ID>
          <Description>"Instant LVL Agility/Power/Legend/Driver/Level Of Trust"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(XP,gamedll_x64_rwdi.dll,39 44 3A 08 76 1A)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AB259B)

label(code)
label(return)

newmem:

code:
  jna gamedll_x64_rwdi.ShutdownGameScriptDLL+AAFAAB
  jmp return

XP:
  jmp code
  nop
return:
registersymbol(XP)

[DISABLE]

XP:
  db 39 44 3A 08 76 1A

unregistersymbol(XP)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10937</ID>
          <Description>"Agility Level (Test Only)"</Description>
          <LastState Value="24" RealAddress="7FFE88293114"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1C23114</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10938</ID>
          <Description>"Power Level (Test Only)"</Description>
          <LastState Value="24" RealAddress="7FFE88293118"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1C23118</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10940</ID>
          <Description>"Legend Level (Test Only)"</Description>
          <LastState Value="250" RealAddress="7FFE88293124"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1C23124</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10939</ID>
          <Description>"Driver Level (Test Only)"</Description>
          <LastState Value="1" RealAddress="7FFE88293128"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1C23128</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2755</ID>
          <Description>"Survivor Rank"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(SurvivorRank,gamedll_x64_rwdi.dll,01 74 11 08 40 84 ED)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+B48106)

label(code)
label(return)

newmem:

code:
  add [rcx+rdx+08],475000
  test bpl,bpl
  jmp return

SurvivorRank:
  jmp code
  nop
  nop
return:
registersymbol(SurvivorRank)

[DISABLE]

SurvivorRank:
  db 01 74 11 08 40 84 ED

unregistersymbol(SurvivorRank)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10936</ID>
          <Description>"Survivor Rank Level (Test Only)"</Description>
          <LastState Value="25" RealAddress="7FFE8829311C"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1C2311C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2319</ID>
          <Description>"Hunter Shoot A Spit Instant Cooldown"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,44 01 6C C7 60)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BF94C9)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

INJECT:
  jmp code
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 44 01 6C C7 60

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2028</ID>
          <Description>"Set FOV"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(setFOV_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(setFOV_aob1,gamedll_x64_rwdi.dll,44 0F 28 D8 FF 50 20 48 8B 4F 50 F3 0F 11 87 B8 00 00 00)
registersymbol(setFOV_aob1)
label(FOV)
registersymbol(FOV)
label(returnhere_setFOV_1)


setFOV_1:
fld [FOV]
fstp [rdi+B8]
jmp returnhere_setFOV_1

FOV:
dd 42280000


setFOV_aob1+B:
jmp setFOV_1
nop
nop
nop
returnhere_setFOV_1:

[Disable]

setFOV_aob1+B:
db F3 0F 11 87 B8 00 00 00
unregistersymbol(setFOV_aob1)
unregistersymbol(FOV)
dealloc(setFOV_1)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2029</ID>
              <Description>"FOV Value (Default Range: 42 - 72)"</Description>
              <VariableType>Float</VariableType>
              <Address>FOV</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>10964</ID>
          <Description>"TEST: INSTANT KILL DOES NO DAMAGE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

Other Cheat changes 'subss xmm1,xmm6' to 'subss xmm1,xmm1', leaving 0 health

-Enable

aobscanmodule(InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(InstantKill)

InstantKill:
db F3 0F 5C C9 F3 41 0F 11 4F 78

-Disable

InstantKill:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(InstantKill)

}

[ENABLE]

aobscanmodule(MINE_InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11 4F 7C) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+213FE5)

label(code)
label(return)

newmem:

code:
  //subss xmm1,xmm1 // was subss xmm1,xmm6, this subtracts current health from current health instead of subtracting damage from current health
  // hmmm...  7C appears to be MAX health, current health at +78
  movss [r15+7C],xmm1
  jmp return

MINE_InstantKill:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(MINE_InstantKill)

[DISABLE]

MINE_InstantKill:
  db F3 0F 5C CE F3 41 0F 11 4F 7C

unregistersymbol(MINE_InstantKill)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+213FE5

"gamedll_x64_rwdi.dll"+213FC1: 76 16                       -  jna gamedll_x64_rwdi.dll+213FD9
"gamedll_x64_rwdi.dll"+213FC3: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213FC6: 83 CA FF                    -  or edx,-01
"gamedll_x64_rwdi.dll"+213FC9: 49 8B CE                    -  mov rcx,r14
"gamedll_x64_rwdi.dll"+213FCC: FF 90 48 01 00 00           -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+213FD2: 0F 28 F0                    -  movaps xmm6,xmm0
"gamedll_x64_rwdi.dll"+213FD5: F3 0F 59 F7                 -  mulss xmm6,xmm7
"gamedll_x64_rwdi.dll"+213FD9: F3 41 0F 10 4F 7C           -  movss xmm1,[r15+7C]
"gamedll_x64_rwdi.dll"+213FDF: 83 CA FF                    -  or edx,-01
"gamedll_x64_rwdi.dll"+213FE2: 49 8B CE                    -  mov rcx,r14
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+213FE5: F3 0F 5C CE                 -  subss xmm1,xmm6
"gamedll_x64_rwdi.dll"+213FE9: F3 41 0F 11 4F 7C           -  movss [r15+7C],xmm1
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+213FEF: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213FF2: FF 90 48 01 00 00           -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+213FF8: F3 41 0F 10 4F 7C           -  movss xmm1,[r15+7C]
"gamedll_x64_rwdi.dll"+213FFE: 41 0F 2F C9                 -  comiss xmm1,xmm9
"gamedll_x64_rwdi.dll"+214002: 73 06                       -  jae gamedll_x64_rwdi.dll+21400A
"gamedll_x64_rwdi.dll"+214004: 45 89 6F 7C                 -  mov [r15+7C],r13d
"gamedll_x64_rwdi.dll"+214008: EB 0B                       -  jmp gamedll_x64_rwdi.dll+214015
"gamedll_x64_rwdi.dll"+21400A: 0F 2F C8                    -  comiss xmm1,xmm0
"gamedll_x64_rwdi.dll"+21400D: 76 06                       -  jna gamedll_x64_rwdi.dll+214015
"gamedll_x64_rwdi.dll"+21400F: F3 41 0F 11 47 7C           -  movss [r15+7C],xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10942</ID>
          <Description>"MINE: Instant Kill"</Description>
          <LastState/>
          <Color>808000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

Other Cheat changes 'subss xmm1,xmm6' to 'subss xmm1,xmm1', leaving 0 health

-Enable

aobscanmodule(InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(InstantKill)

InstantKill:
db F3 0F 5C C9 F3 41 0F 11 4F 78

-Disable

InstantKill:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(InstantKill)

}

[ENABLE]

aobscanmodule(MINE_InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11 4F 7C) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+213FE5)

label(code)
label(return)

newmem:

code:
  subss xmm1,xmm1 // was subss xmm1,xmm6, this subtracts current health from current health instead of subtracting damage from current health
  movss [r15+7C],xmm1 // max health should now be 0
  jmp return

MINE_InstantKill:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(MINE_InstantKill)

[DISABLE]

MINE_InstantKill:
  db F3 0F 5C CE F3 41 0F 11 4F 7C

unregistersymbol(MINE_InstantKill)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+213FE5

"gamedll_x64_rwdi.dll"+213FC1: 76 16                       -  jna gamedll_x64_rwdi.dll+213FD9
"gamedll_x64_rwdi.dll"+213FC3: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213FC6: 83 CA FF                    -  or edx,-01
"gamedll_x64_rwdi.dll"+213FC9: 49 8B CE                    -  mov rcx,r14
"gamedll_x64_rwdi.dll"+213FCC: FF 90 48 01 00 00           -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+213FD2: 0F 28 F0                    -  movaps xmm6,xmm0
"gamedll_x64_rwdi.dll"+213FD5: F3 0F 59 F7                 -  mulss xmm6,xmm7
"gamedll_x64_rwdi.dll"+213FD9: F3 41 0F 10 4F 7C           -  movss xmm1,[r15+7C]
"gamedll_x64_rwdi.dll"+213FDF: 83 CA FF                    -  or edx,-01
"gamedll_x64_rwdi.dll"+213FE2: 49 8B CE                    -  mov rcx,r14
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+213FE5: F3 0F 5C CE                 -  subss xmm1,xmm6
"gamedll_x64_rwdi.dll"+213FE9: F3 41 0F 11 4F 7C           -  movss [r15+7C],xmm1
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+213FEF: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213FF2: FF 90 48 01 00 00           -  call qword ptr [rax+00000148]
"gamedll_x64_rwdi.dll"+213FF8: F3 41 0F 10 4F 7C           -  movss xmm1,[r15+7C]
"gamedll_x64_rwdi.dll"+213FFE: 41 0F 2F C9                 -  comiss xmm1,xmm9
"gamedll_x64_rwdi.dll"+214002: 73 06                       -  jae gamedll_x64_rwdi.dll+21400A
"gamedll_x64_rwdi.dll"+214004: 45 89 6F 7C                 -  mov [r15+7C],r13d
"gamedll_x64_rwdi.dll"+214008: EB 0B                       -  jmp gamedll_x64_rwdi.dll+214015
"gamedll_x64_rwdi.dll"+21400A: 0F 2F C8                    -  comiss xmm1,xmm0
"gamedll_x64_rwdi.dll"+21400D: 76 06                       -  jna gamedll_x64_rwdi.dll+214015
"gamedll_x64_rwdi.dll"+21400F: F3 41 0F 11 47 7C           -  movss [r15+7C],xmm0
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10970</ID>
      <Description>"TEST_NPCHEALTH"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Accesses current NPC (zombie at least) health each frame, even when game is
  paused.
}

[ENABLE]

aobscanmodule(TEST_NPCHEALTH,gamedll_x64_rwdi.dll,F3 0F 10 40 78 48 83 C4 20 5F) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+53FF53)

label(code)
label(return)

newmem:

code:
  movss xmm0,[rax+78]
  jmp return

TEST_NPCHEALTH:
  jmp code
return:
registersymbol(TEST_NPCHEALTH)

[DISABLE]

TEST_NPCHEALTH:
  db F3 0F 10 40 78

unregistersymbol(TEST_NPCHEALTH)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+53FF53

"gamedll_x64_rwdi.dll"+53FF3C: C3                       -  ret 
"gamedll_x64_rwdi.dll"+53FF3D: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+53FF3E: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+53FF3F: CC                       -  int 3 
"gamedll_x64_rwdi.dll"+53FF40: 40 57                    -  push rdi
"gamedll_x64_rwdi.dll"+53FF42: 48 83 EC 20              -  sub rsp,20
"gamedll_x64_rwdi.dll"+53FF46: 48 8B F9                 -  mov rdi,rcx
"gamedll_x64_rwdi.dll"+53FF49: E8 02 98 CF FF           -  call gamedll_x64_rwdi.dll+239750
"gamedll_x64_rwdi.dll"+53FF4E: 48 85 C0                 -  test rax,rax
"gamedll_x64_rwdi.dll"+53FF51: 74 0B                    -  je gamedll_x64_rwdi.dll+53FF5E
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+53FF53: F3 0F 10 40 78           -  movss xmm0,[rax+78]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+53FF58: 48 83 C4 20              -  add rsp,20
"gamedll_x64_rwdi.dll"+53FF5C: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+53FF5D: C3                       -  ret 
"gamedll_x64_rwdi.dll"+53FF5E: 48 89 5C 24 30           -  mov [rsp+30],rbx
"gamedll_x64_rwdi.dll"+53FF63: 48 8B 1F                 -  mov rbx,[rdi]
"gamedll_x64_rwdi.dll"+53FF66: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+53FF69: FF 93 40 01 00 00        -  call qword ptr [rbx+00000140]
"gamedll_x64_rwdi.dll"+53FF6F: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+53FF72: 0F B7 D0                 -  movzx edx,ax
"gamedll_x64_rwdi.dll"+53FF75: 48 8B 83 48 01 00 00     -  mov rax,[rbx+00000148]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10971</ID>
      <Description>"TEST_KILLALL"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  This seems to check npc health each frame.  It compares 0 with NPC health and
  does a conditional jump if 0 &gt; health, so maybe jump will kill npc?

  Yes!  Kills all zombies, not sure about friendlies outside, but doesn't seem
  to affect NPCs in safe zones, at least the tower.
}

[ENABLE]

aobscanmodule(TEST_KILLALL,gamedll_x64_rwdi.dll,0F 2F 76 78 0F 83 A7 00 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+278DBC)

label(code)
label(return)

newmem:

code:
  comiss xmm6,[rsi+78]
  // jae gamedll_x64_rwdi.ShutdownGameScriptDLL+2763ED
  jmp return+A7

TEST_KILLALL:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(TEST_KILLALL)

[DISABLE]

TEST_KILLALL:
  db 0F 2F 76 78 0F 83 A7 00 00 00

unregistersymbol(TEST_KILLALL)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+278DBC

"gamedll_x64_rwdi.dll"+278D97: 0F 2E 73 4C           -  ucomiss xmm6,[rbx+4C]
"gamedll_x64_rwdi.dll"+278D9B: 74 02                 -  je gamedll_x64_rwdi.dll+278D9F
"gamedll_x64_rwdi.dll"+278D9D: 33 DB                 -  xor ebx,ebx
"gamedll_x64_rwdi.dll"+278D9F: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DA2: E8 A9 09 FC FF        -  call gamedll_x64_rwdi.dll+239750
"gamedll_x64_rwdi.dll"+278DA7: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DAA: 48 8B F0              -  mov rsi,rax
"gamedll_x64_rwdi.dll"+278DAD: E8 2E A6 F7 FF        -  call gamedll_x64_rwdi.dll+1F33E0
"gamedll_x64_rwdi.dll"+278DB2: 80 78 79 00           -  cmp byte ptr [rax+79],00
"gamedll_x64_rwdi.dll"+278DB6: 0F 85 B1 00 00 00     -  jne gamedll_x64_rwdi.dll+278E6D
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+278DBC: 0F 2F 76 78           -  comiss xmm6,[rsi+78]
"gamedll_x64_rwdi.dll"+278DC0: 0F 83 A7 00 00 00     -  jae gamedll_x64_rwdi.dll+278E6D
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+278DC6: 48 85 DB              -  test rbx,rbx
"gamedll_x64_rwdi.dll"+278DC9: 74 0D                 -  je gamedll_x64_rwdi.dll+278DD8
"gamedll_x64_rwdi.dll"+278DCB: 0F 2F B3 C8 00 00 00  -  comiss xmm6,[rbx+000000C8]
"gamedll_x64_rwdi.dll"+278DD2: 0F 83 95 00 00 00     -  jae gamedll_x64_rwdi.dll+278E6D
"gamedll_x64_rwdi.dll"+278DD8: 48 8B CF              -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+278DDB: E8 90 36 EC FF        -  call gamedll_x64_rwdi.dll+13C470
"gamedll_x64_rwdi.dll"+278DE0: 8B 88 E8 00 00 00     -  mov ecx,[rax+000000E8]
"gamedll_x64_rwdi.dll"+278DE6: 0F BA E1 0B           -  bt ecx,0B
"gamedll_x64_rwdi.dll"+278DEA: 72 2C                 -  jb gamedll_x64_rwdi.dll+278E18
"gamedll_x64_rwdi.dll"+278DEC: 0F BA E1 0C           -  bt ecx,0C
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10972</ID>
      <Description>"TEST_NPCDAMAGED"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Seems to be called first with health when zombie taking damage.  I think that
  xmm8 has the damage being done (5.0 when kicking in early game) and xmm9
  is 0.  So the little secion of compares and jumps stores max(new hp, 0) in
  [rbp+01C0].
}

[ENABLE]

aobscanmodule(TEST_DAMAGENPC,gamedll_x64_rwdi.dll,F3 41 0F 10 47 78) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+213F62)

label(code)
label(return)

newmem:
  dd (float)0

code:
  //movss xmm0,[r15+78]
  movss xmm0,[newmem]
  jmp return

TEST_DAMAGENPC:
  jmp code
  nop
return:
registersymbol(TEST_DAMAGENPC)

[DISABLE]

TEST_DAMAGENPC:
  db F3 41 0F 10 47 78

unregistersymbol(TEST_DAMAGENPC)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+213F62

"gamedll_x64_rwdi.dll"+213F2A: 44 0F 28 9C 24 20 02 00 00  -  movaps xmm11,[rsp+00000220]
"gamedll_x64_rwdi.dll"+213F33: 4C 8B A4 24 88 02 00 00     -  mov r12,[rsp+00000288]
"gamedll_x64_rwdi.dll"+213F3B: 44 38 AD 10 02 00 00        -  cmp [rbp+00000210],r13l
"gamedll_x64_rwdi.dll"+213F42: 0F 85 F7 01 00 00           -  jne gamedll_x64_rwdi.dll+21413F
"gamedll_x64_rwdi.dll"+213F48: 49 8B 06                    -  mov rax,[r14]
"gamedll_x64_rwdi.dll"+213F4B: 49 8B CE                    -  mov rcx,r14
"gamedll_x64_rwdi.dll"+213F4E: FF 90 88 0B 00 00           -  call qword ptr [rax+00000B88]
"gamedll_x64_rwdi.dll"+213F54: 8B BD E8 01 00 00           -  mov edi,[rbp+000001E8]
"gamedll_x64_rwdi.dll"+213F5A: 84 C0                       -  test al,al
"gamedll_x64_rwdi.dll"+213F5C: 0F 85 B3 00 00 00           -  jne gamedll_x64_rwdi.dll+214015
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+213F62: F3 41 0F 10 47 78           -  movss xmm0,[r15+78]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+213F68: F3 41 0F 5C C0              -  subss xmm0,xmm8
"gamedll_x64_rwdi.dll"+213F6D: 41 0F 2F C1                 -  comiss xmm0,xmm9
"gamedll_x64_rwdi.dll"+213F71: 73 0B                       -  jae gamedll_x64_rwdi.dll+213F7E
"gamedll_x64_rwdi.dll"+213F73: F3 44 0F 11 8D C0 01 00 00  -  movss [rbp+000001C0],xmm9
"gamedll_x64_rwdi.dll"+213F7C: EB 08                       -  jmp gamedll_x64_rwdi.dll+213F86
"gamedll_x64_rwdi.dll"+213F7E: F3 0F 11 85 C0 01 00 00     -  movss [rbp+000001C0],xmm0
"gamedll_x64_rwdi.dll"+213F86: 48 8D 95 C0 01 00 00        -  lea rdx,[rbp+000001C0]
"gamedll_x64_rwdi.dll"+213F8D: 49 8B CF                    -  mov rcx,r15
"gamedll_x64_rwdi.dll"+213F90: E8 9B 09 E3 FF              -  call gamedll_x64_rwdi.dll+44930
"gamedll_x64_rwdi.dll"+213F95: 0F BA E7 08                 -  bt edi,08
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10976</ID>
      <Description>"No Description"</Description>
      <LastState Value="0" RealAddress="14310F084"/>
      <VariableType>Float</VariableType>
      <Address>14310F084</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10978</ID>
      <Description>"Test: Camo Use"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Seems to check some flag after checking player's camo timer, called for each
  zombie in range I think...  If value is 0, at least fast runners won't
  attack.  Camo remaining is at [rsi+14].  However, changing this value to 0
  or camo to 1 when not actually there might cause a crash.
}

[ENABLE]

aobscanmodule(MINE_CamoUse,gamedll_x64_rwdi.dll,8B 83 F0 0B 00 00 83) // should be unique
alloc(newmem,$1000,MINE_CamoUse)

label(code)
label(return)

newmem:

code:
  // trying just return - doesn't work, have to have camo still
  mov eax,1
  mov rbx,[rsp+38]
  add rsp,20
  pop rsi
  ret

// old code trying some stuff
  mov eax,[rbx+00000BF0] // original code
  xor eax,eax
  //mov [rbx+00000BF0],eax
  test rsi,rsi
  jz skip
  mov [rsi+14],(float)10
skip:
  xor al,al
  mov eax,1
  mov rbx,[rsp+38]
  add rsp,20
  pop rsi
  ret
  jmp return

MINE_CamoUse:
  jmp code
  nop
return:
registersymbol(MINE_CamoUse)

[DISABLE]

MINE_CamoUse:
  db 8B 83 F0 0B 00 00

unregistersymbol(MINE_CamoUse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BF1F47

"gamedll_x64_rwdi.dll"+BF1F2C: 32 C0                 -  xor al,al
"gamedll_x64_rwdi.dll"+BF1F2E: 48 8B 5C 24 38        -  mov rbx,[rsp+38]
"gamedll_x64_rwdi.dll"+BF1F33: 48 83 C4 20           -  add rsp,20
"gamedll_x64_rwdi.dll"+BF1F37: 5E                    -  pop rsi
"gamedll_x64_rwdi.dll"+BF1F38: C3                    -  ret 
"gamedll_x64_rwdi.dll"+BF1F39: 0F 57 C0              -  xorps xmm0,xmm0
"gamedll_x64_rwdi.dll"+BF1F3C: 0F 2F 46 14           -  comiss xmm0,[rsi+14] // player camo, compare 0 with it
"gamedll_x64_rwdi.dll"+BF1F40: 73 EA                 -  jae gamedll_x64_rwdi.dll+BF1F2C // jump if player out of camo?  what about negative? - xors al,al and returns (after restoring rbx)
"gamedll_x64_rwdi.dll"+BF1F42: 48 85 DB              -  test rbx,rbx
"gamedll_x64_rwdi.dll"+BF1F45: 74 E5                 -  je gamedll_x64_rwdi.dll+BF1F2C // - xors al,al and returns (after restoring rbx)
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BF1F47: 8B 83 F0 0B 00 00     -  mov eax,[rbx+00000BF0]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BF1F4D: 83 F8 01              -  cmp eax,01
"gamedll_x64_rwdi.dll"+BF1F50: 74 05                 -  je gamedll_x64_rwdi.dll+BF1F57
"gamedll_x64_rwdi.dll"+BF1F52: 83 F8 03              -  cmp eax,03
"gamedll_x64_rwdi.dll"+BF1F55: 75 D5                 -  jne gamedll_x64_rwdi.dll+BF1F2C - xors al,al and returns (after restoring rbx)
"gamedll_x64_rwdi.dll"+BF1F57: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+BF1F5A: 48 89 7C 24 30        -  mov [rsp+30],rdi
"gamedll_x64_rwdi.dll"+BF1F5F: E8 FC B1 44 FF        -  call gamedll_x64_rwdi.dll+3D160
"gamedll_x64_rwdi.dll"+BF1F64: 48 8B F8              -  mov rdi,rax
"gamedll_x64_rwdi.dll"+BF1F67: 48 85 C0              -  test rax,rax
"gamedll_x64_rwdi.dll"+BF1F6A: 74 55                 -  je gamedll_x64_rwdi.dll+BF1FC1
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10979</ID>
      <Description>"No Description"</Description>
      <LastState Value="1" RealAddress="11CF6EE90"/>
      <VariableType>4 Bytes</VariableType>
      <Address>11CF6EE90</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10980</ID>
      <Description>"TEST_Alarm1"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Cool, this single script seems to keep at least normal zombies from becoming
  alarmed.
}

[ENABLE]

aobscanmodule(TEST_Alarm1,gamedll_x64_rwdi.dll,39 81 F0 0B 00 00) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+103BB2)

label(code)
label(return)

newmem:

code:
  mov al,1
  ret

  // original code
  cmp [rcx+00000BF0],eax
  jmp return

TEST_Alarm1:
  jmp code
  nop
return:
registersymbol(TEST_Alarm1)

[DISABLE]

TEST_Alarm1:
  db 39 81 F0 0B 00 00

unregistersymbol(TEST_Alarm1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+103BB2

"gamedll_x64_rwdi.dll"+103BA5: 32 C0                 -  xor al,al
"gamedll_x64_rwdi.dll"+103BA7: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BA8: B0 01                 -  mov al,01
"gamedll_x64_rwdi.dll"+103BAA: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BAB: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAC: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAD: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAE: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BAF: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BB0: 33 C0                 -  xor eax,eax
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+103BB2: 39 81 F0 0B 00 00     -  cmp [rcx+00000BF0],eax
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+103BB8: 0F 94 C0              -  sete al
"gamedll_x64_rwdi.dll"+103BBB: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BBC: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBD: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBE: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BBF: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BC0: 89 91 34 06 00 00     -  mov [rcx+00000634],edx
"gamedll_x64_rwdi.dll"+103BC6: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BC7: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103BC8: CC                    -  int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10981</ID>
      <Description>"TEST_Alarm2"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_Alarm2,gamedll_x64_rwdi.dll,8B 81 F0 0B 00 00 83 F8) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+103B90)

label(code)
label(return)

newmem:

code:
  xor al,al
  ret

// original code
  mov eax,[rcx+00000BF0]
  jmp return

TEST_Alarm2:
  jmp code
  nop
return:
registersymbol(TEST_Alarm2)

[DISABLE]

TEST_Alarm2:
  db 8B 81 F0 0B 00 00

unregistersymbol(TEST_Alarm2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+103B90

"gamedll_x64_rwdi.dll"+103B86: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103B87: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B88: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B89: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8A: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8B: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8C: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8D: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8E: CC                    -  int 3 
"gamedll_x64_rwdi.dll"+103B8F: CC                    -  int 3 
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+103B90: 8B 81 F0 0B 00 00     -  mov eax,[rcx+00000BF0]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+103B96: 83 F8 01              -  cmp eax,01
"gamedll_x64_rwdi.dll"+103B99: 74 0D                 -  je gamedll_x64_rwdi.dll+103BA8
"gamedll_x64_rwdi.dll"+103B9B: 83 F8 02              -  cmp eax,02
"gamedll_x64_rwdi.dll"+103B9E: 74 08                 -  je gamedll_x64_rwdi.dll+103BA8
"gamedll_x64_rwdi.dll"+103BA0: 83 F8 03              -  cmp eax,03
"gamedll_x64_rwdi.dll"+103BA3: 74 03                 -  je gamedll_x64_rwdi.dll+103BA8
"gamedll_x64_rwdi.dll"+103BA5: 32 C0                 -  xor al,al
"gamedll_x64_rwdi.dll"+103BA7: C3                    -  ret 
"gamedll_x64_rwdi.dll"+103BA8: B0 01                 -  mov al,01
"gamedll_x64_rwdi.dll"+103BAA: C3                    -  ret 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10982</ID>
      <Description>"TEST_Alarm3"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  Not sure what to do with this one...
}

[ENABLE]

aobscanmodule(TEST_Alarm3,gamedll_x64_rwdi.dll,8B 87 F0 0B 00 00 83) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+ABCD09)

label(code)
label(return)

newmem:

code:
  mov eax,[rdi+00000BF0]
  jmp return

TEST_Alarm3:
  jmp code
  nop
return:
registersymbol(TEST_Alarm3)

[DISABLE]

TEST_Alarm3:
  db 8B 87 F0 0B 00 00

unregistersymbol(TEST_Alarm3)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+ABCD09

"gamedll_x64_rwdi.dll"+ABCCE4: 48 8B D3                 -  mov rdx,rbx
"gamedll_x64_rwdi.dll"+ABCCE7: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+ABCCEA: E8 51 DF A9 FF           -  call gamedll_x64_rwdi.dll+55AC40
"gamedll_x64_rwdi.dll"+ABCCEF: 84 C0                    -  test al,al
"gamedll_x64_rwdi.dll"+ABCCF1: 0F 84 96 00 00 00        -  je gamedll_x64_rwdi.dll+ABCD8D
"gamedll_x64_rwdi.dll"+ABCCF7: 48 8B 47 28              -  mov rax,[rdi+28]
"gamedll_x64_rwdi.dll"+ABCCFB: 48 8D 4F 28              -  lea rcx,[rdi+28]
"gamedll_x64_rwdi.dll"+ABCCFF: FF 90 88 06 00 00        -  call qword ptr [rax+00000688]
"gamedll_x64_rwdi.dll"+ABCD05: 84 C0                    -  test al,al
"gamedll_x64_rwdi.dll"+ABCD07: 74 5A                    -  je gamedll_x64_rwdi.dll+ABCD63
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+ABCD09: 8B 87 F0 0B 00 00        -  mov eax,[rdi+00000BF0]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+ABCD0F: 83 F8 01                 -  cmp eax,01
"gamedll_x64_rwdi.dll"+ABCD12: 74 05                    -  je gamedll_x64_rwdi.dll+ABCD19
"gamedll_x64_rwdi.dll"+ABCD14: 83 F8 03                 -  cmp eax,03
"gamedll_x64_rwdi.dll"+ABCD17: 75 4A                    -  jne gamedll_x64_rwdi.dll+ABCD63
"gamedll_x64_rwdi.dll"+ABCD19: 48 8B 07                 -  mov rax,[rdi]
"gamedll_x64_rwdi.dll"+ABCD1C: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+ABCD1F: FF 90 F0 08 00 00        -  call qword ptr [rax+000008F0]
"gamedll_x64_rwdi.dll"+ABCD25: 84 C0                    -  test al,al
"gamedll_x64_rwdi.dll"+ABCD27: 74 3A                    -  je gamedll_x64_rwdi.dll+ABCD63
"gamedll_x64_rwdi.dll"+ABCD29: 48 8B 8E 68 13 00 00     -  mov rcx,[rsi+00001368]

gamedll_x64_rwdi.dll+ABCD30 - 48 8B D7              - mov rdx,rdi
gamedll_x64_rwdi.dll+ABCD33 - E8 C8511300           - call gamedll_x64_rwdi.dll+BF1F00
gamedll_x64_rwdi.dll+ABCD38 - 84 C0                 - test al,al
gamedll_x64_rwdi.dll+ABCD3A - 75 51                 - jne gamedll_x64_rwdi.dll+ABCD8D
gamedll_x64_rwdi.dll+ABCD3C - 48 8B 86 50130000     - mov rax,[rsi+00001350]
gamedll_x64_rwdi.dll+ABCD43 - 80 78 40 00           - cmp byte ptr [rax+40],00 ( 0 )
gamedll_x64_rwdi.dll+ABCD47 - 75 44                 - jne gamedll_x64_rwdi.dll+ABCD8D
gamedll_x64_rwdi.dll+ABCD49 - 48 8D 4E 28           - lea rcx,[rsi+28]
gamedll_x64_rwdi.dll+ABCD4D - FF 15 9D148700        - call qword ptr [gamedll_x64_rwdi.dll+132E1F0] ) -&gt;engine_x64_rwdi.dll+2493F0 )
gamedll_x64_rwdi.dll+ABCD53 - 48 8B 88 E8090000     - mov rcx,[rax+000009E8]
gamedll_x64_rwdi.dll+ABCD5A - 80 B9 94010000 00     - cmp byte ptr [rcx+00000194],00 ( 0 )
gamedll_x64_rwdi.dll+ABCD61 - 75 2A                 - jne gamedll_x64_rwdi.dll+ABCD8D
gamedll_x64_rwdi.dll+ABCD63 - 48 8B 05 AE701601     - mov rax,[gamedll_x64_rwdi.dll+1C23E18] ( [03867050] )
gamedll_x64_rwdi.dll+ABCD6A - 48 8B 88 380B0000     - mov rcx,[rax+00000B38]
gamedll_x64_rwdi.dll+ABCD71 - 48 85 C9              - test rcx,rcx
gamedll_x64_rwdi.dll+ABCD74 - 74 1B                 - je gamedll_x64_rwdi.dll+ABCD91
gamedll_x64_rwdi.dll+ABCD76 - 48 8B 49 60           - mov rcx,[rcx+60]
gamedll_x64_rwdi.dll+ABCD7A - 48 85 C9              - test rcx,rcx
gamedll_x64_rwdi.dll+ABCD7D - 74 12                 - je gamedll_x64_rwdi.dll+ABCD91
gamedll_x64_rwdi.dll+ABCD7F - E8 5C441000           - call gamedll_x64_rwdi.dll+BC11E0
gamedll_x64_rwdi.dll+ABCD84 - 84 C0                 - test al,al
gamedll_x64_rwdi.dll+ABCD86 - 0F94 C0               - sete al
gamedll_x64_rwdi.dll+ABCD89 - 84 C0                 - test al,al
gamedll_x64_rwdi.dll+ABCD8B - 75 04                 - jne gamedll_x64_rwdi.dll+ABCD91
gamedll_x64_rwdi.dll+ABCD8D - B0 01                 - mov al,01 ( 1 )
gamedll_x64_rwdi.dll+ABCD8F - EB 02                 - jmp gamedll_x64_rwdi.dll+ABCD93
gamedll_x64_rwdi.dll+ABCD91 - 32 C0                 - xor al,al
gamedll_x64_rwdi.dll+ABCD93 - 4C 8B 6C 24 60        - mov r13,[rsp+60]
gamedll_x64_rwdi.dll+ABCD98 - 48 8B 5C 24 50        - mov rbx,[rsp+50]
gamedll_x64_rwdi.dll+ABCD9D - 48 8B 6C 24 58        - mov rbp,[rsp+58]
gamedll_x64_rwdi.dll+ABCDA2 - 48 83 C4 30           - add rsp,30 ( 48 )
gamedll_x64_rwdi.dll+ABCDA6 - 41 5C                 - pop r12
gamedll_x64_rwdi.dll+ABCDA8 - 5F                    - pop rdi
gamedll_x64_rwdi.dll+ABCDA9 - 5E                    - pop rsi
gamedll_x64_rwdi.dll+ABCDAA - C3                    - ret

}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10983</ID>
      <Description>"TEST_Alarm4"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-12
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_Alarm4,gamedll_x64_rwdi.dll,8B 83 F0 0B 00 00 83) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BF1F47)

label(code)
label(return)

newmem:

code:
  xor al,al
  mov rbx,[rsp+38]
  add rsp,20
  pop rsi
  ret

  // original code
  mov eax,[rbx+00000BF0]
  jmp return

TEST_Alarm4:
  jmp code
  nop
return:
registersymbol(TEST_Alarm4)

[DISABLE]

TEST_Alarm4:
  db 8B 83 F0 0B 00 00

unregistersymbol(TEST_Alarm4)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+BF1F47

"gamedll_x64_rwdi.dll"+BF1F2C: 32 C0                 -  xor al,al
"gamedll_x64_rwdi.dll"+BF1F2E: 48 8B 5C 24 38        -  mov rbx,[rsp+38]
"gamedll_x64_rwdi.dll"+BF1F33: 48 83 C4 20           -  add rsp,20
"gamedll_x64_rwdi.dll"+BF1F37: 5E                    -  pop rsi
"gamedll_x64_rwdi.dll"+BF1F38: C3                    -  ret 
"gamedll_x64_rwdi.dll"+BF1F39: 0F 57 C0              -  xorps xmm0,xmm0
"gamedll_x64_rwdi.dll"+BF1F3C: 0F 2F 46 14           -  comiss xmm0,[rsi+14]
"gamedll_x64_rwdi.dll"+BF1F40: 73 EA                 -  jae gamedll_x64_rwdi.dll+BF1F2C
"gamedll_x64_rwdi.dll"+BF1F42: 48 85 DB              -  test rbx,rbx
"gamedll_x64_rwdi.dll"+BF1F45: 74 E5                 -  je gamedll_x64_rwdi.dll+BF1F2C
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+BF1F47: 8B 83 F0 0B 00 00     -  mov eax,[rbx+00000BF0]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+BF1F4D: 83 F8 01              -  cmp eax,01 // normal zombie?
"gamedll_x64_rwdi.dll"+BF1F50: 74 05                 -  je gamedll_x64_rwdi.dll+BF1F57
"gamedll_x64_rwdi.dll"+BF1F52: 83 F8 03              -  cmp eax,03 // fast zombie?
"gamedll_x64_rwdi.dll"+BF1F55: 75 D5                 -  jne gamedll_x64_rwdi.dll+BF1F2C
"gamedll_x64_rwdi.dll"+BF1F57: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+BF1F5A: 48 89 7C 24 30        -  mov [rsp+30],rdi
"gamedll_x64_rwdi.dll"+BF1F5F: E8 FC B1 44 FF        -  call gamedll_x64_rwdi.dll+3D160
"gamedll_x64_rwdi.dll"+BF1F64: 48 8B F8              -  mov rdi,rax
"gamedll_x64_rwdi.dll"+BF1F67: 48 85 C0              -  test rax,rax
"gamedll_x64_rwdi.dll"+BF1F6A: 74 55                 -  je gamedll_x64_rwdi.dll+BF1FC1
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of movss [rbx+00000954],xmm0</Description>
      <Address>7FF9FF8583F7</Address>
      <ModuleName>gamedll_x64_rwdi.dll</ModuleName>
      <ModuleNameOffset>AB83F7</ModuleNameOffset>
      <Before>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>54</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>84</Byte>
        <Byte>F6</Byte>
        <Byte>74</Byte>
        <Byte>15</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>EasyLockAOB</Name>
      <Address>7FEDE2655D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>teleport_aob1</Name>
      <Address>7FEDF07DF22</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_aob1</Name>
      <Address>7FEDC42A8EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_X</Name>
      <Address>7FEDECF0179</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_Z</Name>
      <Address>7FEDECF017D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_Y</Name>
      <Address>7FEDECF0181</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Z</Name>
      <Address>7FEDECF019D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>VacData</Name>
      <Address>7FEDDED0106</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EnemyPosAOB</Name>
      <Address>7FEDE2A37B9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>PlayerPosAOB</Name>
      <Address>7FEDE27DF22</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TimePoint</Name>
      <Address>7FEDCB2002A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TODAOB</Name>
      <Address>7FEDD22FFD7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfGrapAOB</Name>
      <Address>7FEDCA0E659</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CurItemAOB</Name>
      <Address>7FEE075B71A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HunterXP</Name>
      <Address>7FF9169F6674</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>XP</Name>
      <Address>7FFB3466C4CB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>SurvivorRank3</Name>
      <Address>7FFC03261388</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Cash</Name>
      <Address>7FFC03A578B3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Time_of_Day_Adjuster_ret</Name>
      <Address>7FFC03204C77</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CarFire</Name>
      <Address>7FFC03E04381</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aob_cloneWeapon</Name>
      <Address>7FFC03919324</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>t_aob1</Name>
      <Address>7FFC02676AD1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gw_aob1</Name>
      <Address>7FFC02E70520</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saveLocation_status</Name>
      <Address>7FFC02230086</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_X</Name>
      <Address>7FFC0223008A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Z</Name>
      <Address>7FFC0223008E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Y</Name>
      <Address>7FFC02230092</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>goToSaved_status</Name>
      <Address>7FFC022300DE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>goToWaypoint_status</Name>
      <Address>7FFC02230128</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_X</Name>
      <Address>7FFC02230170</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Y</Name>
      <Address>7FFC02230174</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>t_values</Name>
      <Address>7FFC02230178</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobPlayerLocationGrabber_r</Name>
      <Address>7FFC02624080</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayerLocation</Name>
      <Address>7FFC02220029</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CheckPoint</Name>
      <Address>7FFC03A45EEE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>test</Name>
      <Address>45590000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InstantKill</Name>
      <Address> 7FFE81B73F62</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pStats</Name>
      <Address>7FFE81830000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_SuperJump</Name>
      <Address> 7FFE824A84BD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteHealth</Name>
      <Address> 7FFE871283F7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteStamina1</Name>
      <Address> 7FFE87275109</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteStamina2</Name>
      <Address> 7FFE87266E6F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_FreeBlueprintRequirements1</Name>
      <Address> 7FFE86956595</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_FreeBlueprintRequirements2</Name>
      <Address> 7FFE8695606E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_WeaponDurability</Name>
      <Address> 7FFE86CBF998</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteAmmo1</Name>
      <Address> 7FFE87330955</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteAmmo2</Name>
      <Address> 7FFE87258932</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteThrowablesAndUpgrades</Name>
      <Address> 7FFE8725956B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteGrapplingHook</Name>
      <Address> 7FFE8730D6DA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InstantHoldActions</Name>
      <Address> 7FFE87492503</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_WeaponsInSafeZones</Name>
      <Address> 7FFE8715B594</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InstantCooldownFlares</Name>
      <Address> 7FFE8720D8F9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_Timer2</Name>
      <Address> 7FFE86AFF5D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ChallengeMaxTime</Name>
      <Address>7FFE85FA0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_XP</Name>
      <Address> 7FFE86A61365</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pXP</Name>
      <Address>7FFE85F90000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_NoDetection</Name>
      <Address> 7FFE86773BB2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedCamouflage</Name>
      <Address> 7FFE87261DA7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteCraftingItems</Name>
      <Address> 7FFE8725945F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MINE_InfiniteUVFlashlight</Name>
      <Address> 7FFE8720D835</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Most code (and these comments) from:
http://www.cheatengine.org/forum/viewtopic.php?p=5678347
http://forum.cheatengine.org/viewtopic.php?t=579307


Dying Light the following Enhanced Edition cheat table Steam v1.11.2
Thanks/Credits to: 
all credit goes to akumakuja28 for Time of Day (thank you) 
all credit goes to mgr.inz.Player for Weapon Cloning (thank you) 
all credit goes to Matze500 for Weapons In Save Zone (thank you) 
------------------------- 
3/24/2016 
added: Survivor Rank 
------------------------- 
------------------------- 
4/24/2016 
added: Unlimited Gas 
------------------------- 
--------------- 
4/26/2016 
added: Cash 
--------------- 
------------------------------------ 
4/26/2016 
added: Instant Cooldown Flares 
------------------------------------ 
--------------------------------------------------------------------------------- 
4/26/2016 
added: Weapon Cloning: all credit goes to mgr.inz.Player (thank you) 
--------------------------------------------------------------------------------- 
Windows 10 Steam v1.11.2 
File Features Include: 
Infinite Health 
Instant LVL Agility/Power/Legend/Driver/Level Of Trust 
Instant Kill 
Infinite Stamina 
Super Jump 
Infinite Crafting Items 
Unlimited Potion Duration 
Free Blueprint Requirements 
Indestructible Weapons 
Weapons In Save Zone 
Infinite Ammo 
Infinite Throwables / Weapon Upgrades 
Infinite UV Flashlight 
Easy Lock Picking 
Unlimited Camouflage 
Grappling Hook Instant Cooldown 
Car Flamethrower Instant Cooldown 
Infinite Nitro 
The Button Instant Cooldown 
Instant "Hold" Actions 
Walk Speed 
Challenge Time Freeze / Bozak Horde / The Following / Gaining Cradence 
Challenge CheckPoint Instantly Collect 
Set FOV 
Teleport Preset / Player Location 
Hunter Shoot A Spit Instant Cooldown 
Instant Cooldown Flares 
Survivor Rank 
Time Of Day 
Cash 
Unlimited Gas 
Weapon Cloning
----------------------------------------------
Simple "Weapon Cloning" (guns and melee). 
 1. activate the below script 
 2. drop weapon 
 3. you should have weapon clone on the ground and original in backpack. 
 4. if you have upgraded and modified weapons, cloned weapon will also be upgraded&amp;modified 
----------------------------------------------
Teleport Coordinance
----------------------------------------------
Eye Of The Sun Entrance
X -669.9390869
Z 228.220459
Y 832.5141602
----------------------------------------------
</Comments>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
    for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
    end
    end

    function LBItemListSelectionChange(sender, user)
    if sender.ItemIndex == -1 then return end
    local Item = ItemTable[sender.ItemIndex+1]
    local Quant = readInteger(Item.Address+0x40)
    PackEdit_EItemQuant.text = Quant
    local ItemTypeIndex = 0
    for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
    end
    PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
    end

    function BItemApplyClick(sender)
    if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
    if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
    local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
    local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
    local Quant = tonumber(PackEdit_EItemQuant.text)
    writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
    writeInteger(Item.Address+0x40,Quant)
    BItemUpdateClick()
    end

    function EditorShow()
    ItemTable = {}
    WeaponTable = {}
    BaseItemTable = {}
    PackEdit.show()
    end

    function EditorHide()
    PackEdit.close()
    end

    function myattach(timer)
    if getProcessIDFromProcessName("DyingLightGame.exe") ~= nil then
    object_destroy(timer)
    openProcess("DyingLightGame.exe")
    end
    end

    t=createTimer(nil);
    timer_setInterval(t,10)
    timer_onTimer(t,myattach)

    AddressList = getAddressList()

        --Compact mode
    controlMainForm = getMainForm()
    control_setVisible(wincontrol_getControl(controlMainForm,0), false)
    control_setVisible(wincontrol_getControl(controlMainForm,2), false)
    control_setVisible(wincontrol_getControl(controlMainForm,3), false)
    --end


    --Disable header sorting and dragging
    AddressListTreeview = component_getComponent(AddressList,0)
    AddressListHeader   = component_getComponent(AddressList,1)

    setMethodProperty(AddressListHeader  ,"OnSectionClick",nil)
    setMethodProperty(AddressListTreeview,"OnDragOver"    ,nil)
    setMethodProperty(AddressListTreeview,"OnDragDrop"    ,nil)
    setMethodProperty(AddressListTreeview,"OnEndDrag"     ,nil)
    --end


    --show main window
    ShowMainWindowTimer = createTimer(nil,false)
    timer_setInterval(ShowMainWindowTimer, 1)
    timer_onTimer(ShowMainWindowTimer, function (sender)
    object_destroy(sender)
    control_setVisible(controlMainForm,true) -- set visible
    form_setMenu(controlMainForm,nil)        -- hide menu
    end)
    timer_setEnabled(ShowMainWindowTimer, true)
    --end



    controlMainForm = getMainForm()
    --Rename Main Form
    control_setCaption(controlMainForm,"Dying Light the following Enhanced Edition Steam v1.11.2 Community Cheat Table")




  
</LuaScript>
</CheatTable>
