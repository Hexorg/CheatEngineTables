<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"godmode"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
luacall(if (setGod==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setGod(1.0) end)

[disable]
luacall(if (setGod==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setGod(0.0) end)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>97</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"invisibility"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
luacall(if (setInvis==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInvis(1.0) end)

[disable]
luacall(if (setInvis==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInvis(0.0) end)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>98</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"inf instinct"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
luacall(if (setInstinct1==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct1(0.0) end)
luacall(if (setInstinct2==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct2(0.0) end)
luacall(if (setInstinct3==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct3(0.0) end)
luacall(if (setInstinct4==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct4(0.0) end)
luacall(if (setInstinct5==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct5(0.0) end)
luacall(if (setInstinct6==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct6(0.0) end)
luacall(if (setInstinct7==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct7(0.0) end)

[disable]
luacall(if (setInstinct1==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct1(-1.0) end)
luacall(if (setInstinct2==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct2(-1.0) end)
luacall(if (setInstinct3==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct3(-1.0) end)
luacall(if (setInstinct4==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct4(-1.0) end)
luacall(if (setInstinct5==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct5(-1.0) end)
luacall(if (setInstinct6==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct6(-1.0) end)
luacall(if (setInstinct7==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinct7(-1.0) end)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>99</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"instinct regen"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
luacall(if (setInstinctRegen1==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinctRegen1(1.0) end)
luacall(if (setInstinctRegen2==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinctRegen2(1.0) end)

[disable]
luacall(if (setInstinctRegen1==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinctRegen1(-1.0) end)
luacall(if (setInstinctRegen2==nil) then messageDialog('Execute the lua script first', mtError, mbOK) error('Execute the lua script first') else setInstinctRegen2(-1.0) end)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>100</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :fcomp qword ptr [edi-0B]</Description>
      <Address>011DAB48</Address>
      <ModuleName>HMA.exe</ModuleName>
      <ModuleNameOffset>DDAB48</ModuleNameOffset>
      <Before>
        <Byte>40</Byte>
        <Byte>35</Byte>
        <Byte>FA</Byte>
        <Byte>8E</Byte>
        <Byte>3C</Byte>
      </Before>
      <Actual>
        <Byte>DC</Byte>
        <Byte>5F</Byte>
        <Byte>F5</Byte>
      </Actual>
      <After>
        <Byte>00</Byte>
        <Byte>1C</Byte>
        <Byte>AE</Byte>
        <Byte>F5</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>local cvar=0x011DAB48
while (cvar~=0) do
  local cvarname=readString(readInteger(cvar+4))
  print(cvarname.." : "..readFloat(cvar+12 ))
  cvar=readInteger(cvar+8)
end
HMA.NMP::Vector&lt;int&gt;::numElements+BF10 - 55                      - push ebp
HMA.NMP::Vector&lt;int&gt;::numElements+BF11 - 8B EC                   - mov ebp,esp
HMA.NMP::Vector&lt;int&gt;::numElements+BF13 - 53                      - push ebx
HMA.NMP::Vector&lt;int&gt;::numElements+BF14 - BB 01000000             - mov ebx,00000001
HMA.NMP::Vector&lt;int&gt;::numElements+BF19 - 56                      - push esi
HMA.NMP::Vector&lt;int&gt;::numElements+BF1A - 84 1D 5CBD2501          - test [HMA.NMP::FreeListManager::m_heapAllocator+11BCFC],bl
HMA.NMP::Vector&lt;int&gt;::numElements+BF20 - 75 1D                   - jne HMA.NMP::Vector&lt;int&gt;::numElements+BF3F
HMA.NMP::Vector&lt;int&gt;::numElements+BF22 - 09 1D 5CBD2501          - or [HMA.NMP::FreeListManager::m_heapAllocator+11BCFC],ebx
HMA.NMP::Vector&lt;int&gt;::numElements+BF28 - B9 40BD2501             - mov ecx,HMA.NMP::FreeListManager::m_heapAllocator+11BCE0
HMA.NMP::Vector&lt;int&gt;::numElements+BF2D - E8 1E560000             - call HMA.NMP::Vector&lt;int&gt;::numElements+11550
HMA.NMP::Vector&lt;int&gt;::numElements+BF32 - 68 606BEF00             - push HMA.NMP::Quat::setXYZW+EDC50
HMA.NMP::Vector&lt;int&gt;::numElements+BF37 - E8 E31F6A00             - call HMA.NMP::Quat::setXYZW+7AB1F
HMA.NMP::Vector&lt;int&gt;::numElements+BF3C - 83 C4 04                - add esp,04
HMA.NMP::Vector&lt;int&gt;::numElements+BF3F - B9 40BD2501             - mov ecx,HMA.NMP::FreeListManager::m_heapAllocator+11BCE0
HMA.NMP::Vector&lt;int&gt;::numElements+BF44 - E8 17560000             - call HMA.NMP::Vector&lt;int&gt;::numElements+11560
HMA.NMP::Vector&lt;int&gt;::numElements+BF49 - 84 1D 3CBD2501          - test [HMA.NMP::FreeListManager::m_heapAllocator+11BCDC],bl
HMA.NMP::Vector&lt;int&gt;::numElements+BF4F - 75 10                   - jne HMA.NMP::Vector&lt;int&gt;::numElements+BF61
HMA.NMP::Vector&lt;int&gt;::numElements+BF51 - 09 1D 3CBD2501          - or [HMA.NMP::FreeListManager::m_heapAllocator+11BCDC],ebx
HMA.NMP::Vector&lt;int&gt;::numElements+BF57 - C7 05 38B52501 00000000 - mov [HMA.NMP::FreeListManager::m_heapAllocator+11B4D8],00000000
HMA.NMP::Vector&lt;int&gt;::numElements+BF61 - 8B 45 08                - mov eax,[ebp+08]
HMA.NMP::Vector&lt;int&gt;::numElements+BF64 - 50                      - push eax
HMA.NMP::Vector&lt;int&gt;::numElements+BF65 - B9 38B52501             - mov ecx,HMA.NMP::FreeListManager::m_heapAllocator+11B4D8
HMA.NMP::Vector&lt;int&gt;::numElements+BF6A - E8 31FFFFFF             - call HMA.NMP::Vector&lt;int&gt;::numElements+BEA0
HMA.NMP::Vector&lt;int&gt;::numElements+BF6F - 8B F0                   - mov esi,eax
HMA.NMP::Vector&lt;int&gt;::numElements+BF71 - 84 1D 5CBD2501          - test [HMA.NMP::FreeListManager::m_heapAllocator+11BCFC],bl
HMA.NMP::Vector&lt;int&gt;::numElements+BF77 - 75 1D                   - jne HMA.NMP::Vector&lt;int&gt;::numElements+BF96
HMA.NMP::Vector&lt;int&gt;::numElements+BF79 - 09 1D 5CBD2501          - or [HMA.NMP::FreeListManager::m_heapAllocator+11BCFC],ebx
HMA.NMP::Vector&lt;int&gt;::numElements+BF7F - B9 40BD2501             - mov ecx,HMA.NMP::FreeListManager::m_heapAllocator+11BCE0
HMA.NMP::Vector&lt;int&gt;::numElements+BF84 - E8 C7550000             - call HMA.NMP::Vector&lt;int&gt;::numElements+11550
HMA.NMP::Vector&lt;int&gt;::numElements+BF89 - 68 606BEF00             - push HMA.NMP::Quat::setXYZW+EDC50
HMA.NMP::Vector&lt;int&gt;::numElements+BF8E - E8 8C1F6A00             - call HMA.NMP::Quat::setXYZW+7AB1F
HMA.NMP::Vector&lt;int&gt;::numElements+BF93 - 83 C4 04                - add esp,04
HMA.NMP::Vector&lt;int&gt;::numElements+BF96 - B9 40BD2501             - mov ecx,HMA.NMP::FreeListManager::m_heapAllocator+11BCE0
HMA.NMP::Vector&lt;int&gt;::numElements+BF9B - E8 E0550000             - call HMA.NMP::Vector&lt;int&gt;::numElements+11580
HMA.NMP::Vector&lt;int&gt;::numElements+BFA0 - 8B C6                   - mov eax,esi
HMA.NMP::Vector&lt;int&gt;::numElements+BFA2 - 5E                      - pop esi
HMA.NMP::Vector&lt;int&gt;::numElements+BFA3 - 5B                      - pop ebx
HMA.NMP::Vector&lt;int&gt;::numElements+BFA4 - 5D                      - pop ebp
HMA.NMP::Vector&lt;int&gt;::numElements+BFA5 - C3                      - ret 
</Comments>
  <LuaScript>function setGod(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='God' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInvis(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='Invisible' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct1(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='HM_InstrictUseBurnRate' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct2(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='HM_BlendInBurnRate' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct3(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='HM_BlendInPostFee' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct4(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='SB_TimeAB' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct5(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='SB_BurnRateB' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct6(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='SB_BurnRateA' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinct7(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='SB_PostFee' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinctRegen1(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='HM_InstrictRegenCap' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end

function setInstinctRegen2(state)
  local cvar=0x011DAB48

  while (cvar~=0) do
    local cvarname=readString(readInteger(cvar+4))
    if cvarname=='HM_InstrictRegenRate' then
      writeFloat(cvar+12,state)
    end

    cvar=readInteger(cvar+8)
  end
end
</LuaScript>
</CheatTable>
