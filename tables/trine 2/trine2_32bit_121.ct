<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Inf. Health (AOB)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(pCHHealth)
registersymbol(pCHHealth)
aobscan(CHHSub_AOB,8B 8D 70 FE FF FF 8B 55 EC 89 91 BC 01 00 00)
label(CHHSub_jmp)
registersymbol(CHHSub_jmp)

newmem:
mov [pCHHealth],ecx
cmp eax,0
je originalcode
cmp dword ptr [ecx+000001BC],edx
jle originalcode
//cmp edx,0
//jne originalcode
mov edx,[ecx+000001B8]
sub edx,1
//mov edx,[ecx+000001BC]

originalcode:
mov [ecx+000001BC],edx

exit:
jmp returnhere

///
pCHHealth:
dd 0
///

CHHSub_AOB+9:         //"trine2_32bit.exe"+6FB505:
CHHSub_jmp:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
CHHSub_jmp:           //"trine2_32bit.exe"+6FB505:
db 89 91 BC 01 00 00
//Alt: mov [ecx+000001BC],edx
unregistersymbol(pCHHealth)
unregistersymbol(CHHSub_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Health of Hero using"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pCHHealth</Address>
          <Offsets>
            <Offset>1BC</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Inf. Stealth, press R to cancel (AOB)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(cancelStealth)
label(exit)
aobscan(SBS_AOB,8B 4D F4 F3 0F 10 45 08 F3 0F 11 81 68 01 00 00)
label(SBS_jmp)
registersymbol(SBS_jmp)

newmem:
pushad
push 'R'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStealth
push eax
mov eax,[ecx+0000016C]
mov dword ptr [ecx+00000168],eax
pop eax
jmp exit

cancelStealth:
mov dword ptr [ecx+00000168],(float)0
jmp exit

exit:
jmp returnhere

SBS_AOB+8:    //"trine2_32bit.exe"+77F1EC:
SBS_jmp:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
SBS_jmp:       //"trine2_32bit.exe"+77F1EC:
db F3 0F 11 81 68 01 00 00
//Alt: movss [ecx+00000168],xmm0
unregistersymbol(SBS_jmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"set Max Blocks/Planks (AOB)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(maxBlocks)
registersymbol(maxBlocks)
aobscan(MBPA_aob,5D C2 04 00 CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 88 00 01 00 00 8B 55 08 89 0A 8B 45 08 8B E5 5D C2 04 00 CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 FC 00 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 F8 00 00 00 8B E5 5D C3 CC)
label(MBPA_jmp)
registersymbol(MBPA_jmp)

newmem:
push ebx
mov ebx,[maxBlocks]
mov dword ptr [eax+000000F8],ebx
pop ebx

originalcode:
mov eax,[eax+000000F8]

exit:
jmp returnhere

///
maxBlocks:
dd #16
///

MBPA_aob+50:   //"trine2_32bit.exe"+B4E10A:
MBPA_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
MBPA_jmp:     //"trine2_32bit.exe"+B4E10A:
db 8B 80 F8 00 00 00
//Alt: mov eax,[eax+000000F8]
unregistersymbol(maxBlocks)
unregistersymbol(MBPA_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>31</ID>
          <Description>"max Blocks/Planks"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>maxBlocks</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"get Skill Points (AOB)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(pSkillPts)
registersymbol(pSkillPts)
aobscan(SPA_aob,E5 5D C2 08 00 CC 55 8B EC 51 89 4D FC 8B 45 FC 05 54 01 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8A 80 0C 01 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 05 08 01 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 04 01 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 00 01 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 FC 00 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8B 80 F8 00 00 00 8B E5 5D C3 CC CC CC CC CC CC CC CC CC CC CC CC 55 8B EC 51 89 4D FC 8B 45 FC 8A 80 F4 00 00 00)
label(SPA_jmp)
registersymbol(SPA_jmp)

newmem:
mov [pSkillPts],eax

originalcode:
mov eax,[eax+000000F8]

exit:
jmp returnhere

///
pSkillPts:
dd 0
///

SPA_aob+D0:   //"trine2_32bit.exe"+BA60DA:
SPA_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
SPA_jmp:      //"trine2_32bit.exe"+BA60DA:
mov eax,[eax+000000F8]
//Alt: db 8B 80 F8 00 00 00
unregistersymbol(pSkillPts)
unregistersymbol(SPA_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>22</ID>
          <Description>"Skill Points, Ctrl + to set 10, Ctrl - to set 0"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSkillPts</Address>
          <Offsets>
            <Offset>F8</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>107</Key>
              </Keys>
              <Value>10</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>34</ID>
      <Description>"--------------------------------- 1.06 only ---------------------------------"</Description>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Inf. Health"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(pCHHealth)
registersymbol(pCHHealth)

newmem:
mov [pCHHealth],ecx
cmp eax,0
je originalcode
cmp dword ptr [ecx+000001BC],edx
jle originalcode
//cmp edx,0
//jne originalcode
mov edx,[ecx+000001B8]
sub edx,1
//mov edx,[ecx+000001BC]

originalcode:
mov [ecx+000001BC],edx

exit:
jmp returnhere

///
pCHHealth:
dd 0
///

"trine2_32bit.exe"+6FB505:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"trine2_32bit.exe"+6FB505:
db 89 91 BC 01 00 00
//Alt: mov [ecx+000001BC],edx
unregistersymbol(pCHHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Health of Hero using"</Description>
          <Color>808080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pCHHealth</Address>
          <Offsets>
            <Offset>1BC</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Inf. Stealth, press R to cancel"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(cancelStealth)
label(exit)

newmem:
pushad
push 'R'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStealth
push eax
mov eax,[ecx+0000016C]
mov dword ptr [ecx+00000168],eax
pop eax
jmp exit

cancelStealth:
mov dword ptr [ecx+00000168],(float)0
jmp exit

exit:
jmp returnhere

"trine2_32bit.exe"+77F1EC:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"trine2_32bit.exe"+77F1EC:
db F3 0F 11 81 68 01 00 00
//Alt: movss [ecx+00000168],xmm0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>36</ID>
      <Description>"set Max Blocks/Planks"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(maxBlocks)
registersymbol(maxBlocks)

newmem:
push ebx
mov ebx,[maxBlocks]
mov dword ptr [eax+000000F8],ebx
pop ebx

originalcode:
mov eax,[eax+000000F8]

exit:
jmp returnhere

///
maxBlocks:
dd #16
///

"trine2_32bit.exe"+B4E10A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"trine2_32bit.exe"+B4E10A:
db 8B 80 F8 00 00 00
//Alt: mov eax,[eax+000000F8]
unregistersymbol(maxBlocks)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>37</ID>
          <Description>"max Blocks/Planks"</Description>
          <Color>808080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>maxBlocks</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>38</ID>
      <Description>"get Skill Points"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)
label(exit)
label(pSkillPts)
registersymbol(pSkillPts)

newmem:
mov [pSkillPts],eax

originalcode:
mov eax,[eax+000000F8]

exit:
jmp returnhere

///
pSkillPts:
dd 0
///

"trine2_32bit.exe"+BA60DA:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"trine2_32bit.exe"+BA60DA:
mov eax,[eax+000000F8]
//Alt: db 8B 80 F8 00 00 00
unregistersymbol(pSkillPts)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Skill Points, Ctrl + to set 10, Ctrl - to set 0"</Description>
          <Color>808080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSkillPts</Address>
          <Offsets>
            <Offset>F8</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>107</Key>
              </Keys>
              <Value>10</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>skill pts access (skill menu opening) Code :mov eax,[eax+000000F8]</Description>
      <Address>00FA60DA</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>BA60DA</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>normal health access (only?) Code :mov eax,[eax+000001BC]</Description>
      <Address>00AF8B5A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6F8B5A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health access before +- Code :mov edx,[ecx+000001BC]</Description>
      <Address>00AFB41C</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB41C</ModuleNameOffset>
      <Before>
        <Byte>8D</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>91</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>55</Byte>
        <Byte>F0</Byte>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health +- Code :mov [ecx+000001BC],edx</Description>
      <Address>00AFB505</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB505</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>EC</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>91</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health access after +- Code :mov eax,[edx+000001BC]</Description>
      <Address>00AFB553</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB553</ModuleNameOffset>
      <Before>
        <Byte>95</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>82</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>45</Byte>
        <Byte>BC</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>bar onscreen write Code :movss [eax+00000290],xmm0</Description>
      <Address>00DD5A1F</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>9D5A1F</ModuleNameOffset>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>90</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>bar onscreen access (when NOT full) Code :fld dword ptr [ecx]</Description>
      <Address>00DD5B28</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>9D5B28</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>F0</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>A2</Byte>
        <Byte>94</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stealth - Code :movss [ecx+00000168],xmm0</Description>
      <Address>00B7F1EC</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>77F1EC</ModuleNameOffset>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>68</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>F4</Byte>
        <Byte>81</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>max blocks/planks access when using Code :mov eax,[eax+000000F8]</Description>
      <Address>00F4E10A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>B4E10A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
