<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>1500</ID>
      <Description>"Inventory "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : ROTTR.exe
  Version: 
  Date   : 2016-02-01
  Author : Akumakuja

  This script does inventory mapping
}

//  STEP 1   STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1

//n   STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1  STEP 1


{               All these numbers need to be converted to Hex before compare
                         Use windows Calculator or google



3827729073:Byzantine Coins -- E42682B1
4011968730:Antlers

1596518693:Hide    --        -- 5F28F125

1596491239:Herbs   --  -- 5F2885E7
1300392505:Cloth    --            --  4D826A39
516527174:Hard Wood
273513695:Bear Hide
1860591193:Mushrooms
73319806:Salvage
2432172444:Feathers
1358162264:Magnesite Ore
1439296855:Technical Parts

I am missing   oil       chromite ore and boar fat

your smart you can figure out where to find them

}





[ENABLE]


aobscanmodule(Lara_Item_Tracking_ret,ROTTR.exe,0F B7 40 0C C3 31) // should be unique
alloc(newmem,$1000,"ROTTR.exe"+3518D67)

// STEP 2 STEP2 STEP2 STEP2 STEP2 STEP2 vSTEP2 STEP2 STEP2 STEP2 STEP2 STEP2 STEP2
// STEP 2 STEP2 STEP2 STEP2 STEP2 STEP2 vSTEP2 STEP2 STEP2 STEP2 STEP2 STEP2 STEP2



alloc(Cloth_inv,8)                   // alloc makes memory [Description of memory, Value of new memory] always 8 for aob pointers in 64bit
registersymbol(Cloth_inv)            // Registerssymbol so it can be found everywhere

alloc(Herbs_inv,8)
registersymbol(Herbs_inv)            // Each item will need an Alloc, Unique Name and Symbol Register

alloc(Hide_inv,8)                      // Easy so far your just basically building a structure
registersymbol(Hide_inv)                 // to dump the processors value into to

alloc(Coins_inv,8)
registersymbol(Coins_inv,8)
// Make sure to use _inv after you create or it will fuck up the label process NO Spaces ANYWHERE EVER




//// STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3
//// STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3  STep 3

label(code)


label(Cloth)         // Each item will need a label
label(Herbs)           // We use this label to Track the JUMPing
label(Hide)
label(Coins)







label(originalcode)          // the originalcode
label(return)                    // The return back to the game code after injection




newmem:                      // This needs to be here for the purpose that cheat engine hates everyone

code:                             // ALL new Code Starts here
pushf        // This technical explain at a different time

    cmp  rcx,4D826A39                // This is checking the ID for cloth
     je Cloth                          // je stands for jump if Equal
    cmp  rcx,5F2885E7       // Herbs ID
     je Herbs
    cmp  rcx,5F28F125       // Hide  ID
     je Hide
    cmp  rcx,E42682B1       // Coins ID - Calculated with Calculator

     jmp originalcode       // This is here to finish the compare group


//Jumping to labels section below



Cloth:           // Are first jump location      // All locations End in with this character :
   mov [Cloth_inv],Rax               // Creating a Base adress for Cloth
    jmp originalcode                    // finishing CPU cycle

Herbs:
   mov [Herbs_inv],rax             //   use brackets [ ] to define
    jmp originalcode

Hide:
   mov [Hide_inv],rax                 // Rinse and repeat for all compare values
     jmp originalcode

Coins:
   mov [Coins_inv],rcx
     jmp originalcode


originalcode:
  popf                          // Poping flags   more technical shit
  movzx eax,word ptr [rax+0C]
  ret
  jmp return

Lara_Item_Tracking_ret:
  jmp code
return:
registersymbol(Lara_Item_Tracking_ret)

[DISABLE]

Lara_Item_Tracking_ret:
  db 0F B7 40 0C C3

unregistersymbol(Lara_Item_Tracking_ret)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR.exe"+3518D67

"ROTTR.exe"+3518D4C: 48 8B 04 D0                       -  mov rax,[rax+rdx*8]
"ROTTR.exe"+3518D50: 48 85 C0                          -  test rax,rax
"ROTTR.exe"+3518D53: 74 17                             -  je ROTTR.exe+3518D6C
"ROTTR.exe"+3518D55: 39 48 08                          -  cmp [rax+08],ecx
"ROTTR.exe"+3518D58: 74 08                             -  je ROTTR.exe+3518D62
"ROTTR.exe"+3518D5A: 48 8B 00                          -  mov rax,[rax]
"ROTTR.exe"+3518D5D: 48 85 C0                          -  test rax,rax
"ROTTR.exe"+3518D60: 75 F3                             -  jne ROTTR.exe+3518D55
"ROTTR.exe"+3518D62: 48 85 C0                          -  test rax,rax
"ROTTR.exe"+3518D65: 74 05                             -  je ROTTR.exe+3518D6C
// ---------- INJECTING HERE ----------
"ROTTR.exe"+3518D67: 0F B7 40 0C                       -  movzx eax,word ptr [rax+0C]
"ROTTR.exe"+3518D6B: C3                                -  ret 
// ---------- DONE INJECTING  ----------
"ROTTR.exe"+3518D6C: 31 C0                             -  xor eax,eax
"ROTTR.exe"+3518D6E: C3                                -  ret 
"ROTTR.exe"+3518D6F: CC                                -  int 3 
"ROTTR.exe"+3518D70: 53                                -  push rbx
"ROTTR.exe"+3518D71: 48 83 EC 20                       -  sub rsp,20
"ROTTR.exe"+3518D75: 8B 99 C8 03 00 00                 -  mov ebx,[rcx+000003C8]
"ROTTR.exe"+3518D7B: E8 E0 0F 3A 00                    -  call ROTTR.exe+38B9D60
"ROTTR.exe"+3518D80: 89 DA                             -  mov edx,ebx
"ROTTR.exe"+3518D82: 48 89 C1                          -  mov rcx,rax
"ROTTR.exe"+3518D85: 48 83 C4 20                       -  add rsp,20
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1506</ID>
          <Description>"                                 Enter Resource Menu To Update if Value is     ??"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <Color>B829D1</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>1502</ID>
          <Description>"Common"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1501</ID>
              <Description>"Cloth"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>Cloth_inv</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1505</ID>
              <Description>"Herbs"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>Herbs_inv</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1504</ID>
              <Description>"Hide"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>Hide_inv</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1503</ID>
          <Description>"Exotic"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1507</ID>
      <Description>"NOTES    about making symbol  pointers ------------------------------ &gt;            "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

{//This is just the notes section



You can not make pointers until you have made the script on and the new base adress eg.(Cloth_Inv)







These are aob pointers

Good luck man}
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Lara_Item_Tracking_ret</Name>
      <Address>143518D67</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
