<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>171</ID>
      <Description>"Retrieve Pointers"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(player,FF E0 A1 * * * * 80 78)
label(player_ptr)
player+3:
player_ptr:
registersymbol(player)
registersymbol(player_ptr)

[DISABLE]
unregistersymbol(player)
unregistersymbol(player_ptr)

{
// ORIGINAL CODE - INJECTION POINT: 0E3B6A5B

0E3B6A2D: 0F 85 1D FB FF FF     -  jne 0E3B6550
0E3B6A33: C7 45 E4 00 00 00 00  -  mov [ebp-1C],00000000
0E3B6A3A: C7 45 E8 FC 00 00 00  -  mov [ebp-18],000000FC
0E3B6A41: 68 D4 6E 3B 0E        -  push 0E3B6ED4
0E3B6A46: EB 00                 -  jmp 0E3B6A48
0E3B6A48: 8D 8D 08 FF FF FF     -  lea ecx,[ebp-000000F8]
0E3B6A4E: BA F4 D1 78 03        -  mov edx,0378D1F4
0E3B6A53: E8 F8 5F FC 61        -  call mscorlib.ni.dll+3ACA50
0E3B6A58: 58                    -  pop eax
0E3B6A59: FF E0                 -  jmp eax
// ---------- INJECTING HERE ----------
0E3B6A5B: A1 04 37 8F 04        -  mov eax,[048F3704]
// ---------- DONE INJECTING  ----------
0E3B6A60: 80 78 74 00           -  cmp byte ptr [eax+74],00
0E3B6A64: 0F 85 DD 05 00 00     -  jne 0E3B7047
0E3B6A6A: 8B 0D 04 37 8F 04     -  mov ecx,[048F3704]
0E3B6A70: 39 09                 -  cmp [ecx],ecx
0E3B6A72: FF 15 F0 14 0C 08     -  call dword ptr [080C14F0]
0E3B6A78: 85 C0                 -  test eax,eax
0E3B6A7A: 0F 85 C7 05 00 00     -  jne 0E3B7047
0E3B6A80: A1 F8 36 8F 04        -  mov eax,[048F36F8]
0E3B6A85: 89 85 9C F0 FF FF     -  mov [ebp-00000F64],eax
0E3B6A8B: 8B 0D 04 37 8F 04     -  mov ecx,[048F3704]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>87</ID>
          <Description>"Player Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>player_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>5</ID>
                  <Description>"Current Health"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+29c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>8</ID>
                  <Description>"Maximum Health"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+2a0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>6</ID>
                  <Description>"Current Stamina"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+230</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>10</ID>
                  <Description>"Maximum Stamina"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+228</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>38</ID>
                  <Description>"Move Speed"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>7</ID>
                  <Description>"Money"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+258</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>167</ID>
                  <Description>"Club Coins"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+25c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>40</ID>
                  <Description>"Glow Rate"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>42</ID>
                  <Description>"Is Glowing"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+6c</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>79</ID>
          <Description>"Experience Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>78</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>player_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>CC</Offset>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>80</ID>
                  <Description>"Farming"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>81</ID>
                  <Description>"Fishing"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>82</ID>
                  <Description>"Foraging"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>83</ID>
                  <Description>"Mining"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+14</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>84</ID>
                  <Description>"Combat"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>85</ID>
                  <Description>"Luck???"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+1c</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>134</ID>
          <Description>"Skill Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>135</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>player_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>136</ID>
                  <Description>"Skill Points"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+20c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>137</ID>
                  <Description>"Bonus Farming"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+210</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>138</ID>
                  <Description>"Bonus Mining"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+214</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>139</ID>
                  <Description>"Bonus Combat"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+218</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>140</ID>
                  <Description>"Bonus Foraging"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+21c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>141</ID>
                  <Description>"Bonus Fishing"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+220</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>142</ID>
                  <Description>"Bonus Luck"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+224</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"Upgrade Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>89</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>player_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>96</ID>
                  <Description>"Days Left for Tool Upgrade"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+268</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>100</ID>
                  <Description>"Days Left for House Upgrade"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+278</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>101</ID>
                  <Description>"Crafting Time"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+290</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>102</ID>
                  <Description>"House Upgrade Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+274</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>103</ID>
                  <Description>"Coop Upgrade Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+27c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>107</ID>
                  <Description>"Barn Upgrade Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+280</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>111</ID>
      <Description>"Unlimited Stamina"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(stamina,DE E1 D8 6D 94)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fstp st(0)
  fstp st(0)
  fldz
  fsubr dword ptr [ebp-6C]
  jmp return

stamina:
  jmp code
return:
registersymbol(stamina)

[DISABLE]
stamina:
  db DE E1 D8 6D 94
unregistersymbol(stamina)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0789D630

0789D5F3: 89 85 9C FE FF FF     -  mov [ebp-00000164],eax
0789D5F9: DB 85 9C FE FF FF     -  fild dword ptr [ebp-00000164]
0789D5FF: D9 9D 9C FE FF FF     -  fstp dword ptr [ebp-00000164]
0789D605: D9 85 9C FE FF FF     -  fld dword ptr [ebp-00000164]
0789D60B: D8 0D D8 EB 89 07     -  fmul dword ptr [0789EBD8]
0789D611: 8D 04 5D 02 00 00 00  -  lea eax,[ebx*2+00000002]
0789D618: 89 85 9C FE FF FF     -  mov [ebp-00000164],eax
0789D61E: DB 85 9C FE FF FF     -  fild dword ptr [ebp-00000164]
0789D624: D9 9D 9C FE FF FF     -  fstp dword ptr [ebp-00000164]
0789D62A: D9 85 9C FE FF FF     -  fld dword ptr [ebp-00000164]
// ---------- INJECTING HERE ----------
0789D630: DE E1                 -  fsubrp st(1),st(0)
0789D632: D8 6D 94              -  fsubr dword ptr [ebp-6C]
// ---------- DONE INJECTING  ----------
0789D635: 83 EC 04              -  sub esp,04
0789D638: D9 1C 24              -  fstp dword ptr [esp]
0789D63B: 8B CA                 -  mov ecx,edx
0789D63D: E8 B6 39 77 05        -  call 0D010FF8
0789D642: 8B C6                 -  mov eax,esi
0789D644: 8B 0D F4 53 30 01     -  mov ecx,[013053F4]
0789D64A: 99                    -  cdq 
0789D64B: F7 F9                 -  idiv ecx
0789D64D: 89 45 F0              -  mov [ebp-10],eax
0789D650: 8B 45 10              -  mov eax,[ebp+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>209</ID>
      <Description>"Unlimited Items"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(items,EB * 8B C7 89 46 * 5E 5F 5D C3)
alloc(newmem,$1000)

label(items_save)
label(return)

newmem:
  db 8B 7E
  readmem(items+6,1)
  cmp eax,edi
  jg items_save
  mov eax,edi
items_save:
  readmem(items+4,3)
  pop esi
  pop edi
  jmp return

items+4:
  jmp newmem
return:
registersymbol(items)
registersymbol(items_save)

[DISABLE]
items+4:
  db 89 46 3C 5E 5F
unregistersymbol(items)
unregistersymbol(items_save)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0FFD1283

0FFD126D: EB 02                 -  jmp 0FFD1271
0FFD126F: 33 FF                 -  xor edi,edi
0FFD1271: 8B CE                 -  mov ecx,esi
0FFD1273: 8B 01                 -  mov eax,[ecx]
0FFD1275: 8B 40 28              -  mov eax,[eax+28]
0FFD1278: FF 50 14              -  call dword ptr [eax+14]
0FFD127B: 3B F8                 -  cmp edi,eax
0FFD127D: 7E 02                 -  jle 0FFD1281
0FFD127F: EB 02                 -  jmp 0FFD1283
0FFD1281: 8B C7                 -  mov eax,edi
// ---------- INJECTING HERE ----------
0FFD1283: 89 46 3C              -  mov [esi+3C],eax
0FFD1286: 5E                    -  pop esi
0FFD1287: 5F                    -  pop edi
// ---------- DONE INJECTING  ----------
0FFD1288: 5D                    -  pop ebp
0FFD1289: C3                    -  ret 
0FFD128A: 00 00                 -  add [eax],al
0FFD128C: 00 00                 -  add [eax],al
0FFD128E: 00 00                 -  add [eax],al
0FFD1290: D8 2B                 -  fsubr dword ptr [ebx]
0FFD1292: B4 0F                 -  mov ah,0F
0FFD1294: 00 00                 -  add [eax],al
0FFD1296: 00 00                 -  add [eax],al
0FFD1298: CC                    -  int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>71</ID>
      <Description>"Unlimited Watering Can"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(usage,29 42 38 8B 45 08)
usage:
  db 90 90 90
registersymbol(usage)

[DISABLE]
usage:
  db 29 42 38
unregistersymbol(usage)

{
// ORIGINAL CODE - INJECTION POINT: 0C9F3250

0C9F3228: 0F 85 D9 FD FF FF     -  jne 0C9F3007
0C9F322E: C7 45 E4 00 00 00 00  -  mov [ebp-1C],00000000
0C9F3235: C7 45 E8 FC 00 00 00  -  mov [ebp-18],000000FC
0C9F323C: 68 08 33 9F 0C        -  push 0C9F3308
0C9F3241: EB 00                 -  jmp 0C9F3243
0C9F3243: 58                    -  pop eax
0C9F3244: FF E0                 -  jmp eax
0C9F3246: 8B 45 0C              -  mov eax,[ebp+0C]
0C9F3249: 40                    -  inc eax
0C9F324A: 8B 95 F8 FE FF FF     -  mov edx,[ebp-00000108]
// ---------- INJECTING HERE ----------
0C9F3250: 29 42 38              -  sub [edx+38],eax
0C9F3253: 8B 45 08              -  mov eax,[ebp+08]
// ---------- DONE INJECTING  ----------
0C9F3256: 3A 40 7C              -  cmp al,[eax+7C]
0C9F3259: 8D 40 7C              -  lea eax,[eax+7C]
0C9F325C: D9 00                 -  fld dword ptr [eax]
0C9F325E: A1 F4 53 DE 00        -  mov eax,[00DE53F4]
0C9F3263: D1 F8                 -  sar eax,1
0C9F3265: 79 03                 -  jns 0C9F326A
0C9F3267: 83 D0 00              -  adc eax,00
0C9F326A: 89 85 E8 FE FF FF     -  mov [ebp-00000118],eax
0C9F3270: DB 85 E8 FE FF FF     -  fild dword ptr [ebp-00000118]
0C9F3276: D9 9D E8 FE FF FF     -  fstp dword ptr [ebp-00000118]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>205</ID>
      <Description>"Instant Harvest"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(harvest,8B 58 1C 8B 85 44 FB FF FF)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ebx,[eax+C]
  mov ebx,[ebx+C]
  dec ebx
  mov [eax+1C],ebx
  mov eax,[ebp-000004BC]
  jmp return

harvest:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(harvest)

[DISABLE]
harvest:
  db 8B 58 1C 8B 85 44 FB FF FF
unregistersymbol(harvest)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 07C02C4C

07C02C1C: D9 45 10           -  fld dword ptr [ebp+10]
07C02C1F: DB 05 F4 53 D5 00  -  fild dword ptr [00D553F4]
07C02C25: D9 9D 10 FB FF FF  -  fstp dword ptr [ebp-000004F0]
07C02C2B: D9 85 10 FB FF FF  -  fld dword ptr [ebp-000004F0]
07C02C31: DE C9              -  fmulp st(1),st(0)
07C02C33: DD 5D DC           -  fstp qword ptr [ebp-24]
07C02C36: 8B 85 48 FB FF FF  -  mov eax,[ebp-000004B8]
07C02C3C: 80 78 46 00        -  cmp byte ptr [eax+46],00
07C02C40: 0F 85 BA 00 00 00  -  jne 07C02D00
07C02C46: 8B 85 48 FB FF FF  -  mov eax,[ebp-000004B8]
// ---------- INJECTING HERE ----------
07C02C4C: 8B 58 1C           -  mov ebx,[eax+1C]
07C02C4F: 8B 85 44 FB FF FF  -  mov eax,[ebp-000004BC]
// ---------- DONE INJECTING  ----------
07C02C55: 89 85 40 FB FF FF  -  mov [ebp-000004C0],eax
07C02C5B: 8B 85 3C FB FF FF  -  mov eax,[ebp-000004C4]
07C02C61: 89 85 3C FB FF FF  -  mov [ebp-000004C4],eax
07C02C67: 8D 7D E4           -  lea edi,[ebp-1C]
07C02C6A: 8D 75 E4           -  lea esi,[ebp-1C]
07C02C6D: F3 0F 7E 06        -  movq xmm0,[esi]
07C02C71: 66 0F D6 07        -  movq [edi],xmm0
07C02C75: F3 0F 7E 46 08     -  movq xmm0,[esi+08]
07C02C7A: 66 0F D6 47 08     -  movq [edi+08],xmm0
07C02C7F: DD 45 DC           -  fld qword ptr [ebp-24]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>292</ID>
      <Description>"Instant Fruit Tree Growth"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(fruit_tree_growth,8B D9 83 7B 14 04)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov dword ptr [ecx+14],04
  mov ebx,ecx
  cmp dword ptr [ebx+14],04
  jmp return

fruit_tree_growth:
  jmp code
  nop
return:
registersymbol(fruit_tree_growth)

[DISABLE]
fruit_tree_growth:
  db 8B D9 83 7B 14 04
unregistersymbol(fruit_tree_growth)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 00D3006D

00D3004C: 56                 -  push esi
00D3004D: 53                 -  push ebx
00D3004E: 81 EC 34 06 00 00  -  sub esp,00000634
00D30054: 8B F1              -  mov esi,ecx
00D30056: 8D BD FC F9 FF FF  -  lea edi,[ebp-00000604]
00D3005C: B9 7D 01 00 00     -  mov ecx,0000017D
00D30061: 33 C0              -  xor eax,eax
00D30063: F3 AB              - repe  stosd 
00D30065: 8B CE              -  mov ecx,esi
00D30067: 89 95 F8 F9 FF FF  -  mov [ebp-00000608],edx
// ---------- INJECTING HERE ----------
00D3006D: 8B D9              -  mov ebx,ecx
00D3006F: 83 7B 14 04        -  cmp dword ptr [ebx+14],04
// ---------- DONE INJECTING  ----------
00D30073: 0F 8D E4 04 00 00  -  jnl 00D3055D
00D30079: DD 05 E8 1E D3 00  -  fld qword ptr [00D31EE8]
00D3007F: 83 EC 08           -  sub esp,08
00D30082: DD 1C 24           -  fstp qword ptr [esp]
00D30085: DB 05 1C 54 F6 00  -  fild dword ptr [00F6541C]
00D3008B: 83 EC 08           -  sub esp,08
00D3008E: DD 1C 24           -  fstp qword ptr [esp]
00D30091: D9 45 08           -  fld dword ptr [ebp+08]
00D30094: D8 0D F0 1E D3 00  -  fmul dword ptr [00D31EF0]
00D3009A: DD 9D C0 F9 FF FF  -  fstp qword ptr [ebp-00000640]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>295</ID>
      <Description>"Unlimited Fruit on Tree"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(fruit_on_tree,8B 45 C4 3B 43 24 0F 8D)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+24],4
  mov eax,[ebp-3C]
  cmp eax,[ebx+24]
  jmp return

fruit_on_tree:
  jmp code
  nop
return:
registersymbol(fruit_on_tree)

[DISABLE]

fruit_on_tree:
  db 8B 45 C4 3B 43 24

unregistersymbol(fruit_on_tree)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0FE31FC6

0FE31FA4: D9 1C 24              -  fstp dword ptr [esp]
0FE31FA7: 51                    -  push ecx
0FE31FA8: DD 85 E4 FC FF FF     -  fld qword ptr [ebp-0000031C]
0FE31FAE: 83 EC 04              -  sub esp,04
0FE31FB1: D9 1C 24              -  fstp dword ptr [esp]
0FE31FB4: 8B 8D E0 F9 FF FF     -  mov ecx,[ebp-00000620]
0FE31FBA: 39 09                 -  cmp [ecx],ecx
0FE31FBC: E8 87 17 C9 2F        -  call 3FAC3748
0FE31FC1: 33 D2                 -  xor edx,edx
0FE31FC3: 89 55 C4              -  mov [ebp-3C],edx
// ---------- INJECTING HERE ----------
0FE31FC6: 8B 45 C4              -  mov eax,[ebp-3C]
0FE31FC9: 3B 43 24              -  cmp eax,[ebx+24]
// ---------- DONE INJECTING  ----------
0FE31FCC: 0F 8D F9 07 00 00     -  jnl 0FE327CB
0FE31FD2: 8B 45 C4              -  mov eax,[ebp-3C]
0FE31FD5: 83 F8 03              -  cmp eax,03
0FE31FD8: 0F 83 DE 07 00 00     -  jae 0FE327BC
0FE31FDE: FF 24 85 F4 2A E3 0F  -  jmp dword ptr [eax*4+0FE32AF4]
0FE31FE5: 8D BD 28 FC FF FF     -  lea edi,[ebp-000003D8]
0FE31FEB: 0F 57 C0              -  xorps xmm0,xmm0
0FE31FEE: 66 0F D6 07           -  movq [edi],xmm0
0FE31FF2: A1 1C 37 A8 04        -  mov eax,[04A8371C]
0FE31FF7: 89 85 D4 F9 FF FF     -  mov [ebp-0000062C],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>214</ID>
      <Description>"Instant Tree Growth"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(tree,8B D9 83 7B 14 05 0F)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ebx,ecx
  mov dword ptr [ebx+14],05
  cmp dword ptr [ebx+14],05
  jmp return

tree:
  jmp code
  nop
return:
registersymbol(tree)

[DISABLE]
tree:
  db 8B D9 83 7B 14 05
unregistersymbol(tree)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0865006D

08650046: AF                    -  scasd 
08650047: 0F 55 8B EC 57 56 53  -  andnps xmm1,[ebx+535657EC]
0865004E: 81 EC 0C 06 00 00     -  sub esp,0000060C
08650054: 8B F1                 -  mov esi,ecx
08650056: 8D BD 38 FA FF FF     -  lea edi,[ebp-000005C8]
0865005C: B9 6E 01 00 00        -  mov ecx,0000016E
08650061: 33 C0                 -  xor eax,eax
08650063: F3 AB                 - repe  stosd 
08650065: 8B CE                 -  mov ecx,esi
08650067: 89 95 34 FA FF FF     -  mov [ebp-000005CC],edx
// ---------- INJECTING HERE ----------
0865006D: 8B D9                 -  mov ebx,ecx
0865006F: 83 7B 14 05           -  cmp dword ptr [ebx+14],05
// ---------- DONE INJECTING  ----------
08650073: 0F 8D 1E 08 00 00     -  jnl 08650897
08650079: 8D 4D D0              -  lea ecx,[ebp-30]
0865007C: E8 4F 43 44 04        -  call 0CA943D0
08650081: 8B 43 14              -  mov eax,[ebx+14]
08650084: 89 45 CC              -  mov [ebp-34],eax
08650087: 83 F8 03              -  cmp eax,03
0865008A: 73 5F                 -  jae 086500EB
0865008C: FF 24 85 18 1B 65 08  -  jmp dword ptr [eax*4+08651B18]
08650093: C7 45 D0 20 00 00 00  -  mov [ebp-30],00000020
0865009A: C7 45 D4 80 00 00 00  -  mov [ebp-2C],00000080
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>211</ID>
      <Description>"Set Run Speed"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(run,D9 5D * D9 45 * 8D 65 F4 5B 5E 5F 5D C3)
alloc(newmem,$1000)

label(code)
label(return)
label(run_var)

newmem:

code:
  fstp st(0)
  fld [run_var]
  lea esp,[ebp-0C]
  pop ebx
  pop esi
  jmp return

run_var:
  dd (float)10

run+06:
  jmp code
return:
registersymbol(run)
registersymbol(run_var)

[DISABLE]
run+06:
  db 8D 65 F4 5B 5E
unregistersymbol(run)
unregistersymbol(run_var)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0E3AB34D

0E3AB330: 79 03              -  jns 0E3AB335
0E3AB332: 83 D0 00           -  adc eax,00
0E3AB335: 83 F8 01           -  cmp eax,01
0E3AB338: 7E 02              -  jle 0E3AB33C
0E3AB33A: EB 05              -  jmp 0E3AB341
0E3AB33C: B8 01 00 00 00     -  mov eax,00000001
0E3AB341: 89 45 E8           -  mov [ebp-18],eax
0E3AB344: DB 45 E8           -  fild dword ptr [ebp-18]
0E3AB347: D9 5D E8           -  fstp dword ptr [ebp-18]
0E3AB34A: D9 45 E8           -  fld dword ptr [ebp-18]
// ---------- INJECTING HERE ----------
0E3AB34D: 8D 65 F4           -  lea esp,[ebp-0C]
0E3AB350: 5B                 -  pop ebx
0E3AB351: 5E                 -  pop esi
// ---------- DONE INJECTING  ----------
0E3AB352: 5F                 -  pop edi
0E3AB353: 5D                 -  pop ebp
0E3AB354: C3                 -  ret 
0E3AB355: CC                 -  int 3 
0E3AB356: CC                 -  int 3 
0E3AB357: CC                 -  int 3 
0E3AB358: CC                 -  int 3 
0E3AB359: CC                 -  int 3 
0E3AB35A: CC                 -  int 3 
0E3AB35B: CC                 -  int 3 
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>212</ID>
          <Description>"Run Speed"</Description>
          <LastState Value="10" RealAddress="0DED0012"/>
          <VariableType>Float</VariableType>
          <Address>run_var</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>202</ID>
      <Description>"Last Crop Walked Over"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(crop,8B FA 83 7E 04 00 0F 84 * * * * 8B 46)
alloc(newmem,$1000)

label(code)
label(return)
label(crop_ptr)

newmem:

code:
  mov [crop_ptr],esi
  mov edi,edx
  cmp dword ptr [esi+04],00
  jmp return

crop_ptr:
  dd 0

crop:
  jmp code
  nop
return:
registersymbol(crop)
registersymbol(crop_ptr)

[DISABLE]
crop:
  db 8B FA 83 7E 04 00
unregistersymbol(crop)
unregistersymbol(crop_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 07C2E0CB

07C2E0BC: 94                 -  xchg eax,esp
07C2E0BD: 9F                 -  lahf 
07C2E0BE: 7D 0E              -  jnl 07C2E0CE
07C2E0C0: 55                 -  push ebp
07C2E0C1: 8B EC              -  mov ebp,esp
07C2E0C3: 57                 -  push edi
07C2E0C4: 56                 -  push esi
07C2E0C5: 53                 -  push ebx
07C2E0C6: 83 EC 40           -  sub esp,40
07C2E0C9: 8B F1              -  mov esi,ecx
// ---------- INJECTING HERE ----------
07C2E0CB: 8B FA              -  mov edi,edx
07C2E0CD: 83 7E 04 00        -  cmp dword ptr [esi+04],00
// ---------- DONE INJECTING  ----------
07C2E0D1: 0F 84 E5 01 00 00  -  je 07C2E2BC
07C2E0D7: 8B 46 04           -  mov eax,[esi+04]
07C2E0DA: 83 78 1C 00        -  cmp dword ptr [eax+1C],00
07C2E0DE: 0F 84 D8 01 00 00  -  je 07C2E2BC
07C2E0E4: 85 FF              -  test edi,edi
07C2E0E6: 0F 8E D0 01 00 00  -  jng 07C2E2BC
07C2E0EC: D9 46 14           -  fld dword ptr [esi+14]
07C2E0EF: D9 EE              -  fldz 
07C2E0F1: DF F1              -  fcomip st(0),st(1)
07C2E0F3: DD D8              -  fstp st(0)
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>203</ID>
          <Description>"Item ID to Harvest"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>crop_ptr</Address>
          <Offsets>
            <Offset>24</Offset>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>206</ID>
      <Description>"Instant Tree Chopping"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(OHTreeAOB,8B 85 38 FF FF FF D9 40 1C)
registersymbol(OHTreeAOB)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

originalcode:
mov eax,[ebp-000000C8]
mov [eax+1c],0

exit:
jmp returnhere

OHTreeAOB:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
OHTreeAOB:
db 8B 85 38 FF FF FF
unregistersymbol(OHTreeAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Calendar Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(clock,83 05 * * * * 0A A1 * * * * 8D)
label(clock_ptr)
clock+2:
clock_ptr:
registersymbol(clock)
registersymbol(clock_ptr)

[DISABLE]
clock+6:
db 0A
unregistersymbol(clock)
unregistersymbol(clock_ptr)

{
// ORIGINAL CODE - INJECTION POINT: 0D0D3BFF

0D0D3BD7: 33 C0                          -  xor eax,eax
0D0D3BD9: F3 AB                          - repe  stosd 
0D0D3BDB: 80 3D 40 55 DE 00 02           -  cmp byte ptr [00DE5540],02
0D0D3BE2: 75 06                          -  jne 0D0D3BEA
0D0D3BE4: FF 15 E4 07 DB 0C              -  call dword ptr [0CDB07E4]
0D0D3BEA: E8 09 25 02 00                 -  call 0D0F60F8
0D0D3BEF: 05 C8 00 00 00                 -  add eax,000000C8
0D0D3BF4: 89 45 DC                       -  mov [ebp-24],eax
0D0D3BF7: 33 D2                          -  xor edx,edx
0D0D3BF9: 89 15 24 54 DE 00              -  mov [00DE5424],edx
// ---------- INJECTING HERE ----------
0D0D3BFF: 83 05 3C 54 DE 00 0A           -  add dword ptr [00DE543C],0A
// ---------- DONE INJECTING  ----------
0D0D3C06: A1 3C 54 DE 00                 -  mov eax,[00DE543C]
0D0D3C0B: 8D 4A 64                       -  lea ecx,[edx+64]
0D0D3C0E: 99                             -  cdq 
0D0D3C0F: F7 F9                          -  idiv ecx
0D0D3C11: 89 95 78 FF FF FF              -  mov [ebp-00000088],edx
0D0D3C17: 83 FA 3C                       -  cmp edx,3C
0D0D3C1A: 7C 0F                          -  jl 0D0D3C2B
0D0D3C1C: A1 3C 54 DE 00                 -  mov eax,[00DE543C]
0D0D3C21: 2B C2                          -  sub eax,edx
0D0D3C23: 83 C0 64                       -  add eax,64
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Clock Time"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>clock_ptr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"Day"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>clock_ptr</Address>
          <Offsets>
            <Offset>FFFFFFF8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"Year"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>clock_ptr</Address>
          <Offsets>
            <Offset>FFFFFFFC</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Freeze Time"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
clock+6:
db 00
[DISABLE]
clock+6:
db 0A
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>132</ID>
      <Description>"Season Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(season,8B 0D * * * * E8 * * * * 8D 04)
registersymbol(season)

[DISABLE]
unregistersymbol(season)

{
// ORIGINAL CODE - INJECTION POINT: 0D04D87F

0D04D850: 8D 85 34 FF FF FF     -  lea eax,[ebp-000000CC]
0D04D856: 83 EC 08              -  sub esp,08
0D04D859: F3 0F 7E 00           -  movq xmm0,[eax]
0D04D85D: 66 0F D6 04 24        -  movq [esp],xmm0
0D04D862: 8D 8D 24 FF FF FF     -  lea ecx,[ebp-000000DC]
0D04D868: E8 B3 45 76 01        -  call 0E7B1E20
0D04D86D: 8D BD 14 FF FF FF     -  lea edi,[ebp-000000EC]
0D04D873: 0F 57 C0              -  xorps xmm0,xmm0
0D04D876: 66 0F D6 07           -  movq [edi],xmm0
0D04D87A: 66 0F D6 47 08        -  movq [edi+08],xmm0
// ---------- INJECTING HERE ----------
0D04D87F: 8B 0D B4 37 AD 04     -  mov ecx,[04AD37B4]
// ---------- DONE INJECTING  ----------
0D04D885: E8 DE 6F 1E 00        -  call 0D234868
0D04D88A: 8D 04 C5 B9 01 00 00  -  lea eax,[eax*8+000001B9]
0D04D891: 50                    -  push eax
0D04D892: 6A 0C                 -  push 0C
0D04D894: 6A 08                 -  push 08
0D04D896: 8D 8D 14 FF FF FF     -  lea ecx,[ebp-000000EC]
0D04D89C: BA 96 01 00 00        -  mov edx,00000196
0D04D8A1: E8 6A CF 83 F6        -  call 0388A810
0D04D8A6: 8D BD 00 FF FF FF     -  lea edi,[ebp-00000100]
0D04D8AC: 33 C0                 -  xor eax,eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>133</ID>
          <Description>"Season"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">fall:fall
spring:spring
summer:summer
winter:winter
</DropDownList>
          <VariableType>String</VariableType>
          <Length>32</Length>
          <Unicode>1</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>season+2</Address>
          <Offsets>
            <Offset>8</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Mouseover Stackable Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(stackable,E9 * * * * 8B 4E 20 85 C9 74)
alloc(newmem,$1000)

label(code)
label(return)
label(stackable_ptr)

newmem:

code:
  mov [stackable_ptr],esi
  mov ecx,[esi+20]
  test ecx,ecx
  jmp return

stackable_ptr:
  dd 0

stackable+5:
  jmp code
return:
registersymbol(stackable)
registersymbol(stackable_ptr)

[DISABLE]
stackable+5:
  db 8B 4E 20 85 C9
unregistersymbol(stackable)
unregistersymbol(stackable_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C9BE781

0C9BE761: 8B EC                 -  mov ebp,esp
0C9BE763: 56                    -  push esi
0C9BE764: 8B F1                 -  mov esi,ecx
0C9BE766: 8B D6                 -  mov edx,esi
0C9BE768: B9 8C 2B 78 0E        -  mov ecx,0E782B8C
0C9BE76D: E8 32 43 07 65        -  call clr.dll+2AA4
0C9BE772: 85 C0                 -  test eax,eax
0C9BE774: 74 0B                 -  je 0C9BE781
0C9BE776: 8B 05 A4 35 B7 04     -  mov eax,[04B735A4]
0C9BE77C: E9 FD 00 00 00        -  jmp 0C9BE87E
// ---------- INJECTING HERE ----------
0C9BE781: 8B 4E 20              -  mov ecx,[esi+20]
0C9BE784: 85 C9                 -  test ecx,ecx
// ---------- DONE INJECTING  ----------
0C9BE786: 74 1C                 -  je 0C9BE7A4
0C9BE788: 8B 15 D0 3E B7 04     -  mov edx,[04B73ED0]
0C9BE78E: 39 09                 -  cmp [ecx],ecx
0C9BE790: E8 EB D0 08 64        -  call mscorlib.ni.dll+3AB880
0C9BE795: 85 C0                 -  test eax,eax
0C9BE797: 74 0B                 -  je 0C9BE7A4
0C9BE799: 8B 05 7C 41 B7 04     -  mov eax,[04B7417C]
0C9BE79F: E9 DA 00 00 00        -  jmp 0C9BE87E
0C9BE7A4: 8B 56 08              -  mov edx,[esi+08]
0C9BE7A7: 8D 42 51              -  lea eax,[edx+51]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>32</ID>
          <Description>"Base Address"</Description>
          <LastState RealAddress="060005F8"/>
          <VariableType>String</VariableType>
          <Length>0</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>stackable_ptr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>33</ID>
              <Description>"Name"</Description>
              <LastState RealAddress="06000620"/>
              <VariableType>String</VariableType>
              <Length>64</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>+1C</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>208</ID>
              <Description>"Item ID"</Description>
              <DropDownList>0: Weeds
2: Stone
4: Stone
16: Wild Horseradish
18: Daffodil
20: Leek
22: Dandelion
24: Parsnip
30: Lumber
60: Emerald
62: Aquamarine
64: Ruby
66: Amethyst
68: Topaz
70: Jade
72: Diamond
74: Prismatic Shard
78: Cave Carrot
80: Quartz
82: Fire Quartz
84: Frozen Tear
86: Earth Crystal
88: Coconut
90: Cactus Fruit
92: Sap
93: Torch
94: Spirit Torch
96: Dwarf Scroll I
97: Dwarf Scroll II
98: Dwarf Scroll III
99: Dwarf Scroll IV
100: Chipped Amphora
101: Arrowhead
102: Lost Book
103: Ancient Doll
104: Elvish Jewelry
105: Chewing Stick
106: Ornamental Fan
107: Dinosaur Egg
108: Rare Disc
109: Ancient Sword
110: Rusty Spoon
111: Rusty Spur
112: Rusty Cog
113: Chicken Statue
114: Ancient Seed
115: Prehistoric Tool
116: Dried Starfish
117: Anchor
118: Glass Shards
119: Bone Flute
120: Prehistoric Handaxe
121: Dwarvish Helm
122: Dwarf Gadget
123: Ancient Drum
124: Golden Mask
125: Golden Relic
126: Strange Doll
127: Strange Doll
128: Pufferfish
129: Anchovy
130: Tuna
131: Sardine
132: Bream
136: Largemouth Bass
137: Smallmouth Bass
138: Rainbow Trout
139: Salmon
140: Walleye
141: Perch
142: Carp
143: Catfish
144: Pike
145: Sunfish
146: Red Mullet
147: Herring
148: Eel
149: Octopus
150: Red Snapper
151: Squid
152: Seaweed
153: Green Algae
154: Sea Cucumber
155: Super Cucumber
156: Ghostfish
157: White Algae
158: Stonefish
159: Crimsonfish
160: Angler
161: Ice Pip
162: Lava Eel
163: Legend
164: Sandfish
165: Scorpion Carp
166: Treasure Chest
167: Joja Cola
168: Trash
169: Driftwood
170: Broken Glasses
171: Broken CD
172: Soggy Newspaper
174: Large Egg
176: Egg
178: Hay
180: Egg
182: Large Egg
184: Milk
186: Large Milk
188: Green Bean
190: Cauliflower
192: Potato
194: Fried Egg
195: Omelet
196: Salad
197: Cheese Cauliflower
198: Baked Fish
199: Parsnip Soup
200: Vegetable Medley
201: Complete Breakfast
202: Fried Calamari
203: Strange Bun
204: Lucky Lunch
205: Fried Mushroom
206: Pizza
207: Bean Hotpot
208: Glazed Yams
209: Carp Surprise
210: Hashbrowns
211: Pancakes
212: Salmon Dinner
213: Fish Taco
214: Crispy Bass
215: Pepper Poppers
216: Bread
218: Tom Kha Soup
219: Trout Soup
220: Chocolate Cake
221: Pink Cake
222: Rhubarb Pie
223: Cookie
224: Spaghetti
225: Fried Eel
226: Spicy Eel
227: Sashimi
228: Maki Roll
229: Tortilla
230: Red Plate
231: Eggplant Parmesan
232: Rice Pudding
233: Ice Cream
234: Blueberry Tart
235: Autumn's Bounty
236: Pumpkin Soup
237: Super Meal
238: Cranberry Sauce
239: Stuffing
240: Farmer's Lunch
241: Survival Burger
242: Dish O' The Sea
243: Miner's Treat
244: Roots Platter
245: Sugar
246: Wheat Flour
247: Oil
248: Garlic
250: Kale
252: Rhubarb
254: Melon
256: Tomato
257: Morel
258: Blueberry
259: Fiddlehead Fern
260: Hot Pepper
262: Wheat
264: Radish
266: Red Cabbage
268: Starfruit
270: Corn
272: Eggplant
274: Artichoke
276: Pumpkin
278: Bok Choy
280: Yam
281: Chanterelle
282: Cranberries
283: Holly
284: Beet
286: Cherry Bomb
287: Bomb
288: Mega Bomb
290: Stone
294: Twig
295: Twig
296: Salmonberry
297: Grass Starter
298: Hardwood Fence
299: Amaranth Seeds
300: Amaranth
301: Grape Starter
302: Hops Starter
303: Pale Ale
304: Hops
305: Void Egg
306: Mayonnaise
307: Duck Mayonnaise
309: Acorn
310: Maple Seed
311: Pine Cone
313: Weeds
314: Weeds
315: Weeds
316: Weeds
317: Weeds
318: Weeds
319: Weeds
320: Weeds
321: Weeds
322: Wood Fence
323: Stone Fence
324: Iron Fence
325: Gate
326: Dwarvish Translation Guide
328: Wood Floor
329: Stone Floor
330: Clay
331: Weathered Floor
333: Crystal Floor
334: Copper Bar
335: Iron Bar
336: Gold Bar
337: Iridium Bar
338: Refined Quartz
340: Honey
341: Tea Set
342: Pickles
343: Stone
344: Jelly
346: Beer
347: Rare Seed
348: Wine
349: Energy Tonic
350: Juice
351: Muscle Remedy
368: Basic Fertilizer
369: Quality Fertilizer
370: Basic Retaining Soil
371: Quality Retaining Soil
372: Clam
373: Golden Pumpkin
376: Poppy
378: Copper Ore
380: Iron Ore
382: Coal
384: Gold Ore
386: Iridium Ore
388: Wood
390: Stone
392: Nautilus Shell
393: Coral
394: Rainbow Shell
395: Coffee
396: Spice Berry
397: Sea Urchin
398: Grape
399: Spring Onion
400: Strawberry
401: Straw Floor
402: Sweet Pea
403: Field Snack
404: Common Mushroom
405: Wood Path
406: Wild Plum
407: Gravel Path
408: Hazelnut
409: Crystal Path
410: Blackberry
411: Cobblestone Path
412: Winter Root
413: Blue Slime Egg
414: Crystal Fruit
416: Snow Yam
417: Sweet Gem Berry
418: Crocus
419: Vinegar
420: Red Mushroom
421: Sunflower
422: Purple Mushroom
423: Rice
424: Cheese
425: Fairy Seeds
426: Goat Cheese
427: Tulip Bulb
428: Cloth
429: Jazz Seeds
430: Truffle
431: Sunflower Seeds
432: Truffle Oil
434: Stardrop
436: Goat Milk
437: Red Slime Egg
438: L. Goat Milk
439: Purple Slime Egg
440: Wool
441: Explosive Ammo
442: Duck Egg
444: Duck Feather
446: Rabbit's Foot
449: Stone Base
450: Stone
452: Weeds
453: Poppy Seeds
454: Ancient Fruit
455: Spangle Seeds
456: Algae Soup
457: Pale Broth
458: Bouquet
460: Mermaid's Pendant
461: Decorative Pot
463: Drum Block
464: Flute Block
465: Speed-Gro
466: Deluxe Speed-Gro
472: Parsnip Seeds
473: Bean Starter
474: Cauliflower Seeds
475: Potato Seeds
476: Garlic Seeds
477: Kale Seeds
478: Rhubarb Seeds
479: Melon Seeds
480: Tomato Seeds
481: Blueberry Seeds
482: Pepper Seeds
483: Wheat Seeds
484: Radish Seeds
485: Red Cabbage Seeds
486: Starfruit Seeds
487: Corn Seeds
488: Eggplant Seeds
489: Artichoke Seeds
490: Pumpkin Seeds
491: Bok Choy Seeds
492: Yam Seeds
493: Cranberry Seeds
494: Beet Seeds
495: Spring Seeds
496: Summer Seeds
497: Fall Seeds
498: Winter Seeds
499: Ancient Seeds
516: Small Glow Ring
517: Glow Ring
518: Small Magnet Ring
519: Magnet Ring
520: Slime Charmer Ring
521: Warrior Ring
522: Vampire Ring
523: Savage Ring
524: Ring of Yoba
525: Sturdy Ring
526: Burglar's Ring
527: Iridium Band
528: Jukebox Ring
529: Amethyst Ring
530: Topaz Ring
531: Aquamarine Ring
532: Jade Ring
533: Emerald Ring
534: Ruby Ring
535: Geode
536: Frozen Geode
537: Magma Geode
538: Alamite
539: Bixite
540: Baryte
541: Aerinite
542: Calcite
543: Dolomite
544: Esperite
545: Fluorapatite
546: Geminite
547: Helvite
548: Jamborite
549: Jagoite
550: Kyanite
551: Lunarite
552: Malachite
553: Neptunite
554: Lemon Stone
555: Nekoite
556: Orpiment
557: Petrified Slime
558: Thunder Egg
559: Pyrite
560: Ocean Stone
561: Ghost Crystal
562: Tigerseye
563: Jasper
564: Opal
565: Fire Opal
566: Celestine
567: Marble
568: Sandstone
569: Granite
570: Basalt
571: Limestone
572: Soapstone
573: Hematite
574: Mudstone
575: Obsidian
576: Slate
577: Fairy Stone
578: Star Shards
579: Prehistoric Scapula
580: Prehistoric Tibia
581: Prehistoric Skull
582: Skeletal Hand
583: Prehistoric Rib
584: Prehistoric Vertebra
585: Skeletal Tail
586: Nautilus Shell
587: Amphibian Fossil
588: Palm Fossil
589: Trilobite
590: Artifact Spot
591: Tulip
593: Summer Spangle
595: Fairy Rose
597: Blue Jazz
599: Sprinkler
604: Plum Pudding
605: Artichoke Dip
606: Stir Fry
607: Roasted Hazelnuts
608: Pumpkin Pie
609: Radish Salad
610: Fruit Salad
611: Blackberry Cobbler
612: Cranberry Candy
613: Apple
618: Bruschetta
621: Quality Sprinkler
628: Cherry Sapling
629: Apricot Sapling
630: Orange Sapling
631: Peach Sapling
632: Pomegranate Sapling
633: Apple Sapling
634: Apricot
635: Orange
636: Peach
637: Pomegranate
638: Cherry
645: Iridium Sprinkler
648: Coleslaw
649: Fiddlehead Risotto
651: Poppyseed Muffin
668: Stone
670: Stone
674: Weeds
675: Weeds
676: Weeds
677: Weeds
678: Weeds
679: Weeds
680: Green Slime Egg
681: Rain Totem
682: Mutant Carp
684: Bug Meat
685: Bait
686: Spinner
687: Dressed Spinner
688: Warp Totem: Farm
689: Warp Totem: Mountains
690: Warp Totem: Beach
691: Barbed Hook
692: Lead Bobber
693: Treasure Hunter
694: Trap Bobber
695: Cork Bobber
698: Sturgeon
699: Tiger Trout
700: Bullhead
701: Tilapia
702: Chub
703: Magnet
704: Dorado
705: Albacore
706: Shad
707: Lingcod
708: Halibut
709: Hardwood
710: Crab Pot
715: Lobster
716: Crayfish
717: Crab
718: Cockle
719: Mussel
720: Shrimp
721: Snail
722: Periwinkle
723: Oyster
724: Maple Syrup
725: Oak Resin
726: Pine Tar
727: Chowder
728: Fish Stew
729: Escargot
730: Lobster Bisque
731: Maple Bar
732: Crab Cakes
734: Woodskip
745: Strawberry Seeds
746: Jack-O-Lantern
747: Rotten Plant
748: Rotten Plant
749: Omni Geode
750: Weeds
751: Stone
760: Stone
762: Stone
764: Stone
765: Stone
766: Slime
767: Bat Wing
768: Solar Essence
769: Void Essence
770: Mixed Seeds
771: Fiber
772: Oil of Garlic
773: Life Elixir
774: Wild Bait
775: Glacierfish
784: Weeds
785: Weeds
786: Weeds
787: Battery Pack
788: Lost Axe
789: Lucky Purple Shorts
790: Berry Basket
</DropDownList>
              <LastState Value="0" RealAddress="06000608"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+10</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>127</ID>
              <Description>"Category"</Description>
              <LastState Value="0" RealAddress="06000600"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>108</ID>
              <Description>"Owner"</Description>
              <LastState Value="100664848" RealAddress="0600060C"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+14</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>37</ID>
              <Description>"Price"</Description>
              <LastState Value="100664880" RealAddress="0600062C"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+34</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>35</ID>
              <Description>"Stack"</Description>
              <LastState Value="100664888" RealAddress="06000634"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+3C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>36</ID>
              <Description>"Quality"</Description>
              <LastState Value="0" RealAddress="06000638"/>
              <VariableType>4 Bytes</VariableType>
              <Address>+40</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"Mouseover Tool Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(tool,8B 41 2C 48 83 F8 04)
alloc(newmem,$1000)

label(code)
label(return)
label(tool_ptr)

newmem:

code:
  mov [tool_ptr],ecx
  mov eax,[ecx+2C]
  dec eax
  cmp eax,04
  jmp return

tool_ptr:
  dd 0

tool:
  jmp code
  nop
  nop
return:
registersymbol(tool)
registersymbol(tool_ptr)

[DISABLE]
tool:
  db 8B 41 2C 48 83 F8 04
unregistersymbol(tool)
unregistersymbol(tool_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0D28384B

0D283837: CC                    -  int 3 
0D283838: 08 C7                 -  or bh,al
0D28383A: FA                    -  cli 
0D28383B: 0C 00                 -  or al,00
0D28383D: 00 00                 -  add [eax],al
0D28383F: 00 00                 -  add [eax],al
0D283841: C7                    -  db -39
0D283842: FA                    -  cli 
0D283843: 0C 98                 -  or al,-68
0D283845: DA A9 3A 55 8B EC     -  fisubr [ecx-1374AAC6]
// ---------- INJECTING HERE ----------
0D28384B: 8B 41 2C              -  mov eax,[ecx+2C]
0D28384E: 48                    -  dec eax
0D28384F: 83 F8 04              -  cmp eax,04
// ---------- DONE INJECTING  ----------
0D283852: 73 47                 -  jae 0D28389B
0D283854: FF 24 85 A0 38 28 0D  -  jmp dword ptr [eax*4+0D2838A0]
0D28385B: 8B 51 10              -  mov edx,[ecx+10]
0D28385E: 8B 0D 4C 34 B7 04     -  mov ecx,[04B7344C]
0D283864: E8 27 CE 71 63        -  call mscorlib.ni.dll+300690
0D283869: EB 33                 -  jmp 0D28389E
0D28386B: 8B 51 10              -  mov edx,[ecx+10]
0D28386E: 8B 0D 50 34 B7 04     -  mov ecx,[04B73450]
0D283874: E8 17 CE 71 63        -  call mscorlib.ni.dll+300690
0D283879: EB 23                 -  jmp 0D28389E
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Base Address"</Description>
          <LastState RealAddress="4928391F"/>
          <VariableType>String</VariableType>
          <Length>0</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>tool_ptr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>47</ID>
              <Description>"Name"</Description>
              <VariableType>String</VariableType>
              <Length>64</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>+10</Address>
              <Offsets>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>48</ID>
              <Description>"Upgrade Level"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+10</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>128</ID>
              <Description>"Upgrade Level"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+2c</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>49</ID>
              <Description>"Attachment Slots"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+30</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Variable 1"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+34</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Variable 2"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+38</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>54</ID>
              <Description>"Variable 3"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>+3c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Weapon Properties"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>56</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="4928391F"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>tool_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>57</ID>
                  <Description>"Min Damage"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+38</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>58</ID>
                  <Description>"Max Damage"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+3c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>59</ID>
                  <Description>"Speed"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+40</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>60</ID>
                  <Description>"Precision"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+44</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>61</ID>
                  <Description>"Defense"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+48</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>67</ID>
                  <Description>"Area of Effect"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+50</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>68</ID>
                  <Description>"Knockback"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+54</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>64</ID>
                  <Description>"Crit Chance"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+58</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>65</ID>
                  <Description>"Crit Multiplier"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+5c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>69</ID>
                  <Description>"Swipe Speed"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+60</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>112</ID>
      <Description>"Fishing Pointers"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(fishing,D9 83 8C 00 00 00 D9 E8)
alloc(newmem,$1000)

label(code)
label(return)
label(fishing_ptr)
label(fishing_hack)

newmem:
  cmp [fishing_hack],1
  jne code
  fld dword ptr [ebx+34]
  fstp dword ptr [ebx+80]
code:
  mov [fishing_ptr],ebx
  fld dword ptr [ebx+0000008C]
  jmp return

fishing_ptr:
  dd 0

fishing_hack:
  db 0

fishing:
  jmp newmem
  nop
return:
registersymbol(fishing)
registersymbol(fishing_ptr)
registersymbol(fishing_hack)

[DISABLE]
fishing:
  db D9 83 8C 00 00 00
unregistersymbol(fishing)
unregistersymbol(fishing_ptr)
unregistersymbol(fishing_hack)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 078E0E7A

078E0E4E: 8B 95 AC FB FF FF        -  mov edx,[ebp-00000454]
078E0E54: E8 4F F6 1F 07           -  call 0EAE04A8
078E0E59: 8D BD DC FC FF FF        -  lea edi,[ebp-00000324]
078E0E5F: 0F 57 C0                 -  xorps xmm0,xmm0
078E0E62: 66 0F D6 07              -  movq [edi],xmm0
078E0E66: 66 0F D6 47 08           -  movq [edi+08],xmm0
078E0E6B: 8B 35 84 37 92 04        -  mov esi,[04923784]
078E0E71: 8B 4B 14                 -  mov ecx,[ebx+14]
078E0E74: 83 C1 7C                 -  add ecx,7C
078E0E77: 8B 43 18                 -  mov eax,[ebx+18]
// ---------- INJECTING HERE ----------
078E0E7A: D9 83 8C 00 00 00        -  fld dword ptr [ebx+0000008C]
// ---------- DONE INJECTING  ----------
078E0E80: D9 E8                    -  fld1 
078E0E82: DE E1                    -  fsubrp st(1),st(0)
078E0E84: D8 0D B8 18 8E 07        -  fmul dword ptr [078E18B8]
078E0E8A: DD 9D 98 FB FF FF        -  fstp qword ptr [ebp-00000468]
078E0E90: F2 0F 10 85 98 FB FF FF  -  movsd xmm0,[ebp-00000468]
078E0E98: F2 0F 2C D0              -  cvttsd2si edx,xmm0
078E0E9C: 8D 44 10 04              -  lea eax,[eax+edx+04]
078E0EA0: 50                       -  push eax
078E0EA1: 6A 10                    -  push 10
078E0EA3: D9 83 8C 00 00 00        -  fld dword ptr [ebx+0000008C]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>121</ID>
          <Description>"Always Catch Fish"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
fishing_hack:
db 1
[DISABLE]
fishing_hack:
db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Fishing Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>113</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>fishing_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>114</ID>
                  <Description>"Bobber Position"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+34</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>119</ID>
                  <Description>"Bobber Bar Position"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+80</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>207</ID>
                  <Description>"Fish ID (can be any item)"</Description>
                  <DropDownList DisplayValueAsItem="1">128: Pufferfish
129: Anchovy
130: Tuna
131: Sardine
132: Bream
136: Largemouth Bass
137: Smallmouth Bass
138: Rainbow Trout
139: Salmon
140: Walleye
141: Perch
142: Carp
143: Catfish
144: Pike
145: Sunfish
146: Red Mullet
147: Herring
148: Eel
149: Octopus
150: Red Snapper
151: Squid
152: Seaweed
153: Green Algae
154: Sea Cucumber
155: Super Cucumber
156: Ghostfish
157: White Algae
158: Stonefish
159: Crimsonfish
160: Angler
161: Ice Pip
162: Lava Eel
163: Legend
164: Sandfish
165: Scorpion
372: Clam
682: Mutant Carp
698: Sturgeon
699: Tiger Trout
700: Bullhead
701: Tilapia
702: Chub
704: Dorado
705: Albacore
706: Shad
707: Lingcod
708: Halibut
715: Lobster
716: Crayfish
717: Crab
718: Cockle
719: Mussel
720: Shrimp
721: Snail
722: Periwinkle
723: Oyster
734: Woodskip
775: Glacierfish
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+30</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>116</ID>
                  <Description>"Difficulty"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+28</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"Fish Size"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+64</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>125</ID>
      <Description>"Always Fish Treasure"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(treasure,0F 84 * * * * 8B 85 * * * * D9 40 58)
alloc(treasure_bkp,6)
treasure_bkp:
  readmem(treasure,6)
treasure:
  db 90 90 90 90 90 90
registersymbol(treasure)
registersymbol(treasure_bkp)

aobscan(treasure2,80 B8 94 00 00 00 00 74 * 6A 00 8B)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov byte ptr [eax+00000094],1
  cmp byte ptr [eax+00000094],00
  jmp return

treasure2:
  jmp code
  nop
  nop
return:
registersymbol(treasure2)

[DISABLE]
treasure:
  readmem(treasure_bkp,6)
unregistersymbol(treasure)
unregistersymbol(treasure_bkp)
dealloc(treasure_bkp)

treasure2:
  db 80 B8 94 00 00 00 00
unregistersymbol(treasure2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 078E2653

078E262B: DD D8                 -  fstp st(0)
078E262D: 7A 15                 -  jp 078E2644
078E262F: 73 13                 -  jae 078E2644
078E2631: 8B 0D 30 38 92 04     -  mov ecx,[04923830]
078E2637: 8B 15 B4 D9 A0 04     -  mov edx,[04A0D9B4]
078E263D: 39 09                 -  cmp [ecx],ecx
078E263F: E8 E4 9C 20 07        -  call 0EAEC328
078E2644: 33 DB                 -  xor ebx,ebx
078E2646: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
078E264C: 80 B8 93 00 00 00 00  -  cmp byte ptr [eax+00000093],00
// ---------- INJECTING HERE ----------
078E2653: 0F 84 7E 03 00 00     -  je 078E29D7
// ---------- DONE INJECTING  ----------
078E2659: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
078E265F: D9 40 58              -  fld dword ptr [eax+58]
078E2662: D9 5D E4              -  fstp dword ptr [ebp-1C]
078E2665: D9 40 58              -  fld dword ptr [eax+58]
078E2668: 8D 7D D0              -  lea edi,[ebp-30]
078E266B: 8B 85 4C FF FF FF     -  mov eax,[ebp-000000B4]
078E2671: 3A 40 10              -  cmp al,[eax+10]
078E2674: 8D 70 10              -  lea esi,[eax+10]
078E2677: F3 0F 7E 06           -  movq xmm0,[esi]
078E267B: 66 0F D6 07           -  movq [edi],xmm0
}

{
// ORIGINAL CODE - INJECTION POINT: 078E2978

078E2943: 0F 87 8E 00 00 00     -  ja 078E29D7
078E2949: 8B 0D 30 38 92 04     -  mov ecx,[04923830]
078E294F: 8B 15 EC 96 B0 04     -  mov edx,[04B096EC]
078E2955: 39 09                 -  cmp [ecx],ecx
078E2957: E8 CC 99 20 07        -  call 0EAEC328
078E295C: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
078E2962: C6 80 94 00 00 00 01  -  mov byte ptr [eax+00000094],01
078E2969: EB 6C                 -  jmp 078E29D7
078E296B: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
078E2971: 80 B8 94 00 00 00 00  -  cmp byte ptr [eax+00000094],00
// ---------- INJECTING HERE ----------
078E2978: 74 27                 -  je 078E29A1
078E297A: 6A 00                 -  push 00
078E297C: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
// ---------- DONE INJECTING  ----------
078E2982: D9 40 5C              -  fld dword ptr [eax+5C]
078E2985: D8 25 E8 31 8E 07     -  fsub dword ptr [078E31E8]
078E298B: 83 EC 04              -  sub esp,04
078E298E: D9 1C 24              -  fstp dword ptr [esp]
078E2991: E8 DA F5 23 69        -  call mscorlib.ni.dll+3B1F70
078E2996: 8B 85 50 FF FF FF     -  mov eax,[ebp-000000B0]
078E299C: D9 58 5C              -  fstp dword ptr [eax+5C]
078E299F: EB 36                 -  jmp 078E29D7
078E29A1: 8B 8D 50 FF FF FF     -  mov ecx,[ebp-000000B0]
078E29A7: 81 C1 B0 00 00 00     -  add ecx,000000B0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>155</ID>
      <Description>"Last NPC You Walked Through"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(farmer,8B 90 * * * * C6 42 * 01 8B 8D)
alloc(newmem,$1000)

label(code)
label(return)
label(farmer_ptr)

newmem:

code:
  readmem(farmer,6)
  mov [farmer_ptr],edx
  jmp return

farmer_ptr:
  dd 0

farmer:
  jmp code
  nop
return:
registersymbol(farmer)
registersymbol(farmer_ptr)

[DISABLE]
farmer:
  db 8B 90 94 01 00 00
unregistersymbol(farmer)
unregistersymbol(farmer_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0D020E22

0D020DF2: 66 0F D6 04 24        -  movq [esp],xmm0
0D020DF7: F3 0F 7E 40 08        -  movq xmm0,[eax+08]
0D020DFC: 66 0F D6 44 24 08     -  movq [esp+08],xmm0
0D020E02: 8B 4D 08              -  mov ecx,[ebp+08]
0D020E05: 39 09                 -  cmp [ecx],ecx
0D020E07: FF 15 B4 75 A5 03     -  call dword ptr [03A575B4]
0D020E0D: 8B 85 C8 FE FF FF     -  mov eax,[ebp-00000138]
0D020E13: 83 B8 94 01 00 00 00  -  cmp dword ptr [eax+00000194],00
0D020E1A: 74 10                 -  je 0D020E2C
0D020E1C: 8B 85 C8 FE FF FF     -  mov eax,[ebp-00000138]
// ---------- INJECTING HERE ----------
0D020E22: 8B 90 94 01 00 00     -  mov edx,[eax+00000194]
// ---------- DONE INJECTING  ----------
0D020E28: C6 42 76 01           -  mov byte ptr [edx+76],01
0D020E2C: 8B 8D C8 FE FF FF     -  mov ecx,[ebp-00000138]
0D020E32: 8B 01                 -  mov eax,[ecx]
0D020E34: 8B 40 30              -  mov eax,[eax+30]
0D020E37: FF 50 18              -  call dword ptr [eax+18]
0D020E3A: 85 C0                 -  test eax,eax
0D020E3C: 0F 84 5B 01 00 00     -  je 0D020F9D
0D020E42: 8B 8D C8 FE FF FF     -  mov ecx,[ebp-00000138]
0D020E48: E8 A3 4E 22 00        -  call 0D245CF0
0D020E4D: 85 C0                 -  test eax,eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>157</ID>
          <Description>"Farmer Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>156</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>farmer_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>158</ID>
                  <Description>"Name"</Description>
                  <VariableType>String</VariableType>
                  <Length>32</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+8</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>159</ID>
                  <Description>"Love Interest"</Description>
                  <LastState RealAddress="00000000"/>
                  <VariableType>String</VariableType>
                  <Length>0</Length>
                  <Unicode>0</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+c0</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>160</ID>
                      <Description>"Name Length"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>+4</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>161</ID>
                      <Description>"Name Text"</Description>
                      <VariableType>String</VariableType>
                      <Length>32</Length>
                      <Unicode>1</Unicode>
                      <ZeroTerminate>1</ZeroTerminate>
                      <Address>+8</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>162</ID>
                  <Description>"Days Until Birthing"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+150</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>163</ID>
                  <Description>"Is Married"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+178</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>164</ID>
                  <Description>"Is Datable"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+18c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>165</ID>
                  <Description>"Has Been Kissed Today"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+18e</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>172</ID>
      <Description>"Ignore This"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Retrieve Pointers"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(player,D9 81 * * * * C3)
alloc(newmem,$1000)

label(code)
label(return)
label(player_ptr)
label(player_bkp)

newmem:

code:
  mov [player_ptr],ecx
player_bkp:
  readmem(player,6)
  jmp return

player_ptr:
  dd 0

player:
  jmp code
  nop
return:
registersymbol(player)
registersymbol(player_ptr)
registersymbol(player_bkp)

[DISABLE]
player:
  db D9 81 30 02 00 00
unregistersymbol(player)
unregistersymbol(player_ptr)
unregistersymbol(player_bkp)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0CF87CF0

0CF87CD7: 00 00                 -  add [eax],al
0CF87CD9: 00 00                 -  add [eax],al
0CF87CDB: 00 00                 -  add [eax],al
0CF87CDD: 00 00                 -  add [eax],al
0CF87CDF: 00 78 FC              -  add [eax-04],bh
0CF87CE2: DA 0C 00              -  fimul [eax+eax]
0CF87CE5: 00 00                 -  add [eax],al
0CF87CE7: 00 70 FC              -  add [eax-04],dh
0CF87CEA: DA 0C D4              -  fimul [esp+edx*8]
0CF87CED: 13 A9 3A              - db 13 A9 3A  // SHORTENED TO HIT INJECTION FROM:  adc ebp,[ecx+3081D93A]
// ---------- INJECTING HERE ----------
0CF87CF0: D9 81 30 02 00 00     -  fld dword ptr [ecx+00000230]
// ---------- DONE INJECTING  ----------
0CF87CF6: C3                    -  ret 
0CF87CF7: 00 8C FC DA 0C 00 00  -  add [esp+edi*8+00000CDA],cl
0CF87CFE: 00 00                 -  add [eax],al
0CF87D00: 84 FC                 -  test ah,bh
0CF87D02: DA 0C 40              -  fimul [eax+eax*2]
0CF87D05: F6 A9 3A 55 8B EC     -  imul byte ptr [ecx-1374AAC6]
0CF87D0B: 83 EC 14              -  sub esp,14
0CF87D0E: D9 45 08              -  fld dword ptr [ebp+08]
0CF87D11: D9 05 90 7D F8 0C     -  fld dword ptr [0CF87D90]
0CF87D17: DF F1                 -  fcomip st(0),st(1)
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"Unlimited Stack Usage"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(inventory,48 8B D0 8B CF 8B 01 8B 40 34 FF 50 14 8B)
inventory:
  db 90
registersymbol(inventory)

[DISABLE]
inventory:
  db 48
unregistersymbol(inventory)

{
// ORIGINAL CODE - INJECTION POINT: 0C9BD85D

0C9BD841: E8 4A 6F EB F6     -  call 03874790
0C9BD846: 85 C0              -  test eax,eax
0C9BD848: 74 4D              -  je 0C9BD897
0C9BD84A: 8B CE              -  mov ecx,esi
0C9BD84C: E8 3F 6F EB F6     -  call 03874790
0C9BD851: 8B F8              -  mov edi,eax
0C9BD853: 8B CF              -  mov ecx,edi
0C9BD855: 8B 01              -  mov eax,[ecx]
0C9BD857: 8B 40 34           -  mov eax,[eax+34]
0C9BD85A: FF 50 10           -  call dword ptr [eax+10]
// ---------- INJECTING HERE ----------
0C9BD85D: 48                 -  dec eax
0C9BD85E: 8B D0              -  mov edx,eax
0C9BD860: 8B CF              -  mov ecx,edi
// ---------- DONE INJECTING  ----------
0C9BD862: 8B 01              -  mov eax,[ecx]
0C9BD864: 8B 40 34           -  mov eax,[eax+34]
0C9BD867: FF 50 14           -  call dword ptr [eax+14]
0C9BD86A: 8B CE              -  mov ecx,esi
0C9BD86C: E8 1F 6F EB F6     -  call 03874790
0C9BD871: 8B C8              -  mov ecx,eax
0C9BD873: 8B 01              -  mov eax,[ecx]
0C9BD875: 8B 40 34           -  mov eax,[eax+34]
0C9BD878: FF 50 10           -  call dword ptr [eax+10]
0C9BD87B: 85 C0              -  test eax,eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Unlimited Stack Splitting"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(split,48 8B D0 8B CE 8B 01 8B 40 34 FF 50 14 8B 85)
split:
  db 90
registersymbol(split)

[DISABLE]
split:
  db 48
unregistersymbol(split)

{
// ORIGINAL CODE - INJECTION POINT: 0C970AB2

0C970A90: E8 EB 34 6C 64     -  call mscorlib.ni.dll+993F80
0C970A95: 8B 45 D8           -  mov eax,[ebp-28]
0C970A98: 8B 56 04           -  mov edx,[esi+04]
0C970A9B: 3B 42 04           -  cmp eax,[edx+04]
0C970A9E: 0F 83 30 04 00 00  -  jae 0C970ED4
0C970AA4: 8B 74 82 08        -  mov esi,[edx+eax*4+08]
0C970AA8: 8B CE              -  mov ecx,esi
0C970AAA: 8B 01              -  mov eax,[ecx]
0C970AAC: 8B 40 34           -  mov eax,[eax+34]
0C970AAF: FF 50 10           -  call dword ptr [eax+10]
// ---------- INJECTING HERE ----------
0C970AB2: 48                 -  dec eax
0C970AB3: 8B D0              -  mov edx,eax
0C970AB5: 8B CE              -  mov ecx,esi
// ---------- DONE INJECTING  ----------
0C970AB7: 8B 01              -  mov eax,[ecx]
0C970AB9: 8B 40 34           -  mov eax,[eax+34]
0C970ABC: FF 50 14           -  call dword ptr [eax+14]
0C970ABF: 8B 85 68 FF FF FF  -  mov eax,[ebp-00000098]
0C970AC5: 8B 70 38           -  mov esi,[eax+38]
0C970AC8: 8B 45 D8           -  mov eax,[ebp-28]
0C970ACB: 3B 46 0C           -  cmp eax,[esi+0C]
0C970ACE: 72 0D              -  jb 0C970ADD
0C970AD0: B9 0D 00 00 00     -  mov ecx,0000000D
0C970AD5: 8D 51 09           -  lea edx,[ecx+09]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>76</ID>
          <Description>"Unlimited Crafting"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(craft,2B 45 E8 8B D0)
craft:
  db 90 90 90
registersymbol(craft)

[DISABLE]
craft:
  db 2B 45 E8
unregistersymbol(craft)

{
// ORIGINAL CODE - INJECTION POINT: 0C9FC24F

0C9FC22D: 8D 51 09           -  lea edx,[ecx+09]
0C9FC230: E8 4B 7D 63 64     -  call mscorlib.ni.dll+993F80
0C9FC235: 8B 47 04           -  mov eax,[edi+04]
0C9FC238: 3B 70 04           -  cmp esi,[eax+04]
0C9FC23B: 0F 83 29 01 00 00  -  jae 0C9FC36A
0C9FC241: 8B 7C B0 08        -  mov edi,[eax+esi*4+08]
0C9FC245: 8B CF              -  mov ecx,edi
0C9FC247: 8B 01              -  mov eax,[ecx]
0C9FC249: 8B 40 34           -  mov eax,[eax+34]
0C9FC24C: FF 50 10           -  call dword ptr [eax+10]
// ---------- INJECTING HERE ----------
0C9FC24F: 2B 45 E8           -  sub eax,[ebp-18]
0C9FC252: 8B D0              -  mov edx,eax
// ---------- DONE INJECTING  ----------
0C9FC254: 8B CF              -  mov ecx,edi
0C9FC256: 8B 01              -  mov eax,[ecx]
0C9FC258: 8B 40 34           -  mov eax,[eax+34]
0C9FC25B: FF 50 14           -  call dword ptr [eax+14]
0C9FC25E: A1 04 37 9C 04     -  mov eax,[049C3704]
0C9FC263: 8B B8 D4 00 00 00  -  mov edi,[eax+000000D4]
0C9FC269: 3B 77 0C           -  cmp esi,[edi+0C]
0C9FC26C: 72 0D              -  jb 0C9FC27B
0C9FC26E: B9 0D 00 00 00     -  mov ecx,0000000D
0C9FC273: 8D 51 09           -  lea edx,[ecx+09]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>craft</Name>
      <Address>0C9FC24F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>usage</Name>
      <Address>078FF848</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stamina</Name>
      <Address>0789D630</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fishing</Name>
      <Address>078E0E7A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fishing_ptr</Name>
      <Address>07810027</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fishing_hack</Name>
      <Address>0781002B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>treasure</Name>
      <Address>078E2653</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>treasure2</Name>
      <Address>078E2971</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>clock</Name>
      <Address>0D0572BF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>clock_ptr</Name>
      <Address>0D0572C1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>farmer</Name>
      <Address>0D020E22</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>farmer_ptr</Name>
      <Address>07AD0011</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>split</Name>
      <Address>07C0D72C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>harvest</Name>
      <Address>07C02C4C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inventory</Name>
      <Address>07BC60A5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>items</Name>
      <Address>0FFD127F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>items_save</Name>
      <Address>009D000D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>player</Name>
      <Address> 0E5B7BB0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>player_ptr</Name>
      <Address>0E5B7BB3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stackable</Name>
      <Address> 078DE824</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stackable_ptr</Name>
      <Address>00CC0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tool</Name>
      <Address> 0FD7B483</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tool_ptr</Name>
      <Address>00CE0012</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>crop</Name>
      <Address> 00CD7913</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>crop_ptr</Name>
      <Address>00D40011</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>run</Name>
      <Address> 163CB35F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>run_var</Name>
      <Address>0DED0012</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fruit_tree_growth</Name>
      <Address> 0FE30B75</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
