<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>68</ID>
      <Description>"[X] &lt;== Rise of Venice v1.1.2-4817 Steam Script 1.0"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Rise of Venice
 Game Version  : 1.1.2-4817
 Game Sponsor  : fennix102 (gift)
 Proces Name   : RiseOfVenice.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 26-Apr-2014
 Author        : Recifense
 History:
 02-Oct-13: First Release (v1.0.1)
 03-Oct-13: Release for v1.0.2
 09-Oct-13: Release for v1.0.3
 30-Nov-13: Release for v1.1.0 (STEAM)
 18-Dec-13: Release for v1.1.1 (STEAM)
 02-Mar-14: Release for v1.1.2 (STEAM)
 26-Apr-14: Release for v1.1.2-4817 (STEAM)
 Features:
 - Minimum Gold
 - Minimum capacity (1000)
 - Minimum existing Items on player's selected ship
 - Minimum capacity (10000)
 - Minimum existing Items on player's Warehouse
 - Strong Ships:
   - Hull (6300000)
   - Sail (250 each)
   - Max Battle Speed (30 knots)
 - Maximum crew
 - Minimum Ship Speed (30 knots)
 - Minimum ammo and full weapons
 - God Mode
===========================================
}

//=========================================
// Definitions
define(LUDO,"RiseOfVenice.exe")

define(MPRR,RiseOfVenice.exe+0034d738) //==#===
define(MPRC,RiseOfVenice.exe+001bc161) //==#===
define(SCOR,RiseOfVenice.exe+00332d9f) //==#===
define(SCOC,RiseOfVenice.exe+000a01b1) //==#===
define(SSRR,RiseOfVenice.exe+00309622) //==#===
define(SSRC,RiseOfVenice.exe+00309668) //==#===
define(WHLR,RiseOfVenice.exe+00333388) //==#===
define(WHLC,RiseOfVenice.exe+002ed99c) //==#===
define(MCPR,RiseOfVenice.exe+003091b0) //==#===
define(MCPC,RiseOfVenice.exe+003091eb) //==#===
define(GMAR,RiseOfVenice.exe+00309e39) //==#===
define(GMBX,RiseOfVenice.exe+003096aa) //==#===
define(GMSX,RiseOfVenice.exe+00309ebb) //==#===

define(JSCR,RiseOfVenice.exe+00332da6) //======
define(JSCC,RiseOfVenice.exe+000a01b8) //======

define(ctMMON,#63000) // Minimum Money Value
define(ctMSCO,#01000) // Minimum Ship Cargo Capacity
define(ctMWCO,#10000) // Minimum WH Cargo Capacity

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MPRR,8b 4a 24 85 c9 ?? ?? 83 3c 81 00 ?? ?? 8b 4a 28 85 c9 ?? ?? 83)
assert(MPRC,8b 47 24 85 c0 0f 84 ?? ?? ?? ?? 80 b8 60 06 00 00 04 0f 83 ??)
assert(SCOR,8b 41 04 eb 02 33 c0 50 53 8b ce e8 ?? ?? ?? ?? 83 c7 04 ff 4d)
assert(SCOC,8b 41 04 eb 02 33 c0 8b 4f 10 89 45 f8 8b 01 ff 50 34 8b 10 8b)
assert(SSRR,89 41 3c 33 c0 83 4c 81 0c 02 40 83 f8 04 ?? ?? 5d c2 04 00 cc)
assert(SSRC,81 c1 e7 03 00 00 b8 ?? ?? ?? ?? f7 e1 c1 ea 06 66 3b d3 ?? ??)
assert(WHLR,8b 49 04 85 c9 ?? ?? 80 7d 10 00 ?? ?? 8b 55 fc 8b 81 e4 01 00)
assert(WHLC,8b 49 04 85 c9 ?? ?? 8b 55 08 8b 81 e8 01 00 00 3b 02 ?? ?? 85)
assert(MCPR,fe 49 36 56 8d 71 0c ba 01 00 00 00 8b cf 33 c0 d3 e2 8b ca 81)
assert(MCPC,88 41 36 33 c0 81 4c 81 0c 00 01 00 00 40 83 f8 04 ?? ?? 5d c2)
assert(GMAR,89 4d fc 89 4f 34 8b ca b8 ?? ?? ?? ?? f7 65 08 c1 e9 06 c1 ea)
assert(GMBX,8b 4f 34 3b f1 ?? ?? b8 ?? ?? ?? ?? f7 e1 8b ca b8 ?? ?? ?? ??)
assert(GMSX,0f b6 c0 3a 54 08 28 ?? ?? 88 54 08 28 33 c0 8d 9b 00 00 00 00)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonPlayerR)
label(_BackMPR)
label(_ExitMPR)
label(_MonPlayerC)
label(_BackMPC)
label(_ExitMPC)
label(_ShipCargoR)
label(_ShipCR0)
label(_ShipCR1)
label(_ShipCR2)
label(_ShipCR3)
label(_ShipCR4)
label(_ShipCR5)
label(_ShipCR6)
label(_BackSCR)
label(_ExitSCR)
label(_ShipCargoC)
label(_ShipCC0)
label(_ShipCC1)
label(_ShipCC2)
label(_ShipCC3)
label(_ShipCC4)
label(_ShipCC5)
label(_ShipCC6)
label(_BackSCC)
label(_ExitSCC)
label(_ShipSailorR)
label(_ShipSR0)
label(_BackSSR)
label(_ExitSSR)
label(_ShipSailorC)
label(_ShipSC0)
label(_BackSSC)
label(_ExitSSC)
label(_WarehouseCargoR)
label(_WareCR0)
label(_WareCR1)
label(_WareCR2)
label(_WareCR3)
label(_WareCR4)
label(_WareCR5)
label(_BackWCR)
label(_ExitWCR)
label(_WarehouseCargoC)
label(_WareCC0)
label(_WareCC1)
label(_WareCC2)
label(_WareCC3)
label(_WareCC4)
label(_WareCC5)
label(_BackWCC)
label(_ExitWCC)
label(_MonCaptainR)
label(_BackMCR)
label(_ExitMCR)
label(_MonCaptainC)
label(_BackMCC)
label(_ExitMCC)
label(_GodModeAR)
label(_BackGAR)
label(_ExitGAR)
label(_GodModeBX)
label(_BackGBX)
label(_ExitGBX)
label(_GodModeSX)
label(_BackGSX)
label(_ExitGSX)
label(iEnableMMM)
label(iEnableMSC)
label(iEnableMSI)
label(iEnableMSW)
label(iEnableMSS)
label(iEnableFSS)
label(iEnableSSP)
label(iEnableMWC)
label(iEnableMWI)
label(iEnableMCP)
label(iEnableGMD)
label(iMinMoney)
label(iPlayerID)
label(iCapID)
label(pUnit)
label(pPlayerR)
label(pPlayerC)
label(pMoneyR)
label(pMoneyC)
label(pCommonR)
label(pCommonC)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayerR)
registersymbol(pPlayerC)
registersymbol(pMoneyR)
registersymbol(pMoneyC)
registersymbol(pCommonR)
registersymbol(pCommonC)
registersymbol(iEnableMMM)
registersymbol(iEnableMSC)
registersymbol(iEnableMSI)
registersymbol(iEnableMSW)
registersymbol(iEnableMSS)
registersymbol(iEnableFSS)
registersymbol(iEnableSSP)
registersymbol(iEnableMWC)
registersymbol(iEnableMWI)
registersymbol(iEnableMCP)
registersymbol(iEnableGMD)
registersymbol(iMinMoney)
registersymbol(iPlayerID)
registersymbol(iCapID)
registersymbol(aLast)

//=========================================
MyCode:
//========================================= 110 # ok
// Real value
// Called all the time
_MonPlayerR:
 mov dword ptr [aLast],'MP1R'

 push eax

 mov ecx,[edx+24]                  // get pMoneyR
 test ecx,ecx
 jz _ExitMPR

 mov eax,[edx+04]
 mov [iPlayerID],eax

 mov eax,[edx+08]
 mov [pCommonR],eax
 mov [pPlayerR],edx
 mov [pMoneyR],ecx

 cmp dword ptr [iEnableMMM],0
 je _ExitMPR                       // Jump if feature is disabled

 mov eax,[iMinMoney]
 cmp eax,[ecx+0000058c]
 js _ExitMPR

 mov [ecx+0000058c],eax            // Udate current gold

_ExitMPR:
 pop eax

 mov ecx,[edx+24]                  // Original code
 test ecx,ecx                      // Original code
 jmp _BackMPR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called all the time
_MonPlayerC:
 mov dword ptr [aLast],'MP1C'

 push ecx

 mov ecx,[edi+24]                  // get pMoneyC
 test ecx,ecx
 jz _ExitMPC

 mov eax,[edi+08]
 mov [pCommonC],eax
 mov [pPlayerC],edi
 mov [pMoneyC],ecx

 cmp dword ptr [iEnableMMM],0
 je _ExitMPC                       // Jump if feature is disabled

 mov eax,[iMinMoney]
 cmp eax,[ecx+0000058c]
 jle _ExitMPC

 mov [ecx+0000058c],eax            // Udate current gold

_ExitMPC:
 pop ecx

 mov eax,[edi+24]                  // Original code
 test eax,eax                      // Original code
 jmp _BackMPC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when a ship is selected
// ECX = LOADS
_ShipCargoR:
 mov dword ptr [aLast],'SC1R'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitSCR

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonR]
 jne _ExitSCR

 mov ecx,[esi+1c]                  // get PlayerID 20
 cmp ecx,[iPlayerID]
 jne _ExitSCR

 mov ecx,[esi+28]                  // get CaptainID 2c
 mov [iCapID],ecx

// Minimum Cargo Capacity
 cmp dword ptr [iEnableMSC],0
 je _ShipCR0                       // Jump if feature is disabled

 mov eax,ctMSCO
 mov ecx,[esi+48]  //50
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+48],ecx

// Minimum Item Cargo
_ShipCR0:
 mov ecx,[esi+4c] //54
 test ecx,ecx
 jz _ShipCR5

 cmp dword ptr [iEnableMSI],0
 je _ShipCR5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+4c]                  // Point to (first item - 04) 54
 lea ebx,[esi+000000a8]            // Point to first price b0
 xor ecx,ecx                       // Counter = 0

_ShipCR1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _ShipCR2

 cmp dword ptr [edi],00
 je _ShipCR1

 lea ecx,[ecx+01]
 jmp _ShipCR1
// Update Items
_ShipCR2:
 test ecx,ecx
 jz _ShipCR5

 mov eax,[esi+48]                  // Get max capacity 50
 xor edx,edx                       // EDX = 0
 mov edi,#16                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+4c],ecx //54
 mov [esi+00000100],ecx //108

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+50]  //58
 lea ebx,[esi+000000a8] //b0

_ShipCR3:
 cmp dword ptr [edi+ecx*4-04],00
 je _ShipCR4

 mov [edi+ecx*4-04],eax
 add [esi+4c],eax        // 54
 add [esi+00000100],eax  //108
 mov [ebx+ecx*4-04],edx

_ShipCR4:
 loop _ShipCR3

//Weapons
_ShipCR5:
 cmp dword ptr [iEnableMSW],0
 je _ShipCR6                       // Jump if feature is disabled

 mov eax,#60

 movzx ecx,word ptr [esi+00000188] // Saber //190
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000188],cx

 movzx ecx,word ptr [esi+0000018a] // Muskets 192
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018a],cx

 mov eax,#300

 movzx ecx,word ptr [esi+00000184] // Chain Shots 18c
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000184],cx

 movzx ecx,word ptr [esi+00000186] // Canister Shots 18e
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000186],cx

 mov eax,#10

 movzx ecx,word ptr [esi+0000018c] // Explosive Barrels 194
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018c],cx

 movzx ecx,word ptr [esi+0000018e] // Burning Oil 196
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018e],cx

//Speed
_ShipCR6:
 cmp dword ptr [iEnableMSS],0
 je _ExitSCR                       // Jump if feature is disabled

 mov eax,(float)120.0
 cmp eax,[esi+00000134] //13c
 js _ExitSCR

 mov [esi+00000134],eax

_ExitSCR:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov eax,[ecx+04]                  // Original code (get pCargoBase)
 jmp JSCR                          // Original code
 jmp _BackSCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when a ship is selected
_ShipCargoC:
 mov dword ptr [aLast],'SC1C'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitSCC

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonC]
 jne _ExitSCC

 mov ecx,[esi+1c]                  // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitSCC
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMSC],0
 je _ShipCC0                       // Jump if feature is disabled

 mov eax,ctMSCO
 mov ecx,[esi+48]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+48],ecx

// Minimum Item Cargo
_ShipCC0:
 mov ecx,[esi+4c]
 test ecx,ecx
 jz _ShipCC5

 cmp dword ptr [iEnableMSI],0
 je _ShipCC5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+4c]                  // Point to (first item - 04)
 lea ebx,[esi+000000a8]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_ShipCC1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _ShipCC2

 cmp dword ptr [edi],00
 je _ShipCC1

 lea ecx,[ecx+01]
 jmp _ShipCC1
// Update Items
_ShipCC2:
 test ecx,ecx
 jz _ShipCC5

 mov eax,[esi+48]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#16                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+4c],ecx
 mov [esi+00000100],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+50]
 lea ebx,[esi+000000a8]

_ShipCC3:
 cmp dword ptr [edi+ecx*4-04],00
 je _ShipCC4

 mov [edi+ecx*4-04],eax
 add [esi+4c],eax
 add [esi+00000100],eax
 mov [ebx+ecx*4-04],edx

_ShipCC4:
 loop _ShipCC3

//Weapons
_ShipCC5:
 cmp dword ptr [iEnableMSW],0
 je _ShipCC6                       // Jump if feature is disabled

 mov eax,#60

 movzx ecx,word ptr [esi+00000188] // Saber
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000188],cx

 movzx ecx,word ptr [esi+0000018a] // Muskets
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018a],cx

 mov eax,#300

 movzx ecx,word ptr [esi+00000184] // Chain Shots
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000184],cx

 movzx ecx,word ptr [esi+00000186] // Canister Shots
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000186],cx

 mov eax,#10

 movzx ecx,word ptr [esi+0000018c] // Explosive Barrels
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018c],cx

 movzx ecx,word ptr [esi+0000018e] // Burning Oil
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018e],cx

//Speed
_ShipCC6:
 cmp dword ptr [iEnableMSS],0
 je _ExitSCC                       // Jump if feature is disabled

 mov eax,(float)120.0
 cmp eax,[esi+00000134]
 js _ExitSCC

 mov [esi+00000134],eax

_ExitSCC:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov eax,[ecx+04]                  // Original code (get pCargoBase)
 jmp JSCC                          // Original code
 jmp _BackSCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when updating # sailors in Town
_ShipSailorR:
 mov dword ptr [aLast],'SS1R'

 push ebx
 push esi

 mov ebx,[ecx+08]                  // get pCommonR
 cmp ebx,[pCommonR]
 jne _ExitSSR

 mov ebx,[ecx+1c]                  // get PlayerID
 cmp ebx,[iPlayerID]
 jne _ExitSSR

 cmp dword ptr [iEnableFSS],0
 je _ShipSR0                       // Jump if feature is disabled

 movzx eax,word ptr [ecx+40]      // Get max sailors
 imul eax,eax,#1000

_ShipSR0:
 cmp dword ptr [iEnableSSP],0
 je _ExitSSR                       // Jump if feature is disabled

 mov ebx,fafafafa
 mov [ecx+28],ebx                  // Sail 4x250
 mov ebx,#6300000
 mov [ecx+34],ebx                  // Hull 6.300.000
 mov [ecx+38],ebx                  // Hull 6.300.000

 mov ebx,(float)120.0
 cmp ebx,[ecx+2c]
 js _ExitSSR

 mov [ecx+2c],ebx                  // Combat Speed (20 knots)

_ExitSSR:
 pop esi
 pop ebx

 mov [ecx+3c],eax                  // Original code (Upd sailors)
 xor eax,eax                       // Original code
 jmp _BackSSR                      // Back to main code

//========================================= 110 # ok
// Copy/Real value
// Called when updating # sailors in Town/Battle
_ShipSailorC:
 mov dword ptr [aLast],'SS1C'

 push ebx

 mov eax,[edi+1c]                  // get PlayerID
 cmp eax,[iPlayerID]
 jne _ExitSSC

 cmp dword ptr [iEnableFSS],0
 je _ShipSC0                       // Jump if feature is disabled

 movzx eax,word ptr [edi+40]      // Get max sailors
 imul eax,eax,#1000
 mov [edi+3c],eax

 mov ecx,eax

_ShipSC0:
 cmp dword ptr [iEnableSSP],0
 je _ExitSSC                       // Jump if feature is disabled

 mov ebx,fafafafa
 mov [edi+28],ebx                  // Sail 4x250
 mov ebx,#6300000
 mov [edi+34],ebx                  // Hull 6.300.000
 mov [edi+38],ebx                  // Hull 6.300.000

 mov ebx,(float)120.0
 cmp ebx,[edi+2c]
 js _ExitSSC

 mov [edi+2c],ebx                  // Combat Speed (20 knots)

_ExitSSC:
 pop ebx

 add ecx,000003E7                  // Original code
 jmp _BackSSC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when a warehouse is selected to sell/buy
_WarehouseCargoR:
 mov dword ptr [aLast],'WC1R'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitWCR

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonR]
 jne _ExitWCR

 mov ecx,[esi+000001e4]            // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitWCR
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMWC],0
 je _WareCR0                       // Jump if feature is disabled

 mov eax,ctMWCO
 mov ecx,[esi+2c]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+2c],ecx

// Minimum Item Cargo
_WareCR0:
 mov ecx,[esi+30]
 test ecx,ecx
 jz _WareCR5

 cmp dword ptr [iEnableMWI],0
 je _WareCR5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+30]                  // Point to (first item - 04)
 lea ebx,[esi+0000008c]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_WareCR1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _WareCR2

 cmp dword ptr [edi],00
 je _WareCR1

 lea ecx,[ecx+01]
 jmp _WareCR1
// Update Items
_WareCR2:
 test ecx,ecx
 jz _WareCR5

 mov eax,[esi+2c]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#44                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+30],ecx
 mov [esi+000000e4],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+34]
 lea ebx,[esi+0000008c]

_WareCR3:
 cmp dword ptr [edi+ecx*4-04],00
 je _WareCR4

 mov [edi+ecx*4-04],eax
 add [esi+30],eax
 add [esi+000000e4],eax
 mov [ebx+ecx*4-04],edx

_WareCR4:
 loop _WareCR3

_WareCR5:
_ExitWCR:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov ecx,[ecx+04]                  // Original code (get pWarehouse)
 test ecx,ecx                      // Original code
 jmp _BackWCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when a warehouse is selected to sell/buy
_WarehouseCargoC:
 mov dword ptr [aLast],'WC1C'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitWCC

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonC]
 jne _ExitWCC

 mov ecx,[esi+000001e4]            // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitWCC
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMWC],0
 je _WareCC0                       // Jump if feature is disabled

 mov eax,ctMWCO
 mov ecx,[esi+2c]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+2c],ecx

// Minimum Item Cargo
_WareCC0:
 mov ecx,[esi+30]
 test ecx,ecx
 jz _WareCC5

 cmp dword ptr [iEnableMWI],0
 je _WareCC5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+30]                  // Point to (first item - 04)
 lea ebx,[esi+0000008c]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_WareCC1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _WareCC2

 cmp dword ptr [edi],00
 je _WareCC1

 lea ecx,[ecx+01]
 jmp _WareCC1
// Update Items
_WareCC2:
 test ecx,ecx
 jz _WareCC5

 mov eax,[esi+2c]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#44                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+30],ecx
 mov [esi+000000e4],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+34]
 lea ebx,[esi+0000008c]

_WareCC3:
 cmp dword ptr [edi+ecx*4-04],00
 je _WareCC4

 mov [edi+ecx*4-04],eax
 add [esi+30],eax
 add [esi+000000e4],eax
 mov [ebx+ecx*4-04],edx

_WareCC4:
 loop _WareCC3

_WareCC5:
_ExitWCC:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov ecx,[ecx+04]                  // Original code (get pWarehouse)
 test ecx,ecx                      // Original code
 jmp _BackWCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when using points
_MonCaptainR:
 mov dword ptr [aLast],'MC1R'
 push edx

 mov edx,[ecx+04]
 cmp edx,[iCapID]
 jne _ExitMCR

 mov edx,[ecx+08]
 cmp edx,[pCommonR]
 jne _ExitMCR

 cmp dword ptr [iEnableMCP],0
 je _ExitMCR                       // Jump if feature is disabled

 inc [ecx+36]

_ExitMCR:
 pop edx

 dec [ecx+36]                      // Original code (dec points)
 push esi                          // Original code
 lea esi,[ecx+0C]                  // Original code
 jmp _BackMCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when using points
_MonCaptainC:
 mov dword ptr [aLast],'MC1C'
 push edx

 mov edx,[ecx+04]
 cmp edx,[iCapID]
 jne _ExitMCC

 mov edx,[ecx+08]
 cmp edx,[pCommonC]
 jne _ExitMCC

 cmp dword ptr [iEnableMCP],0
 je _ExitMCC                       // Jump if feature is disabled

 cmp al,[ecx+36]
 jge _ExitMCC

 mov al,[ecx+36]

_ExitMCC:
 pop edx

 mov [ecx+36],al                   // Original code (dec points)
 xor eax,eax                       // Original code
 jmp _BackMCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when decreasing by Attrition (Hull)
_GodModeAR:
 mov dword ptr [aLast],'GA1R'
 push eax

 mov eax,[edi+08]
 cmp eax,[pCommonR]
 jne _ExitGAR

 mov eax,[edi+1c]
 cmp eax,[iPlayerID]
 jne _ExitGAR

 cmp dword ptr [iEnableGMD],0
 je _ExitGAR                       // Jump if feature is disabled

 mov ecx,[edi+38]

_ExitGAR:
 pop eax

 mov [ebp-04],ecx                  // Original code
 mov [edi+34],ecx                  // Original code (Updating Hull)
 jmp _BackGAR                      // Back to main code

//========================================= 110 # ok
// Real/Copy value
// Called when decreasing in Battle (Hull)
_GodModeBX:
 mov dword ptr [aLast],'GB1X'
 push eax

 mov eax,[edi+1c]
 cmp eax,[iPlayerID]
 jne _ExitGBX

 cmp dword ptr [iEnableGMD],0
 je _ExitGBX                       // Jump if feature is disabled

 mov esi,[edi+38]
 mov [edi+34],esi

_ExitGBX:
 pop eax

 mov ecx,[edi+34]                  // Original code (rd cHull)
 cmp esi,ecx                       // Original code
 jmp _BackGBX                      // Back to main code

//========================================= 110 # ok
// Real/Copy value
// Called when decreasing in Battle (Sail)
_GodModeSX:
 mov dword ptr [aLast],'GS1X'
 movzx eax,al                      // Original code (sail index)

 push ebx

 mov ebx,[ecx+1c]
 cmp ebx,[iPlayerID]
 jne _ExitGSX

 cmp dword ptr [iEnableGMD],0
 je _ExitGSX                       // Jump if feature is disabled

 mov dl,[eax+ecx+28]

_ExitGSX:
 pop ebx

 cmp dl,[eax+ecx+28]               // Original code (rd sail)
 jmp _BackGSX                      // Back to main code

//=========================================
 db '========================================&gt;'
 db 'CE6.3 Script by Recifense 042614'
//=========================================
// Variables
iEnableMMM:
 dd 0
iEnableMSC:
 dd 0
iEnableMSI:
 dd 0
iEnableMSW:
 dd 0
iEnableMSS:
 dd 0
iEnableFSS:
 dd 0
iEnableSSP:
 dd 0
iEnableMWC:
 dd 0
iEnableMWI:
 dd 0
iEnableMCP:
 dd 0
iEnableGMD:
 dd 0
iMinMoney:
 dd ctMMON
iPlayerID:
 dd 0
iCapID:
 dd 0
pCommonR:
 dd MyCode
pCommonC:
 dd MyCode
pPlayerR:
 dd 0
pPlayerC:
 dd 0
pMoneyR:
 dd 0
pMoneyC:
 dd 0
pUnit:
 dd 0
aLast:
 db 'CE63'

//=========================================
// Hacking Points
MPRR:
 jmp _MonPlayerR
_BackMPR:

MPRC:
 jmp _MonPlayerC
_BackMPC:

SCOR:
 jmp _ShipCargoR
_BackSCR:

SCOC:
 jmp _ShipCargoC
_BackSCC:

SSRR:
 jmp _ShipSailorR
_BackSSR:

SSRC:
 jmp _ShipSailorC
 nop
_BackSSC:

WHLR:
 jmp _WarehouseCargoR
_BackWCR:

WHLC:
 jmp _WarehouseCargoC
_BackWCC:

MCPR:
 jmp _MonCaptainR
 nop
 nop
_BackMCR:

MCPC:
 jmp _MonCaptainC
_BackMCC:

GMAR:
 jmp _GodModeAR
 nop
_BackGAR:

GMBX:
 jmp _GodModeBX
_BackGBX:

GMSX:
 jmp _GodModeSX
 nop
 nop
_BackGSX:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MPRR:
// mov ecx,[edx+24]
// test ecx,ecx
 db 8b 4a 24 85 c9

MPRC:
// mov eax,[edi+24]
// test eax,eax
 db 8b 47 24 85 c0

SCOR:
// mov eax,[ecx+04]
// jmp JSCR
 db 8b 41 04 eb 02

SCOC:
// mov eax,[ecx+04]
// jmp JSCC
 db 8b 41 04 eb 02

SSRR:
// mov [ecx+3C],eax
// xor eax,eax
 db 89 41 3c 33 c0

SSRC:
// add ecx,000003E7
 db 81 c1 e7 03 00 00

WHLR:
// mov ecx,[ecx+04]
// test ecx,ecx
 db 8b 49 04 85 c9

WHLC:
// mov ecx,[ecx+04]
// test ecx,ecx
 db 8b 49 04 85 c9

MCPR:
// dec [ecx+36]
// push esi
// lea esi,[ecx+0C]
 db fe 49 36 56 8d 71 0c

MCPC:
// mov [ecx+36],al
// xor eax,eax
 db 88 41 36 33 c0

GMAR:
// mov [ebp-04],ecx
// mov [edi+34],ecx
 db 89 4d fc 89 4f 34

GMBX:
// mov ecx,[edi+34]
// cmp esi,ecx
 db 8b 4f 34 3b f1

GMSX:
// movzx eax,al
// cmp dl,[eax+ecx+28]
 db 0f b6 c0 3a 54 08 28

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pPlayerR)
unregistersymbol(pPlayerC)
unregistersymbol(pMoneyR)
unregistersymbol(pMoneyC)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableMSI)
unregistersymbol(iEnableMSW)
unregistersymbol(iEnableMSS)
unregistersymbol(iEnableFSS)
unregistersymbol(iEnableSSP)
unregistersymbol(iEnableMWC)
unregistersymbol(iEnableMWI)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableGMD)
unregistersymbol(iMinMoney)
unregistersymbol(iCapID)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v1.1.2-4789:
define(MPRR,RiseOfVenice.exe+0034c958) //==#==
define(MPRC,RiseOfVenice.exe+001bbcf1) //==#==
define(SCOR,RiseOfVenice.exe+00331dbf) //==#==
define(SCOC,RiseOfVenice.exe+0009fb01) //==#==
define(SSRR,RiseOfVenice.exe+00308af2) //==#==
define(SSRC,RiseOfVenice.exe+00308b38) //==#==
define(WHLR,RiseOfVenice.exe+003323a8) //==#==
define(WHLC,RiseOfVenice.exe+002ece1c) //==#==
define(MCPR,RiseOfVenice.exe+003086b0) //==#==
define(MCPC,RiseOfVenice.exe+003086eb) //==#==
define(GMAR,RiseOfVenice.exe+00309319) //==#==
define(GMBX,RiseOfVenice.exe+00308b7a) //==#==
define(GMSX,RiseOfVenice.exe+0030939b) //==#==

define(JSCR,RiseOfVenice.exe+00331dc6) //=====
define(JSCC,RiseOfVenice.exe+0009fb08) //=====

v1.1.0
define(MPRR,RiseOfVenice.exe+0034c538) //==#
define(MPRC,RiseOfVenice.exe+001bbfa1) //==#
define(SCOR,RiseOfVenice.exe+00331b7f) //==#
define(SCOC,RiseOfVenice.exe+000a05b1) //==#
define(SSRR,RiseOfVenice.exe+00308432) //==#
define(SSRC,RiseOfVenice.exe+00308478) //==#
define(WHLR,RiseOfVenice.exe+00332168) //==#
define(WHLC,RiseOfVenice.exe+002ec90c) //==#
define(MCPR,RiseOfVenice.exe+00307ff0) //==#
define(MCPC,RiseOfVenice.exe+0030802b) //==#
define(GMAR,RiseOfVenice.exe+00308c49) //==#
define(GMBX,RiseOfVenice.exe+003084ba) //==#
define(GMSX,RiseOfVenice.exe+00308ccb) //==#

define(JSCR,RiseOfVenice.exe+00331b86) //===
define(JSCC,RiseOfVenice.exe+000a05b8) //===

v103:
define(MPRR,RiseOfVenice.exe+0033967f) //==
define(MPRC,RiseOfVenice.exe+001baa61) //==
define(SCOR,RiseOfVenice.exe+0031b6cf) //==
define(SCOC,RiseOfVenice.exe+000a1db1) //==
define(SSRR,RiseOfVenice.exe+002f7b02) //==
define(SSRC,RiseOfVenice.exe+002f7b48) //==
define(WHLR,RiseOfVenice.exe+0031bcb8) //==
define(WHLC,RiseOfVenice.exe+00064cef) //==
define(MCPR,RiseOfVenice.exe+002f76b0) //==
define(MCPC,RiseOfVenice.exe+002f76eb) //==
define(GMAR,RiseOfVenice.exe+002f8329) //==
define(GMBX,RiseOfVenice.exe+002f7b8a) //==
define(GMSX,RiseOfVenice.exe+002f839b) //==

define(JSCR,RiseOfVenice.exe+0031b6d6) //==
define(JSCC,RiseOfVenice.exe+000a1db8) //==
------------------------------------------
v102:
define(MPRR,RiseOfVenice.exe+003389ef) //=
define(MPRC,RiseOfVenice.exe+001b9f01) //=
define(SCOR,RiseOfVenice.exe+0031ac5f) //=
define(SCOC,RiseOfVenice.exe+000a0ff1) //=
define(SSRR,RiseOfVenice.exe+002f7022) //=
define(SSRC,RiseOfVenice.exe+002f7068) //=
define(WHLR,RiseOfVenice.exe+0031b248) //=
define(WHLC,RiseOfVenice.exe+000642df) //=
define(MCPR,RiseOfVenice.exe+002f6bd0) //=
define(MCPC,RiseOfVenice.exe+002f6c0b) //=
define(GMAR,RiseOfVenice.exe+002f7849) //=
define(GMBX,RiseOfVenice.exe+002f70aa) //=
define(GMSX,RiseOfVenice.exe+002f78bb) //=

define(JSCR,RiseOfVenice.exe+0031ac66) //=
define(JSCC,RiseOfVenice.exe+000a0ff8) //=
------------------------------------------
v101:
define(MPRR,RiseOfVenice.exe+0033892f)
define(MPRC,RiseOfVenice.exe+001b9e01)
define(SCOR,RiseOfVenice.exe+0031ab9f)
define(SCOC,RiseOfVenice.exe+000a0f91)
define(SSRR,RiseOfVenice.exe+002f6f62)
define(SSRC,RiseOfVenice.exe+002f6fa8)
define(WHLR,RiseOfVenice.exe+0031b188)
define(WHLC,RiseOfVenice.exe+0006421f)
define(MCPR,RiseOfVenice.exe+002f6b10)
define(MCPC,RiseOfVenice.exe+002f6b4b)
define(GMAR,RiseOfVenice.exe+002f7789)
define(GMBX,RiseOfVenice.exe+002f6fea)
define(GMSX,RiseOfVenice.exe+002f77fb)

define(JSCR,RiseOfVenice.exe+0031aba6)
define(JSCC,RiseOfVenice.exe+000a0f98)
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Enable/Disable Minimum Money =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMM</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>29</ID>
              <Description>"Minimum Money Value ==&gt;"</Description>
              <Color>0080FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinMoney</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Enable/Disable Minimum Ship Cargo Capacity =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSC</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Enable/Disable Fill Up Ship Cargo =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSI</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Enable/Disable Fill Up Ship Weapons =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSW</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Enable/Disable Ship Minimum Speed =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSS</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>45</ID>
          <Description>"Enable/Disable Fill Up Ship Crew =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableFSS</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"Enable/Disable Minimum Warehouse Capacity =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMWC</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Enable/Disable Strong Ships =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableSSP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Enable/Disable Fill Up Warehouse =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMWI</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Enable/Disable Freeze Captain's Points =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMCP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>69</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pCommonR</Name>
      <Address>103808A8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommonC</Name>
      <Address>103808AC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iPlayerID</Name>
      <Address>103808A0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>{
===========================================
 Game Title    : Rise of Venice
 Game Version  : 1.1.2-4817
 Game Sponsor  : fennix102 (gift)
 Proces Name   : RiseOfVenice.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 26-Apr-2014
 Author        : Recifense
 History:
 02-Oct-13: First Release (v1.0.1)
 03-Oct-13: Release for v1.0.2
 09-Oct-13: Release for v1.0.3
 30-Nov-13: Release for v1.1.0 (STEAM)
 18-Dec-13: Release for v1.1.1 (STEAM)
 02-Mar-14: Release for v1.1.2 (STEAM)
 26-Apr-14: Release for v1.1.2-4817 (STEAM)
 Features:
 - Minimum Gold
 - Minimum capacity (1000)
 - Minimum existing Items on player's selected ship
 - Minimum capacity (10000)
 - Minimum existing Items on player's Warehouse
 - Strong Ships:
   - Hull (6300000)
   - Sail (250 each)
   - Max Battle Speed (30 knots)
 - Maximum crew
 - Minimum Ship Speed (30 knots)
 - Minimum ammo and full weapons
 - God Mode
===========================================
}

//=========================================
// Definitions
define(LUDO,"RiseOfVenice.exe")

define(MPRR,RiseOfVenice.exe+0034d738) //==#===
define(MPRC,RiseOfVenice.exe+001bc161) //==#===
define(SCOR,RiseOfVenice.exe+00332d9f) //==#===
define(SCOC,RiseOfVenice.exe+000a01b1) //==#===
define(SSRR,RiseOfVenice.exe+00309622) //==#===
define(SSRC,RiseOfVenice.exe+00309668) //==#===
define(WHLR,RiseOfVenice.exe+00333388) //==#===
define(WHLC,RiseOfVenice.exe+002ed99c) //==#===
define(MCPR,RiseOfVenice.exe+003091b0) //==#===
define(MCPC,RiseOfVenice.exe+003091eb) //==#===
define(GMAR,RiseOfVenice.exe+00309e39) //==#===
define(GMBX,RiseOfVenice.exe+003096aa) //==#===
define(GMSX,RiseOfVenice.exe+00309ebb) //==#===

define(JSCR,RiseOfVenice.exe+00332da6) //======
define(JSCC,RiseOfVenice.exe+000a01b8) //======

define(ctMMON,#63000) // Minimum Money Value
define(ctMSCO,#01000) // Minimum Ship Cargo Capacity
define(ctMWCO,#10000) // Minimum WH Cargo Capacity

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MPRR,8b 4a 24 85 c9 ?? ?? 83 3c 81 00 ?? ?? 8b 4a 28 85 c9 ?? ?? 83)
assert(MPRC,8b 47 24 85 c0 0f 84 ?? ?? ?? ?? 80 b8 60 06 00 00 04 0f 83 ??)
assert(SCOR,8b 41 04 eb 02 33 c0 50 53 8b ce e8 ?? ?? ?? ?? 83 c7 04 ff 4d)
assert(SCOC,8b 41 04 eb 02 33 c0 8b 4f 10 89 45 f8 8b 01 ff 50 34 8b 10 8b)
assert(SSRR,89 41 3c 33 c0 83 4c 81 0c 02 40 83 f8 04 ?? ?? 5d c2 04 00 cc)
assert(SSRC,81 c1 e7 03 00 00 b8 ?? ?? ?? ?? f7 e1 c1 ea 06 66 3b d3 ?? ??)
assert(WHLR,8b 49 04 85 c9 ?? ?? 80 7d 10 00 ?? ?? 8b 55 fc 8b 81 e4 01 00)
assert(WHLC,8b 49 04 85 c9 ?? ?? 8b 55 08 8b 81 e8 01 00 00 3b 02 ?? ?? 85)
assert(MCPR,fe 49 36 56 8d 71 0c ba 01 00 00 00 8b cf 33 c0 d3 e2 8b ca 81)
assert(MCPC,88 41 36 33 c0 81 4c 81 0c 00 01 00 00 40 83 f8 04 ?? ?? 5d c2)
assert(GMAR,89 4d fc 89 4f 34 8b ca b8 ?? ?? ?? ?? f7 65 08 c1 e9 06 c1 ea)
assert(GMBX,8b 4f 34 3b f1 ?? ?? b8 ?? ?? ?? ?? f7 e1 8b ca b8 ?? ?? ?? ??)
assert(GMSX,0f b6 c0 3a 54 08 28 ?? ?? 88 54 08 28 33 c0 8d 9b 00 00 00 00)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonPlayerR)
label(_BackMPR)
label(_ExitMPR)
label(_MonPlayerC)
label(_BackMPC)
label(_ExitMPC)
label(_ShipCargoR)
label(_ShipCR0)
label(_ShipCR1)
label(_ShipCR2)
label(_ShipCR3)
label(_ShipCR4)
label(_ShipCR5)
label(_ShipCR6)
label(_BackSCR)
label(_ExitSCR)
label(_ShipCargoC)
label(_ShipCC0)
label(_ShipCC1)
label(_ShipCC2)
label(_ShipCC3)
label(_ShipCC4)
label(_ShipCC5)
label(_ShipCC6)
label(_BackSCC)
label(_ExitSCC)
label(_ShipSailorR)
label(_ShipSR0)
label(_BackSSR)
label(_ExitSSR)
label(_ShipSailorC)
label(_ShipSC0)
label(_BackSSC)
label(_ExitSSC)
label(_WarehouseCargoR)
label(_WareCR0)
label(_WareCR1)
label(_WareCR2)
label(_WareCR3)
label(_WareCR4)
label(_WareCR5)
label(_BackWCR)
label(_ExitWCR)
label(_WarehouseCargoC)
label(_WareCC0)
label(_WareCC1)
label(_WareCC2)
label(_WareCC3)
label(_WareCC4)
label(_WareCC5)
label(_BackWCC)
label(_ExitWCC)
label(_MonCaptainR)
label(_BackMCR)
label(_ExitMCR)
label(_MonCaptainC)
label(_BackMCC)
label(_ExitMCC)
label(_GodModeAR)
label(_BackGAR)
label(_ExitGAR)
label(_GodModeBX)
label(_BackGBX)
label(_ExitGBX)
label(_GodModeSX)
label(_BackGSX)
label(_ExitGSX)
label(iEnableMMM)
label(iEnableMSC)
label(iEnableMSI)
label(iEnableMSW)
label(iEnableMSS)
label(iEnableFSS)
label(iEnableSSP)
label(iEnableMWC)
label(iEnableMWI)
label(iEnableMCP)
label(iEnableGMD)
label(iMinMoney)
label(iPlayerID)
label(iCapID)
label(pUnit)
label(pPlayerR)
label(pPlayerC)
label(pMoneyR)
label(pMoneyC)
label(pCommonR)
label(pCommonC)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayerR)
registersymbol(pPlayerC)
registersymbol(pMoneyR)
registersymbol(pMoneyC)
registersymbol(pCommonR)
registersymbol(pCommonC)
registersymbol(iEnableMMM)
registersymbol(iEnableMSC)
registersymbol(iEnableMSI)
registersymbol(iEnableMSW)
registersymbol(iEnableMSS)
registersymbol(iEnableFSS)
registersymbol(iEnableSSP)
registersymbol(iEnableMWC)
registersymbol(iEnableMWI)
registersymbol(iEnableMCP)
registersymbol(iEnableGMD)
registersymbol(iMinMoney)
registersymbol(iPlayerID)
registersymbol(iCapID)
registersymbol(aLast)

//=========================================
MyCode:
//========================================= 110 # ok
// Real value
// Called all the time
_MonPlayerR:
 mov dword ptr [aLast],'MP1R'

 push eax

 mov ecx,[edx+24]                  // get pMoneyR
 test ecx,ecx
 jz _ExitMPR

 mov eax,[edx+04]
 mov [iPlayerID],eax

 mov eax,[edx+08]
 mov [pCommonR],eax
 mov [pPlayerR],edx
 mov [pMoneyR],ecx

 cmp dword ptr [iEnableMMM],0
 je _ExitMPR                       // Jump if feature is disabled

 mov eax,[iMinMoney]
 cmp eax,[ecx+0000058c]
 js _ExitMPR

 mov [ecx+0000058c],eax            // Udate current gold

_ExitMPR:
 pop eax

 mov ecx,[edx+24]                  // Original code
 test ecx,ecx                      // Original code
 jmp _BackMPR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called all the time
_MonPlayerC:
 mov dword ptr [aLast],'MP1C'

 push ecx

 mov ecx,[edi+24]                  // get pMoneyC
 test ecx,ecx
 jz _ExitMPC

 mov eax,[edi+08]
 mov [pCommonC],eax
 mov [pPlayerC],edi
 mov [pMoneyC],ecx

 cmp dword ptr [iEnableMMM],0
 je _ExitMPC                       // Jump if feature is disabled

 mov eax,[iMinMoney]
 cmp eax,[ecx+0000058c]
 jle _ExitMPC

 mov [ecx+0000058c],eax            // Udate current gold

_ExitMPC:
 pop ecx

 mov eax,[edi+24]                  // Original code
 test eax,eax                      // Original code
 jmp _BackMPC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when a ship is selected
// ECX = LOADS
_ShipCargoR:
 mov dword ptr [aLast],'SC1R'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitSCR

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonR]
 jne _ExitSCR

 mov ecx,[esi+1c]                  // get PlayerID 20
 cmp ecx,[iPlayerID]
 jne _ExitSCR

 mov ecx,[esi+28]                  // get CaptainID 2c
 mov [iCapID],ecx

// Minimum Cargo Capacity
 cmp dword ptr [iEnableMSC],0
 je _ShipCR0                       // Jump if feature is disabled

 mov eax,ctMSCO
 mov ecx,[esi+48]  //50
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+48],ecx

// Minimum Item Cargo
_ShipCR0:
 mov ecx,[esi+4c] //54
 test ecx,ecx
 jz _ShipCR5

 cmp dword ptr [iEnableMSI],0
 je _ShipCR5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+4c]                  // Point to (first item - 04) 54
 lea ebx,[esi+000000a8]            // Point to first price b0
 xor ecx,ecx                       // Counter = 0

_ShipCR1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _ShipCR2

 cmp dword ptr [edi],00
 je _ShipCR1

 lea ecx,[ecx+01]
 jmp _ShipCR1
// Update Items
_ShipCR2:
 test ecx,ecx
 jz _ShipCR5

 mov eax,[esi+48]                  // Get max capacity 50
 xor edx,edx                       // EDX = 0
 mov edi,#16                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+4c],ecx //54
 mov [esi+00000100],ecx //108

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+50]  //58
 lea ebx,[esi+000000a8] //b0

_ShipCR3:
 cmp dword ptr [edi+ecx*4-04],00
 je _ShipCR4

 mov [edi+ecx*4-04],eax
 add [esi+4c],eax        // 54
 add [esi+00000100],eax  //108
 mov [ebx+ecx*4-04],edx

_ShipCR4:
 loop _ShipCR3

//Weapons
_ShipCR5:
 cmp dword ptr [iEnableMSW],0
 je _ShipCR6                       // Jump if feature is disabled

 mov eax,#60

 movzx ecx,word ptr [esi+00000188] // Saber //190
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000188],cx

 movzx ecx,word ptr [esi+0000018a] // Muskets 192
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018a],cx

 mov eax,#300

 movzx ecx,word ptr [esi+00000184] // Chain Shots 18c
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000184],cx

 movzx ecx,word ptr [esi+00000186] // Canister Shots 18e
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000186],cx

 mov eax,#10

 movzx ecx,word ptr [esi+0000018c] // Explosive Barrels 194
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018c],cx

 movzx ecx,word ptr [esi+0000018e] // Burning Oil 196
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018e],cx

//Speed
_ShipCR6:
 cmp dword ptr [iEnableMSS],0
 je _ExitSCR                       // Jump if feature is disabled

 mov eax,(float)120.0
 cmp eax,[esi+00000134] //13c
 js _ExitSCR

 mov [esi+00000134],eax

_ExitSCR:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov eax,[ecx+04]                  // Original code (get pCargoBase)
 jmp JSCR                          // Original code
 jmp _BackSCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when a ship is selected
_ShipCargoC:
 mov dword ptr [aLast],'SC1C'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitSCC

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonC]
 jne _ExitSCC

 mov ecx,[esi+1c]                  // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitSCC
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMSC],0
 je _ShipCC0                       // Jump if feature is disabled

 mov eax,ctMSCO
 mov ecx,[esi+48]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+48],ecx

// Minimum Item Cargo
_ShipCC0:
 mov ecx,[esi+4c]
 test ecx,ecx
 jz _ShipCC5

 cmp dword ptr [iEnableMSI],0
 je _ShipCC5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+4c]                  // Point to (first item - 04)
 lea ebx,[esi+000000a8]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_ShipCC1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _ShipCC2

 cmp dword ptr [edi],00
 je _ShipCC1

 lea ecx,[ecx+01]
 jmp _ShipCC1
// Update Items
_ShipCC2:
 test ecx,ecx
 jz _ShipCC5

 mov eax,[esi+48]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#16                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+4c],ecx
 mov [esi+00000100],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+50]
 lea ebx,[esi+000000a8]

_ShipCC3:
 cmp dword ptr [edi+ecx*4-04],00
 je _ShipCC4

 mov [edi+ecx*4-04],eax
 add [esi+4c],eax
 add [esi+00000100],eax
 mov [ebx+ecx*4-04],edx

_ShipCC4:
 loop _ShipCC3

//Weapons
_ShipCC5:
 cmp dword ptr [iEnableMSW],0
 je _ShipCC6                       // Jump if feature is disabled

 mov eax,#60

 movzx ecx,word ptr [esi+00000188] // Saber
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000188],cx

 movzx ecx,word ptr [esi+0000018a] // Muskets
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018a],cx

 mov eax,#300

 movzx ecx,word ptr [esi+00000184] // Chain Shots
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000184],cx

 movzx ecx,word ptr [esi+00000186] // Canister Shots
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+00000186],cx

 mov eax,#10

 movzx ecx,word ptr [esi+0000018c] // Explosive Barrels
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018c],cx

 movzx ecx,word ptr [esi+0000018e] // Burning Oil
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+0000018e],cx

//Speed
_ShipCC6:
 cmp dword ptr [iEnableMSS],0
 je _ExitSCC                       // Jump if feature is disabled

 mov eax,(float)120.0
 cmp eax,[esi+00000134]
 js _ExitSCC

 mov [esi+00000134],eax

_ExitSCC:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov eax,[ecx+04]                  // Original code (get pCargoBase)
 jmp JSCC                          // Original code
 jmp _BackSCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when updating # sailors in Town
_ShipSailorR:
 mov dword ptr [aLast],'SS1R'

 push ebx
 push esi

 mov ebx,[ecx+08]                  // get pCommonR
 cmp ebx,[pCommonR]
 jne _ExitSSR

 mov ebx,[ecx+1c]                  // get PlayerID
 cmp ebx,[iPlayerID]
 jne _ExitSSR

 cmp dword ptr [iEnableFSS],0
 je _ShipSR0                       // Jump if feature is disabled

 movzx eax,word ptr [ecx+40]      // Get max sailors
 imul eax,eax,#1000

_ShipSR0:
 cmp dword ptr [iEnableSSP],0
 je _ExitSSR                       // Jump if feature is disabled

 mov ebx,fafafafa
 mov [ecx+28],ebx                  // Sail 4x250
 mov ebx,#6300000
 mov [ecx+34],ebx                  // Hull 6.300.000
 mov [ecx+38],ebx                  // Hull 6.300.000

 mov ebx,(float)120.0
 cmp ebx,[ecx+2c]
 js _ExitSSR

 mov [ecx+2c],ebx                  // Combat Speed (20 knots)

_ExitSSR:
 pop esi
 pop ebx

 mov [ecx+3c],eax                  // Original code (Upd sailors)
 xor eax,eax                       // Original code
 jmp _BackSSR                      // Back to main code

//========================================= 110 # ok
// Copy/Real value
// Called when updating # sailors in Town/Battle
_ShipSailorC:
 mov dword ptr [aLast],'SS1C'

 push ebx

 mov eax,[edi+1c]                  // get PlayerID
 cmp eax,[iPlayerID]
 jne _ExitSSC

 cmp dword ptr [iEnableFSS],0
 je _ShipSC0                       // Jump if feature is disabled

 movzx eax,word ptr [edi+40]      // Get max sailors
 imul eax,eax,#1000
 mov [edi+3c],eax

 mov ecx,eax

_ShipSC0:
 cmp dword ptr [iEnableSSP],0
 je _ExitSSC                       // Jump if feature is disabled

 mov ebx,fafafafa
 mov [edi+28],ebx                  // Sail 4x250
 mov ebx,#6300000
 mov [edi+34],ebx                  // Hull 6.300.000
 mov [edi+38],ebx                  // Hull 6.300.000

 mov ebx,(float)120.0
 cmp ebx,[edi+2c]
 js _ExitSSC

 mov [edi+2c],ebx                  // Combat Speed (20 knots)

_ExitSSC:
 pop ebx

 add ecx,000003E7                  // Original code
 jmp _BackSSC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when a warehouse is selected to sell/buy
_WarehouseCargoR:
 mov dword ptr [aLast],'WC1R'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitWCR

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonR]
 jne _ExitWCR

 mov ecx,[esi+000001e4]            // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitWCR
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMWC],0
 je _WareCR0                       // Jump if feature is disabled

 mov eax,ctMWCO
 mov ecx,[esi+2c]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+2c],ecx

// Minimum Item Cargo
_WareCR0:
 mov ecx,[esi+30]
 test ecx,ecx
 jz _WareCR5

 cmp dword ptr [iEnableMWI],0
 je _WareCR5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+30]                  // Point to (first item - 04)
 lea ebx,[esi+0000008c]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_WareCR1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _WareCR2

 cmp dword ptr [edi],00
 je _WareCR1

 lea ecx,[ecx+01]
 jmp _WareCR1
// Update Items
_WareCR2:
 test ecx,ecx
 jz _WareCR5

 mov eax,[esi+2c]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#44                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+30],ecx
 mov [esi+000000e4],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+34]
 lea ebx,[esi+0000008c]

_WareCR3:
 cmp dword ptr [edi+ecx*4-04],00
 je _WareCR4

 mov [edi+ecx*4-04],eax
 add [esi+30],eax
 add [esi+000000e4],eax
 mov [ebx+ecx*4-04],edx

_WareCR4:
 loop _WareCR3

_WareCR5:
_ExitWCR:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov ecx,[ecx+04]                  // Original code (get pWarehouse)
 test ecx,ecx                      // Original code
 jmp _BackWCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when a warehouse is selected to sell/buy
_WarehouseCargoC:
 mov dword ptr [aLast],'WC1C'

 push ebx
 push ecx
 push edx
 push esi
 push edi

 mov esi,[ecx+04]                  // get pCargoBase
 test esi,esi
 jz _ExitWCC

 mov ecx,[esi+08]                  // get pCommonR
 cmp ecx,[pCommonC]
 jne _ExitWCC

 mov ecx,[esi+000001e4]            // get PlayerID
 cmp ecx,[iPlayerID]
 jne _ExitWCC
// Minimum Cargo Capacity
 cmp dword ptr [iEnableMWC],0
 je _WareCC0                       // Jump if feature is disabled

 mov eax,ctMWCO
 mov ecx,[esi+2c]
 cmp ecx,eax
 cmovs ecx,eax
 mov [esi+2c],ecx

// Minimum Item Cargo
_WareCC0:
 mov ecx,[esi+30]
 test ecx,ecx
 jz _WareCC5

 cmp dword ptr [iEnableMWI],0
 je _WareCC5                       // Jump if feature is disabled

// Count Items
 lea edi,[esi+30]                  // Point to (first item - 04)
 lea ebx,[esi+0000008c]            // Point to first price
 xor ecx,ecx                       // Counter = 0

_WareCC1:
 lea edi,[edi+04]
 cmp edi,ebx
 jge _WareCC2

 cmp dword ptr [edi],00
 je _WareCC1

 lea ecx,[ecx+01]
 jmp _WareCC1
// Update Items
_WareCC2:
 test ecx,ecx
 jz _WareCC5

 mov eax,[esi+2c]                  // Get max capacity
 xor edx,edx                       // EDX = 0
 mov edi,#44                       // Leave some empty space
 sub eax,edi

 div ecx                           // eax &lt;= edx:eax/ecx (item per slot)

 xor ecx,ecx
 mov [esi+30],ecx
 mov [esi+000000e4],ecx

 mov ecx,#22                       // # of possible slots
 mov edx,(float)2.0
 lea edi,[esi+34]
 lea ebx,[esi+0000008c]

_WareCC3:
 cmp dword ptr [edi+ecx*4-04],00
 je _WareCC4

 mov [edi+ecx*4-04],eax
 add [esi+30],eax
 add [esi+000000e4],eax
 mov [ebx+ecx*4-04],edx

_WareCC4:
 loop _WareCC3

_WareCC5:
_ExitWCC:
 pop edi
 pop esi
 pop edx
 pop ecx
 pop ebx

 mov ecx,[ecx+04]                  // Original code (get pWarehouse)
 test ecx,ecx                      // Original code
 jmp _BackWCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when using points
_MonCaptainR:
 mov dword ptr [aLast],'MC1R'
 push edx

 mov edx,[ecx+04]
 cmp edx,[iCapID]
 jne _ExitMCR

 mov edx,[ecx+08]
 cmp edx,[pCommonR]
 jne _ExitMCR

 cmp dword ptr [iEnableMCP],0
 je _ExitMCR                       // Jump if feature is disabled

 inc [ecx+36]

_ExitMCR:
 pop edx

 dec [ecx+36]                      // Original code (dec points)
 push esi                          // Original code
 lea esi,[ecx+0C]                  // Original code
 jmp _BackMCR                      // Back to main code

//========================================= 110 # ok
// Copy value
// Called when using points
_MonCaptainC:
 mov dword ptr [aLast],'MC1C'
 push edx

 mov edx,[ecx+04]
 cmp edx,[iCapID]
 jne _ExitMCC

 mov edx,[ecx+08]
 cmp edx,[pCommonC]
 jne _ExitMCC

 cmp dword ptr [iEnableMCP],0
 je _ExitMCC                       // Jump if feature is disabled

 cmp al,[ecx+36]
 jge _ExitMCC

 mov al,[ecx+36]

_ExitMCC:
 pop edx

 mov [ecx+36],al                   // Original code (dec points)
 xor eax,eax                       // Original code
 jmp _BackMCC                      // Back to main code

//========================================= 110 # ok
// Real value
// Called when decreasing by Attrition (Hull)
_GodModeAR:
 mov dword ptr [aLast],'GA1R'
 push eax

 mov eax,[edi+08]
 cmp eax,[pCommonR]
 jne _ExitGAR

 mov eax,[edi+1c]
 cmp eax,[iPlayerID]
 jne _ExitGAR

 cmp dword ptr [iEnableGMD],0
 je _ExitGAR                       // Jump if feature is disabled

 mov ecx,[edi+38]

_ExitGAR:
 pop eax

 mov [ebp-04],ecx                  // Original code
 mov [edi+34],ecx                  // Original code (Updating Hull)
 jmp _BackGAR                      // Back to main code

//========================================= 110 # ok
// Real/Copy value
// Called when decreasing in Battle (Hull)
_GodModeBX:
 mov dword ptr [aLast],'GB1X'
 push eax

 mov eax,[edi+1c]
 cmp eax,[iPlayerID]
 jne _ExitGBX

 cmp dword ptr [iEnableGMD],0
 je _ExitGBX                       // Jump if feature is disabled

 mov esi,[edi+38]
 mov [edi+34],esi

_ExitGBX:
 pop eax

 mov ecx,[edi+34]                  // Original code (rd cHull)
 cmp esi,ecx                       // Original code
 jmp _BackGBX                      // Back to main code

//========================================= 110 # ok
// Real/Copy value
// Called when decreasing in Battle (Sail)
_GodModeSX:
 mov dword ptr [aLast],'GS1X'
 movzx eax,al                      // Original code (sail index)

 push ebx

 mov ebx,[ecx+1c]
 cmp ebx,[iPlayerID]
 jne _ExitGSX

 cmp dword ptr [iEnableGMD],0
 je _ExitGSX                       // Jump if feature is disabled

 mov dl,[eax+ecx+28]

_ExitGSX:
 pop ebx

 cmp dl,[eax+ecx+28]               // Original code (rd sail)
 jmp _BackGSX                      // Back to main code

//=========================================
 db '========================================&gt;'
 db 'CE6.3 Script by Recifense 042614'
//=========================================
// Variables
iEnableMMM:
 dd 0
iEnableMSC:
 dd 0
iEnableMSI:
 dd 0
iEnableMSW:
 dd 0
iEnableMSS:
 dd 0
iEnableFSS:
 dd 0
iEnableSSP:
 dd 0
iEnableMWC:
 dd 0
iEnableMWI:
 dd 0
iEnableMCP:
 dd 0
iEnableGMD:
 dd 0
iMinMoney:
 dd ctMMON
iPlayerID:
 dd 0
iCapID:
 dd 0
pCommonR:
 dd MyCode
pCommonC:
 dd MyCode
pPlayerR:
 dd 0
pPlayerC:
 dd 0
pMoneyR:
 dd 0
pMoneyC:
 dd 0
pUnit:
 dd 0
aLast:
 db 'CE63'

//=========================================
// Hacking Points
MPRR:
 jmp _MonPlayerR
_BackMPR:

MPRC:
 jmp _MonPlayerC
_BackMPC:

SCOR:
 jmp _ShipCargoR
_BackSCR:

SCOC:
 jmp _ShipCargoC
_BackSCC:

SSRR:
 jmp _ShipSailorR
_BackSSR:

SSRC:
 jmp _ShipSailorC
 nop
_BackSSC:

WHLR:
 jmp _WarehouseCargoR
_BackWCR:

WHLC:
 jmp _WarehouseCargoC
_BackWCC:

MCPR:
 jmp _MonCaptainR
 nop
 nop
_BackMCR:

MCPC:
 jmp _MonCaptainC
_BackMCC:

GMAR:
 jmp _GodModeAR
 nop
_BackGAR:

GMBX:
 jmp _GodModeBX
_BackGBX:

GMSX:
 jmp _GodModeSX
 nop
 nop
_BackGSX:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MPRR:
// mov ecx,[edx+24]
// test ecx,ecx
 db 8b 4a 24 85 c9

MPRC:
// mov eax,[edi+24]
// test eax,eax
 db 8b 47 24 85 c0

SCOR:
// mov eax,[ecx+04]
// jmp JSCR
 db 8b 41 04 eb 02

SCOC:
// mov eax,[ecx+04]
// jmp JSCC
 db 8b 41 04 eb 02

SSRR:
// mov [ecx+3C],eax
// xor eax,eax
 db 89 41 3c 33 c0

SSRC:
// add ecx,000003E7
 db 81 c1 e7 03 00 00

WHLR:
// mov ecx,[ecx+04]
// test ecx,ecx
 db 8b 49 04 85 c9

WHLC:
// mov ecx,[ecx+04]
// test ecx,ecx
 db 8b 49 04 85 c9

MCPR:
// dec [ecx+36]
// push esi
// lea esi,[ecx+0C]
 db fe 49 36 56 8d 71 0c

MCPC:
// mov [ecx+36],al
// xor eax,eax
 db 88 41 36 33 c0

GMAR:
// mov [ebp-04],ecx
// mov [edi+34],ecx
 db 89 4d fc 89 4f 34

GMBX:
// mov ecx,[edi+34]
// cmp esi,ecx
 db 8b 4f 34 3b f1

GMSX:
// movzx eax,al
// cmp dl,[eax+ecx+28]
 db 0f b6 c0 3a 54 08 28

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pPlayerR)
unregistersymbol(pPlayerC)
unregistersymbol(pMoneyR)
unregistersymbol(pMoneyC)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableMSI)
unregistersymbol(iEnableMSW)
unregistersymbol(iEnableMSS)
unregistersymbol(iEnableFSS)
unregistersymbol(iEnableSSP)
unregistersymbol(iEnableMWC)
unregistersymbol(iEnableMWI)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableGMD)
unregistersymbol(iMinMoney)
unregistersymbol(iCapID)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v1.1.2-4789:
define(MPRR,RiseOfVenice.exe+0034c958) //==#==
define(MPRC,RiseOfVenice.exe+001bbcf1) //==#==
define(SCOR,RiseOfVenice.exe+00331dbf) //==#==
define(SCOC,RiseOfVenice.exe+0009fb01) //==#==
define(SSRR,RiseOfVenice.exe+00308af2) //==#==
define(SSRC,RiseOfVenice.exe+00308b38) //==#==
define(WHLR,RiseOfVenice.exe+003323a8) //==#==
define(WHLC,RiseOfVenice.exe+002ece1c) //==#==
define(MCPR,RiseOfVenice.exe+003086b0) //==#==
define(MCPC,RiseOfVenice.exe+003086eb) //==#==
define(GMAR,RiseOfVenice.exe+00309319) //==#==
define(GMBX,RiseOfVenice.exe+00308b7a) //==#==
define(GMSX,RiseOfVenice.exe+0030939b) //==#==

define(JSCR,RiseOfVenice.exe+00331dc6) //=====
define(JSCC,RiseOfVenice.exe+0009fb08) //=====

v1.1.0
define(MPRR,RiseOfVenice.exe+0034c538) //==#
define(MPRC,RiseOfVenice.exe+001bbfa1) //==#
define(SCOR,RiseOfVenice.exe+00331b7f) //==#
define(SCOC,RiseOfVenice.exe+000a05b1) //==#
define(SSRR,RiseOfVenice.exe+00308432) //==#
define(SSRC,RiseOfVenice.exe+00308478) //==#
define(WHLR,RiseOfVenice.exe+00332168) //==#
define(WHLC,RiseOfVenice.exe+002ec90c) //==#
define(MCPR,RiseOfVenice.exe+00307ff0) //==#
define(MCPC,RiseOfVenice.exe+0030802b) //==#
define(GMAR,RiseOfVenice.exe+00308c49) //==#
define(GMBX,RiseOfVenice.exe+003084ba) //==#
define(GMSX,RiseOfVenice.exe+00308ccb) //==#

define(JSCR,RiseOfVenice.exe+00331b86) //===
define(JSCC,RiseOfVenice.exe+000a05b8) //===

v103:
define(MPRR,RiseOfVenice.exe+0033967f) //==
define(MPRC,RiseOfVenice.exe+001baa61) //==
define(SCOR,RiseOfVenice.exe+0031b6cf) //==
define(SCOC,RiseOfVenice.exe+000a1db1) //==
define(SSRR,RiseOfVenice.exe+002f7b02) //==
define(SSRC,RiseOfVenice.exe+002f7b48) //==
define(WHLR,RiseOfVenice.exe+0031bcb8) //==
define(WHLC,RiseOfVenice.exe+00064cef) //==
define(MCPR,RiseOfVenice.exe+002f76b0) //==
define(MCPC,RiseOfVenice.exe+002f76eb) //==
define(GMAR,RiseOfVenice.exe+002f8329) //==
define(GMBX,RiseOfVenice.exe+002f7b8a) //==
define(GMSX,RiseOfVenice.exe+002f839b) //==

define(JSCR,RiseOfVenice.exe+0031b6d6) //==
define(JSCC,RiseOfVenice.exe+000a1db8) //==
------------------------------------------
v102:
define(MPRR,RiseOfVenice.exe+003389ef) //=
define(MPRC,RiseOfVenice.exe+001b9f01) //=
define(SCOR,RiseOfVenice.exe+0031ac5f) //=
define(SCOC,RiseOfVenice.exe+000a0ff1) //=
define(SSRR,RiseOfVenice.exe+002f7022) //=
define(SSRC,RiseOfVenice.exe+002f7068) //=
define(WHLR,RiseOfVenice.exe+0031b248) //=
define(WHLC,RiseOfVenice.exe+000642df) //=
define(MCPR,RiseOfVenice.exe+002f6bd0) //=
define(MCPC,RiseOfVenice.exe+002f6c0b) //=
define(GMAR,RiseOfVenice.exe+002f7849) //=
define(GMBX,RiseOfVenice.exe+002f70aa) //=
define(GMSX,RiseOfVenice.exe+002f78bb) //=

define(JSCR,RiseOfVenice.exe+0031ac66) //=
define(JSCC,RiseOfVenice.exe+000a0ff8) //=
------------------------------------------
v101:
define(MPRR,RiseOfVenice.exe+0033892f)
define(MPRC,RiseOfVenice.exe+001b9e01)
define(SCOR,RiseOfVenice.exe+0031ab9f)
define(SCOC,RiseOfVenice.exe+000a0f91)
define(SSRR,RiseOfVenice.exe+002f6f62)
define(SSRC,RiseOfVenice.exe+002f6fa8)
define(WHLR,RiseOfVenice.exe+0031b188)
define(WHLC,RiseOfVenice.exe+0006421f)
define(MCPR,RiseOfVenice.exe+002f6b10)
define(MCPC,RiseOfVenice.exe+002f6b4b)
define(GMAR,RiseOfVenice.exe+002f7789)
define(GMBX,RiseOfVenice.exe+002f6fea)
define(GMSX,RiseOfVenice.exe+002f77fb)

define(JSCR,RiseOfVenice.exe+0031aba6)
define(JSCC,RiseOfVenice.exe+000a0f98)
}
</Comments>
</CheatTable>
