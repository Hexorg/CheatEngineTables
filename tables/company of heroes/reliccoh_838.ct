<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>32</ID>
      <Description>"[X] &lt;== Company of Heroes - ToV v2.700.2.42 New Steam Version Script 1.4"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Company of Heroes - Tale of Valor (New Steam Version)
 Game Version  : 2.700.2.42
 Game Sponsor  : zjkzjy
 Process Name  : RelicCOH.exe
 Script Version: 1.4
 CE Version    : 6.3
 Release date  : 09-Aug-2014
 Author        : Recifense
 History:
 27-Dec-11: Release for version 2.602.0
 12-Apr-13: Release for version 2.700.0 (Steam)
 06-Oct-13: Release for version 2.700.1 (Steam)
 08-Oct-13: Adapting the script for CE63
 09-Dec-13: Fixing undesired side-effect
 20-Dec-13: Release for version 2.700.2.22 (Steam)
 02-Mar-14: Release for version 2.700.2.30 (Steam)
 09-Aug-14: Release for version 2.700.2.42 (Steam)
 Features:
 - God Mode
 - Minimum Resources:
   - manpower
   - Munition
   - Fuel
===========================================
}

//=========================================
// Definitions
define(LUDO,"RelicCOH.exe")
define(MHPR,RelicCOH.exe+619502) //====
define(GDMD,WW2Mod.dll+0032c2e1) //====
define(MUNI,WW2Mod.dll+0032aae7) //====
define(MUN2,WW2Mod.dll+0032ab01) //====
define(GDM2,WW2Mod.dll+0032c0a0) //====

define(GDMC,WW2Mod.dll+0032beb0) //====

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MHPR,8b 89 88 08 00 00 85 c9 ?? ?? ff 15 ?? ?? ?? ?? 84 c0 ?? ?? 8b 4b)
assert(GDMD,e8 ?? ?? ?? ?? 5e 83 c4 14 c2 04 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??)
assert(MUNI,d9 47 40 da e9 df e0 f6 c4 44 ?? ?? d9 c0 d8 77 40 d9 1c 24 d9 04)
assert(MUN2,d9 5f 3c d9 5f 40 59 c3 dd d8 59 c3 ?? ?? ?? ?? ?? ?? ?? ?? ?? ??)
assert(GDM2,55 8b ec 83 e4 f8 83 ec 18 53 8b d8 8b 47 10 8b 48 5c c1 e9 04 56)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_MonHP01)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_GodMD00)
label(_BackGM0)
label(_ExitGM0)
label(_MonUnits)
label(_BackMU0)
label(_ExitMU0)
label(_MonUnits2)
label(_BackMU2)
label(_ExitMU2)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(pUnit)
label(pPlayer)
label(iEnableMPR)
label(iEnableGMD)
label(fMinRes)
label(iEAX)
label(iEAX1)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayer)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(fMinRes)

//=========================================
MyCode:
//========================================= 2700
_MonHumanPlayer:
 push eax

 mov ecx,[ecx+00000888]            // Get ptr to player  (Original code)
 or ecx,ecx                        // Null?
 jz _ExitMHP                       // Jump if true

 mov [pPlayer],ecx                 // Save ptr for further use

 cmp dword ptr [iEnableMPR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov eax,[fMinRes]                 // Get minimum resource value
 cmp eax,[ecx+00000264]            // Manpower &gt;= minimum ?
 jle _MonHP00                      // Jump if true

 mov [ecx+00000264],eax            // Update Manpower

_MonHP00:
 cmp eax,[ecx+00000268]            // Fuel &gt;= minimum ?
 jle _MonHP01                      // Jump if true

 mov [ecx+00000268],eax            // Update Fuel

_MonHP01:
 cmp eax,[ecx+0000026c]            // Munitions &gt;= minimum?
 jle _ExitMHP                      // Jump if true

 mov [ecx+0000026c],eax            // Update Munitions

_ExitMHP:
 pop eax
 jmp _BackMHP                      // Back to main code

//========================================= 2700
_GodMode:
 mov [pUnit],ecx                   // Save ptr for debugging

 cmp dword ptr [iEnableGMD],0
 je _GodMD00                       // Jump if feature is disabled

 mov eax,[ecx+10]
 test eax,eax
 jz _GodMD00

 mov eax,[eax+40]
 cmp eax,[pPlayer]
 jne _GodMD00

 mov eax,(float)63000.0
 mov [ecx+40],eax
 mov [ecx+3C],eax

 pop ecx
 jmp _ExitGM0

_GodMD00:
 call GDMC                         // Original code

_ExitGM0:
 jmp _BackGM0                      // Back to main code

//========================================= 2700
_MonUnits:
 push ecx

 mov ecx,[edi+10]
 test ecx,ecx
 jz _ExitMU0

 mov eax,[ecx+40]
 cmp eax,[pPlayer]
 jne _ExitMU0

 cmp dword ptr [iEnableGMD],0
 je _ExitMU0                       // Jump if feature is disabled

 mov eax,(float)10.0
// mov [ecx+50],eax
// mov [ecx+54],eax
// mov [ecx+58],eax

 mov eax,(float)63000.0
 cmp eax,[edi+3c]
 jle _ExitMU0

 mov [edi+40],eax
 mov [edi+3c],eax

_ExitMU0:
 pop ecx

 fld dword ptr [edi+40]
 fucompp
 jmp _BackMU0                      // Back to main code

//========================================= 2700
_MonUnits2:
 push eax

 fstp dword ptr [edi+3c]          // Original code
 fstp dword ptr [edi+40]          // Original code

 mov ecx,[edi+10]
 test ecx,ecx
 jz _ExitMU2

 mov eax,[ecx+40]
 cmp eax,[pPlayer]
 jne _ExitMU2

 cmp dword ptr [iEnableGMD],0
 je _ExitMU2                       // Jump if feature is disabled

 mov eax,(float)10.0
// mov [ecx+50],eax
// mov [ecx+54],eax
// mov [ecx+58],eax

 mov ecx,(float)63000.0
 cmp ecx,[edi+3C]
 jle _ExitMU2

 mov [edi+40],ecx
 mov [edi+3C],ecx

_ExitMU2:
 pop eax
 jmp _BackMU2                      // Back to main code

//========================================= 2700 - CE63
// Protection from sniper
_GodMode2:
 mov [pUnit],edi                   // Save ptr for debugging
 mov [iEAX],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 mov eax,[edi+10]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+40]
 cmp eax,[pPlayer]
 jne _ExitGM2

 mov eax,(float)63000.0
 mov [edi+40],eax
 mov [edi+3C],eax

 mov eax,[iEAX]

 ret 0010                          // Avoiding routine
//======
_ExitGM2:
 mov eax,[iEAX]

 push ebp                          // Original code
 mov ebp,esp                       // Original code
// and esp,F8                        // Original code
 db 83 e4 f8                       // CE63
 jmp _BackGM2                      // Back to main code

//=========================================
 db '=====================================&gt;'
 db 'CE6.2 Script by Recifense 080914'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
pUnit:
 dd 0
pPlayer:
 dd MyCode
fMinRes:
 dd (float)6300.0
iEAX:
 dd 0
iEAX1:
 dd 0

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

GDMD:
 jmp _GodMode
_BackGM0:

MUNI:
 jmp _MonUnits
_BackMU0:

MUN2:
 jmp _MonUnits2
 nop
_BackMU2:

GDM2:
 jmp _GodMode2
 nop
_BackGM2:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// mov ecx,[ecx+00000888]
 db 8b 89 88 08 00 00

GDMD:
 call GDMC

MUNI:
// fld dword ptr [edi+40]
// fucompp
 db d9 47 40 da e9

MUN2:
// fstp dword ptr [edi+3C]
// fstp dword ptr [edi+40]
 db d9 5f 3C d9 5f 40

GDM2:
// push ebp
// mov ebp,esp
// and esp,F8
 db 55 8b ec 83 e4 f8

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMR)
unregistersymbol(pPlayer)
unregistersymbol(fMinRes)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v2.700.1:
define(MHPR,RelicCOH.exe+4ae1ef) //=
define(GDMD,WW2Mod.dll+00329741) //=
define(MUNI,WW2Mod.dll+00327f47) //=
define(MUN2,WW2Mod.dll+00327f61) //=
define(GDM2,WW2Mod.dll+00329500) //=
define(GDMC,WW2Mod.dll+00329310) //=
--------------------------------
v2.700.0:
define(MHPR,RelicCOH.exe+4add3f)
define(GDMD,WW2Mod.dll+00329741)
define(MUNI,WW2Mod.dll+00327f47)
define(MUN2,WW2Mod.dll+00327f61)
define(GDM2,WW2Mod.dll+00329500)
define(GDMC,WW2Mod.dll+00329310)
--------------------------------
struct PLAYER:
0000 = 0507182c
0034 = iPlayerID (ex.: p = 1001, f= 1000)
00e0 = iCmdPoints
0214 = fmanpower
0218 = fFuel
0224 = fCmdPoints

struct UNIT_HP:
0000 = 05043720
000c = pUnknown
0010 = ppPlayer
0038 = fcHP
003c = fmHP (Sherman = 636.00) (HQ = 1500.00)

struct ppPLAYER:
0000 = 05571110
0034 = pPlayer
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Enable/Disable Minimum Resources =&gt; (1/0)  "</Description>
          <LastState Value="??" Activated="0" RealAddress="044501E0"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)  "</Description>
          <LastState Value="??" Activated="0" RealAddress="044501E4"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Population cap."</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov [ecx],0

originalcode:
mov edx,[ecx]
push ebx
mov [eax],edx

exit:
jmp returnhere

"WW2Mod.dll"+244950:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"WW2Mod.dll"+244950:
mov edx,[ecx]
push ebx
mov [eax],edx
//Alt: db 8B 11 53 89 10
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>aLast</Name>
      <Address>03DE0241</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>044501E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>044501EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPR</Name>
      <Address>044501E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMD</Name>
      <Address>044501E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fMinRes</Name>
      <Address>044501F0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Company of Heroes - Tale of Valor (New Steam Version)
 Game Version  : 2.700.2.42
 Game Sponsor  : zjkzjy
 Process Name  : RelicCOH.exe
 Script Version: 1.4
 CE Version    : 6.3
 Release date  : 09-Aug-2014
 Author        : Recifense
 History:
 27-Dec-11: Release for version 2.602.0
 12-Apr-13: Release for version 2.700.0 (Steam)
 06-Oct-13: Release for version 2.700.1 (Steam)
 08-Oct-13: Adapting the script for CE63
 09-Dec-13: Fixing undesired side-effect
 20-Dec-13: Release for version 2.700.2.22 (Steam)
 02-Mar-14: Release for version 2.700.2.30 (Steam)
 09-Aug-14: Release for version 2.700.2.42 (Steam)
 Features:
 - God Mode           [1]
 - Minimum Resources: [2]
   - manpower
   - Munition
   - Fuel
===========================================
[1] For player's units (*)
[2] Minimum Value = 6200.
(*) Some soldiers can still die, depending on the situation.
===========================================
HOTKEYS:
CTRL+Home = Enable  all cheats;
CTRL+End  = Disable all cheats;
===========================================
Cheers!
</Comments>
</CheatTable>
