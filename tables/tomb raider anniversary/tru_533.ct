<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>26</ID>
      <Description>"Undead (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(doAssignHealth)
globalalloc(tHealth,4)
globalalloc(pHealth,4)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHealth],esi
fstp dword ptr [tHealth]
cmp [tHealth],(float)100.0
jge doAssignHealth
mov dword ptr [tHealth],(float)100.0
//fcom dword ptr [minHealth]
//jge originalcode
//fstp dword ptr [tHealth]

doAssignHealth:
fld dword ptr [tHealth]

originalcode:
fstp dword ptr [esi]
fldz 
fcomp dword ptr [esi]

exit:
jmp returnhere

///
tHealth:
dd 0
pHealth:
dd 0
///

"tru.exe"+2F4FD7:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"tru.exe"+2F4FD7:
db D9 1E D9 EE D8 1E
//Alt: fstp dword ptr [esi]
//Alt: fldz
//Alt: fcomp dword ptr [esi]
dealloc(tHealth)
dealloc(pHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pHealth</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"debug"</Description>
          <Color>808080</Color>
          <VariableType>Float</VariableType>
          <Address>tHealth</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Inf. Adrenaline (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
globalalloc(pAdrenaline,4)
alloc(newmem6,2048) //2kb should be enough
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
fldz
fstp dword ptr [ecx+3C]

mov [pAdrenaline],ecx
mov dword ptr [ecx+3C],(float)500.0

originalcode6:
//fldz
//fstp dword ptr [ecx+3C]

exit6:
jmp returnhere6

"tru.exe"+2E6680:
jmp newmem6
returnhere6:

alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAdrenaline],ecx
fadd dword ptr [esp+04]
fstp dword ptr [ecx+3C]
mov dword ptr [ecx+3C],(float)500.0

originalcode2:
//fadd dword ptr [esp+04]
//fstp dword ptr [ecx+3C]

exit2:
jmp returnhere2

"tru.exe"+2F28D6:
jmp newmem2
nop
nop
returnhere2:

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAdrenaline],ecx
mov dword ptr [esp+04],(float)500.0

originalcode:
fld dword ptr [esp+04]
fst dword ptr [ecx+3C]

exit:
jmp returnhere

"tru.exe"+2F2991:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
"tru.exe"+2E6680:
fldz 
fstp dword ptr [ecx+3C]
//Alt: db D9 EE D9 59 3C
dealloc(pAdrenaline)
dealloc(newmem2)
"tru.exe"+2F28D6:
db D8 44 24 04 D9 59 3C
//Alt: fadd dword ptr [esp+04]
//Alt: fstp dword ptr [ecx+3C]
dealloc(newmem)
"tru.exe"+2F2991:
db D9 44 24 04 D9 51 3C
//Alt: fld dword ptr [esp+04]
//Alt: fst dword ptr [ecx+3C]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Adrenaline"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pAdrenaline</Address>
          <Offsets>
            <Offset>3C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Inf. Oxygen (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov dword ptr [esp+10],457A0000 //(float)4000.0

originalcode:
fld dword ptr [esp+10]
fst dword ptr [ecx]

exit:
jmp returnhere

"tru.exe"+355320:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"tru.exe"+355320:
db D9 44 24 10 D9 11
//Alt: fld dword ptr [esp+10]
//Alt: fst dword ptr [ecx]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Inf. Ammo v2 (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp al,00
jg originalcode
mov al,21

originalcode:
mov [ecx+0000012C],al

exit:
jmp returnhere

"tru.exe"+2C9EB8:
jmp newmem
nop
returnhere:

"tru.exe"+29E66F:
db 90 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"tru.exe"+2C9EB8:
db 88 81 2C 01 00 00
//Alt: mov [ecx+0000012C],al
"tru.exe"+29E66F:
db 66 29 0A
//Alt: sub [edx],cx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"press R to reload (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)
globalalloc(pCurrentAmmo2,4)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pCurrentAmmo2],eax
pushad
push 'R'      //key R
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode2
mov byte ptr [eax+0000012C],0000

originalcode2:
movzx edx,byte ptr [eax+0000012C]

exit2:
jmp returnhere2

///
pCurrentAmmo2:
dd 0
//

"tru.exe"+37C13E:
jmp newmem2
nop
nop
returnhere2:

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pCurrentAmmo1,4)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pCurrentAmmo1],eax
pushad
push 'R'      //key R
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov byte ptr [eax+0000012C],0000

originalcode:
movzx ebp,byte ptr [eax+0000012C]

exit:
jmp returnhere

///
pCurrentAmmo1:
dd 0
///

"tru.exe"+37C119:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
"tru.exe"+37C13E:
db 0F B6 90 2C 01 00 00
//Alt: movzx edx,byte ptr [eax+0000012C]
dealloc(pCurrentAmmo2)
dealloc(newmem)
"tru.exe"+37C119:
db 0F B6 A8 2C 01 00 00
//Alt: movzx ebp,byte ptr [eax+0000012C]
dealloc(pCurrentAmmo1)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Current Ammo Clip"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>pCurrentAmmo1</Address>
          <Offsets>
            <Offset>12C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Current Ammo Clip (Offhand)"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>pCurrentAmmo2</Address>
          <Offsets>
            <Offset>12C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Inf. Grenade (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add eax,FF
cmp ax,01
jge originalcode
mov ax,01

originalcode:
//add eax,FF
mov [esi+78],ax

exit:
jmp returnhere

"tru.exe"+2CB766:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"tru.exe"+2CB766:
db 83 C0 FF 66 89 46 78
//Alt: add eax,FF
//Alt: mov [esi+78],ax
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Inf. Medi (1.1)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pMedi,4)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pMedi],edi
add eax,FF
cmp ax,01
jge originalcode
mov ax,01

originalcode:
//add eax,FF
mov [edi+78],ax

exit:
jmp returnhere

///
pMedi:
dd 0
///

"tru.exe"+2CBBFD:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"tru.exe"+2CBBFD:
db 83 C0 FF 66 89 47 78
//Alt: add eax,FF
//Alt: mov [edi+78],ax
dealloc(pMedi)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Medi"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pMedi</Address>
          <Offsets>
            <Offset>78</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Inf. Ammo (1.1)"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
"tru.exe"+29E66F:
db 90 90 90

"tru.exe"+2C9EB6:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"tru.exe"+29E66F:
db 66 29 0A
//Alt: sub [edx],cx
"tru.exe"+2C9EB6:
db 2C 01
//Alt: sub al,01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"press X to reload (1.0)"</Description>
      <Color>808080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 'X'      //key X
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode2
mov byte ptr [eax+0000012C],0000

originalcode2:
movzx edx,byte ptr [eax+0000012C]

exit2:
jmp returnhere2

"tru.exe"+37B35E:
jmp newmem2
nop
nop
returnhere2:

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 'X'      //key X
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov byte ptr [eax+0000012C],0000

originalcode:
movzx ebp,byte ptr [eax+0000012C]

exit:
jmp returnhere

"tru.exe"+37B339:
jmp newmem
nop
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
"tru.exe"+37B35E:
db 0F B6 90 2C 01 00 00
//Alt: movzx edx,byte ptr [eax+0000012C]
dealloc(newmem)
"tru.exe"+37B339:
db 0F B6 A8 2C 01 00 00
//Alt: movzx ebp,byte ptr [eax+0000012C]
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>ammo - Code :mov [ecx+0000012C],al</Description>
      <Address>006C9218</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2C9218</ModuleNameOffset>
      <Before>
        <Byte>C0</Byte>
        <Byte>76</Byte>
        <Byte>21</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>81</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F7</Byte>
        <Byte>05</Byte>
        <Byte>7C</Byte>
        <Byte>63</Byte>
        <Byte>E1</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo ready read Code :movzx ebp,byte ptr [eax+0000012C]</Description>
      <Address>0077B339</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>37B339</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>A8</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>DB</Byte>
        <Byte>74</Byte>
        <Byte>23</Byte>
        <Byte>3B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo2 ready read Code :movzx edx,byte ptr [eax+0000012C]</Description>
      <Address>0077B35E</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>37B35E</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>90</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>03</Byte>
        <Byte>EA</Byte>
        <Byte>8B</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo read Code :cmp byte ptr [esi+0000012E],00</Description>
      <Address>0069B976</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>29B976</ModuleNameOffset>
      <Before>
        <Byte>F1</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>80</Byte>
        <Byte>BE</Byte>
        <Byte>2E</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>75</Byte>
        <Byte>03</Byte>
        <Byte>8B</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo - (1.1) Code :mov [ecx+0000012C],al</Description>
      <Address>006C9EB8</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2C9EB8</ModuleNameOffset>
      <Before>
        <Byte>C0</Byte>
        <Byte>76</Byte>
        <Byte>21</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
      </Before>
      <Actual>
        <Byte>88</Byte>
        <Byte>81</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F7</Byte>
        <Byte>05</Byte>
        <Byte>7C</Byte>
        <Byte>ED</Byte>
        <Byte>E7</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo ready read (1.1) Code :movzx ebp,byte ptr [eax+0000012C]</Description>
      <Address>0077C119</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>37C119</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>A8</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>DB</Byte>
        <Byte>74</Byte>
        <Byte>23</Byte>
        <Byte>3B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo2 ready read (1.1) Code :movzx edx,byte ptr [eax+0000012C]</Description>
      <Address>0077C13E</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>37C13E</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>90</Byte>
        <Byte>2C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>03</Byte>
        <Byte>EA</Byte>
        <Byte>8B</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>grenade - (1.1) Code :mov [esi+78],ax</Description>
      <Address>006CB769</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2CB769</ModuleNameOffset>
      <Before>
        <Byte>7E</Byte>
        <Byte>10</Byte>
        <Byte>83</Byte>
        <Byte>C0</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>8E</Byte>
        <Byte>D2</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch - (1.1) Code :sub [edx],cx</Description>
      <Address>0069E66F</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>29E66F</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>29</Byte>
        <Byte>0A</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>8A</Byte>
        <Byte>50</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>medi - Code :mov [edi+78],ax</Description>
      <Address>006CBC00</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2CBC00</ModuleNameOffset>
      <Before>
        <Byte>7E</Byte>
        <Byte>0C</Byte>
        <Byte>83</Byte>
        <Byte>C0</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>89</Byte>
        <Byte>47</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>F7</Byte>
        <Byte>CD</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ad - Code :fst dword ptr [ecx+3C]</Description>
      <Address>006F2995</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2F2995</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>51</Byte>
        <Byte>3C</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>D9</Byte>
        <Byte>DF</Byte>
        <Byte>E0</Byte>
        <Byte>F6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ad + Code :fstp dword ptr [ecx+3C]</Description>
      <Address>006F28DA</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2F28DA</ModuleNameOffset>
      <Before>
        <Byte>3C</Byte>
        <Byte>D8</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>59</Byte>
        <Byte>3C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>15</Byte>
        <Byte>64</Byte>
        <Byte>D7</Byte>
        <Byte>FA</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>oxygen - Code :fst dword ptr [ecx]</Description>
      <Address>00755324</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>355324</ModuleNameOffset>
      <Before>
        <Byte>10</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>A1</Byte>
        <Byte>94</Byte>
        <Byte>F0</Byte>
        <Byte>E7</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ad headshot - Code :fstp dword ptr [ecx+3C]</Description>
      <Address>006E6682</Address>
      <ModuleName>tru.exe</ModuleName>
      <ModuleNameOffset>2E6682</ModuleNameOffset>
      <Before>
        <Byte>01</Byte>
        <Byte>75</Byte>
        <Byte>05</Byte>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>59</Byte>
        <Byte>3C</Byte>
      </Actual>
      <After>
        <Byte>25</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>BF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pCurrentAmmo2</Name>
      <Address>18820000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCurrentAmmo1</Name>
      <Address>18830000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMedi</Name>
      <Address>18860000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHealth</Name>
      <Address>187D0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tHealth</Name>
      <Address>14BC0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAdrenaline</Name>
      <Address>187F0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
