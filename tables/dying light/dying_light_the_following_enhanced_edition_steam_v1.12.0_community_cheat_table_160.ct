<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>10934</ID>
      <Description>"                              Creator Credits"</Description>
      <LastState/>
      <Color>FF00FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


{$lua}



showMessage("Dying Light the following Enhanced Edition cheat table Steam v1.12.0 \n\n--------------------------------------------------------------------------\n\n WarnÂ·ing \n\n VAC (Valve Anti-Cheat System) was enabled for Dying Light on the 29th of January 2016 \n\n make sure to go to options to disable it before using table \n\n--------------------------------------------------------------------------\n\n this table is designed for single player and LAN line party")
showMessage("Thanks/Credits \n\n all credit goes to vng21092 for his table this table is based off of his plus stuff that I have worked on enjoy \n\n all credit goes to Matze500 for Weapons In Save Zone (thank you) \n\n all credit goes to mgr.inz.Player for Weapon Cloning (thank you)  \n\n all credit goes to akumakuja28 for Time of Day (thank you) \n\n all credit goes to ray2160 for: \n\n Instant Cooldown Flare/Airstrike ect.,Grappling Hook Instant Cooldown,Unlimited Camouflage,Challenge Time Freeze / Bozak Horde / The Following / Gaining Cradence,Hunter Shoot A Spit Instant Cooldown,Survivor Rank XP Points,Drive Level (Test Only),Power Level (Test Only),Agility Level (Test Only), Survivor Rank (Test Only),Legend Level (Test Only),Car Flamethrower Instant Cooldown,Unlimited Gas,Infinite Nitro,The Button Instant Cooldown,Instant LVL Agility/Power/Legend/Driver/Level Of Trust,Survivor Rank,Challenge CheckPoint Instantly Collect,Infinite Health,Cash")






{$asm}

82578923465792384567983425489364587346y5089726508937654:
nop


 
 
[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2721</ID>
      <Description>"Cash"</Description>
      <LastState/>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(Cash,gamedll_x64_rwdi.dll,89 43 40 E8 65 CA 73 FF)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BE7C73)

label(code)
label(return)

newmem:
  mov [rbx+40],9999
code:
  //mov [rbx+40],eax  // ORIGINAL CODE
  call gamedll_x64_rwdi.ShutdownGameScriptDLL+321C20
  jmp return

Cash:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(Cash)

[DISABLE]

Cash:
  db 89 43 40 E8 65 CA 73 FF

unregistersymbol(Cash)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2689</ID>
      <Description>"Simple Time of Day Adjuster"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>327648</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version:
  Date   : 2016-03-02
  Author : Akuma

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(Time_of_Day_Adjuster_ret ,gamedll_x64_rwdi.dll,F3 0F 59 F7 F3 0F 58 B7 A4 00 00 00) // should be unique
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+3929B7)

label(code)
label(return)

alloc(Time_Variables,48)
registersymbol(Time_Variables)

alloc(Sky_Pointer,48)
registersymbol(Sky_Pointer)

alloc(TOD2,8)
registersymbol(TOD2)

TOD2+4:
dd (float)9






newmem:

code:
  mov [Sky_Pointer],rdi

  movss [Time_Variables],xmm0
  movss [Time_Variables+4],xmm6
  movss xmm6,[Time_Variables+4]
  movss [Time_Variables+8],xmm7
  movss xmm7,[Time_Variables+8]
  mulss xmm6,xmm7
  addss xmm6,[rdi+000000A4]
  movss [Time_Variables+C],xmm6
  mulss Xmm6,[TOD2+4]      // Current Time in Real CLock
  cmp [TOD2],1
  je Flag_Out
  mov [TOD2],1
  movss [Time_Variables+10],xmm6
  divss xmm6,[TOD2+4]
  jmp return

Flag_Out:
  movss xmm6,[Time_Variables+10]   //24 hour cycle
  divss xmm6,[TOD2+4]
  //movss xmm6,[Time_Variables+10]
  // Dawn is .25
  // Fuck This I will fix this script later

  jmp return

Time_of_Day_Adjuster_ret :
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(Time_of_Day_Adjuster_ret )

[DISABLE]

Time_of_Day_Adjuster_ret :
  db F3 0F 59 F7 F3 0F 58 B7 A4 00 00 00

unregistersymbol(Time_of_Day_Adjuster_ret )
dealloc(newmem)

dealloc(Time_Variables)
unregistersymbol(Time_Variables)

dealloc(Sky_Pointer)
unregistersymbol(Sky_Pointer)

dealloc(TOD2)
unregistersymbol(TOD2)




{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+3929B7

"gamedll_x64_rwdi.dll"+392993: 0F 28 7C 24 30           -  movaps xmm7,[rsp+30]
"gamedll_x64_rwdi.dll"+392998: 48 8B 6C 24 78           -  mov rbp,[rsp+78]
"gamedll_x64_rwdi.dll"+39299D: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+3929A1: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+3929A2: C3                       -  ret
"gamedll_x64_rwdi.dll"+3929A3: 39 AF E0 00 00 00        -  cmp [rdi+000000E0],ebp
"gamedll_x64_rwdi.dll"+3929A9: 75 E3                    -  jne gamedll_x64_rwdi.dll+39298E
"gamedll_x64_rwdi.dll"+3929AB: 48 8B CF                 -  mov rcx,rdi
"gamedll_x64_rwdi.dll"+3929AE: E8 2D 01 00 00           -  call gamedll_x64_rwdi.dll+392AE0
"gamedll_x64_rwdi.dll"+3929B3: F3 0F 5E F0              -  divss xmm6,xmm0
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+3929B7: F3 0F 59 F7              -  mulss xmm6,xmm7
"gamedll_x64_rwdi.dll"+3929BB: F3 0F 58 B7 A4 00 00 00  -  addss xmm6,[rdi+000000A4]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+3929C3: F3 0F 11 B7 A4 00 00 00  -  movss [rdi+000000A4],xmm6
"gamedll_x64_rwdi.dll"+3929CB: EB C1                    -  jmp gamedll_x64_rwdi.dll+39298E
"gamedll_x64_rwdi.dll"+3929CD: 33 ED                    -  xor ebp,ebp
"gamedll_x64_rwdi.dll"+3929CF: 89 AF A8 00 00 00        -  mov [rdi+000000A8],ebp
"gamedll_x64_rwdi.dll"+3929D5: 48 8B 6C 24 78           -  mov rbp,[rsp+78]
"gamedll_x64_rwdi.dll"+3929DA: 48 83 C4 50              -  add rsp,50
"gamedll_x64_rwdi.dll"+3929DE: 5F                       -  pop rdi
"gamedll_x64_rwdi.dll"+3929DF: C3                       -  ret
"gamedll_x64_rwdi.dll"+3929E0: 40 57                    -  push rdi
"gamedll_x64_rwdi.dll"+3929E2: 48 83 EC 40              -  sub rsp,40
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2694</ID>
          <Description>" Time  ( Ctrl + up and down arrows = 1 hour )"</Description>
          <Color>0080FF</Color>
          <VariableType>Float</VariableType>
          <Address>Time_Variables+10</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>38</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>40</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2757</ID>
      <Description>"Activate all in this group"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2737</ID>
          <Description>"Infinite Health"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InfiniteHealth1,gamedll_x64_rwdi.dll,0F 28 C7 EB 08 0F 2F F0)
alloc(newmema,$100,"gamedll_x64_rwdi.dll"+AB82C4)

label(codea)
label(returna)

aobscanmodule(InfiniteHealth2,gamedll_x64_rwdi.dll,0F 28 C6 44 0F 28 44 24 20)
alloc(newmemb,$100,"gamedll_x64_rwdi.dll"+AB82CE)

label(codeb)
label(returnb)

newmema:

codea:
  jmp gamedll_x64_rwdi.ShutdownGameScriptDLL+AB5811
  jmp returna

InfiniteHealth1:
  jmp newmema
returna:
registersymbol(InfiniteHealth1)


newmemb:

codeb:
  movaps xmm8,[rsp+20]
  jmp returnb

InfiniteHealth2:
  jmp newmemb
  nop
  nop
  nop
  nop
returnb:
registersymbol(InfiniteHealth2)


[DISABLE]

InfiniteHealth1:
  db 0F 28 C7 EB 08

unregistersymbol(InfiniteHealth1)
dealloc(newmema)



InfiniteHealth2:
  db 0F 28 C6 44 0F 28 44 24 20

unregistersymbol(InfiniteHealth2)
dealloc(newmemb)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2521</ID>
          <Description>"Instant Kill"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(InstantKill,gamedll_x64_rwdi.dll,F3 0F 5C CE F3 41 0F 11)
registersymbol(InstantKill)

InstantKill:
db F3 0F 5C C9 F3 41 0F 11 4F 78

[Disable]

InstantKill:
db F3 0F 5C CE F3 41 0F 11 4F 7C
unregistersymbol(InstantKill)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2717</ID>
          <Description>"Instant Cooldown Flares"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InstantCooldownFlares,gamedll_x64_rwdi.dll,F3 0F 11 01 77 23)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+B9DA59)

label(code)
label(return)

newmem:

code:
  ja gamedll_x64_rwdi.ShutdownGameScriptDLL+B9AFC2
  jmp return

InstantCooldownFlares:
  jmp newmem
  nop
return:
registersymbol(InstantCooldownFlares)

[DISABLE]

InstantCooldownFlares:
  db F3 0F 11 01 77 23

unregistersymbol(InstantCooldownFlares)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2522</ID>
          <Description>"Infinite Stamina"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(InfiniteStamina1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8)
registersymbol(InfiniteStamina1)

aobscanmodule(InfiniteStamina2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10)
registersymbol(InfiniteStamina2)

InfiniteStamina1+5:
db F3 41 0F 58 C8

InfiniteStamina2:
db F3 0F 58 C7

[Disable]

InfiniteStamina1+5:
db F3 41 0F 5C C8
unregistersymbol(InfiniteStamina1)

InfiniteStamina2:
db F3 0F 5C C7
unregistersymbol(InfiniteStamina2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1102</ID>
          <Description>"Infinite Crafting Items"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(ici_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(ici_aob1,gamedll_x64_rwdi.dll,48 39 1C 28 75 59 8B 73 40 48 8D 4B 40)
registersymbol(ici_aob1)
label(returnhere_ici_1)


ici_1:
mov [rbx+40],10
mov esi,[rbx+40]
lea rcx,[rbx+40]
jmp returnhere_ici_1


ici_aob1+6:
jmp ici_1
nop
nop
returnhere_ici_1:

[Disable]

ici_aob1+6:
db 8B 73 40 48 8D 4B 40
unregistersymbol(ici_aob1)
dealloc(ici_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>328</ID>
          <Description>"Unlimited Potion Duration"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(UnlimitedPotionDuration,gamedll_x64_rwdi.dll,0F 28 F9 F3 0F 5C C7)
UnlimitedPotionDuration+3:
  db 90 90 90 90
registersymbol(UnlimitedPotionDuration)

[DISABLE]
UnlimitedPotionDuration+3:
  db F3 0F 5C C7
unregistersymbol(UnlimitedPotionDuration)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>354</ID>
          <Description>"Free Blueprint Requirements"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(FreeBluAOB1,gamedll_x64_rwdi.dll,41 8B 44 0D 00 85 C0)
aobscanmodule(FreeBluAOB2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01)
alloc(newmem,2048,gamedll_x64_rwdi.dll)

label(FreeBlu1Start)
label(FreeBlu2Start)
label(FreeBlue1End)
label(FreeBlue2End)
registersymbol(FreeBluAOB1)
registersymbol(FreeBluAOB2)

newmem:

FreeBlu1Start:
mov eax,0
jmp FreeBlue1End

FreeBlu2Start:
mov r12d,0
lea edx,[r9+01]
jmp FreeBlue2End

FreeBluAOB1:
jmp FreeBlu1Start
FreeBlue1End:

FreeBluAOB2:
jmp FreeBlu2Start
nop
nop
nop
FreeBlue2End:
 
[DISABLE]

dealloc(newmem)

FreeBluAOB1:
db 41 8B 44 0D 00

FreeBluAOB2:
db 44 8B 24 17 41 8D 51 01

unregistersymbol(FreeBluAOB1)
unregistersymbol(FreeBluAOB2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1236</ID>
          <Description>"Indestructible Weapons"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(iw_aob1,gamedll_x64_rwdi.dll,0F 2F F0 76 11 48 8B 47 18)
registersymbol(iw_aob1)

iw_aob1+3:
db 90 90


[DISABLE]

iw_aob1+3:
db 76 11
unregistersymbol(iw_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1100</ID>
          <Description>"Infinite Ammo"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90

[Disable]

ica_aob1+7:
db FF CA
unregistersymbol(ica_aob1)

ioa_aob1+6:
db 45 89 44 C2 04
unregistersymbol(ioa_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1103</ID>
          <Description>"Infinite Throwables / Weapon Upgrades"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90


[DISABLE]

itwu_aob1+3:
db 7E 39

itwu_aob1+7:
db FF CA
unregistersymbol(itwu_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2035</ID>
          <Description>"Infinite UV Flashlight"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

aobscanmodule(iuf_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28)
registersymbol(iuf_aob1)

iuf_aob1:
db F3 0F 58 C2

[Disable]

iuf_aob1:
db F3 0F 5C C2
unregistersymbol(iuf_aob1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2044</ID>
          <Description>"Easy Lock Picking "</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(elp_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(elp_aob1,gamedll_x64_rwdi.dll,F3 0F 10 56 50 F3 0F 10 4E 54)
registersymbol(elp_aob1)
label(returnhere_elp_1)


elp_1:
movss xmm1,[rsi+54]
mov [rsi+54],(float)999999
jmp returnhere_elp_1


elp_aob1+5:
jmp elp_1
returnhere_elp_1:

[Disable]

elp_aob1+5:
db F3 0F 10 4E 54
unregistersymbol(elp_aob1)
dealloc(elp_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2457</ID>
          <Description>"Grappling Hook Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InfiniteGrapplingHook,gamedll_x64_rwdi.dll,F3 0F 11 43 40 77)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+C9352A)

label(code)
label(return)

newmem:

code:
  jmp return

InfiniteGrapplingHook:
  jmp code
return:
registersymbol(InfiniteGrapplingHook)

[DISABLE]

InfiniteGrapplingHook:
  db F3 0F 11 43 40

unregistersymbol(InfiniteGrapplingHook)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2605</ID>
          <Description>"The Button Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(TheButton,gamedll_x64_rwdi.dll,F3 0F 11 83 48 2A 00 00)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AC1CEE)

label(code)
label(return)

newmem:

code:
  jmp return

TheButton:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TheButton)

[DISABLE]

TheButton:
  db F3 0F 11 83 48 2A 00 00

unregistersymbol(TheButton)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2601</ID>
          <Description>"Unlimited Gas"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(GasFreeFlamethrower,gamedll_x64_rwdi.dll,F3 0F 11 80 20 03 00 00)
alloc(newmema,$100,"gamedll_x64_rwdi.dll"+F883B2)

label(codea)
label(returna)

aobscanmodule(Gas1,gamedll_x64_rwdi.dll,48 8B 43 18 F3 0F 11 90 20 03 00 00)
alloc(newmemb,$100,"gamedll_x64_rwdi.dll"+F93001)

label(codeb)
label(returnb)

newmema:

codea:
  jmp returna

GasFreeFlamethrower:
  jmp codea
  nop
  nop
  nop
returna:
registersymbol(GasFreeFlamethrower)

newmemb:

codeb:
  movss [rax+00000320],xmm2
  jmp returnb

Gas1:
  jmp codeb
  nop
  nop
  nop
  nop
  nop
  nop
  nop
returnb:
registersymbol(Gas1)

[DISABLE]

GasFreeFlamethrower:
  db F3 0F 11 80 20 03 00 00

unregistersymbol(GasFreeFlamethrower)
dealloc(newmema)

Gas1:
  db 48 8B 43 18 F3 0F 11 90 20 03 00 00

unregistersymbol(Gas1)
dealloc(newmemb)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2603</ID>
          <Description>"Infinite Nitro"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(InfiniteNitro,gamedll_x64_rwdi.dll,F3 0F 11 4B 10 C7)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+F8AC1A)

label(code)
label(return)

newmem:

code:
  jmp return

InfiniteNitro:
  jmp code
return:
registersymbol(InfiniteNitro)

[DISABLE]

InfiniteNitro:
  db F3 0F 11 4B 10

unregistersymbol(InfiniteNitro)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2543</ID>
          <Description>"Car Flamethrower Instant Cooldown"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(CarFire,gamedll_x64_rwdi.dll,F3 0F 11 43 1C 76)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+F867C1)

label(code)
label(return)

newmem:

code:
  jmp return

CarFire:
  jmp code
return:
registersymbol(CarFire)

[DISABLE]

CarFire:
  db F3 0F 11 43 1C

unregistersymbol(CarFire)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10941</ID>
          <Description>"NoDetection"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(NoDetection,gamedll_x64_rwdi.dll,39 81 F0 0B 00 00)
alloc(newmem,$100,NoDetection)

label(code)
label(return)

newmem:

code:
  mov al,1
  ret
  cmp [rcx+00000BF0],eax
  jmp return

NoDetection:
  jmp code
  nop
return:
registersymbol(NoDetection)

[DISABLE]

NoDetection:
  db 39 81 F0 0B 00 00

unregistersymbol(NoDetection)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1095</ID>
          <Description>"Instant "Hold" Actions"</Description>
          <LastState/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(iha_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(iha_aob1,gamedll_x64_rwdi.dll,0F 28 F7 F3 0F 11 B3 FC 01 00 00)
registersymbol(iha_aob1)
label(returnhere_iha_1)


iha_1:
mov [rbx+000001FC],(float)1
jmp returnhere_iha_1


iha_aob1+3:
jmp iha_1
nop
nop
nop
returnhere_iha_1:

[Disable]

iha_aob1+3:
db F3 0F 11 B3 FC 01 00 00
unregistersymbol(iha_aob1)
dealloc(iha_1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2666</ID>
          <Description>"Weapons In Save Zone"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

 aobscanmodule(wisz_aob1,gamedll_x64_rwdi.dll,48 85 D2 74 03 48 89 3A FF 83 68 09 00 00)
 registersymbol(wisz_aob1)

 wisz_aob1+8:
 db 90 90 90 90 90 90

 [Disable]

 wisz_aob1+8:
 db FF 83 68 09 00 00
 unregistersymbol(wisz_aob1)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2420</ID>
      <Description>"Unlimited Camouflage (activate script camouflage self) Off/On = P"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(UnlimitedCamouflage,gamedll_x64_rwdi.dll,F3 0F 11 43 14 0F 28)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BE7DA7)

label(code)
label(return)

newmem:

code:
  jmp return

UnlimitedCamouflage:
  jmp code
return:
registersymbol(UnlimitedCamouflage)

[DISABLE]

UnlimitedCamouflage:
  db F3 0F 11 43 14

unregistersymbol(UnlimitedCamouflage)
dealloc(newmem)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>80</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>10942</ID>
      <Description>"ZombiesDie (Kills zombies when they get in range )"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(ZombiesDie,gamedll_x64_rwdi.dll,0F 2F 76 78 0F 83 A7 00 00 00)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+278DBC)

label(code)
label(return)

newmem:

code:
  comiss xmm6,[rsi+78]
  jmp return+A7

ZombiesDie:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(ZombiesDie)

[DISABLE]

ZombiesDie:
  db 0F 2F 76 78 0F 83 A7 00 00 00

unregistersymbol(ZombiesDie)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2722</ID>
      <Description>"Weapon Cloning (Drop Weapon) Off/On = Alt+A"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Game   : DyingLightGame.exe
 // Version:
 // Date   :
 // Author : mgr.inz.Player
 [ENABLE]
 aobscanmodule(aob_cloneWeapon,gamedll_x64_rwdi.dll,7E 1A 8B 55 7F)
 registersymbol(aob_cloneWeapon)

 aob_cloneWeapon:
   db 90 90

 [DISABLE]
 aob_cloneWeapon:
   db 7E 1A

 unregistersymbol(aob_cloneWeapon)

 {
 // ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+AA70A4

 "gamedll_x64_rwdi.dll"+AA7079: 44 8B C3                 -  mov r8d,ebx
 "gamedll_x64_rwdi.dll"+AA707C: E8 1F EB BA FF           -  call gamedll_x64_rwdi.dll+655BA0
 "gamedll_x64_rwdi.dll"+AA7081: 4C 8B E0                 -  mov r12,rax
 "gamedll_x64_rwdi.dll"+AA7084: 40 38 75 6F              -  cmp [rbp+6F],sil
 "gamedll_x64_rwdi.dll"+AA7088: 74 79                    -  je gamedll_x64_rwdi.dll+AA7103
 "gamedll_x64_rwdi.dll"+AA708A: 48 8B 54 24 48           -  mov rdx,[rsp+48]
 "gamedll_x64_rwdi.dll"+AA708F: 48 8D 4C 24 48           -  lea rcx,[rsp+48]
 "gamedll_x64_rwdi.dll"+AA7094: FF 92 10 05 00 00        -  call qword ptr [rdx+00000510]
 "gamedll_x64_rwdi.dll"+AA709A: 48 8D 8F 00 09 00 00     -  lea rcx,[rdi+00000900]
 "gamedll_x64_rwdi.dll"+AA70A1: 83 F8 01                 -  cmp eax,01
 // ---------- INJECTING HERE ----------
 "gamedll_x64_rwdi.dll"+AA70A4: 7E 1A                    -  jle gamedll_x64_rwdi.dll+AA70C0
 // ---------- DONE INJECTING  ----------
 "gamedll_x64_rwdi.dll"+AA70A6: 8B 55 7F                 -  mov edx,[rbp+7F]
 "gamedll_x64_rwdi.dll"+AA70A9: 4C 8B 11                 -  mov r10,[rcx]
 "gamedll_x64_rwdi.dll"+AA70AC: 44 8B 45 77              -  mov r8d,[rbp+77]
 "gamedll_x64_rwdi.dll"+AA70B0: 89 54 24 20              -  mov [rsp+20],edx
 "gamedll_x64_rwdi.dll"+AA70B4: 45 8B CE                 -  mov r9d,r14d
 "gamedll_x64_rwdi.dll"+AA70B7: 49 8B D5                 -  mov rdx,r13
 "gamedll_x64_rwdi.dll"+AA70BA: 41 FF 52 78              -  call qword ptr [r10+78]
 "gamedll_x64_rwdi.dll"+AA70BE: EB 10                    -  jmp gamedll_x64_rwdi.dll+AA70D0
 "gamedll_x64_rwdi.dll"+AA70C0: 48 8B 01                 -  mov rax,[rcx]
 "gamedll_x64_rwdi.dll"+AA70C3: 44 8B 4D 7F              -  mov r9d,[rbp+7F]
 "gamedll_x64_rwdi.dll"+AA70C7: 45 8B C6                 -  mov r8d,r14d
 }
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>18</Key>
            <Key>65</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>2665</ID>
      <Description>"Super Jump"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(playerStats,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+A0B12C)

label(code)
label(return)
label(bypass)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)

newmem:
  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp code

runspeed:
  mov [rax+10],(float)50.0
  jmp bypass

stun:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

throwmelee:
  mov [rax+10],(float)50.0 // default 4.0
  jmp bypass

critical:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

bypass:
  movss xmm0,[rax+10]
  jmp return

code:
  movss xmm0,[rax+10]
  jmp return

playerStats+04:
  jmp newmem
return:
registersymbol(playerStats)

[DISABLE]
playerStats+04:
  db F3 0F 10 40 10

unregistersymbol(playerStats)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10961</ID>
      <Description>"MINE_SuperJump"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-10
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(MINE_SuperJump,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10) // should be unique
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B484C1)

label(code)
label(return)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)
label(original)

newmem:
label(pStats)
pStats:
registersymbol(pStats)

  dq 0 0 0 0 0 0 0 0 0 0

code:
  mov [pStats],rcx
  push rbx

  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp original

runspeed:
  mov [pStats+8],rax
  mov [rax+10],(float)1.0 // default?
  jmp original

stun:
  mov [pStats+10],rax
  mov [rax+10],(float)1.0 // default 1.0, super 100
  jmp original

throwmelee:
  mov [pStats+18],rax
  mov [rax+10],(float)4.0 // default 4.0, super 50
  jmp original

critical:
  mov [pStats+20],rax
  mov [rax+10],(float)3.0 // default 1.0, super 100 // 3.0 is enough to jump straight onto a normal roof, so this must be jumping
  jmp original

original:
  pop rbx
  movss xmm0,[rax+10]
  jmp return

MINE_SuperJump+04:
  jmp code
return:
registersymbol(MINE_SuperJump)

[DISABLE]

MINE_SuperJump+04:
  db F3 0F 10 40 10

unregistersymbol(MINE_SuperJump)
unregistersymbol(pStats)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+B484C1

"gamedll_x64_rwdi.dll"+B48496: 49 8B 04 09           -  mov rax,[r9+rcx]
"gamedll_x64_rwdi.dll"+B4849A: 89 70 10              -  mov [rax+10],esi
"gamedll_x64_rwdi.dll"+B4849D: F3 0F 10 40 14        -  movss xmm0,[rax+14]
"gamedll_x64_rwdi.dll"+B484A2: F3 0F 58 C1           -  addss xmm0,xmm1
"gamedll_x64_rwdi.dll"+B484A6: F3 0F 59 40 0C        -  mulss xmm0,[rax+0C]
"gamedll_x64_rwdi.dll"+B484AB: F3 0F 11 40 08        -  movss [rax+08],xmm0
"gamedll_x64_rwdi.dll"+B484B0: 48 8B 87 D0 00 00 00  -  mov rax,[rdi+000000D0]
"gamedll_x64_rwdi.dll"+B484B7: 48 8B 08              -  mov rcx,[rax]
"gamedll_x64_rwdi.dll"+B484BA: 49 8B 04 09           -  mov rax,[r9+rcx]
"gamedll_x64_rwdi.dll"+B484BE: 89 70 14              -  mov [rax+14],esi
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+B484C1: F3 0F 10 40 10        -  movss xmm0,[rax+10]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+B484C6: F3 0F 58 40 0C        -  addss xmm0,[rax+0C]
"gamedll_x64_rwdi.dll"+B484CB: F3 0F 11 40 08        -  movss [rax+08],xmm0
"gamedll_x64_rwdi.dll"+B484D0: EB 28                 -  jmp gamedll_x64_rwdi.dll+B484FA
"gamedll_x64_rwdi.dll"+B484D2: 49 8D 40 01           -  lea rax,[r8+01]
"gamedll_x64_rwdi.dll"+B484D6: 48 3D 87 00 00 00     -  cmp eax,00000087
"gamedll_x64_rwdi.dll"+B484DC: 77 1C                 -  ja gamedll_x64_rwdi.dll+B484FA
"gamedll_x64_rwdi.dll"+B484DE: 48 8B 87 D0 00 00 00  -  mov rax,[rdi+000000D0]
"gamedll_x64_rwdi.dll"+B484E5: 48 8B 08              -  mov rcx,[rax]
"gamedll_x64_rwdi.dll"+B484E8: 4A 8B 14 09           -  mov rdx,[rcx+r9]
"gamedll_x64_rwdi.dll"+B484EC: 0F B6 42 08           -  movzx eax,byte ptr [rdx+08]
}

{

Original cheat, not sure what all the compares are for:

aobscanmodule(playerStats,gamedll_x64_rwdi.dll,09 89 70 14 F3 0F 10 40 10)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+A0B12C)

label(code)
label(return)
label(bypass)
label(runspeed)
label(stun)
label(throwmelee)
label(critical)

newmem:
  cmp r9,1250
  je runspeed
  cmp r9,4D0
  je stun
  cmp r9,190
  je throwmelee
  cmp r9,1510
  je critical
  jmp code

runspeed:
  mov [rax+10],(float)50.0
  jmp bypass

stun:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

throwmelee:
  mov [rax+10],(float)50.0 // default 4.0
  jmp bypass

critical:
  mov [rax+10],(float)100.0 // default 1.0
  jmp bypass

bypass:
  movss xmm0,[rax+10]
  jmp return

code:
  movss xmm0,[rax+10]
  jmp return

playerStats+04:
  jmp newmem
return:
registersymbol(playerStats)

}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10962</ID>
          <Description>"No description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>pStats</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>332</ID>
      <Description>"Walk Speed 1"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)15
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)15
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)15
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2110</ID>
      <Description>"Walk Speed 2"</Description>
      <LastState/>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)25
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)25
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)25
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2111</ID>
      <Description>"Walk Speed 3"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$100,gamedll_x64_rwdi.dll)
alloc(newmem1,$100,gamedll_x64_rwdi.dll)
alloc(newmem2,$100,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)9999
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)9999
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)9999
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2725</ID>
      <Description>"Teleport Preset / Player Location"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2508</ID>
          <Description>"Teleport"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(teleport,1024,engine_x64_rwdi.dll)

label(t_1) //Teleport
aobscanmodule(t_aob1,engine_x64_rwdi.dll,70 F3 41 0F 10 90 BC 00 00 00)
registersymbol(t_aob1)
label(returnhere_t_1)

label(gw_1) //Get Waypoint
aobscanmodule(gw_aob1,gamedll_x64_rwdi.dll,F3 0F 10 83 8C 08 00 00)
registersymbol(gw_aob1)
label(returnhere_gw_1)

label(saveLocation) //Save Location
label(saveLocation_status)
registersymbol(saveLocation_status)
label(saved_X)
registersymbol(saved_X)
label(saved_Z)
registersymbol(saved_Z)
label(saved_Y)
registersymbol(saved_Y)

label(goToSaved) //Go To Saved
label(goToSaved_status)
registersymbol(goToSaved_status)

label(goToWaypoint) //Go To Waypoint
label(goToWaypoint_status)
registersymbol(goToWaypoint_status)

label(waypoint_X)
registersymbol(waypoint_X)
label(waypoint_Y)
registersymbol(waypoint_Y)

label(t_orig) //Original Code

label(t_values) //Holds All Values For This Script
registersymbol(t_values)

//--------------------------------------------------//
teleport:
//--------------------------------------------------//
t_1:
cmp [saveLocation_status],1
je saveLocation
cmp [goToSaved_status],1
je goToSaved
cmp [goToWaypoint_status],1
je goToWaypoint
movss xmm2,[r8+000000BC]
jmp returnhere_t_1
//--------------------------------------------------//
saveLocation:
movss xmm2,[r8+000000BC]
fld [r8+BC]
fstp [saved_X]
fld [r8+C0]
fstp [saved_Z]
fld [r8+C4]
fstp [saved_Y]
mov [saveLocation_status],0
jmp returnhere_t_1

saveLocation_status:
dd 1

saved_X:
dd 0

saved_Z:
dd 0

saved_Y:
dd 0
//--------------------------------------------------//
goToSaved:
movss xmm2,[r8+000000BC]
fld [saved_X]
fstp [r8+BC]
fld [saved_Z]
fstp [r8+C0]
fld [saved_Y]
fstp [r8+C4]
mov [goToSaved_status],0
jmp returnhere_t_1

goToSaved_status:
dd 0
//--------------------------------------------------//
goToWaypoint:
movss xmm2,[r8+000000BC]
fld [waypoint_X]
fstp [r8+BC]
//mov [r8+C0],(float)200 original code
//mov [r8+C0],(float)60
mov [r8+C0],(float)100
fld [waypoint_Y]
fstp [r8+C4]
mov [goToWaypoint_status],0
jmp returnhere_t_1

goToWaypoint_status:
dd 0
//--------------------------------------------------//
t_orig:
movss xmm0,[rbx+00000850]
jmp returnhere_t_1
//--------------------------------------------------//
gw_1:
movss xmm0,[rbx+0000088C]
fld [rbx+88C]
fstp [waypoint_X]
fld [rbx+894]
fstp [waypoint_Y]
jmp returnhere_gw_1

waypoint_X:
dd 0

waypoint_Y:
dd 0
//--------------------------------------------------//
t_values:
dd 1
//--------------------------------------------------//

t_aob1+1:
jmp t_1
nop
nop
nop
nop
returnhere_t_1:

gw_aob1:
jmp gw_1
nop
nop
nop
returnhere_gw_1:

[Disable]

t_aob1+1:
db F3 41 0F 10 90 BC 00 00 00
unregistersymbol(t_aob1)

unregistersymbol(saveLocation_status)
unregistersymbol(saved_X)
unregistersymbol(saved_Z)
unregistersymbol(saved_Y)

unregistersymbol(goToSaved_status)

unregistersymbol(goToWaypoint_status)

gw_aob1:
db F3 0F 10 83 8C 08 00 00
unregistersymbol(gw_aob1)

unregistersymbol(waypoint_X)
unregistersymbol(waypoint_Y)

unregistersymbol(t_values)

dealloc(teleport)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2509</ID>
              <Description>"Save Location ( Ctrl+numeric 7 )"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>saveLocation_status</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>103</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>2514</ID>
              <Description>"Go To Saved ( Ctrl+numeric 8 )"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>goToSaved_status</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>104</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>2518</ID>
              <Description>"Go To Waypoint ( Ctrl+numeric 9 )"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>goToWaypoint_status</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>105</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>2513</ID>
              <Description>"See Coordinates"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>2510</ID>
                  <Description>"Saved X"</Description>
                  <VariableType>Float</VariableType>
                  <Address>saved_X</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2511</ID>
                  <Description>"Saved Z"</Description>
                  <VariableType>Float</VariableType>
                  <Address>saved_Z</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2512</ID>
                  <Description>"Saved Y"</Description>
                  <VariableType>Float</VariableType>
                  <Address>saved_Y</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2519</ID>
                  <Description>"Waypoint X"</Description>
                  <VariableType>Float</VariableType>
                  <Address>waypoint_X</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2520</ID>
                  <Description>"Waypoint Y"</Description>
                  <VariableType>Float</VariableType>
                  <Address>waypoint_Y</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2121</ID>
          <Description>"Player Location Grabber"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
          <LastState/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aobPlayerLocationGrabber,engine_x64_rwdi.dll,40 53 48 83 EC 40 4C 8B 49 ?? 0F 29 74 24 ?? 48 8B D9)

alloc(newmem,2048,"engine_x64_rwdi.dll"+383ED0)

label(aobPlayerLocationGrabber_r)
registersymbol(aobPlayerLocationGrabber_r)

label(lblPlayerLocationGrabber)
label(lblPlayerLocationGrabberSkip)
label(lblPlayerLocationGrabberRet)

label(pPlayerLocation)
registersymbol(pPlayerLocation)

newmem:

lblPlayerLocationGrabber:
test rcx,rcx
jz short lblPlayerLocationGrabberSkip
cmp dword ptr [rcx+114],64
jne short lblPlayerLocationGrabberSkip
mov qword ptr [pPlayerLocation],rcx
lblPlayerLocationGrabberSkip:
//push rbx
//sub rsp,40
db 40 53 48 83 EC 40
jmp lblPlayerLocationGrabberRet
pPlayerLocation:
dq 0

//"engine_x64_rwdi.dll"+383ED0:
aobPlayerLocationGrabber:
aobPlayerLocationGrabber_r:
jmp lblPlayerLocationGrabber
nop
lblPlayerLocationGrabberRet:

[DISABLE]
aobPlayerLocationGrabber_r:
//"engine_x64_rwdi.dll"+383ED0:
//Alt: push rbx
//Alt: sub rsp,40
db 40 53 48 83 EC 40

unregistersymbol(aobPlayerLocationGrabber_r)

unregistersymbol(pPlayerLocation)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2120</ID>
              <Description>"Player Location"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>0000FF</Color>
              <VariableType>8 Bytes</VariableType>
              <Address>pPlayerLocation</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>2726</ID>
                  <Description>"Gas Station = Alt+Q  / The Following SECRET ROOM = Alt+S"</Description>
                  <LastState Value="" RealAddress="00000000"/>
                  <Color>FF0000</Color>
                  <GroupHeader>1</GroupHeader>
                </CheatEntry>
                <CheatEntry>
                  <ID>2124</ID>
                  <Description>"Player Location X"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>pPlayerLocation</Address>
                  <Offsets>
                    <Offset>BC</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>83</Key>
                      </Keys>
                      <Value>51.7703743</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>81</Key>
                      </Keys>
                      <Value>-483.463623</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>2125</ID>
                  <Description>"Player Location Z"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>pPlayerLocation</Address>
                  <Offsets>
                    <Offset>C0</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>83</Key>
                      </Keys>
                      <Value>21.28673553</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>81</Key>
                      </Keys>
                      <Value>49.00283813</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>2126</ID>
                  <Description>"Player Location Y"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>pPlayerLocation</Address>
                  <Offsets>
                    <Offset>C4</Offset>
                  </Offsets>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>83</Key>
                      </Keys>
                      <Value>-133.0413666</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>18</Key>
                        <Key>81</Key>
                      </Keys>
                      <Value>-880.3660278</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2384</ID>
      <Description>"Challenges / Time Freeze Options "</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2607</ID>
          <Description>"Challenge / The Following Time Freeze"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(ChallengeTimeFreeze,gamedll_x64_rwdi.dll,F3 0F 11 83 F0 00 00 00 48 85)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AD7D1D)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

ChallengeTimeFreeze:
  jmp code
  nop
  nop
  nop
return:
registersymbol(ChallengeTimeFreeze)

[DISABLE]

ChallengeTimeFreeze:
  db F3 0F 11 83 F0 00 00 00

unregistersymbol(ChallengeTimeFreeze)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2294</ID>
          <Description>"Bozak Horde  / Gaining Cradence Time Freeze"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(BozakHorde,gamedll_x64_rwdi.dll,F3 0F 11 40 D8 80)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+3A640B)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

BozakHorde:
  jmp code
return:
registersymbol(BozakHorde)

[DISABLE]

BozakHorde:
  db F3 0F 11 40 D8

unregistersymbol(BozakHorde)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2659</ID>
          <Description>"Challenge CheckPoint Instantly Collect (may have reverse effect on some challenges)"</Description>
          <LastState/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(CheckPoint,gamedll_x64_rwdi.dll,39 43 14 72 1F)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BCB7DE)

label(code)
label(return)

newmem:

code:
  jb gamedll_x64_rwdi.ShutdownGameScriptDLL+BC8CF2
  jmp return

CheckPoint:
  jmp code
return:
registersymbol(CheckPoint)

[DISABLE]

CheckPoint:
  db 39 43 14 72 1F

unregistersymbol(CheckPoint)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2025</ID>
      <Description>"Backpack Editor"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{
The editor is pretty straight forward. Before use, hit the update button. It will
pull your current inventory for that tab. Make your changes and hit apply. If it
errors out for any reason, let me know.
}
aobscanmodule(ItemEditDataAOB,gamedll_x64_rwdi.dll,48 8B 78 60 48 8B D9)
aobscanmodule(BaseItemTableAOB,gamedll_x64_rwdi.dll,8B C8 48 8B 42 E8 4C 8B 04 C8)
alloc(newmem,2048,gamedll_x64_rwdi.dll)
label(ItemEditStart)
label(ItemEditEnd)
label(BaseItemStart)
label(BaseItemEnd)
label(ItemEditData)
registersymbol(ItemEditDataAOB)
registersymbol(BaseItemTableAOB)
registersymbol(ItemEditData)

newmem:

ItemEditStart:
mov [ItemEditData],rax
mov rdi,[rax+60]
mov rbx,rcx
jmp ItemEditEnd

BaseItemStart:
mov [ItemEditData+8],rdx
mov ecx,eax
mov rax,[rdx-18]
jmp BaseItemEnd

ItemEditData:

ItemEditDataAOB:
jmp ItemEditStart
nop
nop
ItemEditEnd:

BaseItemTableAOB:
jmp BaseItemStart
nop
BaseItemEnd:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

ItemEditDataAOB:
db 48 8B 78 60 48 8B D9

BaseItemTableAOB:
db 8B C8 48 8B 42 E8

unregistersymbol(ItemEditDataAOB)
unregistersymbol(BaseItemTableAOB)
unregistersymbol(ItemEditData)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2027</ID>
          <Description>"Show Editor"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
LuaCall(EditorShow())
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
LuaCall(EditorHide())
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2634</ID>
      <Description>"Instant LVL Agility/Power/Legend/Driver/Level Of Trust"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(XP,gamedll_x64_rwdi.dll,39 44 3A 08 76 1A)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+AB259B)

label(code)
label(return)

newmem:

code:
  jna gamedll_x64_rwdi.ShutdownGameScriptDLL+AAFAAB
  jmp return

XP:
  jmp code
  nop
return:
registersymbol(XP)

[DISABLE]

XP:
  db 39 44 3A 08 76 1A

unregistersymbol(XP)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2537</ID>
      <Description>"MINE_XP"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DyingLightGame.exe
  Version: 
  Date   : 2016-11-07
  Author : Jason

  This script checks "AGI: Current XP" each frame.  It stores the structure
  address in a global offset so that it can be used anywhere.  The structure
  has sections for each of the ???: AGI or Agility, SUR or Survivor, POW or
  Power and LEG or Legendary.  Each one has the following structure:

    0000: Current XP (Total XP for all levels) (dword)
    0004: Level Start XP (Amount of XP to reach current level) (dword)
    0008: This Level XP (Amounto of XP for JUST this level) (dword)

  So for instance if you add the values at +04 and +08 and store it at +00, it
  should be just enough to get you to the next level.

  0028: AGI (total 259800?)
  0048: POW (total 856050?)
  0068: SUR (total 2000000?)
  00A8: LEG
}

[ENABLE]

aobscanmodule(INJECT_XP,gamedll_x64_rwdi.dll,8B 48 28 89 4B 48) // should be unique
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+3F1365)

label(code)
label(return)
label(pXP)

newmem:
pXP:
  dd 0 0 0 0

code:
  mov [newmem],rax
  mov ecx,[rax+28]
  mov [rbx+48],ecx
  jmp return

INJECT_XP:
  jmp code
  nop
return:
registersymbol(INJECT_XP)
registersymbol(pXP)

[DISABLE]

INJECT_XP:
  db 8B 48 28 89 4B 48

unregistersymbol(INJECT_XP)
unregistersymbol(pXP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+3F1365

"gamedll_x64_rwdi.dll"+3F1341: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1345: 0F B7 48 14           -  movzx ecx,word ptr [rax+14]
"gamedll_x64_rwdi.dll"+3F1349: 89 4B 70              -  mov [rbx+70],ecx
"gamedll_x64_rwdi.dll"+3F134C: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1350: 8B 48 08              -  mov ecx,[rax+08]
"gamedll_x64_rwdi.dll"+3F1353: 89 4B 44              -  mov [rbx+44],ecx
"gamedll_x64_rwdi.dll"+3F1356: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F135A: 0F B7 48 34           -  movzx ecx,word ptr [rax+34]
"gamedll_x64_rwdi.dll"+3F135E: 89 4B 74              -  mov [rbx+74],ecx
"gamedll_x64_rwdi.dll"+3F1361: 48 8B 42 40           -  mov rax,[rdx+40]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+3F1365: 8B 48 28              -  mov ecx,[rax+28]
"gamedll_x64_rwdi.dll"+3F1368: 89 4B 48              -  mov [rbx+48],ecx
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+3F136B: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F136F: 0F B7 48 54           -  movzx ecx,word ptr [rax+54]
"gamedll_x64_rwdi.dll"+3F1373: 89 4B 78              -  mov [rbx+78],ecx
"gamedll_x64_rwdi.dll"+3F1376: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F137A: 8B 48 48              -  mov ecx,[rax+48]
"gamedll_x64_rwdi.dll"+3F137D: 89 4B 4C              -  mov [rbx+4C],ecx
"gamedll_x64_rwdi.dll"+3F1380: 48 8B 42 40           -  mov rax,[rdx+40]
"gamedll_x64_rwdi.dll"+3F1384: 0F B7 48 74           -  movzx ecx,word ptr [rax+74]
"gamedll_x64_rwdi.dll"+3F1388: 89 4B 7C              -  mov [rbx+7C],ecx
"gamedll_x64_rwdi.dll"+3F138B: 48 8B 42 40           -  mov rax,[rdx+40]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2538</ID>
          <Description>"AGI XP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pXP</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2539</ID>
          <Description>"POW XP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pXP</Address>
          <Offsets>
            <Offset>48</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2540</ID>
          <Description>"SUR XP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pXP</Address>
          <Offsets>
            <Offset>68</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2541</ID>
          <Description>"LEG XP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pXP</Address>
          <Offsets>
            <Offset>A8</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10937</ID>
      <Description>"Agility Level (Test Only)"</Description>
      <LastState Value="24" RealAddress="7FFE1C903114"/>
      <Color>C0C0C0</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>gamedll_x64_rwdi.dll+1C23114</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10938</ID>
      <Description>"Power Level (Test Only)"</Description>
      <LastState Value="24" RealAddress="7FFE1C903118"/>
      <Color>C0C0C0</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>gamedll_x64_rwdi.dll+1C23118</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10940</ID>
      <Description>"Legend Level (Test Only)"</Description>
      <LastState Value="250" RealAddress="7FFE1C903124"/>
      <Color>C0C0C0</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>gamedll_x64_rwdi.dll+1C23124</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10939</ID>
      <Description>"Driver Level (Test Only)"</Description>
      <LastState Value="24" RealAddress="7FFE1C903128"/>
      <Color>C0C0C0</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>gamedll_x64_rwdi.dll+1C23128</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2755</ID>
      <Description>"Survivor Rank"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(SurvivorRank,gamedll_x64_rwdi.dll,01 74 11 08 40 84 ED)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+B48106)

label(code)
label(return)

newmem:

code:
  add [rcx+rdx+08],475000
  test bpl,bpl
  jmp return

SurvivorRank:
  jmp code
  nop
  nop
return:
registersymbol(SurvivorRank)

[DISABLE]

SurvivorRank:
  db 01 74 11 08 40 84 ED

unregistersymbol(SurvivorRank)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10936</ID>
      <Description>"Survivor Rank Level (Test Only)"</Description>
      <LastState Value="25" RealAddress="7FFE1C90311C"/>
      <Color>C0C0C0</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>gamedll_x64_rwdi.dll+1C2311C</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2319</ID>
      <Description>"Hunter Shoot A Spit Instant Cooldown"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,44 01 6C C7 60)
alloc(newmem,$100,"gamedll_x64_rwdi.dll"+BF94C9)

label(code)
label(return)

newmem:

code:
  nop
  jmp return

INJECT:
  jmp code
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 44 01 6C C7 60

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2028</ID>
      <Description>"Set FOV"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(setFOV_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(setFOV_aob1,gamedll_x64_rwdi.dll,44 0F 28 D8 FF 50 20 48 8B 4F 50 F3 0F 11 87 B8 00 00 00)
registersymbol(setFOV_aob1)
label(FOV)
registersymbol(FOV)
label(returnhere_setFOV_1)


setFOV_1:
fld [FOV]
fstp [rdi+B8]
jmp returnhere_setFOV_1

FOV:
dd 42280000


setFOV_aob1+B:
jmp setFOV_1
nop
nop
nop
returnhere_setFOV_1:

[Disable]

setFOV_aob1+B:
db F3 0F 11 87 B8 00 00 00
unregistersymbol(setFOV_aob1)
unregistersymbol(FOV)
dealloc(setFOV_1)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2029</ID>
          <Description>"FOV Value (Default Range: 42 - 72)"</Description>
          <VariableType>Float</VariableType>
          <Address>FOV</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of movss [rbx+00000954],xmm0</Description>
      <Address>7FF9FF8583F7</Address>
      <ModuleName>gamedll_x64_rwdi.dll</ModuleName>
      <ModuleNameOffset>AB83F7</ModuleNameOffset>
      <Before>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>20</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>54</Byte>
        <Byte>09</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>40</Byte>
        <Byte>84</Byte>
        <Byte>F6</Byte>
        <Byte>74</Byte>
        <Byte>15</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>EasyLockAOB</Name>
      <Address>7FEDE2655D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>teleport_aob1</Name>
      <Address>7FEDF07DF22</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_aob1</Name>
      <Address>7FEDC42A8EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_X</Name>
      <Address>7FEDECF0179</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_Z</Name>
      <Address>7FEDECF017D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>current_Y</Name>
      <Address>7FEDECF0181</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Z</Name>
      <Address>7FEDECF019D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>VacData</Name>
      <Address>7FEDDED0106</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EnemyPosAOB</Name>
      <Address>7FEDE2A37B9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>PlayerPosAOB</Name>
      <Address>7FEDE27DF22</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TimePoint</Name>
      <Address>7FEDCB2002A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TODAOB</Name>
      <Address>7FEDD22FFD7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfGrapAOB</Name>
      <Address>7FEDCA0E659</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CurItemAOB</Name>
      <Address>7FEE075B71A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HunterXP</Name>
      <Address>7FF9169F6674</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>SurvivorRank3</Name>
      <Address>7FFC03261388</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>t_aob1</Name>
      <Address>7FFC02676AD1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gw_aob1</Name>
      <Address>7FFC02E70520</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saveLocation_status</Name>
      <Address>7FFC02230086</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_X</Name>
      <Address>7FFC0223008A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Z</Name>
      <Address>7FFC0223008E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Y</Name>
      <Address>7FFC02230092</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>goToSaved_status</Name>
      <Address>7FFC022300DE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>goToWaypoint_status</Name>
      <Address>7FFC02230128</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_X</Name>
      <Address>7FFC02230170</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Y</Name>
      <Address>7FFC02230174</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>t_values</Name>
      <Address>7FFC02230178</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobPlayerLocationGrabber_r</Name>
      <Address>7FFC02624080</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayerLocation</Name>
      <Address>7FFC02220029</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HP1a</Name>
      <Address>7FFEACE183DF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HP2b</Name>
      <Address>7FFEACE183E9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>XP</Name>
      <Address>7FF94870C3AB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>SurvivorRank</Name>
      <Address>7FF948799FA6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteHealth1</Name>
      <Address>7FFBD16182C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteHealth2</Name>
      <Address>7FFBD16182CE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteStamina1</Name>
      <Address>7FFBD1765534</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteStamina2</Name>
      <Address>7FFBD175718F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iw_aob1</Name>
      <Address>7FFBD11AF798</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InstantKill</Name>
      <Address>7FFBD0D73E75</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Cash</Name>
      <Address>7FFBD1747C73</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Time_of_Day_Adjuster_ret</Name>
      <Address>7FFBD0EF4E57</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InstantCooldownFlares</Name>
      <Address>7FFBD16FDA59</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ici_aob1</Name>
      <Address>7FFBD1749819</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnlimitedPotionDuration</Name>
      <Address>7FFBD15CBADC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FreeBluAOB1</Name>
      <Address>7FFBD0E46255</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FreeBluAOB2</Name>
      <Address>7FFBD0E45D2E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ica_aob1</Name>
      <Address>7FFBD1820D25</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ioa_aob1</Name>
      <Address>7FFBD1748CF2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itwu_aob1</Name>
      <Address>7FFBD174992B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iuf_aob1</Name>
      <Address>7FFBD16FD995</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>elp_aob1</Name>
      <Address>7FFBD122606B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteGrapplingHook</Name>
      <Address>7FFBD17FDADA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TheButton</Name>
      <Address>7FFBD162BAFE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GasFreeFlamethrower</Name>
      <Address>7FFBD1AF5EC2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Gas1</Name>
      <Address>7FFBD1AF5861</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InfiniteNitro</Name>
      <Address>7FFBD1AF876A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CarFire</Name>
      <Address>7FFBD1AF42A1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>NoDetection</Name>
      <Address>7FFBD0C63212</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iha_aob1</Name>
      <Address>7FFBD1981F63</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>wisz_aob1</Name>
      <Address>7FFBD164B47C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ChallengeTimeFreeze</Name>
      <Address>7FFBD171ECD1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CheckPoint</Name>
      <Address>7FFBD17360FE</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Dying Light the following Enhanced Edition cheat table Steam v1.11.2
Thanks/Credits to: 
all credit goes to akumakuja28 for Time of Day (thank you) 
all credit goes to mgr.inz.Player for Weapon Cloning (thank you) 
all credit goes to Matze500 for Weapons In Save Zone (thank you) 
------------------------- 
3/24/2016 
added: Survivor Rank 
------------------------- 
------------------------- 
4/24/2016 
added: Unlimited Gas 
------------------------- 
--------------- 
4/26/2016 
added: Cash 
--------------- 
------------------------------------ 
4/26/2016 
added: Instant Cooldown Flares 
------------------------------------ 
--------------------------------------------------------------------------------- 
4/26/2016 
added: Weapon Cloning: all credit goes to mgr.inz.Player (thank you) 
--------------------------------------------------------------------------------- 
Windows 10 Steam v1.11.2 
File Features Include: 
Infinite Health 
Instant LVL Agility/Power/Legend/Driver/Level Of Trust 
Instant Kill 
Infinite Stamina 
Super Jump 
Infinite Crafting Items 
Unlimited Potion Duration 
Free Blueprint Requirements 
Indestructible Weapons 
Weapons In Save Zone 
Infinite Ammo 
Infinite Throwables / Weapon Upgrades 
Infinite UV Flashlight 
Easy Lock Picking 
Unlimited Camouflage 
Grappling Hook Instant Cooldown 
Car Flamethrower Instant Cooldown 
Infinite Nitro 
The Button Instant Cooldown 
Instant "Hold" Actions 
Walk Speed 
Challenge Time Freeze / Bozak Horde / The Following / Gaining Cradence 
Challenge CheckPoint Instantly Collect 
Set FOV 
Teleport Preset / Player Location 
Hunter Shoot A Spit Instant Cooldown 
Instant Cooldown Flares 
Survivor Rank 
Time Of Day 
Cash 
Unlimited Gas 
Weapon Cloning
----------------------------------------------
Simple "Weapon Cloning" (guns and melee). 
 1. activate the below script 
 2. drop weapon 
 3. you should have weapon clone on the ground and original in backpack. 
 4. if you have upgraded and modified weapons, cloned weapon will also be upgraded&amp;modified 
----------------------------------------------
Teleport Coordinance
----------------------------------------------
Eye Of The Sun Entrance
X -669.9390869
Z 228.220459
Y 832.5141602
----------------------------------------------
</Comments>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
    for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
    end
    end

    function LBItemListSelectionChange(sender, user)
    if sender.ItemIndex == -1 then return end
    local Item = ItemTable[sender.ItemIndex+1]
    local Quant = readInteger(Item.Address+0x40)
    PackEdit_EItemQuant.text = Quant
    local ItemTypeIndex = 0
    for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
    end
    PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
    end

    function BItemApplyClick(sender)
    if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
    if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
    local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
    local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
    local Quant = tonumber(PackEdit_EItemQuant.text)
    writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
    writeInteger(Item.Address+0x40,Quant)
    BItemUpdateClick()
    end

    function EditorShow()
    ItemTable = {}
    WeaponTable = {}
    BaseItemTable = {}
    PackEdit.show()
    end

    function EditorHide()
    PackEdit.close()
    end

    function myattach(timer)
    if getProcessIDFromProcessName("DyingLightGame.exe") ~= nil then
    object_destroy(timer)
    openProcess("DyingLightGame.exe")
    end
    end

    t=createTimer(nil);
    timer_setInterval(t,10)
    timer_onTimer(t,myattach)

    AddressList = getAddressList()
	
	

        --Compact mode
    controlMainForm = getMainForm()
    control_setVisible(wincontrol_getControl(controlMainForm,0), false)
    control_setVisible(wincontrol_getControl(controlMainForm,2), false)
    control_setVisible(wincontrol_getControl(controlMainForm,3), false)
    --end


    --Disable header sorting and dragging
    AddressListTreeview = component_getComponent(AddressList,0)
    AddressListHeader   = component_getComponent(AddressList,1)

    setMethodProperty(AddressListHeader  ,"OnSectionClick",nil)
    setMethodProperty(AddressListTreeview,"OnDragOver"    ,nil)
    setMethodProperty(AddressListTreeview,"OnDragDrop"    ,nil)
    setMethodProperty(AddressListTreeview,"OnEndDrag"     ,nil)
    --end


    --show main window
    ShowMainWindowTimer = createTimer(nil,false)
    timer_setInterval(ShowMainWindowTimer, 1)
    timer_onTimer(ShowMainWindowTimer, function (sender)
    object_destroy(sender)
    control_setVisible(controlMainForm,true) -- set visible
    form_setMenu(controlMainForm,nil)        -- hide menu
    end)
    timer_setEnabled(ShowMainWindowTimer, true)
    --end



    controlMainForm = getMainForm()
    --Rename Main Form
    control_setCaption(controlMainForm,"Dying Light the following Enhanced Edition Steam v1.12.0 Community Cheat Table")




  
</LuaScript>
</CheatTable>
