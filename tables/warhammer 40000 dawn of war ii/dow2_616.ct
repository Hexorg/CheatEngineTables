<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <Description>"Invulnerability"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(notplayer)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

push eax
pushfd

mov eax,[ebx+10]
or eax,eax
jz originalcode

mov eax,[eax+34]
or eax,eax
jz originalcode

cmp [eax+8],#1000
jne notplayer

//it's the player
movss xmm1,[ebx+90]
jmp originalcode

notplayer:
//add a quick kill thingy if you like
//mov eax,(float)-1
//movss xmm1,[min1]

originalcode:
popfd
pop eax
movss [ebx+44],xmm1

exit:
jmp returnhere

"DOW2.exe"+3F21EF:
jmp newmem
returnhere:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"DOW2.exe"+3F21EF:
movss [ebx+44],xmm1

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>73</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Infinite energy for units"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)


newmem:

fld dword ptr [eax]
fstp dword ptr [esi+14]

push eax

mov eax,[esi+10]
or eax,eax
jz short exit

mov eax,[eax+4c]
or eax,eax
jz short exit

cmp [eax+8],#1000
jne short exit

//still here, so player unit
mov [esi+14],(float)1000

exit:
pop eax
jmp returnhere

"DOW2.exe"+40C1CA:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

"DOW2.exe"+40C1CA:
fld dword ptr [eax]
fstp dword ptr [esi+14]
//Alt: db D9 00 D9 5E 14
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"inf resources and pop"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)



newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [eax],(float)9999 //
mov [eax+04],(float)9999
mov [eax+0c],(float)999 //special
mov [eax+2b8],0 //current pop
mov [eax+2c0],500 //max pop (max is 140 so doesn' have much effect)


originalcode:
fld dword ptr [eax]
fstp dword ptr [ebx]
lea ecx,[esp+10]

exit:
jmp returnhere

"DOW2.exe"+670FC3:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

"DOW2.exe"+670FC3:
fld dword ptr [eax]
fstp dword ptr [ebx]
lea ecx,[esp+10]
//Alt: db D9 00 D9 1B 8D 4C 24 10
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>82</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"no cooldown for unit"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//movss [ebx+00000088],xmm2

mov dword ptr [ebx+00000088],0


exit:
jmp returnhere

"DOW2.exe"+40818D:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"DOW2.exe"+40818D:
movss [ebx+00000088],xmm2
//Alt: db F3 0F 11 93 88 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"no cooldown for race abilities"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm1,xmm0
originalcode:

subss xmm0,xmm1
xorps xmm1,xmm1

exit:
jmp returnhere

"DOW2.exe"+5D9512:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"DOW2.exe"+5D9512:
subss xmm0,xmm1
xorps xmm1,xmm1
//Alt: db F3 0F 5C C1 0F 57 C9
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Invulnerability AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(notplayer)
label(label1)
registersymbol(label1)
aobscan(aob1,f3 0f 11 4b 44 e8)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

push eax
pushfd

mov eax,[ebx+10]
or eax,eax
jz originalcode

mov eax,[eax+34]
or eax,eax
jz originalcode

cmp [eax+8],#1000
jne notplayer

//it's the player
movss xmm1,[ebx+90]
jmp originalcode

notplayer:
//add a quick kill thingy if you like
//mov eax,(float)-1
//movss xmm1,[min1]

originalcode:
popfd
pop eax
movss [ebx+44],xmm1

exit:
jmp returnhere

aob1:
label1:
jmp newmem
returnhere:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
label1:
movss [ebx+44],xmm1
unregistersymbol(label1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Infinite energy for units AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)
label(label2)
registersymbol(label2)
aobscan(aob2,d9 00 d9 5e 14 83)


newmem:

fld dword ptr [eax]
fstp dword ptr [esi+14]

push eax

mov eax,[esi+10]
or eax,eax
jz short exit

mov eax,[eax+4c]
or eax,eax
jz short exit

cmp [eax+8],#1000
jne short exit

//still here, so player unit
mov [esi+14],(float)1000

exit:
pop eax
jmp returnhere

aob2:
label2:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

label2:
fld dword ptr [eax]
fstp dword ptr [esi+14]
//Alt: db D9 00 D9 5E 14
unregistersymbol(label2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"inf resources and pop AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(label3)
registersymbol(label3)
aobscan(aob3,d9 00 d9 1b 8d)



newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [eax],(float)9999 //
mov [eax+04],(float)9999
mov [eax+0c],(float)999 //special
mov [eax+2b8],0 //current pop
mov [eax+2c0],500 //max pop (max is 140 so doesn' have much effect)


originalcode:
fld dword ptr [eax]
fstp dword ptr [ebx]
lea ecx,[esp+10]

exit:
jmp returnhere

aob3:
label3:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

label3:
fld dword ptr [eax]
fstp dword ptr [ebx]
lea ecx,[esp+10]
//Alt: db D9 00 D9 1B 8D 4C 24 10
unregistersymbol(label3)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"no cooldown for unit AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(label4)
registersymbol(label4)
aobscan(aob4,f3 0f 11 93 88 00 00 00 0f)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//movss [ebx+00000088],xmm2

mov dword ptr [ebx+00000088],0


exit:
jmp returnhere

aob4:
label4:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
label4:
movss [ebx+00000088],xmm2
//Alt: db F3 0F 11 93 88 00 00 00
unregistersymbol(label4)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"no cooldown for race abilities AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(label5)
registersymbol(label5)
aobscan(aob5,f3 0f 5c c1 0f 57 c9 0f 2f c8 f3  * * * * * * 72)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss xmm1,xmm0
originalcode:

subss xmm0,xmm1
xorps xmm1,xmm1

exit:
jmp returnhere

aob5:
label5:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
label5:
subss xmm0,xmm1
xorps xmm1,xmm1
//Alt: db F3 0F 5C C1 0F 57 C9
unregistersymbol(label5)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Invulnerability + Instant kill AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(notplayer)
label(label1)
registersymbol(label1)
aobscan(aob1,f3 0f 11 4b 44 e8)
alloc(min1,4)

min1:
dd (float)0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

push eax
pushfd

mov eax,[ebx+10]
or eax,eax
jz originalcode

mov eax,[eax+34]
or eax,eax
jz originalcode

cmp [eax+8],#1000
jne notplayer

//it's the player
movss xmm1,[ebx+90]
jmp originalcode

notplayer:
//add a quick kill thingy if you like
mov eax,(float)0
movss xmm1,[min1]

originalcode:
popfd
pop eax
movss [ebx+44],xmm1

exit:
jmp returnhere

aob1:
label1:
jmp newmem
returnhere:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
label1:
movss [ebx+44],xmm1
unregistersymbol(label1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Instant kill AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(notplayer)
label(label1)
registersymbol(label1)
aobscan(aob1,f3 0f 11 4b 44 e8)
alloc(min1,4)

min1:
dd (float)0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

push eax
pushfd

mov eax,[ebx+10]
or eax,eax
jz originalcode

mov eax,[eax+34]
or eax,eax
jz originalcode

cmp [eax+8],#1000
jne notplayer

//it's the player
jmp originalcode

notplayer:
//add a quick kill thingy if you like
mov eax,(float)0
movss xmm1,[min1]

originalcode:
popfd
pop eax
movss [ebx+44],xmm1

exit:
jmp returnhere

aob1:
label1:
jmp newmem
returnhere:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
label1:
movss [ebx+44],xmm1
unregistersymbol(label1)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :movss [ebx+44],xmm1 access health</Description>
      <Address>007F21EF</Address>
      <ModuleName>DOW2.exe</ModuleName>
      <ModuleNameOffset>3F21EF</ModuleNameOffset>
      <Before>
        <Byte>44</Byte>
        <Byte>7B</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>C3</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>4B</Byte>
        <Byte>44</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>47</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>b (access res)</Description>
      <Address>00A70FC3</Address>
      <ModuleName>DOW2.exe</ModuleName>
      <ModuleNameOffset>670FC3</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>4D</Byte>
        <Byte>50</Byte>
        <Byte>CF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>1B</Byte>
        <Byte>8D</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [ebx+00000088],xmm2 countdown</Description>
      <Address>0080818D</Address>
      <ModuleName>DOW2.exe</ModuleName>
      <ModuleNameOffset>40818D</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>D0</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>93</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>8B</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [ebx+000001E4],xmm0 decreases 'special' countdown</Description>
      <Address>009D951C</Address>
      <ModuleName>DOW2.exe</ModuleName>
      <ModuleNameOffset>5D951C</ModuleNameOffset>
      <Before>
        <Byte>57</Byte>
        <Byte>C9</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>C8</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>83</Byte>
        <Byte>E4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>72</Byte>
        <Byte>3D</Byte>
        <Byte>8B</Byte>
        <Byte>43</Byte>
        <Byte>18</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>resources</Name>
      <Address>2D710800</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
