<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Boost Exp Gain"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(ExpBoost,D9 45 0C DE C1 D9 5F 18) // should be unique
alloc(newmem,$1000)
globalalloc(vBoost,8)

label(code)
label(return)
label(Negate)

newmem:

Negate:
dd (float)0

vBoost:
dd (float)10

code:
  fld dword ptr [ebp+0C]
  cmp [ebp+0c], (float)0
  jg NoChange
  //We dont want skill to deteriorate, so we simply make the change 0
  fld dword ptr [Negate]
  fmulp st(1),st(0)
NoChange:
  fld dword ptr [vBoost]
  fmulp st(1),st(0)
  faddp
  jmp return

ExpBoost:
  jmp code
return:
registersymbol(ExpBoost)

[DISABLE]

ExpBoost:
  db D9 45 0C DE C1

unregistersymbol(ExpBoost)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2245E596

2245E57A: DD 5D E8              -  fstp qword ptr [ebp-18]
2245E57D: 83 EC 0C              -  sub esp,0C
2245E580: 57                    -  push edi
2245E581: E8 FA 54 04 00        -  call RimWorld:SkillRecord:get_LearningFactor
2245E586: 83 C4 10              -  add esp,10
2245E589: DD 45 E8              -  fld qword ptr [ebp-18]
2245E58C: D9 C9                 -  fxch st(1)
2245E58E: DE C9                 -  fmulp st(1),st(0)
2245E590: D9 5D 0C              -  fstp dword ptr [ebp+0C]
2245E593: D9 47 18              -  fld dword ptr [edi+18]
// ---------- INJECTING HERE ----------
2245E596: D9 45 0C              -  fld dword ptr [ebp+0C]
2245E599: DE C1                 -  faddp 
// ---------- DONE INJECTING  ----------
2245E59B: D9 5F 18              -  fstp dword ptr [edi+18]
2245E59E: 8B 47 10              -  mov eax,[edi+10]
2245E5A1: 3D 14 00 00 00        -  cmp eax,00000014
2245E5A6: 0F 85 F9 00 00 00     -  jne RimWorld:SkillRecord:Learn+1f5
2245E5AC: D9 47 18              -  fld dword ptr [edi+18]
2245E5AF: D9 EE                 -  fldz 
2245E5B1: 8B 47 10              -  mov eax,[edi+10]
2245E5B4: 69 C0 E8 03 00 00     -  imul eax,eax,000003E8
2245E5BA: 05 E8 03 00 00        -  add eax,000003E8
2245E5BF: 50                    -  push eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Boost"</Description>
          <LastState Value="0" RealAddress="06010000"/>
          <VariableType>Float</VariableType>
          <Address>vBoost</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Temporary Godly Skill Bonus"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(SkillUseMod,8B 40 10 89 45 FC 8B 4D) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebp-04], #100
  jmp return

SkillUseMod:
  jmp code
  nop
return:
registersymbol(SkillUseMod)

[DISABLE]

SkillUseMod:
  db 8B 40 10 89 45 FC

unregistersymbol(SkillUseMod)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 224A3845

224A3827: 8B 45 0C           -  mov eax,[ebp+0C]
224A382A: 8B 80 8C 00 00 00  -  mov eax,[eax+0000008C]
224A3830: 8B 4D 08           -  mov ecx,[ebp+08]
224A3833: 8B 49 08           -  mov ecx,[ecx+08]
224A3836: 83 EC 08           -  sub esp,08
224A3839: 51                 -  push ecx
224A383A: 50                 -  push eax
224A383B: 39 00              -  cmp [eax],eax
224A383D: E8 6E CA FF FF     -  call RimWorld:Pawn_SkillTracker:GetSkill
224A3842: 83 C4 10           -  add esp,10
// ---------- INJECTING HERE ----------
224A3845: 8B 40 10           -  mov eax,[eax+10]
224A3848: 89 45 FC           -  mov [ebp-04],eax
// ---------- DONE INJECTING  ----------
224A384B: 8B 4D 08           -  mov ecx,[ebp+08]
224A384E: D9 41 10           -  fld dword ptr [ecx+10]
224A3851: D9 41 14           -  fld dword ptr [ecx+14]
224A3854: 50                 -  push eax
224A3855: DB 04 24           -  fild dword ptr [esp]
224A3858: D9 1C 24           -  fstp dword ptr [esp]
224A385B: D9 04 24           -  fld dword ptr [esp]
224A385E: 83 C4 04           -  add esp,04
224A3861: DE C9              -  fmulp st(1),st(0)
224A3863: DE C1              -  faddp 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>51</ID>
      <Description>"Game (Tribal only (or at least doesnt work on explorer))"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
alloc(newmem,$1000)
globalalloc(bGame,8)
label(code)
label(return)

newmem:

code:
  mov [bGame], eax
  mov eax,[eax+1C]
  mov eax,[eax+1C]
  jmp return

RimWorld:StoreUtility:NoStorageBlockersIn+13:
  jmp code
  nop
return:

[DISABLE]

RimWorld:StoreUtility:NoStorageBlockersIn+13:
  db 8B 40 1C 8B 40 1C

dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Boost Skills to Max"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
luacall(PawnUpdate())

[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"Needs"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
alloc(newmem,$1000)
label(code)
label(return)

newmem:

code:
  mov eax,[ebp+08]
  mov [eax+14],(float)2
  fld dword ptr [eax+14]
  jmp return

RimWorld:Need:get_CurLevel+6:
  jmp code
  nop
return:

[DISABLE]

RimWorld:Need:get_CurLevel+6:
  db 8B 45 08 D9 40 14

dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"Stacks"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
alloc(newmem,$1000)
label(code)
label(return)

newmem:

code:
  mov [eax+134], #9999
  mov [edi+34], #75
db 8B 80 34 01 00 00
  jmp return

Verse:Thing:DrawGUIOverlay+2d:
  jmp code
  nop
return:

[DISABLE]

Verse:Thing:DrawGUIOverlay+2d:
  db 8B 80 34 01 00 00

dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Fast Movement"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(MoveSpeed,D9 47 3C D9 EE) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
label(NotUs)

newmem:

code:
  push ecx
  mov ecx, [edi+8]
  cmp [ecx+44],0
  je NotUs
//  mov ecx, [ecx+24]
//  cmp byte ptr [ecx+5c], 1
//  jne NotUs
  mov [edi+3C], (float)0
NotUs:
  pop ecx
  fld dword ptr [edi+3C]
  fldz
  jmp return

MoveSpeed:
  jmp code
return:
registersymbol(MoveSpeed)

[DISABLE]

MoveSpeed:
  db D9 47 3C D9 EE

unregistersymbol(MoveSpeed)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>53</ID>
      <Description>"Instant Work (Tribal only (or at least doesnt work on explorer))"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Work,D9 47 40 8B 43 4C) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [edi+40],0
  fld dword ptr [edi+40]
  mov eax,[ebx+4C]
  jmp return

Work:
  jmp code
  nop
return:
registersymbol(Work)

[DISABLE]

Work:
  db D9 47 40 8B 43 4C

unregistersymbol(Work)
dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>57</ID>
      <Description>"Instant Mine"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Mine,8B 40 44 3D 9C FF FF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+44],0
  mov eax,[eax+44]
  cmp eax,FFFFFF9C
  jmp return

Mine:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Mine)

[DISABLE]

Mine:
  db 8B 40 44 3D 9C FF FF FF

unregistersymbol(Mine)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 059CAD2B

059CAD07: 8B 49 08                       -  mov ecx,[ecx+08]
059CAD0A: 89 8D C0 FE FF FF              -  mov [ebp-00000140],ecx
059CAD10: 8B 40 10                       -  mov eax,[eax+10]
059CAD13: 83 EC 0C                       -  sub esp,0C
059CAD16: 50                             -  push eax
059CAD17: E8 FC 04 00 00                 -  call RimWorld:JobDriver_Mine:get_Mineable
059CAD1C: 83 C4 10                       -  add esp,10
059CAD1F: 89 85 BC FE FF FF              -  mov [ebp-00000144],eax
059CAD25: 8B 45 08                       -  mov eax,[ebp+08]
059CAD28: 8B 40 10                       -  mov eax,[eax+10]
// ---------- INJECTING HERE ----------
059CAD2B: 8B 40 44                       -  mov eax,[eax+44]
059CAD2E: 3D 9C FF FF FF                 -  cmp eax,FFFFFF9C
// ---------- DONE INJECTING  ----------
059CAD33: 7D 12                          -  jnl &lt;MakeNewToils&gt;c__Iterator1C:&lt;&gt;m__57+b7
059CAD35: 8B 45 08                       -  mov eax,[ebp+08]
059CAD38: 8B 40 10                       -  mov eax,[eax+10]
059CAD3B: 83 EC 0C                       -  sub esp,0C
059CAD3E: 50                             -  push eax
059CAD3F: E8 24 05 00 00                 -  call RimWorld:JobDriver_Mine:ResetTicksToPickHit
059CAD44: 83 C4 10                       -  add esp,10
059CAD47: 8B 85 C0 FE FF FF              -  mov eax,[ebp-00000140]
059CAD4D: 8B 80 94 00 00 00              -  mov eax,[eax+00000094]
059CAD53: 85 C0                          -  test eax,eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>60</ID>
      <Description>"Instant Deconstruct"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Deconstruct,D9 41 40 8B 40 14 D9 40 44) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ecx+40],(float)0
  fld dword ptr [ecx+40]
  mov eax,[eax+14]
  jmp return

Deconstruct:
  jmp code
  nop
return:
registersymbol(Deconstruct)

[DISABLE]

Deconstruct:
  db D9 41 40 8B 40 14

unregistersymbol(Deconstruct)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>43</ID>
      <Description>"Instant Research (Tribal only (or at least doesnt work on explorer))"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Research,D9 40 3C DE F9) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+3c], (float)1
  fld dword ptr [eax+3C]
  fdivp st(1),st(0)
  jmp return

Research:
  jmp code
return:
registersymbol(Research)

[DISABLE]

Research:
  db D9 40 3C DE F9

unregistersymbol(Research)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 05C460D3

05C460B3: 83 EC 08              -  sub esp,08
05C460B6: 8B 05 BC 7F A9 04     -  mov eax,[04A97FBC]
05C460BC: 8B 40 2C              -  mov eax,[eax+2C]
05C460BF: 83 EC 08              -  sub esp,08
05C460C2: FF 75 08              -  push [ebp+08]
05C460C5: 50                    -  push eax
05C460C6: 39 00                 -  cmp [eax],eax
05C460C8: E8 C3 ED 76 0D        -  call RimWorld:ResearchManager:GetProgress
05C460CD: 83 C4 10              -  add esp,10
05C460D0: 8B 45 08              -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
05C460D3: D9 40 3C              -  fld dword ptr [eax+3C]
05C460D6: DE F9                 -  fdivp st(1),st(0)
// ---------- DONE INJECTING  ----------
05C460D8: C9                    -  leave 
05C460D9: C3                    -  ret 
05C460DA: 00 00                 -  add [eax],al
05C460DC: 00 00                 -  add [eax],al
05C460DE: 00 00                 -  add [eax],al
05C460E0: 55                    -  push ebp
05C460E1: 8B EC                 -  mov ebp,esp
05C460E3: 83 EC 68              -  sub esp,68
05C460E6: C7 45 B4 00 00 00 00  -  mov [ebp-4C],00000000
05C460ED: C7 45 B8 00 00 00 00  -  mov [ebp-48],00000000
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"PowerBoost"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Power,D9 40 30 D9 5D F0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(vPower)

newmem:

vPower:
dd (float)1000

code:
  fld dword ptr [eax+30]
  fld dword ptr [vPower]
  faddp st(1), st(0)
  fstp dword ptr [ebp-10]
  jmp return

Power:
  jmp code
  nop
return:
registersymbol(Power)

[DISABLE]

Power:
  db D9 40 30 D9 5D F0

unregistersymbol(Power)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 371C2B61

371C2B48: 8B 47 10              -  mov eax,[edi+10]
371C2B4B: 83 EC 08              -  sub esp,08
371C2B4E: 56                    -  push esi
371C2B4F: 50                    -  push eax
371C2B50: 39 00                 -  cmp [eax],eax
371C2B52: E8 69 EC 3E CD        -  call System.Collections.Generic:List`1:get_Item
371C2B57: 83 C4 10              -  add esp,10
371C2B5A: DD 45 E8              -  fld qword ptr [ebp-18]
371C2B5D: 8B C8                 -  mov ecx,eax
371C2B5F: 39 09                 -  cmp [ecx],ecx
// ---------- INJECTING HERE ----------
371C2B61: D9 40 2C              -  fld dword ptr [eax+2C]
371C2B64: D9 5D F0              -  fstp dword ptr [ebp-10]
// ---------- DONE INJECTING  ----------
371C2B67: D9 45 F0              -  fld dword ptr [ebp-10]
371C2B6A: B8 08 33 F9 03        -  mov eax,03F93308
371C2B6F: D9 00                 -  fld dword ptr [eax]
371C2B71: DE C9                 -  fmulp st(1),st(0)
371C2B73: D9 5D F0              -  fstp dword ptr [ebp-10]
371C2B76: D9 45 F0              -  fld dword ptr [ebp-10]
371C2B79: DE C1                 -  faddp 
371C2B7B: D9 5D F4              -  fstp dword ptr [ebp-0C]
371C2B7E: 46                    -  inc esi
371C2B7F: 8B 47 10              -  mov eax,[edi+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Store 1000 Power (may need battery)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(BAtteryStore,D9 40 1C D9 5D F0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+1c], (float)1000
  fld dword ptr [eax+1C]
  fstp dword ptr [ebp-10]
  jmp return

BAtteryStore:
  jmp code
  nop
return:
registersymbol(BAtteryStore)

[DISABLE]

BAtteryStore:
  db D9 40 1C D9 5D F0

unregistersymbol(BAtteryStore)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0AEADBD7

0AEADBBE: 8B 47 14              -  mov eax,[edi+14]
0AEADBC1: 83 EC 08              -  sub esp,08
0AEADBC4: 56                    -  push esi
0AEADBC5: 50                    -  push eax
0AEADBC6: 39 00                 -  cmp [eax],eax
0AEADBC8: E8 CB 5A 26 FA        -  call System.Collections.Generic:List`1:get_Item
0AEADBCD: 83 C4 10              -  add esp,10
0AEADBD0: DD 45 E8              -  fld qword ptr [ebp-18]
0AEADBD3: 8B C8                 -  mov ecx,eax
0AEADBD5: 39 09                 -  cmp [ecx],ecx
// ---------- INJECTING HERE ----------
0AEADBD7: D9 40 1C              -  fld dword ptr [eax+1C]
0AEADBDA: D9 5D F0              -  fstp dword ptr [ebp-10]
// ---------- DONE INJECTING  ----------
0AEADBDD: D9 45 F0              -  fld dword ptr [ebp-10]
0AEADBE0: DE C1                 -  faddp 
0AEADBE2: D9 5D F4              -  fstp dword ptr [ebp-0C]
0AEADBE5: 46                    -  inc esi
0AEADBE6: 8B 47 14              -  mov eax,[edi+14]
0AEADBE9: 8B C8                 -  mov ecx,eax
0AEADBEB: 39 09                 -  cmp [ecx],ecx
0AEADBED: 8B 40 0C              -  mov eax,[eax+0C]
0AEADBF0: 3B F0                 -  cmp esi,eax
0AEADBF2: 7C C4                 -  jl RimWorld:PowerNet:CurrentStoredEnergy+20
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Crafted Items are Legendary"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(sQuality,88 43 10 8B 43 08) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+10],8
  mov eax,[ebx+08]
  jmp return

sQuality:
  jmp code
  nop
return:
registersymbol(sQuality)

[DISABLE]

sQuality:
  db 88 43 10 8B 43 08

unregistersymbol(sQuality)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>cPawn</Name>
      <Address>07F90000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bPawn</Name>
      <Address>07F90010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tPawn</Name>
      <Address>07BE0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vBoost</Name>
      <Address>06010000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bSpeed</Name>
      <Address>00F50000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Speed</Name>
      <Address>0FF03F87</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>StackValue</Name>
      <Address>06010010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Research</Name>
      <Address>05B5C7A3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Needs</Name>
      <Address>05B535D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ExpBoost</Name>
      <Address>05B54460</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>doWorkQuickly</Name>
      <Address>05C2E0AB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>StackableItemEdit</Name>
      <Address>1483BDC1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bGame</Name>
      <Address>06160000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>function PawnUpdate()
  local cnt1 = readInteger("[[[[bGame]+1C]+18]+C]+20")
  cnt1 = 16 + (cnt1 - 1)*4
  local cnt2 = readInteger("[[[[[[[bGame]+1C]+18]+C]+14]+"..string.format("%X",cnt1).."]+8]+C")
  for i=0,cnt2-1 do
    local _o = 16+i*4
    --Skills
    local cnt3 = readInteger("[[[[[[[[[[[bGame]+1C]+18]+C]+14]+"..string.format("%X",cnt1).."]+8]+"..string.format("%X",_o).."]+94]+C]+8]+C")
    if cnt3 ~= nil then
       for j=0,cnt3-1 do
         local _s = 16 + j*4
         writeFloat("[[[[[[[[[[[[bGame]+1C]+18]+C]+14]+"..string.format("%X",cnt1).."]+8]+"..string.format("%X",_o).."]+94]+C]+8]+"..string.format("%X",_s).."]+18",999999)--max Current EXP
         writeFloat("[[[[[[[[[[[[bGame]+1C]+18]+C]+14]+"..string.format("%X",cnt1).."]+8]+"..string.format("%X",_o).."]+94]+C]+8]+"..string.format("%X",_s).."]+1C",99999)--max earned exp for day
         writeInteger("[[[[[[[[[[[[bGame]+1C]+18]+C]+14]+"..string.format("%X",cnt1).."]+8]+"..string.format("%X",_o).."]+94]+C]+8]+"..string.format("%X",_s).."]+14",2)--burning passion
       end
    end
    --Skills End
    --
  end
end


myTimer = createTimer(nil, false)
myTimer.Interval = 500

lastPawn = 0

myTimer.OnTimer = function(UpdatePawn)
  if readPointer("bPawn") ~= nil and lastPawn ~= readPointer("bPawn") then
    lastPawn = readPointer("bPawn")
    for i=0,11,1 do
       _o = 16+i*4
       writeInteger("[[[[[bPawn]+8C]+C]+8]+"..string.format("%X",_o).."]+10",20)
       writeInteger("[[[[[bPawn]+8C]+C]+8]+"..string.format("%X",_o).."]+14",2)
         writeFloat("[[[[[bPawn]+8C]+C]+8]+"..string.format("%X",_o).."]+18",1000)
    end
  end
end

myTimer2 = createTimer(nil, false)
myTimer2.Interval = 500

myTimer2.OnTimer = function(Needs)
  if readPointer("tPawn") ~= nil then
    for i=0,6,1 do
       _o = 16+i*4
      writeFloat("[[[[[tPawn]+9C]+C]+8]+"..string.format("%X",_o).."]+14",1)
    end
  end
end
</LuaScript>
</CheatTable>
