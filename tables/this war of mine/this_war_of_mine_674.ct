<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>36</ID>
      <Description>"Infinite Grabbing"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : This War of Mine.exe
  Version: 
  Date   : 2014-11-15
  Author : Matthijs

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(Infinite_Grab,This War of Mine.exe,FF 4E 10 8B 46 10 51 6A 01 50 8D 4E 1C E8 23) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[esi+10]
  jmp return

Infinite_Grab:
  jmp code
  nop
return:
registersymbol(Infinite_Grab)

[DISABLE]

Infinite_Grab:
  db FF 4E 10 8B 46 10

unregistersymbol(Infinite_Grab)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "This War of Mine.exe"+20A04B

"This War of Mine.exe"+20A034: 8B 45 10           -  mov eax,[ebp+10]
"This War of Mine.exe"+20A037: 2B C8              -  sub ecx,eax
"This War of Mine.exe"+20A039: 49                 -  dec ecx
"This War of Mine.exe"+20A03A: 51                 -  push ecx
"This War of Mine.exe"+20A03B: 8D 50 01           -  lea edx,[eax+01]
"This War of Mine.exe"+20A03E: 52                 -  push edx
"This War of Mine.exe"+20A03F: 50                 -  push eax
"This War of Mine.exe"+20A040: 8D 4E 1C           -  lea ecx,[esi+1C]
"This War of Mine.exe"+20A043: E8 38 E1 FF FF     -  call "This War of Mine.exe"+208180
"This War of Mine.exe"+20A048: 8B 4E 18           -  mov ecx,[esi+18]
// ---------- INJECTING HERE ----------
"This War of Mine.exe"+20A04B: FF 4E 10           -  dec [esi+10]
"This War of Mine.exe"+20A04E: 8B 46 10           -  mov eax,[esi+10]
// ---------- DONE INJECTING  ----------
"This War of Mine.exe"+20A051: 51                 -  push ecx
"This War of Mine.exe"+20A052: 6A 01              -  push 01
"This War of Mine.exe"+20A054: 50                 -  push eax
"This War of Mine.exe"+20A055: 8D 4E 1C           -  lea ecx,[esi+1C]
"This War of Mine.exe"+20A058: E8 23 1E FD FF     -  call "This War of Mine.exe"+1DBE80
"This War of Mine.exe"+20A05D: 8B 45 EC           -  mov eax,[ebp-14]
"This War of Mine.exe"+20A060: 8B 5D 08           -  mov ebx,[ebp+08]
"This War of Mine.exe"+20A063: 40                 -  inc eax
"This War of Mine.exe"+20A064: 33 FF              -  xor edi,edi
"This War of Mine.exe"+20A066: 89 45 EC           -  mov [ebp-14],eax
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :dec [esi+10]</Description>
      <Address>00F0A04B</Address>
      <ModuleName>This War of Mine.exe</ModuleName>
      <ModuleNameOffset>20A04B</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>4E</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>10</Byte>
        <Byte>51</Byte>
        <Byte>6A</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <LuaScript>local CELIST = getAddressList();
local INVENTORY_LIST = {};
local TIMER = createTimer(nil);

function getOrCreateHeader(list, str, hideChildren)
 local item = list.getMemoryRecordByDescription(str);
 if item == nil then
   item = CELIST.createMemoryRecord();
   item.setDescription(str);
   item.setType(vtDword);
   item.IsGroupHeader = true;
   if(hideChildren) then
      item.Options = "[moHideChildren]";
   end
 end
 return item
end

function createInventoryList()
  local offset = 0x0;
  local baseAddress = "\"This War of Mine.exe\"+0050B7D4";
  local senityLimit = 50; -- seems to be the maximum
  local addCur = 0;

  while addCur &lt; senityLimit do
   addCur = addCur+1;

   -- because i don't know a better way to create a valid CEAddressString
   local hexOffsetName = string.format("%X",0xC+offset);
   local hexOffsetValue = string.format("%X",0x10+offset);

   local invInfo = {};
   invInfo.nameAddress = "[["..baseAddress.."]+"..hexOffsetName.."]+0";
   invInfo.valueAddress = "["..baseAddress.."]+"..hexOffsetValue;
   invInfo.usable = nil;

   invInfo.record = CELIST.createMemoryRecord();
   invInfo.record.setDescription("Waiting...");
   invInfo.record.setAddress(invInfo.valueAddress);
   invInfo.record.setType(vtDword);
   memoryrecord_onDestroy(invInfo.record, deleteInventoryItem);

   local recordId = memoryrecord_getID(invInfo.record);

   INVENTORY_LIST[recordId] = invInfo;

   updateInvetoryInfo(invInfo);
   offset = offset+0x20;
  end
end

function maintainInventory()
  local items = 0;
  for key,value in pairs(INVENTORY_LIST) do
      if value then
        items = items + 1;
        updateInvetoryInfo(value);
      end
  end
  if items == 0 then
    print("Disabling timer");
    timer_setEnabled(TIMER,false);
  end
end

function deleteInventoryItem(record)
  print("Warning item deleted!!");
  local id = memoryrecord_getID(record);
  INVENTORY_LIST[id] = nil;
end

function updateInvetoryInfo(invInfo)
   local unusableText = "--Empty/Invalid Slot--";
   local oldUsable = invInfo.usable;
   local oldName = invInfo.name;

   invInfo.name = readString(invInfo.nameAddress, 20);
   invInfo.usable = true; -- assume the entry is ok until proven otherwise

   -- Simple senity check
   if invInfo.name == nil or string.len(invInfo.name) &lt; 4 then
    invInfo.name = unusableText;
    invInfo.usable = false;
   end

   invInfo.value = readInteger(invInfo.valueAddress);
   -- Simple senity check
   if invInfo.value == nil or invInfo.value &lt; 0 or invInfo.value &gt; 100 then
    invInfo.name = unusableText;
    invInfo.usable = false;
   end
   if oldName and oldName ~= invInfo.name then
      print("Updating "..oldName.." is now "..invInfo.name);
   end
   invInfo.record.setDescription(invInfo.name);
   -- place it under the right header
   if invInfo.usable == true then
     if oldUsable == true then
      return;
     end
     invInfo.record.appendToEntry(getOrCreateHeader(CELIST,"Inventory Slots",false));
   else
     if oldUsable == false then
      return;
     end
     invInfo.record.appendToEntry(getOrCreateHeader(CELIST,"Inventory Unused Slots", true));
   end
end

-- and go
createInventoryList();
timer_setInterval(TIMER,1000);
timer_onTimer(TIMER,maintainInventory);
timer_setEnabled(TIMER,true);
</LuaScript>
</CheatTable>
