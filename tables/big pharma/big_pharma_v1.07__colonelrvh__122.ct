<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Get Cash Base Address"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(GetCash,8B 40 44 C9 C3 00 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BCash,4)

newmem:

code:
  mov [BCash],eax
  mov eax,[eax+44]
  leave 
  ret 
  jmp return

GetCash:
  jmp newmem
return:
registersymbol(GetCash)

[DISABLE]

GetCash:
  db 8B 40 44 C9 C3

unregistersymbol(GetCash)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 04CE5730

""+4CE5711: E9 12 A9 9C FF     -  jmp 046B0028
""+4CE5716: 00 00              -  add [eax],al
""+4CE5718: 55                 -  push ebp
""+4CE5719: 8B EC              -  mov ebp,esp
""+4CE571B: 83 EC 08           -  sub esp,08
""+4CE571E: E8 C5 1E F8 FF     -  call 04C675E8
""+4CE5723: 8B 80 98 00 00 00  -  mov eax,[eax+00000098]
""+4CE5729: 8B C8              -  mov ecx,eax
""+4CE572B: 39 09              -  cmp [ecx],ecx
""+4CE572D: 8B 40 18           -  mov eax,[eax+18]
// ---------- INJECTING HERE ----------
""+4CE5730: 8B 40 44           -  mov eax,[eax+44]
""+4CE5733: C9                 -  leave 
""+4CE5734: C3                 -  ret 
// ---------- DONE INJECTING  ----------
""+4CE5735: 00 00              -  add [eax],al
""+4CE5737: 00 55 8B           -  add [ebp-75],dl
""+4CE573A: EC                 -  in al,dx
""+4CE573B: 83 EC 08           -  sub esp,08
""+4CE573E: E8 A5 1E F8 FF     -  call 04C675E8
""+4CE5743: 8B 80 98 00 00 00  -  mov eax,[eax+00000098]
""+4CE5749: 39 00              -  cmp [eax],eax
""+4CE574B: 8B 40 18           -  mov eax,[eax+18]
""+4CE574E: 8B 4D 0C           -  mov ecx,[ebp+0C]
""+4CE5751: 89 48 44           -  mov [eax+44],ecx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Cash"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BCash]+44</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Executives"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BCash]+4C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Get Ingredient Upgrade Points Base Address"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Big Pharma.exe
  Version:
  Date   : 2017-02-07
  Author : ColonelRVH

  This script does blah blah blah
}

[ENABLE]

aobscan(GetIUP,8B 49 08 83 EC 08 51 50 39 00 E8 4C) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BIUP,4)

newmem:

code:
  mov [BIUP],ecx
  mov ecx,[ecx+08]
  sub esp,08
  jmp return

GetIUP:
  jmp newmem
  nop
return:
registersymbol(GetIUP)

[DISABLE]

GetIUP:
  db 8B 49 08 83 EC 08

unregistersymbol(GetIUP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 23E3DF0D

""+23E3DEE9: FF 75 08           -  push [ebp+08]
""+23E3DEEC: E8 87 35 FD FF     -  call 23E11478
""+23E3DEF1: 83 C4 10           -  add esp,10
""+23E3DEF4: 89 45 F8           -  mov [ebp-08],eax
""+23E3DEF7: E8 EC 96 FB E0     -  call 04DF75E8
""+23E3DEFC: 8B C8              -  mov ecx,eax
""+23E3DEFE: 8B 45 F8           -  mov eax,[ebp-08]
""+23E3DF01: 8B 89 98 00 00 00  -  mov ecx,[ecx+00000098]
""+23E3DF07: 8B 49 18           -  mov ecx,[ecx+18]
""+23E3DF0A: 8B 49 28           -  mov ecx,[ecx+28]
// ---------- INJECTING HERE ----------
""+23E3DF0D: 8B 49 08           -  mov ecx,[ecx+08]
""+23E3DF10: 83 EC 08           -  sub esp,08
// ---------- DONE INJECTING  ----------
""+23E3DF13: 51                 -  push ecx
""+23E3DF14: 50                 -  push eax
""+23E3DF15: 39 00              -  cmp [eax],eax
""+23E3DF17: E8 4C 00 00 00     -  call 23E3DF68
""+23E3DF1C: 83 C4 10           -  add esp,10
""+23E3DF1F: 83 EC 0C           -  sub esp,0C
""+23E3DF22: FF 75 08           -  push [ebp+08]
""+23E3DF25: E8 06 36 FD FF     -  call 23E11530
""+23E3DF2A: 83 C4 10           -  add esp,10
""+23E3DF2D: 89 45 FC           -  mov [ebp-04],eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Ingredient Upgrade Points"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BIUP]+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Get Research Upgrade Points Base Address"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Big Pharma.exe
  Version: 
  Date   : 2017-02-07
  Author : ColonelRVH

  This script does blah blah blah
}

[ENABLE]

aobscan(GetRUP,8B 49 08 83 EC 08 51 50 39 00 E8 13) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BRUP,4)

newmem:

code:
  mov [BRUP],ecx
  mov ecx,[ecx+08]
  sub esp,08
  jmp return

GetRUP:
  jmp newmem
  nop
return:
registersymbol(GetRUP)

[DISABLE]

GetRUP:
  db 8B 49 08 83 EC 08

unregistersymbol(GetRUP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 25880916

""+258808F2: FF 75 08              -  push [ebp+08]
""+258808F5: E8 D6 4D FD FF        -  call 258556D0
""+258808FA: 83 C4 10              -  add esp,10
""+258808FD: 89 45 FC              -  mov [ebp-04],eax
""+25880900: E8 E3 6C D6 DE        -  call 045E75E8
""+25880905: 8B C8                 -  mov ecx,eax
""+25880907: 8B 45 FC              -  mov eax,[ebp-04]
""+2588090A: 8B 89 98 00 00 00     -  mov ecx,[ecx+00000098]
""+25880910: 8B 49 18              -  mov ecx,[ecx+18]
""+25880913: 8B 49 24              -  mov ecx,[ecx+24]
// ---------- INJECTING HERE ----------
""+25880916: 8B 49 08              -  mov ecx,[ecx+08]
""+25880919: 83 EC 08              -  sub esp,08
// ---------- DONE INJECTING  ----------
""+2588091C: 51                    -  push ecx
""+2588091D: 50                    -  push eax
""+2588091E: 39 00                 -  cmp [eax],eax
""+25880920: E8 13 00 00 00        -  call 25880938
""+25880925: 83 C4 10              -  add esp,10
""+25880928: C9                    -  leave 
""+25880929: C3                    -  ret 
""+2588092A: 00 00                 -  add [eax],al
""+2588092C: 68 20 1A DA 0D        -  push 0DDA1A20
""+25880931: E9 F2 F6 75 DE        -  jmp 03FE0028
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Research Upgrade Points"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BRUP]+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>BCash</Name>
      <Address>22F70000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BUpgrade</Name>
      <Address>01370010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BUP</Name>
      <Address>22F70010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetCash</Name>
      <Address>04666580</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BIUP</Name>
      <Address>003C0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BRUP</Name>
      <Address>003C0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetIUP</Name>
      <Address> 258808DD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetRUP</Name>
      <Address> 25880916</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
