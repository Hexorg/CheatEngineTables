<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>21</ID>
      <Description>"BSP v1.2 Steam Script v3.0 AOB"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Battlestations Pacific
 Game Version  : 1.2
 Game Sponsor  : Myself
 Process Name  : bsp.exe
 Relevant Info : 32bits/WWII/XLIVE protection
 Script Version: 3.0
 CE Version    : 6.6
 Release date  : 04-Dec-2016
 Author        : Recifense
 History:
 19-jul-2009: First Release
 04-Dec-2016: Release for version 1.2 Steam
 Features:
 - God Mode
 - Sub Oxygen
 - Torpedoes
 - Resources
 - XLIVE prot bypass
 - Some Pointers
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.6) then
    ShowMessage('Sorry. CE version should be 6.6 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "bsp.exe") then
    ShowMessage('Error. Expected Process = bsp.exe')
  end
{$asm}

//=========================================
// Definitions
{
define(LUDO,"bsp.exe")
define(GDMD,bsp.exe+00479144)
define(MOSO,bsp.exe+00455302)
define(MOPT,bsp.exe+00410dad)
define(MOPR,bsp.exe+002c7d8e)
define(HPID,bsp.exe+00A08654)
}
//=========================================
// Constants used in the script (that can be changed)
define(ctCE65,(float)6.6)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(XLHP,xlive.dll,8b ff 55 8b ec 83 ec 20 53 56 57 8d 45 e0)
AOBScanModule(GDMD,bsp.exe,d9 44 24 28 d9 1c 24 e8 ?? ?? ?? ?? 83 3d ?? ?? ?? ?? 00 0f 84)
AOBScanModule(MOSO,bsp.exe,d9 9e 7c 12 00 00 e8 ?? ?? ?? ?? d9 86 7c 12 00 00 d9 80 bc 04)
AOBScanModule(MOPT,bsp.exe,8b 81 4c 10 00 00 85 c0 ?? ?? 83 c0 ff 89 81 4c 10 00 00 c2 04)
AOBScanModule(MOPR,bsp.exe,29 46 0c 3b 77 04 ?? ?? e8 ?? ?? ?? ?? 3b 77 04 8b 5e 0c ?? ??)
AOBScanModule(FPID,bsp.exe,89 0d ?? ?? ?? ?? 0f 8c ?? ?? ?? ?? 56 e8 ?? ?? ?? ?? 8b f0 e8)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonSubOxygen)
label(_BackMSO)
label(_ExitMSO)
label(_MonPlayerTorpedoes)
label(_BackMPT)
label(_ExitMPT)
label(_MonPlayerResource)
label(_BackMPR)
label(_ExitMPR)

label(iEnableGMD)
label(iEnableMWF)
label(iEnableMSO)
label(iEnableMPT)
label(iEnableMPR)

label(iOwnerID)

label(pLast)
label(pSub)
label(pTorp)
label(pRes)

label(HPID)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMWF)
registersymbol(iEnableMSO)
registersymbol(iEnableMPT)
registersymbol(iEnableMPR)
registersymbol(iOwnerID)
registersymbol(pLast)
registersymbol(pSub)
registersymbol(pTorp)
registersymbol(pRes)

registersymbol(XLHP)
registersymbol(GDMD)
registersymbol(MOSO)
registersymbol(MOPT)
registersymbol(MOPR)
registersymbol(FPID)
registersymbol(HPID)

//=========================================
MyCode:
//=========================================
// When taking damage
_GodMode:
 mov eax,[HPID]                    // Get player ID
 movzx eax,word ptr [eax]

 mov [pLast],esi                   // Save ptr for debugging

 cmp eax,[esi+54]                  // Playerï¿½s unit?
 jne _GodMD00                      // Jump if false

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[esi+0000036c]            // Get maximum HP
 mov dword ptr [esp+28],eax        // Update next HP
 jmp _ExitGMD

_GodMD00:
 cmp dword ptr [iEnableMWF],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,41200000
 cmp eax,[esp+28]
 jge _ExitGMD

 mov [esp+28],eax                  // Update next HP

_ExitGMD:
 fld dword ptr [esp+28]            // Original code
 fstp dword ptr [esp]              // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
align 10,cc
//=========================================
// When consuming Oxygen
_MonSubOxygen:
 mov [pSub],esi

 fstp dword ptr [esi+0000127c]     // Original code

 cmp dword ptr [iEnableMSO],0
 je _ExitMSO                       // Jump if feature is disabled

 mov eax,[HPID]                    // Get player ID
 movzx eax,word ptr [eax]

 cmp eax,[esi+54]
 jne _ExitMSO

 mov dword ptr [esi+0000127c],3f800000 // Oxygen = 100%

_ExitMSO:
 jmp _BackMSO                      // Back to main code

//=========================================
align 10,cc
//========================================= NHP
// When changing amount
_MonPlayerTorpedoes:
 mov [pTorp],ecx

 cmp dword ptr [iEnableMPT],0
 je _ExitMPT                       // Jump if feature is disabled

 mov eax,[HPID]                    // Get player ID
 movzx eax,word ptr [eax]

 cmp eax,[ecx+54]
 jne _ExitMPT

 mov eax,[ecx+0000104C]            // Original code
 test eax,eax
 jle _ExitMPT

 inc eax
 mov [ecx+0000104c],eax

_ExitMPT:
 mov eax,[ecx+0000104C]            // Original code
 jmp _BackMPT                      // Back to main code

//=========================================
align 10,cc
//=========================================
// When changing amount
_MonPlayerResource:
 mov [pRes],esi

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 push ecx
 mov ecx,[HPID]                    // Get player ID
 movzx ecx,word ptr [ecx]
 cmp ecx,[ebp-00001134]            // 00001188+54
 pop ecx
 jne _ExitMPR

 xor eax,eax

_ExitMPR:
 sub [esi+0c],eax                  // Original code
 cmp esi,[edi+04]                  // Original code
 jmp _BackMPR                      // Back to main code

//=========================================
align 10,'='
 db '===============================&gt;'
 db 'CE6.6 Script by Recifense 120416'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMWF:
 dd 0
iEnableMSO:
 dd 0
iEnableMPT:
 dd 0
iEnableMPR:
 dd 0
iOwnerID:
 dd 0
pLast:
 dd 0
pSub:
 dd 0
pTorp:
 dd 0
pRes:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 nop
 nop
_BackGMD:

MOSO:
 jmp _MonSubOxygen
 nop
_BackMSO:

MOPT:
 jmp _MonPlayerTorpedoes
 nop
_BackMPT:

MOPR:
 jmp _MonPlayerResource
 nop
_BackMPR:

FPID+2:
HPID:

XLHP:
 ret 000c
 nop
 db 'CE66'
 nop

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// fld dword ptr [esp+28]
// fstp dword ptr [esp]
 db d9 44 24 28 d9 1c 24

MOSO:
// fstp dword ptr [esi+0000127C]
 db d9 9e 7c 12 00 00

MOPT:
// mov eax,[ecx+0000104C]
 db 8b 81 4c 10 00 00

MOPR:
// sub [esi+0C],eax
// cmp esi,[edi+04]
 db 29 46 0c 3b 77 04

XLHP:
 db 8b ff 55 8b ec 83 ec 20 53 56 57 8d 45 e0

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMWF)
unregistersymbol(iEnableMSO)
unregistersymbol(iEnableMPT)
unregistersymbol(iEnableMPR)
unregistersymbol(iOwnerID)
unregistersymbol(pLast)
unregistersymbol(pSub)
unregistersymbol(pTorp)
unregistersymbol(pRes)

unregistersymbol(XLHP)
unregistersymbol(GDMD)
unregistersymbol(MOSO)
unregistersymbol(MOPT)
unregistersymbol(MOPR)
unregistersymbol(FPID)
unregistersymbol(HPID)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== God Mode -----------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>139</ID>
          <Description>"[X] &lt;== Weak Fow  -----------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMWF",1)
getAddressList().getMemoryRecordByID(139).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMWF",0)
getAddressList().getMemoryRecordByID(139).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"[X] &lt;== Unlimited Oxygen ---------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMSO",1)
getAddressList().getMemoryRecordByID(140).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMSO",0)
getAddressList().getMemoryRecordByID(140).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"[X] &lt;== Unlimited Torpedo --------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPT",1)
getAddressList().getMemoryRecordByID(141).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPT",0)
getAddressList().getMemoryRecordByID(141).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>142</ID>
          <Description>"[X] &lt;== Unlimited Support ---------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(142).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(142).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20161204</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Battlestations Pacific
 Game Version  : 1.2
 Game Sponsor  : Myself
 Process Name  : bsp.exe
 Relevant Info : 32bits/WWII/XLIVE protection
 Script Version: 3.0
 CE Version    : 6.6
 Release date  : 04-Dec-2016
 Author        : Recifense
 History:
 19-jul-2009: First Release
 04-Dec-2016: Release for version 1.2 Steam
 Features:
 - God Mode              [1]
 - Sub Oxygen            [2]
 - Torpedoes             [3]
 - Resources             [4]
 - XLIVE prot bypass     [5]
 - Some Pointers         [6]
===========================================
[1] It works for human player's units only. (Donnot let your Airplane fall);
[2] human player's Sub Oxygen will not decrease;
[3] Human player's Torpedoes will not not decrease;
[4] Human player's available resources;
[5] For avoiding crashes;
[6] For debugging
===========================================
[USAGE]
1) Run CE66;
2) Run Game;
3) Load the game process "bsp.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
- See description on the table entries;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
