<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>291</ID>
      <Description>"Superspeed"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(POINTER_Base,"Borderlands2.exe"+015EA3F8)

[ENABLE]
aobscan(AOB_Acceleration,F3 0F 58 CB F3 0F 58 D4 F3 0F 58 C5 F3 0F 11 8E 04 01 00 00)
aobscan(AOB_Speed,F3 0F 10 96 0C 01 00 00 F3 0F 59 C9 F3 0F 59 C0 F3 0F 58 C1)

alloc(CODE,2048)
label(INJECT_Acceleration)
label(ENTER_Acceleration)
label(ORIGINAL_Acceleration)
label(EXIT_Acceleration)
label(RETURN_Acceleration)
label(INJECT_Speed)
label(ENTER_Speed)
label(ORIGINAL_Speed)
label(EXIT_Speed)
label(RETURN_Speed)
label(FLOAT_Acceleration)
label(FLOAT_Speed)
label(POINTER_Speed)
registersymbol(INJECT_Acceleration)
registersymbol(INJECT_Speed)
registersymbol(FLOAT_Acceleration)
registersymbol(FLOAT_Speed)
registersymbol(POINTER_Speed)

CODE:
ENTER_Acceleration:
  push eax
  push ebx
// store acceleration pointer
  mov eax,[POINTER_Base]
  mov ebx,[eax+30]
  mov eax,[ebx+A4]
  mov [POINTER_Speed],eax
// right pointer?
  cmp dword ptr [POINTER_Speed],esi
  jne ORIGINAL_Acceleration
  mulss xmm3,[FLOAT_Acceleration]
  mulss xmm4,[FLOAT_Acceleration]
  mulss xmm5,[FLOAT_Acceleration]
ORIGINAL_Acceleration:
  addss xmm1,xmm3
  addss xmm2,xmm4
EXIT_Acceleration:
  pop ebx
  pop eax
  jmp RETURN_Acceleration

ENTER_Speed:
  push eax
  push ebx
// store acceleration pointer
  mov eax,[POINTER_Base]
  mov ebx,[eax+30]
  mov eax,[ebx+A4]
  mov [POINTER_Speed],eax
// right pointer?
  cmp dword ptr [POINTER_Speed],esi
  jne ORIGINAL_Speed
  mulss xmm4,[FLOAT_Speed]
ORIGINAL_Speed:
  movss xmm2,[esi+0000010C]
EXIT_Speed:
  pop ebx
  pop eax
  jmp RETURN_Speed

FLOAT_Acceleration:
  dd (float)3
FLOAT_Speed:
  dd (float)3
POINTER_Speed:
  dd 0

AOB_Acceleration:
INJECT_Acceleration:
  jmp ENTER_Acceleration
  nop
  nop
  nop
RETURN_Acceleration:

AOB_Speed:
INJECT_Speed:
  jmp ENTER_Speed
  nop
  nop
  nop
RETURN_Speed:

[DISABLE]
INJECT_Acceleration:
  addss xmm1,xmm3
  addss xmm2,xmm4
  // alt: db F3 0F 58 CB F3 0F 58 D4

INJECT_Speed:
  movss xmm2,[esi+0000010C]
  // alt: db F3 0F 10 96 0C 01 00 00

unregistersymbol(INJECT_Acceleration)
unregistersymbol(INJECT_Speed)
unregistersymbol(FLOAT_Acceleration)
unregistersymbol(FLOAT_Speed)
unregistersymbol(POINTER_Speed)
dealloc(CODE,2048)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>292</ID>
          <Description>"FLOAT_Acceleration"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>FLOAT_Acceleration</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>293</ID>
          <Description>"FLOAT_Speed"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>FLOAT_Speed</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>286</ID>
      <Description>"Superjump"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(POINTER_Base,"Borderlands2.exe"+015EA3F8)

[ENABLE]
aobscan(AOB_Jump,8B 45 0C D9 00 8B 4D 08 D9 19 5D C2 14 00 8B 51 44)

alloc(CODE,2048)
label(INJECT_Jump)
label(ENTER_Jump)
label(ORIGINAL_Jump)
label(EXIT_Jump)
label(RETURN_Jump)
label(FLOAT_Height)
label(FLOAT_Xmm0)
label(FLOAT_Force)
label(POINTER_Speed)
registersymbol(INJECT_Jump)
registersymbol(FLOAT_Height)
registersymbol(FLOAT_Xmm0)
registersymbol(FLOAT_Force)
registersymbol(POINTER_Speed)

CODE:
ENTER_Jump:
  push ebx
  push ecx
// store acceleration pointer
  mov ebx,[POINTER_Base]
  mov ecx,[ebx+30]
  mov ebx,[ecx+A4]
  mov [POINTER_Speed],ebx
// right pointer?
  mov ebx,[ebp+08]
  sub ebx,010C
  cmp dword ptr [POINTER_Speed],ebx
  jne ORIGINAL_Jump
  mov eax,[ebp+0C]
  movss [FLOAT_Xmm0],xmm0
  movss xmm0,[eax]
  mulss xmm0,[FLOAT_Height]
  movss [FLOAT_Force],xmm0
  movss xmm0,[FLOAT_Xmm0]
  fld dword ptr [FLOAT_Force]
  jmp EXIT_Jump
ORIGINAL_Jump:
  mov eax,[ebp+0C]
  fld dword ptr [eax]
EXIT_Jump:
  pop ecx
  pop ebx
  jmp RETURN_Jump

FLOAT_Height:
  dd (float)1.5
FLOAT_Xmm0:
  dd (float)0
FLOAT_Force:
  dd (float)0
POINTER_Speed:
  dd 0

AOB_Jump:
INJECT_Jump:
  jmp ENTER_Jump
RETURN_Jump:

[DISABLE]
INJECT_Jump:
  mov eax,[ebp+0C]
  fld dword ptr [eax]
  // alt: db 8B 45 0C D9 00

unregistersymbol(INJECT_Jump)
unregistersymbol(FLOAT_Height)
unregistersymbol(FLOAT_Xmm0)
unregistersymbol(FLOAT_Force)
unregistersymbol(POINTER_Speed)
dealloc(CODE)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>287</ID>
          <Description>"FLOAT_Height"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>FLOAT_Height</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>FLAG_Speed</Name>
      <Address>3DBE00C9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FLAG_Jump</Name>
      <Address>3DBE00CD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FLOAT_Jump</Name>
      <Address>3DBE00D5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>POINTER_Base</Name>
      <Address>08F40011</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
