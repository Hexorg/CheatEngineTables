<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"granade"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
originalcode:
mov [esi+4C],(int)3
mov ecx,[esp+18]

exit:
jmp returnhere

"Shank2.exe"+13FECB:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
dealloc(newmem)
"Shank2.exe"+13FECB:
mov [esi+4C],eax
mov ecx,[esp+18]
//Alt: db 89 46 4C 8B 4C 24 18

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"item"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
004D6032:
add [ebx+50],eax
[DISABLE]
004D6032:
sub [ebx+50],eax

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"bullets"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
004D6A5B:
db 90

 
 
[DISABLE]
004D6A5B:
db 49

//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"OHK"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) 
alloc(val,24)
alloc(count,128)
label(www)
label(new)
label(returnhere)
label(originalcode)
label(exit)
count:
dd (int)2
newmem:

originalcode:
fld dword ptr [esi+000000A0]
cmp [count],2
jne www
mov [val],esi
sub [count],1
jmp exit
www:
cmp [count],1
jne exit
mov [val+4],esi
sub [count],1
exit:
cmp [val],esi
je returnhere
cmp [val+4],esi
je returnhere
cmp [esi+a0],(float)126
ja new
cmp [val+8],esi
je returnhere
mov [count],2
jmp returnhere
new:
mov [val+8],esi
jmp returnhere
"Shank2.exe"+F0249:
jmp newmem
nop
returnhere:


alloc(newmem1,2048) //2kb should be enough
alloc(value,128)
label(returnhere1)
label(god)
label(godad)
label(originalcode1)
label(exit1)
value:
dd (float)0.0
newmem1:
originalcode1:
fld dword ptr [esp+1C]
cmp ebp,[val]
je godad
cmp ebp,[val+4]
jne god
godad:
fmul dword ptr [value]
god:
mov ecx,[ebp+08]

exit1:
jmp returnhere1

"Shank2.exe"+EDCE4:
jmp newmem1
nop
nop
returnhere1:

alloc(newmem3,2048) //2kb should be enough
label(returnhere3)
label(originalcode3)
label(exit3)

newmem3:

originalcode3:
cmp ebp,[val]
je exit3
cmp ebp,[val+4]
je exit3
mov [ebp+a0],0
jmp returnhere3
exit3:
fstp dword ptr [ebp+000000A0]
jmp returnhere3

"Shank2.exe"+EDD01:
jmp newmem3
nop
returnhere3:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem3)
"Shank2.exe"+EDD01:
fstp dword ptr [ebp+000000A0]
//Alt: db D9 9D A0 00 00 00


dealloc(newmem)
"Shank2.exe"+F0249:
fld dword ptr [esi+000000A0]
//Alt: db D9 86 A0 00 00 00


dealloc(newmem1)
"Shank2.exe"+EDCE4:
fld dword ptr [esp+1C]
mov ecx,[ebp+08]
//Alt: db D9 44 24 1C 8B 4D 08
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Instant recharge"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
alloc(val,12)
label(returnhere)
label(originalcode)
label(exit)
val:
dd (float)0.75
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fmul dword ptr [val]
originalcode:
fsub dword ptr [ebp+08]
fstp dword ptr [ecx+10]

exit:
jmp returnhere

"Shank2.exe"+D5970:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Shank2.exe"+D5970:
fsub dword ptr [ebp+08]
fstp dword ptr [ecx+10]
//Alt: db D8 65 08 D9 59 10
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"God"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) 
alloc(val,24)
alloc(count,128)
label(www)
label(new)
label(returnhere)
label(originalcode)
label(exit)
count:
dd (int)2
newmem:

originalcode:
fld dword ptr [esi+000000A0]
cmp [count],2
jne www
mov [val],esi
sub [count],1
jmp exit
www:
cmp [count],1
jne exit
mov [val+4],esi
sub [count],1
exit:
cmp [val],esi
je returnhere
cmp [val+4],esi
je returnhere
cmp [esi+a0],(float)126
ja new
cmp [val+8],esi
je returnhere
mov [count],2
jmp returnhere
new:
mov [val+8],esi
jmp returnhere
"Shank2.exe"+F0249:
jmp newmem
nop
returnhere:


alloc(newmem1,2048) //2kb should be enough
alloc(value,128)
label(returnhere1)
label(god)
label(godad)
label(originalcode1)
label(exit1)
value:
dd (float)0.0
newmem1:
originalcode1:
fld dword ptr [esp+1C]
cmp ebp,[val]
je godad
cmp ebp,[val+4]
jne god
godad:
fmul dword ptr [value]
god:
mov ecx,[ebp+08]

exit1:
jmp returnhere1

"Shank2.exe"+EDCE4:
jmp newmem1
nop
nop
returnhere1:


[DISABLE]
dealloc(newmem)
"Shank2.exe"+F0249:
fld dword ptr [esi+000000A0]
//Alt: db D9 86 A0 00 00 00


dealloc(newmem1)
"Shank2.exe"+EDCE4:
fld dword ptr [esp+1C]
mov ecx,[ebp+08]
//Alt: db D9 44 24 1C 8B 4D 08
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"score"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov eax,[edx+14]
imul eax,eax,0a
mov [edx+14],eax
originalcode:
add ecx,[edx+14]
mov eax,[ebp-30]

exit:
jmp returnhere

"Shank2.exe"+36759E:
jmp newmem
nop
returnhere:

alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
imul edi,edi,0a
originalcode1:
mov ecx,[esi+08]
add [esi+50],edi

exit1:
jmp returnhere1

"Shank2.exe"+D645E:
jmp newmem1
nop
returnhere1:




[DISABLE]
dealloc(newmem1)
"Shank2.exe"+D645E:
mov ecx,[esi+08]
add [esi+50],edi
//Alt: db 8B 4E 08 01 7E 50
dealloc(newmem)
"Shank2.exe"+36759E:
add ecx,[edx+14]
mov eax,[ebp-30]
//Alt: db 03 4A 14 8B 45 D0
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :add [esi+50],edi</Description>
      <Address>004D6461</Address>
      <ModuleName>Shank2.exe</ModuleName>
      <ModuleNameOffset>D6461</ModuleNameOffset>
      <Before>
        <Byte>74</Byte>
        <Byte>54</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>01</Byte>
        <Byte>7E</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>57</Byte>
        <Byte>E8</Byte>
        <Byte>26</Byte>
        <Byte>FF</Byte>
        <Byte>F2</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
