<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>79</ID>
      <Description>"[X] &lt;== Etherlords II v1.03 STEAM Script 1.0"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Etherlords 2
 Game Version  : 1.03
 Game Sponsor  : Myself
 Proces Name   : Etherlords2.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 02-Mar-2014
 Author        : Recifense
 History:
 02-Mar-14: First Release
 Features:
 - God Mode (Hero)
 - Minimum Ether Values:
   - Pool
   - Channels
 - Animal can Act
 - Animal defense
 - Minimum Resources
===========================================
}

//=========================================
// Definitions
define(LUDO,"Etherlords2.exe")
define(FHPR,Etherlords2.exe+000969fd)
define(GMD0,Etherlords2.exe+00333a43)
define(GMD1,Etherlords2.exe+00333a19)
define(MGED,Etherlords2.exe+000e79cc)
define(MPAL,Etherlords2.exe+00096cd8)
define(MPA1,Etherlords2.exe+00096d44)
define(MPA2,Etherlords2.exe+0031f3fd)
define(MHPR,Etherlords2.exe+0039ef9d)

//=========================================
// Constants used in the script (that can be changed)
define(ctMIER,#20)      // Minimum Ether
define(ctALDE,#10)      // Minimum Defense
define(ctMIRE,#630)     // Minimum Resources

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(FHPR,8b 4d 10 8b 01 3b c1 0f 84 ?? ?? ?? ?? 8b 54 24 20 8b 70 08 39)
assert(GMD0,8b 51 08 89 50 0c 8b 41 10 8b 4c 24 04 89 41 1c c2 04 00 ?? ??)
assert(GMD1,8b 51 0c 89 50 0c 8b 44 24 04 8b 50 1c 89 51 10 8b 51 0c 85 d2)
assert(MGED,89 9e 34 07 00 00 89 9e 54 07 00 00 e8 ?? ?? ?? ?? 8b 86 c8 07)
assert(MPAL,8b 14 88 8a 42 64 5e c2 04 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??)
assert(MPA1,8a 59 64 84 db ?? ?? 8b 49 3c 83 39 00 ?? ?? 8b 00 3b c2 ?? ??)
assert(MPA2,89 84 24 84 00 00 00 8b 40 20 50 b9 ?? ?? ?? ?? e8 ?? ?? ?? ??)
assert(MHPR,8b 70 48 33 d2 8a 90 10 02 00 00 57 bf 01 00 00 00 57 52 8b 51)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_FindHumanPlayer)
label(_FindHPZ)
label(_FindHP0)
label(_FindHP1)
label(_BackFHP)
label(_ExitFHP)
label(_GodMode0)
label(_BackGM0)
label(_ExitGM0)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonGameEnd)
label(_BackMGE)
label(_ExitMGE)
label(_MonPlayerAnimal)
label(_MonPA00)
label(_BackMPA)
label(_ExitMPA)
label(_MonPlayerAnimal1)
label(_MonPA10)
label(_BackPA1)
label(_ExitPA1)
label(_MonPlayerAnimal2)
label(_MonPA20)
label(_BackPA2)
label(_ExitPA2)
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(iEnableGMD)
label(iEnableMPE)
label(iEnableMPA)
label(iEnableMAD)
label(iEnableMPR)
label(iID)
label(iCount)
label(pHero)
label(pPlayer)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMPE)
registersymbol(iEnableMPA)
registersymbol(iEnableMAD)
registersymbol(iEnableMPR)
registersymbol(iID)
registersymbol(iCount)
registersymbol(pHero)
registersymbol(pPlayer)

//=========================================
MyCode:
//=========================================
// During Combat (on sel. Hero)
_FindHumanPlayer:
 cmp ebp,[pHero]
 je _FindHPZ

 inc dword ptr [iCount]

 mov [pHero],ebp

 mov ecx,[ebp+04]

 mov [iID],ecx

_FindHPZ:
 cmp dword ptr [iEnableGMD],0
 je _FindHP0                       // Jump if feature is disabled

 mov ecx,[ebp+08]
 mov [ebp+0c],ecx

_FindHP0:
 cmp dword ptr [iEnableMPE],0
 je _ExitFHP                       // Jump if feature is disabled

 mov ecx,ctMIER
 cmp ecx,[ebp+24]
 js _FindHP1

 mov [ebp+24],ecx

_FindHP1:
 cmp ecx,[ebp+20]
 js _ExitFHP

 mov [ebp+20],ecx

_ExitFHP:
 mov ecx,[ebp+10]                  // Original code
 mov eax,[ecx]                     // Original code
 jmp _BackFHP                      // Back to main code

//=========================================
// During Combat (hero)
_GodMode0:
 mov edx,[eax+04]
 cmp edx,[iID]
 jne _ExitGM0

 cmp dword ptr [iEnableGMD],0
 je _ExitGM0                       // Jump if feature is disabled

 mov edx,[eax+08]
 cmp edx,[ecx+08]
 js _ExitGM0

 mov [ecx+08],edx

_ExitGM0:
 mov edx,[ecx+08]                  // Original code (rd HP)
 mov [eax+0C],edx                  // Original code (wr HP)
 jmp _BackGM0                      // Back to main code

//=========================================
// During Combat (hero)
_GodMode1:
 mov edx,[eax+04]
 cmp edx,[iID]
 jne _ExitGM1

 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 mov edx,[eax+08]
 cmp edx,[ecx+0c]
 js _ExitGM1

 mov [ecx+0c],edx

_ExitGM1:
 mov edx,[ecx+0C]                  // Original code (rd HP)
 mov [eax+0C],edx                  // Original code (wr HP)
 jmp _BackGM1                      // Back to main code

//=========================================
// When Battle ends
_MonGameEnd:
 mov dword ptr [iID],#99
 mov [pHero],ebx

_ExitMGE:
 mov [esi+00000734],ebx            // Original code
 jmp _BackMGE                      // Back to main code

//=========================================
// When attacking
_MonPlayerAnimal:
 push eax
 push ebx
 push ecx

 mov edx,[eax+ecx*4]               // Original code
 mov ecx,edx

 mov eax,[ecx+1c]
 cmp eax,[pHero]
 jne _ExitMPA

 cmp dword ptr [iEnableMPA],0
 je _MonPA00                       // Jump if feature is disabled

 mov eax,1
 mov [ecx+64],al

 xor eax,eax
 mov [ecx+2d],al
 mov [ecx+2c],al

_MonPA00:
 cmp dword ptr [iEnableMAD],0
 je _ExitMPA                       // Jump if feature is disabled

 mov ebx,[ecx+3c]
 test ebx,ebx
 jz _ExitMPA

 mov eax,ctALDE
 cmp eax,[ebx+04]
 js _ExitMPA

 mov [ebx+04],eax

 mov ebx,[ecx+48]
 test ebx,ebx
 jz _ExitMPA

 mov [ebx+04],eax

_ExitMPA:
 pop ecx
 pop ebx
 pop eax

 mov al,[edx+64]                   // Original code
 jmp _BackMPA                      // Back to main code

//=========================================
// When selecting units
_MonPlayerAnimal1:
 push eax
 push ebx

 mov eax,[ecx+1c]
 cmp eax,[pHero]
 jne _ExitPA1

 cmp dword ptr [iEnableMPA],0
 je _MonPA10                       // Jump if feature is disabled

 mov eax,1
 mov [ecx+64],al

 xor eax,eax
 mov [ecx+2d],al
 mov [ecx+2c],al

_MonPA10:
 cmp dword ptr [iEnableMAD],0
 je _ExitPA1                       // Jump if feature is disabled

 mov ebx,[ecx+3c]
 test ebx,ebx
 jz _ExitPA1

 mov eax,ctALDE
 cmp eax,[ebx+04]
 js _ExitPA1

 mov [ebx+04],eax

 mov ebx,[ecx+48]
 test ebx,ebx
 jz _ExitPA1

 mov [ebx+04],eax

_ExitPA1:
 pop ebx
 pop eax

 mov bl,[ecx+64]                   // Original code (chk bCanAct)
 test bl,bl                        // Original code
 jmp _BackPA1                      // Back to main code

//=========================================
// When attack button is pressed
_MonPlayerAnimal2:
 push eax
 push ebx
 push ecx

 mov ecx,eax

 mov eax,[ecx+1c]
 cmp eax,[pHero]
 jne _ExitPA2

 cmp dword ptr [iEnableMPA],0
 je _MonPA20                       // Jump if feature is disabled

 mov eax,1
 mov [ecx+64],al

 xor eax,eax
 mov [ecx+2d],al
 mov [ecx+2c],al

_MonPA20:
 cmp dword ptr [iEnableMAD],0
 je _ExitPA2                       // Jump if feature is disabled

 mov ebx,[ecx+3c]
 test ebx,ebx
 jz _ExitPA2

 mov eax,ctALDE
 cmp eax,[ebx+04]
 js _ExitPA2

 mov [ebx+04],eax

 mov ebx,[ecx+48]
 test ebx,ebx
 jz _ExitPA2

 mov [ebx+04],eax

_ExitPA2:
 pop ecx
 pop ebx
 pop eax

 mov [esp+00000084],eax            // Original code (pUnit)
 jmp _BackPA2                      // Back to main code

//=========================================
// ADV: main screen
_MonHumanPlayer:
 push ebx

 mov [pPlayer],eax

 cmp dword ptr [iEnableMPR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov esi,[eax+48]
 test esi,esi
 jz _ExitMHP

 mov esi,[esi+34]
 test esi,esi
 jz _ExitMHP

 mov edx,ctMIRE

 mov ebx,[esi]
 cmp ebx,edx
 cmovs ebx,edx
 mov [esi],ebx

 mov ebx,[esi+04]
 cmp ebx,edx
 cmovs ebx,edx
 mov [esi+04],ebx

 mov ebx,[esi+08]
 cmp ebx,edx
 cmovs ebx,edx
 mov [esi+08],ebx

_ExitMHP:
 pop ebx

 mov esi,[eax+48]                  // Original code
 xor edx,edx                       // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
 db '=========================================&gt;'
 db 'CE6.3 Script by Recifense 030214'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMPE:
 dd 0
iEnableMPA:
 dd 0
iEnableMAD:
 dd 0
iEnableMPR:
 dd 0
iID:
 dd #99
pHero:
 dd 0
pPlayer:
 dd 0
iCount:
 dd 0

//=========================================
// Hacking Points
FHPR:
 jmp _FindHumanPlayer
_BackFHP:

GMD0:
 jmp _GodMode0
 nop
_BackGM0:

GMD1:
 jmp _GodMode1
 nop
_BackGM1:

MGED:
 jmp _MonGameEnd
 nop
_BackMGE:

MPAL:
 jmp _MonPlayerAnimal
 nop
_BackMPA:

MPA1:
 jmp _MonPlayerAnimal1
_BackPA1:

MPA2:
 jmp _MonPlayerAnimal2
 nop
 nop
_BackPA2:

MHPR:
 jmp _MonHumanPlayer
_BackMHP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
FHPR:
// mov ecx,[ebp+10]
// mov eax,[ecx]
 db 8b 4d 10 8b 01

GMD0:
// mov edx,[ecx+08]
// mov [eax+0C],edx
 db 8b 51 08 89 50 0c

GMD1:
// mov edx,[ecx+0C]
// mov [eax+0C],edx
 db 8b 51 0C 89 50 0c

MGED:
// mov [esi+00000734],ebx
 db 89 9e 34 07 00 00

MPAL:
// mov edx,[eax+ecx*4]
// mov al,[edx+64]
 db 8b 14 88 8a 42 64

MPA1:
// mov bl,[ecx+64]
// test bl,bl
 db 8a 59 64 84 db

MPA2:
// mov [esp+00000084],eax
 db 89 84 24 84 00 00 00

MHPR:
// mov esi,[eax+48]
// xor edx,edx
 db 8b 70 48 33 d2

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMPE)
unregistersymbol(iEnableMPA)
unregistersymbol(iEnableMAD)
unregistersymbol(iEnableMPR)
unregistersymbol(iID)
unregistersymbol(iCount)
unregistersymbol(pHero)
unregistersymbol(pPlayer)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Enable/Disable Minimum Ether Values =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPE</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"Enable/Disable Unit always Ready =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPA</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Enable/Disable Unit Minimum Defense =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"Enable/Disable Minimum Resources =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Game Title    : Etherlords 2 (steam)
 Game Version  : 1.03
 Game Sponsor  : Myself
 Proces Name   : Etherlords2.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 02-Mar-2014
 Author        : Recifense
 History:
 02-Mar-14: First Release
 Features:
 - God Mode (Hero)        [1]
 - Minimum Ether Values:  [2]
   - Pool
   - Channels
 - Animal can Act         [3]
 - Animal defense         [4]
 - Minimum Resources      [5]
===========================================
[1] Player's hero will not die;
[2] After using ether or turn, the player's ether values will go to a minimum value (20);
[3] Player's units will be able to act right after being created;
[4] During attack, the player's units will have a minimum defense value (10);
[5] Minimum Resources during campaign (630).
===========================================
[USAGE]
1) Run CE63;
2) Run Game;
3) Load the game process in CE;
4) Change the value to 1 of each cheat you want to use;
5) Game On;
===========================================
[HOTKEYS]
CTRL+Home  = Enable  GM/MEV/MR cheats;
CTRL+End   = Disable GM/MEV/MR cheats;
-----------
CTRL+PageUp   = Enable  UAR cheat;
CTRL+PageDown = Disable UAR cheat;
-----------
CTRL+Insert = Enable  UMD cheat;
CTRL+Delete = Disable UMD cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
