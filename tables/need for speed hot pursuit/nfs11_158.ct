<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <Description>"Nitro for player only"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Made by Geri with Cheat Engine 5.6.1
//18th November, 2010
//All rights reserved. You are not allowed to use these scripts to create Your own trainer without my permission.
//Contact e-mail: trainers4free@gmail.com
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(nitrolabel)
registersymbol(nitrolabel)
aobscan(aobnitro,f3 0f 58 41 0c)

aobnitro:
nitrolabel:
jmp newmem
returnhere:

newmem: //this is allocated memory, you have read,write,execute access
mov [ecx+0c],42C80000


originalcode:
addss xmm0,[ecx+0c]

exit:
jmp returnhere



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nitrolabel:
addss xmm0,[ecx+0c]
//Alt: db F3 0F 58 41 0C
unregistersymbol(nitrolabel)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Lightweight car"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Made by Geri with Cheat Engine 6.0
//2st February, 2011
//All rights reserved. You are not allowed to use these scripts to create Your own trainer without my permission.
//Contact e-mail: trainers4free@gmail.com
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(weightlabel)
registersymbol(weightlabel)
aobscan(aobweight,0f 28 42 40 8d 44 24 40)

newmem: //this is allocated memory, you have read,write,execute access
mov [edx+1C],3c23d70a

originalcode:
movaps xmm0,[edx+40]
lea eax,[esp+40]

exit:
jmp returnhere

aobweight:
weightlabel:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
weightlabel:
movaps xmm0,[edx+40]
lea eax,[esp+40]
//Alt: db 0F 28 42 40 8D 44 24 40
unregistersymbol(weightlabel)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Unlimited Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Made by Geri with Cheat Engine 6.0
//2st February, 2011
//All rights reserved. You are not allowed to use these scripts to create Your own trainer without my permission.
//Contact e-mail: trainers4free@gmail.com
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(healthlabel)
registersymbol(healthlabel)
aobscan(aobhealth,8b 8e 50 1c 00 00 8b)

newmem: //this is allocated memory, you have read,write,execute access
mov [esi+1AB0],0

originalcode:
mov ecx,[esi+00001C50]

exit:
jmp returnhere

aobhealth:
healthlabel:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthlabel:
mov ecx,[esi+00001C50]
//Alt: db 8B 8E 50 1C 00 00
unregistersymbol(healthlabel)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Boost RPM above top speed"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Made by Geri with Cheat Engine 6.0
//31th March, 2011
//All rights reserved. You are not allowed to use these scripts to create Your own trainer without my permission.
//Contact e-mail: trainers4free@gmail.com
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem24,2048) //2kb should be enough
label(returnhere24)
label(originalcode24)
label(exit24)
label(label1)
registersymbol(label1)
aobscan(aob1,0f 29 10 8b 4f 20)

newmem24: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode24
popfd
mov [eax],(float)20000
mov ecx,[edi+20]
jmp exit24


originalcode24:
popfd
movaps [eax],xmm2
mov ecx,[edi+20]

exit24:
jmp returnhere24

aob1:
label1:
jmp newmem24
nop
returnhere24:

alloc(newmem17,2048) //2kb should be enough
label(returnhere17)
label(originalcode17)
label(exit17)
label(label2)
registersymbol(label2)
aobscan(aob2,0f 29 10 0f 28 82 40 03 00 00)

newmem17: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode17
popfd
mov [eax],(float)20000
movaps xmm0,[edx+00000340]
jmp exit17

originalcode17:
popfd
movaps [eax],xmm2
movaps xmm0,[edx+00000340]

exit17:
jmp returnhere17

aob2:
label2:
jmp newmem17
nop
nop
nop
nop
nop
returnhere17:

alloc(newmem11,2048) //2kb should be enough
label(returnhere11)
label(originalcode11)
label(exit11)
label(label3)
registersymbol(label3)
aobscan(aob3,0f 29 06 5e 8b e5 5d c2 20 00)

newmem11: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode11
popfd
mov [esi],(float)20000
pop esi
mov esp,ebp
jmp exit11

originalcode11:
popfd
movaps [esi],xmm0
pop esi
mov esp,ebp

exit11:
jmp returnhere11

aob3:
label3:
jmp newmem11
nop
returnhere11:

alloc(newmem6,2048) //2kb should be enough
label(returnhere6)
label(originalcode6)
label(exit6)
label(label4)
registersymbol(label4)
aobscan(aob4,0f 29 06 0f 28 88 40 03 00 00)

newmem6: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode6
popfd
mov [esi],(float)20000
movaps xmm1,[eax+00000340]
jmp exit6


originalcode6:
popfd
movaps [esi],xmm0
movaps xmm1,[eax+00000340]

exit6:
jmp returnhere6

aob4:
label4:
jmp newmem6
nop
nop
nop
nop
nop
returnhere6:

alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)
label(label5)
registersymbol(label5)
aobscan(aob5,0f 29 0e 0f 28 80 40 03 00 00)

newmem2: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode2
popfd
mov [esi],(float)20000
movaps xmm0,[eax+00000340]
jmp exit2

originalcode2:
popfd
movaps [esi],xmm1
movaps xmm0,[eax+00000340]

exit2:
jmp returnhere2

aob5:
label5:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(rpminc,4)
label(label6)
registersymbol(label6)
aobscan(aob6,0f 28 86 00 19 00 00 51)

rpminc:
dd (float)1000

newmem: //this is allocated memory, you have read,write,execute access
pushfd
pushad
push A2
call GetAsyncKeyState
shr ax,0F
cmp ax,1
popad
jne originalcode
fld dword ptr [esi+00001900]
fadd dword ptr [rpminc]
fstp dword ptr [esi+00001900]

originalcode:
popfd
movaps xmm0,[esi+00001900]

exit:
jmp returnhere

aob6:
label6:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem24)
label1:
db 0F 29 10 8B 4F 20
dealloc(newmem17)
label2:
db 0F 29 10 0F 28 82 40 03 00 00
dealloc(newmem11)
label3:
db 0F 29 06 5E 8B E5
dealloc(newmem6)
label4:
db 0F 29 06 0F 28 88 40 03 00 00
dealloc(newmem2)
label5:
db 0F 29 0E 0F 28 80 40 03 00 00
dealloc(newmem)
label6:
db 0F 28 86 00 19 00 00
dealloc(rpminc)
unregistersymbol(label1)
unregistersymbol(label2)
unregistersymbol(label3)
unregistersymbol(label4)
unregistersymbol(label5)
unregistersymbol(label6)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
