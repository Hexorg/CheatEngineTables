<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>17</ID>
      <Description>"[X] &lt;== CnC4 - TT v1.5.749.20816 Steam Script v3.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Command &amp; Conquer 4 - Tiberian Twilight
 Game Version  : 1.5.3749.20816
 Game Sponsor  : Myself
 Process Name  : CNC4.game
 Relevant Info : 32bits/RTS
 Script Version: 3.1
 CE Version    : 6.4
 Release date  : 04-Aug-2015
 Author        : Recifense
 History:
 03-Apr-10: First Release (CE54)
 01-Aug-15: Release for version 1.5.3749.20816 (Steam)(CE64)
 04-Aug-15: Fixed Construction Issue (s31)
 Features:
 - No Spent Command Points
 - Unlimited Ammo
 - God Mode
 - Full Energy
 - Power Points
 - Upgrade Points
 - Full Shield
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"CNC4.game")
define(MOCP,CNC4.game+00562212)
define(MOPA,CNC4.game+00386002)
define(ML3C,CNC4.game+003dce10)
define(GDMD,CNC4.game+003aaf8e)
define(MOPE,CNC4.game+0055bb4a)
define(MOPP,CNC4.game+0055e386)
define(MOUP,CNC4.game+0055f14c)
define(MOPS,CNC4.game+003d64f9)
define(MOPX,CNC4.game+005847d0)

define(BGMD,CNC4.game+0042a10e)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOCP,8b 51 14 2b 51 08 5e 03 d0 33 c0 3b d7 0f 9f c0 5f c3 cc cc cc)
assert(MOPA,83 c0 ff 39 41 1c ?? ?? 6a 00 8d 44 24 14 50 e8 ?? ?? ?? ?? 50)
assert(ML3C,83 ec 08 56 8b f1 f6 86 55 05 00 00 01 57 8b 7c 24 14 ?? ?? 8b)
assert(GDMD,f3 0f 11 46 04 ?? ?? 0f 57 c0 0f 2f c1 ?? ?? d9 44 24 0c 8b 10)
assert(MOPE,f3 0f 2c 40 38 c3 33 c0 c3 cc cc cc cc cc ?? ?? ?? ?? ?? ?? ??)
assert(MOPP,8b 51 04 8b 41 08 3b d0 ?? ?? 85 f6 ?? ?? 2b c2 89 06 32 c0 5e)
assert(MOUP,8b 89 f0 00 00 00 8b 04 81 c2 04 00 cc cc cc cc ?? ?? ?? ?? ??)
assert(MOPS,f3 0f 11 6e 70 f3 0f 10 90 e4 00 00 00 0f 2f da ?? ?? 0f 28 c3)
assert(MOPX,8b 8e fc 01 00 00 e8 ?? ?? ?? ?? 8b ce e8 ?? ?? ?? ?? 8b ce e8)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonCommandPoint)
label(_BackMCP)
label(_ExitMCP)
label(_MonPlayerAmmo)
label(_BackMPA)
label(_ExitMPA)
label(_MonL3Caller)
label(_BackMLC)
label(_ExitMLC)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonPlayerEnergy)
label(_BackMPE)
label(_ExitMPE)
label(_MonPowerPoint)
label(_BackMPP)
label(_ExitMPP)
label(_MonUpgradePoint)
label(_BackMUP)
label(_ExitMUP)
label(_MonPlayerShield)
label(_BackMPS)
label(_ExitMPS)
label(_MonPlayerXP)
label(_BackMPX)
label(_ExitMPX)

label(iEnableMCP)
label(iEnableMPA)
label(iEnableGMD)
label(iEnableMPE)
label(iEnableMPP)
label(iEnableMUP)
label(iEnableMPS)

label(iID)
label(pL3Back)
label(pCP)
label(pPlayer)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMCP)
registersymbol(iEnableMPA)
registersymbol(iEnableGMD)
registersymbol(iEnableMPE)
registersymbol(iEnableMPP)
registersymbol(iEnableMUP)
registersymbol(iEnableMPS)

registersymbol(iID)
registersymbol(pCP)
registersymbol(pPlayer)

//=========================================
MyCode:
//=========================================
// Spent CP does not increase (always 0)
_MonCommandPoint:
 mov [pCP],ecx                     // Save pointer for debugging
 mov edx,[ecx+18]                  // Get player ID
 mov [iID],edx                     // Save it for further use

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov dword ptr [ecx+08],0          // Make spent_CP = 0

_ExitMCP:
 mov edx,[ecx+14]                  // Original code
 sub edx,[ecx+08]                  // Original code
 jmp _BackMCP                      // Back to main code

//=========================================
// When using ammo
_MonPlayerAmmo:
 push ebx

 cmp dword ptr [iEnableMPA],0
 je _ExitMPA                       // Jump if feature is disabled

 mov ebx,[ecx+08]                  // Get ptr to weapon
 mov ebx,[ebx+10]                  // Get ptr to Unit
 mov ebx,[ebx+000004f8]            // Get ptr to Player
 mov ebx,[ebx+20]                  // Get ID

 cmp ebx,[iID]
 jne _ExitMPA

 mov [ecx+1c],eax                  // Ammo = Maximum

_ExitMPA:
 pop ebx

 db 83 c0 ff                       // Original code (add eax,-01)
 cmp [ecx+1c],eax                  // Original code
 jmp _BackMPA                      // Back to main code

//=========================================
// This is the key for God Mode (important)
_MonL3Caller:
 mov eax,[esp]                      // Get returning address
 mov [pL3Back],eax                  // Save it for further use

_ExitMLC:
 sub esp,08                         // Original code
 push esi                           // Original code
 mov esi,ecx                        // Original code
 jmp _BackMLC                       // Back to main code

//========================================= s3.1
// During Combat
_GodMode:
 pushfd
 push ebx

 mov ebx,[pL3Back]                  // Get L3Caller returning address
 cmp ebx,BGMD                       // Has the unit been shot?
 jne _ExitGMD                       // Jump if false

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                        // Jump if feature is disabled

 mov ebx,[esi-08]                   // Get ptr to Unit
 test ebx,ebx
 jz _ExitGMD

 mov ebx,[ebx+000004f8]             // Get ptr to Player
 mov ebx,[ebx+20]                   // Get ID

 cmp ebx,[iID]                      // Is it a playerÂ´s Unit?
 jne _ExitGMD                       // Jump if false

 movss xmm0,[esi+0c]                // Get maximum HP

_ExitGMD:
 pop ebx
 popfd

 movss [esi+04],xmm0                // Original code
 jmp _BackGMD                       // Back to main code

//=========================================
// Player Energy will increase fast
_MonPlayerEnergy:
 pushfd
 push ebx

 cmp dword ptr [iEnableMPE],0
 je _ExitMPE                        // Jump if feature is disabled

 mov ebx,[eax+44]                   // Get ptr to Player
 mov ebx,[ebx+20]                   // Get ID
 cmp ebx,[iID]                      // Is it playerÂ´s Energy?
 jne _ExitMPE                       // Jump if false

 mov [eax+3c],(float)50.0           // Make increment_amount = 50.0

_ExitMPE:
 pop ebx
 popfd

 cvttss2si eax,[eax+38]             // Original code
 jmp _BackMPE                       // Back to main code

//=========================================
// Spent PP does not increase (always 0)
_MonPowerPoint:
 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                        // Jump if feature is disabled

 mov edx,[ecx+1c]                   // Get ptr to Player
 mov edx,[edx+20]                   // Get ID
 cmp edx,[iID]                      // Is it playerÂ´s Energy?
 jne _ExitMPP                       // Jump if false

 mov dword ptr [ecx+08],0           // Make spent_powerpoint = 0

_ExitMPP:
 mov edx,[ecx+04]                   // Original code
 mov eax,[ecx+08]                   // Original code
 jmp _BackMPP                       // Back to main code

//=========================================
// Minimum UP = 10
_MonUpgradePoint:
 push ebx

 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                        // Jump if feature is disabled

 mov ebx,[ecx+20]                   // Get ID
 cmp ebx,[iID]                      // Is it playerÂ´s structure?
 jne _ExitMUP                       // Jump if false

 mov ebx,[ecx+000000f0]             // Get L1 pointer
 mov ebx,[ebx+04]                   // Get pointer to UpgradePointsStructure

 cmp dword ptr [ebx+04],#10
 jge _ExitMUP                       // Jump if current points &gt;= 10

 mov dword ptr [ebx+04],#10         // Make current UpgradePoints = 10

_ExitMUP:
 pop ebx

 mov ecx,[ecx+000000f0]             // Original code
 jmp _BackMUP                       // Back to main code

//=========================================
// Shield will not decrease
_MonPlayerShield:
 push edx

 movss [esi+70],xmm5                // Original code

 cmp dword ptr [iEnableMPS],0
 je _ExitMPS                        // Jump if feature is disabled

 mov edx,[esi+08]                   // Get ptr to Unit
 mov edx,[edx+000004f8]             // Get ptr to Player
 mov edx,[edx+20]                   // Get ID
 cmp edx,[iID]                      // Is it a playerÂ´s Unit?
 jne _ExitMPS                       // Jump if false

 mov dword ptr [esi+70],0           // Make decreased_shield = 0

_ExitMPS:
 pop edx
 jmp _BackMPS                       // Back to main code

//=========================================
// Find out the player
_MonPlayerXP:
 mov ecx,[esi+20]                   // Get Owner ID
 cmp ecx,[iID]                      // Is ot the player?
 jne _ExitMPX

 mov [pPlayer],esi                  // Save ptr for debugging

_ExitMPX:
 mov ecx,[esi+000001fc]             // Original code
 jmp _BackMPX                       // Back to main code

//=========================================
 db '===================================&gt;'
 db 'CE6.4 Script by Recifense 080415'
//=========================================
// Variables
iEnableMCP:
 dd 0
iEnableMPA:
 dd 0
iEnableGMD:
 dd 0
iEnableMPE:
 dd 0
iEnableMPP:
 dd 0
iEnableMUP:
 dd 0
iEnableMPS:
 dd 0
iID:
 dd #99
pL3Back:
 dd 0
pCP:
 dd 0
pPlayer:
 dd 0

//=========================================
// Hacking Points
MOCP:
 jmp _MonCommandPoint
 nop
_BackMCP:

MOPA:
 jmp _MonPlayerAmmo
 nop
_BackMPA:

ML3C:
 jmp _MonL3Caller
 nop
_BackMLC:

GDMD:
 jmp _GodMode
_BackGMD:

MOPE:
 jmp _MonPlayerEnergy
_BackMPE:

MOPP:
 jmp _MonPowerPoint
 nop
_BackMPP:

MOUP:
 jmp _MonUpgradePoint
 nop
_BackMUP:

MOPS:
 jmp _MonPlayerShield
_BackMPS:

MOPX:
 jmp _MonPlayerXP
 nop
_BackMPX:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOCP:
// mov edx,[ecx+14]
// sub edx,[ecx+08]
 db 8b 51 14 2b 51 08

MOPA:
// add eax,-01
// cmp [ecx+1c],eax
 db 83 c0 ff 39 41 1c

ML3C:
// sub esp,08
// push esi
// mov esi,ecx
 db 83 ec 08 56 8b f1

GDMD:
// movss [esi+04],xmm0
 db f3 0f 11 46 04

MOPE:
// cvttss2si eax,[eax+38]
 db f3 0f 2c 40 38

MOPP:
// mov edx,[ecx+04]
// mov eax,[ecx+08]
 db 8b 51 04 8b 41 08

MOUP:
// mov ecx,[ecx+000000F0]
 db 8b 89 f0 00 00 00

MOPS:
// movss [esi+70],xmm5
 db f3 0f 11 6e 70

MOPX:
// mov ecx,[esi+000001FC]
 db 8b 8e fc 01 00 00

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
getAddressList().getMemoryRecordByID(97).Active=false
getAddressList().getMemoryRecordByID(97).Color=0x0c08000
getAddressList().getMemoryRecordByID(98).Active=false
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
getAddressList().getMemoryRecordByID(99).Active=false
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
getAddressList().getMemoryRecordByID(100).Active=false
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
getAddressList().getMemoryRecordByID(101).Active=false
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
getAddressList().getMemoryRecordByID(102).Active=false
getAddressList().getMemoryRecordByID(102).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMPA)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMPE)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMUP)
unregistersymbol(iEnableMPS)

unregistersymbol(iID)
unregistersymbol(pCP)
unregistersymbol(pPlayer)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Unlimited Command Points ------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"[X] &lt;== Unlimited Ammo  ---------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPA",1)
getAddressList().getMemoryRecordByID(97).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPA",0)
getAddressList().getMemoryRecordByID(97).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode ------------------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Unlimited Energy Points  ---------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPE",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPE",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Unlimited Power Points -----------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Unlimited Upgrade Points -------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
getAddressList().getMemoryRecordByID(101).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"[X] &lt;== Unlimited Shield ----------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPS",1)
getAddressList().getMemoryRecordByID(102).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPS",0)
getAddressList().getMemoryRecordByID(102).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>103</ID>
          <Description>"[X] &lt;=======================  Player XP in Current Scenario =================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>23</ID>
              <Description>"XP Progress in Current Scenario ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>4</Offset>
                <Offset>1FC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150801</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Command &amp; Conquer 4 - Tiberian Twilight
 Game Version  : 1.5.3749.20816
 Game Sponsor  : Myself
 Process Name  : CNC4.game
 Relevant Info : 32bits/RTS
 Script Version: 3.1
 CE Version    : 6.4
 Release date  : 04-Aug-2015
 Author        : Recifense
 History:
 03-Apr-10: First Release (CE54)
 01-Aug-15: Release for version 1.5.3749.20816 (Steam)(CE64)
 04-Aug-15: Fixed Construction Issue (s31)
 Features:
 - No Spent Command Points [1]
 - Unlimited Ammo          [2]
 - God Mode                [3]
 - Full Energy             [4]
 - Power Points            [5]
 - Upgrade Points          [6]
 - Full Shield             [7]
 - Some Pointers
===========================================
[1] For Human player only;
[2] For Human player's units only;
[3] For Human player's units only;
[4] For Human player only;
[5] For Human player only;
[6] For Human player only;
[7] For Human player's units only;
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "CNC4.game" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  all cheats;
CTRL+End       = Disable all cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
