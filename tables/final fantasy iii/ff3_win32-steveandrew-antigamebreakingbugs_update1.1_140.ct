<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1916</ID>
      <Description>"Walk On Water / Walk Over Anything (CTRL+1)"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Final Fantasy III [PC: Steam/NoSteam]
//Walk On Water / Walk Over Anything (AOBSCAN version)
//Steve Andrew
[enable]
aobscanmodule(WalkOnWater,FF3_Win32.exe,85 c0 74 x 8b 4c 24 x 99)
registersymbol(WalkOnWater)

WalkOnWater+2:
db eb //jmp *

[disable]

WalkOnWater+2:
db 74 //je *

unregistersymbol(WalkOnWater)

{
// ORIGINAL CODE - INJECTION POINT: "FF3_Win32.exe"+1EF9F

"FF3_Win32.exe"+1EF6D: 89 B4 24 80 00 00 00     -  mov [esp+00000080],esi
"FF3_Win32.exe"+1EF74: 89 BC 24 84 00 00 00     -  mov [esp+00000084],edi
"FF3_Win32.exe"+1EF7B: DF AC 24 80 00 00 00     -  fild qword ptr [esp+00000080]
"FF3_Win32.exe"+1EF82: DD 5C 24 78              -  fstp qword ptr [esp+78]
"FF3_Win32.exe"+1EF86: DD 44 24 78              -  fld qword ptr [esp+78]
"FF3_Win32.exe"+1EF8A: DD 5C 24 78              -  fstp qword ptr [esp+78]
"FF3_Win32.exe"+1EF8E: F2 0F 10 44 24 78        -  movsd xmm0,[esp+78]
"FF3_Win32.exe"+1EF94: E8 C5 52 24 00           -  call FF3_Win32.exe+26425E
"FF3_Win32.exe"+1EF99: F2 0F 2C C0              -  cvttsd2si eax,xmm0
"FF3_Win32.exe"+1EF9D: 85 C0                    -  test eax,eax
// ---------- INJECTING HERE ----------
"FF3_Win32.exe"+1EF9F: 74 5D                    -  je FF3_Win32.exe+1EFFE
"FF3_Win32.exe"+1EFA1: 8B 4C 24 10              -  mov ecx,[esp+10]
// ---------- DONE INJECTING  ----------
"FF3_Win32.exe"+1EFA5: 99                       -  cdq
"FF3_Win32.exe"+1EFA6: 8B F8                    -  mov edi,eax
"FF3_Win32.exe"+1EFA8: 8B 44 24 14              -  mov eax,[esp+14]
"FF3_Win32.exe"+1EFAC: 8B F2                    -  mov esi,edx
"FF3_Win32.exe"+1EFAE: 0F A4 C1 0C              -  shld ecx,eax,0C
"FF3_Win32.exe"+1EFB2: 56                       -  push esi
"FF3_Win32.exe"+1EFB3: 57                       -  push edi
"FF3_Win32.exe"+1EFB4: C1 E0 0C                 -  shl eax,0C
"FF3_Win32.exe"+1EFB7: 51                       -  push ecx
"FF3_Win32.exe"+1EFB8: 50                       -  push eax
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>49</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>1918</ID>
      <Description>"Board Ship From Any Distance Away Enabler"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Final Fantasy III [PC: Steam/NoSteam]
//Board Ship From Any Distance Away Enabler
//Steve Andrew
[enable]
//This code zeros your "ship pointer" (if I'm correct on what it is)
//It has to be canceled out for the board ship from any distance away cheat to work
aobscanmodule(DontNullifyShipPointer,FF3_Win32.exe,C7 80 C4 04 00 00 00 00 00 00 E9 D6) // should be unique
registersymbol(DontNullifyShipPointer)

DontNullifyShipPointer:
db 90 90 90 90 90 90 90 90 90 90

[disable]

DontNullifyShipPointer:
db C7 80 C4 04 00 00 00 00 00 00

unregistersymbol(DontNullifyShipPointer)

{
// ORIGINAL CODE - INJECTION POINT: "FF3_Win32.exe"+219085

"FF3_Win32.exe"+21905B: E9 0A 01 00 00                 -  jmp FF3_Win32.exe+21916A
"FF3_Win32.exe"+219060: 8B 44 24 3C                    -  mov eax,[esp+3C]
"FF3_Win32.exe"+219064: 8B 4C 24 14                    -  mov ecx,[esp+14]
"FF3_Win32.exe"+219068: 05 28 01 00 00                 -  add eax,00000128
"FF3_Win32.exe"+21906D: 50                             -  push eax
"FF3_Win32.exe"+21906E: E8 9D D0 F6 FF                 -  call FF3_Win32.exe+186110
"FF3_Win32.exe"+219073: BA 05 00 00 00                 -  mov edx,00000005
"FF3_Win32.exe"+219078: E9 ED 00 00 00                 -  jmp FF3_Win32.exe+21916A
"FF3_Win32.exe"+21907D: 8B 43 08                       -  mov eax,[ebx+08]
"FF3_Win32.exe"+219080: BA 43 00 00 00                 -  mov edx,00000043
// ---------- INJECTING HERE ----------
"FF3_Win32.exe"+219085: C7 80 C4 04 00 00 00 00 00 00  -  mov [eax+000004C4],00000000
// ---------- DONE INJECTING  ----------
"FF3_Win32.exe"+21908F: E9 D6 00 00 00                 -  jmp FF3_Win32.exe+21916A
"FF3_Win32.exe"+219094: B8 30 89 30 00                 -  mov eax,FF3_Win32.exe+258930
"FF3_Win32.exe"+219099: 35 33 4D 11 1B                 -  xor eax,1B114D33
"FF3_Win32.exe"+21909E: 89 44 24 1C                    -  mov [esp+1C],eax
"FF3_Win32.exe"+2190A2: 8B 44 24 1C                    -  mov eax,[esp+1C]
"FF3_Win32.exe"+2190A6: 89 44 24 1C                    -  mov [esp+1C],eax
"FF3_Win32.exe"+2190AA: BA 1B 00 00 00                 -  mov edx,0000001B
"FF3_Win32.exe"+2190AF: 3B F9                          -  cmp edi,ecx
"FF3_Win32.exe"+2190B1: B8 46 00 00 00                 -  mov eax,00000046
"FF3_Win32.exe"+2190B6: 0F 44 D0                       -  cmove edx,eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1919</ID>
          <Description>"Toggle This One On Then Move To Board Ship (CTRL+2)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Final Fantasy III [PC: Steam/NoSteam]
//Board Ship From Any Distance Away (Once Enabled Walk To Board)
//Steve Andrew
[enable]
//With this enabled any player movement acts as if you are boarding your ship
//Board Ship From Any Distance enabler must be enabled first
//And you also have to go near your ship at least once, for the
//"ship pointer" to be filled...
aobscanmodule(BoardShipFromAnyDistanceAway,FF3_Win32.exe,74 20 8b 4e 08)
registersymbol(BoardShipFromAnyDistanceAway)

BoardShipFromAnyDistanceAway:
db 90 90 //nop nop

[disable]

BoardShipFromAnyDistanceAway:
db 74 20 // je +20

unregistersymbol(BoardShipFromAnyDistanceAway)

{
// ORIGINAL CODE - INJECTION POINT: "FF3_Win32.exe"+21221C

"FF3_Win32.exe"+2121FB: 8B 81 C4 04 00 00              -  mov eax,[ecx+000004C4]
"FF3_Win32.exe"+212201: 85 C0                          -  test eax,eax
"FF3_Win32.exe"+212203: 74 39                          -  je FF3_Win32.exe+21223E
"FF3_Win32.exe"+212205: 8B 80 F0 05 00 00              -  mov eax,[eax+000005F0]
"FF3_Win32.exe"+21220B: 83 F8 03                       -  cmp eax,03
"FF3_Win32.exe"+21220E: 74 05                          -  je FF3_Win32.exe+212215
"FF3_Win32.exe"+212210: 83 F8 04                       -  cmp eax,04
"FF3_Win32.exe"+212213: 75 29                          -  jne FF3_Win32.exe+21223E
"FF3_Win32.exe"+212215: E8 16 CC FF FF                 -  call FF3_Win32.exe+20EE30
"FF3_Win32.exe"+21221A: 84 C0                          -  test al,al
// ---------- INJECTING HERE ----------
"FF3_Win32.exe"+21221C: 74 20                          -  je FF3_Win32.exe+21223E
"FF3_Win32.exe"+21221E: 8B 4E 08                       -  mov ecx,[esi+08]
// ---------- DONE INJECTING  ----------
"FF3_Win32.exe"+212221: C7 81 44 03 00 00 07 00 00 00  -  mov [ecx+00000344],00000007
"FF3_Win32.exe"+21222B: 8B 81 40 03 00 00              -  mov eax,[ecx+00000340]
"FF3_Win32.exe"+212231: 89 81 3C 03 00 00              -  mov [ecx+0000033C],eax
"FF3_Win32.exe"+212237: 5F                             -  pop edi
"FF3_Win32.exe"+212238: 5E                             -  pop esi
"FF3_Win32.exe"+212239: 5B                             -  pop ebx
"FF3_Win32.exe"+21223A: 8B E5                          -  mov esp,ebp
"FF3_Win32.exe"+21223C: 5D                             -  pop ebp
"FF3_Win32.exe"+21223D: C3                             -  ret 
"FF3_Win32.exe"+21223E: 8B 7E 08                       -  mov edi,[esi+08]
}
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>17</Key>
                <Key>50</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1922</ID>
      <Description>"Find Cheat Helper Scripts"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>8C3AFC</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1920</ID>
          <Description>"Debug To Find "Walk On Water" Address"</Description>
          <LastState Activated="0"/>
          <Color>FF9237</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$lua}
debugProcess(2) --Start Debugging With VEH Debugger
BreakpointAddress=getAddress("MSVCR110.libm_sse2_sqrt_precise")
FoundIt=0
debug_removeBreakpoint(BreakpointAddress)

function debugger_onBreakpoint()
    if(FoundIt == 0) then -- step one
        debug_continueFromBreakpoint(co_stepover)
        extra, opcode, bytes, addy = splitDisassembledString(disassemble(RIP))

        RetFound = string.find(opcode, "ret")
        if(RetFound) then
            FoundIt=1
            debug_removeBreakpoint(BreakpointAddress)
            return 0
        end
    elseif(FoundIt == 1) then --step two
        extra, opcode, bytes, addy = splitDisassembledString(disassemble(RIP))
        ConvertFound = string.find(opcode, "cvttsd2si")
        if(ConvertFound) then
            InstSize = getInstructionSize(RIP)
            print(getNameFromAddress(addy)..": "..opcode)
            extra, opcode, bytes, addy = splitDisassembledString(disassemble(RIP+InstSize))
            TestFound = string.find(opcode, "test")
            if(TestFound) then
                FoundIt=2
                InstSize = InstSize + getInstructionSize(RIP+InstSize)
                extra, opcode, bytes, addy = splitDisassembledString(disassemble(RIP+InstSize))
                print(getNameFromAddress(addy)..": "..opcode.." &lt;--This is it :D")
                debug_continueFromBreakpoint(co_run)

                script=table.concat{"[enable]\r\n",getNameFromAddress(addy),":\r\ndb eb\r\n[disable]\r\n",
                getNameFromAddress(addy),":\r\ndb 74"}

                AddAAScript(script,"Walk On Water Auto-Generated By Debugging")
            else
                debug_setBreakpoint(BreakpointAddress)
                debug_continueFromBreakpoint(co_run)
                FoundIt=0
            end
        else
            debug_setBreakpoint(BreakpointAddress)
            debug_continueFromBreakpoint(co_run)
            FoundIt=0
        end
        return 0
    else
        return 1
    end
end

function AddAAScript(script, sciptName)
   local addresslist = getAddressList()
   newTableEntry = addresslist_createMemoryRecord(addresslist)
   memoryrecord_setDescription(newTableEntry, sciptName)
   memoryrecord_setType(newTableEntry, vtAutoAssembler)
   memoryrecord_setScript(newTableEntry, script)
   return newTableEntry
end


debug_setBreakpoint(BreakpointAddress)

{$asm}

[disable]
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>1921</ID>
          <Description>"Multiple AOBScan To Find "Walk On Water" Address"</Description>
          <LastState Activated="0"/>
          <Color>FF9237</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
{$lua}

WalkOnWaterPossibleAddresses=AOBScan("f2 0f 2c c0 85 c0 74 x 8b 4c 24 x 99")
if (WalkOnWaterPossibleAddresses~=nil) then
   count=stringlist_getCount(WalkOnWaterPossibleAddresses)
   for i=0,count-1,1 do
       address=stringlist_getString(WalkOnWaterPossibleAddresses,i) --counts from 0, so 0 = first, 1=second, etc...

       extra, opcode, bytes, addy = splitDisassembledString(disassemble(getAddress(address)+6))
       if i==4 then
          mostlikelyaddress=getNameFromAddress(addy)
          print(mostlikelyaddress..": "..opcode.." &lt;--This is most likely it :D!!\r\nCreating Script!")

          script=table.concat{"[enable]\r\n",mostlikelyaddress,":\r\ndb eb\r\n[disable]\r\n",
          mostlikelyaddress,":\r\ndb 74"}

          AddAAScript(script,"Walk On Water Auto-Generated By Multi-AOBScan")
       else
           print(getNameFromAddress(addy)..": "..opcode.." &lt;--This might be it...")
       end
   end
end
object_destroy(WalkOnWaterPossibleAddresses)
WalkOnWaterPossibleAddresses=nil

function AddAAScript(script, sciptName)
   local addresslist = getAddressList()
   newTableEntry = addresslist_createMemoryRecord(addresslist)
   memoryrecord_setDescription(newTableEntry, sciptName)
   memoryrecord_setType(newTableEntry, vtAutoAssembler)
   memoryrecord_setScript(newTableEntry, script)
   return newTableEntry
end

{$asm}
[disable]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
