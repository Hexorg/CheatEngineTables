<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>91</ID>
      <Description>"[X] &lt;== Prepare Environment for Cheating Script 1.0 (ACTIVATE ME FIRST)"</Description>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Attila - Total War
 Game Version  : 1.5.0-8856
 Game Sponsor  : fennix102
 Process Name  : Atilla.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 10-Dec-2015
 Author        : Recifense
 History:
 26-Jun-15: Release for version 1.3.0-6708
 15-Sep-15: Release for version 1.4.0-7703
 01-Oct-15: Release for version 1.4.1-7952
 10-Dec-15: Release for version 1.5.0-8856
 Features:
 - Prepare environment for bypassing CRC-Check
===========================================
}

//=========================================
// Definitions
define(CODESIZE,0x01c95c00)
define(LUDO,Attila.dll)

//=========================================
define(ctCE64,(float)6.4)
//=========================================
[ENABLE]
//=========================================
alloc(CodeCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,LUDO)
//=========================================
label(iFlagOK)
label(pCodeCopy)
label(_ExitIM)
//=========================================
registersymbol(CodeCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pCodeCopy)
//=========================================
_IniMem:
 pushad
 pushfd

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 cld
 rep movsd

 push #500
 call kernel32.sleep

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 repe cmpsd

 test ecx,ecx
 jnz _ExitIM

 mov dword ptr [iFlagOK],55555555

_ExitIM:
 popfd
 popad
 ret
//=========================================
 db '=====================================&gt;'
 db 'CE6.4 Script by Recifense 121015'
//=========================================
// Variables
pCodeCopy:
 dd CodeCopy
iFlagOK:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(CodeCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pCodeCopy)
//=========================================
dealloc(CodeCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>136</ID>
      <Description>"[X] &lt;== Attila Total War v1.5.0-8856 Steam Script 3.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Attila - Total War
 Game Version  : 1.5.0-8856
 Game Sponsor  : fennix102
 Process Name  : Atilla.exe
 Script Version: 3.0
 CE Version    : 6.4
 Release date  : 10-Dec-2015
 Author        : Recifense
 History:
 21-Feb-15: First Release
 24-Feb-15: Fixed a bug related with attrition (v1.1)
 06-Mar-15: Release for version 1.1.0-4884 (v2.0)
 15-Mar-15: Fixed recruitment in 1 turn for ships (v2.1)
 25-Mar-15: Release for version 1.2.0-5282
 21-Apr-15: Release for version 1.2.1-5692
 02-May-15: Release for version 1.2.1-5816
 26-Jun-15: Release for version 1.3.0-6617
 04-Jul-15: Release for version 1.3.0-6708
 15-Sep-15: Release for version 1.4.0-7703
 27-Sep-15: Added a new feature (MFS)
 01-Oct-15: Release for version 1.4.1-7952
 10-Dec-15: Release for version 1.5.0-8856
 Features:
 - Minimum Money
 - Unlimited Action Points
   - Agent
   - Troop
   - Army/Fleet Commander
 - Recover Troop Size on Move
 - Blessed Units:
   - Cunning   (6)
   - Zeal      (6)
   - Authority (6)
 - Max. Age    (40)
 - Troop Recruitment in 1 Turn
 - Recover Available Mercenaries
 - Construction in 1 Turn
 - Research in 1 Turn
 - Unit Can Act again:
   - Agent
   - Army/Fleet Commander
 - Minimum Integrity:
   - Agent
   - Army/Fleet Commander
   - Encampment
 - Minimum Public Order (64)
 - No Loss by Attrition
 - Minimum Food Surplus (640) (new)
 - God Mode
    - Ground Battle
    - Sea Battle
  - Unlimited Ammo
  - No Stress in Battle
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,Attila.dll)
define(LUDOEND,Attila.dll+016b0000)
// TBS
define(MHPR,Attila.dll+01173dd6) //=========
define(MCDE,Attila.dll+0006b703) //=========
define(MSCR,Attila.dll+008b6034) //=========
define(MART,Attila.dll+0157fd43) //=========
define(MMCA,Attila.dll+0117b11c) //=========
define(MCPS,Attila.dll+0075c730) //#=###=#==
define(MRPS,Attila.dll+000cfb9b) //=========
define(MPPO,Attila.dll+013e08b7) //=========
define(MPGH,Attila.dll+00bcd08c) //=========
define(MPPS,Attila.dll+002995f2) //#========(*)
define(MAPC,Attila.dll+0080211a) //=========
define(MAPT,Attila.dll+009aa9a3) //=========
define(MTAP,Attila.dll+010fe040) //=========
define(MAPA,Attila.dll+00d57087) //=========
define(MAAP,Attila.dll+00f47f90) //=========
define(MTAN,Attila.dll+0030f0aa) //=========
define(MOUI,Attila.dll+0039ba26) //=========
define(MOCG,Attila.dll+00bac76f) //N========(*)
define(MOCP,Attila.dll+010777d0) //N========
define(MTRC,Attila.dll+0089bce0) //N========
define(MOFS,Attila.dll+001876e3) //------N==
// RTS
define(MSTP,Attila.dll+00fb2997) //=========
define(MOAM,Attila.dll+00d2e94a) //=========
define(MBUN,Attila.dll+008c1cfd) //==#======
define(GDMS,Attila.dll+0134998a) //==#======
define(GDMD,Attila.dll+01449880) //=========
define(GDM1,Attila.dll+0125d2d0) //=#=======
define(GDM2,Attila.dll+009a7790) //==#=#====
define(GDM3,Attila.dll+010deae6) //==#======
define(GDM4,Attila.dll+009a770f) //==#=#====
define(GDM5,Attila.dll+012b6d7c) //N=#=#====
define(MOUS,Attila.dll+007a4e24) //=========
// CRC
define(CHKP,Attila.dll+016a9e68) //=========
define(CHKQ,Attila.dll+016aa558) //=========

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMMON,#64000)    // Minimum Money
define(ctMATT,#06)       // Minimum Attributes
define(ctPMPO,#64)       // Province minimum Public Order
define(ctPMSP,#20)       // Province minimum Pop Surplus
define(ctMAGE,#40)       // Maximum Age
define(ctMINT,(float)64) // Minimum Integrity

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded
// TBS
assert(MHPR,8d 88 68 01 00 00 e8 ?? ?? ?? ?? 8b f8 39 be 4c 01 00 00 0f 84)
assert(MCDE,8b 55 0c 8b 42 04 56 8b 75 08 2b 46 04 57 8d 04 40 03 c0 03 c0)
assert(MSCR,8b 84 86 fc 02 00 00 03 c3 5f 5e 89 45 fc 83 f8 01 c7 45 08 01)
assert(MART,8b 0e 83 79 2c 00 0f 85 ?? ?? ?? ?? 8b 41 28 85 c0 ?? ?? 8b 00)
assert(MMCA,8b 46 08 85 c0 ?? ?? 8b 4d 10 39 41 08 ?? ?? 83 4d fc 01 8b 17)
assert(MCPS,ff 41 08 8b 41 08 3b 41 0c 0f 93 c0 c3 cc cc cc ?? ?? ?? ?? ??)
assert(MRPS,8b 4e 1c 03 41 08 8b 11 3b 42 44 0f 83 ?? ?? ?? ?? 89 41 08 8b)
assert(MPPO,8b 5e 34 8b f8 8b 41 7c 85 c0 ?? ?? 8b 10 89 55 fc ?? ?? c7 45)
assert(MPGH,8b f8 39 7e 08 ?? ?? 8b ce e8 ?? ?? ?? ?? 39 46 04 ?? ?? 6a 01)
assert(MPPS,3b 98 40 02 00 00 ?? ?? 81 4d f8 00 01 00 00 c6 45 17 01 80 7d)
assert(MAPC,89 46 14 5e 5d c2 04 00 57 8b ce e8 ?? ?? ?? ?? 5f 5e 5d c2 04)
assert(MAPT,8b 41 64 8b 55 08 c7 81 34 01 00 00 ff ff ff ff 3b c2 ?? ?? 2b)
assert(MTAP,c7 81 34 01 00 00 ff ff ff ff c7 41 64 00 00 00 00 c3 cc cc cc)
assert(MAPA,2b c2 89 41 14 5d c2 04 00 c7 41 14 00 00 00 00 5d c2 04 00 cc)
assert(MAAP,c7 41 14 00 00 00 00 c7 81 8c 00 00 00 ff ff ff ff c3 cc cc cc)
assert(MTAN,89 46 44 8b 56 20 8b 52 08 8d 4e 20 8d 45 08 50 89 75 08 ff d2)
assert(MOUI,d9 55 fc d9 16 d9 ee df f1 dd d8 ?? ?? 0f 57 c0 f3 0f 11 06 e9)
assert(MOCG,8b 18 39 5f 08 ?? ?? 56 ?? ?? 8d 49 00 8b 0f 8b 77 04 68 b7 02)
assert(MOCP,8b 41 0c 8b 48 54 8b 51 04 8b 82 ec 03 00 00 8b 48 0c 8b 41 04)
assert(MTRC,8b 3b 83 7f 2c 00 ?? ?? 8b 47 28 85 c0 ?? ?? 8b 00 85 c0 ?? ??)
assert(MOFS,f3 0f 7e 41 08 66 0f d6 40 08 ff 46 04 5e 5b 5d c2 04 00 ?? ??)
// RTS
assert(MSTP,89 be c4 08 00 00 8b 86 9c 08 00 00 3b 86 a8 08 00 00 ?? ?? 84)
assert(MOAM,f3 0f 11 86 cc 20 00 00 f3 0f 10 05 ?? ?? ?? ?? 0f 2f 86 cc 20)
assert(MBUN,8b 8e 10 07 00 00 db 86 10 07 00 00 85 c9 ?? ?? d8 05 ?? ?? ??)
assert(GDMS,8b be 10 07 00 00 3b f8 ?? ?? 2b f8 89 be 10 07 00 00 5f 5e 5b)
assert(GDMD,55 8b ec 53 56 8b 75 08 8b 86 54 02 00 00 8b 40 0c 48 8b d9 83)
assert(GDM1,55 8b ec 83 ec 60 53 56 8b f1 8b 8e 58 02 00 00 33 db 57 3b cb)
assert(GDM2,89 8e 10 07 00 00 89 be 24 0b 00 00 83 be 24 0b 00 00 00 ?? ??)
assert(GDM3,89 81 10 07 00 00 f3 0f 10 05 ?? ?? ?? ?? 51 f3 0f 11 04 24 e8)
assert(GDM4,f3 0f 11 8e 20 0b 00 00 8b ce e8 ?? ?? ?? ?? 8b 50 24 66 0f 6e)
assert(GDM5,f3 0f 11 8e 20 0b 00 00 8b ce e8 ?? ?? ?? ?? 8b 50 24 66 0f 6e)
assert(MOUS,01 96 f8 03 00 00 8b ce e8 ?? ?? ?? ?? 5f 5e 5b 8b e5 5d c3 cc)
// CRC
assert(CHKP,8b 4d 10 8b 7d 08 8b c1 8b d1 03 c6 3b fe ?? ?? 3b f8 0f 82 ??)
assert(CHKQ,8b 4d 10 8b 7d 08 8b c1 8b d1 03 c6 3b fe ?? ?? 3b f8 0f 82 ??)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonCurDate)
label(_BackMCD)
label(_ExitMCD)
label(_MonSelCommander)
label(_MonSC00)
label(_BackMSC)
label(_ExitMSC)
label(_MonArmyReinf)
label(_MonAR00)
label(_BackMAR)
label(_ExitMAR)
label(_MonMercAvail)
label(_BackMMA)
label(_ExitMMA)
label(_MonConstProg)
label(_MonCP00)
label(_BackMCP)
label(_ExitMCP)
label(_MonResearchProg)
label(_BackMRP)
label(_ExitMRP)
label(_MonProvincePO)
label(_BackMPP)
label(_ExitMPP)
label(_MonProvinceGrowth)
label(_BackMPG)
label(_ExitMPG)
label(_MonProvPopSurplus)
label(_BackPPS)
label(_ExitPPS)
label(_MonActionPointsC)
label(_BackMAC)
label(_ExitMAC)
label(_MonActionPointsT)
label(_MonAT00)
label(_BackMAT)
label(_ExitMAT)
label(_MonTroopAP)
label(_BackTAP)
label(_ExitTAP)
label(_MonActionPointsA)
label(_BackMAA)
label(_ExitMAA)
label(_MonAgentAP)
label(_BackAAP)
label(_ExitAAP)
label(_MonTroopAttrition)
label(_BackMTA)
label(_ExitMTA)
label(_MonUnitIntegrity)
label(_BackMUI)
label(_ExitMUI)
label(_MonCampGrowth)
label(_BackMCG)
label(_ExitMCG)
label(_MonCampPopSurplus)
label(_BackCPS)
label(_ExitCPS)
label(_MonTroopRecC)
label(_BackMTR)
label(_ExitMTR)
label(_MonFoodSurplus)
label(_MonFS00)
label(_BackMFS)
label(_ExitMFS)

label(_MonSelTroop)
label(_BackMST)
label(_ExitMST)
label(_MonAmmo)
label(_BackMAM)
label(_ExitMAM)
label(_MonBattleUnits)
label(_BackMBU)
label(_ExitMBU)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_GodMode3)
label(_BackGM3)
label(_ExitGM3)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_GodMode5)
label(_BackGM5)
label(_ExitGM5)
label(_MonUnitStress)
label(_BackMUS)
label(_ExitMUS)

label(_HackPoint)
label(_BackHPT)
label(_ExitHPT)
label(_HackPointQ)
label(_BackHPQ)
label(_ExitHPQ)

label(iEnableMMM)
label(iEnableMTS)
label(iEnableMAR)
label(iEnableMMA)
label(iEnableMCP)
label(iEnableMRP)
label(iEnableMPP)
label(iEnableMPG)
label(iEnablePPS)
label(iEnableMAP)
label(iEnableMTA)
label(iEnableMAA)
label(iEnableMBU)
label(iEnableMIA)
label(iEnableMUI)
label(iEnableMFS)

label(iEnableMAM)
label(iEnableGMD)
label(iEnableMUS)

label(iEnableCRC)

label(iID)
label(iDate)
label(pPlayer)
label(pCommander)
label(pProvince)
label(pTroop)
label(pTroopRTS)
label(pCommon)
label(pCamp)

label(iCounterP)
label(iCounterQ)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMMM)
registersymbol(iEnableMTS)
registersymbol(iEnableMAR)
registersymbol(iEnableMMA)
registersymbol(iEnableMCP)
registersymbol(iEnableMRP)
registersymbol(iEnableMPP)
registersymbol(iEnableMPG)
registersymbol(iEnablePPS)
registersymbol(iEnableMAP)
registersymbol(iEnableMTA)
registersymbol(iEnableMAA)
registersymbol(iEnableMBU)
registersymbol(iEnableMIA)
registersymbol(iEnableMUI)
registersymbol(iEnableMFS)

registersymbol(iEnableMAM)
registersymbol(iEnableGMD)
registersymbol(iEnableMUS)

registersymbol(iID)
registersymbol(pPlayer)
registersymbol(pCommander)
registersymbol(pProvince)
registersymbol(pTroop)
registersymbol(pTroopRTS)
registersymbol(pCommon)
registersymbol(pCamp)

registersymbol(iCounterP)
registersymbol(iCounterQ)
registersymbol(aLast)

//=========================================
MyCode:
//=========================================
// TBS - At main game screen
_MonHumanPlayer:
 mov dword ptr [aLast],'_MHP'

 mov [pPlayer],eax

 mov ecx,[eax+04]
 mov [iID],ecx

 cmp dword ptr [iEnableMMM],0
 je _ExitMHP                       // Jump if feature is disabled

 mov ecx,ctMMON
 cmp ecx,[eax+000007dc]
 js _ExitMHP

 mov [eax+000007dc],ecx

_ExitMHP:
 lea ecx,[eax+00000168]            // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// TBS In Main Game Screen
_MonCurDate:
 mov edx,[ebp+0C]                  // Original code
 mov eax,[edx+04]                  // Original code (rd Date)

 mov [iDate],eax

_ExitMCD:
 jmp _BackMCD                      // Back to main code

//=========================================
// TBS - selected army
_MonSelCommander:
 mov dword ptr [aLast],'_MSC'

 push eax
 push ebx

 mov [pCommander],esi

 mov ebx,[esi+000001cc]
 test ebx,ebx
 jz _ExitMSC

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitMSC

 cmp dword ptr [iEnableMBU],0
 je _MonSC00                       // Jump if feature is disabled

 mov eax,ctMATT
// Cunning
 mov ebx,[esi+000002fc]
 cmp ebx,eax
 cmovs ebx,eax
 mov [esi+000002fc],ebx
// Zeal
 mov ebx,[esi+00000300]
 cmp ebx,eax
 cmovs ebx,eax
 mov [esi+00000300],ebx
// Authority
 mov ebx,[esi+00000304]
 cmp ebx,eax
 cmovs ebx,eax
 mov [esi+00000304],ebx

_MonSC00:
 cmp dword ptr [iEnableMIA],0
 je _ExitMSC                       // Jump if feature is disabled

 mov eax,[iDate]
 mov ebx,ctMAGE
 sub eax,ebx
 cmp eax,[esi+00000290]
 js _ExitMSC

 mov [esi+00000290],eax

_ExitMSC:
 pop ebx
 pop eax

 mov eax,[esi+eax*4+000002FC]      // Original code (get attribs)
 jmp _BackMSC                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonArmyReinf:
 mov dword ptr [aLast],'_MAR'

 cmp dword ptr [iEnableMAR],0
 je _ExitMAR                       // Jump if feature is disabled

 mov ecx,[ebp+2c]
 cmp ecx,[pPlayer]
 je _MonAR00

 mov ecx,[ebp+48]
 cmp ecx,[pPlayer]
 jne _ExitMAR

_MonAR00:
 mov ecx,[esi]
 mov dword ptr [ecx+2c],00         // Finish it

_ExitMAR:
 mov ecx,[esi]                     // Original code
 cmp dword ptr [ecx+2C],00         // Original code (chk #Turns)
 jmp _BackMAR                      // Back to main code

//=========================================
// TBS - Mercenaries available to player's commander
_MonMercAvail:
 mov dword ptr [aLast],'_MMA'

 test ebx,ebx                      // Is there a commander?
 jz _ExitMMA

 mov eax,[ebx+000001cc]            // Get pOwner
 test eax,eax
 jz _ExitMMA

 mov eax,[eax]                     // Get pPlayer
 test eax,eax
 jz _ExitMMA

 cmp eax,[pPlayer]
 jne _ExitMMA

 cmp dword ptr [iEnableMMA],0
 je _ExitMMA                       // Jump if feature is disabled

 mov eax,[esi+10]
 cmp eax,[esi+08]
 js _ExitMMA

 mov [esi+08],eax

_ExitMMA:
 mov eax,[esi+08]                  // Original code (Get #MA)
 test eax,eax                      // Original code
 jmp _BackMMA                      // Back to main code

//=========================================
// TBS During turn changing
_MonConstProg:
 mov dword ptr [aLast],'_MCP'

 mov eax,[ebp+20]
 cmp eax,[pPlayer]
 je _MonCP00

 mov eax,[ebp+34]
 cmp eax,[pPlayer]
 jne _ExitMCP

_MonCP00:
 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 mov eax,[ecx+0c]                  // Get value_needed
 mov [ecx+08],eax                  // Complete construction

_ExitMCP:
 inc [ecx+08]                      // Original code (set prog)
 mov eax,[ecx+08]                  // Original code
 jmp _BackMCP                      // Back to main code

//=========================================
// TBS During turn changing
_MonResearchProg:
 mov dword ptr [aLast],'_MRP'

 mov ebx,[esi+18]
 cmp ebx,[pPlayer]
 jne _ExitMRP

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov ecx,[esi+1C]
 mov ecx,[ecx]
 mov eax,[ecx+44]

_ExitMRP:
 mov ecx,[esi+1C]                  // Original code (get pRes)
 add eax,[ecx+08]                  // Original code (get Prog)
 jmp _BackMRP                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonProvincePO:
 mov dword ptr [aLast],'_MPP'

 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov ebx,[ecx+7c]                  // Get ppPlayer
 test ebx,ebx
 jz _ExitMPP

 mov ebx,[ebx]                     // Get pPlayer
 cmp ebx,[pPlayer]
 jne _ExitMPP

 mov ebx,ctPMPO                    // Minimum PO value
 cmp ebx,[esi+34]
 js _ExitMPP

 mov [esi+34],ebx

_ExitMPP:
 mov ebx,[esi+34]                  // Original code (get PO)
 mov edi,eax                       // Original code
 jmp _BackMPP                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonProvinceGrowth:
 mov dword ptr [aLast],'_MPG'

 cmp ebx,[pPlayer]
 jne _ExitMPG

 cmp dword ptr [iEnableMPG],0
 je _ExitMPG                       // Jump if feature is disabled

 mov [esi+08],eax

_ExitMPG:
 mov edi,eax                       // Original code
 cmp [esi+08],edi                  // Original code (rd growth)
 jmp _BackMPG                      // Back to main code

//=========================================
// TBS - When construction Undercursor
_MonProvPopSurplus:
 mov dword ptr [aLast],'_PPS'

 push ebx

 mov [pProvince],eax

 mov ebx,[eax+7c]                  // Get ppPlayer
 test ebx,ebx
 jz _ExitPPS

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitPPS

 cmp dword ptr [iEnablePPS],0
 je _ExitPPS                       // Jump if feature is disabled

 mov ebx,ctPMSP
 cmp ebx,[eax+00000240]
 js _ExitPPS

 mov [eax+00000240],ebx

_ExitPPS:
 pop ebx

 cmp ebx,[eax+00000240]            // Original code (Get PopSurplus)
 jmp _BackPPS                      // Back to main code

//=========================================
// TBS - Commander on move
_MonActionPointsC:
 mov dword ptr [aLast],'_MAC'

 push ecx

 mov ecx,[esi+000001cc]
 test ecx,ecx
 jz _ExitMAC

 mov ecx,[ecx]
 cmp ecx,[pPlayer]
 jne _ExitMAC

 cmp dword ptr [iEnableMAP],0
 je _ExitMAC                       // Jump if feature is disabled

 cmp eax,[esi+14]
 js _ExitMAC

 mov eax,[esi+14]

_ExitMAC:
 pop ecx

 mov [esi+14],eax                  // Original code (set AP)
 pop esi                           // Original code
 pop ebp                           // Original code
 jmp _BackMAC                      // Back to main code

//=========================================
// TBS - When Army is moving
_MonActionPointsT:
 mov dword ptr [aLast],'_MAT'

 mov eax,[ecx+3c]                  // Original code
 cmp eax,[pPlayer]
 jne _ExitMAT

 mov [pTroop],ecx

 cmp dword ptr [iEnableMAP],0
 je _MonAT00                       // Jump if feature is disabled

 xor eax,eax
 mov [ebp+08],eax

_MonAT00:
 cmp dword ptr [iEnableMTS],0
 je _ExitMAT                       // Jump if feature is disabled

 mov eax,[ecx+48]
 mov [ecx+44],eax

_ExitMAT:
 mov eax,[ecx+64]                  // Original code
 mov edx,[ebp+08]                  // Original code
 jmp _BackMAT                      // Back to main code

//=========================================
// TBS - After a battle
_MonTroopAP:
 mov dword ptr [aLast],'_MTA'

 push ebx

 mov ebx,[ecx+3c]
 cmp ebx,[pPlayer]
 jne _ExitTAP

 cmp dword ptr [iEnableMAP],0
 je _ExitTAP                       // Jump if feature is disabled

 mov ebx,[ecx+64]
 mov [ecx+00000134],ebx

 pop ebx
 ret
//==
_ExitTAP:
 pop ebx

 mov [ecx+00000134],FFFFFFFF       // Original code
 jmp _BackTAP                      // Back to main code

//=========================================
// TBS - Agents on move
_MonActionPointsA:
 mov dword ptr [aLast],'_MAA'

 push ebx

 mov ebx,[ecx+000001cc]
 test ebx,ebx
 jz _ExitMAA

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitMAA

 cmp dword ptr [iEnableMAP],0
 je _ExitMAA                       // Jump if feature is disabled

 mov eax,[ecx+14]
 xor edx,edx

_ExitMAA:
 pop ebx

 sub eax,edx                       // Original code
 mov [ecx+14],eax                  // Original code (upds AP)
 jmp _BackMAA                      // Back to main code

//=========================================
// TBS - Agent can act again
_MonAgentAP:
 mov dword ptr [aLast],'_MA1'

 push eax

 mov eax,[ecx+000001cc]
 test eax,eax
 jz _ExitAAP

 mov eax,[eax]                     // Get pPlayer
 cmp eax,[pPlayer]
 jne _ExitAAP

 cmp dword ptr [iEnableMAA],0
 je _ExitAAP                       // Jump if feature is disabled

 mov eax,[ecx+10]
 mov [ecx+14],eax
 mov [ecx+0000008C],eax
 mov byte ptr [ecx+0000056c],00

 pop eax
 ret
//====
_ExitAAP:
 pop eax

 mov [ecx+14],00000000             // Original code (AP = 0)
 jmp _BackAAP                      // Back to main code

//=========================================
// TBS - During Turn
_MonTroopAttrition:
 mov dword ptr [aLast],'_TAN'

 mov edx,[esi+3c]
 cmp edx,[pPlayer]
 jne _ExitMTA

 cmp dword ptr [iEnableMTA],0
 je _ExitMTA                       // Jump if feature is disabled

 mov eax,[esi+48]

_ExitMTA:
 mov [esi+44],eax                  // Original code (set Size)
 mov edx,[esi+20]                  // Original code
 jmp _BackMTA                      // Back to main code

//=========================================
// TBS - During Turn
_MonUnitIntegrity:
 mov dword ptr [aLast],'_MUI'

 push eax

 fst dword ptr [ebp-04]            // Original code
 fst dword ptr [esi]               // Original code (set Int)

 mov eax,[ebp-08]
 test eax,eax
 jz _ExitMUI

 mov eax,[eax+000000bc]
 test eax,eax
 jz _ExitMUI

 mov eax,[eax]
 cmp eax,[pPlayer]
 jne _ExitMUI

 cmp dword ptr [iEnableMUI],0
 je _ExitMUI                       // Jump if feature is disabled

 mov eax,ctMINT
 cmp eax,[esi]
 js _ExitMUI

 mov [esi],eax
 mov [ebp-04],eax

 fstp st(0)
 fld dword ptr [esi]

_ExitMUI:
 pop eax
 jmp _BackMUI                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonCampGrowth:
 mov dword ptr [aLast],'_MCG'

 cmp dword ptr [iEnableMPG],0
 je _ExitMCG                       // Jump if feature is disabled

 mov ebx,[edi]
 test ebx,ebx
 jz _ExitMCG

 mov ebx,[ebx+000000bc]
 test ebx,ebx
 jz _ExitMCG

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitMCG

 mov ebx,[eax]
 mov [edi+08],eax

_ExitMCG:
 mov ebx,[eax]                     // Original code (get needed value)
 cmp [edi+08],ebx                  // Original code (chk growth)
 jmp _BackMCG                      // Back to main code

//=========================================
// TBS - When construction Undercursor
_MonCampPopSurplus:
 mov dword ptr [aLast],'_CPS'

 push ebx

 mov ecx,[eax+0C]                  // Original code
 mov ebx,[ecx]

 test ebx,ebx
 jz _ExitCPS

 mov [pCamp],ebx

 cmp dword ptr [iEnablePPS],0
 je _ExitCPS                       // Jump if feature is disabled

 mov ebx,[ebx+000000bc]
 test ebx,ebx
 jz _ExitCPS

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitCPS

 mov ebx,ctPMSP
 cmp ebx,[ecx+04]
 js _ExitCPS

 mov [ecx+04],ebx

_ExitCPS:
 pop ebx

 mov eax,[ecx+04]                  // Original code (Get PopSurplus)
 jmp _BackCPS                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonTroopRecC:
 mov dword ptr [aLast],'_MTR'

 cmp dword ptr [iEnableMAR],0
 je _ExitMTR                       // Jump if feature is disabled

 mov edi,[ebp+24]
 cmp edi,[pPlayer]
 jne _ExitMTR

 mov edi,[ebx]
 mov dword ptr [edi+2c],00         // Finish it

_ExitMTR:
 mov edi,[ebx]                     // Original code
 cmp dword ptr [edi+2C],00         // Original code (chk #Turns)
 jmp _BackMTR                      // Back to main code

//=========================================
// TBS - Food Surplus (Accessing Trade/Economy TAb and during Turn
_MonFoodSurplus:
 mov dword ptr [aLast],'_MFS'

 push eax
 push edx

 cmp dword ptr [iEnableMFS],0
 je _ExitMFS                       // Jump if feature is disabled

 mov ebx,[ebp+0c]
 test ebx,ebx
 jz _ExitMFS

 cmp dword ptr [ebx],8
 jne _ExitMFS

 mov eax,[ebx+14]
 test eax,eax
 js _ExitMFS

 cmp eax,(float)10.0
 js _ExitMFS

 cmp eax,(float)640.0
 jns _ExitMFS

 mov eax,[ebx+08]
 cmp eax,[pPlayer]
 jne _ExitMFS

 mov edx,[ebx+20]
 test edx,edx
 jz _ExitMFS

 mov edx,[ebx+0c]
 test edx,edx
 jz _ExitMFS

 mov eax,[edx]
 cmp eax,[edx+04]
 jne _ExitMFS

 mov edx,[edx+08]
 test edx,edx
 jz _ExitMFS

 mov eax,[edx+0b]
 cmp eax,'food'
 jne _ExitMFS

 mov eax,[edx+10]
 cmp eax,'prod'
 jne _ExitMFS

 mov eax,[edx+1b]
 cmp eax,'farm'
 je _MonFS00

 cmp eax,'fish'
 jne _ExitMFS

_MonFS00:
 mov edx,[ebx+20]
 mov eax,(float)640.0

 mov [ebx+14],eax
 mov [edx+08],eax
 mov [edx+0c],eax

_ExitMFS:
 pop edx
 pop eax

 movq xmm0,[ecx+08]                // Original code (get food)
 jmp _BackMFS                      // Back to main code (keeping the template)

//-----------------------------------------------------------------------------
//=========================================
// RTS - Selected Troop
_MonSelTroop:
 push eax

 mov [pTroopRTS],edi

 test edi,edi
 jz _ExitMST

 cmp byte ptr [edi+000000dc],01
 jne _ExitMST

 mov eax,[edi+000000b0]
 test eax,eax
 jz _ExitMST

 mov eax,[eax+30]

 mov [pCommon],eax

_ExitMST:
 pop eax

 mov [esi+000008C4],edi            // Original code
 jmp _BackMST                      // Back to main code

//=========================================
// RTS - During Battle
_MonAmmo:
 mov dword ptr [aLast],'_MAM'

 push ecx

 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 mov ecx,[esi+30]
 cmp ecx,[pCommon]
 jne _ExitMAM

 cvtsi2ss xmm0,[esi+000020d0]

_ExitMAM:
 pop ecx

 movss [esi+000020CC],xmm0         // Original code (set ammo)
 jmp _BackMAM                      // Back to main code

//=========================================
// RTS - During Battle
_MonBattleUnits:
 mov dword ptr [aLast],'_MBU'

 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitMBU                       // Jump if feature is disabled

 mov ecx,[esi+0000025c]            // pTroopIndex
 test ecx,ecx
 jz _ExitMBU

 mov ecx,[ecx+30]
 cmp ecx,[pCommon]
 jne _ExitMBU

 mov ecx,#64000
 mov ebx,[esi+0000070c]
 cmp ebx,ecx
 cmovs ebx,ecx

 mov [esi+00000710],ebx
 mov [esi+0000070c],ebx

_ExitMBU:
 pop ebx

 mov ecx,[esi+00000710]            // Original code (get mHP)
 jmp _BackMBU                      // Back to main code

//=========================================
// RTS - During Battle (Ship)
_GodModeS:
 mov dword ptr [aLast],'_GMS'

 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMS                       // Jump if feature is disabled

 mov edi,[esi+0000025c]            // pTroopIndex
 test edi,edi
 jz _ExitGMS

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGMS

 mov edi,#64000
 mov ebx,[esi+0000070c]
 cmp ebx,edi
 cmovs ebx,edi

 mov [esi+00000710],ebx
 mov [esi+0000070c],ebx
 xor eax,eax

_ExitGMS:
 pop ebx

 mov edi,[esi+00000710]            // Original code (rd cHP)
 jmp _BackGMS                      // Back to main code

//=========================================
// RTS - During Battle (Horses)
_GodMode:
 mov dword ptr [aLast],'_GMD'

 push ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ecx,[esp+08]

 mov ecx,[ecx+0000025c]            // pTroopIndex
 test ecx,ecx
 jz _ExitGMD

 mov ecx,[ecx+30]
 cmp ecx,[pCommon]
 jne _ExitGMD

 pop ecx
 ret 0004
//==
_ExitGMD:
 pop ecx

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 push ebx                          // Original code
 push esi                          // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
// RTS - During Battle (Soldiers)
// ECX = Unit
_GodMode1:
 mov dword ptr [aLast],'_GM1'

 push eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 mov eax,[ecx+0000025c]            // pTroopIndex
 test eax,eax
 jz _ExitGM1

 mov eax,[eax+30]
 cmp eax,[pCommon]
 jne _ExitGM1

 pop eax
 ret 0004
//==
_ExitGM1:
 pop eax

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 sub esp,60                        // Original code
 jmp _BackGM1                      // Back to main code

//=========================================
// RTS - During Battle (Unit on Fire)
// ESI = UNIT
_GodMode2:
 mov dword ptr [aLast],'_GM2'

 push ebx
 push edi

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 mov edi,[esi+0000025c]            // pTroopIndex
 test edi,edi
 jz _ExitGM2

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGM2

 mov edi,#64000
 mov ebx,[esi+0000070c]
 cmp ebx,edi
 cmovs ebx,edi

 mov [esi+0000070c],ebx
 mov ecx,ebx

_ExitGM2:
 pop edi
 pop ebx

 mov [esi+00000710],ecx            // Original code (set cHP)
 jmp _BackGM2                      // Back to main code

//=========================================
// RTS - During Battle (More protection against Fire)
// ECX = UNIT
_GodMode3:
 mov dword ptr [aLast],'_GM3'

 push ebx
 push edi
 push esi

 mov esi,ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGM3                       // Jump if feature is disabled

 mov edi,[esi+0000025c]            // pTroopIndex
 test edi,edi
 jz _ExitGM3

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGM3

 mov edi,#64000
 mov ebx,[esi+0000070c]
 cmp ebx,edi
 cmovs ebx,edi

 mov [esi+0000070c],ebx
 mov eax,ebx

_ExitGM3:
 pop esi
 pop edi
 pop ebx

 mov [ecx+00000710],eax            // Original code (set cHP)
 jmp _BackGM3                      // Back to main code

//========================================= 1.3.0
// RTS - During Battle (still more protection against Fire)
// ESI = UNIT
_GodMode4:
 mov dword ptr [aLast],'_GM4'

 push edi

 movss [esi+00000B20],xmm1         // Original code (set Damage)

 cmp dword ptr [iEnableGMD],0
 je _ExitGM4                       // Jump if feature is disabled

 mov edi,[esi+0000025c]            // pTroopIndex
 test edi,edi
 jz _ExitGM4

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGM4

 xor edi,edi
 mov [esi+00000b20],edi            // Damage = 0

_ExitGM4:
 pop edi
 jmp _BackGM4                      // Back to main code

//=========================================
// RTS - During Battle (still more protection against Fire)
// ESI = BUILDING
_GodMode5:
 mov dword ptr [aLast],'_GM5'

 push edi

 movss [esi+00000B20],xmm1         // Original code (set Damage)

 cmp dword ptr [iEnableGMD],0
 je _ExitGM5                       // Jump if feature is disabled

 mov edi,[esi+0000025c]            // pTroopIndex
 test edi,edi
 jz _ExitGM5

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGM5

 xor edi,edi
 mov [esi+00000b20],edi            // Damage = 0

_ExitGM5:
 pop edi
 jmp _BackGM5                      // Back to main code

//=========================================
// RTS - During Battle
// ESI = UNIT
_MonUnitStress:
 mov dword ptr [aLast],'_MUS'

 push ebx

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 mov ebx,[esi+0000025c]            // pTroopIndex
 test ebx,ebx
 jz _ExitMUS

 mov ebx,[ebx+30]
 cmp ebx,[pCommon]
 jne _ExitMUS

 xor edx,edx
 mov [esi+000003f8],edx

_ExitMUS:
 pop ebx

 add [esi+000003F8],edx            // Original code (set stress)
 jmp _BackMUS                      // Back to main code

//-----------------------------------------------------------------------------
//=========================================
// Cheating CRC check
_HackPoint:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPT

 cmp dword ptr [iEnableCRC],0
 je _ExitHPT                       // Jump if feature is disabled

 cmp esi,LUDO
 jl _ExitHPT

 cmp esi,LUDOEND
 jge _ExitHPT

 mov edi,LUDO
 sub esi,edi
 mov edi,CodeCopy
 add esi,edi

 inc dword ptr [iCounterP]

_ExitHPT:
 mov ecx,[ebp+10]                  // Original code
 mov edi,[ebp+08]                  // Original code
 jmp _BackHPT                      // Back to main code (keeping the template)

//=========================================
// Cheating CRC check
_HackPointQ:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPQ

 cmp dword ptr [iEnableCRC],0
 je _ExitHPQ                       // Jump if feature is disabled

 cmp esi,LUDO
 jl _ExitHPQ

 cmp esi,LUDOEND
 jge _ExitHPQ

 mov edi,LUDO
 sub esi,edi
 mov edi,CodeCopy
 add esi,edi

 inc dword ptr [iCounterQ]

_ExitHPQ:
 mov ecx,[ebp+10]                  // Original code
 mov edi,[ebp+08]                  // Original code
 jmp _BackHPQ                      // Back to main code (keeping the template)

//=========================================
 db '===============================================&gt;'
 db 'CE6.4 Script by Recifense 121015'
//=========================================
// Variables
iEnableMMM:
 dd 0
iEnableMTS:
 dd 0
iEnableMAR:
 dd 0
iEnableMMA:
 dd 0
iEnableMCP:
 dd 0
iEnableMRP:
 dd 0
iEnableMPP:
 dd 0
iEnableMPG:
 dd 0
iEnablePPS:
 dd 0
iEnableMAP:
 dd 0
iEnableMTA:
 dd 0
iEnableMAA:
 dd 0
iEnableMBU:
 dd 0
iEnableMIA:
 dd 0
iEnableMUI:
 dd 0
iEnableMFS:
 dd 0
iEnableMAM:
 dd 0
iEnableGMD:
 dd 0
iEnableMUS:
 dd 0
iEnableCRC:
 dd 1
iID:
 dd #999
iDate:
 dd #1120
pPlayer:
 dd MyCode
pCommander:
 dd 0
pProvince:
 dd 0
pTroop:
 dd 0
pTroopRTS:
 dd 0
pCommon:
 dd MyCode
pCamp:
 dd 0

iCounterP:
 dd 0
iCounterQ:
 dd 0
aLast:
 db 'CE64'

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

MCDE:
 jmp _MonCurDate
 nop
_BackMCD:

MSCR:
 jmp _MonSelCommander
 nop
 nop
_BackMSC:

MART:
 jmp _MonArmyReinf
 nop
_BackMAR:

MMCA:
 jmp _MonMercAvail
_BackMMA:

MCPS:
 jmp _MonConstProg
 nop
_BackMCP:

MRPS:
 jmp _MonResearchProg
 nop
_BackMRP:

MPPO:
 jmp _MonProvincePO
_BackMPP:

MPGH:
 jmp _MonProvinceGrowth
_BackMPG:

MPPS:
 jmp _MonProvPopSurplus
 nop
_BackPPS:

MAPC:
 jmp _MonActionPointsC
_BackMAC:

MAPT:
 jmp _MonActionPointsT
 nop
_BackMAT:

MTAP:
 jmp _MonTroopAP
 db 90 90 90 90 90
_BackTAP:

MAPA:
 jmp _MonActionPointsA
_BackMAA:

MAAP:
 jmp _MonAgentAP
 nop
 nop
_BackAAP:

MTAN:
 jmp _MonTroopAttrition
 nop
_BackMTA:

MOUI:
 jmp _MonUnitIntegrity
_BackMUI:

MOCG:
 jmp _MonCampGrowth
_BackMCG:

MOCP:
 mov eax,[ecx+0C]
 mov ecx,[eax+54]
 mov edx,[ecx+04]
 mov eax,[edx+000003EC]
 jmp _MonCampPopSurplus
 nop
_BackCPS:

MTRC:
 jmp _MonTroopRecC
 nop
_BackMTR:

MOFS:
 jmp _MonFoodSurplus
_BackMFS:

//-----------------------------
MSTP:
 jmp _MonSelTroop
 nop
_BackMST:

MOAM:
 jmp _MonAmmo
 nop
 nop
 nop
_BackMAM:

MBUN:
 jmp _MonBattleUnits
 nop
_BackMBU:

GDMS:
 jmp _GodModeS
 nop
_BackGMS:

GDMD:
 jmp _GodMode
_BackGMD:

GDM1:
 jmp _GodMode1
 nop
_BackGM1:

GDM2:
 jmp _GodMode2
 nop
_BackGM2:

GDM3:
 jmp _GodMode3
 nop
_BackGM3:

GDM4:
 jmp _GodMode4
 nop
 nop
 nop
_BackGM4:

GDM5:
 jmp _GodMode5
 nop
 nop
 nop
_BackGM5:

MOUS:
 jmp _MonUnitStress
 nop
_BackMUS:

//-----------------------------
CHKP:
 jmp _HackPoint
 nop
_BackHPT:

CHKQ:
 jmp _HackPointQ
 nop
_BackHPQ:

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
getAddressList().getMemoryRecordByID(142).Active=false
getAddressList().getMemoryRecordByID(142).Color=0x0c08000
getAddressList().getMemoryRecordByID(143).Active=false
getAddressList().getMemoryRecordByID(143).Color=0x0c08000
getAddressList().getMemoryRecordByID(144).Active=false
getAddressList().getMemoryRecordByID(144).Color=0x0c08000
getAddressList().getMemoryRecordByID(145).Active=false
getAddressList().getMemoryRecordByID(145).Color=0x0c08000
getAddressList().getMemoryRecordByID(146).Active=false
getAddressList().getMemoryRecordByID(146).Color=0x0c08000
getAddressList().getMemoryRecordByID(139).Active=false
getAddressList().getMemoryRecordByID(139).Color=0x0c08000
getAddressList().getMemoryRecordByID(140).Active=false
getAddressList().getMemoryRecordByID(140).Color=0x0c08000
getAddressList().getMemoryRecordByID(141).Active=false
getAddressList().getMemoryRecordByID(141).Color=0x0c08000
getAddressList().getMemoryRecordByID(148).Active=false
getAddressList().getMemoryRecordByID(148).Color=0x0c08000
getAddressList().getMemoryRecordByID(147).Active=false
getAddressList().getMemoryRecordByID(147).Color=0x0c08000
getAddressList().getMemoryRecordByID(149).Active=false
getAddressList().getMemoryRecordByID(149).Color=0x0c08000
getAddressList().getMemoryRecordByID(150).Active=false
getAddressList().getMemoryRecordByID(150).Color=0x0c08000
getAddressList().getMemoryRecordByID(151).Active=false
getAddressList().getMemoryRecordByID(151).Color=0x0c08000
getAddressList().getMemoryRecordByID(152).Active=false
getAddressList().getMemoryRecordByID(152).Color=0x0c08000
getAddressList().getMemoryRecordByID(138).Active=false
getAddressList().getMemoryRecordByID(138).Color=0x0c08000
getAddressList().getMemoryRecordByID(153).Active=false
getAddressList().getMemoryRecordByID(153).Color=0x0c08000
getAddressList().getMemoryRecordByID(154).Active=false
getAddressList().getMemoryRecordByID(154).Color=0x0c08000
getAddressList().getMemoryRecordByID(250).Active=false
getAddressList().getMemoryRecordByID(250).Color=0x0c08000
{$asm}

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// lea ecx,[eax+00000168]
 db 8d 88 68 01 00 00

MCDE:
// mov edx,[ebp+0C]
// mov eax,[edx+04]
 db 8b 55 0c 8b 42 04

MSCR:
// mov eax,[esi+eax*4+000002FC]
 db 8b 84 86 fc 02 00 00

MART:
// mov ecx,[esi]
// cmp dword ptr [ecx+2C],00
 db 8b 0e 83 79 2c 00

MMCA:
// mov eax,[esi+08]
// test eax,eax
 db 8b 46 08 85 c0

MCPS:
// inc [ecx+08]
// mov eax,[ecx+08]
 db ff 41 08 8b 41 08

MRPS:
// mov ecx,[esi+1C]
// add eax,[ecx+08]
 db 8b 4e 1c 03 41 08

MPPO:
// mov ebx,[esi+34]
// mov edi,eax
 db 8b 5e 34 8b f8

MPGH:
// mov edi,eax
// cmp [esi+08],edi
 db 8b f8 39 7e 08

MPPS:
// cmp ebx,[eax+00000240]
 db 3b 98 40 02 00 00

MAPC:
// mov [esi+14],eax
// pop esi
// pop ebp
 db 89 46 14 5e 5d

MAPT:
// mov eax,[ecx+64]
// mov edx,[ebp+08]
 db 8b 41 64 8b 55 08

MTAP:
// mov [ecx+00000134],FFFFFFFF
 db c7 81 34 01 00 00 ff ff ff ff

MAPA:
// sub eax,edx
// mov [ecx+14],eax
 db 2b c2 89 41 14

MAAP:
// mov [ecx+14],00000000
 db c7 41 14 00 00 00 00

MTAN:
// mov [esi+44],eax
// mov edx,[esi+20]
 db 89 46 44 8b 56 20

MOUI:
// fst dword ptr [ebp-04]
// fst dword ptr [esi]
 db d9 55 fc d9 16

MOCG:
// mov ebx,[eax]
// cmp [edi+08],ebx
 db 8b 18 39 5f 08

MOCP:
// mov eax,[ecx+0C]
// mov ecx,[eax+54]
// mov edx,[ecx+04]
// mov eax,[edx+000003EC]
// mov ecx,[eax+0C]
// mov eax,[ecx+04]
 db 8b 41 0c 8b 48 54
 db 8b 51 04 8b 82 ec 03 00 00
 db 8b 48 0c 8b 41 04

MTRC:
// mov edi,[ebx]
// cmp dword ptr [edi+2C],00
 db 8b 3b 83 7f 2c 00

MOFS:
// movq xmm0,[ecx+08]
 db f3 0f 7e 41 08

//---------------------------
MSTP:
// mov [esi+000008C4],edi
 db 89 be c4 08 00 00

MOAM:
// movss [esi+000020CC],xmm0
 db f3 0f 11 86 cc 20 00 00

MBUN:
// mov ecx,[esi+00000710]
 db 8b 8e 10 07 00 00

GDMS:
// mov edi,[esi+00000710]
 db 8b be 10 07 00 00

GDMD:
// push ebp
// mov ebp,esp
// push ebx
// push esi
 db 55 8b ec 53 56

GDM1:
// push ebp
// mov ebp,esp
// sub esp,60
 db 55 8b ec 83 ec 60

GDM2:
// mov [esi+00000710],ecx
 db 89 8e 10 07 00 00

GDM3:
// mov [ecx+00000710],eax
 db 89 81 10 07 00 00

GDM4:
// movss [esi+00000B20],xmm1
 db f3 0f 11 8e 20 0b 00 00

GDM5:
// movss [esi+00000B20],xmm1
 db f3 0f 11 8e 20 0b 00 00

MOUS:
// add [esi+000003F8],edx
 db 01 96 f8 03 00 00

//---------------------------
CHKP:
// mov ecx,[ebp+10]
// mov edi,[ebp+08]
 db 8b 4d 10 8b 7d 08

CHKQ:
// mov ecx,[ebp+10]
// mov edi,[ebp+08]
 db 8b 4d 10 8b 7d 08

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
getAddressList().getMemoryRecordByID(142).Active=false
getAddressList().getMemoryRecordByID(142).Color=0x0c08000
getAddressList().getMemoryRecordByID(143).Active=false
getAddressList().getMemoryRecordByID(143).Color=0x0c08000
getAddressList().getMemoryRecordByID(144).Active=false
getAddressList().getMemoryRecordByID(144).Color=0x0c08000
getAddressList().getMemoryRecordByID(145).Active=false
getAddressList().getMemoryRecordByID(145).Color=0x0c08000
getAddressList().getMemoryRecordByID(146).Active=false
getAddressList().getMemoryRecordByID(146).Color=0x0c08000
getAddressList().getMemoryRecordByID(139).Active=false
getAddressList().getMemoryRecordByID(139).Color=0x0c08000
getAddressList().getMemoryRecordByID(140).Active=false
getAddressList().getMemoryRecordByID(140).Color=0x0c08000
getAddressList().getMemoryRecordByID(141).Active=false
getAddressList().getMemoryRecordByID(141).Color=0x0c08000
getAddressList().getMemoryRecordByID(148).Active=false
getAddressList().getMemoryRecordByID(148).Color=0x0c08000
getAddressList().getMemoryRecordByID(147).Active=false
getAddressList().getMemoryRecordByID(147).Color=0x0c08000
getAddressList().getMemoryRecordByID(149).Active=false
getAddressList().getMemoryRecordByID(149).Color=0x0c08000
getAddressList().getMemoryRecordByID(150).Active=false
getAddressList().getMemoryRecordByID(150).Color=0x0c08000
getAddressList().getMemoryRecordByID(151).Active=false
getAddressList().getMemoryRecordByID(151).Color=0x0c08000
getAddressList().getMemoryRecordByID(152).Active=false
getAddressList().getMemoryRecordByID(152).Color=0x0c08000
getAddressList().getMemoryRecordByID(138).Active=false
getAddressList().getMemoryRecordByID(138).Color=0x0c08000
getAddressList().getMemoryRecordByID(153).Active=false
getAddressList().getMemoryRecordByID(153).Color=0x0c08000
getAddressList().getMemoryRecordByID(154).Active=false
getAddressList().getMemoryRecordByID(154).Color=0x0c08000
getAddressList().getMemoryRecordByID(250).Active=false
getAddressList().getMemoryRecordByID(250).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMTS)
unregistersymbol(iEnableMAR)
unregistersymbol(iEnableMMA)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMPG)
unregistersymbol(iEnablePPS)
unregistersymbol(iEnableMAP)
unregistersymbol(iEnableMTA)
unregistersymbol(iEnableMAA)
unregistersymbol(iEnableMBU)
unregistersymbol(iEnableMIA)
unregistersymbol(iEnableMUI)
unregistersymbol(iEnableMFS)

unregistersymbol(iEnableMAM)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMUS)

unregistersymbol(iID)
unregistersymbol(pPlayer)
unregistersymbol(pCommander)
unregistersymbol(pProvince)
unregistersymbol(pTroop)
unregistersymbol(pTroopRTS)
unregistersymbol(pCommon)
unregistersymbol(pCamp)

unregistersymbol(iCounterP)
unregistersymbol(iCounterQ)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Minimum Money ----------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMM",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMM",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>142</ID>
          <Description>"[X] &lt;== Construction in 1 Turn  ------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(142).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(142).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"[X] &lt;== Research in 1 Turn -----------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
getAddressList().getMemoryRecordByID(143).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
getAddressList().getMemoryRecordByID(143).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>144</ID>
          <Description>"[X] &lt;== Minimum Public Order -------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(144).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(144).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>145</ID>
          <Description>"[X] &lt;== Growth in 1 Turn ---------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPG",1)
getAddressList().getMemoryRecordByID(145).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPG",0)
getAddressList().getMemoryRecordByID(145).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>146</ID>
          <Description>"[X] &lt;== Minimum Pop Surplus  -------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnablePPS",1)
getAddressList().getMemoryRecordByID(146).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnablePPS",0)
getAddressList().getMemoryRecordByID(146).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>139</ID>
          <Description>"[X] &lt;== Recover Troop Size -----------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMTS",1)
getAddressList().getMemoryRecordByID(139).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMTS",0)
getAddressList().getMemoryRecordByID(139).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"[X] &lt;== Recruitment in 1 Turn --------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAR",1)
getAddressList().getMemoryRecordByID(140).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAR",0)
getAddressList().getMemoryRecordByID(140).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"[X] &lt;== Recover Available Mercs ---------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMA",1)
getAddressList().getMemoryRecordByID(141).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMA",0)
getAddressList().getMemoryRecordByID(141).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>148</ID>
          <Description>"[X] &lt;== No Loss by Attrition ------------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMTA",1)
getAddressList().getMemoryRecordByID(148).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMTA",0)
getAddressList().getMemoryRecordByID(148).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>147</ID>
          <Description>"[X] &lt;== Unlimited Action Points --------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAP",1)
getAddressList().getMemoryRecordByID(147).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAP",0)
getAddressList().getMemoryRecordByID(147).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>149</ID>
          <Description>"[X] &lt;== Agents can Act Again  ---------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAA",1)
getAddressList().getMemoryRecordByID(149).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAA",0)
getAddressList().getMemoryRecordByID(149).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>150</ID>
          <Description>"[X] &lt;== Blessed Agents and Commanders  ---------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMBU",1)
getAddressList().getMemoryRecordByID(150).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMBU",0)
getAddressList().getMemoryRecordByID(150).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>151</ID>
          <Description>"[X] &lt;== Max Age for Agents and Commanders  --------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMIA",1)
getAddressList().getMemoryRecordByID(151).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMIA",0)
getAddressList().getMemoryRecordByID(151).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>152</ID>
          <Description>"[X] &lt;== Min Integrity for Agents / Commanders  -------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUI",1)
getAddressList().getMemoryRecordByID(152).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUI",0)
getAddressList().getMemoryRecordByID(152).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>138</ID>
          <Description>"[X] &lt;== God Mode ----------------------------------------&gt; (HK: CTRL+numeric 1 / CTRL+numeric 0)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(138).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(138).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>153</ID>
          <Description>"[X] &lt;== Unlimited Ammo --------------------------------&gt; (HK: CTRL+numeric 1 / CTRL+numeric 0)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAM",1)
getAddressList().getMemoryRecordByID(153).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAM",0)
getAddressList().getMemoryRecordByID(153).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>154</ID>
          <Description>"[X] &lt;== No Stress in Battle ----------------------------&gt; (HK: CTRL+numeric 1 / CTRL+numeric 0)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(154).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(154).Color=0x00c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>250</ID>
          <Description>"[X] &lt;== Minimum Food Surplus ---------------------&gt; (HK: NO  HOT  KEY)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFS",1)
getAddressList().getMemoryRecordByID(250).Color=0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFS",0)
getAddressList().getMemoryRecordByID(250).Color=0x00c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>197</ID>
          <Description>"[X] &lt;========================== Player  Faction Info ========================"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>198</ID>
              <Description>"Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>8</Offset>
                <Offset>810</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>199</ID>
              <Description>"Current Treasury Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>7DC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>171</ID>
          <Description>"[X] &lt;================== Selected Commander/Agent Info ====================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>172</ID>
              <Description>"Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>8</Offset>
                <Offset>218</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>173</ID>
              <Description>"CUNNING Initial Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>2FC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>174</ID>
              <Description>"ZEAL Initial Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>300</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>175</ID>
              <Description>"AUTHORITY Initial Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>304</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>176</ID>
              <Description>"Current XP ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>424</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>245</ID>
              <Description>"Available Skill Points ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>418</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>177</ID>
              <Description>"Current Influence Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>4F8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>195</ID>
              <Description>"Current Integrity Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>Float</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>3E4</Offset>
                <Offset>0</Offset>
                <Offset>1D4</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>234</ID>
          <Description>"[X] &lt;======================== Selected Army Info =========================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>235</ID>
              <Description>"Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>80</Offset>
                <Offset>D0</Offset>
                <Offset>0</Offset>
                <Offset>0</Offset>
                <Offset>38</Offset>
                <Offset>0</Offset>
                <Offset>1DC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>242</ID>
              <Description>"Current XP ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>D0</Offset>
                <Offset>0</Offset>
                <Offset>0</Offset>
                <Offset>38</Offset>
                <Offset>0</Offset>
                <Offset>1DC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>243</ID>
              <Description>"Available Skill Points ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>28</Offset>
                <Offset>D0</Offset>
                <Offset>0</Offset>
                <Offset>0</Offset>
                <Offset>38</Offset>
                <Offset>0</Offset>
                <Offset>1DC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>244</ID>
              <Description>"Current Integrity Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>Float</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>3E4</Offset>
                <Offset>0</Offset>
                <Offset>0</Offset>
                <Offset>38</Offset>
                <Offset>0</Offset>
                <Offset>1DC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>187</ID>
          <Description>"[X] &lt;====================== Selected  Province  Info ========================"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>188</ID>
              <Description>"Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pProvince</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>8</Offset>
                <Offset>208</Offset>
                <Offset>80</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>193</ID>
              <Description>"Current Population Surplus Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pProvince</Address>
              <Offsets>
                <Offset>240</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>196</ID>
              <Description>"Current Growth Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pProvince</Address>
              <Offsets>
                <Offset>244</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>232</ID>
              <Description>"Current Public Order Value ==&gt; (Affected on next turn)"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pProvince</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>98</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>200</ID>
          <Description>"[X] &lt;===================== Selected Encampment Info ======================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>404080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>201</ID>
              <Description>"Name"</Description>
              <LastState Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>String</VariableType>
              <Length>32</Length>
              <Unicode>1</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>pCamp</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>8</Offset>
                <Offset>6C</Offset>
                <Offset>D0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>202</ID>
              <Description>"Current Population Surplus Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCamp</Address>
              <Offsets>
                <Offset>4</Offset>
                <Offset>C</Offset>
                <Offset>3EC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>203</ID>
              <Description>"Current Growth Value ==&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCamp</Address>
              <Offsets>
                <Offset>8</Offset>
                <Offset>C</Offset>
                <Offset>3EC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20151210</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Attila - Total War
 Game Version  : 1.5.0-8856
 Game Sponsor  : fennix102
 Process Name  : Atilla.exe
 Script Version: 3.0
 CE Version    : 6.4
 Release date  : 10-Dec-2015
 Author        : Recifense
 History:
 21-Feb-15: First Release
 24-Feb-15: Fixed a bug related with attrition (v1.1)
 06-Mar-15: Release for version 1.1.0-4884 (v2.0)
 15-Mar-15: Fixed recruitment in 1 turn for ships (v2.1)
 25-Mar-15: Release for version 1.2.0-5282
 21-Apr-15: Release for version 1.2.1-5692
 02-May-15: Release for version 1.2.1-5816
 26-Jun-15: Release for version 1.3.0-6617
 04-Jul-15: Release for version 1.3.0-6708
 15-Sep-15: Release for version 1.4.0-7703
 27-Sep-15: Added a new feature (MFS)
 01-Oct-15: Release for version 1.4.1-7952
 10-Dec-15: Release for version 1.5.0-8856
 Features:
 - Minimum Money                     [1]
 - Unlimited Action Points           [2]
   - Agent
   - Troop
   - Army/Fleet Commander
 - Recover Troop Size on Move        [3]
 - Blessed Units:                    [4]
   - Cunning   (6)
   - Zeal      (6)
   - Authority (6)
 - Max. Age    (40)                  [5]
 - Troop Recruitment in 1 Turn       [6]
 - Recover Available Mercenaries     [7]
 - Construction in 1 Turn            [8]
 - Research in 1 Turn                [8]
 - Unit Can Act again:               [9]
   - Agent
   - Army/Fleet Commander
 - Minimum Integrity:                [A]
   - Agent
   - Army/Fleet Commander
   - Encampment
 - Minimum Public Order (64)         [B]
 - No Loss by Attrition              [C]
 - Minimum Food Surplus (640) (new)  [G]
 - God Mode                          [D]
    - Ground Battle
    - Sea Battle
  - Unlimited Ammo                   [E]
  - No Stress in Battle              [F]
 - Some Pointers
===========================================
[1] For human player only (not AI);
[2] For player's units (not AI's);
[3] For player's troops (not AI's);
[4] For Human player's Agents and Commanders (not AI's);
[5] For Human player's Agents and Commanders (not AI's);
[6] For human player only (not AI);
[7] For human player's Army/Fleet only (not AI);
[8] For human player only (not AI);
[9] For human player's Agent (not AI);
[A] For Human player's Agents and Commanders (not AI's);
[B] For player's settlements only (not AI's);
[C] For human player's Army/Fleet only (not AI);
[D] For human player's Army/Fleet only (not AI);
[E] For human player's Army/Fleet only (not AI);
[F] For human player's Army/Fleet only (not AI);
[G] For human player only (not AI);
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "Attila.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  MM/C1T/R1T/MPO/G1T/MPS cheats;
CTRL+End       = Disable MM/C1T/R1T/MPO/G1T/MPS cheats;
-----------
CTRL+PageUp    = Enable  RTS/R1T/RAM/NLA cheats;
CTRL+PageDown  = Disable RTS/R1T/RAM/NLA cheats;
-----------
CTRL+Insert    = Enable  UAP/AAA/BAC/MAAC/MIAC cheats;
CTRL+Delete    = Disable UAP/AAA/BAC/MAAC/MIAC cheats;
-----------
CTRL+numeric 1 = Enable  GM/UA/NSB cheats;
CTRL+numeric 0 = Disable GM/UA/NSB cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
