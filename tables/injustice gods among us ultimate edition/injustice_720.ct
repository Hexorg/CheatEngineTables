<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>95</ID>
      <Description>"Character swap"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
aobscanmodule(CharacterReplacement_Aob,Injustice.exe,8B C8 8B 46 08 52)
registersymbol(CharacterReplacement_Aob)


alloc(NewMem,1024)
label(CharacterReplacement)
label(CharacterReplacement_HandlePlayer2)
label(CharacterReplacement_Exit)
label(CharacterReplacement_Return)

label(ReplacementCharacter1)
label(ReplacementCharacter2)
registersymbol(ReplacementCharacter1)
registersymbol(ReplacementCharacter2)


CharacterReplacement_Aob-5:
jmp CharacterReplacement
CharacterReplacement_Return:

NewMem:
CharacterReplacement:
  push 0               //original code
  push 0               //original code
  cmp edx,3
  je short CharacterReplacement_HandlePlayer2
    cmp byte [ReplacementCharacter1],' '
    je short CharacterReplacement_Exit
      mov ecx, ReplacementCharacter1
      jmp short CharacterReplacement_Exit
  CharacterReplacement_HandlePlayer2:
    cmp byte [ReplacementCharacter2],' '
    je short CharacterReplacement_Exit
      mov ecx,ReplacementCharacter2
      jmp short CharacterReplacement_Exit
  CharacterReplacement_Exit:
  push ecx             //original code
jmp CharacterReplacement_Return

ReplacementCharacter1:
db 'char_solomongrundy',0
db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 //leave that padding
ReplacementCharacter2:
db ' ',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


[disable]
unregistersymbol(CharacterReplacement_Aob)
unregistersymbol(ReplacementCharacter1)
unregistersymbol(ReplacementCharacter2)
dealloc(NewMem)

CharacterReplacement_Aob-5:
push 0
push 0
push ecx

{
01BC3A9F     CC             INT3
01BC3AA0   . A1 ECD85202    MOV EAX,DWORD PTR DS:[252D8EC]
01BC3AA5   . 8B0D F8D85202  MOV ECX,DWORD PTR DS:[252D8F8]
01BC3AAB   . 50             PUSH EAX                                          ; /Arg3 =&gt; 00000002
01BC3AAC   . 51             PUSH ECX                                          ; |Arg2 =&gt; 00000001
01BC3AAD   . 8B0D CC8F1F04  MOV ECX,DWORD PTR DS:[41F8FCC]                    ; |
01BC3AB3   . 6A 00          PUSH 0                                            ; |Arg1 = 00000000
01BC3AB5   . E8 D629C3FF    CALL Injustic.017F6490                            ; \Injustic.00766490
01BC3ABA   . 85C0           TEST EAX,EAX
01BC3ABC   . 74 2B          JE SHORT Injustic.01BC3AE9
01BC3ABE   . 8B15 CC8F1F04  MOV EDX,DWORD PTR DS:[41F8FCC]
01BC3AC4   . 8B52 4C        MOV EDX,DWORD PTR DS:[EDX+4C]
01BC3AC7   . 8B4A 08        MOV ECX,DWORD PTR DS:[EDX+8]
01BC3ACA   . 8B52 04        MOV EDX,DWORD PTR DS:[EDX+4]
01BC3ACD   . 56             PUSH ESI
01BC3ACE   . 8B30           MOV ESI,DWORD PTR DS:[EAX]
01BC3AD0   . 6A FF          PUSH -1
01BC3AD2   . 6A 00          PUSH 0        &lt;-hook point
01BC3AD4   . 6A 00          PUSH 0
01BC3AD6   . 51             PUSH ECX     //ecx=fighter package
01BC3AD7   . 8BC8           MOV ECX,EAX  &lt;-aob
01BC3AD9   . 8B46 08        MOV EAX,DWORD PTR DS:[ESI+8]
01BC3ADC   . 52             PUSH EDX      //edx=2 if we handle player 1, 3 if loading player 2
01BC3ADD   . FFD0           CALL EAX    //load player 1 and 2
01BC3ADF   . 8B0D CC8F1F04  MOV ECX,DWORD PTR DS:[41F8FCC]
01BC3AE5   . 8941 28        MOV DWORD PTR DS:[ECX+28],EAX
01BC3AE8   . 5E             POP ESI
01BC3AE9   &gt; C3             RETN
01BC3AEA     CC             INT3
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>112</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"Player 1 character"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>30</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>ReplacementCharacter1</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"Player 2 character"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>30</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>ReplacementCharacter2</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"Force loading specific stage"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
aobscanmodule(StageReplacement_Aob,Injustice.exe,50 8B 45 08 50 8B CF FF D2 46 3B F3)
registersymbol(StageReplacement_Aob)


alloc(NewMem,300)
label(StageReplacement)
label(StageReplacement_Exit)
label(StageReplacement_Return)

label(ReplacementStage)
registersymbol(ReplacementStage)


StageReplacement_Aob-6:
jmp StageReplacement
nop
StageReplacement_Return:

NewMem:
StageReplacement:
  push -1              //original code
  push 0               //original code
  push 0               //original code

  cmp byte [ReplacementStage],' '
  je short StageReplacement_Exit
    //check if we are loading a BGND_something
    //has to be a case INsensitive check
    push ebx             //save ebx
    mov ebx, dword [eax]
    and ebx,DFDFDFDF    //put in uppercase
    cmp ebx,'BGND'
    pop ebx             //restore ebx
    jne StageReplacement_Exit //jump if we're not loading a bgnd_package-&gt;don't replace filename
      mov eax, ReplacementStage
  StageReplacement_Exit:
jmp StageReplacement_Return

ReplacementStage:
db 'BGND_DesignTest',0



[disable]
unregistersymbol(StageReplacement_Aob)
unregistersymbol(ReplacementStage)
dealloc(NewMem)

StageReplacement_Aob-6:
push -1
push 0
push 0


{
01848671   33F6             XOR ESI,ESI
01848673   85DB             TEST EBX,EBX
01848675   74 23            JE SHORT Injustic.0184869A
01848677   8B45 0C          MOV EAX,DWORD PTR SS:[EBP+C]
0184867A   8B04B0           MOV EAX,DWORD PTR DS:[EAX+ESI*4]
0184867D   85C0             TEST EAX,EAX
0184867F   74 14            JE SHORT Injustic.01848695
01848681   8B17             MOV EDX,DWORD PTR DS:[EDI]
01848683   8B52 08          MOV EDX,DWORD PTR DS:[EDX+8]
01848686   6A FF            PUSH -1       &lt;-hook point
01848688   6A 00            PUSH 0
0184868A   6A 00            PUSH 0
0184868C   50               PUSH EAX      &lt;-aob start
0184868D   8B45 08          MOV EAX,DWORD PTR SS:[EBP+8]
01848690   50               PUSH EAX
01848691   8BCF             MOV ECX,EDI
01848693   FFD2             CALL EDX      &lt;-package loader=Injustice.exe+A2F100
01848695   46               INC ESI
01848696   3BF3             CMP ESI,EBX
01848698  ^72 DD            JB SHORT Injustic.01848677
0184869A   5F               POP EDI
0184869B   5E               POP ESI
0184869C   5B               POP EBX
0184869D   8BE5             MOV ESP,EBP
0184869F   5D               POP EBP
018486A0   C2 1400          RETN 14
018486A3   84DB             TEST BL,BL
018486A5  ^75 9A            JNZ SHORT Injustic.01848641
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>112</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>101</ID>
          <Description>"Play on this stage"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>30</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>ReplacementStage</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>98</ID>
      <Description>"No decreasing combo damage"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
aobscanmodule(DecreasingComboDamagePatch,Injustice.exe,F3 0F 10 89 E8 02 00 00 F3 0F 10 45 08)
registersymbol(DecreasingComboDamagePatch)

DecreasingComboDamagePatch-3:
ret 4

[disable]
unregistersymbol(DecreasingComboDamagePatch)

DecreasingComboDamagePatch-3:
push ebp
mov ebp,esp
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>102</ID>
      <Description>"Log FNV1 hashes"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(FNV1Hasher_aob,85 D2 74 14 8B 89 AC 00 00 00)
registersymbol(FNV1Hasher_aob)

alloc(code,2048)
//places
label(LogHash)
label(LogHash_Return)
//data
label(FileName)
label(LogFormat)
label(LogLine)
label(DummyVariable)



FNV1Hasher_aob-5:
jmp LogHash
LogHash_Return:

code:
LogHash:
  pushad                    //save all registers
  push dword [esp+30]       //the hashed string
  push esi                  //the hash
  push LogFormat
  push LogLine
  call msvcrt.sprintf
  mov ebx,eax //store the length of LogLine in ebx
  add esp,10 //pop all sprintf's arguments
  //open logfile
  push 0
  push 80 //FILE_ATTRIBUTE_NORMAL
  push 4  //OPEN_ALWAYS
  push 0
  push 3 //FILE_SHARE_READ | FILE_SHARE_WRITE -&gt; allow other programs to read and write
  push C //GENERIC_READ | GENERIC_WRITE
  push FileName
  call CreateFileA
  //move to its end
  push eax //save the file handle
  push 2 //FILE_END
  push 0
  push 0
  push eax
  call SetFilePointer
  mov eax,dword [esp] //restore the file handle
  //log the new line
  push 0
  push DummyVariable //lpNumberOfBytesWritten
  push ebx
  push LogLine
  push eax
  call WriteFile
  //close the file
  //pop eax //restore the file handle
  //push eax
  call CloseHandle
  popad

  //original code
  MOV EDX,DWORD [ECX+24]
  XOR EAX,EAX
jmp LogHash_Return


DummyVariable:
dd 0
FileName:
db 'FNV1Log.txt',00
LogFormat:
db '%.8X = %s',0d,0a,00
LogLine:

[DISABLE]
FNV1Hasher_aob-5:
MOV EDX,DWORD [ECX+24]
XOR EAX,EAX


unregistersymbol(FNV1Hasher_aob)
dealloc(code)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>122</ID>
      <Description>"Dynamic gamespeed (60 frame avg)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(AVERAGEDFRAMES,3C)
define(AVERAGEDFRAMESx1000,60000) //write here the result of 1000*AVERAGEDFRAMES
alloc(SpeedAdjuster_Hook,300)
aobscanmodule(SpeedAdjuster_AOB,Injustice.exe,8B 48 68 51 68 * * * * 68)
aobscanmodule(PointerBase_AOB,Injustice.exe,56 8B 31 33 D2 57)
registersymbol(SpeedAdjuster_AOB)

label(SpeedAdjuster_WriteFrameDelayArrayIndex)
label(SpeedAdjuster_ContinueSumming)
label(PrevTickCount)
label(AveragedFramesx1000)
label(FrameDelayArrayIndex)
label(FrameDelayArray)
label(GamespeedPointerBase)
registersymbol(GamespeedPointerBase)

{
finds
  Injustice.exe+4A817B - 56                    - push esi
  Injustice.exe+4A817C - 8B 31                 - mov esi,[ecx]
  Injustice.exe+4A817E - 33 D2                 - xor edx,edx
  Injustice.exe+4A8180 - 57                    - push edi
  Injustice.exe+4A8181 - 8B 3D D03B9E03        - mov edi,[Injustice.exe+3073BD0]
  Injustice.exe+4A8187 - 89 5D FC              - mov [ebp-04],ebx
  Injustice.exe+4A818A - 85 DB                 - test ebx,ebx
and gets "Injustice.exe+3073BD0" from there
}
[PointerBase_AOB+8]:
GamespeedPointerBase:


SpeedAdjuster_AOB-5:
call SpeedAdjuster_Hook


SpeedAdjuster_Hook:
  pushad                         //save all registers
       //get time elapsed since last frame
  mov ebx, dword [PrevTickCount] //PrevTickCount=date when the previous frame was displayed
  call GetTickCount
  mov dword [PrevTickCount],eax //update PrevTickCount
  sub eax, ebx                  //get the time elapsed since last frame
       //store that delay in FrameDelayArray
  mov ebx,dword [FrameDelayArrayIndex] //load the index of the last FrameDelayArray we wrote
  inc ebx                              //increment it
  cmp ebx,AVERAGEDFRAMES               //but make sure it stays below AVERAGEDFRAMES
  jb SpeedAdjuster_WriteFrameDelayArrayIndex
    xor ebx,ebx
  SpeedAdjuster_WriteFrameDelayArrayIndex:
  mov dword [FrameDelayArrayIndex],ebx //update FrameDelayArrayIndex
  mov [FrameDelayArray+ebx*4],eax      //update FrameDelayArray
       //get the time it took to render the last 8 frames
  mov ebx,FrameDelayArray
  xor eax,eax
  SpeedAdjuster_ContinueSumming:
  add eax,dword [ebx]
  add ebx,4
  cmp ebx,FrameDelayArray+AVERAGEDFRAMES*4
  jb SpeedAdjuster_ContinueSumming
       //calculate new game speed
  imul eax,eax,#60              //multiply time_elapsed_since_last_frame by 60 (desired FPS)
  push eax
  fild dword [esp]              //convert time_elapsed...*60 into a float
  add esp,4                     //undo the previous push
  fdiv dword [AveragedFramesx1000]      //divide it by 1000(milisec per second)*8(number of frames used to calculate average frame delay)

  mov eax, dword [GamespeedPointerBase] //walk down the pointer to the game's speed
  mov eax, dword [eax+48]
  mov eax, dword [eax+38]
  mov eax, dword [eax]
  fstp dword [eax+2dc]          //update gamespeed
  popad                         //restore all registers
retn

PrevTickCount:
dd 0
AveragedFramesx1000:
dd (float)AVERAGEDFRAMESx1000
FrameDelayArrayIndex:
dd 0
FrameDelayArray: //holds the time it took to render the last 8 frames
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0

 
 
[DISABLE]
dealloc(SpeedAdjuster_Hook)
unregistersymbol(SpeedAdjuster_AOB)
unregistersymbol(GamespeedPointerBase)

SpeedAdjuster_AOB-5:
nop               //actually the real original code is MOV EAX,DWORD [injustice.exe+some]
nop               //but is already set to that value 3 lines before
nop
nop
nop
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>123</ID>
          <Description>"Current gamespeed"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>GamespeedPointerBase</Address>
          <Offsets>
            <Offset>2DC</Offset>
            <Offset>0</Offset>
            <Offset>38</Offset>
            <Offset>48</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"Hackng leftovers"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Selection grid properties"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>105</ID>
              <Description>"break execution at Injustice.exe+A496E3 "</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>106</ID>
              <Description>"before using the 3 below"</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>107</ID>
              <Description>"Grid cell count"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>Injustice.exe+307EEAC </Address>
              <Offsets>
                <Offset>4</Offset>
                <Offset>4C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>108</ID>
              <Description>"height(?)"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>Injustice.exe+307EEAC </Address>
              <Offsets>
                <Offset>FFFFFFF0</Offset>
                <Offset>4C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>109</ID>
              <Description>"width"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>Injustice.exe+307EEAC </Address>
              <Offsets>
                <Offset>C</Offset>
                <Offset>4C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Game speed (true pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>Injustice.exe+3069AB0</Address>
          <Offsets>
            <Offset>2DC</Offset>
            <Offset>0</Offset>
            <Offset>38</Offset>
            <Offset>48</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"Number of frames elapsed (true pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000068"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>Injustice.exe+30CAA1C</Address>
          <Offsets>
            <Offset>68</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
