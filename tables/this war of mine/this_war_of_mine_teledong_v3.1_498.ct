<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>73389</ID>
      <Description>"[Ctrl+F1/Shift+F1] = Stop Day Time"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTdayTime)
aobscanmodule(INJECTdayTime,This War of Mine.exe,D9 41 10 56 D9 E8)
label(returnStopDayTime)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memStopDayTimeCode, $1000)
alloc(memStopDayTimeData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memStopDayTimeData:

  // Register Cheat Activate Boolean
  registersymbol(bStopDayTime)
  label(bStopDayTime)
  bStopDayTime:
    dd 1

  // Register DayTime Base Pointer Symbol
  registersymbol(pDayTimeBase)
  label(pDayTimeBase)
  pDayTimeBase:
    dd 0

  // Register Temporary EAX Store Variable
  registersymbol(tmpDayTimeEAX)
  label(tmpDayTimeEAX)
  tmpDayTimeEAX:
    dd 0

  // Register DayTime Save Float
  registersymbol(fDayTime)
  label(fDayTime)
  fDayTime:
    dd (float)0.0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memStopDayTimeCode:

  label(lblStopDayTimeSet)
  label(lblStopDayTimeSetExit)
  label(lblResetSavedDayTimeExit)
  label(lblStopDayTimeExit)

  mov [pDayTimeBase], ecx             // Update DayTimeBase

  cmp dword ptr [bStopDayTime], 0     // Is it Working?
  je lblResetSavedDayTimeExit         // No - Go to Normal Function

  mov [tmpDayTimeEAX], eax            // Store EAX Value
  mov eax, [fDayTime]                 // Bring 'fDayTime' to EAX

  cmp eax, (float)0.0                 // 'fDayTime' Already Set?
  jne lblStopDayTimeSetExit           // Yes - Stop at Set Time

  cmp [ecx+10], (float)0.99           // If Init Timevalue is 1? (Starting Bug)
  jl lblStopDayTimeSet                // No - Working Normal Cheat.

  mov [ecx+10], (float)0.0            // Yes - Set Time to 0

  lblStopDayTimeSet:
  mov eax, [ecx+10]                   // No - Set Stop Time
  mov [fDayTime], eax                 // Save current time to 'fDayTime'

  lblStopDayTimeSetExit:
  mov [ecx+10], eax                   // Stop Day Time to Current Time Value

  mov eax, [tmpDayTimeEAX]            // Restore EAX Value
  jmp lblStopDayTimeExit              // End Cheat code without reset 'fDayTime'

  lblResetSavedDayTimeExit:
  mov [fDayTime], (float)0.0          // Reset 'fDayTime' if 'bStopDayTime' is not Activated.
  lblStopDayTimeExit:
  fld dword ptr [ecx+10]              // Do Original Code where Injected Location
  push esi
  fld1
  jmp returnStopDayTime               // Back to Next to Injected Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTdayTime:
  jmp memStopDayTimeCode
  nop
returnStopDayTime:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTdayTime:
  fld dword ptr [ecx+10]
  push esi
  fld1
unregistersymbol(INJECTdayTime)
{
// ORIGINAL CODE
This War of Mine.exe+29970F - CC                    - int 3
This War of Mine.exe+299710 - 55                    - push ebp
This War of Mine.exe+299711 - 8B EC                 - mov ebp,esp
This War of Mine.exe+299713 - A1 B4639501           - mov eax,["This War of Mine.exe"+5863B4]
This War of Mine.exe+299718 - 8B 15 B0639501        - mov edx,["This War of Mine.exe"+5863B0]
This War of Mine.exe+29971E - 83 EC 0C              - sub esp,0C
This War of Mine.exe+299721 - 3B C2                 - cmp eax,edx
This War of Mine.exe+299723 - 73 08                 - jae "This War of Mine.exe"+29972D
This War of Mine.exe+299725 - 83 C0 18              - add eax,18
This War of Mine.exe+299728 - A3 B4639501           - mov ["This War of Mine.exe"+5863B4],eax
// ---------- INJECTING HERE ----------
This War of Mine.exe+29972D - D9 41 10              - fld dword ptr [ecx+10]
This War of Mine.exe+299730 - 56                    - push esi
This War of Mine.exe+299731 - D9E8                  - fld1
// ---------- DONE INJECTING  ----------
This War of Mine.exe+299733 - 89 55 F8              - mov [ebp-08],edx
This War of Mine.exe+299736 - D8E1                  - fsub st(0),st(1)
This War of Mine.exe+299738 - 57                    - push edi
This War of Mine.exe+299739 - DB 45 F8              - fild dword ptr [ebp-08]
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(bStopDayTime)
unregistersymbol(pDayTimeBase)
unregistersymbol(tmpDayTimeEAX)
unregistersymbol(fDayTime)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memStopDayTimeCode)
dealloc(memStopDayTimeData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>112</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>112</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73406</ID>
          <Description>"Is It Working?"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0: No
1: Yes
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="0FA81000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bStopDayTime</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>73397</ID>
          <Description>"Day Time Value"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>pDayTimeBase</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73390</ID>
      <Description>"[Ctrl+F2/Shift+F2] = Stop Night Time"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTnightTime)
aobscanmodule(INJECTnightTime,This War of Mine.exe,F3 0F 10 46 10 F3 0F 58)
label(returnStopNightTime)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memStopNightTimeCode, $1000)
alloc(memStopNightTimeData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memStopNightTimeData:

  // Register Cheat Activate Boolean
  registersymbol(bStopNightTime)
  label(bStopNightTime)
  bStopNightTime:
    dd 1

  // Register NightTimeBase Pointer Symbol
  registersymbol(pNightTimeBase)
  label(pNightTimeBase)
  pNightTimeBase:
    dd 0

  // Register Temporary EAX Store Variable
  registersymbol(tmpNightTimeEAX)
  label(tmpNightTimeEAX)
  tmpNightTimeEAX:
    dd 0

  // Register NightTime Save Float
  registersymbol(fNightTime)
  label(fNightTime)
  fNightTime:
    dd (float)0.0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memStopNightTimeCode:

  label(lblStopNightTimeSet)
  label(lblStopNightTimeSetExit)
  label(lblResetSavedNightTimeExit)
  label(lblStopNightTimeExit)

  mov [pNightTimeBase], esi               // Update NightTimeBase

  cmp dword ptr [bStopNightTime], 0       // Is it Working?
  je lblResetSavedNightTimeExit           // No - Go to Normal Function

  mov [tmpNightTimeEAX], eax              // Store EAX Value
  mov eax, [fNightTime]                   // Bring 'fNightTime' to EAX

  cmp eax, (float)0.0                     // 'fNightTime' Already Set?
  jne lblStopNightTimeSetExit             // Yes - Stop at Set Time

  cmp [esi+10], (float)359.9              // If Init Timevalue is 360? (Starting Bug)
  jl lblStopNightTimeSet                  // No - Working Normal Cheat.

  mov [esi+10], (float)0.0                // Yes - Set Time to 0

  lblStopNightTimeSet:
  mov eax, [esi+10]                       // No - Set Stop Time
  mov [fNightTime], eax                   // Save current time to 'fNightTime'

  lblStopNightTimeSetExit:
  mov [esi+10], eax                       // Stop Day Time to Current Time Value

  mov eax, [tmpNightTimeEAX]              // Restore EAX Value
  jmp lblStopNightTimeExit                // End Cheat code without reset 'fNightTime'

  lblResetSavedNightTimeExit:
  mov [fNightTime], (float)0.0            // Reset 'fNightTime' if 'bStopNightTime' is not Activated.
  lblStopNightTimeExit:
  movss xmm0,[esi+10]                     // Do Original Code where Injected Location
  jmp returnStopNightTime                 // Back to Next to Injected Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTnightTime:
  jmp memStopNightTimeCode
returnStopNightTime:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTnightTime:
  movss xmm0,[esi+10]
unregistersymbol(INJECTnightTime)
{
// ORIGINAL CODE
This War of Mine.exe+26F42F - CC                    - int 3
This War of Mine.exe+26F430 - F3 0F10 05 989C8C01   - movss xmm0,["This War of Mine.exe"+4F9C98]
This War of Mine.exe+26F438 - 56                    - push esi
This War of Mine.exe+26F439 - 8B F1                 - mov esi,ecx
This War of Mine.exe+26F43B - F3 0F58 46 18         - addss xmm0,[esi+18]
This War of Mine.exe+26F440 - F3 0F11 46 18         - movss [esi+18],xmm0
This War of Mine.exe+26F445 - F3 0F10 46 14         - movss xmm0,[esi+14]
This War of Mine.exe+26F44A - F3 0F58 05 789C8C01   - addss xmm0,["This War of Mine.exe"+4F9C78]
This War of Mine.exe+26F452 - F3 0F11 46 14         - movss [esi+14],xmm0
// ---------- INJECTING HERE ----------
This War of Mine.exe+26F457 - F3 0F10 46 10         - movss xmm0,[esi+10]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+26F45C - F3 0F58 05 989C8C01   - addss xmm0,["This War of Mine.exe"+4F9C98]
This War of Mine.exe+26F464 - 57                    - push edi
This War of Mine.exe+26F465 - F3 0F11 46 10         - movss [esi+10],xmm0
This War of Mine.exe+26F46A - F3 0F10 46 0C         - movss xmm0,[esi+0C]
This War of Mine.exe+26F46F - F3 0F58 05 789C8C01   - addss xmm0,["This War of Mine.exe"+4F9C78]
This War of Mine.exe+26F477 - 68 FC4F8101           - push "This War of Mine.exe"+444FFC
This War of Mine.exe+26F47C - 68 F86B9501           - push "This War of Mine.exe"+586BF8
This War of Mine.exe+26F481 - F3 0F11 46 0C         - movss [esi+0C],xmm0
This War of Mine.exe+26F486 - E8 25FCFFFF           - call "This War of Mine.exe"+26F0B0
This War of Mine.exe+26F48B - A1 9C619501           - mov eax,["This War of Mine.exe"+58619C]
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(bStopNightTime)
unregistersymbol(pNightTimeBase)
unregistersymbol(tmpNightTimeEAX)
unregistersymbol(fNightTime)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memStopNightTimeCode)
dealloc(memStopNightTimeData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>113</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>113</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73405</ID>
          <Description>"Is It Working?"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0: No
1: Yes
</DropDownList>
          <LastState Value="0" Activated="0" RealAddress="13B21000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bStopNightTime</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>73398</ID>
          <Description>"Night Time Value"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000010"/>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>pNightTimeBase</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73391</ID>
      <Description>"[Ctrl+F3/Shift+F3] = Immediate Action &amp; Crafting"</Description>
      <Options moBindActivation="1"/>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTfastCraft)
registersymbol(INJECTfastAction)
aobscanmodule(INJECTfastCraft,This War of Mine.exe,F3 0F 10 46 30 F3 0F 58)
aobscanmodule(INJECTfastAction,This War of Mine.exe,89 10 8B 51 04 89 50 04 B8)
label(returnFastCraft)
label(returnFastAction)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memFastProcessCode, $1000)
alloc(memFastProcessData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memFastProcessData:

  // Register Temporary EAX Store Variable
  registersymbol(bFastAction)
  label(bFastAction)
  bFastAction:
    dd 1

  // Register Temporary EAX Store Variable
  registersymbol(pAction)
  label(pAction)
  pAction:
    dd 0

  // Register Temporary Progress Store
  registersymbol(fProgress)
  label(fProgress)
  fProgress:
    dd (float)0.0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memFastProcessCode:

  // Label for Separate Code Section
  label(codeFastCraft)
  label(codeFastAction)

  //////////////////////////////////////////////////////////////////////////////
  // Fast Crafting
  codeFastCraft:

  movss xmm1, [esi+34]             // Do Crafting to Complete Instantly

  mov [esi+40], (float)0.0         // Do SecondaryCrafting to Complete Instantly

  movss xmm0,[esi+30]              // Do Original Code where Injected Location
  jmp returnFastCraft              // Back to Next to Injected Location

  //////////////////////////////////////////////////////////////////////////////
  // Fast Action
  codeFastAction:

  label(lblFastActionCheck)
  label(lblFastActionExit)
  // Check Some Normal Action Status (this value shouldn't change to cheat)
  cmp dword ptr [eax-08],#4
  jne lblFastActionExit
  cmp dword ptr [eax+04],#3
  jne lblFastActionExit
  cmp dword ptr [eax+0C],#4
  jne lblFastActionExit

  mov [eax], edx                   // Load Action Variable

  cmp dword ptr [bFastAction], #0  // Is it Working?
  je lblFastActionCheck            // No - do Check 'pAction' Section.

  mov [pAction],eax                // Yes - Save EAX to 'pAction'
  mov [bFastAction], #0            // Temporary change 'bFastAction' to "No"

  lblFastActionCheck:
  cmp dword ptr [pAction], eax     // Check pAction to equal EAX
  jne lblFastActionExit            // No - do Normal Code

  fld1                             // Yes - set Prograss to original + 1.0
  fadd dword ptr [eax]
  fstp dword ptr [fProgress]
  mov edx, [fProgress]             // Save original + 1.0 to EDX

  lblFastActionExit:
  mov [eax], edx                   // Do Original Code where Injected Location
  mov edx, [ecx+04]
  jmp returnFastAction             // Back to Next to Injected Location


////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTfastCraft:
  jmp codeFastCraft
returnFastCraft:

INJECTfastAction:
  jmp codeFastAction
returnFastAction:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTfastCraft:
  movss xmm0,[esi+30]
unregistersymbol(INJECTfastCraft)
{
// ORIGINAL CODE
This War of Mine.exe+2AA606 - 83 7E 24 03           - cmp dword ptr [esi+24],03
This War of Mine.exe+2AA60A - 0F85 99000000         - jne "This War of Mine.exe"+2AA6A9
This War of Mine.exe+2AA610 - F3 0F10 56 34         - movss xmm2,[esi+34]
This War of Mine.exe+2AA615 - 0F57 DB               - xorps xmm3,xmm3
This War of Mine.exe+2AA618 - 0F2F D3               - comiss xmm2,xmm3
This War of Mine.exe+2AA61B - 76 3B                 - jna "This War of Mine.exe"+2AA658
This War of Mine.exe+2AA61D - F3 0F10 4D 08         - movss xmm1,[ebp+08]
This War of Mine.exe+2AA622 - 0F2F CB               - comiss xmm1,xmm3
This War of Mine.exe+2AA625 - 73 08                 - jae "This War of Mine.exe"+2AA62F
This War of Mine.exe+2AA627 - F3 0F10 0D 989C8C01   - movss xmm1,["This War of Mine.exe"+4F9C98]
// ---------- INJECTING HERE ----------
This War of Mine.exe+2AA62F - F3 0F10 46 30         - movss xmm0,[esi+30]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+2AA634 - F3 0F58 C1            - addss xmm0,xmm1
This War of Mine.exe+2AA638 - F3 0F10 0D D80B8501   - movss xmm1,["This War of Mine.exe"+480BD8]
This War of Mine.exe+2AA640 - F3 0F11 46 30         - movss [esi+30],xmm0
This War of Mine.exe+2AA645 - F3 0F5E C2            - divss xmm0,xmm2
This War of Mine.exe+2AA649 - 0F2F C1               - comiss xmm0,xmm1
This War of Mine.exe+2AA64C - 76 03                 - jna "This War of Mine.exe"+2AA651
This War of Mine.exe+2AA64E - 0F28 C1               - movaps xmm0,xmm1
This War of Mine.exe+2AA651 - F3 0F11 46 2C         - movss [esi+2C],xmm0
This War of Mine.exe+2AA656 - EB 0D                 - jmp "This War of Mine.exe"+2AA665
This War of Mine.exe+2AA658 - F3 0F10 0D D80B8501   - movss xmm1,["This War of Mine.exe"+480BD8]
}

INJECTfastAction:
  mov [eax],edx
  mov edx,[ecx+04]
unregistersymbol(INJECTfastAction)
{
// ORIGINAL CODE - INJECTION POINT: "This War of Mine.exe"+37B8CB

This War of Mine.exe+382321 - 51                    - push ecx
This War of Mine.exe+382322 - E8 D9FBFFFF           - call "This War of Mine.exe"+381F00
This War of Mine.exe+382327 - 8B F8                 - mov edi,eax
This War of Mine.exe+382329 - 83 C4 0C              - add esp,0C
This War of Mine.exe+38232C - 85 FF                 - test edi,edi
This War of Mine.exe+38232E - 75 5E                 - jne "This War of Mine.exe"+38238E
This War of Mine.exe+382330 - 8B 7D F8              - mov edi,[ebp-08]
This War of Mine.exe+382333 - 8B 45 F4              - mov eax,[ebp-0C]
This War of Mine.exe+382336 - 8B 4D 14              - mov ecx,[ebp+14]
This War of Mine.exe+382339 - 8B 11                 - mov edx,[ecx]
// ---------- INJECTING HERE ----------
This War of Mine.exe+38233B - 89 10                 - mov [eax],edx
This War of Mine.exe+38233D - 8B 51 04              - mov edx,[ecx+04]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+382340 - 89 50 04              - mov [eax+04],edx
This War of Mine.exe+382343 - B8 04000000           - mov eax,00000004
This War of Mine.exe+382348 - 39 41 04              - cmp [ecx+04],eax
This War of Mine.exe+38234B - 7C 67                 - jnge "This War of Mine.exe"+3823B4
This War of Mine.exe+38234D - 8B 09                 - mov ecx,[ecx]
This War of Mine.exe+38234F - F6 41 05 03           - test byte ptr [ecx+05],03
This War of Mine.exe+382353 - 74 5F                 - je "This War of Mine.exe"+3823B4
This War of Mine.exe+382355 - 84 47 05              - test [edi+05],al
This War of Mine.exe+382358 - 74 5A                 - je "This War of Mine.exe"+3823B4
This War of Mine.exe+38235A - 57                    - push edi
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(pAction)
unregistersymbol(fProgress)
unregistersymbol(bFastAction)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memFastProcessCode)
dealloc(memFastProcessData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>114</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>114</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73400</ID>
          <Description>"Is it Working?"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0: No
1: Yes
</DropDownList>
          <LastState Value="1" Activated="1" RealAddress="13B31000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bFastAction</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73392</ID>
      <Description>"[Ctrl+F4/Shift+F4] = No Crafting Resource Use"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTnoResourceUse)
aobscanmodule(INJECTnoResourceUse,This War of Mine.exe,FF 4E 10 8B 46 10 52 6A 01 50 8D 4E 1C E8 * * * * 8B 45 10)
label(returnNoResourceUse)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memNoResourceUseCode, $1000)

////////////////////////////////////////////////////////////////////////////////
// There is No Cheat Data

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memNoResourceUseCode:

  mov eax, [esi+10]                    // No Decrease [esi+10], and save to EAX
  dec eax                              // Decrease EAX for Normal Calculation.
  jmp returnNoResourceUse              // Back to Next to Injected Location


////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTnoResourceUse:
  jmp memNoResourceUseCode
  nop
returnNoResourceUse:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTnoResourceUse:
  dec [esi+10]
  mov eax, [esi+10]
unregistersymbol(INJECTNoResourceUse)
{
// ORIGINAL CODE
This War of Mine.exe+2538CC - 51                    - push ecx
This War of Mine.exe+2538CD - 8B 4D F0              - mov ecx,[ebp-10]
This War of Mine.exe+2538D0 - 2B D0                 - sub edx,eax
This War of Mine.exe+2538D2 - 4A                    - dec edx
This War of Mine.exe+2538D3 - 52                    - push edx
This War of Mine.exe+2538D4 - 51                    - push ecx
This War of Mine.exe+2538D5 - 50                    - push eax
This War of Mine.exe+2538D6 - 8D 4E 1C              - lea ecx,[esi+1C]
This War of Mine.exe+2538D9 - E8 A2CDFFFF           - call "This War of Mine.exe"+250680
This War of Mine.exe+2538DE - 8B 56 18              - mov edx,[esi+18]
// ---------- INJECTING HERE ----------
This War of Mine.exe+2538E1 - FF 4E 10              - dec [esi+10]
This War of Mine.exe+2538E4 - 8B 46 10              - mov eax,[esi+10]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+2538E7 - 52                    - push edx
This War of Mine.exe+2538E8 - 6A 01                 - push 01
This War of Mine.exe+2538EA - 50                    - push eax
This War of Mine.exe+2538EB - 8D 4E 1C              - lea ecx,[esi+1C]
This War of Mine.exe+2538EE - E8 9D57FCFF           - call "This War of Mine.exe"+219090
This War of Mine.exe+2538F3 - 8B 45 10              - mov eax,[ebp+10]
This War of Mine.exe+2538F6 - 83 6D E8 10           - sub dword ptr [ebp-18],10
This War of Mine.exe+2538FA - FF 4D F0              - dec [ebp-10]
This War of Mine.exe+2538FD - 48                    - dec eax
This War of Mine.exe+2538FE - 89 45 10              - mov [ebp+10],eax
}

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memNoResourceUseCode)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>115</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>115</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>73393</ID>
      <Description>"[Ctrl+F5/Shift+F5] = No Equipment Consume"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTequipWear)
registersymbol(INJECTequipUse)
aobscanmodule(INJECTequipWear,This War of Mine.exe,F3 0F 10 40 08 0F 2F C1)
aobscanmodule(INJECTequipUse,This War of Mine.exe,83 7D F0 00 0F 84 * * 00 00 6A 00)
label(returnEquipWear)
label(returnEquipUse)
label(returnEquipUseJump)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memNoDurabilityCode, $1000)
alloc(memNoDurabilityData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memNoDurabilityData:

  // Register to Save Relative Address for Equip Use Part
  registersymbol(iNoEquipUse)
  label(iNoEquipUse)
  iNoEquipUse:
    readmem(INJECTequipUse+6,4)

  // Register to Save Temporary EAX Variable
  registersymbol(tmpNoDurabilityEAX)
  label(tmpNoDurabilityEAX)
  tmpNoDurabilityEAX:
    dd 0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memNoDurabilityCode:

  // Label for Separate Code Section
  label(codeEquipWear)
  label(codeEquipUse)

  //////////////////////////////////////////////////////////////////////////////
  // Equip Wear
  codeEquipWear:

  stc                          // equipment does not wear/break ("jb" must jump)
  jmp returnEquipWear+3        // Back to Next to Injected Location +3 (No Cmp)

  //////////////////////////////////////////////////////////////////////////////
  // Equip Use
  codeEquipUse:
  label(lblEquipUseExit)
  label(lblEquipUseActivation)

  mov [tmpNoDurabilityEAX], eax    // Store EAX Value

  mov eax,[edi+10]                 // Load Current Item Address
  mov eax,[eax+ebx+C]

  cmp dword ptr [eax],6B636F4C     // Lock(Pick)?
  je lblEquipUseActivation         // Activate Cheat

  cmp dword ptr [eax],74616548     // Heat(erFuel)?
  je lblEquipUseActivation         // Activate Cheat

  jmp lblEquipUseExit              // Otherwise, just run Normal

  lblEquipUseActivation:
  mov eax, [tmpNoDurabilityEAX]    // Restore EAX Value
  jmp returnEquipUseJump           // Back to Force Jump Function

  lblEquipUseExit:
  mov eax, [tmpNoDurabilityEAX]    // Restore EAX Value
  db 83 7D F0 00
  je returnEquipUseJump
  jmp returnEquipUse               // Back to Next to Injected Location


////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTequipWear:
  jmp codeEquipWear
returnEquipWear:

INJECTequipUse:
  jmp codeEquipUse
returnEquipUseJump:
  db E9
  readmem(INJECTequipUse+6,4)
returnEquipUse:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTequipWear:
  movss xmm0,[eax+08]
unregistersymbol(INJECTequipWear)
{
// ORIGINAL CODE - INJECTION POINT: "This War of Mine.exe"+27E625

This War of Mine.exe+27E604 - 6A 00                 - push 00
This War of Mine.exe+27E606 - 6A 34                 - push 34
This War of Mine.exe+27E608 - 68 6CD37B01           - push "This War of Mine.exe"+3ED36C
This War of Mine.exe+27E60D - 68 4CD37B01           - push "This War of Mine.exe"+3ED34C
This War of Mine.exe+27E612 - E8 19E3D8FF           - call "This War of Mine.exe"+C930
This War of Mine.exe+27E617 - 83 C4 10              - add esp,10
This War of Mine.exe+27E61A - 0F57 C9               - xorps xmm1,xmm1
This War of Mine.exe+27E61D - 8B C7                 - mov eax,edi
This War of Mine.exe+27E61F - C1 E0 04              - shl eax,04
This War of Mine.exe+27E622 - 03 46 18              - add eax,[esi+18]
// ---------- INJECTING HERE ----------
This War of Mine.exe+27E625 - F3 0F10 40 08         - movss xmm0,[eax+08]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+27E62A - 0F2F C1               - comiss xmm0,xmm1
This War of Mine.exe+27E62D - 72 20                 - jb "This War of Mine.exe"+27E64F
This War of Mine.exe+27E62F - F3 0F5C 45 0C         - subss xmm0,[ebp+0C]
This War of Mine.exe+27E634 - 0F2F C8               - comiss xmm1,xmm0
This War of Mine.exe+27E637 - F3 0F11 40 08         - movss [eax+08],xmm0
This War of Mine.exe+27E63C - 72 11                 - jb "This War of Mine.exe"+27E64F
This War of Mine.exe+27E63E - 57                    - push edi
This War of Mine.exe+27E63F - 8D 4E 10              - lea ecx,[esi+10]
This War of Mine.exe+27E642 - E8 B922FDFF           - call "This War of Mine.exe"+250900
This War of Mine.exe+27E647 - 5F                    - pop edi

}

INJECTequipUse:
  cmp dword ptr [ebp-10],00
  db 0F 84
  readmem(iNoEquipUse, 4)
unregistersymbol(INJECTequipUse)
{
// ORIGINAL CODE - INJECTION POINT: "This War of Mine.exe"+251E80

This War of Mine.exe+251E5E - 79 16                 - jns "This War of Mine.exe"+251E76
This War of Mine.exe+251E60 - 6A 00                 - push 00
This War of Mine.exe+251E62 - 6A 34                 - push 34
This War of Mine.exe+251E64 - 68 6CD37B01           - push "This War of Mine.exe"+3ED36C
This War of Mine.exe+251E69 - 68 4CD37B01           - push "This War of Mine.exe"+3ED34C
This War of Mine.exe+251E6E - E8 BDAADBFF           - call "This War of Mine.exe"+C930
This War of Mine.exe+251E73 - 83 C4 10              - add esp,10
This War of Mine.exe+251E76 - 8B 4F 10              - mov ecx,[edi+10]
This War of Mine.exe+251E79 - 8B 54 19 10           - mov edx,[ecx+ebx+10]
This War of Mine.exe+251E7D - 89 55 F0              - mov [ebp-10],edx
// ---------- INJECTING HERE ----------
This War of Mine.exe+251E80 - 83 7D F0 00           - cmp dword ptr [ebp-10],00
This War of Mine.exe+251E84 - 0F84 8B000000         - je "This War of Mine.exe"+251F15
// ---------- DONE INJECTING  ----------
This War of Mine.exe+251E8A - 6A 00                 - push 00
This War of Mine.exe+251E8C - 8D 4D CC              - lea ecx,[ebp-34]
This War of Mine.exe+251E8F - E8 7C30DCFF           - call "This War of Mine.exe"+14F10
This War of Mine.exe+251E94 - 33 F6                 - xor esi,esi
This War of Mine.exe+251E96 - 89 75 D0              - mov [ebp-30],esi
This War of Mine.exe+251E99 - 89 75 D4              - mov [ebp-2C],esi
This War of Mine.exe+251E9C - 89 75 D8              - mov [ebp-28],esi
This War of Mine.exe+251E9F - 89 75 DC              - mov [ebp-24],esi
This War of Mine.exe+251EA2 - 89 75 E0              - mov [ebp-20],esi
This War of Mine.exe+251EA5 - 89 75 E4              - mov [ebp-1C],esi

}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(iNoEquipUse)
unregistersymbol(tmpNoDurabilityEAX)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memNoDurabilityCode)
dealloc(memNoDurabilityData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>116</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>116</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>73394</ID>
      <Description>"[Ctrl+F6/Shift+F6] = God Mode (NoDamage &amp; One Kill)"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTgodMode)
aobscanmodule(INJECTgodMode,This War of Mine.exe,F3 0F 10 57 24)
label(returnGodMode)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memGodModeCode, $1000)
alloc(memGodModeData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memGodModeData:

  // Register to Save Temporary EAX Variable
  registersymbol(tmpGodModeEAX)
  label(tmpGodModeEAX)
  tmpGodModeEAX:
    dd 0

  // Register to Set Minimum and Maximum
  registersymbol(fMin)
  label(fMin)
  fMin:
    dd (float)0.0

  // Register to Set Minimum and Maximum
  registersymbol(fMax)
  label(fMax)
  fMax:
    dd (float)100.0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memGodModeCode:

  label(lblGodModeExit)
  label(lblGodModeDamage)

  mov [tmpGodModeEAX], eax          // Store EAX Value

  mov eax, [edi+1C]                 // Load People BaseAddress to EAX

  cmp dword ptr [eax+4], #7         // Check Scavenger (7 = Scavenger / 6 = Enemy)
  jne lblGodModeDamage              // No - It's Enamy

  movss xmm2, [fMax]                // Load Maximum value to xmm2
  movss [edi+24], xmm2              // Set Maximum Health to Scavenger
  movss xmm1, [fMin]                // Set No Damage to Scavenger

  jmp lblGodModeExit                // Go to Original Code

  lblGodModeDamage:                 // Yes - It's Scavenger
  movss xmm1, [fMax]                // Set Maximum Damage to Enemy

  mov eax, [tmpGodModeEAX]          // Restore Eax Value

  lblGodModeExit:
  movss xmm2, [edi+24]              // Do Original Code where Injected Location
  jmp returnGodMode                 // Back to Next to Injected Location


////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTgodMode:
  jmp memGodModeCode
returnGodMode:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTgodMode:
  movss xmm2,[edi+24]
unregistersymbol(INJECTgodMode)
{
// ORIGINAL CODE - INJECTION POINT: "This War of Mine.exe"+2A2FD4

This War of Mine.exe+2A7F32 - E8 B921F9FF           - call "This War of Mine.exe"+23A0F0
This War of Mine.exe+2A7F37 - D9E8                  - fld1
This War of Mine.exe+2A7F39 - DEE1                  - fsubrp st(1),st(0)
This War of Mine.exe+2A7F3B - 8D 8D F4FEFFFF        - lea ecx,[ebp-0000010C]
This War of Mine.exe+2A7F41 - C7 45 FC FFFFFFFF     - mov [ebp-04],FFFFFFFF
This War of Mine.exe+2A7F48 - D8 8D F0FEFFFF        - fmul dword ptr [ebp-00000110]
This War of Mine.exe+2A7F4E - D9 9D F0FEFFFF        - fstp dword ptr [ebp-00000110]
This War of Mine.exe+2A7F54 - E8 57CBD6FF           - call "This War of Mine.exe"+14AB0
This War of Mine.exe+2A7F59 - F3 0F10 8D F0FEFFFF   - movss xmm1,[ebp-00000110]
This War of Mine.exe+2A7F61 - 0F57 C0               - xorps xmm0,xmm0
// ---------- INJECTING HERE ----------
This War of Mine.exe+2A7F64 - F3 0F10 57 24         - movss xmm2,[edi+24]
// ---------- DONE INJECTING  ----------
This War of Mine.exe+2A7F69 - F3 0F5C D1            - subss xmm2,xmm1
This War of Mine.exe+2A7F6D - F3 0F11 57 24         - movss [edi+24],xmm2
This War of Mine.exe+2A7F72 - F3 0F10 4F 24         - movss xmm1,[edi+24]
This War of Mine.exe+2A7F77 - 0F2F C1               - comiss xmm0,xmm1
This War of Mine.exe+2A7F7A - F3 0F11 8D F8FEFFFF   - movss [ebp-00000108],xmm1
This War of Mine.exe+2A7F82 - 0F82 9F000000         - jb "This War of Mine.exe"+2A8027
This War of Mine.exe+2A7F88 - 8B 4F 28              - mov ecx,[edi+28]
This War of Mine.exe+2A7F8B - F3 0F11 47 24         - movss [edi+24],xmm0
This War of Mine.exe+2A7F90 - 85 C9                 - test ecx,ecx
This War of Mine.exe+2A7F92 - 74 0B                 - je "This War of Mine.exe"+2A7F9F
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(tmpGodModeEAX)
unregistersymbol(fMin)
unregistersymbol(fMax)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memGodModeCode)
dealloc(memGodModeData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>117</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>117</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>73395</ID>
      <Description>"[Ctrl+F7/Shift+F7] = CrafttingQuantity Cheat (-1 Require / Set Quantity)"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTcraftItemQuantity)
aobscanmodule(INJECTcraftItemQuantity,This War of Mine.exe,89 86 * 00 00 00 8D 45 B0)
label(returnCraftItemQuantity)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memCraftItemQuantityData, $1000)
alloc(memCraftItemQuantityCode, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memCraftItemQuantityData:

  // Register InterfaceBase Address
  registersymbol(pInterfaceBase)
  label(pInterfaceBase)
  pInterfaceBase:
    dd 0

  // Register Interface Offset Store
  registersymbol(iCraftItemQuantityOffset)
  label(iCraftItemQuantityOffset)
  iCraftItemQuantityOffset:
    readmem(INJECTcraftItemQuantity+2,4)

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memCraftItemQuantityCode:

  mov [pInterfaceBase], esi                  // Store Interface Base Address

  mov eax, #-1                               // Set Item Quantity to -1

  db 89 86                                   // Do Original Code where Injected Location
  readmem(INJECTcraftItemQuantity+2, 4)
  jmp returnCraftItemQuantity                // Back to Next to Injected Location


////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTcraftItemQuantity:
  jmp memCraftItemQuantityCode
  nop
returnCraftItemQuantity:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTcraftItemQuantity:
  db 89 86
  readmem(iCraftItemQuantityOffset,4)
unregistersymbol(INJECTcraftItemQuantity)
{
// ORIGINAL CODE
This War of Mine.exe+293623 - 64 A3 00000000        - mov fs:[00000000],eax
This War of Mine.exe+293629 - 8B 45 08              - mov eax,[ebp+08]
This War of Mine.exe+29362C - 50                    - push eax
This War of Mine.exe+29362D - 8B F1                 - mov esi,ecx
This War of Mine.exe+29362F - 68 ECDEEB00           - push "This War of Mine.exe"+3EDEEC
// ---------- INJECTING HERE ----------
This War of Mine.exe+293634 - 89 86 C8000000        - mov [esi+000000C8],eax
// ---------- DONE INJECTING  ----------
This War of Mine.exe+29363A - 8D 45 B0              - lea eax,[ebp-50]
This War of Mine.exe+29363D - 6A 40                 - push 40
This War of Mine.exe+29363F - 50                    - push eax
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(pInterfaceBase)
unregistersymbol(iCraftItemQuantityOffset)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memCraftItemQuantityData)
dealloc(memCraftItemQuantityCode)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>118</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>118</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73399</ID>
          <Description>"Quantity Set 1/10/100/500 [Ctrl+Num1~4]"</Description>
          <LastState Value="??" Activated="0" RealAddress="1000000C7"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pInterfaceBase</Address>
          <Offsets>
            <Offset>C8</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>98</Key>
              </Keys>
              <Value>10</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>99</Key>
              </Keys>
              <Value>100</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>100</Key>
              </Keys>
              <Value>500</Value>
              <ID>3</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73396</ID>
      <Description>"[Ctrl+F8/Shift+F8] = Mega Backpack (Size 99)"</Description>
      <LastState Activated="0"/>
      <Color>950000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTbackPack)
aobscanmodule(INJECTbackPack,This War of Mine.exe,8B 49 40 89 48 28)
label(returnBackPack)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memBackPackCode, $1000)

////////////////////////////////////////////////////////////////////////////////
// There is No Cheat Data

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memBackPackCode:

  mov [ecx+40], #99                 // Set Backpack Size to 99
  mov ecx, [ecx+40]                 // Do Original Code where Injected Location
  mov [eax+28],ecx
  jmp returnBackPack                // Back to Next to Injected Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTbackPack:
  jmp memBackPackCode
  nop
returnBackPack:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTbackPack:
  mov ecx,[ecx+40]
  mov [eax+28],ecx
unregistersymbol(INJECTbackPack)
{
// ORIGINAL CODE
This War of Mine.exe+332F05 - E8 56EC0100           - call "This War of Mine.exe"+351B60
This War of Mine.exe+332F0A - 80 7B 70 00           - cmp byte ptr [ebx+70],00
This War of Mine.exe+332F0E - 89 7D FC              - mov [ebp-04],edi
This War of Mine.exe+332F11 - 89 7D F0              - mov [ebp-10],edi
This War of Mine.exe+332F14 - 75 41                 - jne "This War of Mine.exe"+332F57
This War of Mine.exe+332F16 - 68 288B8C01           - push "This War of Mine.exe"+4F8B28
This War of Mine.exe+332F1B - 8B CB                 - mov ecx,ebx
This War of Mine.exe+332F1D - E8 6EF7FFFF           - call "This War of Mine.exe"+332690
This War of Mine.exe+332F22 - 8B 53 18              - mov edx,[ebx+18]
This War of Mine.exe+332F25 - 8B 4A 0C              - mov ecx,[edx+0C]
// ---------- INJECTING HERE ----------
This War of Mine.exe+332F28 - 8B 49 40              - mov ecx,[ecx+40]
This War of Mine.exe+332F2B - 89 48 28              - mov [eax+28],ecx
// ---------- DONE INJECTING  ----------
This War of Mine.exe+332F2E - 8B 4B 18              - mov ecx,[ebx+18]
This War of Mine.exe+332F31 - 8B 49 0C              - mov ecx,[ecx+0C]
This War of Mine.exe+332F34 - 8A 49 45              - mov cl,[ecx+45]
This War of Mine.exe+332F37 - 88 48 24              - mov [eax+24],cl
This War of Mine.exe+332F3A - 8B 4B 74              - mov ecx,[ebx+74]
This War of Mine.exe+332F3D - 8D 55 F0              - lea edx,[ebp-10]
This War of Mine.exe+332F40 - 89 48 2C              - mov [eax+2C],ecx
This War of Mine.exe+332F43 - 8D 4B 2C              - lea ecx,[ebx+2C]
This War of Mine.exe+332F46 - 52                    - push edx
This War of Mine.exe+332F47 - 89 45 F0              - mov [ebp-10],eax
}

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memBackPackCode)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>119</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>119</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>73419</ID>
      <Description>"[Ctrl+F9/Shift+F9] = Day Cheat (Activate First)"</Description>
      <LastState Activated="0"/>
      <Color>A00000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTday)
aobscanmodule(INJECTday,This War of Mine.exe,FF 81 * 00 00 00 8B 89 * 00 00 00)
label(returnDay)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memDayCode, $1000)
alloc(memDayData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memDayData:

  // Register Day Pointer Symbol
  registersymbol(pDay)
  label(pDay)
  pDay:
    dd 0

  // Register Temporary ECX Store Variable
  registersymbol(tmpDayECX)
  label(tmpDayECX)
  tmpDayECX:
    dd 0

  // Register store Day Relative Address Value Integer Symbol
  registersymbol(iDayOffset)
  label(iDayOffset)
  iDayOffset:
    readmem(INJECTday+2,4)

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memDayCode:

  mov [tmpDayECX], ecx               // Store ECX Value
  add ecx, [iDayOffset]              // Set ECX to Combined Address
  mov [pDay], ecx                    // Set Day Address to 'pDay'
  mov ecx, [tmpDayECX]               // Restore ECX Value

  db FF 81                           // Do Original Code where Injected Location
  readmem(INJECTday+2, 4)
  jmp returnDay                      // Back to Next to Injected Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTday:
  jmp memDayCode
  nop
returnDay:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTday:
  db FF 81
  readmem(iDayOffset,4)
unregistersymbol(INJECTday)
{
// ORIGINAL CODE
"This War of Mine.exe"+1C07B0: 8B 41 04              -  mov eax,[ecx+04]
"This War of Mine.exe"+1C07B3: 50                    -  push eax
"This War of Mine.exe"+1C07B4: E8 E7 EB E4 FF        -  call "This War of Mine.exe"+F3A0
"This War of Mine.exe"+1C07B9: 59                    -  pop ecx
"This War of Mine.exe"+1C07BA: C3                    -  ret
"This War of Mine.exe"+1C07BB: CC                    -  int 3
"This War of Mine.exe"+1C07BC: CC                    -  int 3
"This War of Mine.exe"+1C07BD: CC                    -  int 3
"This War of Mine.exe"+1C07BE: CC                    -  int 3
"This War of Mine.exe"+1C07BF: CC                    -  int 3
// ---------- INJECTING HERE ----------
"This War of Mine.exe"+1C07C0: FF 81 88 00 00 00     -  inc [ecx+00000088]
// ---------- DONE INJECTING  ----------
"This War of Mine.exe"+1C07C6: 8B 89 88 00 00 00     -  mov ecx,[ecx+00000088]
"This War of Mine.exe"+1C07CC: 51                    -  push ecx
"This War of Mine.exe"+1C07CD: 68 30 65 5B 01        -  push "This War of Mine.exe"+426530
"This War of Mine.exe"+1C07D2: B9 0C 9C 65 01        -  mov ecx,"This War of Mine.exe"+4C9C0C
"This War of Mine.exe"+1C07D7: E8 D4 DB EA FF        -  call "This War of Mine.exe"+6E3B0
"This War of Mine.exe"+1C07DC: C3                    -  ret
"This War of Mine.exe"+1C07DD: CC                    -  int 3
"This War of Mine.exe"+1C07DE: CC                    -  int 3
"This War of Mine.exe"+1C07DF: CC                    -  int 3
"This War of Mine.exe"+1C07E0: 55                    -  push ebp
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(pDay)
unregistersymbol(tmpDayECX)
unregistersymbol(iDayOffset)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memDayCode)
dealloc(memDayData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>120</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>120</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73420</ID>
          <Description>"[Ctrl+Home]/[Ctrl+End] = Day +1 / -1"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pDay</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73421</ID>
      <Description>"[Ctrl+F10/Shift+F10] = Others Disappear Cheat (Activate First)"</Description>
      <LastState Activated="0"/>
      <Color>A00000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTothersDisappear)
aobscanmodule(INJECTothersDisappear,This War of Mine.exe,0F 28 87 * * 00 00 0F 29 86 D0)
label(returnOthersDisappear)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memOthersDisappearCode, $1000)
alloc(memOthersDisappearData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memOthersDisappearData:

  // Register Store Relative Address Integer
  registersymbol(iOthersDisappearOffset)
  label(iOthersDisappearOffset)
  iOthersDisappearOffset:
    readmem(INJECTothersDisappear+3, 4)

  // Register Cheat Activate Boolean
  registersymbol(bOthersDisappear)
  label(bOthersDisappear)
  bOthersDisappear:
    dd 0

  // Register Height value for Others Location
  registersymbol(fOthersDisappearHeight)
  label(fOthersDisappearHeight)
  fOthersDisappearHeight:
    dd (float)28.0

  // Register Temporary EAX Store Variable
  registersymbol(tmpOthersDisappearEAX)
  label(tmpOthersDisappearEAX)
  tmpOthersDisappearEAX:
    dd 0

  // Register Temporary EBX Store Variable
  registersymbol(tmpOthersDisappearEBX)
  label(tmpOthersDisappearEBX)
  tmpOthersDisappearEBX:
    dd 0

  // Register store People Location Table
  registersymbol(pOthersDisappearTable)
  label(pOthersDisappearTable)
  pOthersDisappearTable:
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0
    dd 0 (float)0.0 (float)0.0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memOthersDisappearCode:

  label(lblOthersDisappearNext)
  label(lblOthersDisappearNewEnemy)
  label(lblOthersDisappearEnemy)
  label(lblOthersDisappearCleaning)
  label(lblOthersDisappearPopExit)
  label(lblOthersDisappearExit)

  mov [tmpOthersDisappearEAX], eax   // Store EAX Value
  mov [tmpOthersDisappearEBX], ebx   // Store EBX Value

  mov eax, pOthersDisappearTable

  cmp dword ptr [bOthersDisappear],0
  je lblOthersDisappearCleaning

  cmp dword ptr [edi+274],7           // scavenger? (7=scavenger 6=others)
  je lblOthersDisappearPopExit        // yes - leave him be

  lblOthersDisappearNext:
  cmp dword ptr [eax],0               // empty table position (end of table)?
  je lblOthersDisappearNewEnemy       // yes - save enemy position in table

  cmp dword ptr [eax],edi             // enemy already in table?
  je lblOthersDisappearEnemy          // yes - make him disappear

  add eax,C                           // different enemy character
  jmp lblOthersDisappearNext          // go to next table position

  lblOthersDisappearNewEnemy:
  mov [eax],edi                       // save enemy's base pointer
  fld dword ptr [edi+130]
  fstp dword ptr [eax+4]              // save enemy's x coordinate
  fld dword ptr [edi+138]
  fstp dword ptr [eax+8]              // save enemy's y coordinate

  lblOthersDisappearEnemy:
  fld dword ptr [eax+4]
  fstp dword ptr [edi+130]
  fld dword ptr [fOthersDisappearHeight]
  fstp dword ptr [edi+138]            // make enemy disappear (raise them)
  jmp lblOthersDisappearPopExit

  lblOthersDisappearCleaning:
  cmp dword ptr [eax],0               // empty table position (end of table)?
  je lblOthersDisappearPopExit        // yes - nothing to restore

  mov ebx,[eax]
  fld dword ptr [eax+4]
  fstp dword ptr [ebx+130]            // restore enemy's x coordinate
  fld dword ptr [eax+8]
  fstp dword ptr [ebx+138]            // restore enemy's y coordinate

  mov [eax],0                         // clear table position
  fldz
  fst dword ptr [eax+4]
  fstp dword ptr [eax+8]

  add eax,C
  jmp lblOthersDisappearCleaning

  lblOthersDisappearPopExit:
  mov eax, [tmpOthersDisappearEAX]   // Restore EAX Value
  mov ebx, [tmpOthersDisappearEBX]   // Restore EBX Value

  lblOthersDisappearExit:
  db 0F 28 87                        // Do Original Code where Injected Location
  readmem(INJECTothersDisappear+3, 4)
  jmp returnOthersDisappear          // Back to Next to Injected Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTothersDisappear:
  jmp memOthersDisappearCode
  nop
  nop
returnOthersDisappear:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTothersDisappear:
  db 0F 28 87
  readmem(iOthersDisappearOffset, 4)
unregistersymbol(INJECTothersDisappear)
{
// ORIGINAL CODE
"This War of Mine.exe"+348C34: 0F 12 C1                    -  movhlps xmm0,xmm1
"This War of Mine.exe"+348C37: 0F 58 C1                    -  addps xmm0,xmm1
"This War of Mine.exe"+348C3A: 0F 28 C8                    -  movaps xmm1,xmm0
"This War of Mine.exe"+348C3D: 0F C6 C8 11                 -  shufps xmm1,xmm0,11
"This War of Mine.exe"+348C41: 0F 58 C8                    -  addps xmm1,xmm0
"This War of Mine.exe"+348C44: 0F 29 8D 00 FC FF FF        -  movaps [ebp-00000400],xmm1
"This War of Mine.exe"+348C4B: D9 85 00 FC FF FF           -  fld dword ptr [ebp-00000400]
"This War of Mine.exe"+348C51: D9 FA                       -  fsqrt
"This War of Mine.exe"+348C53: D8 86 C4 05 00 00           -  fadd dword ptr [esi+000005C4]
"This War of Mine.exe"+348C59: D9 9E C4 05 00 00           -  fstp dword ptr [esi+000005C4]
// ---------- INJECTING HERE ----------
"This War of Mine.exe"+348C5F: 0F 28 87 30 01 00 00        -  movaps xmm0,[edi+00000130]
// ---------- DONE INJECTING  ----------
"This War of Mine.exe"+348C66: 0F 29 86 D0 05 00 00        -  movaps [esi+000005D0],xmm0
"This War of Mine.exe"+348C6D: 8B 8E A8 04 00 00           -  mov ecx,[esi+000004A8]
"This War of Mine.exe"+348C73: 8B 41 0C                    -  mov eax,[ecx+0C]
"This War of Mine.exe"+348C76: 85 C0                       -  test eax,eax
"This War of Mine.exe"+348C78: 74 0D                       -  je "This War of Mine.exe"+348C87
"This War of Mine.exe"+348C7A: 83 C0 10                    -  add eax,10
"This War of Mine.exe"+348C7D: 50                          -  push eax
"This War of Mine.exe"+348C7E: 8B CE                       -  mov ecx,esi
"This War of Mine.exe"+348C80: E8 9B C1 FE FF              -  call "This War of Mine.exe"+334E20
"This War of Mine.exe"+348C85: EB 14                       -  jmp "This War of Mine.exe"+348C9B
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(iOthersDisappearOffset)
unregistersymbol(bOthersDisappear)
unregistersymbol(fOthersDisappearHeight)
unregistersymbol(tmpOthersDisappearEAX)
unregistersymbol(tmpOthersDisappearEBX)
unregistersymbol(pOthersDisappearTable)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memOthersDisappearCode)
dealloc(memOthersDisappearData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>121</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>121</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73422</ID>
          <Description>"[Ctrl+F11/Shift+F11] = Make Other Disappear"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0: No Disappear
1: Disappear
</DropDownList>
          <LastState Value="0" Activated="0" RealAddress="14B91004"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bOthersDisappear</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>122</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>122</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73427</ID>
      <Description>"[Ctrl+F12/Shift+F12] = Multiply Looting"</Description>
      <LastState Activated="1"/>
      <Color>A00000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>////////////////////////////////////////////////////////////////////////////////
[ENABLE]

////////////////////////////////////////////////////////////////////////////////
// Scan Module Address &amp; Return Label

registersymbol(INJECTlootMultiply)
aobscanmodule(INJECTlootMultiply,This War of Mine.exe,8B CB C1 E1 05 03 48 10 57 E8 * * * * 8B 4D F0)
label(returnLootMultiply)

////////////////////////////////////////////////////////////////////////////////
// Memory Allocation

alloc(memMultiplyLootingCode, $1000)
alloc(memMultiplyLootingData, $1000)

////////////////////////////////////////////////////////////////////////////////
// Cheat Data

memMultiplyLootingData:

  registersymbol(iMultiplyQuantity)
  label(iMultiplyQuantity)
  iMultiplyQuantity:
    dd 1

  registersymbol(iRepeatCounter)
  label(iRepeatCounter)
  iRepeatCounter:
    dd 0

  registersymbol(tmpMultiplyLootEAX)
  label(tmpMultiplyLootEAX)
  tmpMultiplyLootEAX:
    dd 0

  registersymbol(tmpMultiplyLootEBX)
  label(tmpMultiplyLootEBX)
  tmpMultiplyLootEBX:
    dd 0

  registersymbol(tmpMultiplyLootECX)
  label(tmpMultiplyLootECX)
  tmpMultiplyLootECX:
    dd 0

  registersymbol(tmpMultiplyLootEDX)
  label(tmpMultiplyLootEDX)
  tmpMultiplyLootEDX:
    dd 0

////////////////////////////////////////////////////////////////////////////////
// Cheat Code

memMultiplyLootingCode:

  label(lblRepeatLooting)
  label(lblRepeatLootingExit)

  mov ecx,ebx                           // Do Original Code Before Jump Return
  shl ecx,05
  add ecx,[eax+10]

  lblRepeatLooting:
  mov [tmpMultiplyLootEBX], ebx         // Store EBX Value
  mov ebx, [iRepeatCounter]             // Set EBX to Repeat Counter
  cmp ebx, [iMultiplyQuantity]          // Compare Current Repeat Counter to Multiply Quantity
  jge lblRepeatLootingExit

  // No - Contimue Repeating
  inc [iRepeatCounter]                  // Increase Repeat Counter

  mov ebx, [tmpMultiplyLootEBX]         // Restore EBX Value

  mov [tmpMultiplyLootEAX], eax         // Save Some Register for Iteration
  mov [tmpMultiplyLootECX], ecx
  mov [tmpMultiplyLootEDX], edx

  push edi
  call "This War of Mine.exe"+27E660    // Call Function :))

  mov eax, [tmpMultiplyLootEAX]         // Restore Register for Iteration
  mov ecx, [tmpMultiplyLootECX]
  mov edx, [tmpMultiplyLootEDX]

  jmp lblRepeatLooting                  // Loop Jumping

  // Yes - Complete Repeating
  lblRepeatLootingExit:


  mov [iRepeatCounter], #0              // Reset RepeatCounter

  mov ebx, [tmpMultiplyLootEBX]         // Restore EBX Value

  jmp returnLootMultiply                // Back to Next to Call Location

////////////////////////////////////////////////////////////////////////////////
// Code Injection

INJECTlootMultiply:
  jmp memMultiplyLootingCode
  readmem(INJECTlootMultiply+5,9)
returnLootMultiply:

////////////////////////////////////////////////////////////////////////////////
[DISABLE]

INJECTlootMultiply:
  mov ecx,ebx
  shl ecx,05
unregistersymbol(INJECTlootMultiply)
{
// ORIGINAL CODE
This War of Mine.exe+252F90 - 6A 00                 - push 00
This War of Mine.exe+252F92 - 6A 34                 - push 34
This War of Mine.exe+252F94 - 68 6CD3DE00           - push "This War of Mine.exe"+3ED36C
This War of Mine.exe+252F99 - 68 4CD3DE00           - push "This War of Mine.exe"+3ED34C
This War of Mine.exe+252F9E - E8 8D99DBFF           - call "This War of Mine.exe"+C930
This War of Mine.exe+252FA3 - 83 C4 10              - add esp,10
This War of Mine.exe+252FA6 - 8B 45 F0              - mov eax,[ebp-10]
// ---------- INJECTING HERE ----------
This War of Mine.exe+252FA9 - 8B CB                 - mov ecx,ebx
This War of Mine.exe+252FAB - C1 E1 05              - shl ecx,05
// ---------- DONE INJECTING  ----------
This War of Mine.exe+252FAE - 03 48 10              - add ecx,[eax+10]
This War of Mine.exe+252FB1 - 57                    - push edi
This War of Mine.exe+252FB2 - E8 A9 B6 02 00        - call "This War of Mine.exe"+27E660
// ---------- Cheat Return Here --------
This War of Mine.exe+252FB7 - 8B 4D F0              - mov ecx,[ebp-10]
This War of Mine.exe+252FBA - 6A 00                 - push 00
This War of Mine.exe+252FBC - E8 DFE8FFFF           - call "This War of Mine.exe"+2518A0
This War of Mine.exe+252FC1 - 83 3D B884EE00 00     - cmp dword ptr ["This War of Mine.exe"+4E84B8],00
This War of Mine.exe+252FC8 - 8B 5D 10              - mov ebx,[ebp+10]
}

////////////////////////////////////////////////////////////////////////////////
// Unregisyer Symbol

unregistersymbol(iMultiplyQuantity)
unregistersymbol(iRepeatCounter)

unregistersymbol(tmpMultiplyLootEAX)
unregistersymbol(tmpMultiplyLootEBX)
unregistersymbol(tmpMultiplyLootECX)
unregistersymbol(tmpMultiplyLootEDX)

////////////////////////////////////////////////////////////////////////////////
// Memory Deallocation

dealloc(memMultiplyLootingCode)
dealloc(memMultiplyLootingData)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>17</Key>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>123</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>16</Key>
            <Key>45</Key>
          </Keys>
          <ID>2</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>73431</ID>
          <Description>"[Shift+Num1~4] = Looting Quantity set 1/10/100/500"</Description>
          <DropDownList>1:1
10:10
100:100
500:500
</DropDownList>
          <LastState Value="1" Activated="0" RealAddress="0E301000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iMultiplyQuantity</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>98</Key>
              </Keys>
              <Value>10</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>99</Key>
              </Keys>
              <Value>100</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>100</Key>
              </Keys>
              <Value>500</Value>
              <ID>3</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>57146</ID>
      <Description>"Disable All = [Shift+Ins]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>73425</ID>
      <Description>"---------------------------------------- CAUTION ----------------------------------------"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>73404</ID>
          <Description>"Don't Touch "Is it working". Change it will be wrong action."</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>73407</ID>
          <Description>"If is it working is "No", please deactivate &amp; activate again. (If you want)"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>73423</ID>
          <Description>"DO NOT USE WITH OTHEER CHEAT. IT WILL BE CRASH"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>73424</ID>
              <Description>"Crash Proof Component : This Hack of Mine"</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>73426</ID>
      <Description>"Works : Steam (Checked 2015-01-27) // Non-Steam (v1.2.2)"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>bDayTimeBaseUpdate</Name>
      <Address>0B5E1000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bDayTimeStop</Name>
      <Address>0B5E100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bBackpack</Name>
      <Address>0A8F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bNoUseItem</Name>
      <Address>04E610E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpdayRadiEcx</Name>
      <Address>0B610410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpHealthEax</Name>
      <Address>0B61042C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpEquipUseEax</Name>
      <Address>0B610458</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iDayRadiOffset</Name>
      <Address>0BE70408</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>interfaceBaseAddress</Name>
      <Address>0BE704E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTnighTime</Name>
      <Address>00D3F457</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iDayRadioOffset</Name>
      <Address>0E131008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bTimeLoop</Name>
      <Address>0E13100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bTimeStop</Name>
      <Address>0E131010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fTime</Name>
      <Address>0E131014</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bMaxHealth</Name>
      <Address>0E131018</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bMaxDamage</Name>
      <Address>0E13101C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bFastSecondaryProcess</Name>
      <Address>0E13102C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fSecondaryProcessFactor</Name>
      <Address>0E131030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bNoResourceUse</Name>
      <Address>0E13103C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bNoEquipWear</Name>
      <Address>0E131040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBackPackSize</Name>
      <Address>0E131044</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iInterfaceOffset</Name>
      <Address>0E1310E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInterfaceQuantity</Name>
      <Address>0E1310E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInterfaceUpdate</Name>
      <Address>0E1310E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTdayRadio</Name>
      <Address>01592276</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECThealth</Name>
      <Address>01677F64</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTresourceUse</Name>
      <Address>016238E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTinterfaceItem</Name>
      <Address>01663634</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTinfiniteLooting</Name>
      <Address>00C5300A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOriginalFirstLootQuantity</Name>
      <Address>09A51008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOriginalExistLootQuantity</Name>
      <Address>09A51010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTfirstLootMultiply</Name>
      <Address>00C7E1C9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTexistLootMultiply</Name>
      <Address>00C7E1EB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpFirstLootMultiplyEBX</Name>
      <Address>0F1F1004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpExistLootMultiplyEBX</Name>
      <Address>0F1F1008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootESI</Name>
      <Address>0C731018</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootEDI</Name>
      <Address>0C73101C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootEBP</Name>
      <Address>0C731020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionEAX</Name>
      <Address>0C731024</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionEBX</Name>
      <Address>0C731028</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionECX</Name>
      <Address>0C73102C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionEDX</Name>
      <Address>0C731030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionESI</Name>
      <Address>0C731034</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionEDI</Name>
      <Address>0C731038</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpCallFunctionEBP</Name>
      <Address>0C73103C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTdayTime</Name>
      <Address> 010D972D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bStopDayTime</Name>
      <Address>0FA81000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDayTimeBase</Name>
      <Address>0FA81004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpDayTimeEAX</Name>
      <Address>0FA81008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fDayTime</Name>
      <Address>0FA8100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTnightTime</Name>
      <Address> 010AF457</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bStopNightTime</Name>
      <Address>13B21000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pNightTimeBase</Name>
      <Address>13B21004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpNightTimeEAX</Name>
      <Address>13B21008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fNightTime</Name>
      <Address>13B2100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTfastCraft</Name>
      <Address> 010EA62F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTfastAction</Name>
      <Address> 011C233B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bFastAction</Name>
      <Address>13B31000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAction</Name>
      <Address>13B31004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fProgress</Name>
      <Address>13B31008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTnoResourceUse</Name>
      <Address> 010938E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTequipWear</Name>
      <Address> 010BE625</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTequipUse</Name>
      <Address> 01091E80</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iNoEquipUse</Name>
      <Address>13D61000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpNoDurabilityEAX</Name>
      <Address>13D61004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTgodMode</Name>
      <Address> 010E7F64</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpGodModeEAX</Name>
      <Address>13D71000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fMin</Name>
      <Address>13D71004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fMax</Name>
      <Address>13D71008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTcraftItemQuantity</Name>
      <Address> 010D3634</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pInterfaceBase</Name>
      <Address>13D80000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCraftItemQuantityOffset</Name>
      <Address>13D80004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTbackPack</Name>
      <Address> 01172F28</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTday</Name>
      <Address> 010007C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDay</Name>
      <Address>13DA1000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpDayECX</Name>
      <Address>13DA1004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iDayOffset</Name>
      <Address>13DA1008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTothersDisappear</Name>
      <Address> 0118E04F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOthersDisappearOffset</Name>
      <Address>14B91000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bOthersDisappear</Name>
      <Address>14B91004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fOthersDisappearHeight</Name>
      <Address>14B91008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpOthersDisappearEAX</Name>
      <Address>14B9100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpOthersDisappearEBX</Name>
      <Address>14B91010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pOthersDisappearTable</Name>
      <Address>14B91014</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECTlootMultiply</Name>
      <Address> 01092FA9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMultiplyQuantity</Name>
      <Address>0E301000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iRepeatCounter</Name>
      <Address>0E301004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootEAX</Name>
      <Address>0E301008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootEBX</Name>
      <Address>0E30100C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootECX</Name>
      <Address>0E301010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>tmpMultiplyLootEDX</Name>
      <Address>0E301014</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
