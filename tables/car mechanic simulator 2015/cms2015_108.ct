<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Repairs Never Fail"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : cms2015.exe
  Date   : 2016-11-19
  Author : justa_dude
}

define(address,Inventory:RepairFromSlot+B8)
define(bytes,3B 45 10 0F B6 45 F3)

[ENABLE]
{$lua}
LaunchMonoDataCollector()
mono_symbolLookupCallback("Inventory:RepairFromSlot")
{$asm}

 
assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
mov eax,0 //repair skill must be higher than EAX for repair to succeed
  cmp eax,[ebp+10]
  movzx eax,byte ptr [ebp-0D]
  jmp return

address:
  jmp code
  nop
  nop
return:

[DISABLE]
address:
  db bytes
  // cmp eax,[ebp+10]
  // movzx eax,byte ptr [ebp-0D]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Inventory:RepairFromSlot+B8

07EC8007: 0F 45 C1              -  cmovne eax,ecx
07EC800A: 89 45 E0              -  mov [ebp-20],eax
07EC800D: 8B 75 E0              -  mov esi,[ebp-20]
07EC8010: C6 45 F3 00           -  mov byte ptr [ebp-0D],00
07EC8014: 83 EC 08              -  sub esp,08
07EC8017: 6A 65                 -  push 65
07EC8019: 6A 01                 -  push 01
07EC801B: E8 A0 9D F7 FF        -  call UnityEngine:Random:Range
07EC8020: 83 C4 10              -  add esp,10
07EC8023: B9 01 00 00 00        -  mov ecx,00000001
// ---------- INJECTING HERE ----------
07EC8028: 3B 45 10              -  cmp eax,[ebp+10]

ebp+10 has repair skill, eg 90
eax has random roll

07EC802B: 0F B6 45 F3           -  movzx eax,byte ptr [ebp-0D]
// ---------- DONE INJECTING  ----------
07EC802F: 0F 4E C1              -  cmovle eax,ecx
07EC8032: 88 45 F3              -  mov [ebp-0D],al
07EC8035: 85 C0                 -  test eax,eax
07EC8037: 0F 84 98 01 00 00     -  je Inventory:RepairFromSlot+265
07EC803D: 8B 0D C8 F6 90 07     -  mov ecx,[0790F6C8]
07EC8043: 41                    -  inc ecx
07EC8044: B8 C8 F6 90 07        -  mov eax,0790F6C8
07EC8049: 89 08                 -  mov [eax],ecx
07EC804B: 83 EC 0C              -  sub esp,0C
07EC804E: 6A 01                 -  push 01
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Always Repair to 100%"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : cms2015.exe
  Date   : 2016-11-19
  Author : justa_dude
}

define(address,Inventory:RepairFromSlot+19A)
define(bytes,D9 5E 1C 83 EC 0C)

[ENABLE]
{$lua}
LaunchMonoDataCollector()
mono_symbolLookupCallback("Inventory:RepairFromSlot")
{$asm}

 
 
assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fstp dword ptr [esi+1C]
mov [esi+1c],(float)1.0
  sub esp,0C
  jmp return

address:
  jmp code
  nop
return:

[DISABLE]
address:
  db bytes
  // fstp dword ptr [esi+1C]
  // sub esp,0C

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Inventory:RepairFromSlot+19A

07EC80EB: D9 E8              -  fld1 
07EC80ED: 83 EC 04           -  sub esp,04
07EC80F0: 83 EC 04           -  sub esp,04
07EC80F3: D9 1C 24           -  fstp dword ptr [esp]
07EC80F6: 83 EC 04           -  sub esp,04
07EC80F9: D9 1C 24           -  fstp dword ptr [esp]
07EC80FC: 83 EC 04           -  sub esp,04
07EC80FF: D9 1C 24           -  fstp dword ptr [esp]
07EC8102: E8 91 82 F6 FF     -  call UnityEngine:Mathf:Clamp
07EC8107: 83 C4 10           -  add esp,10
// ---------- INJECTING HERE ----------
07EC810A: D9 5E 1C           -  fstp dword ptr [esi+1C]

esi+1c has condtion after repair,
dword/float ranging from 0.0 to 1.0


07EC810D: 83 EC 0C           -  sub esp,0C
// ---------- DONE INJECTING  ----------
07EC8110: 68 30 01 00 00     -  push 00000130
07EC8115: E8 26 78 F7 FF     -  call UnityEngine:Input:GetKey
07EC811A: 83 C4 10           -  add esp,10
07EC811D: 85 C0              -  test eax,eax
07EC811F: 0F 85 28 01 00 00  -  jne Inventory:RepairFromSlot+2dd
07EC8125: E8 D6 DC F8 FF     -  call GameScript:Get
07EC812A: 89 45 C4           -  mov [ebp-3C],eax
07EC812D: E8 FE 44 F5 FF     -  call Localization:get_instance
07EC8132: 83 EC 08           -  sub esp,08
07EC8135: 68 70 9E 45 4B     -  push 4B459E70
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Every Item Type Can Be Repaired"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : cms2015.exe
  Date   : 2016-11-19
  Author : justa_dude
}

define(address,Inventory:GetItemRepairGroup+2B)
define(bytes,8B C7 8D 65 FC)

[ENABLE]
{$lua}
LaunchMonoDataCollector()
mono_symbolLookupCallback("Inventory:GetItemRepairGroup")
{$asm}

 
 
assert(address,bytes)
alloc(newmem,$1000)

label(code)
label(return)
label(not_zero)

newmem:

code:
  mov eax,edi
  lea esp,[ebp-04]
cmp eax,0
jne not_zero
mov eax,1
not_zero:
  jmp return

address:
  jmp code
return:

[DISABLE]
address:
  db bytes
  // mov eax,edi
  // lea esp,[ebp-04]

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: Inventory:GetItemRepairGroup+2B

07EC6CDA: 83 FF FF              -  cmp edi,-01
07EC6CDD: 75 04                 -  jne Inventory:GetItemRepairGroup+13
07EC6CDF: 33 FF                 -  xor edi,edi
07EC6CE1: EB 18                 -  jmp Inventory:GetItemRepairGroup+2b
07EC6CE3: 8B 45 08              -  mov eax,[ebp+08]
07EC6CE6: 8B 80 88 00 00 00     -  mov eax,[eax+00000088]
07EC6CEC: 39 78 0C              -  cmp [eax+0C],edi
07EC6CEF: 0F 86 0E 00 00 00     -  jbe Inventory:GetItemRepairGroup+33
07EC6CF5: 8D 44 B8 10           -  lea eax,[eax+edi*4+10]
07EC6CF9: 8B 38                 -  mov edi,[eax]
// ---------- INJECTING HERE ----------
07EC6CFB: 8B C7                 -  mov eax,edi
07EC6CFD: 8D 65 FC              -  lea esp,[ebp-04]

Items that can't be repaired will cause this function to return zero.
We force such items int0 repair group 1 (arbitrarily)

// ---------- DONE INJECTING  ----------
07EC6D00: 5F                    -  pop edi
07EC6D01: C9                    -  leave 
07EC6D02: C3                    -  ret 
07EC6D03: 6A 20                 -  push 20
07EC6D05: 68 78 06 00 00        -  push 00000678
07EC6D0A: E8 29 A2 AE FF        -  call 079B0F38
07EC6D0F: 00 55 8B              -  add [ebp-75],dl
07EC6D12: EC                    -  in al,dx
07EC6D13: 53                    -  push ebx
07EC6D14: 57                    -  push edi
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
