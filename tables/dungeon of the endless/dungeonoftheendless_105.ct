<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Detect Resources"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF8000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for food value read
aobscan(aobFoodRead,D9 80 3C 01 00 00 D9 5D F0)
alloc(memFoodRead,$1000)
label(newFoodRead)
label(exitFoodRead)
registersymbol(aobFoodRead)

// on food read
memFoodRead:
newFoodRead:
  mov [globals],eax
  db D9 80 3C 01 00 00
  jmp exitFoodRead
aobFoodRead:
  jmp newFoodRead
  nop
exitFoodRead:

[DISABLE]

// on food read
aobFoodRead:
  db D9 80 3C 01 00 00

// unregister food value read
unregistersymbol(aobFoodRead)
dealloc(memFoodRead)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Industry"</Description>
          <LastState Value="55835" Activated="0" RealAddress="2C275F40"/>
          <Color>FF0080</Color>
          <VariableType>Float</VariableType>
          <Address>globals</Address>
          <Offsets>
            <Offset>140</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Science"</Description>
          <LastState Value="55508" Activated="0" RealAddress="2C275F48"/>
          <Color>FF0080</Color>
          <VariableType>Float</VariableType>
          <Address>globals</Address>
          <Offsets>
            <Offset>148</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Food"</Description>
          <LastState Value="51065" Activated="0" RealAddress="2C275F3C"/>
          <Color>FF0080</Color>
          <VariableType>Float</VariableType>
          <Address>globals</Address>
          <Offsets>
            <Offset>13C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Dust"</Description>
          <LastState Value="338" Activated="0" RealAddress="2C275F44"/>
          <Color>FF0080</Color>
          <VariableType>Float</VariableType>
          <Address>globals</Address>
          <Offsets>
            <Offset>144</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"Developer"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>808080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>55</ID>
              <Description>"Detect Food Value Read (ESI) (broken)"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for food value read
aobscan(aobFoodRead,D9 86 3C 01 00 00)
alloc(memFoodRead,$1000)
label(newFoodRead)
label(exitFoodRead)
registersymbol(aobFoodRead)

// on food read
memFoodRead:
newFoodRead:
  mov [globals],esi
  db D9 86 3C 01 00 00
  jmp exitFoodRead
aobFoodRead:
  jmp newFoodRead
  nop
exitFoodRead:

[DISABLE]

// on food read
aobFoodRead:
  db D9 86 3C 01 00 00

// unregister food value read
unregistersymbol(aobFoodRead)
dealloc(memFoodRead)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"Detect Food Value Read (EAX)"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for food value read
aobscan(aobFoodRead,D9 80 3C 01 00 00 D9 5D F0)
alloc(memFoodRead,$1000)
label(newFoodRead)
label(exitFoodRead)
registersymbol(aobFoodRead)

// on food read
memFoodRead:
newFoodRead:
  mov [globals],eax
  db D9 80 3C 01 00 00
  jmp exitFoodRead
aobFoodRead:
  jmp newFoodRead
  nop
exitFoodRead:

[DISABLE]

// on food read
aobFoodRead:
  db D9 80 3C 01 00 00

// unregister food value read
unregistersymbol(aobFoodRead)
dealloc(memFoodRead)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"Detect Food Value Change"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for food value changing
aobscan(aobFoodChange,D9 9B 3C 01 00 00)
alloc(memFoodChange,$1000)
label(newFoodChange)
label(exitFoodChange)
registersymbol(aobFoodChange)

// on food change
memFoodChange:
newFoodChange:
  mov [globals],ebx
  db D9 9B 3C 01 00 00
  jmp exitFoodChange
aobFoodChange:
  jmp newFoodChange
  nop
exitFoodChange:

[DISABLE]

// on food change
aobFoodChange:
  db D9 9B 3C 01 00 00

// unregister food
unregistersymbol(aobFoodChange)
dealloc(memFoodChange)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>58</ID>
              <Description>"Detect Science Value Change"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for science value changing
aobscan(aobScienceChange,D9 9B 48 01 00 00)
alloc(memScienceChange,$1000)
label(newScienceChange)
label(exitScienceChange)
registersymbol(aobScienceChange)

// on science change
memScienceChange:
newScienceChange:
  mov [globals],ebx
  db D9 9B 48 01 00 00
  jmp exitScienceChange
aobScienceChange:
  jmp newScienceChange
  nop
exitScienceChange:

[DISABLE]

// on science change
aobScienceChange:
  db D9 9B 48 01 00 00

// unregister science
unregistersymbol(aobScienceChange)
dealloc(memScienceChange)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"Detect Industry Value Change"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for industry value changing
aobscan(aobIndustryChange,D9 9B 40 01 00 00)
alloc(memIndustryChange,$1000)
label(newIndustryChange)
label(exitIndustryChange)
registersymbol(aobIndustryChange)

// on industry change
memIndustryChange:
newIndustryChange:
  mov [globals],ebx
  db D9 9B 40 01 00 00
  jmp exitIndustryChange
aobIndustryChange:
  jmp newIndustryChange
  nop
exitIndustryChange:

[DISABLE]

// on industry change
aobIndustryChange:
  db D9 9B 40 01 00 00

// unregister industry
unregistersymbol(aobIndustryChange)
dealloc(memIndustryChange)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>60</ID>
              <Description>"Detect Dust Value Change"</Description>
              <LastState Activated="0"/>
              <Color>FF8000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for dust value changing
aobscan(aobDustChange,D9 9B 44 01 00 00)
alloc(memDustChange,$1000)
label(newDustChange)
label(exitDustChange)
registersymbol(aobDustChange)

// on dust change
memDustChange:
newDustChange:
  mov [globals],ebx
  db D9 9B 44 01 00 00
  jmp exitDustChange
aobDustChange:
  jmp newDustChange
  nop
exitDustChange:

[DISABLE]

// on dust change
aobDustChange:
  db D9 9B 44 01 00 00

// unregister dust
unregistersymbol(aobDustChange)
dealloc(memDustChange)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Cheats"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF8000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]

// scan for health check code
aobscan(onHealthUpdate,D9 5F 60 D9 47 60)
alloc(newmem,$1000)
label(code)
label(enemy)
label(friend)
label(notsure)
label(skip)
label(return)
registersymbol(onHealthUpdate)

newmem:
code:
  cmp dword ptr [edi+28],0
  // likely an enemy
  je enemy
  // otherwise, it is likely a friend
  jmp friend

friend:
  // if god mode is enabled
  cmp dword ptr [globals+100],1
  // otherwise, skip everything
  jne skip
  // increment friend counter
  inc dword ptr [globals+10C]

  // god mode code
  // ok, see if new value is higher (healing, level-up) and allow it
  push eax // will over-write with FPU comparison status bits
  fcom dword ptr [edi+60]
  fnstsw ax
  fwait
  sahf
  pop eax
  ja skip // was increasing, allow new value
  fstp st(0) // discard new (lower) value
  fld dword ptr [edi+60] // load existing value
  jmp skip // continue and store

enemy:
  // if one hit kill mode is enabled
  cmp dword ptr [globals+104],1
  // otherwise, skip everything
  jne skip
  // increment enemy counter
  inc dword ptr [globals+110]

  // one hit kill mode code
  fstp st(1)
  fld1
  jmp skip

notsure:
  // increment unsure counter
  inc dword ptr [globals+108]
  jmp skip

skip:
  db D9 5F 60 D9 47 60
  jmp return

onHealthUpdate:
  jmp code
  nop
return:

[DISABLE]

onHealthUpdate:
  db D9 5F 60 D9 47 60

unregistersymbol(onHealthUpdate)
dealloc(newmem)

/*
target array of bytes, as of 0.8.7

rulers
00 04 08 0C 10 14 18 1C 20 24 28 2C 30 34 38 3C 40 44 48 4C 50 54 58 5C 60 64 68 6C 70 74 78 7C 80 84 88 8C 90 94 98 9C A0 A4 A8 AC B0 B4 B8 BC C0 C4 C8 CC D0 D4 D8 DC E0 E4 E8 EC
00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B

friend
28 EB 72 0E A0 67 68 3B B2 BC FD FF 04 D7 AC 3C 20 DF 48 2D 50 5D 46 04 58 82 06 40 00 DD D0 43 00 EA EA 41 00 5C 5F 44 00 EA EA 41 00 3B 5B 2D 68 9B 60 2D 78 15 93 4C C8 2D 93 4C
28 EB 72 0E F8 66 68 3B DE AA FD FF 5C 01 84 3C A0 DD 05 2D 50 5D 46 04 E0 F1 F7 2D 40 8C D1 48 00 1A 4E 2D 00 5C 5F 44 00 1A 4E 2D 80 53 5A 2D 28 80 2A 4A 80 13 93 4C F8 28 93 4C

enemy
28 EB 72 0E 78 B6 74 3B 00 00 00 00 00 00 00 00 40 19 9D 4A 50 5D 46 04 D8 29 72 4C 60 4E 3C 4C B0 74 BA 4C 00 5C 5F 44 00 00 00 00 40 29 4B 2D 70 A3 A4 48 00 00 00 00 00 00 00 00
28 EB 72 0E 48 B6 74 3B 00 00 00 00 00 00 00 00 80 67 E6 47 50 5D 46 04 98 28 72 4C E0 0C 29 4A 00 70 BA 4C 00 5C 5F 44 00 00 00 00 00 CF 50 2D C0 53 EF 4B 00 00 00 00 00 00 00 00
28 EB 72 0E 30 18 AD 0E 00 00 00 00 00 00 00 00 A0 76 5C 2D 50 5D 46 04 E8 B3 E6 43 A0 63 91 4C 98 68 07 40 00 5C 5F 44 00 00 00 00 E0 89 5F 2D 98 73 4B 48 00 00 00 00 00 00 00 00
28 EB 72 0E F8 6C 68 3B 62 D1 FC FF 60 42 C2 38 C0 8E 5D 2D 50 5D 46 04 68 B1 E6 43 E0 79 E7 49 78 65 FD 3F 00 5C 5F 44 00 00 00 00 60 E3 65 2D A0 A5 08 49 00 00 00 00 00 00 00 00
*/
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"God Mode"</Description>
          <LastState Activated="0"/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]
globals+100:
  dd 1

[DISABLE]
globals+100:
  dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Two Hit Kill"</Description>
          <LastState Activated="0"/>
          <Color>FF8000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]
globals+104:
  dd 1

[DISABLE]
globals+104:
  dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"Developer"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>808080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>48</ID>
              <Description>"Bad Counter"</Description>
              <LastState Value="0" Activated="0" RealAddress="305A0108"/>
              <Color>FF0080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+108</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"Friend Counter"</Description>
              <LastState Value="39" Activated="0" RealAddress="305A010C"/>
              <Color>FF0080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+10C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"Enemy Counter"</Description>
              <LastState Value="9" Activated="0" RealAddress="305A0110"/>
              <Color>FF0080</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+110</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>305A0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>powerBase</Name>
      <Address>0A980000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Look in the script for info on resources.
Attributes of characters floats that are easy to find while levelling them,
but the code is generic and each is stored at offset 0x18 in its own structure.
The code that accesses them accesses a lot of other values also.  (Max?) Health
seems to be at an offset 44 into another structure but called for enemies and
possibly objects or other things too.
</Comments>
</CheatTable>
