<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>41</ID>
      <Description>"no clip"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(coordWriteAOB,Unigine_x64.dll,F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48 48)
registersymbol(coordWriteAOB)
aobscanmodule(vDirectionReadAOB,Unigine_x64.dll,F3 44 0F 10 81 D4 02 00 00)
registersymbol(vDirectionReadAOB)
aobscanmodule(vZMagnitudeReadAOB,Unigine_x64.dll,0F 28 41 50 0F 29 87 20 02 00 00)
registersymbol(vZMagnitudeReadAOB)

///

label(fMoveSpeed)
registersymbol(fMoveSpeed)
label(pVDirection)
registersymbol(pVDirection)
label(pVector)
registersymbol(pVector)

///

alloc(newmem,2048,coordWriteAOB) //"Unigine_x64.dll"+451E34)
label(returnhere)
label(originalcode)
label(exit)
label(movekeyschk)
label(endmovekeyschk)

label(newmem2) //,2048,vDirectionReadAOB) //"Unigine_x64.dll"+3B2369)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6) //,2048,vZMagnitudeReadAOB) //"Unigine_x64.dll"+3B1B59)
label(returnhere6)
label(originalcode6)
label(exit6)

///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push r9
movss [esp],xmm13

cmp [pVector],rax
jne originalcode

push rax
push rbx
push rcx
push rdx
push rsi
push rdi
push rbp
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15

movekeyschk:
mov dword ptr [fMoveSpeed],(float)0.2
mov rcx,10 //Shift
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov dword ptr [fMoveSpeed],(float)0.4

@@:
mov rcx,12 //Alt
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov dword ptr [fMoveSpeed],(float)0.1

@@:
mov rcx,'W'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mov rax,[pVector]
addps  xmm0,[rax+40]
movaps [rax+40],xmm0

@@:
mov rcx,'S'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
mulss xmm0,[fMoveSpeed+4]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mov rax,[pVector]
addps  xmm0,[rax+40]
movaps [rax+40],xmm0

@@:
mov rcx,'A'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
shufps xmm0,xmm0,01
mulss xmm0,[fMoveSpeed+4]
mov rax,[pVector]
addps  xmm0,[rax+40]
movq [rax+40],xmm0

@@:
mov rcx,'D'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mulss xmm0,[fMoveSpeed+4]
shufps xmm0,xmm0,01
mov rax,[pVector]
addps  xmm0,[rax+40]
movq [rax+40],xmm0

@@:
mov rcx,'R'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,[pVector]
movss xmm0,[rax+48]
addss xmm0,[fMoveSpeed]
movss [rax+48],xmm0

@@:
mov rcx,'F'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,[pVector]
movss xmm0,[rax+48]
subss xmm0,[fMoveSpeed]
movss [rax+48],xmm0

@@:

endmovekeyschk:
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rbp
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

movss xmm13,[esp]
pop r9
jmp exit

originalcode:
movss xmm13,[esp]
pop r9
movss [rax+40],xmm0
addss xmm1,[rax+44]
movss [rax+44],xmm1
addss xmm2,[rax+48]
movss [rax+48],xmm2

exit:
jmp returnhere

///

newmem2:
mov [pVDirection],rcx

originalcode2:
movss xmm8,[rcx+000002D4]

exit2:
jmp returnhere2

///

newmem6:
mov [pVector],rcx

originalcode6:
movaps xmm0,[rcx+50]
movaps [rdi+00000220],xmm0

exit6:
jmp returnhere6

///
fMoveSpeed:
dd (float)0.2
dd (float)-1
pVDirection:
dq 0
pVector:
dq 0
///

coordWriteAOB: //"Unigine_x64.dll"+451E34:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
returnhere:

vDirectionReadAOB: //"Unigine_x64.dll"+3B2369:
jmp newmem2
nop
nop
nop
nop
returnhere2:

vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
jmp newmem6
nop
nop
nop
nop
nop
nop
returnhere6:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
coordWriteAOB: //"Unigine_x64.dll"+451E34:
db F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48
//Alt: movss [rax+40],xmm0
//Alt: addss xmm1,[rax+44]
//Alt: movss [rax+44],xmm1
//Alt: addss xmm2,[rax+48]
//Alt: movss [rax+48],xmm2
unregistersymbol(coordWriteAOB)
vDirectionReadAOB: //"Unigine_x64.dll"+3B2369:
db F3 44 0F 10 81 D4 02 00 00
//Alt: movss xmm8,[rcx+000002D4]
unregistersymbol(vDirectionReadAOB)
vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
db 0F 28 41 50 0F 29 87 20 02 00 00
//Alt: movaps xmm0,[rcx+50]
//Alt: movaps [rdi+00000220],xmm0
unregistersymbol(vZMagnitudeReadAOB)

unregistersymbol(fMoveSpeed)
unregistersymbol(pVDirection)
unregistersymbol(pVector)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>16</Key>
            <Key>84</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Deactivate</Action>
          <Keys>
            <Key>17</Key>
            <Key>84</Key>
          </Keys>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>""</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"No description"</Description>
          <LastState Value="5.17934227939811E-315" Activated="0" RealAddress="5DB1B454"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>5DB1B454</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"No description"</Description>
          <LastState Value="5.19083528385823E-315" Activated="0" RealAddress="5DB1B4D4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>5DB1B4D4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"No description"</Description>
          <LastState Value="2.71730230051047E-287" Activated="0" RealAddress="049816E4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>049816E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"No description"</Description>
          <LastState Value="1.13681510164942E-87" Activated="0" RealAddress="049828E4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>049828E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"No description"</Description>
          <LastState Value="2.28984459537867E192" Activated="0" RealAddress="04983AE4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>04983AE4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"No description"</Description>
          <LastState Value="0" Activated="0" RealAddress="020FE2A4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>020FE2A4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"No description"</Description>
          <LastState Value="9.58286749274336E-299" Activated="0" RealAddress="020FE964"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>020FE964</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"No description"</Description>
          <LastState Value="0.000728656885046186" Activated="0" RealAddress="5DB1B534"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>5DB1B534</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(fVSpeed)
registersymbol(fVSpeed)

alloc(newmem,2048,"Unigine_x64.dll"+3B1B5D) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fld dword ptr [fVSpeed],
fstp qword ptr [rdi+220]
jmp exit
movaps xmm0,[edi+220]
movaps [ecx+50],xmm0

originalcode:
movaps [rdi+00000220],xmm0

exit:
jmp returnhere

///
fVSpeed:
dd (float)100
///

"Unigine_x64.dll"+3B1B5D:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Unigine_x64.dll"+3B1B5D:
db 0F 29 87 20 02 00 00
//Alt: movaps [rdi+00000220],xmm0

unregistersymbol(fVSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"No Description"</Description>
          <LastState Value="3256167010" Activated="0" RealAddress="5DB1B660"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>5DB1B660</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No description"</Description>
          <LastState Value="9.54898105934373E-313" Activated="0" RealAddress="020FE2F4"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>020FE2F4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"No description"</Description>
          <LastState Value="0.000728656885046186" Activated="0" RealAddress="5DB1B534"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>5DB1B534</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No description"</Description>
          <LastState Value="??" Activated="0" RealAddress="753EAC54"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>753EAC54</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>73</Key>
              </Keys>
              <Value>100</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vectorZReadAOB,Unigine_x64.dll,0F 28 41 50 0F 29 87 20 02 00 00)
registersymbol(vectorZReadAOB)

label(pVector)
registersymbol(pVector)

alloc(newmem,2048,vectorZReadAOB) //"Unigine_x64.dll"+3B1B59)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pVector],rcx

originalcode:
movaps xmm0,[rcx+50]
movaps [rdi+00000220],xmm0

exit:
jmp returnhere

///
pVector:
///

vectorZReadAOB: //"Unigine_x64.dll"+3B1B59:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
vectorZReadAOB: //"Unigine_x64.dll"+3B1B59:
db 0F 28 41 50 0F 29 87 20 02 00 00
//Alt: movaps xmm0,[rcx+50]
//Alt: movaps [rdi+00000220],xmm0
unregistersymbol(vectorZReadAOB)

unregistersymbol(pVector)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>14</ID>
              <Description>"x"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000050"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>50</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>79</Key>
                  </Keys>
                  <Value>2</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"y"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000054"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>54</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"z"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000058"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>58</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"No description"</Description>
          <LastState Value="-37.29138947" Activated="0" RealAddress="5DB1B5E0"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>5DB1B5E0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"No description"</Description>
          <LastState Value="52.56742096" Activated="0" RealAddress="5DB1B5E4"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>5DB1B5E4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"No Description"</Description>
          <LastState Value="-3.367006302" Activated="0" RealAddress="5DB1B5D0"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>5DB1B5D0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vZMagnitudeReadAOB,Unigine_x64.dll,0F 28 41 50 0F 29 87 20 02 00 00)
registersymbol(vZMagnitudeReadAOB)

label(pVector)
registersymbol(pVector)

alloc(newmem6,2048,vZMagnitudeReadAOB) //"Unigine_x64.dll"+3B1B59)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pVector],rcx

originalcode6:
movaps xmm0,[rcx+50]
movaps [rdi+00000220],xmm0

exit6:
jmp returnhere6

///
pVector:
dq 0
///

vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
jmp newmem6
nop
nop
nop
nop
nop
nop
returnhere6:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
db 0F 28 41 50 0F 29 87 20 02 00 00
//Alt: movaps xmm0,[rcx+50]
//Alt: movaps [rdi+00000220],xmm0
unregistersymbol(vZMagnitudeReadAOB)

unregistersymbol(pVector)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>21</ID>
              <Description>"x"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000050"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>50</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>79</Key>
                  </Keys>
                  <Value>2</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"y"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000054"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>54</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"z"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000058"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>58</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"direction"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vDirectionReadAOB,Unigine_x64.dll,F3 44 0F 10 81 D4 02 00 00)
registersymbol(vDirectionReadAOB)

label(pVDirection)
registersymbol(pVDirection)

alloc(newmem2,2048,vDirectionReadAOB) //"Unigine_x64.dll"+3B2369)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pVDirection],rcx

originalcode2:
movss xmm8,[rcx+000002D4]

exit2:
jmp returnhere2

///
pVDirection:
dq 0
///

vDirectionReadAOB: //"Unigine_x64.dll"+3B2369:
jmp newmem2
nop
nop
nop
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem2)
vDirectionReadAOB: //"Unigine_x64.dll"+3B2369:
db F3 44 0F 10 81 D4 02 00 00
//Alt: movss xmm8,[rcx+000002D4]
unregistersymbol(vDirectionReadAOB)

unregistersymbol(pVDirection)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>27</ID>
              <Description>"x"</Description>
              <LastState Value="??" Activated="0" RealAddress="000002D0"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVDirection</Address>
              <Offsets>
                <Offset>2D0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>29</ID>
              <Description>"y"</Description>
              <LastState Value="??" Activated="0" RealAddress="000002D4"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVDirection</Address>
              <Offsets>
                <Offset>2D4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"z"</Description>
              <LastState Value="??" Activated="0" RealAddress="000002D8"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVDirection</Address>
              <Offsets>
                <Offset>2D8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vectorsWriteAOB,Unigine_x64.dll,0F 29 48 50 0F 28 89 90 00 00 00)
registersymbol(vectorsWriteAOB)

alloc(newmem,2048,vectorsWriteAOB) //"Unigine_x64.dll"+4BE594)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
movaps [rax+50],xmm1
movaps xmm1,[rcx+00000090]

exit:
jmp returnhere

///

vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
db 0F 29 48 50 0F 28 89 90 00 00 00
//Alt: movaps [rax+50],xmm1
//Alt: movaps xmm1,[rcx+00000090]
unregistersymbol(vectorsWriteAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vectorsWriteAOB,Unigine_x64.dll,0F 29 48 50 0F 28 89 90 00 00 00)
registersymbol(vectorsWriteAOB)

label(fMoveSpeed)
registersymbol(fMoveSpeed)
label(fMoveSpeedCal)

alloc(newmem,2048,vectorsWriteAOB) //"Unigine_x64.dll"+4BE594)
label(returnhere)
label(originalcode)
label(exit)
label(endkeychk)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movaps [fMoveSpeedCal+8],xmm1
push rcx

push rax
push rbx
push rcx
push rdx
push rsi
push rdi
push rbp
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15

mov rcx,'W'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
fld dword ptr [fMoveSpeed]
fstp dword ptr [fMoveSpeedCal]
mov rcx,[pVDirection]
movss xmm1,[fMoveSpeed]
shufps xmm1,xmm1,00
mulps xmm1,[rcx+2d0]
movaps [fMoveSpeedCal+8],xmm1

@@:
mov rcx,'S'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
fld dword ptr [fMoveSpeed]
fmul dword ptr [fMoveSpeedCal+4]
fstp dword ptr [fMoveSpeedCal]
mov rcx,[pVDirection]
movss xmm1,[fMoveSpeed]
shufps xmm1,xmm1,00
mulps xmm1,[rcx+2d0]
movaps [fMoveSpeedCal+8],xmm1

@@:
mov rcx,'A'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f

@@:
mov rcx,'D'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne endkeychk

endkeychk:
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rbp
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

/*mov rcx,[pVDirection]
movss xmm1,[fMoveSpeedCal]
shufps xmm1,xmm1,00
mulps xmm1,[rcx+2d0]*/

originalcode:
pop rcx
movaps xmm1,[fMoveSpeedCal+8]
movaps [rax+50],xmm1
movaps xmm1,[rcx+00000090]

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)10
fMoveSpeedCal:
dd 0
dd (float)-1
///

vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
db 0F 29 48 50 0F 28 89 90 00 00 00
//Alt: movaps [rax+50],xmm1
//Alt: movaps xmm1,[rcx+00000090]
unregistersymbol(vectorsWriteAOB)

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>25</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vectorsWriteAOB,Unigine_x64.dll,0F 29 48 50 0F 28 89 90 00 00 00)
registersymbol(vectorsWriteAOB)

label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,vectorsWriteAOB) //"Unigine_x64.dll"+4BE594)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rcx
mov rcx,[pVDirection]
movss xmm1,[fMoveSpeed]
shufps xmm1,xmm1,00
mulps xmm1,[rcx+2d0]

originalcode:
pop rcx
movaps [rax+50],xmm1
movaps xmm1,[rcx+00000090]

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)-10
///

vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
vectorsWriteAOB: //"Unigine_x64.dll"+4BE594:
db 0F 29 48 50 0F 28 89 90 00 00 00
//Alt: movaps [rax+50],xmm1
//Alt: movaps xmm1,[rcx+00000090]
unregistersymbol(vectorsWriteAOB)

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(vZMagnitudeReadAOB,Unigine_x64.dll,0F 28 41 50 0F 29 87 20 02 00 00)
registersymbol(vZMagnitudeReadAOB)

label(pVector)
registersymbol(pVector)
label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,vZMagnitudeReadAOB) //"Unigine_x64.dll"+3B1B59)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pVector],rcx
push rcx
mov rcx,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[rcx+2d0]

originalcode:
pop rcx
//movaps xmm0,[rcx+50]
movaps [rdi+00000220],xmm0

exit:
jmp returnhere

///
pVector:
dq 0
fMoveSpeed:
dd (float)-10
///

vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
vZMagnitudeReadAOB: //"Unigine_x64.dll"+3B1B59:
db 0F 28 41 50 0F 29 87 20 02 00 00
//Alt: movaps xmm0,[rcx+50]
//Alt: movaps [rdi+00000220],xmm0
unregistersymbol(vZMagnitudeReadAOB)

unregistersymbol(pVector)
unregistersymbol(fMoveSpeed)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>32</ID>
              <Description>"x"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000050"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>50</Offset>
              </Offsets>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>79</Key>
                  </Keys>
                  <Value>2</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"y"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000054"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>54</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>34</ID>
              <Description>"z"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000058"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pVector</Address>
              <Offsets>
                <Offset>58</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,"Unigine_x64.dll"+3B1E0F) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rcx
mov rcx,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[rcx+2d0]

originalcode:
pop rcx
movaps [rbx+50],xmm0
movss xmm10,[rsp+38]

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)-10
///

"Unigine_x64.dll"+3B1E0F:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Unigine_x64.dll"+3B1E0F:
db 0F 29 43 50 F3 44 0F 10 54 24 38
//Alt: movaps [rbx+50],xmm0
//Alt: movss xmm10,[rsp+38]

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,"Unigine_x64.dll"+88C90) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[pVDirection]
movss xmm1,[fMoveSpeed]
shufps xmm1,xmm1,00
mulps xmm1,[rax+2d0]

originalcode:
//movaps xmm1,[r8]
mov rax,rcx

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)-10
///

"Unigine_x64.dll"+88C90:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Unigine_x64.dll"+88C90:
db 41 0F 28 08 48 8B C1
//Alt: movaps xmm1,[r8]
//Alt: mov rax,rcx

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,"Unigine_x64.dll"+3B1E0F) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rcx,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[rcx+2d0]

originalcode:
movaps [rbx+50],xmm0
movss xmm10,[rsp+38]

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)-10
///

"Unigine_x64.dll"+3B1E0F:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Unigine_x64.dll"+3B1E0F:
db 0F 29 43 50 F3 44 0F 10 54 24 38
//Alt: movaps [rbx+50],xmm0
//Alt: movss xmm10,[rsp+38]

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"No description"</Description>
          <LastState Value="1.898960253E28" Activated="0" RealAddress="70A33750"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>70A33750</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(coordWriteAOB,Unigine_x64.dll,F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48 48)
registersymbol(coordWriteAOB)

alloc(newmem,2048,coordWriteAOB) //"Unigine_x64.dll"+451E34)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//movss [rax+40],xmm0

exit:
jmp returnhere

///

coordWriteAOB: //"Unigine_x64.dll"+451E34:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
coordWriteAOB: //"Unigine_x64.dll"+451E34:
db F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48
//Alt: movss [rax+40],xmm0
//Alt: addss xmm1,[rax+44]
//Alt: movss [rax+44],xmm1
//Alt: addss xmm2,[rax+48]
//Alt: movss [rax+48],xmm2
unregistersymbol(coordWriteAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(coordWriteAOB,Unigine_x64.dll,F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48 48)
registersymbol(coordWriteAOB)

label(fMoveSpeed)
registersymbol(fMoveSpeed)

alloc(newmem,2048,coordWriteAOB) //"Unigine_x64.dll"+451E34)
label(returnhere)
label(originalcode)
label(exit)
label(movekeyschk)
label(endmovekeyschk)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push r9
movss [esp],xmm13

cmp [pVector],rax
jne originalcode

push rax
push rbx
push rcx
push rdx
push rsi
push rdi
push rbp
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15

movekeyschk:

mov rcx,'W'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mov rax,[pVector]
addps  xmm0,[rax+40]
movaps [rax+40],xmm0

@@:
mov rcx,'S'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
mulss xmm0,[fMoveSpeed+4]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mov rax,[pVector]
addps  xmm0,[rax+40]
movaps [rax+40],xmm0

@@:
mov rcx,'A'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
shufps xmm0,xmm0,01
mulss xmm0,[fMoveSpeed+4]
mov rax,[pVector]
addps  xmm0,[rax+40]
movq [rax+40],xmm0

@@:
mov rcx,'D'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov r9,[pVDirection]
movss xmm0,[fMoveSpeed]
shufps xmm0,xmm0,00
mulps xmm0,[r9+2d0]
mulss xmm0,[fMoveSpeed+4]
shufps xmm0,xmm0,01
mov rax,[pVector]
addps  xmm0,[rax+40]
movq [rax+40],xmm0

@@:
mov rcx,'R'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,[pVector]
movss xmm0,[rax+48]
addss xmm0,[fMoveSpeed]
movss [rax+48],xmm0

@@:
mov rcx,'F'
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov rax,[pVector]
movss xmm0,[rax+48]
subss xmm0,[fMoveSpeed]
movss [rax+48],xmm0

@@:

endmovekeyschk:
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rbp
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx
pop rax

movss xmm13,[esp]
pop r9
jmp exit

originalcode:
movss xmm13,[esp]
pop r9
movss [rax+40],xmm0
addss xmm1,[rax+44]
movss [rax+44],xmm1
addss xmm2,[rax+48]
movss [rax+48],xmm2

exit:
jmp returnhere

///
fMoveSpeed:
dd (float)0.2
dd (float)-1
///

coordWriteAOB: //"Unigine_x64.dll"+451E34:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
coordWriteAOB: //"Unigine_x64.dll"+451E34:
db F3 0F 11 40 40 F3 0F 58 48 44 F3 0F 11 48 44 F3 0F 58 50 48 F3 0F 11 50 48
//Alt: movss [rax+40],xmm0
//Alt: addss xmm1,[rax+44]
//Alt: movss [rax+44],xmm1
//Alt: addss xmm2,[rax+48]
//Alt: movss [rax+48],xmm2
unregistersymbol(coordWriteAOB)

unregistersymbol(fMoveSpeed)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>vectorZReadAOB</Name>
      <Address> 7FEEA221B59</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>coordWriteAOB</Name>
      <Address> 7FEE8BC1E34</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vDirectionReadAOB</Name>
      <Address> 7FEE8B22369</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vZMagnitudeReadAOB</Name>
      <Address> 7FEE8B21B59</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fMoveSpeed</Name>
      <Address>7FEE876035A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pVDirection</Name>
      <Address>7FEE8760362</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pVector</Name>
      <Address>7FEE876036A</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5620085#5620085</Comments>
</CheatTable>
