<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>123</ID>
      <Description>"Script: FindUnitOwner (ENABLE THIS FIRST)"</Description>
      <Options moHideChildren="1" moBindActivation="1" />
      <LastState Activated="1" />
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(globals,$100000)

{
GLOBALS:

  Cheat flags (1 to enable cheat)
      1000: God Mode (HUMANPLAYER)
      1004: One Hit Kill (ENEMYPLAYER)
      1008: One Hit Kill (AIPLAYER)
      100c: Fast Build

  Pointers
      0000: Last Build Structure (HUMANPLAYER)
      0004: Last Build Unit (?)


  FindUnitOwner()

  Arguments:
    ECX: Unit Pointer

  Return Values (in EAX):
    0: HUMANPLAYER
    1: ENEMYPLAYER
    -1: AIPLAYER
    -2: Unknown

  Changed Registers:
    EAX
    FLAGS

  Notes: Thanks to Recifens's excellent scripts and table I was able to see how
         to figure this out pretty easily.  See comment at bottom for
         explanation.



}

[enable]


label(FindUnitOwner)
registersymbol(FindUnitOwner)
label(FindUnitOwner_HUMAN)
label(FindUnitOwner_ENEMY)
label(FindUnitOwner_AI)
label(FindUnitOwner_UNKNOWN)

globals+10000:
FindUnitOwner: // unit pointer in ecx, result in eax
  test ecx,ecx
  jz FindUnitOwner_UNKNOWN

  mov ecx,[ecx+8] // Pointer1
  test ecx,ecx
  jz FindUnitOwner_UNKNOWN

  mov ecx,[ecx+68] // Pointer2
  test ecx,ecx
  jz FindUnitOwner_UNKNOWN

  mov ecx,[ecx+68] // Pointer3
  test ecx,ecx
  jz FindUnitOwner_UNKNOWN

  mov ecx,[ecx+14] // Pointer4
  test ecx,ecx
  jz FindUnitOwner_UNKNOWN

  cmp [ecx],'HUMA'
  je FindUnitOwner_HUMAN

  cmp [ecx],'ENEM'
  je FindUnitOwner_ENEMY

  cmp [ecx],'AIPL'
  je FindUnitOwner_AI

  // unknown, fall through to label returning -2

FindUnitOwner_UNKNOWN:
  mov eax,-2
  ret

FindUnitOwner_HUMAN:
  xor eax,eax
  ret

FindUnitOwner_ENEMY:
  mov eax,1
  ret

FindUnitOwner_AI:
  mov eax,-1
  ret

[disable]
unregistersymbol(FindUnitOwner)


{
  [ECX+8]: Pointer1
  [Pointer1+68]: Pointer2
  [Pointer2+68]: Pointer3 (was +64 for Recifense's script)
  [Pointer3+14]: Pointer4
  [Pointer4]: 'HUMANPLAYER'  (or 'ENEMYPLAYER', 'AIPLAYER'

  Also to note:
    ECX:
      0008: Pointer1
      000C: Pointer or the like for AI and player, null for enemy?
      0014: Health (float)
      0018: Max Health (float) (weird for AI and Enemy?)
    Pointer1:
      0060: SAME pointer for HUMANPLAYER, NULL for AI and ENEMY
      0064: DIFF pointers for HUMANPLAYER, NULL for ai and enemy
      0068: Pointer2
    Pointer2:
      0064: &lt;WAS POINTER FOR RECIFENSE, now 01000000 for me&gt;
      0068: Pointer3
    Pointer3:
      0014: Pointer4 (point to string 'HUMANPLAYER', 'ENEMYPLAYER', 'AIPLAYER'
      0028: NULL for AI and ENEMY, 08000208 for player
      002C: 0 for AI and ENEMY, 520 for player
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>127</ID>
          <Description>"Script: HP Update"</Description>
          <LastState Activated="1" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version:
  Date   : 2015-10-18
  Author : Jason

  This seems to be called when updating a unit's health, when initially put
  down on the map, when constructing, when repairing and when taking damage.

  EDI is unit pointer, current health is in [edi+14].  Max health is at
  [edi+18].  The injection loads xmm3 is from [ebp+0C] and is the health to add
  (negative for damage).
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_HPUpdate,InstanceServerG.exe,F3 0F 10 5D 0C 0F 2F) // should be unique
alloc(newmem,$1000)

label(code)
label(isHUMANPLAYER)
label(isENEMYPLAYER)
label(isAIPLAYER)
label(done)
label(return)

newmem:

code:
  push eax
  push ecx

  mov ecx,edi // unit pointer
  call FindUnitOwner
  test eax,eax
  jz isHUMANPLAYER

  cmp eax,1
  je isENEMYPLAYER

  cmp eax,-1
  je isAIPLAYER

  inc dword ptr [globals+400C]
  jmp done

isHUMANPLAYER:
  inc dword ptr [globals+4000]
  cmp dword ptr [globals+1000],1
  jne done // God Mode not enabled

  // ok, check to see if damage is negative, we don't want to screw with it if not
  mov eax,[ebp+0C]
  test eax,eax
  jns done

  // set change in health to 0
  xor eax,eax
  mov [ebp+0C],eax
  jmp done

isENEMYPLAYER:
  inc dword ptr [globals+4004]
  cmp dword ptr [globals+1004],1
  jne done // One Hit Kill not enabled for ENEMY

  mov eax,[ebp+0C]
  test eax,eax
  jns done // make sure change in health is negative already or game could crash

  movss xmm3,[ebp+0C]
  subss xmm3,[edi+18] // add unit's total health in damage
  movss [ebp+0C],xmm3
  jmp done

isAIPLAYER:
  inc dword ptr [globals+4008]
  cmp dword ptr [globals+1008],1
  jne done // One Hit Kill not enabled for AI

  mov eax,[ebp+0C]
  test eax,eax
  jns done // make sure change in health is negative already or game could crash

  movss xmm3,[ebp+0C]
  subss xmm3,[edi+18] // add unit's total health in damage
  movss [ebp+0C],xmm3
  jmp done

done:
  pop ecx
  pop eax
  movss xmm3,[ebp+0C]
  jmp return

INJECT_HPUpdate:
  jmp code
return:
registersymbol(INJECT_HPUpdate)

[DISABLE]

INJECT_HPUpdate:
  db F3 0F 10 5D 0C

unregistersymbol(INJECT_HPUpdate)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2B44D1

"InstanceServerG.exe"+2B44B0: 3D 38 6A 3B 01           -  cmp eax,InstanceServerG.exe+FB6A38
"InstanceServerG.exe"+2B44B5: 74 68                    -  je InstanceServerG.exe+2B451F
"InstanceServerG.exe"+2B44B7: 8B 40 04                 -  mov eax,[eax+04]
"InstanceServerG.exe"+2B44BA: 85 C0                    -  test eax,eax
"InstanceServerG.exe"+2B44BC: 75 F2                    -  jne InstanceServerG.exe+2B44B0
"InstanceServerG.exe"+2B44BE: 33 C9                    -  xor ecx,ecx
"InstanceServerG.exe"+2B44C0: 6A 01                    -  push 01
"InstanceServerG.exe"+2B44C2: 6A 02                    -  push 02
"InstanceServerG.exe"+2B44C4: E8 D7 75 83 00           -  call InstanceServerG.exe+AEBAA0
"InstanceServerG.exe"+2B44C9: F3 0F 10 0D FC E6 1F 01  -  movss xmm1,[InstanceServerG.exe+DFE6FC] // 0.0001
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2B44D1: F3 0F 10 5D 0C           -  movss xmm3,[ebp+0C]    // load change in health
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2B44D6: 0F 2F CB                 -  comiss xmm1,xmm3       // 0.0001 &lt; deltaHealth?
"InstanceServerG.exe"+2B44D9: 72 13                    -  jb InstanceServerG.exe+2B44EE // deltaHealth &gt;= 0.0001, skip to make change
"InstanceServerG.exe"+2B44DB: 0F 28 C3                 -  movaps xmm0,xmm3       // xmm0 = deltaHealth
"InstanceServerG.exe"+2B44DE: 0F 57 05 C0 1E 20 01     -  xorps xmm0,[InstanceServerG.exe+E01EC0] // 80000000 (flip sign)
"InstanceServerG.exe"+2B44E5: 0F 2F C8                 -  comiss xmm1,xmm0       // 0.0001 &lt; -deltaHealth?
"InstanceServerG.exe"+2B44E8: 0F 83 82 05 00 00        -  jae InstanceServerG.exe+2B4A70 // jump if change in health is too small
"InstanceServerG.exe"+2B44EE: F3 0F 10 47 14           -  movss xmm0,[edi+14]    // load current health
"InstanceServerG.exe"+2B44F3: 0F 28 D0                 -  movaps xmm2,xmm0       // save current health in xmm2
"InstanceServerG.exe"+2B44F6: F3 0F 58 C3              -  addss xmm0,xmm3        // health = health + deltaHealth
"InstanceServerG.exe"+2B44FA: 0F 2F C8                 -  comiss xmm1,xmm0       // 0.0001 &lt; newHealth
"InstanceServerG.exe"+2B4502: F3 0F 11 47 14           -  movss [edi+14],xmm0    // save new health
"InstanceServerG.exe"+2B4507: 72 1A                    -  jb InstanceServerG.exe+2B4523 // unit not dead, health at least 0.0001
"InstanceServerG.exe"+2B4509: 0F 57 05 C0 1E 20 01     -  xorps xmm0,[InstanceServerG.exe+E01EC0] // flip health sign
"InstanceServerG.exe"+2B4510: 0F 2F C8                 -  comiss xmm1,xmm0       // 0.0001 &lt; -newHealth
"InstanceServerG.exe"+2B4513: 72 0E                    -  jb InstanceServerG.exe+2B4523 // newHealth &lt; -0.0001 ?
"InstanceServerG.exe"+2B4515: 0F 57 C0                 -  xorps xmm0,xmm0        // set health to 0.0
"InstanceServerG.exe"+2B4518: F3 0F 11 47 14           -  movss [edi+14],xmm0
"InstanceServerG.exe"+2B451D: EB 07                    -  jmp InstanceServerG.exe+2B4526
"InstanceServerG.exe"+2B451F: 8B CB                    -  mov ecx,ebx
"InstanceServerG.exe"+2B4521: EB 9D                    -  jmp InstanceServerG.exe+2B44C0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>163</ID>
          <Description>"Script: Ammo"</Description>
          <LastState Activated="1" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : Jason

  This is the second compare of ammo after firing so I assume it has been
  decremented already.  Current ammo is at 1430 and max ammo is at 1434
}

[ENABLE]

aobscanmodule(INJECT_AMMO,InstanceServerG.exe,83 BE 30 14 00 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)

newmem:

code:
  push eax
  mov eax,[esi+1434]
  cmp eax,[esi+1430]
  jb done
  mov [esi+1430],eax

done:
  pop eax
  cmp dword ptr [esi+00001430],00 // original code
  jmp return

INJECT_AMMO:
  jmp code
  nop
  nop
return:
registersymbol(INJECT_AMMO)

[DISABLE]

INJECT_AMMO:
  db 83 BE 30 14 00 00 00

unregistersymbol(INJECT_AMMO)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+BFAA60

"InstanceServerG.exe"+BFAA4B: 5D                    -  pop ebp
"InstanceServerG.exe"+BFAA4C: C2 08 00              -  ret 0008
"InstanceServerG.exe"+BFAA4F: CC                    -  int 3 
"InstanceServerG.exe"+BFAA50: 55                    -  push ebp
"InstanceServerG.exe"+BFAA51: 8B EC                 -  mov ebp,esp
"InstanceServerG.exe"+BFAA53: 51                    -  push ecx
"InstanceServerG.exe"+BFAA54: 56                    -  push esi
"InstanceServerG.exe"+BFAA55: 8B F1                 -  mov esi,ecx
"InstanceServerG.exe"+BFAA57: 83 BE 34 14 00 00 00  -  cmp dword ptr [esi+00001434],00
"InstanceServerG.exe"+BFAA5E: 76 12                 -  jna InstanceServerG.exe+BFAA72
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+BFAA60: 83 BE 30 14 00 00 00  -  cmp dword ptr [esi+00001430],00
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+BFAA67: 75 09                 -  jne InstanceServerG.exe+BFAA72
"InstanceServerG.exe"+BFAA69: 32 C0                 -  xor al,al
"InstanceServerG.exe"+BFAA6B: 5E                    -  pop esi
"InstanceServerG.exe"+BFAA6C: 8B E5                 -  mov esp,ebp
"InstanceServerG.exe"+BFAA6E: 5D                    -  pop ebp
"InstanceServerG.exe"+BFAA6F: C2 04 00              -  ret 0004
"InstanceServerG.exe"+BFAA72: 8B 46 04              -  mov eax,[esi+04]
"InstanceServerG.exe"+BFAA75: 53                    -  push ebx
"InstanceServerG.exe"+BFAA76: 8B 5D 08              -  mov ebx,[ebp+08]
"InstanceServerG.exe"+BFAA79: 3B 58 5C              -  cmp ebx,[eax+5C]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>145</ID>
          <Description>"Script: Build Structure"</Description>
          <LastState Activated="1" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : Jason

  Seems to run when building a structure on a factory.  ebx seems to be like
  a unit pointer in that 0008-&gt;0068-&gt;0068-&gt;0014 points to 'HUMANPLAYER', etc.

  0008: Can be used like unit pointer to see if it is friendly
  0018: ? - increases as build goes up 374500, 1302599
  0020: ? - increases as build goes up 389499, 1241899
  0028: ? - Increases as build goes up, to max of value at 002C
        * NOTE * Setting this to a lower value shows more time to build, but
          actually does not complete structure when done.
  002C: ? - max value that 0028 rises to when building, integer 149 for resource
        * NOTE * Possibly 1/10th of a second ticks to build?
  0030: (byte) 1 if paused
  0031: (byte) 1 if building?
  0074: Build increase, to value at 0090
  0078: Remaining fraction?  Lowers to value slightly above 0
  007C: NULL when building, pointer after complete
  0084: ? (float) added to 0078 in one proc for compare?
  0088: (float) 100.0
  008C: (float) Increases as build progresses - matches HP?
  0090: (int) Cost of structure
  0094: (float) Time to build (15.0)
  0098: (int) Cost per second to build (54)

  NOTE: To complete structure:
     set 0074 to value at 0090
     set 0078 to 0.00003
     set 008C to max HP
     set 0028 to ONE LESS THAN value at 002C
     SUPER NOTE: only have to set 0028 to value ONE LESS THAN 002C, shows at full health
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_BUILD,InstanceServerG.exe,D8 43 78 D9 7D FE) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)

newmem:

code:
  pushfd
  push ecx
  push eax

  mov ecx,ebx
  call FindUnitOwner
  test eax,eax
  jnz done // not human player
  mov [globals+0000],ebx

  cmp dword ptr [globals+100c],1
  jne done // cheat not enabled

  mov eax,[ebx+2c]
  dec eax
  cmp eax,[ebx+28]
  jna done // already high enough
  mov [ebx+28],eax

done:
  pop eax
  pop ecx
  popfd

  fadd dword ptr [ebx+78]
  fnstcw [ebp-02]
  jmp return

INJECT_BUILD:
  jmp code
  nop
return:
registersymbol(INJECT_BUILD)

[DISABLE]

INJECT_BUILD:
  db D8 43 78 D9 7D FE

unregistersymbol(INJECT_BUILD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2F4F5D

"InstanceServerG.exe"+2F4F46: C3                 -  ret 
"InstanceServerG.exe"+2F4F47: 8B 16              -  mov edx,[esi]
"InstanceServerG.exe"+2F4F49: 8B 42 74           -  mov eax,[edx+74]
"InstanceServerG.exe"+2F4F4C: 8B CE              -  mov ecx,esi
"InstanceServerG.exe"+2F4F4E: FF D0              -  call eax
"InstanceServerG.exe"+2F4F50: 8B C8              -  mov ecx,eax
"InstanceServerG.exe"+2F4F52: 85 C9              -  test ecx,ecx
"InstanceServerG.exe"+2F4F54: 74 A8              -  je InstanceServerG.exe+2F4EFE
"InstanceServerG.exe"+2F4F56: D9 83 84 00 00 00  -  fld dword ptr [ebx+00000084]
"InstanceServerG.exe"+2F4F5C: 57                 -  push edi
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2F4F5D: D8 43 78           -  fadd dword ptr [ebx+78]
"InstanceServerG.exe"+2F4F60: D9 7D FE           -  fnstcw [ebp-02]
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2F4F63: 0F B7 45 FE        -  movzx eax,word ptr [ebp-02]
"InstanceServerG.exe"+2F4F67: D9 C0              -  fld st(0)
"InstanceServerG.exe"+2F4F69: 0D 00 0C 00 00     -  or eax,0C00
"InstanceServerG.exe"+2F4F6E: 89 45 F8           -  mov [ebp-08],eax
"InstanceServerG.exe"+2F4F71: D9 6D F8           -  fldcw [ebp-08]
"InstanceServerG.exe"+2F4F74: DF 7D F4           -  fistp qword ptr [ebp-0C]
"InstanceServerG.exe"+2F4F77: 8B 55 F4           -  mov edx,[ebp-0C]
"InstanceServerG.exe"+2F4F7A: 8B C2              -  mov eax,edx
"InstanceServerG.exe"+2F4F7C: 89 45 F8           -  mov [ebp-08],eax
"InstanceServerG.exe"+2F4F7F: D9 6D FE           -  fldcw [ebp-02]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>152</ID>
              <Description>"pLastBuildStructure"</Description>
              <LastState Value="??" Activated="0" RealAddress="18840000" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+0000</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>150</ID>
          <Description>"Script: Build Unit"</Description>
          <LastState Activated="1" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : jgoemat

  Called when unit is being built.  ESI is pointer to build structure:

    0020: (int) Completed portion (increases to 0024)
    0024: (int) Total
    0034: (float) ?
    0038: Unit Cost?
    003C: Another Cost?  Compare going on
    0040: Fraction Remaining?  0.000011 when done
    0048: (float) Percent complete?
    004C: (float) Time to complete?
    0050: Cost per second?


    NOTE: EAX at this point seems to be the address of the structure build
          MINUS 100.  It seems to be a standard pointer you can use for
          determining the player (i.e. [[[[eax+8]+68]+68]+14] is 'HUMANPLAYER')

    NOTE: Also it seems like the pointer can be at 2C...  Maybe I should make
          the address the 'FindUnitOwner' takes to be variable?
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_BuildUnit,InstanceServerG.exe,8B 4E 3C 3B 4E 38) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)

newmem:

code:
  mov [globals+0004],esi

  push eax
  push ecx

  mov ecx,eax
  call FindUnitOwner
  test eax,eax
  jnz done

  mov [globals+0008],esi

  cmp dword ptr [globals+100c],1
  jne done // cheat not enabled

  mov ecx,[esi+24]
  dec ecx
  cmp ecx,[esi+20]
  jna done // value already higher or equal
  mov [esi+20],ecx

done:
  pop ecx
  pop eax

  mov ecx,[esi+3C] // original code
  cmp ecx,[esi+38] // original code
  jmp return

INJECT_BuildUnit:
  jmp code
  nop
return:
registersymbol(INJECT_BuildUnit)

[DISABLE]

INJECT_BuildUnit:
  db 8B 4E 3C 3B 4E 38

unregistersymbol(INJECT_BuildUnit)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+211F4B

"InstanceServerG.exe"+211F31: 8B EC              -  mov ebp,esp
"InstanceServerG.exe"+211F33: 56                 -  push esi
"InstanceServerG.exe"+211F34: 8B F1              -  mov esi,ecx
"InstanceServerG.exe"+211F36: E8 45 1D FD FF     -  call InstanceServerG.exe+1E3C80
"InstanceServerG.exe"+211F3B: 84 C0              -  test al,al
"InstanceServerG.exe"+211F3D: 74 47              -  je InstanceServerG.exe+211F86
"InstanceServerG.exe"+211F3F: 8B 4E 2C           -  mov ecx,[esi+2C]
"InstanceServerG.exe"+211F42: E8 89 D7 FC FF     -  call InstanceServerG.exe+1DF6D0
"InstanceServerG.exe"+211F47: 85 C0              -  test eax,eax
"InstanceServerG.exe"+211F49: 74 3B              -  je InstanceServerG.exe+211F86
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+211F4B: 8B 4E 3C           -  mov ecx,[esi+3C]
"InstanceServerG.exe"+211F4E: 3B 4E 38           -  cmp ecx,[esi+38]
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+211F51: 8B 56 20           -  mov edx,[esi+20]
"InstanceServerG.exe"+211F54: 53                 -  push ebx
"InstanceServerG.exe"+211F55: 0F 9C C3           -  setl bl
"InstanceServerG.exe"+211F58: 3B 56 24           -  cmp edx,[esi+24]
"InstanceServerG.exe"+211F5B: 8B 10              -  mov edx,[eax]
"InstanceServerG.exe"+211F5D: 0F 9C C1           -  setl cl
"InstanceServerG.exe"+211F60: 0A D9              -  or bl,cl
"InstanceServerG.exe"+211F62: 8B C8              -  mov ecx,eax
"InstanceServerG.exe"+211F64: 8B 82 88 00 00 00  -  mov eax,[edx+00000088]
"InstanceServerG.exe"+211F6A: FF D0              -  call eax
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>151</ID>
              <Description>"pLastBuildUnit"</Description>
              <LastState Value="??" Activated="0" RealAddress="18840004" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+0004</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>153</ID>
              <Description>"pLastBuildUnitHuman"</Description>
              <LastState Value="??" Activated="0" RealAddress="18840008" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+0008</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>155</ID>
          <Description>"Script: Resources"</Description>
          <LastState Activated="1" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : jgoemat

  Seems to load and update resources each turn.

  NOTE: 0014 seems to be a pointer 9 bytes before the pointer to the structure
        with 'HUMANPLAYER' ad +14.  So to check for human:
             push eax
             test eax,eax
             jz invalid
             mov eax,[eax+14]
             test eax,eax
             jz invalid
             mov eax,[eax+23] // this is +0014 in normal structure
             cmp eax,'HUMA'
             jne invalid

}

[ENABLE]

aobscanmodule(INJECT_RESOURCES,InstanceServerG.exe,8B 70 0C 89 58 0C) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)

newmem:

code:
  push eax
  mov eax,[eax+0014]
  test eax,eax
  jz done
  mov eax,[eax+0023]
  test eax,eax
  jz done
  mov eax,[eax]
  cmp eax,'HUMA'
  jne done
  mov eax,[esp]
  mov [globals+000c],eax

  mov esi,[globals+0010]
  cmp esi,ebx
  jb done
  mov ebx,esi

done:
  pop eax

  mov esi,[eax+0C]
  mov [eax+0C],ebx
  jmp return

INJECT_RESOURCES:
  jmp code
  nop
return:
registersymbol(INJECT_RESOURCES)

[DISABLE]

INJECT_RESOURCES:
  db 8B 70 0C 89 58 0C

unregistersymbol(INJECT_RESOURCES)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2BC38C

"InstanceServerG.exe"+2BC36F: 8D 4D F8              -  lea ecx,[ebp-08]
"InstanceServerG.exe"+2BC372: 88 55 FC              -  mov [ebp-04],dl
"InstanceServerG.exe"+2BC375: 8B 55 FC              -  mov edx,[ebp-04]
"InstanceServerG.exe"+2BC378: 51                    -  push ecx
"InstanceServerG.exe"+2BC379: 8D 4F 14              -  lea ecx,[edi+14]
"InstanceServerG.exe"+2BC37C: 89 5D E4              -  mov [ebp-1C],ebx
"InstanceServerG.exe"+2BC37F: 89 55 EC              -  mov [ebp-14],edx
"InstanceServerG.exe"+2BC382: E8 39 F3 FF FF        -  call InstanceServerG.exe+2BB6C0
"InstanceServerG.exe"+2BC387: 8B 75 F0              -  mov esi,[ebp-10]
"InstanceServerG.exe"+2BC38A: EB 09                 -  jmp InstanceServerG.exe+2BC395
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2BC38C: 8B 70 0C              -  mov esi,[eax+0C]
"InstanceServerG.exe"+2BC38F: 89 58 0C              -  mov [eax+0C],ebx
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2BC392: 88 50 14              -  mov [eax+14],dl
"InstanceServerG.exe"+2BC395: 3B F3                 -  cmp esi,ebx
"InstanceServerG.exe"+2BC397: 74 30                 -  je InstanceServerG.exe+2BC3C9
"InstanceServerG.exe"+2BC399: 8B 7F 08              -  mov edi,[edi+08]
"InstanceServerG.exe"+2BC39C: 85 FF                 -  test edi,edi
"InstanceServerG.exe"+2BC39E: 74 1E                 -  je InstanceServerG.exe+2BC3BE
"InstanceServerG.exe"+2BC3A0: 8B 07                 -  mov eax,[edi]
"InstanceServerG.exe"+2BC3A2: 8B 50 08              -  mov edx,[eax+08]
"InstanceServerG.exe"+2BC3A5: 8B CF                 -  mov ecx,edi
"InstanceServerG.exe"+2BC3A7: FF D2                 -  call edx
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>156</ID>
              <Description>"pResources-&gt;Resources"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000" />
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+000C</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>157</ID>
              <Description>"Minimum Resources"</Description>
              <LastState Value="??" Activated="0" RealAddress="18840010" />
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+0010</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>99</ID>
      <Description>"INJECT_MOHP"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : jgoemat

  Split, convert to AOB, and update version of Recifense script:
  http://everyone.loves.this.forum.gamehacking.software/viewtopic.php?t=579432

  This seems to be a good point to find the player pointer
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_MOHP,InstanceServerG.exe,8B 71 68 85 F6) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  mov esi,[ecx+68] // original code
  test esi,esi // original code

  pushfd // save flags
  push eax // save eax, we'll use it
  jz skip // no pointer available

  cmp esi,[ecx+64]
  jne skip // not player?

  mov eax,[esi+14]
  test eax,eax
  jz skip // not player?

  cmp [eax],'HUMA'
  jne skip // not human player

  mov [globals+1000],esi // store human pointer

skip:
  pop eax
  popfd
  jmp return

INJECT_MOHP:
  jmp code
return:
registersymbol(INJECT_MOHP)

[DISABLE]

INJECT_MOHP:
  db 8B 71 68 85 F6

unregistersymbol(INJECT_MOHP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+AF33A4

"InstanceServerG.exe"+AF3395: 1B C0                    -  sbb eax,eax
"InstanceServerG.exe"+AF3397: F7 D8                    -  neg eax
"InstanceServerG.exe"+AF3399: 5D                       -  pop ebp
"InstanceServerG.exe"+AF339A: C2 08 00                 -  ret 0008
"InstanceServerG.exe"+AF339D: CC                       -  int 3 
"InstanceServerG.exe"+AF339E: CC                       -  int 3 
"InstanceServerG.exe"+AF339F: CC                       -  int 3 
"InstanceServerG.exe"+AF33A0: 55                       -  push ebp
"InstanceServerG.exe"+AF33A1: 8B EC                    -  mov ebp,esp
"InstanceServerG.exe"+AF33A3: 56                       -  push esi
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+AF33A4: 8B 71 68                 -  mov esi,[ecx+68]
"InstanceServerG.exe"+AF33A7: 85 F6                    -  test esi,esi
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+AF33A9: 74 28                    -  je InstanceServerG.exe+AF33D3
"InstanceServerG.exe"+AF33AB: 8B 4D 08                 -  mov ecx,[ebp+08]
"InstanceServerG.exe"+AF33AE: 85 C9                    -  test ecx,ecx
"InstanceServerG.exe"+AF33B0: 74 21                    -  je InstanceServerG.exe+AF33D3
"InstanceServerG.exe"+AF33B2: 89 4E 68                 -  mov [esi+68],ecx
"InstanceServerG.exe"+AF33B5: E8 C6 45 DD FF           -  call InstanceServerG.exe+8C7980
"InstanceServerG.exe"+AF33BA: 89 46 38                 -  mov [esi+38],eax
"InstanceServerG.exe"+AF33BD: 8B 06                    -  mov eax,[esi]
"InstanceServerG.exe"+AF33BF: 8B 50 50                 -  mov edx,[eax+50]
"InstanceServerG.exe"+AF33C2: 6A 00                    -  push 00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>100</ID>
      <Description>"Script: MOHP (Find Human Pointer)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe (Grey Goo)
  Version: Steam 0.15.569466
  Date   : 2015-10-18
  Author : jgoemat

  Split, convert to AOB, and update version of Recifense script:
  http://everyone.loves.this.forum.gamehacking.software/viewtopic.php?t=579432

  This seems to be a good point to find the player pointer
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_MOHP,InstanceServerG.exe,8B 71 68 85 F6) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  mov esi,[ecx+68] // original code
  test esi,esi // original code

  pushfd // save flags
  push eax // save eax, we'll use it
  jz skip // no pointer available

  cmp esi,[ecx+64]
  jne skip // not player?

  mov eax,[esi+14]
  test eax,eax
  jz skip // not player?

  cmp [eax],'HUMA'
  jne skip // not human player

  mov [globals+1000],esi // store human pointer

skip:
  pop eax
  popfd
  jmp return

INJECT_MOHP:
  jmp code
return:
registersymbol(INJECT_MOHP)

[DISABLE]

INJECT_MOHP:
  db 8B 71 68 85 F6

unregistersymbol(INJECT_MOHP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+AF33A4

"InstanceServerG.exe"+AF3395: 1B C0                    -  sbb eax,eax
"InstanceServerG.exe"+AF3397: F7 D8                    -  neg eax
"InstanceServerG.exe"+AF3399: 5D                       -  pop ebp
"InstanceServerG.exe"+AF339A: C2 08 00                 -  ret 0008
"InstanceServerG.exe"+AF339D: CC                       -  int 3 
"InstanceServerG.exe"+AF339E: CC                       -  int 3 
"InstanceServerG.exe"+AF339F: CC                       -  int 3 
"InstanceServerG.exe"+AF33A0: 55                       -  push ebp
"InstanceServerG.exe"+AF33A1: 8B EC                    -  mov ebp,esp
"InstanceServerG.exe"+AF33A3: 56                       -  push esi
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+AF33A4: 8B 71 68                 -  mov esi,[ecx+68]
"InstanceServerG.exe"+AF33A7: 85 F6                    -  test esi,esi
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+AF33A9: 74 28                    -  je InstanceServerG.exe+AF33D3
"InstanceServerG.exe"+AF33AB: 8B 4D 08                 -  mov ecx,[ebp+08]
"InstanceServerG.exe"+AF33AE: 85 C9                    -  test ecx,ecx
"InstanceServerG.exe"+AF33B0: 74 21                    -  je InstanceServerG.exe+AF33D3
"InstanceServerG.exe"+AF33B2: 89 4E 68                 -  mov [esi+68],ecx
"InstanceServerG.exe"+AF33B5: E8 C6 45 DD FF           -  call InstanceServerG.exe+8C7980
"InstanceServerG.exe"+AF33BA: 89 46 38                 -  mov [esi+38],eax
"InstanceServerG.exe"+AF33BD: 8B 06                    -  mov eax,[esi]
"InstanceServerG.exe"+AF33BF: 8B 50 50                 -  mov edx,[eax+50]
"InstanceServerG.exe"+AF33C2: 6A 00                    -  push 00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>101</ID>
      <Description>"Script: MOPR (Resources)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_MOPR,InstanceServerG.exe,8B 70 0C 89 58 0C) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov esi,[eax+0C]
  mov [eax+0C],ebx
  jmp return

INJECT_MOPR:
  jmp code
  nop
return:
registersymbol(INJECT_MOPR)

[DISABLE]

INJECT_MOPR:
  db 8B 70 0C 89 58 0C

unregistersymbol(INJECT_MOPR)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2BC38C

"InstanceServerG.exe"+2BC36F: 8D 4D F8              -  lea ecx,[ebp-08]
"InstanceServerG.exe"+2BC372: 88 55 FC              -  mov [ebp-04],dl
"InstanceServerG.exe"+2BC375: 8B 55 FC              -  mov edx,[ebp-04]
"InstanceServerG.exe"+2BC378: 51                    -  push ecx
"InstanceServerG.exe"+2BC379: 8D 4F 14              -  lea ecx,[edi+14]
"InstanceServerG.exe"+2BC37C: 89 5D E4              -  mov [ebp-1C],ebx
"InstanceServerG.exe"+2BC37F: 89 55 EC              -  mov [ebp-14],edx
"InstanceServerG.exe"+2BC382: E8 39 F3 FF FF        -  call InstanceServerG.exe+2BB6C0
"InstanceServerG.exe"+2BC387: 8B 75 F0              -  mov esi,[ebp-10]
"InstanceServerG.exe"+2BC38A: EB 09                 -  jmp InstanceServerG.exe+2BC395
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2BC38C: 8B 70 0C              -  mov esi,[eax+0C]
"InstanceServerG.exe"+2BC38F: 89 58 0C              -  mov [eax+0C],ebx
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2BC392: 88 50 14              -  mov [eax+14],dl
"InstanceServerG.exe"+2BC395: 3B F3                 -  cmp esi,ebx
"InstanceServerG.exe"+2BC397: 74 30                 -  je InstanceServerG.exe+2BC3C9
"InstanceServerG.exe"+2BC399: 8B 7F 08              -  mov edi,[edi+08]
"InstanceServerG.exe"+2BC39C: 85 FF                 -  test edi,edi
"InstanceServerG.exe"+2BC39E: 74 1E                 -  je InstanceServerG.exe+2BC3BE
"InstanceServerG.exe"+2BC3A0: 8B 07                 -  mov eax,[edi]
"InstanceServerG.exe"+2BC3A2: 8B 50 08              -  mov edx,[eax+08]
"InstanceServerG.exe"+2BC3A5: 8B CF                 -  mov ecx,edi
"InstanceServerG.exe"+2BC3A7: FF D2                 -  call edx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>102</ID>
      <Description>"Script: GDMD (probably - God Mode)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_GDMD,InstanceServerG.exe,F3 0F 10 4D 0C 0F 57) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm1,[ebp+0C]
  jmp return

INJECT_GDMD:
  jmp code
return:
registersymbol(INJECT_GDMD)

[DISABLE]

INJECT_GDMD:
  db F3 0F 10 4D 0C

unregistersymbol(INJECT_GDMD)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2B437D

"InstanceServerG.exe"+2B4367: 74 14                 -  je InstanceServerG.exe+2B437D
"InstanceServerG.exe"+2B4369: 5F                    -  pop edi
"InstanceServerG.exe"+2B436A: 32 C0                 -  xor al,al
"InstanceServerG.exe"+2B436C: 5B                    -  pop ebx
"InstanceServerG.exe"+2B436D: 8B 4D FC              -  mov ecx,[ebp-04]
"InstanceServerG.exe"+2B4370: 33 CD                 -  xor ecx,ebp
"InstanceServerG.exe"+2B4372: E8 F7 2F 9B 00        -  call InstanceServerG.exe+C6736E
"InstanceServerG.exe"+2B4377: 8B E5                 -  mov esp,ebp
"InstanceServerG.exe"+2B4379: 5D                    -  pop ebp
"InstanceServerG.exe"+2B437A: C2 0C 00              -  ret 000C
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2B437D: F3 0F 10 4D 0C        -  movss xmm1,[ebp+0C]
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2B4382: 0F 57 D2              -  xorps xmm2,xmm2
"InstanceServerG.exe"+2B4385: 0F 2F CA              -  comiss xmm1,xmm2
"InstanceServerG.exe"+2B4388: F3 0F 10 47 18        -  movss xmm0,[edi+18]
"InstanceServerG.exe"+2B438D: F3 0F 11 4D 9C        -  movss [ebp-64],xmm1
"InstanceServerG.exe"+2B4392: 76 17                 -  jna InstanceServerG.exe+2B43AB
"InstanceServerG.exe"+2B4394: F3 0F 10 57 14        -  movss xmm2,[edi+14]
"InstanceServerG.exe"+2B4399: 0F 28 DA              -  movaps xmm3,xmm2
"InstanceServerG.exe"+2B439C: F3 0F 58 D9           -  addss xmm3,xmm1
"InstanceServerG.exe"+2B43A0: 0F 2F D8              -  comiss xmm3,xmm0
"InstanceServerG.exe"+2B43A3: 76 23                 -  jna InstanceServerG.exe+2B43C8
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"Script: MOUU (Unlimited Units)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_MOUU,InstanceServerG.exe,8B 47 0C 6A 20 50 8B 42 04 8B CE 80) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[edi+0C]
  push 20
  jmp return

INJECT_MOUU:
  jmp code
return:
registersymbol(INJECT_MOUU)

[DISABLE]

INJECT_MOUU:
  db 8B 47 0C 6A 20

unregistersymbol(INJECT_MOUU)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+AECD5E

"InstanceServerG.exe"+AECD4A: 57                 -  push edi
"InstanceServerG.exe"+AECD4B: 8B F9              -  mov edi,ecx
"InstanceServerG.exe"+AECD4D: 8B 47 08           -  mov eax,[edi+08]
"InstanceServerG.exe"+AECD50: 6A 20              -  push 20
"InstanceServerG.exe"+AECD52: 50                 -  push eax
"InstanceServerG.exe"+AECD53: 8B 42 04           -  mov eax,[edx+04]
"InstanceServerG.exe"+AECD56: 8B CE              -  mov ecx,esi
"InstanceServerG.exe"+AECD58: FF D0              -  call eax
"InstanceServerG.exe"+AECD5A: 8B 16              -  mov edx,[esi]
"InstanceServerG.exe"+AECD5C: 8A D8              -  mov bl,al
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+AECD5E: 8B 47 0C           -  mov eax,[edi+0C]
"InstanceServerG.exe"+AECD61: 6A 20              -  push 20
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+AECD63: 50                 -  push eax
"InstanceServerG.exe"+AECD64: 8B 42 04           -  mov eax,[edx+04]
"InstanceServerG.exe"+AECD67: 8B CE              -  mov ecx,esi
"InstanceServerG.exe"+AECD69: 80 E3 01           -  and bl,01
"InstanceServerG.exe"+AECD6C: FF D0              -  call eax
"InstanceServerG.exe"+AECD6E: 8B 16              -  mov edx,[esi]
"InstanceServerG.exe"+AECD70: 8B 52 04           -  mov edx,[edx+04]
"InstanceServerG.exe"+AECD73: 22 D8              -  and bl,al
"InstanceServerG.exe"+AECD75: 0F B6 47 10        -  movzx eax,byte ptr [edi+10]
"InstanceServerG.exe"+AECD79: 6A 01              -  push 01
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>116</ID>
      <Description>"Scripts"</Description>
      <Options moHideChildren="1" />
      <LastState Value="" Activated="0" RealAddress="00000000" />
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>115</ID>
          <Description>"Script: Change Health"</Description>
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version:
  Date   : 2015-10-18
  Author : Jason

  Seems to be when unit's health is changed.  This includes when initially
  putting down units and buildings at the start of a campaign, when building
  units and structures, and when they take damage (or are healed probably)
  Thanks to Recifense's script, it's easy to figure out if the unit or
  structure belongs to a human player:

  [edi+8]: Pointer1
  [Pointer1+68]: Pointer2
  [Pointer2+68]: Pointer3 (was +64 for Recifense's script)
  [Pointer3+14]: Pointer4
  [Pointer4]: 'HUMANPLAYER'  (or 'ENEMYPLAYER', 'AIPLAYER'

  Also to note:
    EDI:
      0008: Pointer1
      000C: Pointer or the like for AI and player, null for enemy?
      0014: Health (float)
      0018: Max Health (float) (weird for AI and Enemy?)
    Pointer1:
      0060: SAME pointer for HUMANPLAYER, NULL for AI and ENEMY
      0064: DIFF pointers for HUMANPLAYER, NULL for ai and enemy
      0068: Pointer2
    Pointer2:
      0064: &lt;WAS POINTER FOR RECIFENSE, now 01000000 for me&gt;
      0068: Pointer3
    Pointer3:
      0014: Pointer4 (point to string 'HUMANPLAYER', 'ENEMYPLAYER', 'AIPLAYER'
      0028: NULL for AI and ENEMY, 08000208 for player
      002C: 0 for AI and ENEMY, 520 for player


}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_DAMAGE,InstanceServerG.exe,F3 0F 11 47 14 72) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(ishuman)
label(return)

newmem:

code:
  pushfd
  pushad

  cmp [globals+1000],0 // cheat flag
  je skip

  mov [globals+4000],edi
  mov eax,[edi+8] // Pointer1
  mov [globals+4004],eax
  test eax,eax
  jz skip

  mov eax,[eax+68] // Pointer2
  mov [globals+4008],eax
  test eax,eax
  jz skip

  mov eax,[eax+68] // Pointer3
  mov [globals+400C],eax
  test eax,eax
  jz skip

  mov eax,[eax+14] // Pointer4
  mov [globals+4010],eax
  test eax,eax
  jz skip

  mov eax,[eax]
  mov [globals+4014],eax

  cmp [eax],'HUMA'
  je ishuman
  jmp skip

ishuman:
  //movss xmm0,[edi+18] // load max health
  jmp skip

skip:
  popad
  popfd
  movss [edi+14],xmm0
  jmp return

INJECT_DAMAGE:
  jmp code
return:
registersymbol(INJECT_DAMAGE)

[DISABLE]

INJECT_DAMAGE:
  db F3 0F 11 47 14

unregistersymbol(INJECT_DAMAGE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2B4502

"InstanceServerG.exe+2B44BE": 33 C9                          - xor ecx,ecx
"InstanceServerG.exe+2B44C0": 6A 01                          - push 01
"InstanceServerG.exe+2B44C2": 6A 02                          - push 02
"InstanceServerG.exe+2B44C4": E8 D7 75 83 00                 - call InstanceServerG.exe+AEBAA0
"InstanceServerG.exe+2B44C9": F3 0F 10 0D FC E6 1F 01        - movss xmm1,[InstanceServerG.exe+DFE6FC]
"InstanceServerG.exe+2B44D1": F3 0F 10 5D 0C                 - movss xmm3,[ebp+0C] // damage as negative number?
"InstanceServerG.exe+2B44D6": 0F2F CB                        - comiss xmm1,xmm3
"InstanceServerG.exe"+2B44D9: 72 13                          -  jb InstanceServerG.exe+2B44EE
"InstanceServerG.exe"+2B44DB: 0F 28 C3                       -  movaps xmm0,xmm3
"InstanceServerG.exe"+2B44DE: 0F 57 05 C0 1E 20 01           -  xorps xmm0,[InstanceServerG.exe+E01EC0]
"InstanceServerG.exe"+2B44E5: 0F 2F C8                       -  comiss xmm1,xmm0
"InstanceServerG.exe"+2B44E8: 0F 83 82 05 00 00              -  jae InstanceServerG.exe+2B4A70
"InstanceServerG.exe"+2B44EE: F3 0F 10 47 14                 -  movss xmm0,[edi+14]
"InstanceServerG.exe"+2B44F3: 0F 28 D0                       -  movaps xmm2,xmm0
"InstanceServerG.exe"+2B44F6: F3 0F 58 C3                    -  addss xmm0,xmm3
"InstanceServerG.exe"+2B44FA: 0F 2F C8                       -  comiss xmm1,xmm0
"InstanceServerG.exe"+2B44FD: F3 0F 11 55 9C                 -  movss [ebp-64],xmm2
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2B4502: F3 0F 11 47 14                 -  movss [edi+14],xmm0 // store new health?
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2B4507: 72 1A                          -  jb InstanceServerG.exe+2B4523
"InstanceServerG.exe"+2B4509: 0F 57 05 C0 1E 20 01           -  xorps xmm0,[InstanceServerG.exe+E01EC0]
"InstanceServerG.exe"+2B4510: 0F 2F C8                       -  comiss xmm1,xmm0
"InstanceServerG.exe"+2B4513: 72 0E                          -  jb InstanceServerG.exe+2B4523
"InstanceServerG.exe"+2B4515: 0F 57 C0                       -  xorps xmm0,xmm0
"InstanceServerG.exe"+2B4518: F3 0F 11 47 14                 -  movss [edi+14],xmm0
"InstanceServerG.exe"+2B451D: EB 07                          -  jmp InstanceServerG.exe+2B4526
"InstanceServerG.exe"+2B451F: 8B CB                          -  mov ecx,ebx
"InstanceServerG.exe"+2B4521: EB 9D                          -  jmp InstanceServerG.exe+2B44C0
"InstanceServerG.exe"+2B4523: 0F 57 C0                       -  xorps xmm0,xmm0
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>105</ID>
      <Description>"Cheats"</Description>
      <Options moHideChildren="1" />
      <LastState Value="" Activated="1" RealAddress="00000000" />
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Cheat: God Mode (1000)"</Description>
          <LastState Activated="1" />
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[enable]
globals+1000:
  dd 1

[disable]
globals+1000:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>112</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>128</ID>
          <Description>"Cheat: One Hit Kill: ENEMY (1004)"</Description>
          <LastState Activated="0" />
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[enable]
globals+1004:
  dd 1

[disable]
globals+1004:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>113</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>129</ID>
          <Description>"Cheat: One Hit Kill: AI (1008)"</Description>
          <LastState Activated="1" />
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[enable]
globals+1008:
  dd 1

[disable]
globals+1008:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>114</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>146</ID>
          <Description>"Cheat: Fast Build (100c)"</Description>
          <LastState Activated="1" />
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[enable]
globals+100c:
  dd 1

[disable]
globals+100c:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>115</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>158</ID>
      <Description>"Test/Other"</Description>
      <Options moHideChildren="1" />
      <LastState Value="" Activated="0" RealAddress="00000000" />
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>134</ID>
          <Description>"Test: Resources"</Description>
          <LastState Activated="0" />
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : jgoemat

  Seems to load resources the most of any of the calls.

  Weird, the value at +14 SEEMS to be a pointer to something CLOSE to what has
  a pointer to HUMANPLAYER at +14.  For example, this resources structure
  has 12769801 while units have 12769810.  So in the resource units the
  structure is at +14, from this pointer it is at +23.  I don't know if that is reliable...
}

[ENABLE]

aobscanmodule(INJECT_Resources,InstanceServerG.exe,18 5E 74 09 8B 40 0C 8B E5) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[eax+0C]
  mov esp,ebp
  jmp return

INJECT_Resources+04:
  jmp code
return:
registersymbol(INJECT_Resources)

[DISABLE]

INJECT_Resources+04:
  db 8B 40 0C 8B E5

unregistersymbol(INJECT_Resources)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+AD5140

"InstanceServerG.exe"+AD5127: 8D 45 08              -  lea eax,[ebp+08]
"InstanceServerG.exe"+AD512A: 50                    -  push eax
"InstanceServerG.exe"+AD512B: 8D 4D FC              -  lea ecx,[ebp-04]
"InstanceServerG.exe"+AD512E: 51                    -  push ecx
"InstanceServerG.exe"+AD512F: 8D 4E 14              -  lea ecx,[esi+14]
"InstanceServerG.exe"+AD5132: E8 49 CA FF FF        -  call InstanceServerG.exe+AD1B80
"InstanceServerG.exe"+AD5137: 8B 45 FC              -  mov eax,[ebp-04]
"InstanceServerG.exe"+AD513A: 3B 46 18              -  cmp eax,[esi+18]
"InstanceServerG.exe"+AD513D: 5E                    -  pop esi
"InstanceServerG.exe"+AD513E: 74 09                 -  je InstanceServerG.exe+AD5149
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+AD5140: 8B 40 0C              -  mov eax,[eax+0C]
"InstanceServerG.exe"+AD5143: 8B E5                 -  mov esp,ebp
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+AD5145: 5D                    -  pop ebp
"InstanceServerG.exe"+AD5146: C2 04 00              -  ret 0004
"InstanceServerG.exe"+AD5149: 33 C0                 -  xor eax,eax
"InstanceServerG.exe"+AD514B: 8B E5                 -  mov esp,ebp
"InstanceServerG.exe"+AD514D: 5D                    -  pop ebp
"InstanceServerG.exe"+AD514E: C2 04 00              -  ret 0004
"InstanceServerG.exe"+AD5151: CC                    -  int 3 
"InstanceServerG.exe"+AD5152: CC                    -  int 3 
"InstanceServerG.exe"+AD5153: CC                    -  int 3 
"InstanceServerG.exe"+AD5154: CC                    -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>126</ID>
          <Description>"Test: HP Update"</Description>
          <LastState Activated="0" />
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-18
  Author : jgoemat

  This seems to be called when updating a unit's health, when initially put
  down on the map, when constructing, when repairing and when taking damage.

  This loads the current health from [edi+14].  Max health is at [edi+18].
  xmm3 is from [ebp+0C] and is the health to add (negative for damage)
}

[ENABLE]

aobscanmodule(INJECT_HPUPDATE,InstanceServerG.exe,F3 0F 10 47 14 0F 28 D0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:


  movss xmm0,[edi+14] // original code
  jmp return

INJECT_HPUPDATE:
  jmp code
return:
registersymbol(INJECT_HPUPDATE)

[DISABLE]

INJECT_HPUPDATE:
  db F3 0F 10 47 14

unregistersymbol(INJECT_HPUPDATE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2B44EE

"InstanceServerG.exe"+2B44C2: 6A 02                    -  push 02
"InstanceServerG.exe"+2B44C4: E8 D7 75 83 00           -  call InstanceServerG.exe+AEBAA0
"InstanceServerG.exe"+2B44C9: F3 0F 10 0D FC E6 1F 01  -  movss xmm1,[InstanceServerG.exe+DFE6FC] // 0.0001
"InstanceServerG.exe"+2B44D1: F3 0F 10 5D 0C           -  movss xmm3,[ebp+0C]   // load change in health
"InstanceServerG.exe"+2B44D6: 0F 2F CB                 -  comiss xmm1,xmm3      // .0001 &lt; change in health?
"InstanceServerG.exe"+2B44D9: 72 13                    -  jb InstanceServerG.exe+2B44EE
"InstanceServerG.exe"+2B44DB: 0F 28 C3                 -  movaps xmm0,xmm3      // xmm0 is now change in health
"InstanceServerG.exe"+2B44DE: 0F 57 05 C0 1E 20 01     -  xorps xmm0,[InstanceServerG.exe+E01EC0]   // 80000000 (flip sign?)
"InstanceServerG.exe"+2B44E5: 0F 2F C8                 -  comiss xmm1,xmm0      // 0.0001 &lt; -(change in health)?
"InstanceServerG.exe"+2B44E8: 0F 83 82 05 00 00        -  jae InstanceServerG.exe+2B4A70 // change too small?
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2B44EE: F3 0F 10 47 14           -  movss xmm0,[edi+14]   // load current health
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2B44F3: 0F 28 D0                 -  movaps xmm2,xmm0      // store current halth in xmm2
"InstanceServerG.exe"+2B44F6: F3 0F 58 C3              -  addss xmm0,xmm3       // add change in health
"InstanceServerG.exe"+2B44FA: 0F 2F C8                 -  comiss xmm1,xmm0
"InstanceServerG.exe"+2B44FD: F3 0F 11 55 9C           -  movss [ebp-64],xmm2   // save old health
"InstanceServerG.exe"+2B4502: E9 F9 BA 69 09           -  jmp 09D50000
"InstanceServerG.exe"+2B4507: 72 1A                    -  jb InstanceServerG.exe+2B4523
"InstanceServerG.exe"+2B4509: 0F 57 05 C0 1E 20 01     -  xorps xmm0,[InstanceServerG.exe+E01EC0]
"InstanceServerG.exe"+2B4510: 0F 2F C8                 -  comiss xmm1,xmm0
"InstanceServerG.exe"+2B4513: 72 0E                    -  jb InstanceServerG.exe+2B4523
"InstanceServerG.exe"+2B4515: 0F 57 C0                 -  xorps xmm0,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"[X] &lt;== Grey Goo Gold v0.15.522362 RELOADED/CODEX Script v1.0"</Description>
          <Options moHideChildren="1" />
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
===========================================
 Game Title    : Grey Goo Gold
 Game Version  : 0.15.522362
 Game Sponsor  : RELOADED
 Process Name  : InstanceServerG.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 04-Feb-2015
 Author        : Recifense
 History:
 28-Jan-15: First Release
 04-Feb-15: Release for version 0.15 (patch by CODEX)
 Features:
 - Minimum Resources
 - God Mode
 - Full Ammo
 - Unlimited Units
 - Some Pointers
===========================================
}


//=========================================
// Definitions
define(LUDO,"InstanceServerG.exe")
define(MOHP,InstanceServerG.exe+00b70981) //=
define(MOPR,InstanceServerG.exe+002afedc) //=
define(GDMD,InstanceServerG.exe+002ab29d) //=
define(MOFA,InstanceServerG.exe+00b16287) //=
define(MOUU,InstanceServerG.exe+000986be) //=

define(SELL,InstanceServerG.exe+002A25fa) //=
define(CTRK,InstanceServerG.exe+0026126a) //=

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMRES,#640)    // Minimum Resource

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOHP,8b 71 68 85 f6 ?? ?? 8b 06 8b 50 08 8b ce ff d2 85 c0 ?? ?? 3d ??)
assert(MOPR,8b 70 0c 89 58 0c 88 50 14 3b f3 ?? ?? 8b 7f 08 85 ff ?? ?? 8b 07)
assert(GDMD,f3 0f 10 4d 0c 0f 57 d2 0f 2f ca f3 0f 10 47 18 f3 0f 11 4d 9c ??)
assert(MOFA,df 7d 0c 8b 55 0c 89 11 d9 6d 0a 5e 5d c2 0c 00 cc cc cc cc cc cc)
assert(MOUU,8b 47 0c 6a 20 50 8b 42 04 8b ce 80 e3 01 ff d0 8b 16 22 d8 8b 47)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonPlayerRes)
label(_BackMPR)
label(_ExitMPR)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonFullAmmo)
label(_BackMFA)
label(_ExitMFA)
label(_MonUnlimitedUnits)
label(_BackMUU)
label(_ExitMUU)

label(iEnableMPR)
label(iEnableGMD)
label(iEnableMFA)
label(iEnableMUU)

label(pCommon)
label(pUnit)
label(pRes)
label(pPop)

label(fLast)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableMFA)
registersymbol(iEnableMUU)
registersymbol(pCommon)
registersymbol(pUnit)
registersymbol(pRes)
registersymbol(pPop)

registersymbol(fLast)
registersymbol(aLast)

//=========================================
MyCode:
//=========================================
// At the game main RTS screen
_MonHumanPlayer:
 mov [aLast],'_MHP'

 push eax

 mov esi,[ecx+68]
 test esi,esi
 jz _ExitMHP

 cmp esi,[ecx+64]
 jne _ExitMHP

 mov eax,[esi+14]
 test eax,eax
 jz _ExitMHP

 mov eax,[eax]
 cmp eax,'HUMA'
 jne _ExitMHP

 mov [pCommon],esi

_ExitMHP:
 pop eax

 mov esi,[ecx+68]                  // Original code (get pPlayer)
 test esi,esi                      // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// When updating resource
_MonPlayerRes:
 mov [aLast],'_MPR'

 push ecx

 mov esi,[eax+0C]                  // Original code (get current value)

 test edi,edi
 jz _ExitMPR

 mov ecx,[edi+08]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+68]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+64]
 cmp ecx,[pCommon]
 jne _ExitMPR

 mov [pRes],edi

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 cmp ebx,ctMRES
 jns _ExitMPR

 mov ebx,ctMRES

 cmp ebx,esi
 jne _ExitMPR

 dec esi

_ExitMPR:
 pop ecx

 mov [eax+0C],ebx                  // Original code (set new value)
 jmp _BackMPR                      // Back to main code

//=========================================
// When changing HP
_GodMode:
 mov [aLast],'_GMD'

 push eax

 mov eax,[ebp+00000114]

 cmp eax,SELL
 je _ExitGMD

 cmp eax,CTRK
 je _ExitGMD

 mov [pUnit],edi

 mov eax,[edi+08]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+68]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+64]
 cmp eax,[pCommon]
 jne _ExitGMD

 mov eax,[edi+18]                  // Just for debugging
 mov eax,[ebp+0c]                  // Just for debugging
 mov [fLast],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[ebp+0c]
 test eax,eax
 jns _ExitGMD

 mov eax,[edi+18]
 mov [edi+14],eax

 mov eax,(float)-1.0
 mov [ebp+0c],eax

_ExitGMD:
 pop eax

 movss xmm1,[ebp+0C]               // Original code (get value 2 add or dec)
 jmp _BackGMD                      // Back to main code

//=========================================
// When loading/unloading ammo (affects all)
_MonFullAmmo:
 mov [aLast],'_MFA'

 fistp qword ptr [ebp+0C]          // Original code (convert new value)

 cmp dword ptr [iEnableMFA],0
 je _ExitMFA                       // Jump if feature is disabled

 mov edx,[ecx+04]
 mov [ebp+0C],edx

_ExitMFA:
 mov edx,[ebp+0C]                  // Original code (get new value)
 jmp _BackMFA                      // Back to main code

//=========================================
// When Inc/Dec spent unit points
_MonUnlimitedUnits:
 mov [aLast],'_MUU'

 cmp dword ptr [iEnableMUU],0
 je _ExitMUU                       // Jump if feature is disabled

 mov eax,[edi+04]
 cmp eax,[pCommon]
 jne _ExitMUU

 mov [pPop],edi

 xor eax,eax
 mov [edi+0c],eax
 mov [edi+14],eax

_ExitMUU:
 mov eax,[edi+0C]                  // Original code (get spent points)
 push 20                           // Original code
 jmp _BackMUU                      // Back to main code

//=========================================
 db '=================================&gt;'
 db 'CE6.4 Script by Recifense 012815'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableMFA:
 dd 0
iEnableMUU:
 dd 0
pCommon:
 dd MyCode
pUnit:
 dd 0
pRes:
 dd 0
pPop:
 dd 0
fLast:
 dd 0
aLast:
 db 'CE64'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
_BackMHP:

MOPR:
 jmp _MonPlayerRes
 nop
_BackMPR:

GDMD:
 jmp _GodMode
_BackGMD:

MOFA:
 jmp _MonFullAmmo
 nop
_BackMFA:

MOUU:
 jmp _MonUnlimitedUnits
_BackMUU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov esi,[ecx+68]
// test esi,esi
 db 8b 71 68 85 f6

MOPR:
// mov esi,[eax+0C]
// mov [eax+0C],ebx
 db 8b 70 0c 89 58 0c

GDMD:
// movss xmm1,[ebp+0C]
 db f3 0f 10 4d 0c

MOFA:
// fistp qword ptr [ebp+0C]
// mov edx,[ebp+0C]
 db df 7d 0c 8b 55 0c

MOUU:
// mov eax,[edi+0C]
// push 20
 db 8b 47 0c 6a 20

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMFA)
unregistersymbol(iEnableMUU)
unregistersymbol(pCommon)
unregistersymbol(pUnit)
unregistersymbol(pRes)
unregistersymbol(pPop)

unregistersymbol(fLast)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v0.14.520083:
define(MOPR,InstanceServerG.exe+002b0c0c)
define(GDMD,InstanceServerG.exe+002ac09d)
define(MOFA,InstanceServerG.exe+00b17497)
define(MOUU,InstanceServerG.exe+00098d3e)

define(SELL,InstanceServerG.exe+002A33F8)
define(CTRK,InstanceServerG.exe+00261f4a)
}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>94</ID>
              <Description>"[X] &lt;== Minimum Resource -----&gt; (HK: CTRL+Home / CTRL+End)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>96</ID>
              <Description>"[X] &lt;== God Mode ------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>97</ID>
              <Description>"[X] &lt;== Full Ammo -------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFA",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFA",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>98</ID>
              <Description>"[X] &lt;== Unlimited Unit Points ---&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUU",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUU",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>45</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>46</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>106</ID>
          <Description>"[X] &lt;== UPDATED Grey Goo Gold v0.15.522362 RELOADED/CODEX Script v1.0"</Description>
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
===========================================
 Game Title    : Grey Goo Gold
 Game Version  : 0.15.522362
 Game Sponsor  : RELOADED
 Process Name  : InstanceServerG.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 04-Feb-2015
 Author        : Recifense
 History:
 28-Jan-15: First Release
 04-Feb-15: Release for version 0.15 (patch by CODEX)
 Features:
 - Minimum Resources
 - God Mode
 - Full Ammo
 - Unlimited Units
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"InstanceServerG.exe")
{
define(MOHP,InstanceServerG.exe+00b70981) //=
define(MOPR,InstanceServerG.exe+002afedc) //=
define(GDMD,InstanceServerG.exe+002ab29d) //=
define(MOFA,InstanceServerG.exe+00b16287) //=
define(MOUU,InstanceServerG.exe+000986be) //=
}

// checking return pointers on stack?  will need to fix these
define(SELL,InstanceServerG.exe+002A25fa) //=
define(CTRK,InstanceServerG.exe+0026126a) //=

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMRES,#640)    // Minimum Resource

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded
{
assert(MOHP,8b 71 68 85 f6 ?? ?? 8b 06 8b 50 08 8b ce ff d2 85 c0 ?? ?? 3d ??)
assert(MOPR,8b 70 0c 89 58 0c 88 50 14 3b f3 ?? ?? 8b 7f 08 85 ff ?? ?? 8b 07)
assert(GDMD,f3 0f 10 4d 0c 0f 57 d2 0f 2f ca f3 0f 10 47 18 f3 0f 11 4d 9c ??)
assert(MOFA,df 7d 0c 8b 55 0c 89 11 d9 6d 0a 5e 5d c2 0c 00 cc cc cc cc cc cc)
assert(MOUU,8b 47 0c 6a 20 50 8b 42 04 8b ce 80 e3 01 ff d0 8b 16 22 d8 8b 47)
}

aobscanmodule(MOHP,InstanceServerG.exe,8B 71 68 85 F6) // should be unique
aobscanmodule(MOPR,InstanceServerG.exe,8B 70 0C 89 58 0C) // should be unique
aobscanmodule(GDMD,InstanceServerG.exe,F3 0F 10 4D 0C 0F 57) // should be unique
aobscanmodule(MOUU,InstanceServerG.exe,8B 47 0C 6A 20 50 8B 42 04 8B CE 80) // should be unique

registersymbol(MOHP)
registersymbol(MOPR)
registersymbol(GDMD)
registersymbol(MOUU)


//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonPlayerRes)
label(_BackMPR)
label(_ExitMPR)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
//label(_MonFullAmmo)
//label(_BackMFA)
//label(_ExitMFA)
label(_MonUnlimitedUnits)
label(_BackMUU)
label(_ExitMUU)

label(iEnableMPR)
label(iEnableGMD)
label(iEnableMFA)
label(iEnableMUU)

label(pCommon)
label(pUnit)
label(pRes)
label(pPop)

label(fLast)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableMFA)
registersymbol(iEnableMUU)
registersymbol(pCommon)
registersymbol(pUnit)
registersymbol(pRes)
registersymbol(pPop)

registersymbol(fLast)
registersymbol(aLast)

//=========================================
MyCode:
//=========================================
// At the game main RTS screen
_MonHumanPlayer:
 mov [aLast],'_MHP'

 push eax

 mov esi,[ecx+68]
 test esi,esi
 jz _ExitMHP

 cmp esi,[ecx+64]
 jne _ExitMHP

 mov eax,[esi+14]
 test eax,eax
 jz _ExitMHP

 mov eax,[eax]
 cmp eax,'HUMA'
 jne _ExitMHP

 mov [pCommon],esi

_ExitMHP:
 pop eax

 mov esi,[ecx+68]                  // Original code (get pPlayer)
 test esi,esi                      // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// When updating resource
_MonPlayerRes:
 mov [aLast],'_MPR'

 push ecx

 mov esi,[eax+0C]                  // Original code (get current value)

 test edi,edi
 jz _ExitMPR

 mov ecx,[edi+08]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+68]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+64]
 cmp ecx,[pCommon]
 jne _ExitMPR

 mov [pRes],edi

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 cmp ebx,ctMRES
 jns _ExitMPR

 mov ebx,ctMRES

 cmp ebx,esi
 jne _ExitMPR

 dec esi

_ExitMPR:
 pop ecx

 mov [eax+0C],ebx                  // Original code (set new value)
 jmp _BackMPR                      // Back to main code

//=========================================
// When changing HP
_GodMode:
 mov [aLast],'_GMD'

 push eax

 mov eax,[ebp+00000114]

 cmp eax,SELL
 je _ExitGMD

 cmp eax,CTRK
 je _ExitGMD

 mov [pUnit],edi

 mov eax,[edi+08]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+68]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+64]
 cmp eax,[pCommon]
 jne _ExitGMD

 mov eax,[edi+18]                  // Just for debugging
 mov eax,[ebp+0c]                  // Just for debugging
 mov [fLast],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[ebp+0c]
 test eax,eax
 jns _ExitGMD

 mov eax,[edi+18]
 mov [edi+14],eax

 mov eax,(float)-1.0
 mov [ebp+0c],eax

_ExitGMD:
 pop eax

 movss xmm1,[ebp+0C]               // Original code (get value 2 add or dec)
 jmp _BackGMD                      // Back to main code

//=========================================
// When loading/unloading ammo (affects all)
{_MonFullAmmo:
 mov [aLast],'_MFA'

 fistp qword ptr [ebp+0C]          // Original code (convert new value)

 cmp dword ptr [iEnableMFA],0
 je _ExitMFA                       // Jump if feature is disabled

 mov edx,[ecx+04]
 mov [ebp+0C],edx

_ExitMFA:
 mov edx,[ebp+0C]                  // Original code (get new value)
 jmp _BackMFA                      // Back to main code
}
//=========================================
// When Inc/Dec spent unit points
_MonUnlimitedUnits:
 mov [aLast],'_MUU'

 cmp dword ptr [iEnableMUU],0
 je _ExitMUU                       // Jump if feature is disabled

 mov eax,[edi+04]
 cmp eax,[pCommon]
 jne _ExitMUU

 mov [pPop],edi

 xor eax,eax
 mov [edi+0c],eax
 mov [edi+14],eax

_ExitMUU:
 mov eax,[edi+0C]                  // Original code (get spent points)
 push 20                           // Original code
 jmp _BackMUU                      // Back to main code

//=========================================
 db '=================================&gt;'
 db 'CE6.4 Script by Recifense 012815'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableMFA:
 dd 0
iEnableMUU:
 dd 0
pCommon:
 dd MyCode
pUnit:
 dd 0
pRes:
 dd 0
pPop:
 dd 0
fLast:
 dd 0
aLast:
 db 'CE64'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
_BackMHP:

MOPR:
 jmp _MonPlayerRes
 nop
_BackMPR:

GDMD:
 jmp _GodMode
_BackGMD:
{
MOFA:
 jmp _MonFullAmmo
 nop
_BackMFA:
}
MOUU:
 jmp _MonUnlimitedUnits
_BackMUU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov esi,[ecx+68]
// test esi,esi
 db 8b 71 68 85 f6

MOPR:
// mov esi,[eax+0C]
// mov [eax+0C],ebx
 db 8b 70 0c 89 58 0c

GDMD:
// movss xmm1,[ebp+0C]
 db f3 0f 10 4d 0c

 {
MOFA:
// fistp qword ptr [ebp+0C]
// mov edx,[ebp+0C]
 db df 7d 0c 8b 55 0c
}

MOUU:
// mov eax,[edi+0C]
// push 20
 db 8b 47 0c 6a 20

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMFA)
unregistersymbol(iEnableMUU)
unregistersymbol(pCommon)
unregistersymbol(pUnit)
unregistersymbol(pRes)
unregistersymbol(pPop)

unregistersymbol(fLast)
unregistersymbol(aLast)

unregistersymbol(MOHP)
unregistersymbol(MOPR)
unregistersymbol(GDMD)
unregistersymbol(MOUU)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v0.14.520083:
define(MOPR,InstanceServerG.exe+002b0c0c)
define(GDMD,InstanceServerG.exe+002ac09d)
define(MOFA,InstanceServerG.exe+00b17497)
define(MOUU,InstanceServerG.exe+00098d3e)

define(SELL,InstanceServerG.exe+002A33F8)
define(CTRK,InstanceServerG.exe+00261f4a)
}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>107</ID>
              <Description>"[X] &lt;== Minimum Resource -----&gt; (HK: CTRL+Home / CTRL+End)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>108</ID>
              <Description>"[X] &lt;== God Mode ------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>109</ID>
              <Description>"[X] &lt;== Full Ammo -------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFA",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFA",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>110</ID>
              <Description>"[X] &lt;== Unlimited Unit Points ---&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
              <LastState Activated="0" />
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUU",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUU",0)
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>45</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>46</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>160</ID>
          <Description>"Test: Ammo - Frequent"</Description>
          <LastState Activated="0" />
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : Jason

  Frequent comparison of ?Nimbus? ammo
}

[ENABLE]

aobscanmodule(Ammo_Frequent,InstanceServerG.exe,83 B9 30 14 00 00 00 75) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp dword ptr [ecx+00001430],00
  jmp return

Ammo_Frequent:
  jmp code
  nop
  nop
return:
registersymbol(Ammo_Frequent)

[DISABLE]

Ammo_Frequent:
  db 83 B9 30 14 00 00 00

unregistersymbol(Ammo_Frequent)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+BE6039

"InstanceServerG.exe"+BE601D: 8D 55 CC              -  lea edx,[ebp-34]
"InstanceServerG.exe"+BE6020: 52                    -  push edx
"InstanceServerG.exe"+BE6021: E8 BA 3D E2 FF        -  call InstanceServerG.exe+A09DE0
"InstanceServerG.exe"+BE6026: D9 45 FC              -  fld dword ptr [ebp-04]
"InstanceServerG.exe"+BE6029: 8B E5                 -  mov esp,ebp
"InstanceServerG.exe"+BE602B: 5D                    -  pop ebp
"InstanceServerG.exe"+BE602C: C2 04 00              -  ret 0004
"InstanceServerG.exe"+BE602F: CC                    -  int 3 
"InstanceServerG.exe"+BE6030: 83 B9 34 14 00 00 00  -  cmp dword ptr [ecx+00001434],00
"InstanceServerG.exe"+BE6037: 76 0F                 -  jna InstanceServerG.exe+BE6048
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+BE6039: 83 B9 30 14 00 00 00  -  cmp dword ptr [ecx+00001430],00
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+BE6040: 75 06                 -  jne InstanceServerG.exe+BE6048
"InstanceServerG.exe"+BE6042: B8 01 00 00 00        -  mov eax,00000001
"InstanceServerG.exe"+BE6047: C3                    -  ret 
"InstanceServerG.exe"+BE6048: 33 C0                 -  xor eax,eax
"InstanceServerG.exe"+BE604A: C3                    -  ret 
"InstanceServerG.exe"+BE604B: CC                    -  int 3 
"InstanceServerG.exe"+BE604C: CC                    -  int 3 
"InstanceServerG.exe"+BE604D: CC                    -  int 3 
"InstanceServerG.exe"+BE604E: CC                    -  int 3 
"InstanceServerG.exe"+BE604F: CC                    -  int 3 
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>159</ID>
      <Description>"Ammo"</Description>
      <LastState Value="??" Activated="0" RealAddress="1788BC40" />
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>1788BC40</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>161</ID>
      <Description>"Test: Ammo Change (2 places, reload + use)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : Jason

  Two areas of code executed when changing ammo, either reloading or firing.
  First one happens twice for each and second happens once.
}

[ENABLE]

aobscanmodule(T_AmmoChange1,InstanceServerG.exe,69 79 D1 FF 85 C0 74 1E 8B 4E 04 03 C8 74 17 8B 09 89 4D 08) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ecx,[ecx]
  mov [ebp+08],ecx
  jmp return

T_AmmoChange1+0F:
  jmp code
return:
registersymbol(T_AmmoChange1)

aobscanmodule(T_AmmoChange2,InstanceServerG.exe,69 79 D1 FF 85 C0 74 1E 8B 4E 04 03 C8 74 17 8B 09 89 4D 08) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov ecx,[ecx]
  mov [ebp+08],ecx
  jmp return2

T_AmmoChange2+0F:
  jmp code2
return2:
registersymbol(T_AmmoChange2)

[DISABLE]

T_AmmoChange1+0F:
  db 8B 09 89 4D 08

unregistersymbol(T_AmmoChange1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+B93E52

"InstanceServerG.exe"+B93E3B: 56                    -  push esi
"InstanceServerG.exe"+B93E3C: 8B F1                 -  mov esi,ecx
"InstanceServerG.exe"+B93E3E: 8B 4D 08              -  mov ecx,[ebp+08]
"InstanceServerG.exe"+B93E41: 50                    -  push eax
"InstanceServerG.exe"+B93E42: E8 69 79 D1 FF        -  call InstanceServerG.exe+8AB7B0
"InstanceServerG.exe"+B93E47: 85 C0                 -  test eax,eax
"InstanceServerG.exe"+B93E49: 74 1E                 -  je InstanceServerG.exe+B93E69
"InstanceServerG.exe"+B93E4B: 8B 4E 04              -  mov ecx,[esi+04]
"InstanceServerG.exe"+B93E4E: 03 C8                 -  add ecx,eax
"InstanceServerG.exe"+B93E50: 74 17                 -  je InstanceServerG.exe+B93E69
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+B93E52: 8B 09                 -  mov ecx,[ecx]
"InstanceServerG.exe"+B93E54: 89 4D 08              -  mov [ebp+08],ecx
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+B93E57: DB 45 08              -  fild dword ptr [ebp+08]
"InstanceServerG.exe"+B93E5A: 85 C9                 -  test ecx,ecx
"InstanceServerG.exe"+B93E5C: 79 06                 -  jns InstanceServerG.exe+B93E64
"InstanceServerG.exe"+B93E5E: DC 05 70 BF 20 01     -  fadd qword ptr [InstanceServerG.exe+E0BF70]
"InstanceServerG.exe"+B93E64: 8B 55 0C              -  mov edx,[ebp+0C]
"InstanceServerG.exe"+B93E67: DD 1A                 -  fstp qword ptr [edx]
"InstanceServerG.exe"+B93E69: 5E                    -  pop esi
"InstanceServerG.exe"+B93E6A: 5D                    -  pop ebp
"InstanceServerG.exe"+B93E6B: C2 08 00              -  ret 0008
"InstanceServerG.exe"+B93E6E: CC                    -  int 3 
}
T_AmmoChange2+0F:
  db 8B 09 89 4D 08

unregistersymbol(T_AmmoChange2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+B93E52

"InstanceServerG.exe"+B93E3B: 56                    -  push esi
"InstanceServerG.exe"+B93E3C: 8B F1                 -  mov esi,ecx
"InstanceServerG.exe"+B93E3E: 8B 4D 08              -  mov ecx,[ebp+08]
"InstanceServerG.exe"+B93E41: 50                    -  push eax
"InstanceServerG.exe"+B93E42: E8 69 79 D1 FF        -  call InstanceServerG.exe+8AB7B0
"InstanceServerG.exe"+B93E47: 85 C0                 -  test eax,eax
"InstanceServerG.exe"+B93E49: 74 1E                 -  je InstanceServerG.exe+B93E69
"InstanceServerG.exe"+B93E4B: 8B 4E 04              -  mov ecx,[esi+04]
"InstanceServerG.exe"+B93E4E: 03 C8                 -  add ecx,eax
"InstanceServerG.exe"+B93E50: 74 17                 -  je InstanceServerG.exe+B93E69
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+B93E52: 8B 09                 -  mov ecx,[ecx]
"InstanceServerG.exe"+B93E54: 89 4D 08              -  mov [ebp+08],ecx
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+B93E57: DB 45 08              -  fild dword ptr [ebp+08]
"InstanceServerG.exe"+B93E5A: 85 C9                 -  test ecx,ecx
"InstanceServerG.exe"+B93E5C: 79 06                 -  jns InstanceServerG.exe+B93E64
"InstanceServerG.exe"+B93E5E: DC 05 70 BF 20 01     -  fadd qword ptr [InstanceServerG.exe+E0BF70]
"InstanceServerG.exe"+B93E64: 8B 55 0C              -  mov edx,[ebp+0C]
"InstanceServerG.exe"+B93E67: DD 1A                 -  fstp qword ptr [edx]
"InstanceServerG.exe"+B93E69: 5E                    -  pop esi
"InstanceServerG.exe"+B93E6A: 5D                    -  pop ebp
"InstanceServerG.exe"+B93E6B: C2 08 00              -  ret 0008
"InstanceServerG.exe"+B93E6E: CC                    -  int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>162</ID>
      <Description>"Test: Ammo Firing (3 places)"</Description>
      <LastState Activated="0" />
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : InstanceServerG.exe
  Version: 
  Date   : 2015-10-20
  Author : Jason

  Three pieces of code executed that access ammo when firing, along with the
  two sections that change ammo.  I'm thinking the second compare
  with zero is what we want, it should be after the change maybe?

  Base for deciding owner MIGHT be at +44, +48, +F0, +90
}

[ENABLE]

aobscanmodule(T_AmmoFiring1,InstanceServerG.exe,83 B9 30 14 00 00 00 74) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp dword ptr [ecx+00001430],00
  jmp return

T_AmmoFiring1:
  jmp code
  nop
  nop
return:
registersymbol(T_AmmoFiring1)

aobscanmodule(T_AmmoFiring2,InstanceServerG.exe,8B 86 30 14 00 00 8B 4D) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov eax,[esi+00001430]
  jmp return2

T_AmmoFiring2:
  jmp code2
  nop
return2:
registersymbol(T_AmmoFiring2)

aobscanmodule(T_AmmoFiring3,InstanceServerG.exe,83 BE 30 14 00 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  cmp dword ptr [esi+00001430],00
  jmp return5

T_AmmoFiring3:
  jmp code5
  nop
  nop
return5:
registersymbol(T_AmmoFiring3)

[DISABLE]

T_AmmoFiring1:
  db 83 B9 30 14 00 00 00

unregistersymbol(T_AmmoFiring1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+BE607C

"InstanceServerG.exe"+BE606A: CC                    -  int 3 
"InstanceServerG.exe"+BE606B: CC                    -  int 3 
"InstanceServerG.exe"+BE606C: CC                    -  int 3 
"InstanceServerG.exe"+BE606D: CC                    -  int 3 
"InstanceServerG.exe"+BE606E: CC                    -  int 3 
"InstanceServerG.exe"+BE606F: CC                    -  int 3 
"InstanceServerG.exe"+BE6070: 55                    -  push ebp
"InstanceServerG.exe"+BE6071: 8B EC                 -  mov ebp,esp
"InstanceServerG.exe"+BE6073: 83 B9 34 14 00 00 00  -  cmp dword ptr [ecx+00001434],00
"InstanceServerG.exe"+BE607A: 76 09                 -  jna InstanceServerG.exe+BE6085
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+BE607C: 83 B9 30 14 00 00 00  -  cmp dword ptr [ecx+00001430],00
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+BE6083: 74 1C                 -  je InstanceServerG.exe+BE60A1
"InstanceServerG.exe"+BE6085: 8B 55 0C              -  mov edx,[ebp+0C]
"InstanceServerG.exe"+BE6088: 8B 01                 -  mov eax,[ecx]
"InstanceServerG.exe"+BE608A: 8B 40 6C              -  mov eax,[eax+6C]
"InstanceServerG.exe"+BE608D: 52                    -  push edx
"InstanceServerG.exe"+BE608E: 8B 55 08              -  mov edx,[ebp+08]
"InstanceServerG.exe"+BE6091: 52                    -  push edx
"InstanceServerG.exe"+BE6092: FF D0                 -  call eax
"InstanceServerG.exe"+BE6094: 84 C0                 -  test al,al
"InstanceServerG.exe"+BE6096: 74 09                 -  je InstanceServerG.exe+BE60A1
}
T_AmmoFiring2:
  db 8B 86 30 14 00 00

unregistersymbol(T_AmmoFiring2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+2FCEAE

"InstanceServerG.exe"+2FCE90: 55                    -  push ebp
"InstanceServerG.exe"+2FCE91: 8B EC                 -  mov ebp,esp
"InstanceServerG.exe"+2FCE93: 83 EC 20              -  sub esp,20
"InstanceServerG.exe"+2FCE96: 56                    -  push esi
"InstanceServerG.exe"+2FCE97: 8B F1                 -  mov esi,ecx
"InstanceServerG.exe"+2FCE99: E8 92 91 8E 00        -  call InstanceServerG.exe+BE6030
"InstanceServerG.exe"+2FCE9E: 84 C0                 -  test al,al
"InstanceServerG.exe"+2FCEA0: 0F 85 82 00 00 00     -  jne InstanceServerG.exe+2FCF28
"InstanceServerG.exe"+2FCEA6: 8D 4D E0              -  lea ecx,[ebp-20]
"InstanceServerG.exe"+2FCEA9: E8 C2 AA 70 00        -  call InstanceServerG.exe+A07970
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+2FCEAE: 8B 86 30 14 00 00     -  mov eax,[esi+00001430]
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+2FCEB4: 8B 4D 08              -  mov ecx,[ebp+08]
"InstanceServerG.exe"+2FCEB7: C7 45 E8 02 00 00 00  -  mov [ebp-18],00000002
"InstanceServerG.exe"+2FCEBE: C7 45 EC 19 00 00 00  -  mov [ebp-14],00000019
"InstanceServerG.exe"+2FCEC5: 3B C1                 -  cmp eax,ecx
"InstanceServerG.exe"+2FCEC7: 73 02                 -  jae InstanceServerG.exe+2FCECB
"InstanceServerG.exe"+2FCEC9: 8B C8                 -  mov ecx,eax
"InstanceServerG.exe"+2FCECB: 2B C1                 -  sub eax,ecx
"InstanceServerG.exe"+2FCECD: 89 45 08              -  mov [ebp+08],eax
"InstanceServerG.exe"+2FCED0: DB 45 08              -  fild dword ptr [ebp+08]
"InstanceServerG.exe"+2FCED3: 79 06                 -  jns InstanceServerG.exe+2FCEDB
}
T_AmmoFiring3:
  db 83 BE 30 14 00 00 00

unregistersymbol(T_AmmoFiring3)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "InstanceServerG.exe"+BFAA60

"InstanceServerG.exe"+BFAA4B: 5D                    -  pop ebp
"InstanceServerG.exe"+BFAA4C: C2 08 00              -  ret 0008
"InstanceServerG.exe"+BFAA4F: CC                    -  int 3 
"InstanceServerG.exe"+BFAA50: 55                    -  push ebp
"InstanceServerG.exe"+BFAA51: 8B EC                 -  mov ebp,esp
"InstanceServerG.exe"+BFAA53: 51                    -  push ecx
"InstanceServerG.exe"+BFAA54: 56                    -  push esi
"InstanceServerG.exe"+BFAA55: 8B F1                 -  mov esi,ecx
"InstanceServerG.exe"+BFAA57: 83 BE 34 14 00 00 00  -  cmp dword ptr [esi+00001434],00
"InstanceServerG.exe"+BFAA5E: 76 12                 -  jna InstanceServerG.exe+BFAA72
// ---------- INJECTING HERE ----------
"InstanceServerG.exe"+BFAA60: 83 BE 30 14 00 00 00  -  cmp dword ptr [esi+00001430],00
// ---------- DONE INJECTING  ----------
"InstanceServerG.exe"+BFAA67: 75 09                 -  jne InstanceServerG.exe+BFAA72
"InstanceServerG.exe"+BFAA69: 32 C0                 -  xor al,al
"InstanceServerG.exe"+BFAA6B: 5E                    -  pop esi
"InstanceServerG.exe"+BFAA6C: 8B E5                 -  mov esp,ebp
"InstanceServerG.exe"+BFAA6E: 5D                    -  pop ebp
"InstanceServerG.exe"+BFAA6F: C2 04 00              -  ret 0004
"InstanceServerG.exe"+BFAA72: 8B 46 04              -  mov eax,[esi+04]
"InstanceServerG.exe"+BFAA75: 53                    -  push ebx
"InstanceServerG.exe"+BFAA76: 8B 5D 08              -  mov ebx,[ebp+08]
"InstanceServerG.exe"+BFAA79: 3B 58 5C              -  cmp ebx,[eax+5C]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iRegs</Name>
      <Address>0155027E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount</Name>
      <Address>0155027A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>repair</Name>
      <Address>00651409</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>units1</Name>
      <Address>00545378</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>units2</Name>
      <Address>0051F4FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>resources</Name>
      <Address>00DE876C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>missiles</Name>
      <Address>00FA2A99</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>18840000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FindUnitOwner</Name>
      <Address>18850000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HPUpdate</Name>
      <Address> 006B44D1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_BUILD</Name>
      <Address> 006F4F5D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_BuildUnit</Name>
      <Address> 00611F4B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_RESOURCES</Name>
      <Address> 006BC38C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_AMMO</Name>
      <Address> 00FFAA60</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Structures StructVersion="2">
    <Structure Name="UnitHealth" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="20" Vartype="Float" Bytesize="4" Description="Health" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="24" Vartype="Float" Bytesize="4" Description="Max Health" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="Resources" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="12" Vartype="4 Bytes" Bytesize="4" Description="Resources" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" Description="ChangePerSec" DisplayMethod="Signed Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="StructureBuild" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="24" Vartype="4 Bytes" Bytesize="4" Description="Build Increase" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="32" Vartype="4 Bytes" Bytesize="4" Description="Build Increase" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="40" Vartype="4 Bytes" Bytesize="4" Description="Build Status?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="44" Vartype="4 Bytes" Bytesize="4" Description="Build Max?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="48" Vartype="Byte" Bytesize="1" Description="Flags1? (paused?)" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="49" Vartype="Byte" Bytesize="1" Description="Flags2?  Set to 1 when finish didn't work after messing?)" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="50" Vartype="Byte" Bytesize="1" Description="Flags3?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="51" Vartype="Byte" Bytesize="1" Description="Flags4?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="116" Vartype="4 Bytes" Bytesize="4" Description="Build Increase" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="120" Vartype="Float" Bytesize="4" Description="Remaining Fraction?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="124" Vartype="Pointer" Bytesize="4" Description="Pointer after complete" DisplayMethod="Unsigned Integer" BackgroundColor="80000005">
          <Structure Name="Autocreated from 18045AB0" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
            <Elements>
            </Elements>
          </Structure>
        </Element>
        <Element Offset="132" Vartype="Float" Bytesize="4" Description="Added to 0078?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="140" Vartype="Float" Bytesize="4" Description="Build Increase (HP)" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="144" Vartype="4 Bytes" Bytesize="4" Description="Cost" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="148" Vartype="Float" Bytesize="4" Description="Time To Build?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="152" Vartype="4 Bytes" Bytesize="4" Description="Cost/Sec" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="156" Vartype="4 Bytes" Bytesize="4" Description="-1 if paused, # of times resumed if building?" DisplayMethod="Hexadecimal" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="UnitBuild" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="32" Vartype="4 Bytes" Bytesize="4" Description="Increases (to 0024?)" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="36" Vartype="4 Bytes" Bytesize="4" Description="Max Build (0020 increases to?)" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="52" Vartype="Float" Bytesize="4" Description="Cost applied? Percent Complete?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" Description="Unit Cost?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="60" Vartype="4 Bytes" Bytesize="4" Description="Amount of cost completed?()" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="64" Vartype="Float" Bytesize="4" Description="Percent Remaining?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="72" Vartype="Float" Bytesize="4" Description="Percent Complete Low?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="76" Vartype="Float" Bytesize="4" Description="Time to complete?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" Description="Cost/second?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="UnitBuildEAX" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
      </Elements>
    </Structure>
    <Structure Name="unnamed structure" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
      </Elements>
    </Structure>
    <Structure Name="Ammo" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="5168" Vartype="4 Bytes" Bytesize="4" Description="Current Ammo" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="5172" Vartype="4 Bytes" Bytesize="4" Description="Max Ammo" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
  </Structures>
  <Comments>===========================================
 Game Title    : Grey Goo Gold
 Game Version  : 0.15.522362
 Game Sponsor  : RELOADED
 Process Name  : InstanceServerG.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 04-Feb-2015
 Author        : Recifense
 History:
 28-Jan-15: First Release
 04-Feb-15: Release for version 0.15 (patch by CODEX)
 Features:
 - Minimum Resources [1]
 - God Mode          [2]
 - Full Ammo         [3]
 - Unlimited Units   [4]
 - Some Pointers
===========================================
[1] For human player only (not AI);
[2] For player's units and buildings (not AI's);
[3] For Human player and AIs;
[4] For Human player only (not AI);
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "InstanceServerG.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  MR/GM cheats;
CTRL+End       = Disable MR/GM cheats;
-----------
CTRL+PageUp    = Enable  FA cheat;
CTRL+PageDown  = Disable FA cheat;
-----------
CTRL+Insert    = Enable  UUP cheat;
CTRL+Delete    = Disable UUP cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>