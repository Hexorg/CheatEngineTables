<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"9999 HP"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Hook into the code that reads HP in battle.
//Insert a write to always read 9999 HP.
[ENABLE]
aobscanmodule(readhp,FFV_Game.exe,8B 73 2C 8B C1)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+2C], (Int)9999 //Set it to 9999 first.
  mov esi,[ebx+2C]
  mov eax,ecx
  jmp return

readhp:
  jmp code
return:
registersymbol(readhp)

[DISABLE]
readhp:
  db 8B 73 2C 8B C1
unregistersymbol(readhp)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+14126
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Infinite MP"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Find something that reads MP.
//Insert an overwrite.
[ENABLE]
aobscanmodule(readmp,FFV_Game.exe,FF 73 34 68 8C 0C 45 01)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebx+34], (Int)999 //Overwrite.
  push [ebx+34]
  push FFV_Game.exe+E0C8C
  jmp return

readmp:
  jmp code
  nop
  nop
  nop
return:
registersymbol(readmp)

[DISABLE]
readmp:
  db FF 73 34 68 8C 0C 45 01
unregistersymbol(readmp)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+14238
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Max Gil"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Hook into the very specific read for gold.
//Max it out, etc.
[ENABLE]
aobscanmodule(readgil,FFV_Game.exe,8B 80 F8 C8 01 00 E9)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+0001C8F8],(Int)999999999 //Overwrite it.
  mov eax,[eax+0001C8F8]
  jmp return

readgil:
  jmp code
  nop
return:
registersymbol(readgil)

[DISABLE]
readgil:
  db 8B 80 F8 C8 01 00
unregistersymbol(readgil)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+3F76
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Level 99 Next Fight"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Hook into the constant EXP read.
//Set it really high so each battle does stuff.
[ENABLE]
aobscanmodule(readexp,FFV_Game.exe,8B 71 3C EB 08)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ecx+3C], (Int)999999999 //Read lots yo.
  mov esi,[ecx+3C]
  jmp FFV_Game.exe+6A640
  jmp return

readexp:
  jmp code
return:
registersymbol(readexp)

[DISABLE]
readexp:
  db 8B 71 3C EB 08
unregistersymbol(readexp)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+6A633
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"999 AP After Battle"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Find what writes the AP earned in battle.
//Overwrite it, blah blah.
[ENABLE]
aobscanmodule(writeapearned,FFV_Game.exe,89 83 34 9A 00 00 85)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //mov [ebx+00009A34],eax
  mov [ebx+00009A34],(Int)999 //999 AP
  jmp return

writeapearned:
  jmp code
  nop
return:
registersymbol(writeapearned)

[DISABLE]
writeapearned:
  db 89 83 34 9A 00 00
unregistersymbol(writeapearned)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+C3CB
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Item Menu For 99 Items"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Find code that loads item counts when the menu is opened.
//Insert a write to also set the item counts to 99.
[ENABLE]
aobscanmodule(pollitemcounts,FFV_Game.exe,8B 14 B0 89 54 24 10)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [eax+esi*4],(Int)99 //Set the item counts to 99.
  mov edx,[eax+esi*4]
  mov [esp+10],edx
  jmp return

pollitemcounts:
  jmp code
  nop
  nop
return:
registersymbol(pollitemcounts)

[DISABLE]
pollitemcounts:
  db 8B 14 B0 89 54 24 10

unregistersymbol(pollitemcounts)
dealloc(newmem)

// ORIGINAL CODE - INJECTION POINT: "FFV_Game.exe"+9FDFD
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
