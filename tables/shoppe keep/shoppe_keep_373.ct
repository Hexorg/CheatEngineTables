<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Inf. Gold"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Shoppe Keep.exe
  Version: 
  Date   : 2015-09-01
  Author : Bl00dWolf

  This script does blah blah blah
}

[ENABLE]

aobscan(goldmoney,34 24 48 8B F1 48 8B 46 20 F3 0F 10 46 38) // should be unique
alloc(newmem,$1000,053CA2FF)

label(code)
label(return)

newmem:

code:
  mov [rsi+38],(float)9999999
  movss xmm0,[rsi+38]
  jmp return

goldmoney+9:
  jmp code
return:
registersymbol(goldmoney)

[DISABLE]

goldmoney+9:
  db F3 0F 10 46 38

unregistersymbol(goldmoney)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 053CA2FF

053CA2E7: 00 00                          -  add [rax],al
053CA2E9: 00 00                          -  add [rax],al
053CA2EB: 00 00                          -  add [rax],al
053CA2ED: 00 00                          -  add [rax],al
053CA2EF: 00 48 83                       -  add [rax-7D],cl
053CA2F2: EC                             -  in al,dx
053CA2F3: 08 48 89                       -  or [rax-77],cl
053CA2F6: 34 24                          -  xor al,24
053CA2F8: 48 8B F1                       -  mov rsi,rcx
053CA2FB: 48 8B 46 20                    -  mov rax,[rsi+20]
// ---------- INJECTING HERE ----------
053CA2FF: F3 0F 10 46 38                 -  movss xmm0,[rsi+38]
// ---------- DONE INJECTING  ----------
053CA304: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
053CA308: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
053CA30D: F3 44 0F 11 78 28              -  movss [rax+28],xmm15
053CA313: 48 8B 46 28                    -  mov rax,[rsi+28]
053CA317: F3 0F 10 46 3C                 -  movss xmm0,[rsi+3C]
053CA31C: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
053CA320: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
053CA325: F3 44 0F 11 78 28              -  movss [rax+28],xmm15
053CA32B: 48 8B 46 30                    -  mov rax,[rsi+30]
053CA32F: F3 0F 10 46 40                 -  movss xmm0,[rsi+40]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Inf. K points"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Shoppe Keep.exe
  Version: 
  Date   : 2016-05-21
  Author : Bl00dWolf

  This script does blah blah blah
}

[ENABLE]

aobscan(infK,41 FF D3 48 83 C4 20 48 8B 46 30 48 89 45 F0 ?? ?? ?? ?? ?? 48 63 00 48 89 45 E8) // should be unique
alloc(newmem,$1000,1F544AA7)

label(code)
label(return)

newmem:

code:
  mov [rax], #999
  movsxd  rax,dword ptr [rax]
  mov [rbp-18],rax
  jmp return

infK+14:
  jmp code
  nop
  nop
return:
registersymbol(infK)

[DISABLE]

infK+14:
  db 48 63 00 48 89 45 E8

unregistersymbol(infK)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1F544AA7

1F544A7D: 48 8B C8                       -  mov rcx,rax
1F544A80: 33 D2                          -  xor edx,edx
1F544A82: 48 83 EC 20                    -  sub rsp,20
1F544A86: 83 38 00                       -  cmp dword ptr [rax],00
1F544A89: 49 BB E0 A8 76 05 00 00 00 00  -  mov r11,000000000576A8E0
1F544A93: 41 FF D3                       -  call r11d
1F544A96: 48 83 C4 20                    -  add rsp,20
1F544A9A: 48 8B 46 30                    -  mov rax,[rsi+30]
1F544A9E: 48 89 45 F0                    -  mov [rbp-10],rax
1F544AA2: B8 70 A4 BE 15                 -  mov eax,15BEA470
// ---------- INJECTING HERE ----------
1F544AA7: 48 63 00                       -  movsxd  rax,dword ptr [rax]
1F544AAA: 48 89 45 E8                    -  mov [rbp-18],rax
// ---------- DONE INJECTING  ----------
1F544AAE: B9 48 A8 2C 05                 -  mov ecx,052CA848
1F544AB3: 48 83 EC 20                    -  sub rsp,20
1F544AB7: 49 BB 20 25 6C 05 00 00 00 00  -  mov r11,00000000056C2520
1F544AC1: 41 FF D3                       -  call r11d
1F544AC4: 48 83 C4 20                    -  add rsp,20
1F544AC8: 48 8B D0                       -  mov rdx,rax
1F544ACB: 48 8B 45 E8                    -  mov rax,[rbp-18]
1F544ACF: 89 42 10                       -  mov [rdx+10],eax
1F544AD2: B9 C0 EF 07 05                 -  mov ecx,0507EFC0
1F544AD7: 48 83 EC 20                    -  sub rsp,20
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Inf. Items Stack"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Shoppe Keep.exe
  Version: 
  Date   : 2016-05-22
  Author : Bl00dWolf

  This script does blah blah blah
}

[ENABLE]

aobscan(inf_items,FF FF 48 8B 86 20 03 00 00 48 8B 40 20 BA 08 EF ?? ?? 48 63 12 48 8B C8 48 83 EC 20 83 38 00 49 BB 20 67 ?? 05 00 00 00 00 41 FF D3 48 83 C4 20 48 63 40 14 48 89 85 20 FC FF FF B9 ?? ?? ?? ?? 48 83 EC 20 49 BB 20 25 ?? 05 00 00 00 00 41 FF D3 48 83 C4 20) // should be unique
alloc(newmem,$1000,16AA8980)

label(code)
label(return)

newmem:

code:
  mov [rax+14], #99
  movsxd  rax,dword ptr [rax+14]
  mov [rbp-000003E0],rax
  jmp return

inf_items+30:
  jmp code
  nop
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(inf_items)

[DISABLE]

inf_items+30:
  db 48 63 40 14 48 89 85 20 FC FF FF

unregistersymbol(inf_items)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 16AA8980

16AA8952: 48 8B 86 20 03 00 00           -  mov rax,[rsi+00000320]
16AA8959: 48 8B 40 20                    -  mov rax,[rax+20]
16AA895D: BA 08 EF FC 04                 -  mov edx,04FCEF08
16AA8962: 48 63 12                       -  movsxd  rdx,dword ptr [rdx]
16AA8965: 48 8B C8                       -  mov rcx,rax
16AA8968: 48 83 EC 20                    -  sub rsp,20
16AA896C: 83 38 00                       -  cmp dword ptr [rax],00
16AA896F: 49 BB 20 67 62 05 00 00 00 00  -  mov r11,0000000005626720
16AA8979: 41 FF D3                       -  call r11d
16AA897C: 48 83 C4 20                    -  add rsp,20
// ---------- INJECTING HERE ----------
16AA8980: 48 63 40 14                    -  movsxd  rax,dword ptr [rax+14]
16AA8984: 48 89 85 20 FC FF FF           -  mov [rbp-000003E0],rax
// ---------- DONE INJECTING  ----------
16AA898B: B9 D8 66 1E 05                 -  mov ecx,051E66D8
16AA8990: 48 83 EC 20                    -  sub rsp,20
16AA8994: 49 BB 20 25 5F 05 00 00 00 00  -  mov r11,00000000055F2520
16AA899E: 41 FF D3                       -  call r11d
16AA89A1: 48 83 C4 20                    -  add rsp,20
16AA89A5: 4C 8B C0                       -  mov r8,rax
16AA89A8: 48 8B 85 20 FC FF FF           -  mov rax,[rbp-000003E0]
16AA89AF: 48 8B 8D 18 FC FF FF           -  mov rcx,[rbp-000003E8]
16AA89B6: 41 89 40 10                    -  mov [r8+10],eax
16AA89BA: BA 03 00 00 00                 -  mov edx,00000003
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Inf. Furniture HP"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Shoppe Keep.exe
  Version: 
  Date   : 2016-05-22
  Author : Bl00dWolf

  This script does blah blah blah
}

[ENABLE]

aobscan(inf_items_HP,41 FF D3 48 83 C4 20 F3 0F 5A C0 F2 0F 5A E8 F3 0F 11 6E 7C F3 0F 10 46 7C F3 0F 5A C0) // should be unique
alloc(newmem,$1000,16AE4476)

label(code)
label(return)

newmem:

code:
  mov [rsi+7C],(float)921
  jmp return

inf_items_HP+F:
  jmp code
return:
registersymbol(inf_items_HP)

[DISABLE]

inf_items_HP+F:
  db F3 0F 11 6E 7C

unregistersymbol(inf_items_HP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 16AE4476

16AE4449: F3 0F 5A D2                    -  cvtss2sd xmm2,xmm2
16AE444D: F2 0F 5A D2                    -  cvtsd2ss xmm2,xmm2
16AE4451: F2 0F 5A C9                    -  cvtsd2ss xmm1,xmm1
16AE4455: F2 0F 5A C0                    -  cvtsd2ss xmm0,xmm0
16AE4459: 48 83 EC 20                    -  sub rsp,20
16AE445D: 49 BB 50 49 61 05 00 00 00 00  -  mov r11,0000000005614950
16AE4467: 41 FF D3                       -  call r11d
16AE446A: 48 83 C4 20                    -  add rsp,20
16AE446E: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
16AE4472: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
16AE4476: F3 0F 11 6E 7C                 -  movss [rsi+7C],xmm5
// ---------- DONE INJECTING  ----------
16AE447B: F3 0F 10 46 7C                 -  movss xmm0,[rsi+7C]
16AE4480: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
16AE4484: F3 0F 10 0D B4 07 00 00        -  movss xmm1,[16AE4C40]
16AE448C: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
16AE4490: 66 0F 2F C8                    -  comisd xmm1,xmm0
16AE4494: 0F 82 E8 03 00 00              -  jb 16AE4882
16AE449A: 48 8B 4E 20                    -  mov rcx,[rsi+20]
16AE449E: 48 83 EC 20                    -  sub rsp,20
16AE44A2: 49 BB 5D 2A 63 05 00 00 00 00  -  mov r11,0000000005632A5D
16AE44AC: 41 FF D3                       -  call r11d
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
