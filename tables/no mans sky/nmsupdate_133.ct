<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>1843</ID>
      <Description>"Inf Health"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(health,NMS.exe,41 01 9E E8 00 00 00) // should be unique
registersymbol(health)

health:
  db 90 90 90 90 90 90 90

[DISABLE]

health:
  db 41 01 9E E8 00 00 00

unregistersymbol(health)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1774</ID>
      <Description>"Inf Jetpack"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infjetpack,NMS.exe,F3 0F 11 87 54 14 00 00 44) // should be unique
registersymbol(infjetpack)

infjetpack:
  db 90 90 90 90 90 90 90 90

[DISABLE]

infjetpack:
  db F3 0F 11 87 54 14 00 00

unregistersymbol(infjetpack)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1789</ID>
      <Description>"Inf Scanner"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infscanner,NMS.exe,89 59 10 89 59 38) // should be unique
registersymbol(infscanner)

infscanner:
  db 90 90 90

[DISABLE]

infscanner:
  db 89 59 10

unregistersymbol(infscanner)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1875</ID>
      <Description>"Inf Life Support"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infls,NMS.exe,89 48 18 48 8B 0D 19 30 CC 00) // should be unique
registersymbol(infls)

infls:
  db 90 90 90

[DISABLE]

infls:
  db 89 48 18

unregistersymbol(infls)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1794</ID>
      <Description>"Inf Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infammo,NMS.exe,41 29 B7 68 0F 00 00) // should be unique
registersymbol(infammo)

infammo:
  db 90 90 90 90 90 90 90

[DISABLE]

infammo:
  db 41 29 B7 68 0F 00 00

unregistersymbol(infammo)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1796</ID>
      <Description>"Inf Grenades"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infgrenades,NMS.exe,41 FF 8F 70 0F 00 00) // should be unique
registersymbol(infgrenades)

infgrenades:
  db 90 90 90 90 90 90 90

[DISABLE]

infgrenades:
  db 41 FF 8F 70 0F 00 00

unregistersymbol(infgrenades)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1792</ID>
      <Description>"No Overheat"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(overheat,NMS.exe,F3 41 0F 11 84 24 F0 0E 00 00 41) // should be unique
registersymbol(overheat)

overheat:
  db 90 90 90 90 90 90 90 90 90 90

[DISABLE]

overheat:
  db F3 41 0F 11 84 24 F0 0E 00 00

unregistersymbol(overheat)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1831</ID>
      <Description>"No Ship Overheat"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(shipoverheat,NMS.exe,F3 0F 11 87 CC 0A 00 00) // should be unique
registersymbol(shipoverheat)

shipoverheat:
  db 90 90 90 90 90 90 90 90

[DISABLE]

shipoverheat:
  db F3 0F 11 87 CC 0A 00 00

unregistersymbol(shipoverheat)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1836</ID>
      <Description>"Inf Hyperdrive"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infhd,NMS.exe,89 48 18 41 8B C6) // should be unique
registersymbol(infhd)

infhd:
  db 90 90 90

[DISABLE]

infhd:
  db 89 48 18

unregistersymbol(infhd)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1835</ID>
      <Description>"Inf Phase Beam"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infpb,NMS.exe,44 89 40 18 85 C9) // should be unique
registersymbol(infpb)

infpb:
  db 90 90 90 90

[DISABLE]

infpb:
  db 44 89 40 18

unregistersymbol(infpb)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1876</ID>
      <Description>"Inf Launch Thrusters"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(inflt,NMS.exe,89 47 18 48 8B 0D 41 4E BE 00) // should be unique
registersymbol(inflt)

inflt:
  db 90 90 90

[DISABLE]

inflt:
  db 89 47 18

unregistersymbol(inflt)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1837</ID>
      <Description>"Inf Deflector Shield"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(infss,NMS.exe,01 58 18 8B 58 18) // should be unique
registersymbol(infss)

infss:
  db 90 90 90

[DISABLE]

infss:
  db 01 58 18

unregistersymbol(infss)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1866</ID>
      <Description>"Ignore Crafting Requirements"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : NMS.exe
  Version: 
  Date   : 2016-12-04
  Author : Squall8

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(crafting1,NMS.exe,44 3B 76 14 7C 16) // should be unique
registersymbol(crafting1)

crafting1:
  db 44 3B 76 90 90 90

aobscanmodule(crafting2,NMS.exe,14 7C 12 45 33 F6) // should be unique
registersymbol(crafting2)

crafting2+01:
  db 90 90

[DISABLE]

crafting1:
  db 44 3B 76 14 7C 16

unregistersymbol(crafting1)

crafting2+01:
  db 7C 12

unregistersymbol(crafting2)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+54296A

"NMS.exe"+54294C: 41 FF C0                 -  inc r8d
"NMS.exe"+54294F: EB 04                    -  jmp NMS.exe+542955
"NMS.exe"+542951: 44 03 40 18              -  add r8d,[rax+18]
"NMS.exe"+542955: 48 83 C0 30              -  add rax,30
"NMS.exe"+542959: 48 3B C1                 -  cmp rax,rcx
"NMS.exe"+54295C: 75 D4                    -  jne NMS.exe+542932
"NMS.exe"+54295E: 45 03 F0                 -  add r14d,r8d
"NMS.exe"+542961: 48 83 C2 04              -  add rdx,04
"NMS.exe"+542965: 49 3B D7                 -  cmp rdx,r15
"NMS.exe"+542968: 75 A6                    -  jne NMS.exe+542910
// ---------- INJECTING HERE ----------
"NMS.exe"+54296A: 44 3B 76 14              -  cmp r14d,[rsi+14]
"NMS.exe"+54296E: 7C 16                    -  jl NMS.exe+542986
// ---------- DONE INJECTING  ----------
"NMS.exe"+542970: 45 33 F6                 -  xor r14d,r14d
"NMS.exe"+542973: 48 83 C6 18              -  add rsi,18
"NMS.exe"+542977: 48 3B F3                 -  cmp rsi,rbx
"NMS.exe"+54297A: 0F 85 00 FF FF FF        -  jne NMS.exe+542880
"NMS.exe"+542980: 48 8B 7D B8              -  mov rdi,[rbp-48]
"NMS.exe"+542984: EB 07                    -  jmp NMS.exe+54298D
"NMS.exe"+542986: 32 DB                    -  xor bl,bl
"NMS.exe"+542988: 45 33 F6                 -  xor r14d,r14d
"NMS.exe"+54298B: EB 12                    -  jmp NMS.exe+54299F
"NMS.exe"+54298D: 48 8B CF                 -  mov rcx,rdi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1857</ID>
      <Description>"Unlock All Technology Recipes"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(technology,NMS.exe,49 8B 9F 20 14 00 00)
alloc(newmem,$1000,technology)
alloc(cGcTechnologyTable,1024,technology)
label(cGcTechnologyTable_end)
registersymbol(cGcTechnologyTable)
registersymbol(cGcTechnologyTable_end)

label(code)
label(return)

newmem:

code:
  mov rbx,cGcTechnologyTable
  mov rdi,cGcTechnologyTable_end
  jmp return

technology:
  jmp code
  nop
  nop
return:
registersymbol(technology)

cGcTechnologyTable+000:
db 'PROTECT'
cGcTechnologyTable+010:
db 'ENERGY'
cGcTechnologyTable+020:
db 'JET1'
cGcTechnologyTable+030:
db 'JETBOOST1'
cGcTechnologyTable+040:
db 'JETBOOST2'
cGcTechnologyTable+050:
db 'JETBOOST3'
cGcTechnologyTable+060:
db 'UNW1'
cGcTechnologyTable+070:
db 'UNW2'
cGcTechnologyTable+080:
db 'UNW3'
cGcTechnologyTable+090:
db 'RAD1'
cGcTechnologyTable+0A0:
db 'RAD2'
cGcTechnologyTable+0B0:
db 'RAD3'
cGcTechnologyTable+0C0:
db 'TOX1'
cGcTechnologyTable+0D0:
db 'TOX2'
cGcTechnologyTable+0E0:
db 'TOX3'
cGcTechnologyTable+0F0:
db 'COLD1'
cGcTechnologyTable+100:
db 'COLD2'
cGcTechnologyTable+110:
db 'COLD3'
cGcTechnologyTable+120:
db 'HOT1'
cGcTechnologyTable+130:
db 'HOT2'
cGcTechnologyTable+140:
db 'HOT3'
cGcTechnologyTable+150:
db 'SHIELDBOOST1'
cGcTechnologyTable+160:
db 'SHIELDBOOST2'
cGcTechnologyTable+170:
db 'SHIELDBOOST3'
cGcTechnologyTable+180:
db 'STAM1'
cGcTechnologyTable+190:
db 'STAM2'
cGcTechnologyTable+1A0:
db 'STAM3'
cGcTechnologyTable+1B0:
db 'ENERGYBOOST1'
cGcTechnologyTable+1C0:
db 'ENERGYBOOST2'
cGcTechnologyTable+1D0:
db 'ARMOUR1'
cGcTechnologyTable+1E0:
db 'ARMOUR2'
cGcTechnologyTable+1F0:
db 'ARMOUR3'
cGcTechnologyTable+200:
db 'SHIPLAS1'
cGcTechnologyTable+210:
db 'SHIPLASCOOL1'
cGcTechnologyTable+220:
db 'SHIPLASCOOL2'
cGcTechnologyTable+230:
db 'SHIPLASCOOL3'
cGcTechnologyTable+240:
db 'SHIPLDMG1'
cGcTechnologyTable+250:
db 'SHIPLDMG2'
cGcTechnologyTable+260:
db 'SHIPLDMG3'
cGcTechnologyTable+270:
db 'SHIPGUN1'
cGcTechnologyTable+280:
db 'SHIPGUNCOOL1'
cGcTechnologyTable+290:
db 'SHIPGUNCOOL2'
cGcTechnologyTable+2A0:
db 'SHIPGUNCOOL3'
cGcTechnologyTable+2B0:
db 'SHIPGUNRATE1'
cGcTechnologyTable+2C0:
db 'SHIPGUNRATE2'
cGcTechnologyTable+2D0:
db 'SHIPGUNRATE3'
cGcTechnologyTable+2E0:
db 'SHIPGDMG1'
cGcTechnologyTable+2F0:
db 'SHIPGDMG2'
cGcTechnologyTable+300:
db 'SHIPGDMG3'
cGcTechnologyTable+310:
db 'SHIPSHIELD'
cGcTechnologyTable+320:
db 'SHIPSHLDBOOST1'
cGcTechnologyTable+330:
db 'SHIPSHLDBOOST2'
cGcTechnologyTable+340:
db 'SHIPSHLDBOOST3'
cGcTechnologyTable+350:
db 'SHIPJUMP1'
cGcTechnologyTable+360:
db 'SHIPJUMP2'
cGcTechnologyTable+370:
db 'SHIPJUMP3'
cGcTechnologyTable+380:
db 'HYPERDRIVE'
cGcTechnologyTable+390:
db 'HDRIVEBOOST1'
cGcTechnologyTable+3A0:
db 'HDRIVEBOOST2'
cGcTechnologyTable+3B0:
db 'HDRIVEBOOST3'
cGcTechnologyTable+3C0:
db 'LAUNCHER'
cGcTechnologyTable+3D0:
db 'PHOTONIX_CORE'
cGcTechnologyTable+3E0:
db 'LASER'
cGcTechnologyTable+3F0:
db 'RAILGUN1'
cGcTechnologyTable+400:
db 'LASMINERAD1'
cGcTechnologyTable+410:
db 'LASMINERAD2'
cGcTechnologyTable+420:
db 'LASMINERAD3'
cGcTechnologyTable+430:
db 'LASMINESPEED1'
cGcTechnologyTable+440:
db 'LASMINESPEED2'
cGcTechnologyTable+450:
db 'LASMINESPEED3'
cGcTechnologyTable+460:
db 'LASCOOL1'
cGcTechnologyTable+470:
db 'LASCOOL2'
cGcTechnologyTable+480:
db 'LASCOOL3'
cGcTechnologyTable+490:
db 'LASDMG1'
cGcTechnologyTable+4A0:
db 'LASDMG2'
cGcTechnologyTable+4B0:
db 'LASDMG3'
cGcTechnologyTable+4C0:
db 'LASDMG4'
cGcTechnologyTable+4D0:
db 'BOLT'
cGcTechnologyTable+4E0:
db 'BOLTSHOTGUN'
cGcTechnologyTable+4F0:
db 'BOLTSMG'
cGcTechnologyTable+500:
db 'BOLTHOMING'
cGcTechnologyTable+510:
db 'BOLTDMG1'
cGcTechnologyTable+520:
db 'BOLTDMG2'
cGcTechnologyTable+530:
db 'BOLTDMG3'
cGcTechnologyTable+540:
db 'BOLTDMG4'
cGcTechnologyTable+550:
db 'BOLTRATE1'
cGcTechnologyTable+560:
db 'BOLTRATE2'
cGcTechnologyTable+570:
db 'BOLTRATE3'
cGcTechnologyTable+580:
db 'BOLTCLIP1'
cGcTechnologyTable+590:
db 'BOLTCLIP2'
cGcTechnologyTable+5A0:
db 'BOLTCLIP3'
cGcTechnologyTable+5B0:
db 'BOLTREL1'
cGcTechnologyTable+5C0:
db 'BOLTREL2'
cGcTechnologyTable+5D0:
db 'BOLTREL3'
cGcTechnologyTable+5E0:
db 'BOLTSTAB1'
cGcTechnologyTable+5F0:
db 'BOLTSTAB2'
cGcTechnologyTable+600:
db 'BOLTSTAB3'
cGcTechnologyTable+610:
db 'BOLTBOUNCE1'
cGcTechnologyTable+620:
db 'BOLTBOUNCE2'
cGcTechnologyTable+630:
db 'BOLTBOUNCE3'
cGcTechnologyTable+640:
db 'GRENADE'
cGcTechnologyTable+650:
db 'GRENHOMING1'
cGcTechnologyTable+660:
db 'GRENBOUNCE1'
cGcTechnologyTable+670:
db 'GRENBOUNCE2'
cGcTechnologyTable+680:
db 'GRENSPEED1'
cGcTechnologyTable+690:
db 'GRENSPEED2'
cGcTechnologyTable+6A0:
db 'GRENRAD1'
cGcTechnologyTable+6B0:
db 'GRENRAD2'
cGcTechnologyTable+6C0:
db 'GRENDMG1'
cGcTechnologyTable+6D0:
db 'GRENDMG2'
cGcTechnologyTable+6E0:
db 'GRENDMG3'
cGcTechnologyTable+6F0:
db 'SCANBINOC1'
cGcTechnologyTable+700:
db 'SCAN1'
cGcTechnologyTable+710:
db 'SCAN2'
cGcTechnologyTable+720:
db 'SCAN3'
cGcTechnologyTable+730:
db 'BOLT_SM'
cGcTechnologyTable+740:
db 'POWERGLOVE'
cGcTechnologyTable+750:
db 'SHIPBLOB'
cGcTechnologyTable+760:
db 'SHIPMINIGUN1'
cGcTechnologyTable+770:
db 'SHIPSHOTGUN1'
cGcTechnologyTable+780:
db 'STRONGLASER'
cGcTechnologyTable+790:
cGcTechnologyTable_end:

[DISABLE]
technology:
  db 49 8B 9F 20 14 00 00
unregistersymbol(technology)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+4FCFC5

"NMS.exe"+4FCF8E: 4C 8D 44 24 60              -  lea r8,[rsp+60]
"NMS.exe"+4FCF93: 49 8B CC                    -  mov rcx,r12
"NMS.exe"+4FCF96: 83 FF 01                    -  cmp edi,01
"NMS.exe"+4FCF99: 0F 85 43 02 00 00           -  jne NMS.exe+4FD1E2
"NMS.exe"+4FCF9F: 0F 28 05 4A B6 05 01        -  movaps xmm0,[NMS.exe+15585F0]
"NMS.exe"+4FCFA6: 0F 29 44 24 60              -  movaps [rsp+60],xmm0
"NMS.exe"+4FCFAB: 48 8D 15 56 17 E3 00        -  lea rdx,[NMS.exe+132E708]
"NMS.exe"+4FCFB2: E8 E9 04 F6 FF              -  call NMS.exe+45D4A0
"NMS.exe"+4FCFB7: 4C 8B 2D 1A 98 11 01        -  mov r13,[NMS.exe+16167D8]
"NMS.exe"+4FCFBE: 49 8B BD B0 09 00 00        -  mov rdi,[r13+000009B0]
// ---------- INJECTING HERE ----------
"NMS.exe"+4FCFC5: 49 8B 9D A8 09 00 00        -  mov rbx,[r13+000009A8]
// ---------- DONE INJECTING  ----------
"NMS.exe"+4FCFCC: 48 3B DF                    -  cmp rbx,rdi
"NMS.exe"+4FCFCF: 0F 84 1B 03 00 00           -  je NMS.exe+4FD2F0
"NMS.exe"+4FCFD5: 33 F6                       -  xor esi,esi
"NMS.exe"+4FCFD7: 44 8D 66 01                 -  lea r12d,[rsi+01]
"NMS.exe"+4FCFDB: 0F 1F 44 00 00              -  nop [rax+rax+00]
"NMS.exe"+4FCFE0: 4C 8B C3                    -  mov r8,rbx
"NMS.exe"+4FCFE3: 48 8D 55 A0                 -  lea rdx,[rbp-60]
"NMS.exe"+4FCFE7: 49 8D 8D D0 00 00 00        -  lea rcx,[r13+000000D0]
"NMS.exe"+4FCFEE: E8 0D C6 02 00              -  call NMS.exe+529600
"NMS.exe"+4FCFF3: 48 8B 45 A0                 -  mov rax,[rbp-60]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1856</ID>
      <Description>"Unlock All Product Recipes"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(products,NMS.exe,49 8B 9F 38 14 00 00)
alloc(newmem,$1000,products)
alloc(cGcProductTable,1024,products)
label(cGcProductTable_end)
registersymbol(cGcProductTable)
registersymbol(cGcProductTable_end)

label(code)
label(return)

newmem:

code:
  mov rbx,cGcProductTable
  mov rdi,cGcProductTable_end
  jmp return

products:
  jmp code
  nop
  nop
return:
registersymbol(products)

cGcProductTable+000:
db 'ACCESS1'
cGcProductTable+010:
db 'ACCESS2'
cGcProductTable+020:
db 'ACCESS3'
cGcProductTable+030:
db 'ALBUMENPEARL'
cGcProductTable+040:
db 'ALLOY1'
cGcProductTable+050:
db 'ALLOY2'
cGcProductTable+060:
db 'ALLOY3'
cGcProductTable+070:
db 'ALLOY4'
cGcProductTable+080:
db 'ALLOY5'
cGcProductTable+090:
db 'ALLOY6'
cGcProductTable+0A0:
db 'ALLOY7'
cGcProductTable+0B0:
db 'AQUASPHERE'
cGcProductTable+0C0:
db 'CAVECUBE'
cGcProductTable+0D0:
db 'COMMODITY1'
cGcProductTable+0E0:
db 'COMMODITY2'
cGcProductTable+0F0:
db 'COMMODITY3'
cGcProductTable+100:
db 'COMMODITY4'
cGcProductTable+110:
db 'COMMODITY5'
cGcProductTable+120:
db 'COMMODITY6'
cGcProductTable+130:
db 'COMMODITY7'
cGcProductTable+140:
db 'CURIO1'
cGcProductTable+150:
db 'CURIO2'
cGcProductTable+160:
db 'CURIO3'
cGcProductTable+170:
db 'CURIO4'
cGcProductTable+180:
db 'CURIO5'
cGcProductTable+190:
db 'CURIO6'
cGcProductTable+1A0:
db 'CURIO7'
cGcProductTable+1B0:
db 'CURIO8'
cGcProductTable+1C0:
db 'CURIO9'
cGcProductTable+1D0:
db 'DRUGS1'
cGcProductTable+1E0:
db 'GRAVBALL'
cGcProductTable+1F0:
db 'GRENFUEL1'
cGcProductTable+200:
db 'HACK1'
cGcProductTable+210:
db 'HYPERFUEL1'
cGcProductTable+220:
db 'PRODFUEL1'
cGcProductTable+230:
db 'PRODFUEL2'
cGcProductTable+240:
db 'PRODFUEL3'
cGcProductTable+250:
db 'SACVENOM'
cGcProductTable+260:
db 'SENTINEL1'
cGcProductTable+270:
db 'SENTINEL2'
cGcProductTable+280:
db 'SHIELDFUEL1'
cGcProductTable+290:
db 'SHIELDFUEL2'
cGcProductTable+2A0:
db 'SHIELDFUEL3'
cGcProductTable+2B0:
db 'COM1'
cGcProductTable+2C0:
db 'COMRARE1'
cGcProductTable+2D0:
db 'COMUNCOMMON1'
cGcProductTable+2E0:
db 'FUEL1'
cGcProductTable+2F0:
db 'FUELRARE1'
cGcProductTable+300:
db 'FUELUNCOMMON1'
cGcProductTable+310:
db 'TECH1'
cGcProductTable+320:
db 'TECHRARE1'
cGcProductTable+330:
db 'TECHUNCOMMON1'
cGcProductTable+340:
db 'TRADEABLE1'
cGcProductTable+350:
db 'TRADEABLE2'
cGcProductTable+360:
db 'TRADEABLE3'
cGcProductTable+370:
db 'TRADEABLE4'
cGcProductTable+380:
db 'TRADEABLE5'
cGcProductTable+390:
db 'TRADEABLE6'
cGcProductTable+3A0:
db 'TRADEABLE7'
cGcProductTable+3B0:
db 'TRADEABLE8'
cGcProductTable+3C0:
db 'TRADEABLE9'
cGcProductTable+3D0:
db 'TRADEABLE10'
cGcProductTable+3E0:
db 'BATTERY'
cGcProductTable+3F0:
db 'CWIRE'
cGcProductTable+400:
db 'MPLATE'
cGcProductTable+410:
db 'GLASS'
cGcProductTable+420:
db 'SFIBRES'
cGcProductTable+430:
db 'ACID'
cGcProductTable+440:
db 'GEL'
cGcProductTable+450:
db 'LUBE'
cGcProductTable+460:
db 'EXPLOSIVE'
cGcProductTable+470:
db 'CBOARD'
cGcProductTable+480:
cGcProductTable_end:

[DISABLE]
products:
  db 49 8B 9F 38 14 00 00
unregistersymbol(products)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+4FD208

"NMS.exe"+4FD1D0: 48 83 C3 10              -  add rbx,10
"NMS.exe"+4FD1D4: 48 3B DF                 -  cmp rbx,rdi
"NMS.exe"+4FD1D7: 0F 85 03 FE FF FF        -  jne NMS.exe+4FCFE0
"NMS.exe"+4FD1DD: E9 01 01 00 00           -  jmp NMS.exe+4FD2E3
"NMS.exe"+4FD1E2: 0F 28 05 F7 B4 05 01     -  movaps xmm0,[NMS.exe+15586E0]
"NMS.exe"+4FD1E9: 0F 29 44 24 60           -  movaps [rsp+60],xmm0
"NMS.exe"+4FD1EE: 48 8D 15 53 15 E3 00     -  lea rdx,[NMS.exe+132E748]
"NMS.exe"+4FD1F5: E8 A6 02 F6 FF           -  call NMS.exe+45D4A0
"NMS.exe"+4FD1FA: 4C 8B 2D D7 95 11 01     -  mov r13,[NMS.exe+16167D8]
"NMS.exe"+4FD201: 49 8B BD C8 09 00 00     -  mov rdi,[r13+000009C8]
// ---------- INJECTING HERE ----------
"NMS.exe"+4FD208: 49 8B 9D C0 09 00 00     -  mov rbx,[r13+000009C0]
// ---------- DONE INJECTING  ----------
"NMS.exe"+4FD20F: 48 3B DF                 -  cmp rbx,rdi
"NMS.exe"+4FD212: 0F 84 D8 00 00 00        -  je NMS.exe+4FD2F0
"NMS.exe"+4FD218: BE 02 00 00 00           -  mov esi,00000002
"NMS.exe"+4FD21D: 45 33 E4                 -  xor r12d,r12d
"NMS.exe"+4FD220: 4C 8B C3                 -  mov r8,rbx
"NMS.exe"+4FD223: 48 8D 55 A0              -  lea rdx,[rbp-60]
"NMS.exe"+4FD227: 49 8D 8D 10 01 00 00     -  lea rcx,[r13+00000110]
"NMS.exe"+4FD22E: E8 CD C3 02 00           -  call NMS.exe+529600
"NMS.exe"+4FD233: 48 8B 45 A0              -  mov rax,[rbp-60]
"NMS.exe"+4FD237: 49 3B 85 10 01 00 00     -  cmp rax,[r13+00000110]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1874</ID>
      <Description>"Bypass Locks"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(bypass,NMS.exe,80 3D AC 68 B9 00 00) // should be unique
registersymbol(bypass)

bypass:
  db 90 90 90 90 90 90 90

[DISABLE]

bypass:
  db 80 3D AC 68 B9 00 00

unregistersymbol(bypass)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1804</ID>
      <Description>"Money Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : NMS.exe
  Version: 
  Date   : 2016-11-28
  Author : Squall8

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(money,NMS.exe,8B 88 D4 04 00 00 89 8B 14) // should be unique
alloc(newmem,$1000,"NMS.exe"+571164)
alloc(moneyp,4)

label(code)
label(return)

newmem:

code:
  mov [moneyp],rax
  mov ecx,[rax+000004D4]
  jmp return

moneyp:
  dq 0

money:
  jmp code
  nop
return:
registersymbol(money)
registersymbol(moneyp)


[DISABLE]

money:
  db 8B 88 D4 04 00 00

unregistersymbol(money)
unregistersymbol(moneyp)
dealloc(newmem)
dealloc(moneyp)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+571164

"NMS.exe"+571124: 0F 86 03 0A 00 00              -  jbe NMS.exe+571B2D
"NMS.exe"+57112A: 4C 8D AB E8 02 00 00           -  lea r13,[rbx+000002E8]
"NMS.exe"+571131: 49 8B CD                       -  mov rcx,r13
"NMS.exe"+571134: E8 B7 B4 0D 00                 -  call NMS.exe+64C5F0
"NMS.exe"+571139: 80 BB 34 37 00 00 00           -  cmp byte ptr [rbx+00003734],00
"NMS.exe"+571140: 74 41                          -  je NMS.exe+571183
"NMS.exe"+571142: C7 83 48 0A 00 00 00 00 70 44  -  mov [rbx+00000A48],44700000
"NMS.exe"+57114C: C7 83 4C 0A 00 00 00 00 07 44  -  mov [rbx+00000A4C],44070000
"NMS.exe"+571156: C6 83 34 37 00 00 00           -  mov byte ptr [rbx+00003734],00
"NMS.exe"+57115D: 48 8B 05 A4 B4 28 01           -  mov rax,[NMS.exe+17FC608]
// ---------- INJECTING HERE ----------
"NMS.exe"+571164: 8B 88 D4 04 00 00              -  mov ecx,[rax+000004D4]
// ---------- DONE INJECTING  ----------
"NMS.exe"+57116A: 89 8B 14 14 00 00              -  mov [rbx+00001414],ecx
"NMS.exe"+571170: 48 8B 05 91 B4 28 01           -  mov rax,[NMS.exe+17FC608]
"NMS.exe"+571177: 8B 88 D4 04 00 00              -  mov ecx,[rax+000004D4]
"NMS.exe"+57117D: 89 8B 18 14 00 00              -  mov [rbx+00001418],ecx
"NMS.exe"+571183: 48 8D 8B 20 0D 00 00           -  lea rcx,[rbx+00000D20]
"NMS.exe"+57118A: 48 8B 01                       -  mov rax,[rcx]
"NMS.exe"+57118D: FF 50 48                       -  call qword ptr [rax+48]
"NMS.exe"+571190: 48 8B CB                       -  mov rcx,rbx
"NMS.exe"+571193: E8 F8 09 00 00                 -  call NMS.exe+571B90
"NMS.exe"+571198: 48 8B 05 A1 A8 28 01           -  mov rax,[NMS.exe+17FBA40]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1805</ID>
          <Description>"Units"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>moneyp</Address>
          <Offsets>
            <Offset>4D4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1806</ID>
      <Description>"Highlighted Item Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : NMS.exe
   Version:
   Date   : 2016-11-29
   Author : Cedric

   This script does blah blah blah
 }

[ENABLE]

aobscanmodule(itemptr,NMS.exe,49 8B 47 50 83 3B 01) // should be unique
alloc(newmem,$1000,"NMS.exe"+6121E7)

label(code)
label(return)
label(pItem)

newmem:
  mov [pItem], rbx

code:
  mov rax,[r15+50]
  cmp dword ptr [rbx],01
  jmp return

pItem:
  dq 0

itemptr:
  jmp newmem
  nop
  nop
return:
registersymbol(itemptr)
registersymbol(pItem)

[DISABLE]

itemptr:
  db 49 8B 47 50 83 3B 01

unregistersymbol(itemptr)
unregistersymbol(pItem)
dealloc(newmem)

{
 // ORIGINAL CODE - INJECTION POINT: "NMS.exe"+6121E7

 "NMS.exe"+6121C4: 4C 8B F8              -  mov r15,rax
 "NMS.exe"+6121C7: 48 85 C0              -  test rax,rax
 "NMS.exe"+6121CA: 75 0D                 -  jne NMS.exe+6121D9
 "NMS.exe"+6121CC: 48 FF C3              -  inc rbx
 "NMS.exe"+6121CF: 48 3B DF              -  cmp rbx,rdi
 "NMS.exe"+6121D2: 72 DC                 -  jb NMS.exe+6121B0
 "NMS.exe"+6121D4: E9 6D 05 00 00        -  jmp NMS.exe+612746
 "NMS.exe"+6121D9: 4D 85 FF              -  test r15,r15
 "NMS.exe"+6121DC: 0F 84 64 05 00 00     -  je NMS.exe+612746
 "NMS.exe"+6121E2: 48 8B 5C 24 50        -  mov rbx,[rsp+50]
 // ---------- INJECTING HERE ----------
 "NMS.exe"+6121E7: 49 8B 47 50           -  mov rax,[r15+50]
 "NMS.exe"+6121EB: 83 3B 01              -  cmp dword ptr [rbx],01
 // ---------- DONE INJECTING  ----------
 "NMS.exe"+6121EE: 0F 84 4E 05 00 00     -  je NMS.exe+612742
 "NMS.exe"+6121F4: 44 88 60 28           -  mov [rax+28],r12l
 "NMS.exe"+6121F8: 4C 8D 73 08           -  lea r14,[rbx+08]
 "NMS.exe"+6121FC: 45 33 C0              -  xor r8d,r8d
 "NMS.exe"+6121FF: 49 8B D6              -  mov rdx,r14
 "NMS.exe"+612202: E8 49 91 38 00        -  call NMS.exe+99B350
 "NMS.exe"+612207: 0F 28 F0              -  movaps xmm6,xmm0
 "NMS.exe"+61220A: 41 B0 01              -  mov r8l,01
 "NMS.exe"+61220D: 49 8B D6              -  mov rdx,r14
 "NMS.exe"+612210: E8 3B 91 38 00        -  call NMS.exe+99B350
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1807</ID>
          <Description>"Item Name"</Description>
          <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">[Elements(New)]----------------------------------------------------------

53 55 42 43 41 56 45 00 00 00 00 00 00 00 00 00:Antrium
53 55 42 52 41 44 49 4F 41 43 54 49 56 45 00 00:Candensium
53 55 42 50 4F 4F 50 00 00 00 00 00 00 00 00 00:Coprite
53 55 42 53 4E 4F 57 00 00 00 00 00 00 00 00 00:Coryzagen
53 55 42 42 4C 55 45 53 59 53 00 00 00 00 00 00:Cymatygen
53 55 42 53 43 4F 52 43 48 45 44 00 00 00 00 00:Fervidium
53 55 42 43 52 45 41 54 55 52 45 00 00 00 00 00:Mordite
53 55 42 44 52 4F 4E 45 00 00 00 00 00 00 00 00:Pugneum
53 55 42 57 41 54 45 52 00 00 00 00 00 00 00 00:Rigogen
53 55 42 52 45 44 53 59 53 00 00 00 00 00 00 00:Rubeum
53 55 42 42 41 52 52 45 4E 00 00 00 00 00 00 00:Spadonium
53 55 42 54 4F 58 49 43 00 00 00 00 00 00 00 00:Temerium
53 55 42 53 48 49 50 00 00 00 00 00 00 00 00 00:Tropheum
53 55 42 47 52 45 45 4E 53 59 53 00 00 00 00 00:Viridium

[Elements]------------------------------------------------------------

54 52 41 44 45 41 42 4C 45 34 00 00 00 00 00 00:Aluminum
46 55 45 4C 31 00 00 00 00 00 00 00 00 00 00 00:Carbon
54 52 41 44 45 41 42 4C 45 38 00 00 00 00 00 00:Calium
54 45 43 48 52 41 52 45 31 00 00 00 00 00 00 00:Chrysonite
54 52 41 44 45 41 42 4C 45 32 00 00 00 00 00 00:Copper
54 52 41 44 45 41 42 4C 45 36 00 00 00 00 00 00:Emeril
54 52 41 44 45 41 42 4C 45 35 00 00 00 00 00 00:Gold
54 45 43 48 31 00 00 00 00 00 00 00 00 00 00 00:Heridium
54 52 41 44 45 41 42 4C 45 31 00 00 00 00 00 00:Iridium
43 4F 4D 31 00 00 00 00 00 00 00 00 00 00 00 00:Iron
54 52 41 44 45 41 42 4C 45 39 00 00 00 00 00 00:Murrine
54 52 41 44 45 41 42 4C 45 33 00 00 00 00 00 00:Nickel
54 52 41 44 45 41 42 4C 45 31 30 00 00 00 00 00:Omegon
54 45 43 48 55 4E 43 4F 4D 4D 4F 4E 31 00 00 00:Platinum
46 55 45 4C 52 41 52 45 31 00 00 00 00 00 00 00:Plutonium
54 52 41 44 45 41 42 4C 45 37 00 00 00 00 00 00:Radnox
46 55 45 4C 55 4E 43 4F 4D 4D 4F 4E 31 00 00 00:Thamium9
43 4F 4D 52 41 52 45 31 00 00 00 00 00 00 00 00:Titanium
43 4F 4D 55 4E 43 4F 4D 4D 4F 4E 31 00 00 00 00:Zinc

[Misc(New)]----------------------------------------------------------

41 43 49 44 00 00 00 00 00 00 00 00 00 00 00 00:Acid
43 42 4F 41 52 44 00 00 00 00 00 00 00 00 00 00:Circuit Board
43 57 49 52 45 00 00 00 00 00 00 00 00 00 00 00:Copper Wire
45 58 50 4C 4F 53 49 56 45 00 00 00 00 00 00 00:Explosive
47 4C 41 53 53 00 00 00 00 00 00 00 00 00 00 00:Glass
47 45 4C 00 00 00 00 00 00 00 00 00 00 00 00 00:Insulating Gel
4C 55 42 45 00 00 00 00 00 00 00 00 00 00 00 00:Lubricant
4D 50 4C 41 54 45 00 00 00 00 00 00 00 00 00 00:Non-Ferrous Plate
53 46 49 42 52 45 53 00 00 00 00 00 00 00 00 00:Poly-Fibre
42 41 54 54 45 52 59 00 00 00 00 00 00 00 00 00:Voltaic Cell

[Misc]-----------------------------------------------------------------

41 4C 42 55 4D 45 4E 50 45 41 52 4C 00 00 00 00:Albumen Pearl
43 4F 4D 4D 4F 44 49 54 59 36 00 00 00 00 00 00:Antimatter
41 51 55 41 53 50 48 45 52 45 00 00 00 00 00 00:Aqua Sphere
41 4C 4C 4F 59 31 00 00 00 00 00 00 00 00 00 00:Aronium
41 43 43 45 53 53 31 00 00 00 00 00 00 00 00 00:Atlas Pass V1
41 43 43 45 53 53 32 00 00 00 00 00 00 00 00 00:Atlas Pass V2
41 43 43 45 53 53 33 00 00 00 00 00 00 00 00 00:Atlas Pass V3
43 55 52 49 4F 34 00 00 00 00 00 00 00 00 00 00:Atlas Stone
48 41 43 4B 31 00 00 00 00 00 00 00 00 00 00 00:Bypass Chip
43 4F 4D 4D 4F 44 49 54 59 31 00 00 00 00 00 00:Carite Sheet
41 4C 4C 4F 59 34 00 00 00 00 00 00 00 00 00 00:Crolium
53 45 4E 54 49 4E 45 4C 32 00 00 00 00 00 00 00:Dimensional Matrix
43 4F 4D 4D 4F 44 49 54 59 37 00 00 00 00 00 00:Dynamic Resonator
43 4F 4D 4D 4F 44 49 54 59 35 00 00 00 00 00 00:Electron Vapour
43 55 52 49 4F 36 00 00 00 00 00 00 00 00 00 00:Fascination Bead
43 55 52 49 4F 37 00 00 00 00 00 00 00 00 00 00:Gek Charm
43 55 52 49 4F 31 00 00 00 00 00 00 00 00 00 00:Gek Relic
44 52 55 47 53 31 00 00 00 00 00 00 00 00 00 00:Geknip
43 55 52 49 4F 35 00 00 00 00 00 00 00 00 00 00:Grahgrah
41 4C 4C 4F 59 36 00 00 00 00 00 00 00 00 00 00:Grantine
47 52 41 56 42 41 4C 4C 00 00 00 00 00 00 00 00:Gravitino Ball
41 4C 4C 4F 59 32 00 00 00 00 00 00 00 00 00 00:Herox
43 55 52 49 4F 33 00 00 00 00 00 00 00 00 00 00:Korvax Casing
43 55 52 49 4F 39 00 00 00 00 00 00 00 00 00 00:Korvax Convergence Cube
41 4C 4C 4F 59 33 00 00 00 00 00 00 00 00 00 00:Lemmium
41 4C 4C 4F 59 35 00 00 00 00 00 00 00 00 00 00:Magmox
43 4F 4D 4D 4F 44 49 54 59 34 00 00 00 00 00 00:Microdensity Fabric
43 4F 4D 4D 4F 44 49 54 59 32 00 00 00 00 00 00:Night Crystals
50 52 4F 44 46 55 45 4C 32 00 00 00 00 00 00 00:Power Canister
50 52 4F 44 46 55 45 4C 31 00 00 00 00 00 00 00:Power Gel
50 52 4F 44 46 55 45 4C 33 00 00 00 00 00 00 00:Power Reservoir
53 41 43 56 45 4E 4F 4D 00 00 00 00 00 00 00 00:Sac Venom
53 48 49 45 4C 44 46 55 45 4C 32 00 00 00 00 00:Shielding Plate
53 48 49 45 4C 44 46 55 45 4C 31 00 00 00 00 00:Shielding Shard
53 48 49 45 4C 44 46 55 45 4C 33 00 00 00 00 00:Shielding Sheet
43 4F 4D 4D 4F 44 49 54 59 33 00 00 00 00 00 00:Suspension Fluid
41 4C 4C 4F 59 37 00 00 00 00 00 00 00 00 00 00:Terumin
47 52 45 4E 46 55 45 4C 31 00 00 00 00 00 00 00:Unstable Plasma
43 41 56 45 43 55 42 45 00 00 00 00 00 00 00 00:Vortex Cubes
43 55 52 49 4F 38 00 00 00 00 00 00 00 00 00 00:Vy'keen Dagger
43 55 52 49 4F 32 00 00 00 00 00 00 00 00 00 00:Vy'keen Effigy
48 59 50 45 52 46 55 45 4C 31 00 00 00 00 00 00:Warp Cell

[Ship]-----------------------------------------------------------------

53 48 49 50 53 48 49 45 4C 44 00 00 00 00 00 00:Deflector Shield
48 59 50 45 52 44 52 49 56 45 00 00 00 00 00 00:Hyperdrive
4C 41 55 4E 43 48 45 52 00 00 00 00 00 00 00 00:Launch Thrusters
53 48 49 50 4C 41 53 31 00 00 00 00 00 00 00 00:Phase Beam
53 48 49 50 47 55 4E 31 00 00 00 00 00 00 00 00:Photon Cannon
53 48 49 50 4A 55 4D 50 31 00 00 00 00 00 00 00:Pulse Engine

[Multitool]-----------------------------------------------------------

42 4F 4C 54 00 00 00 00 00 00 00 00 00 00 00 00:Boltcaster
4C 41 53 45 52 00 00 00 00 00 00 00 00 00 00 00:Mining Beam
47 52 45 4E 41 44 45 00 00 00 00 00 00 00 00 00:Plasma Launcher
53 43 41 4E 31 00 00 00 00 00 00 00 00 00 00 00:Scanner

[Exosuit]----------------------------------------------------------------

50 52 4F 54 45 43 54 00 00 00 00 00 00 00 00 00:Hazard Protection
4A 45 54 31 00 00 00 00 00 00 00 00 00 00 00 00:Jetpack
45 4E 45 52 47 59 00 00 00 00 00 00 00 00 00 00:Life Support

[Exosuit Parts]------------------------------------------------------

50 4F 57 45 52 47 4C 4F 56 45 00 00 00 00 00 00:Hasmat Gauntlet
55 4E 57 31 00 00 00 00 00 00 00 00 00 00 00 00:Aeration Membrane Sigma
55 4E 57 32 00 00 00 00 00 00 00 00 00 00 00 00:Aeration Membrane Tau
55 4E 57 33 00 00 00 00 00 00 00 00 00 00 00 00:Aeration Membrane Theta
48 4F 54 31 00 00 00 00 00 00 00 00 00 00 00 00:Coolant Network Sigma
48 4F 54 32 00 00 00 00 00 00 00 00 00 00 00 00:Coolant Network Tau
48 4F 54 33 00 00 00 00 00 00 00 00 00 00 00 00:Coolant Network Theta
41 52 4D 4F 55 52 31 00 00 00 00 00 00 00 00 00:Health Module Sigma
41 52 4D 4F 55 52 32 00 00 00 00 00 00 00 00 00:Health Module Tau
41 52 4D 4F 55 52 33 00 00 00 00 00 00 00 00 00:Health Module Theta
4A 45 54 42 4F 4F 53 54 31 00 00 00 00 00 00 00:Jetpack Booster Sigma
4A 45 54 42 4F 4F 53 54 32 00 00 00 00 00 00 00:Jetpack Booster Tau
4A 45 54 42 4F 4F 53 54 33 00 00 00 00 00 00 00:Jetpack Booster Theta
45 4E 45 52 47 59 42 4F 4F 53 54 31 00 00 00 00:Life Support Module Sigma
45 4E 45 52 47 59 42 4F 4F 53 54 32 00 00 00 00:Life Support Module Tau
52 41 44 31 00 00 00 00 00 00 00 00 00 00 00 00:Radiation Deflector Sigma
52 41 44 32 00 00 00 00 00 00 00 00 00 00 00 00:Radiation Deflector Tau
52 41 44 33 00 00 00 00 00 00 00 00 00 00 00 00:Radiation Deflector Theta
53 48 49 45 4C 44 42 4F 4F 53 54 31 00 00 00 00:Shield Boost Sigma
53 48 49 45 4C 44 42 4F 4F 53 54 32 00 00 00 00:Shield Boost Tau
53 48 49 45 4C 44 42 4F 4F 53 54 33 00 00 00 00:Shield Boost Theta
53 54 41 4D 31 00 00 00 00 00 00 00 00 00 00 00:Stamina Enhancement Sigma
53 54 41 4D 32 00 00 00 00 00 00 00 00 00 00 00:Stamina Enhancement Tau
53 54 41 4D 33 00 00 00 00 00 00 00 00 00 00 00:Stamina Enhancement Theta
43 4F 4C 44 31 00 00 00 00 00 00 00 00 00 00 00:Thermic Layer Sigma
43 4F 4C 44 32 00 00 00 00 00 00 00 00 00 00 00:Thermic Layer Tau
43 4F 4C 44 33 00 00 00 00 00 00 00 00 00 00 00:Thermic Layer Theta
54 4F 58 31 00 00 00 00 00 00 00 00 00 00 00 00:Toxin Suppressor Sigma
54 4F 58 32 00 00 00 00 00 00 00 00 00 00 00 00:Toxin Suppressor Tau
54 4F 58 33 00 00 00 00 00 00 00 00 00 00 00 00:Toxin Suppressor Theta

[Ship Parts]----------------------------------------------------------------

53 48 49 50 42 4C 4F 42 00 00 00 00 00 00 00 00:Ion Blast
53 48 49 50 4D 49 4E 49 47 55 4E 31 00 00 00 00:Photon Accelerator
53 48 49 50 53 48 4F 54 47 55 4E 31 00 00 00 00:Photon Blast
53 48 49 50 47 55 4E 52 41 54 45 31 00 00 00 00:Accelerated Fire Sigma
53 48 49 50 47 55 4E 52 41 54 45 32 00 00 00 00:Accelerated Fire Tau
53 48 49 50 47 55 4E 52 41 54 45 33 00 00 00 00:Accelerated Fire Theta
53 48 49 50 47 55 4E 43 4F 4F 4C 31 00 00 00 00:Advanced Cooling Sigma
53 48 49 50 47 55 4E 43 4F 4F 4C 32 00 00 00 00:Advanced Cooling Tau
53 48 49 50 47 55 4E 43 4F 4F 4C 33 00 00 00 00:Advanced Cooling Theta
53 48 49 50 47 44 4D 47 31 00 00 00 00 00 00 00:Cannon Damage Sigma
53 48 49 50 47 44 4D 47 32 00 00 00 00 00 00 00:Cannon Damage Tau
53 48 49 50 47 44 4D 47 33 00 00 00 00 00 00 00:Cannon Damage Theta
53 48 49 50 53 48 4C 44 42 4F 4F 53 54 31 00 00:Deflection Enhancement Sigma
53 48 49 50 53 48 4C 44 42 4F 4F 53 54 32 00 00:Deflection Enhancement Tau
53 48 49 50 53 48 4C 44 42 4F 4F 53 54 33 00 00:Deflection Enhancement Theta
53 48 49 50 4C 44 4D 47 31 00 00 00 00 00 00 00:Phase Beam Impact Sigma
53 48 49 50 4C 44 4D 47 32 00 00 00 00 00 00 00:Phase Beam Impact Tau
53 48 49 50 4C 44 4D 47 33 00 00 00 00 00 00 00:Phase Beam Impact Theta
53 48 49 50 4C 41 53 43 4F 4F 4C 31 00 00 00 00:Phase Coolant Sigma
53 48 49 50 4C 41 53 43 4F 4F 4C 32 00 00 00 00:Phase Coolant Tau
53 48 49 50 4C 41 53 43 4F 4F 4C 33 00 00 00 00:Phase Coolant Theta
53 48 49 50 4A 55 4D 50 32 00 00 00 00 00 00 00:Pulse Jet Sigma
50 48 4F 54 4F 4E 49 58 5F 43 4F 52 45 00 00 00:Photonix Core
53 48 49 50 4A 55 4D 50 33 00 00 00 00 00 00 00:Pulse Jet Tau
48 44 52 49 56 45 42 4F 4F 53 54 31 00 00 00 00:Warp Reactor Sigma
48 44 52 49 56 45 42 4F 4F 53 54 32 00 00 00 00:Warp Reactor Tau
48 44 52 49 56 45 42 4F 4F 53 54 33 00 00 00 00:Warp Reactor Theta

[Multitool Parts]----------------------------------------------------------------

53 54 52 4F 4E 47 4C 41 53 45 52 00 00 00 00 00:Advanced Mining Laser
4C 41 53 43 4F 4F 4C 31 00 00 00 00 00 00 00 00:Beam Coolant Sigma
4C 41 53 43 4F 4F 4C 32 00 00 00 00 00 00 00 00:Beam Coolant Tau
4C 41 53 43 4F 4F 4C 33 00 00 00 00 00 00 00 00:Beam Coolant Theta
4C 41 53 4D 49 4E 45 53 50 45 45 44 31 00 00 00:Beam Intensifier Sigma
4C 41 53 4D 49 4E 45 53 50 45 45 44 32 00 00 00:Beam Intensifier Tau
4C 41 53 4D 49 4E 45 53 50 45 45 44 33 00 00 00:Beam Intensifier Theta
4C 41 53 4D 49 4E 45 52 41 44 31 00 00 00 00 00:Beam Focus Sigma
4C 41 53 4D 49 4E 45 52 41 44 32 00 00 00 00 00:Beam Focus Tau
4C 41 53 4D 49 4E 45 52 41 44 33 00 00 00 00 00:Beam Focus Theta
4C 41 53 44 4D 47 31 00 00 00 00 00 00 00 00 00:Combat Amplifier Sigma
4C 41 53 44 4D 47 32 00 00 00 00 00 00 00 00 00:Combat Amplifier Tau
4C 41 53 44 4D 47 33 00 00 00 00 00 00 00 00 00:Combat Amplifier Theta
4C 41 53 44 4D 47 34 00 00 00 00 00 00 00 00 00:Combat Amplifier Omega
52 41 49 4C 47 55 4E 31 00 00 00 00 00 00 00 00:Railshot Adapter

42 4F 4C 54 5F 53 4D 00 00 00 00 00 00 00 00 00:Boltcaster SM
42 4F 4C 54 48 4F 4D 49 4E 47 00 00 00 00 00 00:Homingbolt Adapter
42 4F 4C 54 44 4D 47 31 00 00 00 00 00 00 00 00:Impact Damage Sigma
42 4F 4C 54 44 4D 47 32 00 00 00 00 00 00 00 00:Impact Damage Tau
42 4F 4C 54 44 4D 47 33 00 00 00 00 00 00 00 00:Impact Damage Theta
42 4F 4C 54 44 4D 47 34 00 00 00 00 00 00 00 00:Impact Damage Omega
42 4F 4C 54 43 4C 49 50 31 00 00 00 00 00 00 00:Plasma Clip Sigma
42 4F 4C 54 43 4C 49 50 32 00 00 00 00 00 00 00:Plasma Clip Tau
42 4F 4C 54 43 4C 49 50 33 00 00 00 00 00 00 00:Plasma Clip Theta
42 4F 4C 54 52 41 54 45 31 00 00 00 00 00 00 00:Rapidfire Sigma
42 4F 4C 54 52 41 54 45 32 00 00 00 00 00 00 00:Rapidfire Tau
42 4F 4C 54 52 41 54 45 33 00 00 00 00 00 00 00:Rapidfire Theta
42 4F 4C 54 53 54 41 42 31 00 00 00 00 00 00 00:Recoil Stabiliser Sigma
42 4F 4C 54 53 54 41 42 32 00 00 00 00 00 00 00:Recoil Stabiliser Tau
42 4F 4C 54 53 54 41 42 33 00 00 00 00 00 00 00:Recoil Stabiliser Theta
42 4F 4C 54 52 45 4C 31 00 00 00 00 00 00 00 00:Reload Accelerant Sigma
42 4F 4C 54 52 45 4C 32 00 00 00 00 00 00 00 00:Reload Accelerant Tau
42 4F 4C 54 52 45 4C 33 00 00 00 00 00 00 00 00:Reload Accelerant Theta
42 4F 4C 54 42 4F 55 4E 43 45 31 00 00 00 00 00:Ricochet Sigma
42 4F 4C 54 42 4F 55 4E 43 45 32 00 00 00 00 00:Ricochet Tau
42 4F 4C 54 42 4F 55 4E 43 45 33 00 00 00 00 00:Ricochet Theta
42 4F 4C 54 53 4D 47 00 00 00 00 00 00 00 00 00:Shortburst Adapter
42 4F 4C 54 53 48 4F 54 47 55 4E 00 00 00 00 00:Wideshot Adapter

47 52 45 4E 52 41 44 31 00 00 00 00 00 00 00 00:Damage Radius
47 52 45 4E 52 41 44 32 00 00 00 00 00 00 00 00:Damage Radius Tau
47 52 45 4E 44 4D 47 31 00 00 00 00 00 00 00 00:Grenade Intensity Sigma
47 52 45 4E 44 4D 47 32 00 00 00 00 00 00 00 00:Grenade Intensity Tau
47 52 45 4E 44 4D 47 33 00 00 00 00 00 00 00 00:Grenade Intensity Theta
47 52 45 4E 53 50 45 45 44 31 00 00 00 00 00 00:Grenade Propulsion
47 52 45 4E 53 50 45 45 44 32 00 00 00 00 00 00:Grenade Propulsion Tau
47 52 45 4E 48 4F 4D 49 4E 47 31 00 00 00 00 00:Homing Grenade
47 52 45 4E 42 4F 55 4E 43 45 31 00 00 00 00 00:Rebound Grenades
47 52 45 4E 42 4F 55 4E 43 45 32 00 00 00 00 00:Rebound Grenades Tau

53 43 41 4E 42 49 4E 4F 43 31 00 00 00 00 00 00:Analysis Visor
53 43 41 4E 32 00 00 00 00 00 00 00 00 00 00 00:Range Boost Sigma
53 43 41 4E 33 00 00 00 00 00 00 00 00 00 00 00:Range Boost Tau
</DropDownList>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>Array of byte</VariableType>
          <ByteLength>16</ByteLength>
          <Address>pItem</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>1808</ID>
          <Description>"Quantity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pItem</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>1809</ID>
          <Description>"Total"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pItem</Address>
          <Offsets>
            <Offset>1C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>1810</ID>
          <Description>"Damaged"</Description>
          <VariableType>Float</VariableType>
          <Address>pItem</Address>
          <Offsets>
            <Offset>20</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>1811</ID>
          <Description>"Inv. Column"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pItem</Address>
          <Offsets>
            <Offset>24</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>1812</ID>
          <Description>"Inv. Row"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>pItem</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1865</ID>
      <Description>"Wanted Level"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C08000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1862</ID>
          <Description>"No Sentinals"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : NMS.exe
  Version: 
  Date   : 2016-12-02
  Author : Squall8

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(sentinals,NMS.exe,89 7B 38 89 73 4C) // should be unique
registersymbol(sentinals)

sentinals:
  db 90 90 90
[DISABLE]

sentinals:
  db 89 7B 38

unregistersymbol(sentinals)
unregistersymbol(sptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+B742EA

"NMS.exe"+B742BE: 48 89 74 24 30                 -  mov [rsp+30],rsi
"NMS.exe"+B742C3: 89 74 24 28                    -  mov [rsp+28],esi
"NMS.exe"+B742C7: 48 89 74 24 20                 -  mov [rsp+20],rsi
"NMS.exe"+B742CC: 45 33 C9                       -  xor r9d,r9d
"NMS.exe"+B742CF: 45 33 C0                       -  xor r8d,r8d
"NMS.exe"+B742D2: 48 8B 92 B0 DC 3B 00           -  mov rdx,[rdx+003BDCB0]
"NMS.exe"+B742D9: 66 0F 73 D8 08                 -  psrldq xmm0,08
"NMS.exe"+B742DE: 66 0F 7E C1                    -  movd ecx,xmm0
"NMS.exe"+B742E2: E8 29 18 32 00                 -  call NMS.exe+E95B10
"NMS.exe"+B742E7: 89 73 48                       -  mov [rbx+48],esi
// ---------- INJECTING HERE ----------
"NMS.exe"+B742EA: 89 7B 38                       -  mov [rbx+38],edi
"NMS.exe"+B742ED: 89 73 4C                       -  mov [rbx+4C],esi
// ---------- DONE INJECTING  ----------
"NMS.exe"+B742F0: 89 73 3C                       -  mov [rbx+3C],esi
"NMS.exe"+B742F3: F3 0F 10 05 91 F0 C7 00        -  movss xmm0,[NMS.exe+17F338C]
"NMS.exe"+B742FB: F3 0F 11 43 44                 -  movss [rbx+44],xmm0
"NMS.exe"+B74300: 48 8B 5C 24 60                 -  mov rbx,[rsp+60]
"NMS.exe"+B74305: 48 8B 74 24 68                 -  mov rsi,[rsp+68]
"NMS.exe"+B7430A: 48 83 C4 50                    -  add rsp,50
"NMS.exe"+B7430E: 5F                             -  pop rdi
"NMS.exe"+B7430F: C3                             -  ret 
"NMS.exe"+B74310: 40 53                          -  push rbx
"NMS.exe"+B74312: 48 83 EC 60                    -  sub rsp,60
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1863</ID>
          <Description>"Wanted Level Pointer(Activate HUD)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : NMS.exe
  Version: 
  Date   : 2016-12-02
  Author : Squall8

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(sentinals,NMS.exe,48 63 47 38 85 C0) // should be unique
alloc(newmem,$1000,"NMS.exe"+B740C0)

label(code)
label(return)
label(sptr)

newmem:

code:
  mov [sptr],rdi
  movsxd  rax,dword ptr [rdi+38]
  test eax,eax
  jmp return

sptr:
  dq 0

sentinals:
  jmp code
  nop
return:
registersymbol(sentinals)
registersymbol(sptr)

[DISABLE]

sentinals:
  db 48 63 47 38 85 C0

unregistersymbol(sentinals)
unregistersymbol(sptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+B740C0

"NMS.exe"+B74093: F3 0F 10 4E 08                 -  movss xmm1,[rsi+08]
"NMS.exe"+B74098: F3 0F 10 46 04                 -  movss xmm0,[rsi+04]
"NMS.exe"+B7409D: 8B 06                          -  mov eax,[rsi]
"NMS.exe"+B7409F: 89 47 20                       -  mov [rdi+20],eax
"NMS.exe"+B740A2: F3 0F 11 47 24                 -  movss [rdi+24],xmm0
"NMS.exe"+B740A7: F3 0F 11 4F 28                 -  movss [rdi+28],xmm1
"NMS.exe"+B740AC: C7 47 2C 00 00 80 3F           -  mov [rdi+2C],3F800000
"NMS.exe"+B740B3: C6 47 30 01                    -  mov byte ptr [rdi+30],01
"NMS.exe"+B740B7: 44 89 6F 4C                    -  mov [rdi+4C],r13d
"NMS.exe"+B740BB: E9 97 00 00 00                 -  jmp NMS.exe+B74157
// ---------- INJECTING HERE ----------
"NMS.exe"+B740C0: 48 63 47 38                    -  movsxd  rax,dword ptr [rdi+38]
"NMS.exe"+B740C4: 85 C0                          -  test eax,eax
// ---------- DONE INJECTING  ----------
"NMS.exe"+B740C6: 0F 8E 8B 00 00 00              -  jng NMS.exe+B74157
"NMS.exe"+B740CC: F3 44 0F 58 77 4C              -  addss xmm14,[rdi+4C]
"NMS.exe"+B740D2: F3 44 0F 11 77 4C              -  movss [rdi+4C],xmm14
"NMS.exe"+B740D8: 44 89 6F 50                    -  mov [rdi+50],r13d
"NMS.exe"+B740DC: 83 F8 05                       -  cmp eax,05
"NMS.exe"+B740DF: 7D 76                          -  jnl NMS.exe+B74157
"NMS.exe"+B740E1: F3 41 0F 10 84 80 9C 62 7F 01  -  movss xmm0,[r8+rax*4+017F629C]
"NMS.exe"+B740EB: 48 8B 15 16 85 C8 00           -  mov rdx,[NMS.exe+17FC608]
"NMS.exe"+B740F2: 4C 8B 82 48 A8 3B 00           -  mov r8,[rdx+003BA848]
"NMS.exe"+B740F9: 41 80 B8 60 AA 71 00 00        -  cmp byte ptr [r8+0071AA60],00
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1864</ID>
              <Description>"Wanted Level"</Description>
              <VariableType>Byte</VariableType>
              <Address>sptr</Address>
              <Offsets>
                <Offset>38</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1832</ID>
      <Description>"Money Milestone"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(m_money,4D 4F 4E 45 59 00 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? FF FF FF FF 00 00 00 00 00 00 00 00)
label(m_moneyptr)
registersymbol(m_moneyptr)

m_money:
m_moneyptr:

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1833</ID>
          <Description>"Money Earned"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>m_moneyptr+10</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1858</ID>
      <Description>"Working Scripts From Old Table"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1465</ID>
          <Description>"Universial Translator (Decode Words)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(words,NMS.exe,EB 02 32 C9 84 C9)
words:
  db 90 90 B1 01
registersymbol(words)

[DISABLE]
words:
  db EB 02 32 C9
unregistersymbol(words)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+892E6C

"NMS.exe"+892E4C: 0F 1F 40 00           -  nop [rax+00]
"NMS.exe"+892E50: 4C 39 00              -  cmp [rax],r8
"NMS.exe"+892E53: 75 06                 -  jne NMS.exe+892E5B
"NMS.exe"+892E55: 48 39 50 08           -  cmp [rax+08],rdx
"NMS.exe"+892E59: 74 0B                 -  je NMS.exe+892E66
"NMS.exe"+892E5B: 48 83 C0 18           -  add rax,18
"NMS.exe"+892E5F: 48 3B C1              -  cmp rax,rcx
"NMS.exe"+892E62: 74 0A                 -  je NMS.exe+892E6E
"NMS.exe"+892E64: EB EA                 -  jmp NMS.exe+892E50
"NMS.exe"+892E66: 41 0F B6 4C 04 10     -  movzx ecx,byte ptr [r12+rax+10]
// ---------- INJECTING HERE ----------
"NMS.exe"+892E6C: EB 02                 -  jmp NMS.exe+892E70
"NMS.exe"+892E6E: 32 C9                 -  xor cl,cl
"NMS.exe"+892E70: 84 C9                 -  test cl,cl
// ---------- DONE INJECTING  ----------
"NMS.exe"+892E72: 0F 84 A3 00 00 00     -  je NMS.exe+892F1B
"NMS.exe"+892E78: 48 8D 05 1D 4B AB 00  -  lea rax,[NMS.exe+134799C]
"NMS.exe"+892E7F: 48 89 45 A0           -  mov [rbp-60],rax
"NMS.exe"+892E83: 48 8D 05 0E 4B AB 00  -  lea rax,[NMS.exe+1347998]
"NMS.exe"+892E8A: 48 89 45 A8           -  mov [rbp-58],rax
"NMS.exe"+892E8E: 48 8D 05 2B 4B AB 00  -  lea rax,[NMS.exe+13479C0]
"NMS.exe"+892E95: 48 89 45 B0           -  mov [rbp-50],rax
"NMS.exe"+892E99: 48 8D 1D 5E C7 A9 00  -  lea rbx,[NMS.exe+132F5FE]
"NMS.exe"+892EA0: 48 89 5D B8           -  mov [rbp-48],rbx
"NMS.exe"+892EA4: 48 8D 05 0D 4B AB 00  -  lea rax,[NMS.exe+13479B8]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>246</ID>
          <Description>"Inventory Slot Pointers"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(inventory_slots,NMS.exe,8B 0C 8E 0F A3 D1)
alloc(newmem,$1000,inventory_slots)

label(code)
label(return)
label(inventory_slots_ptr)

newmem:
  push rcx
  mov rcx,inventory_slots_ptr
  mov [rcx],rsi
  pop rcx
code:
  mov ecx,[rsi+rcx*4]
  bt ecx,edx
  jmp return

inventory_slots_ptr:
  dq 0

inventory_slots:
  jmp newmem
  nop
return:
registersymbol(inventory_slots)
registersymbol(inventory_slots_ptr)

[DISABLE]
inventory_slots:
  db 8B 0C 8E 0F A3 D1
unregistersymbol(inventory_slots)
unregistersymbol(inventory_slots_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+44636B

"NMS.exe"+44634E: 44 3B D7                    -  cmp r10d,edi
"NMS.exe"+446351: 7D 28                       -  jnl NMS.exe+44637B
"NMS.exe"+446353: 41 8B CB                    -  mov ecx,r11d
"NMS.exe"+446356: 41 8B C3                    -  mov eax,r11d
"NMS.exe"+446359: 83 E1 E0                    -  and ecx,-20
"NMS.exe"+44635C: 2B C1                       -  sub eax,ecx
"NMS.exe"+44635E: 49 8B CB                    -  mov rcx,r11
"NMS.exe"+446361: 48 C1 F9 05                 -  sar rcx,05
"NMS.exe"+446365: 0F B6 D0                    -  movzx edx,al
"NMS.exe"+446368: 49 03 CA                    -  add rcx,r10
// ---------- INJECTING HERE ----------
"NMS.exe"+44636B: 8B 0C 8E                    -  mov ecx,[rsi+rcx*4]
"NMS.exe"+44636E: 0F A3 D1                    -  bt ecx,edx
// ---------- DONE INJECTING  ----------
"NMS.exe"+446371: 0F 92 C1                    -  setb cl
"NMS.exe"+446374: 84 C9                       -  test cl,cl
"NMS.exe"+446376: 74 03                       -  je NMS.exe+44637B
"NMS.exe"+446378: 41 FF C1                    -  inc r9d
"NMS.exe"+44637B: 41 FF C0                    -  inc r8d
"NMS.exe"+44637E: 44 3B C3                    -  cmp r8d,ebx
"NMS.exe"+446381: 7C AD                       -  jl NMS.exe+446330
"NMS.exe"+446383: 4C 8B 74 24 18              -  mov r14,[rsp+18]
"NMS.exe"+446388: 48 8B 6C 24 10              -  mov rbp,[rsp+10]
"NMS.exe"+44638D: 48 8B 5C 24 20              -  mov rbx,[rsp+20]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>247</ID>
              <Description>"Currently Opened Inventory"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>inventory_slots_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>248</ID>
                  <Description>"Row 1 (set to -1 for all slots)"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>249</ID>
                  <Description>"Row 2"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>250</ID>
                  <Description>"Row 3"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>251</ID>
                  <Description>"Row 4"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>252</ID>
                  <Description>"Row 5"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>253</ID>
                  <Description>"Row 6"</Description>
                  <VariableType>Byte</VariableType>
                  <Address>+14</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>105</ID>
          <Description>"Unlimited Hazard Protection"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(environment,NMS.exe,F3 0F 58 C2 F3 0F 11 03)
environment:
  db F3 0F 10 C2
registersymbol(environment)

[DISABLE]
environment:
  db F3 0F 58 C2
unregistersymbol(environment)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+A2DAAB

"NMS.exe"+A2DA6F: F3 0F 10 13                    -  movss xmm2,[rbx]
"NMS.exe"+A2DA73: 0F 2F F2                       -  comiss xmm6,xmm2
"NMS.exe"+A2DA76: 0F 86 AE 00 00 00              -  jbe NMS.exe+A2DB2A
"NMS.exe"+A2DA7C: F3 42 0F 10 4C 3E 08           -  movss xmm1,[rsi+r15+08]
"NMS.exe"+A2DA83: F3 42 0F 5C 4C 3E 04           -  subss xmm1,[rsi+r15+04]
"NMS.exe"+A2DA8A: F3 41 0F 59 8C 1D 48 01 00 00  -  mulss xmm1,[r13+rbx+00000148]
"NMS.exe"+A2DA94: F3 42 0F 58 4C 3E 04           -  addss xmm1,[rsi+r15+04]
"NMS.exe"+A2DA9B: F3 0F 59 0D 75 95 BF 00        -  mulss xmm1,[NMS.exe+1627018]
"NMS.exe"+A2DAA3: 41 0F 28 C0                    -  movaps xmm0,xmm8
"NMS.exe"+A2DAA7: F3 0F 5E C1                    -  divss xmm0,xmm1
// ---------- INJECTING HERE ----------
"NMS.exe"+A2DAAB: F3 0F 58 C2                    -  addss xmm0,xmm2
"NMS.exe"+A2DAAF: F3 0F 11 03                    -  movss [rbx],xmm0
// ---------- DONE INJECTING  ----------
"NMS.exe"+A2DAB3: 0F 2F C6                       -  comiss xmm0,xmm6
"NMS.exe"+A2DAB6: 76 03                          -  jna NMS.exe+A2DABB
"NMS.exe"+A2DAB8: 0F 28 C6                       -  movaps xmm0,xmm6
"NMS.exe"+A2DABB: F3 0F 11 03                    -  movss [rbx],xmm0
"NMS.exe"+A2DABF: F3 0F 10 05 7D 6A BF 00        -  movss xmm0,[NMS.exe+1624544]
"NMS.exe"+A2DAC7: F3 0F 11 43 48                 -  movss [rbx+48],xmm0
"NMS.exe"+A2DACC: EB 5C                          -  jmp NMS.exe+A2DB2A
"NMS.exe"+A2DACE: F3 0F 10 13                    -  movss xmm2,[rbx]
"NMS.exe"+A2DAD2: 0F 2F D7                       -  comiss xmm2,xmm7
"NMS.exe"+A2DAD5: 76 53                          -  jna NMS.exe+A2DB2A
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1859</ID>
          <Description>"Unlimited Pulse Engine"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(pulse,NMS.exe,FF 4F 18 33 C0)
pulse:
  db 90 90 90
registersymbol(pulse)
[DISABLE]
pulse:
  db FF 4F 18 33 C0
unregistersymbol(pulse)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Unlimited Sprint"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(sprint,NMS.exe,F3 0F 5C C8 F3 0F 11 8F ?? ?? ?? ?? 44 0F 2F E1 0F)
sprint:
  db 90 90 90 90
registersymbol(sprint)

[DISABLE]
sprint:
  db F3 0F 5C C8
unregistersymbol(sprint)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+A0AF1A

"NMS.exe"+A0AEDE: F3 0F 10 7C 24 54                 -  movss xmm7,[rsp+54]
"NMS.exe"+A0AEE4: F3 0F 59 F8                       -  mulss xmm7,xmm0
"NMS.exe"+A0AEE8: F3 0F 11 7C 24 54                 -  movss [rsp+54],xmm7
"NMS.exe"+A0AEEE: F3 0F 10 35 CA C7 C1 00           -  movss xmm6,[NMS.exe+16276C0]
"NMS.exe"+A0AEF6: F3 0F 59 F7                       -  mulss xmm6,xmm7
"NMS.exe"+A0AEFA: F3 41 0F 59 F7                    -  mulss xmm6,xmm15
"NMS.exe"+A0AEFF: F3 0F 10 05 DD C1 C1 00           -  movss xmm0,[NMS.exe+16270E4]
"NMS.exe"+A0AF07: F3 41 0F 59 C6                    -  mulss xmm0,xmm14
"NMS.exe"+A0AF0C: F3 0F 5E 44 24 58                 -  divss xmm0,[rsp+58]
"NMS.exe"+A0AF12: F3 0F 10 8F 44 23 00 00           -  movss xmm1,[rdi+00002344]
// ---------- INJECTING HERE ----------
"NMS.exe"+A0AF1A: F3 0F 5C C8                       -  subss xmm1,xmm0
"NMS.exe"+A0AF1E: F3 0F 11 8F 44 23 00 00           -  movss [rdi+00002344],xmm1
// ---------- DONE INJECTING  ----------
"NMS.exe"+A0AF26: 44 0F 2F E1                       -  comiss xmm12,xmm1
"NMS.exe"+A0AF2A: 0F 82 B3 00 00 00                 -  jb NMS.exe+A0AFE3
"NMS.exe"+A0AF30: 48 C7 87 40 23 00 00 01 00 00 00  -  mov [rdi+00002340],00000001
"NMS.exe"+A0AF3B: 44 89 74 24 38                    -  mov [rsp+38],r14d
"NMS.exe"+A0AF40: 4C 89 74 24 30                    -  mov [rsp+30],r14
"NMS.exe"+A0AF45: 44 89 74 24 28                    -  mov [rsp+28],r14d
"NMS.exe"+A0AF4A: 4C 89 74 24 20                    -  mov [rsp+20],r14
"NMS.exe"+A0AF4F: 45 33 C9                          -  xor r9d,r9d
"NMS.exe"+A0AF52: 45 33 C0                          -  xor r8d,r8d
"NMS.exe"+A0AF55: 48 8B 97 F8 00 00 00              -  mov rdx,[rdi+000000F8]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Unlimited Mining Beam/Photon Cannon"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(laser,NMS.exe,F3 0F 2C C0 29 43 18)
laser+4:
  db 90 90 90
registersymbol(laser)

[DISABLE]
laser+4:
  db 29 43 18
unregistersymbol(laser)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+A2A185

"NMS.exe"+A2A162: 41 8D 45 01              -  lea eax,[r13+01]
"NMS.exe"+A2A166: EB 4D                    -  jmp NMS.exe+A2A1B5
"NMS.exe"+A2A168: 45 84 F6                 -  test r14l,r14l
"NMS.exe"+A2A16B: 75 27                    -  jne NMS.exe+A2A194
"NMS.exe"+A2A16D: 66 41 0F 6E C5           -  movd xmm0,r13d
"NMS.exe"+A2A172: 0F 5B C0                 -  cvtdq2ps xmm0,xmm0
"NMS.exe"+A2A175: 66 0F 6E C9              -  movd xmm1,ecx
"NMS.exe"+A2A179: 0F 5B C9                 -  cvtdq2ps xmm1,xmm1
"NMS.exe"+A2A17C: F3 0F 5E C1              -  divss xmm0,xmm1
"NMS.exe"+A2A180: E8 8B 0C 41 00           -  call NMS.exe+E3AE10
// ---------- INJECTING HERE ----------
"NMS.exe"+A2A185: F3 0F 2C C0              -  cvttss2si eax,xmm0
"NMS.exe"+A2A189: 29 43 18                 -  sub [rbx+18],eax
// ---------- DONE INJECTING  ----------
"NMS.exe"+A2A18C: 44 01 AC BE 38 0F 00 00  -  add [rsi+rdi*4+00000F38],r13d
"NMS.exe"+A2A194: B8 04 00 00 00           -  mov eax,00000004
"NMS.exe"+A2A199: EB 1A                    -  jmp NMS.exe+A2A1B5
"NMS.exe"+A2A19B: 33 C0                    -  xor eax,eax
"NMS.exe"+A2A19D: EB 16                    -  jmp NMS.exe+A2A1B5
"NMS.exe"+A2A19F: BF 03 00 00 00           -  mov edi,00000003
"NMS.exe"+A2A1A4: 45 84 F6                 -  test r14l,r14l
"NMS.exe"+A2A1A7: 75 0A                    -  jne NMS.exe+A2A1B3
"NMS.exe"+A2A1A9: 49 63 CC                 -  movsxd  rcx,r12d
"NMS.exe"+A2A1AC: 89 AC 8E 38 0F 00 00     -  mov [rsi+rcx*4+00000F38],ebp
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"Laser Color"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(laser_color,NMS.exe,F3 0F 10 1E 45 33 C0 BA 07) // should be unique
alloc(newmem,$1000,"NMS.exe"+A425F6)

label(code)
label(return)
label(laser_color_ptr)

newmem:
  mov r8,laser_color_ptr
  mov [r8],rsi
code:
  movss xmm3,[rsi]
  xor r8d,r8d
  jmp return

laser_color_ptr:
  dq 0

laser_color:
  jmp newmem
  nop
  nop
return:
registersymbol(laser_color)
registersymbol(laser_color_ptr)

[DISABLE]
laser_color:
  db F3 0F 10 1E 45 33 C0
unregistersymbol(laser_color)
unregistersymbol(laser_color_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+A425F6

"NMS.exe"+A425D0: 45 33 C0              -  xor r8d,r8d
"NMS.exe"+A425D3: BA 05 29 00 00        -  mov edx,00002905
"NMS.exe"+A425D8: 48 8B C8              -  mov rcx,rax
"NMS.exe"+A425DB: 41 FF 51 28           -  call qword ptr [r9+28]
"NMS.exe"+A425DF: 8B 57 08              -  mov edx,[rdi+08]
"NMS.exe"+A425E2: 48 8B 0D 07 26 BE 00  -  mov rcx,[NMS.exe+1624BF0]
"NMS.exe"+A425E9: E8 02 06 1E 00        -  call NMS.exe+C22BF0
"NMS.exe"+A425EE: 48 85 C0              -  test rax,rax
"NMS.exe"+A425F1: 74 16                 -  je NMS.exe+A42609
"NMS.exe"+A425F3: 4C 8B 08              -  mov r9,[rax]
// ---------- INJECTING HERE ----------
"NMS.exe"+A425F6: F3 0F 10 1E           -  movss xmm3,[rsi]
"NMS.exe"+A425FA: 45 33 C0              -  xor r8d,r8d
// ---------- DONE INJECTING  ----------
"NMS.exe"+A425FD: BA 07 29 00 00        -  mov edx,00002907
"NMS.exe"+A42602: 48 8B C8              -  mov rcx,rax
"NMS.exe"+A42605: 41 FF 51 28           -  call qword ptr [r9+28]
"NMS.exe"+A42609: 8B 57 08              -  mov edx,[rdi+08]
"NMS.exe"+A4260C: 48 8B 0D DD 25 BE 00  -  mov rcx,[NMS.exe+1624BF0]
"NMS.exe"+A42613: E8 D8 05 1E 00        -  call NMS.exe+C22BF0
"NMS.exe"+A42618: 48 85 C0              -  test rax,rax
"NMS.exe"+A4261B: 74 1A                 -  je NMS.exe+A42637
"NMS.exe"+A4261D: 4C 8B 08              -  mov r9,[rax]
"NMS.exe"+A42620: F3 0F 10 5E 04        -  movss xmm3,[rsi+04]
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1672</ID>
              <Description>"Disco Lasers"</Description>
              <LastState/>
              <Color>8000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
AddressList = getAddressList()
cRed = AddressList.getMemoryRecordByDescription('Red (0.0 to 1.0)')
memoryrecord_freeze(cRed)

cGreen = AddressList.getMemoryRecordByDescription('Green (0.0 to 1.0)')
memoryrecord_freeze(cGreen)

cBlue = AddressList.getMemoryRecordByDescription('Blue (0.0 to 1.0)')
memoryrecord_freeze(cBlue)

ColorTimer = createTimer(getMainForm(), false)
ColorTimer:setInterval(200)
ColorTimer:setOnTimer(function(sender)
memoryrecord_setValue(cRed, 1/math.random(0,255))
memoryrecord_setValue(cGreen, 1/math.random(0,255))
memoryrecord_setValue(cBlue, 1/math.random(0,255))
end)
ColorTimer:setEnabled(true)
{$asm}
[DISABLE]
{$lua}
if ColorTimer ~= nil then ColorTimer.Enabled = false; object_destroy(ColorTimer); ColorTimer = nil end
memoryrecord_unfreeze(cRed)
memoryrecord_unfreeze(cGreen)
memoryrecord_unfreeze(cBlue)
{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>204</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>laser_color_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>205</ID>
                  <Description>"Red (0.0 to 1.0)"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+0</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>206</ID>
                  <Description>"Green (0.0 to 1.0)"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>207</ID>
                  <Description>"Blue (0.0 to 1.0)"</Description>
                  <VariableType>Float</VariableType>
                  <Address>+8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1455</ID>
          <Description>"Player Position Data"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(PlayerPosAOB,NMS.exe,48 8B 81 B0 00 00 00 44 0F 29 5C)
alloc(newmem,$1000,PlayerPosAOB)

label(code)
label(return)
label(PlayerPosData)
registersymbol(PlayerPosData)

newmem:

code:
  mov rax,[rcx+000000B0]
  mov [PlayerPosData],rax
  jmp return
  PlayerPosData:

PlayerPosAOB:
  jmp code
  nop
  nop
return:
registersymbol(PlayerPosAOB)

[DISABLE]
PlayerPosAOB:
  db 48 8B 81 B0 00 00 00
unregistersymbol(PlayerPosAOB)
unregistersymbol(PlayerPosData)
dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1456</ID>
              <Description>"X"</Description>
              <VariableType>Float</VariableType>
              <Address>PlayerPosData</Address>
              <Offsets>
                <Offset>30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1457</ID>
              <Description>"Y"</Description>
              <VariableType>Float</VariableType>
              <Address>PlayerPosData</Address>
              <Offsets>
                <Offset>34</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1458</ID>
              <Description>"Z"</Description>
              <VariableType>Float</VariableType>
              <Address>PlayerPosData</Address>
              <Offsets>
                <Offset>38</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>197</ID>
          <Description>"Mouseover Object Pointer"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(mouseover_mine,NMS.exe,8B 91 F8 00 00 00 85)
alloc(newmem,$1000,mouseover_mine)

label(code)
label(return)
label(mouseover_mine_ptr)

newmem:
  mov rdx,mouseover_mine_ptr
  mov [rdx],rcx
code:
  mov edx,[rcx+000000F8]
  jmp return

mouseover_mine_ptr:
  dq 0

mouseover_mine:
  jmp newmem
  nop
return:
registersymbol(mouseover_mine)
registersymbol(mouseover_mine_ptr)

[DISABLE]
mouseover_mine:
  db 8B 91 F8 00 00 00
unregistersymbol(mouseover_mine)
unregistersymbol(mouseover_mine_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+47BD40

"NMS.exe"+47BD20: 49 3B D3                 -  cmp rdx,r11
"NMS.exe"+47BD23: 7C E0                    -  jl NMS.exe+47BD05
"NMS.exe"+47BD25: 33 C0                    -  xor eax,eax
"NMS.exe"+47BD27: 48 8B 5C 24 08           -  mov rbx,[rsp+08]
"NMS.exe"+47BD2C: C3                       -  ret 
"NMS.exe"+47BD2D: 49 63 C1                 -  movsxd  rax,r9d
"NMS.exe"+47BD30: 48 69 C0 D0 00 00 00     -  imul rax,rax,000000D0
"NMS.exe"+47BD37: 48 03 03                 -  add rax,[rbx]
"NMS.exe"+47BD3A: 48 8B 5C 24 08           -  mov rbx,[rsp+08]
"NMS.exe"+47BD3F: C3                       -  ret 
// ---------- INJECTING HERE ----------
"NMS.exe"+47BD40: 8B 91 F8 00 00 00        -  mov edx,[rcx+000000F8]
// ---------- DONE INJECTING  ----------
"NMS.exe"+47BD46: 85 D2                    -  test edx,edx
"NMS.exe"+47BD48: 7E 55                    -  jle NMS.exe+47BD9F
"NMS.exe"+47BD4A: 8B C2                    -  mov eax,edx
"NMS.exe"+47BD4C: 66 0F 6E C2              -  movd xmm0,edx
"NMS.exe"+47BD50: 0F 57 D2                 -  xorps xmm2,xmm2
"NMS.exe"+47BD53: 2B 81 FC 00 00 00        -  sub eax,[rcx+000000FC]
"NMS.exe"+47BD59: B9 00 00 00 00           -  mov ecx,00000000
"NMS.exe"+47BD5E: 0F 48 C1                 -  cmovs eax,ecx
"NMS.exe"+47BD61: 0F 5B C0                 -  cvtdq2ps xmm0,xmm0
"NMS.exe"+47BD64: 66 0F 6E C8              -  movd xmm1,eax
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>198</ID>
              <Description>"Base Address"</Description>
              <LastState RealAddress="00000000"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>mouseover_mine_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>200</ID>
                  <Description>"Damage Taken"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+fc</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>199</ID>
                  <Description>"Damage Capacity"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+f8</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1668</ID>
          <Description>"Speed Manipulator"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(speed,NMS.exe,F3 0F 58 60 50 F3 0F 58 48 54 F3 0F 58 50 58 )
alloc(newmem,$100,speed)
label(code)
label(return)
label(xAxis)
label(yAxis)
label(zAxis)
newmem:
xAxis:
dq (float)0
yAxis:
dq (float)0
zAxis:
dq (float)0
code:
addss xmm4,[xAxis]
addss xmm1,[yAxis]
addss xmm2,[zAxis]
  jmp return
speed:
  jmp code
  db 90 90 90 90 90 90 90 90 90 90
return:
registersymbol(speed)
registersymbol(xAxis)
registersymbol(yAxis)
registersymbol(zAxis)
[DISABLE]
speed:
  db F3 0F 58 60 50 F3 0F 58 48 54 F3 0F 58 50 58
unregistersymbol(speed)
unregistersymbol(xAxis)
unregistersymbol(yAxis)
unregistersymbol(zAxis)
dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1669</ID>
              <Description>"X Axis"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>xAxis</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>103</Key>
                  </Keys>
                  <Value>100</Value>
                  <Description>Increase 100</Description>
                  <ID>0</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
                <Hotkey>
                  <Action>Decrease Value</Action>
                  <Keys>
                    <Key>97</Key>
                  </Keys>
                  <Value>100</Value>
                  <Description>Decrease 100</Description>
                  <ID>1</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>1671</ID>
              <Description>"Y Axis"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>yAxis</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>104</Key>
                  </Keys>
                  <Value>100</Value>
                  <ID>0</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
                <Hotkey>
                  <Action>Decrease Value</Action>
                  <Keys>
                    <Key>98</Key>
                  </Keys>
                  <Value>100</Value>
                  <ID>1</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>1670</ID>
              <Description>"Z Axis"</Description>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>zAxis</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>105</Key>
                  </Keys>
                  <Value>100</Value>
                  <ID>0</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
                <Hotkey>
                  <Action>Decrease Value</Action>
                  <Keys>
                    <Key>99</Key>
                  </Keys>
                  <Value>100</Value>
                  <ID>1</ID>
                  <ActivateSound/>
                  <DeactivateSound/>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>203</ID>
          <Description>"One-Hit Kills"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(onehit,NMS.exe,01 86 FC 00 00 00)
alloc(newmem,$1000,onehit)

label(code)
label(return)

newmem:
  mov eax,[rsi+000000F8]
code:
  add [rsi+000000FC],eax
  jmp return

onehit:
  jmp newmem
  nop
return:
registersymbol(onehit)

[DISABLE]
onehit:
  db 01 86 FC 00 00 00
unregistersymbol(onehit)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "NMS.exe"+8C0ADF

"NMS.exe"+8C0AC2: 48 8B 56 28           -  mov rdx,[rsi+28]
"NMS.exe"+8C0AC6: 80 7A 24 00           -  cmp byte ptr [rdx+24],00
"NMS.exe"+8C0ACA: 74 06                 -  je NMS.exe+8C0AD2
"NMS.exe"+8C0ACC: 41 8B 46 78           -  mov eax,[r14+78]
"NMS.exe"+8C0AD0: EB 04                 -  jmp NMS.exe+8C0AD6
"NMS.exe"+8C0AD2: 41 8B 46 74           -  mov eax,[r14+74]
"NMS.exe"+8C0AD6: 3B 42 28              -  cmp eax,[rdx+28]
"NMS.exe"+8C0AD9: 7E 0C                 -  jle NMS.exe+8C0AE7
"NMS.exe"+8C0ADB: 85 C0                 -  test eax,eax
"NMS.exe"+8C0ADD: 7E 08                 -  jle NMS.exe+8C0AE7
// ---------- INJECTING HERE ----------
"NMS.exe"+8C0ADF: 01 86 FC 00 00 00     -  add [rsi+000000FC],eax
// ---------- DONE INJECTING  ----------
"NMS.exe"+8C0AE5: B3 01                 -  mov bl,01
"NMS.exe"+8C0AE7: 85 C9                 -  test ecx,ecx
"NMS.exe"+8C0AE9: 7E 1A                 -  jle NMS.exe+8C0B05
"NMS.exe"+8C0AEB: 2B 8E FC 00 00 00     -  sub ecx,[rsi+000000FC]
"NMS.exe"+8C0AF1: 83 F9 01              -  cmp ecx,01
"NMS.exe"+8C0AF4: 7D 0F                 -  jnl NMS.exe+8C0B05
"NMS.exe"+8C0AF6: 48 8D 8E C0 01 00 00  -  lea rcx,[rsi+000001C0]
"NMS.exe"+8C0AFD: 49 8B D6              -  mov rdx,r14
"NMS.exe"+8C0B00: E8 AB 0F FE FF        -  call NMS.exe+8A1AB0
"NMS.exe"+8C0B05: 84 DB                 -  test bl,bl
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1596</ID>
          <Description>"Anti Profanity Filter"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(profanity1,ProfanityFilter_x64_v120.dll,F6 41 04 01 74 09)
profanity1:
db 90 90 90 90
registersymbol(profanity1)

aobscanmodule(profanity2,ProfanityFilter_x64_v120.dll,0F 8C * * * * 48 8B 54 24 78)
profanity2:
db 0F 8F
registersymbol(profanity2)

aobscanmodule(profanity3,ProfanityFilter_x64_v120.dll,74 0B 80 7C 24 3B 00)
profanity3:
db 75 0B
registersymbol(profanity3)

[DISABLE]
profanity1:
db F6 41 04 01

profanity2:
db 0F 8C

profanity3:
db 74 0B

unregistersymbol(profanity1)
unregistersymbol(profanity2)
unregistersymbol(profanity3)

{
// ORIGINAL CODE - INJECTION POINT: ProfanityFilter_x64_v120.dll+1220
ProfanityFilter_x64_v120.dll+1208: FF 15 BA3E0000  - call qword ptr [7FF8DB3550C8]
ProfanityFilter_x64_v120.dll+120E: EB E5 - jmp 7FF8DB3511F5
ProfanityFilter_x64_v120.dll+1210: B8 01000090 - mov eax,90000001
ProfanityFilter_x64_v120.dll+1215: 48 83 C4 40 - add rsp,40
ProfanityFilter_x64_v120.dll+1219: 41 5E - pop r14
ProfanityFilter_x64_v120.dll+121B: 5F - pop rdi
ProfanityFilter_x64_v120.dll+121C: 5E - pop rsi
ProfanityFilter_x64_v120.dll+121D: 5D - pop rbp
ProfanityFilter_x64_v120.dll+121E: 5B - pop rbx
ProfanityFilter_x64_v120.dll+121F: C3 - ret
// ---------- INJECTING HERE ----------
ProfanityFilter_x64_v120.dll+1220: F6 41 04 01 - test byte ptr [rcx+04],01
// ---------- DONE INJECTING  ----------
ProfanityFilter_x64_v120.dll+1224: 74 09 - je 7FF8DB35122F
ProfanityFilter_x64_v120.dll+1226: 83 79 38 00 - cmp dword ptr [rcx+38],00
ProfanityFilter_x64_v120.dll+122A: 76 03 - jna 7FF8DB35122F
ProfanityFilter_x64_v120.dll+122C: B0 01 - mov al,01
ProfanityFilter_x64_v120.dll+122E: C3 - ret
ProfanityFilter_x64_v120.dll+122F: 32 C0  - xor al,al
ProfanityFilter_x64_v120.dll+1231: C3 - ret
ProfanityFilter_x64_v120.dll+1232: CC - int 3
ProfanityFilter_x64_v120.dll+1233: CC - int 3
ProfanityFilter_x64_v120.dll+1234: CC - int 3

// ORIGINAL CODE - INJECTION POINT: ProfanityFilter_x64_v120.dll+29EF
ProfanityFilter_x64_v120.dll+29C5: 45 8D 65 01  - lea r12d,[r13+01]
ProfanityFilter_x64_v120.dll+29C9: 8B 44 24 64  - mov eax,[rsp+64]
ProfanityFilter_x64_v120.dll+29CD: 48 8B 54 24 68  - mov rdx,[rsp+68]
ProfanityFilter_x64_v120.dll+29D2: 48 8B BC 24 E0000000  - mov rdi,[rsp+000000E0]
ProfanityFilter_x64_v120.dll+29DA: 8B 74 24 60  - mov esi,[rsp+60]
ProfanityFilter_x64_v120.dll+29DE: FF C0  - inc eax
ProfanityFilter_x64_v120.dll+29E0: 48 FF C2  - inc rdx
ProfanityFilter_x64_v120.dll+29E3: 89 44 24 64  - mov [rsp+64],eax
ProfanityFilter_x64_v120.dll+29E7: 48 89 54 24 68  - mov [rsp+68],rdx
ProfanityFilter_x64_v120.dll+29EC: 3B 47 08  - cmp eax,[rdi+08]
// ---------- INJECTING HERE ----------
ProfanityFilter_x64_v120.dll+29EF: 0F8C 1BF3FFFF - jl 7FF8DB351D10
// ---------- DONE INJECTING  ----------
ProfanityFilter_x64_v120.dll+29F5: 48 8B 54 24 78  - mov rdx,[rsp+78]
ProfanityFilter_x64_v120.dll+29FA: FF 44 24 5C  - inc [rsp+5C]
ProfanityFilter_x64_v120.dll+29FE: 48 FF C2  - inc rdx
ProfanityFilter_x64_v120.dll+2A01: 48 89 54 24 78  - mov [rsp+78],rdx
ProfanityFilter_x64_v120.dll+2A06: 48 3B 94 24 88000000  - cmp rdx,[rsp+00000088]
ProfanityFilter_x64_v120.dll+2A0E: 0F8D 7BF2FFFF - jnl 7FF8DB351C8F
ProfanityFilter_x64_v120.dll+2A14: 4C 8B 84 24 80000000  - mov r8,[rsp+00000080]
ProfanityFilter_x64_v120.dll+2A1C: E9 B1F2FFFF - jmp 7FF8DB351CD2
ProfanityFilter_x64_v120.dll+2A21: CC - int 3
ProfanityFilter_x64_v120.dll+2A22: CC - int 3

// ORIGINAL CODE - INJECTION POINT: ProfanityFilter_x64_v120.dll+24CC
ProfanityFilter_x64_v120.dll+249F: E9 53FEFFFF - jmp 7FF8DB3522F7
ProfanityFilter_x64_v120.dll+24A4: 48 8B 5C 24 48  - mov rbx,[rsp+48]
ProfanityFilter_x64_v120.dll+24A9: 0FB6 BC 24 F0000000  - movzx edi,byte ptr [rsp+000000F0]
ProfanityFilter_x64_v120.dll+24B1: 0FB6 D0  - movzx edx,al
ProfanityFilter_x64_v120.dll+24B4: E9 4BFEFFFF - jmp 7FF8DB352304
ProfanityFilter_x64_v120.dll+24B9: 0FB6 7C 24 32  - movzx edi,byte ptr [rsp+32]
ProfanityFilter_x64_v120.dll+24BE: 44 0FB6 7C 24 33  - movzx r15d,byte ptr [rsp+33]
ProfanityFilter_x64_v120.dll+24C4: 40 84 FF  - test dil,dil
ProfanityFilter_x64_v120.dll+24C7: 74 10 - je 7FF8DB3524D9
ProfanityFilter_x64_v120.dll+24C9: 45 84 FF  - test r15l,r15l
// ---------- INJECTING HERE ----------
ProfanityFilter_x64_v120.dll+24CC: 74 0B - je 7FF8DB3524D9
// ---------- DONE INJECTING  ----------
ProfanityFilter_x64_v120.dll+24CE: 80 7C 24 3B 00 - cmp byte ptr [rsp+3B],00
ProfanityFilter_x64_v120.dll+24D3: 75 04 - jne 7FF8DB3524D9
ProfanityFilter_x64_v120.dll+24D5: B0 01 - mov al,01
ProfanityFilter_x64_v120.dll+24D7: EB 02 - jmp 7FF8DB3524DB
ProfanityFilter_x64_v120.dll+24D9: 32 C0  - xor al,al
ProfanityFilter_x64_v120.dll+24DB: 80 7C 24 35 00 - cmp byte ptr [rsp+35],00
ProfanityFilter_x64_v120.dll+24E0: 75 0E - jne 7FF8DB3524F0
ProfanityFilter_x64_v120.dll+24E2: 80 7C 24 3A 00 - cmp byte ptr [rsp+3A],00
ProfanityFilter_x64_v120.dll+24E7: 74 0F - je 7FF8DB3524F8
ProfanityFilter_x64_v120.dll+24E9: 80 7C 24 38 00 - cmp byte ptr [rsp+38],00
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>crafting1</Name>
      <Address>7FF7CC91D9E6</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
