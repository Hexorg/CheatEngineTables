<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Enable"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminareadAOB,D9 86 AC 00 00 00 D9 1C 24)
registersymbol(staminareadAOB)
aobscan(ammoclipreadAOB,8B 44 24 04 3B 46 58 5E 74 07 8B 40 10)
registersymbol(ammoclipreadAOB)
aobscan(ammopouchreadAOB,8B 44 24 04 3B 46 34 5E 74 07 8B 40 10 59 C2 04)
registersymbol(ammopouchreadAOB)
aobscan(decryption1AOB,8B 49 08 8B C1 8B D1)
registersymbol(decryption1AOB)

label(pPlayer)
registersymbol(pPlayer)
label(pAmmoClip)
registersymbol(pAmmoClip)
label(pAmmoPouch)
registersymbol(pAmmoPouch)
label(bInfAmmoPouch)
registersymbol(bInfAmmoPouch)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pPlayer],esi

originalcode:
fld dword ptr [esi+000000AC]

exit:
jmp returnhere

///

newmem2:
mov [pAmmoClip],eax

originalcode2:
mov eax,[eax+10]
pop ecx
ret 0004

exit2:
jmp returnhere2

///

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoPouch],eax
cmp byte ptr [bInfAmmoPouch],1
jne originalcode6
cmp [eax+10],#10
jge originalcode6
mov [eax+10],#10

originalcode6:
mov eax,[eax+10]
pop ecx
ret 0004

exit6:
jmp returnhere6

///
pPlayer:
dd 0
pAmmoClip:
dd 0
pAmmoPouch:
dd 0
bInfAmmoPouch:
db 0
///

staminareadAOB: //"StateOfDecay.exe"+11232B9:
jmp newmem
nop
returnhere:

ammoclipreadAOB+a: //"StateOfDecay.exe"+1246640:
jmp newmem2
nop
nop
returnhere2:

ammopouchreadAOB+a: //"StateOfDecay.exe"+372EE0:
jmp newmem6
nop
nop
returnhere6:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminareadAOB: //"StateOfDecay.exe"+11232B9:
db D9 86 AC 00 00 00
//Alt: fld dword ptr [esi+000000AC]
ammoclipreadAOB+a: //"StateOfDecay.exe"+1246640:
db 8B 40 10 59 C2 04 00
//Alt: mov eax,[eax+10]
//Alt: pop ecx
//Alt: ret 0004
ammopouchreadAOB+a: //"StateOfDecay.exe"+372EE0:
db 8B 40 10 59 C2 04 00
//Alt: mov eax,[eax+10]
//Alt: pop ecx
//Alt: ret 0004
unregistersymbol(staminareadAOB)
unregistersymbol(ammoclipreadAOB)
unregistersymbol(ammopouchreadAOB)
unregistersymbol(decryption1AOB)
unregistersymbol(pPlayer)
unregistersymbol(pAmmoClip)
unregistersymbol(pAmmoPouch)
unregistersymbol(bInfAmmoPouch)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>25</ID>
          <Description>"[scripts]"</Description>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>24</ID>
              <Description>"Inf. Stamina"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminawriteAOB,F3 0F 11 80 AC 00 00 00 F3 0F 10 44 24 08 F3 0F 11 80 B0 00 00 00 C3)
registersymbol(staminawriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pPlayer],eax
jne originalcode
push ebx
mov ebx,[esp+08]
cmp [eax+000000AC],ebx
pop ebx
jle originalcode
movss xmm0,[eax+000000AC]

originalcode:
movss [eax+000000AC],xmm0

exit:
jmp returnhere

staminawriteAOB: //"StateOfDecay.exe"+11137EF:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminawriteAOB: //"StateOfDecay.exe"+11137EF:
db F3 0F 11 80 AC 00 00 00
//Alt: movss [eax+000000AC],xmm0
unregistersymbol(staminawriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"Inf. Health"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthwriteAOB,F3 0F 11 81 A4 00 00 00 F3 0F 10 44 24 08)
registersymbol(healthwriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//movss [ecx+000000A4],xmm0
cmp [pPlayer],ecx
jne originalcode

push ebx
mov ebx,[esp+08]
cmp [ecx+000000A4],ebx
pop ebx
jle originalcode
movss xmm0,[ecx+000000A4]

/*cmp dword ptr [ecx+000000A4],(float)1.0
jge originalcode
mov dword ptr [ecx+000000A4],(float)1.0*/

originalcode:
movss [ecx+000000A4],xmm0

exit:
jmp returnhere

healthwriteAOB: //"StateOfDecay.exe"+1121DF0:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthwriteAOB: //"StateOfDecay.exe"+1121DF0:
db F3 0F 11 81 A4 00 00 00
//Alt: movss [ecx+000000A4],xmm0
unregistersymbol(healthwriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"Inf. Ammo Pouch"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInfAmmoPouch:
db 01

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInfAmmoPouch:
db 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Inf. Ammo Clip"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(ammoclipwriteAOB,8B 44 24 0C 3B 43 58 74 09 8B 54 24 34 89 50 10)
registersymbol(ammoclipwriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,[esp+34]

cmp [pAmmoClip],eax
jne originalcode
cmp edx,1
jge originalcode
mov edx,1

originalcode:
//mov edx,[esp+34]
mov [eax+10],edx

exit:
jmp returnhere

ammoclipwriteAOB+9: //"StateOfDecay.exe"+12485AF:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammoclipwriteAOB+9: //"StateOfDecay.exe"+12485AF:
db 8B 54 24 34 89 50 10
//Alt: mov edx,[esp+34]
//Alt: mov [eax+10],edx
unregistersymbol(ammoclipwriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>44</ID>
              <Description>"Influence &amp; Stockpiles"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
//aobscan(decryption1AOB,8B 49 08 8B C1 8B D1)
//registersymbol(decryption1AOB)

label(pMedicine)
registersymbol(pMedicine)
label(fMedicine)
registersymbol(fMedicine)
label(fDesiredMedicine)
registersymbol(fDesiredMedicine)

label(pFood)
registersymbol(pFood)
label(fFood)
registersymbol(fFood)
label(fDesiredFood)
registersymbol(fDesiredFood)

label(pAmmunition)
registersymbol(pAmmunition)
label(fAmmunition)
registersymbol(fAmmunition)
label(fDesiredAmmunition)
registersymbol(fDesiredAmmunition)

label(pMaterial)
registersymbol(pMaterial)
label(fMaterial)
registersymbol(fMaterial)
label(fDesiredMaterial)
registersymbol(fDesiredMaterial)

label(pFuel)
registersymbol(pFuel)
label(fFuel)
registersymbol(fFuel)
label(fDesiredFuel)
registersymbol(fDesiredFuel)

label(pInfluence)
registersymbol(pInfluence)
label(fInfluence)
registersymbol(fInfluence)
label(fDesiredInfluence)
registersymbol(fDesiredInfluence)

label(pBeds)
registersymbol(pBeds)
label(fBeds)
registersymbol(fBeds)
label(fDesiredBeds)
registersymbol(fDesiredBeds)

label(bTypeFlag)
registersymbol(bTypeFlag)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(doDecryption)
label(isMedicine)
label(isFood)
label(isAmmunition)
label(isMaterial)
label(isFuel)
label(isInfluence)
label(isBeds)
label(isUnknown)
label(resetFlag)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp ebx,0
jne resetFlag

cmp edi,0C
je doDecryption
cmp edi,18
je doDecryption
cmp edi,24
je doDecryption
cmp edi,30
je doDecryption
cmp edi,3C
je doDecryption
cmp edi,48
je doDecryption
cmp edi,54
je doDecryption
jmp resetFlag

doDecryption:

pushad

mov ecx,[ecx+08]
mov eax,ecx

mov edx,ecx
and edx,22222222
shr eax,1
add edx,edx
and ecx,99999999
and eax,22222222
or eax,edx
or eax,ecx
mov edx,eax
and edx,0C0C0C0C
mov ecx,eax
shr ecx,02
and ecx,0C0C0C0C
add edx,edx
add edx,edx
or ecx,edx
and eax,C3C3C3C3
or ecx,eax
mov eax,ecx
mov edx,ecx
shr eax,04
and edx,00F000F0 //StateOfDecay.exe+B000F0
and ecx,F00FF00F
shl edx,04
and eax,00F000F0 //StateOfDecay.exe+B000F0
or eax,edx
or eax,ecx
mov ecx,eax
shr ecx,08
mov edx,eax
and ecx,0000FF00
and edx,0000FF00
shl edx,08
or ecx,edx
and eax,FF0000FF
or ecx,eax

mov eax,[decryption1AOB+80]
xor ecx,[eax] //[StateOfDecay.exe+1A41F90]
mov eax,[decryption1AOB+86]
xor ecx,[eax] //[StateOfDecay.exe+1A42CB0]

cmp edi,0C
je isMedicine
cmp edi,18
je isFood
cmp edi,24
je isAmmunition
cmp edi,30
je isMaterial
cmp edi,3C
je isFuel
cmp edi,48
je isInfluence
cmp edi,54
je isBeds
jmp isUnknown

isMedicine:
mov byte ptr [bTypeFlag],0C
mov [fMedicine],ecx
popad
mov [pMedicine],ecx
jmp originalcode

isFood:
mov byte ptr [bTypeFlag],18
mov [fFood],ecx
popad
mov [pFood],ecx
jmp originalcode

isAmmunition:
mov byte ptr [bTypeFlag],24
mov [fAmmunition],ecx
popad
mov [pAmmunition],ecx
jmp originalcode

isMaterial:
mov byte ptr [bTypeFlag],30
mov [fMaterial],ecx
popad
mov [pMaterial],ecx
jmp originalcode

isFuel:
mov byte ptr [bTypeFlag],3C
mov [fFuel],ecx
popad
mov [pFuel],ecx
jmp originalcode

isInfluence:
mov byte ptr [bTypeFlag],48
mov [fInfluence],ecx
popad
mov [pInfluence],ecx
jmp originalcode

isBeds:
mov byte ptr [bTypeFlag],54
mov [fBeds],ecx
popad
mov [pBeds],ecx
jmp originalcode

isUnknown:
popad
jmp resetFlag
jmp originalcode

resetFlag:
mov byte ptr [bTypeFlag],0
jmp originalcode

originalcode:
popfd
mov ecx,[ecx+08]
mov eax,ecx

exit:
jmp returnhere

///
pMedicine:
dd 0
fMedicine:
dd 0
fDesiredMedicine:
dd (float)25.0

pFood:
dd 0
fFood:
dd 0
fDesiredFood:
dd (float)25.0

pAmmunition:
dd 0
fAmmunition:
dd 0
fDesiredAmmunition:
dd (float)25.0

pMaterial:
dd 0
fMaterial:
dd 0
fDesiredMaterial:
dd (float)50.0

pFuel:
dd 0
fFuel:
dd 0
fDesiredFuel:
dd (float)25.0

pInfluence:
dd 0
fInfluence:
dd 0
fDesiredInfluence:
dd (float)200.0

pBeds:
dd 0
fBeds:
dd 0
fDesiredBeds:
dd (float)25.0

bTypeFlag:
db 0
///

decryption1AOB: //"StateOfDecay.exe"+FF3A31:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
decryption1AOB: //"StateOfDecay.exe"+FF3A31:
mov ecx,[ecx+08]
mov eax,ecx
//Alt: db 8B 49 08 8B C1
//unregistersymbol(decryption1AOB)
unregistersymbol(pMedicine)
unregistersymbol(fMedicine)
unregistersymbol(fDesiredMedicine)
unregistersymbol(pFood)
unregistersymbol(fFood)
unregistersymbol(fDesiredFood)
unregistersymbol(pAmmunition)
unregistersymbol(fAmmunition)
unregistersymbol(fDesiredAmmunition)
unregistersymbol(pMaterial)
unregistersymbol(fMaterial)
unregistersymbol(fDesiredMaterial)
unregistersymbol(pFuel)
unregistersymbol(fFuel)
unregistersymbol(fDesiredFuel)
unregistersymbol(pInfluence)
unregistersymbol(fInfluence)
unregistersymbol(fDesiredInfluence)
unregistersymbol(pBeds)
unregistersymbol(fBeds)
unregistersymbol(fDesiredBeds)
unregistersymbol(bTypeFlag)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>55</ID>
                  <Description>"Minimum Desired Value"</Description>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(decryption2aAOB,51 ** ** ** ** ** 8B D1 81 E2 22 22 22 22 D1 E8)
registersymbol(decryption2aAOB)

label(fDesiredValue)
registersymbol(fDesiredValue)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isMedicine)
label(isFood)
label(isAmmunition)
label(isMaterial)
label(isFuel)
label(isInfluence)
label(isBeds)
label(doEncryption)
label(resetEBX)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
/*cmp ebx,0
jne originalcode
cmp edi,0C
je isMedicine
cmp edi,18
je isFood
cmp edi,24
je isAmmunition
cmp edi,30
je isMaterial
cmp edi,3C
je isFuel
cmp edi,48
je isInfluence
cmp edi,54
je isBeds*/
cmp byte ptr [bTypeFlag],0C
je isMedicine
cmp byte ptr [bTypeFlag],18
je isFood
cmp byte ptr [bTypeFlag],24
je isAmmunition
cmp byte ptr [bTypeFlag],30
je isMaterial
cmp byte ptr [bTypeFlag],3C
je isFuel
cmp byte ptr [bTypeFlag],48
je isInfluence
cmp byte ptr [bTypeFlag],54
je isBeds
jmp originalcode

isMedicine:
mov ebx,[fDesiredMedicine]
cmp [fMedicine],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pMedicine]
jmp doEncryption

isFood:
mov ebx,[fDesiredFood]
cmp [fFood],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pFood]
jmp doEncryption

isAmmunition:
mov ebx,[fDesiredAmmunition]
cmp [fAmmunition],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pAmmunition]
jmp doEncryption

isMaterial:
mov ebx,[fDesiredMaterial]
cmp [fMaterial],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pMaterial]
jmp doEncryption

isFuel:
mov ebx,[fDesiredFuel]
cmp [fFuel],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pFuel]
jmp doEncryption

isInfluence:
mov ebx,[fDesiredInfluence]
cmp [fInfluence],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pInfluence]
jmp doEncryption

isBeds:
mov ebx,[fDesiredBeds]
cmp [fBeds],ebx
jge resetEBX

mov [fDesiredValue],ebx
mov ebx,[pBeds]
jmp doEncryption

doEncryption:
pushad

mov eax,[decryption1AOB+80]
mov edx,[eax] //[StateOfDecay.exe+1A41F90]
mov eax,[decryption1AOB+86]
xor edx,[eax] //[StateOfDecay.exe+1A42CB0]
push esi
xor edx,[fDesiredValue]
mov eax,edx
mov esi,edx
and esi,0000FF00
shr eax,08
shl esi,08
and edx,FF0000FF
and eax,0000FF00
or eax,esi
or eax,edx
mov edx,eax
mov esi,eax
shr edx,04
and esi,00F000F0 //StateOfDecay.exe+B000F0
shl esi,04
and edx,00F000F0 //StateOfDecay.exe+B000F0
or edx,esi
and eax,F00FF00F
or edx,eax
mov esi,edx
mov eax,edx
and esi,0C0C0C0C
add esi,esi
shr eax,02
add esi,esi
and edx,C3C3C3C3
and eax,0C0C0C0C
or eax,esi
or eax,edx
mov edx,eax
mov esi,eax
shr edx,1
and esi,22222222
and edx,22222222
add esi,esi
or edx,esi
and eax,99999999
or edx,eax
mov [ebx+08],edx
pop esi

popad

resetEBX:
mov ebx,0

jmp originalcode

originalcode:
popfd
mov byte ptr [bTypeFlag],00
mov edx,ecx
and edx,22222222

exit:
jmp returnhere

///
fDesiredValue:
dd 0
///

decryption2aAOB+6: //"StateOfDecay.exe"+FF3A36:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
decryption2aAOB+6: //"StateOfDecay.exe"+FF3A36:
db 8B D1 81 E2 22 22 22 22
//Alt: mov edx,ecx
//Alt: and edx,22222222
unregistersymbol(decryption2aAOB)
unregistersymbol(fDesiredValue)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>75</ID>
                  <Description>"Lock at Desired Value"</Description>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(decryption2bAOB,51 ** ** ** ** ** 8B D1 81 E2 22 22 22 22 D1 E8)
registersymbol(decryption2bAOB)

label(fDesiredValue)
registersymbol(fDesiredValue)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isMedicine)
label(isFood)
label(isAmmunition)
label(isMaterial)
label(isFuel)
label(isInfluence)
label(isBeds)
label(doEncryption)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
/*cmp ebx,0
jne originalcode
cmp edi,0C
je isMedicine
cmp edi,18
je isFood
cmp edi,24
je isAmmunition
cmp edi,30
je isMaterial
cmp edi,3C
je isFuel
cmp edi,48
je isInfluence
cmp edi,54
je isBeds*/
cmp byte ptr [bTypeFlag],0C
je isMedicine
cmp byte ptr [bTypeFlag],18
je isFood
cmp byte ptr [bTypeFlag],24
je isAmmunition
cmp byte ptr [bTypeFlag],30
je isMaterial
cmp byte ptr [bTypeFlag],3C
je isFuel
cmp byte ptr [bTypeFlag],48
je isInfluence
cmp byte ptr [bTypeFlag],54
je isBeds
jmp originalcode

isMedicine:
mov ebx,[fDesiredMedicine]
mov [fDesiredValue],ebx
mov ebx,[pMedicine]
jmp doEncryption

isFood:
mov ebx,[fDesiredFood]
mov [fDesiredValue],ebx
mov ebx,[pFood]
jmp doEncryption

isAmmunition:
mov ebx,[fDesiredAmmunition]
mov [fDesiredValue],ebx
mov ebx,[pAmmunition]
jmp doEncryption

isMaterial:
mov ebx,[fDesiredMaterial]
mov [fDesiredValue],ebx
mov ebx,[pMaterial]
jmp doEncryption

isFuel:
mov ebx,[fDesiredFuel]
mov [fDesiredValue],ebx
mov ebx,[pFuel]
jmp doEncryption

isInfluence:
mov ebx,[fDesiredInfluence]
mov [fDesiredValue],ebx
mov ebx,[pInfluence]
jmp doEncryption

isBeds:
mov ebx,[fDesiredBeds]
mov [fDesiredValue],ebx
mov ebx,[pBeds]
jmp doEncryption

doEncryption:
pushad

mov eax,[decryption1AOB+80]
mov edx,[eax] //[StateOfDecay.exe+1A41F90]
mov eax,[decryption1AOB+86]
xor edx,[eax] //[StateOfDecay.exe+1A42CB0]
push esi
xor edx,[fDesiredValue]
mov eax,edx
mov esi,edx
and esi,0000FF00
shr eax,08
shl esi,08
and edx,FF0000FF
and eax,0000FF00
or eax,esi
or eax,edx
mov edx,eax
mov esi,eax
shr edx,04
and esi,00F000F0 //StateOfDecay.exe+B000F0
shl esi,04
and edx,00F000F0 //StateOfDecay.exe+B000F0
or edx,esi
and eax,F00FF00F
or edx,eax
mov esi,edx
mov eax,edx
and esi,0C0C0C0C
add esi,esi
shr eax,02
add esi,esi
and edx,C3C3C3C3
and eax,0C0C0C0C
or eax,esi
or eax,edx
mov edx,eax
mov esi,eax
shr edx,1
and esi,22222222
and edx,22222222
add esi,esi
or edx,esi
and eax,99999999
or edx,eax
mov [ebx+08],edx
pop esi

popad
mov ebx,0

jmp originalcode

originalcode:
popfd
mov byte ptr [bTypeFlag],00
mov edx,ecx
and edx,22222222

exit:
jmp returnhere

///
fDesiredValue:
dd 0
///

decryption2bAOB+6: //"StateOfDecay.exe"+FF3A36:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
decryption2bAOB+6: //"StateOfDecay.exe"+FF3A36:
db 8B D1 81 E2 22 22 22 22
//Alt: mov edx,ecx
//Alt: and edx,22222222
unregistersymbol(decryption2bAOB)
unregistersymbol(fDesiredValue)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>45</ID>
                  <Description>"Cases of Medicine"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fMedicine</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>51</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pMedicine</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>68</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredMedicine</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>66</ID>
                  <Description>"Daily Rations of Food"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fFood</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>67</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pFood</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>70</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredFood</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>64</ID>
                  <Description>"Cases of Ammunition"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fAmmunition</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>65</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pAmmunition</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>71</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredAmmunition</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>62</ID>
                  <Description>"Construction Material"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fMaterial</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>63</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pMaterial</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>72</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredMaterial</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>60</ID>
                  <Description>"Barrels of Fuel"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fFuel</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>61</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pFuel</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>73</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredFuel</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>58</ID>
                  <Description>"Influence"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>fInfluence</Address>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>59</ID>
                      <Description>"actual address &amp; value"</Description>
                      <ShowAsHex>1</ShowAsHex>
                      <Color>80000008</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>pInfluence</Address>
                      <Offsets>
                        <Offset>8</Offset>
                      </Offsets>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>69</ID>
                      <Description>"Desired Value"</Description>
                      <Color>80000008</Color>
                      <VariableType>Float</VariableType>
                      <Address>fDesiredInfluence</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"[pointers]"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>27</ID>
              <Description>"Health"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>A4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"Stamina"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>AC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>29</ID>
              <Description>"Ammo Pouch"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAmmoPouch</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>30</ID>
              <Description>"Ammo Clip"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAmmoClip</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>138</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>84</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>13A</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>85</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>13C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>86</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>13E</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>87</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>140</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>88</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>142</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>89</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>144</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>90</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>146</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>91</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>148</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>92</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>14A</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>93</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>14C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>94</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>14E</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>95</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>150</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>96</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>152</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>97</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>154</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>98</ID>
              <Description>"Skills"</Description>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>pplayer</Address>
              <Offsets>
                <Offset>156</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"-------------------------------------------------"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>74</ID>
          <Description>"Influence &amp; Stockpiles v1"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(pMedicine)
registersymbol(pMedicine)
label(fMedicine)
registersymbol(fMedicine)
label(fDesiredMedicine)
registersymbol(fDesiredMedicine)

label(pFood)
registersymbol(pFood)
label(fFood)
registersymbol(fFood)
label(fDesiredFood)
registersymbol(fDesiredFood)

label(pAmmunition)
registersymbol(pAmmunition)
label(fAmmunition)
registersymbol(fAmmunition)
label(fDesiredAmmunition)
registersymbol(fDesiredAmmunition)

label(pMaterial)
registersymbol(pMaterial)
label(fMaterial)
registersymbol(fMaterial)
label(fDesiredMaterial)
registersymbol(fDesiredMaterial)

label(pFuel)
registersymbol(pFuel)
label(fFuel)
registersymbol(fFuel)
label(fDesiredFuel)
registersymbol(fDesiredFuel)

label(pInfluence)
registersymbol(pInfluence)
label(fInfluence)
registersymbol(fInfluence)
label(fDesiredInfluence)
registersymbol(fDesiredInfluence)

label(pBeds)
registersymbol(pBeds)
label(fBeds)
registersymbol(fBeds)
label(fDesiredBeds)
registersymbol(fDesiredBeds)

label(bTypeFlag)
registersymbol(bTypeFlag)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(doDecryption)
label(isMedicine)
label(isFood)
label(isAmmunition)
label(isMaterial)
label(isFuel)
label(isInfluence)
label(isBeds)
label(isUnknown)
label(resetFlag)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp ebx,0
jne resetFlag

cmp edi,0C
je doDecryption
cmp edi,18
je doDecryption
cmp edi,24
je doDecryption
cmp edi,30
je doDecryption
cmp edi,3C
je doDecryption
cmp edi,48
je doDecryption
cmp edi,54
je doDecryption
jmp resetFlag

doDecryption:

pushad

mov ecx,[ecx+08]
mov eax,ecx

mov edx,ecx
and edx,22222222
shr eax,1
add edx,edx
and ecx,99999999
and eax,22222222
or eax,edx
or eax,ecx
mov edx,eax
and edx,0C0C0C0C
mov ecx,eax
shr ecx,02
and ecx,0C0C0C0C
add edx,edx
add edx,edx
or ecx,edx
and eax,C3C3C3C3
or ecx,eax
mov eax,ecx
mov edx,ecx
shr eax,04
and edx,00F000F0 //StateOfDecay.exe+B000F0
and ecx,F00FF00F
shl edx,04
and eax,00F000F0 //StateOfDecay.exe+B000F0
or eax,edx
or eax,ecx
mov ecx,eax
shr ecx,08
mov edx,eax
and ecx,0000FF00
and edx,0000FF00
shl edx,08
or ecx,edx
and eax,FF0000FF
or ecx,eax
xor ecx,[StateOfDecay.exe+1A41F90]
xor ecx,[StateOfDecay.exe+1A42CB0]

cmp edi,0C
je isMedicine
cmp edi,18
je isFood
cmp edi,24
je isAmmunition
cmp edi,30
je isMaterial
cmp edi,3C
je isFuel
cmp edi,48
je isInfluence
cmp edi,54
je isBeds
jmp isUnknown

isMedicine:
mov byte ptr [bTypeFlag],0C
mov [fMedicine],ecx
popad
mov [pMedicine],ecx
jmp originalcode

isFood:
mov byte ptr [bTypeFlag],18
mov [fFood],ecx
popad
mov [pFood],ecx
jmp originalcode

isAmmunition:
mov byte ptr [bTypeFlag],24
mov [fAmmunition],ecx
popad
mov [pAmmunition],ecx
jmp originalcode

isMaterial:
mov byte ptr [bTypeFlag],30
mov [fMaterial],ecx
popad
mov [pMaterial],ecx
jmp originalcode

isFuel:
mov byte ptr [bTypeFlag],3C
mov [fFuel],ecx
popad
mov [pFuel],ecx
jmp originalcode

isInfluence:
mov byte ptr [bTypeFlag],48
mov [fInfluence],ecx
popad
mov [pInfluence],ecx
jmp originalcode

isBeds:
mov byte ptr [bTypeFlag],54
mov [fBeds],ecx
popad
mov [pBeds],ecx
jmp originalcode

isUnknown:
popad
jmp resetFlag
jmp originalcode

resetFlag:
mov byte ptr [bTypeFlag],0
jmp originalcode

originalcode:
popfd
mov ecx,[ecx+08]
mov eax,ecx

exit:
jmp returnhere

///
pMedicine:
dd 0
fMedicine:
dd 0
fDesiredMedicine:
dd (float)25.0

pFood:
dd 0
fFood:
dd 0
fDesiredFood:
dd (float)25.0

pAmmunition:
dd 0
fAmmunition:
dd 0
fDesiredAmmunition:
dd (float)25.0

pMaterial:
dd 0
fMaterial:
dd 0
fDesiredMaterial:
dd (float)50.0

pFuel:
dd 0
fFuel:
dd 0
fDesiredFuel:
dd (float)25.0

pInfluence:
dd 0
fInfluence:
dd 0
fDesiredInfluence:
dd (float)200.0

pBeds:
dd 0
fBeds:
dd 0
fDesiredBeds:
dd (float)25.0

bTypeFlag:
db 0
///

"StateOfDecay.exe"+FF3A31:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"StateOfDecay.exe"+FF3A31:
mov ecx,[ecx+08]
mov eax,ecx
//Alt: db 8B 49 08 8B C1
unregistersymbol(pMedicine)
unregistersymbol(fMedicine)
unregistersymbol(fDesiredMedicine)
unregistersymbol(pFood)
unregistersymbol(fFood)
unregistersymbol(fDesiredFood)
unregistersymbol(pAmmunition)
unregistersymbol(fAmmunition)
unregistersymbol(fDesiredAmmunition)
unregistersymbol(pMaterial)
unregistersymbol(fMaterial)
unregistersymbol(fDesiredMaterial)
unregistersymbol(pFuel)
unregistersymbol(fFuel)
unregistersymbol(fDesiredFuel)
unregistersymbol(pInfluence)
unregistersymbol(fInfluence)
unregistersymbol(fDesiredInfluence)
unregistersymbol(pBeds)
unregistersymbol(fBeds)
unregistersymbol(fDesiredBeds)
unregistersymbol(bTypeFlag)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"Hum"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(pInfluence)
registersymbol(pInfluence)
label(fInfluence)
registersymbol(fInfluence)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isInfluence)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp ebx,0
jne originalcode
cmp edi,48
je isInfluence
jmp originalcode

isInfluence:
mov [pInfluence],ecx

pushad

mov ecx,[ecx+08]
mov eax,ecx

mov edx,ecx
and edx,22222222
shr eax,1
add edx,edx
and ecx,99999999
and eax,22222222
or eax,edx
or eax,ecx
mov edx,eax
and edx,0C0C0C0C
mov ecx,eax
shr ecx,02
and ecx,0C0C0C0C
add edx,edx
add edx,edx
or ecx,edx
and eax,C3C3C3C3
or ecx,eax
mov eax,ecx
mov edx,ecx
shr eax,04
and edx,00F000F0 //StateOfDecay.exe+B000F0
and ecx,F00FF00F
shl edx,04
and eax,00F000F0 //StateOfDecay.exe+B000F0
or eax,edx
or eax,ecx
mov ecx,eax
shr ecx,08
mov edx,eax
and ecx,0000FF00
and edx,0000FF00
shl edx,08
or ecx,edx
and eax,FF0000FF
or ecx,eax
xor ecx,[StateOfDecay.exe+1A41F90]
xor ecx,[StateOfDecay.exe+1A42CB0]

mov [fInfluence],ecx

popad

jmp originalcode

originalcode:
popfd
mov ecx,[ecx+08]
mov eax,ecx

exit:
jmp returnhere

///
pInfluence:
dd 0
fInfluence:
dd 0
///

"StateOfDecay.exe"+FF3A31:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"StateOfDecay.exe"+FF3A31:
mov ecx,[ecx+08]
mov eax,ecx
//Alt: db 8B 49 08 8B C1
unregistersymbol(pInfluence)
unregistersymbol(fInfluence)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Influence"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fInfluence</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>54</ID>
                  <Description>"actual address &amp; value"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pInfluence</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Health &amp; Stamina script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminareadAOB,D9 86 AC 00 00 00 D9 1C 24)
registersymbol(staminareadAOB)

label(pPlayer)
registersymbol(pPlayer)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pPlayer],esi

originalcode:
fld dword ptr [esi+000000AC]

exit:
jmp returnhere

///
pPlayer:
dd 0
///

staminareadAOB: //"StateOfDecay.exe"+11232B9:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminareadAOB: //"StateOfDecay.exe"+11232B9:
db D9 86 AC 00 00 00
//Alt: fld dword ptr [esi+000000AC]
unregistersymbol(staminareadAOB)
unregistersymbol(pPlayer)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Undead"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthwriteAOB,F3 0F 11 81 A4 00 00 00 F3 0F 10 44 24 08)
registersymbol(healthwriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movss [ecx+000000A4],xmm0
cmp [pPlayer],ecx
jne originalcode
cmp dword ptr [ecx+000000A4],(float)1.0
jge originalcode
mov dword ptr [ecx+000000A4],(float)1.0

originalcode:
//movss [ecx+000000A4],xmm0

exit:
jmp returnhere

healthwriteAOB: //"StateOfDecay.exe"+1121DF0:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthwriteAOB: //"StateOfDecay.exe"+1121DF0:
db F3 0F 11 81 A4 00 00 00
//Alt: movss [ecx+000000A4],xmm0
unregistersymbol(healthwriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>18</ID>
              <Description>"Inf. Stamina"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminawriteAOB,F3 0F 11 80 AC 00 00 00 F3 0F 10 44 24 08 F3 0F 11 80 B0 00 00 00 C3)
registersymbol(staminawriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pPlayer],eax
jne originalcode
push ebx
mov ebx,[esp+08]
cmp [eax+000000AC],ebx
pop ebx
jle originalcode
movss xmm0,[eax+000000AC]

originalcode:
movss [eax+000000AC],xmm0

exit:
jmp returnhere

staminawriteAOB: //"StateOfDecay.exe"+11137EF:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminawriteAOB: //"StateOfDecay.exe"+11137EF:
db F3 0F 11 80 AC 00 00 00
//Alt: movss [eax+000000AC],xmm0
unregistersymbol(staminawriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>17</ID>
              <Description>"Health"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>A4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Stamina"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>AC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp edi,48
jne originalcode
popfd
movzx eax,word ptr [esp+18]
jmp exit

originalcode:
popfd
movzx eax,word ptr [esp+18]

exit:
jmp returnhere

"StateOfDecay.exe"+10652BE:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"StateOfDecay.exe"+10652BE:
db 0F B7 44 24 18
//Alt: movzx eax,word ptr [esp+18]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp ebx,0
jne originalcode
cmp edi,30
jne originalcode
popfd
push eax
call StateOfDecay.exe+FF3FE0
jmp exit

originalcode:
popfd
push eax
call StateOfDecay.exe+FF3FE0

exit:
jmp returnhere

"StateOfDecay.exe"+10652DE:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"StateOfDecay.exe"+10652DE:
db 50 E8 FC EC F8 FF
//Alt: push eax
//Alt: call StateOfDecay.exe+FF3FE0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp ecx,1655b24c
jne originalcode
popfd
mov edx,[StateOfDecay.exe+1A41F90]
jmp exit

originalcode:
popfd
mov edx,[StateOfDecay.exe+1A41F90]

exit:
jmp returnhere

"StateOfDecay.exe"+FF3B80:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"StateOfDecay.exe"+FF3B80:
db 8B 15 90 1F E4 01
//Alt: mov edx,[StateOfDecay.exe+1A41F90]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Ammo Pouch script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(ammopouchreadAOB,8B 44 24 04 3B 46 34 5E 74 07 8B 40 10 59 C2 04)
registersymbol(ammopouchreadAOB)

label(pAmmoPouch)
registersymbol(pAmmoPouch)
label(bInfAmmoPouch)
registersymbol(bInfAmmoPouch)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoPouch],eax
cmp byte ptr [bInfAmmoPouch],1
jne originalcode
cmp [eax+10],#10
jge originalcode
mov [eax+10],#10

originalcode:
mov eax,[eax+10]
pop ecx
ret 0004

exit:
jmp returnhere

///
pAmmoPouch:
dd 0
bInfAmmoPouch:
db 0
///

ammopouchreadAOB+a: //"StateOfDecay.exe"+372EE0:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammopouchreadAOB+a: //"StateOfDecay.exe"+372EE0:
db 8B 40 10 59 C2 04 00
//Alt: mov eax,[eax+10]
//Alt: pop ecx
//Alt: ret 0004
unregistersymbol(ammopouchreadAOB)
unregistersymbol(pAmmoPouch)
unregistersymbol(bInfAmmoPouch)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Inf. Ammo Pouch"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInfAmmoPouch:
db 01

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInfAmmoPouch:
db 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"pAmmoPouch"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAmmoPouch</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Ammo Clip script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(ammoclipreadAOB,8B 44 24 04 3B 46 58 5E 74 07 8B 40 10)
registersymbol(ammoclipreadAOB)

label(pAmmoClip)
registersymbol(pAmmoClip)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pAmmoClip],eax

originalcode:
mov eax,[eax+10]
pop ecx
ret 0004

exit:
jmp returnhere

///
pAmmoClip:
dd 0
///

ammoclipreadAOB+a: //"StateOfDecay.exe"+1246640:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammoclipreadAOB+a: //"StateOfDecay.exe"+1246640:
db 8B 40 10 59 C2 04 00
//Alt: mov eax,[eax+10]
//Alt: pop ecx
//Alt: ret 0004
unregistersymbol(ammoclipreadAOB)
unregistersymbol(pAmmoClip)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Inf. Ammo Clip"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(ammoclipwriteAOB,8B 44 24 0C 3B 43 58 74 09 8B 54 24 34 89 50 10)
registersymbol(ammoclipwriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,[esp+34]

cmp [pAmmoClip],eax
jne originalcode
cmp edx,1
jge originalcode
mov edx,1

originalcode:
//mov edx,[esp+34]
mov [eax+10],edx

exit:
jmp returnhere

ammoclipwriteAOB+9: //"StateOfDecay.exe"+12485AF:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammoclipwriteAOB+9: //"StateOfDecay.exe"+12485AF:
db 8B 54 24 34 89 50 10
//Alt: mov edx,[esp+34]
//Alt: mov [eax+10],edx
unregistersymbol(ammoclipwriteAOB)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2</ID>
              <Description>"pAmmoClip"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAmmoClip</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>StateOfDecay.exe+1539E68</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>StateOfDecay.exe+1539F08</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"No description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>03123b50</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>0D5AE2E0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>154A136C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>154A1374</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"No description"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>1655b254</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>16EA1404</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>1AD87CB0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>1AD87CEC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>24BDF470</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>24DE8F68</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>28370494</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>28436220</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>2ABDB614</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>2E8EBC14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>2EBD8D34</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>2EC107D4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>ammo clip read Code :mov eax,[eax+10]</Description>
      <Address>01646640</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>1246640</ModuleNameOffset>
      <Before>
        <Byte>46</Byte>
        <Byte>58</Byte>
        <Byte>5E</Byte>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>59</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo clip +- Code :mov [eax+10],edx</Description>
      <Address>016485B3</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>12485B3</ModuleNameOffset>
      <Before>
        <Byte>09</Byte>
        <Byte>8B</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>34</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>50</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>29</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch read Code :mov eax,[eax+10]</Description>
      <Address>00772EE0</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>372EE0</ModuleNameOffset>
      <Before>
        <Byte>46</Byte>
        <Byte>34</Byte>
        <Byte>5E</Byte>
        <Byte>74</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>59</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>33</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo pouch +- Code :mov [eax],esi</Description>
      <Address>00776B16</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>376B16</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>4A</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>0F</Byte>
        <Byte>8D</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina +- Code :movss [eax+000000AC],xmm0</Description>
      <Address>015137EF</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>11137EF</ModuleNameOffset>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina read 01 Code :fld dword ptr [esi+000000AC]</Description>
      <Address>015232B9</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>11232B9</ModuleNameOffset>
      <Before>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>CF</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>86</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>1C</Byte>
        <Byte>24</Byte>
        <Byte>E8</Byte>
        <Byte>59</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stamina read 02 Code :fld dword ptr [ebp+000000AC]</Description>
      <Address>01525C49</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>1125C49</ModuleNameOffset>
      <Before>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>85</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>1C</Byte>
        <Byte>24</Byte>
        <Byte>E8</Byte>
        <Byte>C9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health +- Code :movss [ecx+000000A4],xmm0</Description>
      <Address>01521DF0</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>1121DF0</ModuleNameOffset>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>A4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>after encrption Code :mov ecx,[ecx+08]</Description>
      <Address>013F3A31</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>FF3A31</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>51</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>49</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>C1</Byte>
        <Byte>8B</Byte>
        <Byte>D1</Byte>
        <Byte>81</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>after decription Code :movss [ecx+08],xmm0</Description>
      <Address>013F3C16</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>FF3C16</ModuleNameOffset>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>41</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>check if proper decrypted Code :cmp [edi+StateOfDecay.exe+1539E20],eax</Description>
      <Address>014652E7</Address>
      <ModuleName>StateOfDecay.exe</ModuleName>
      <ModuleNameOffset>10652E7</ModuleNameOffset>
      <Before>
        <Byte>F8</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>39</Byte>
        <Byte>87</Byte>
        <Byte>20</Byte>
        <Byte>9E</Byte>
        <Byte>93</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>74</Byte>
        <Byte>0B</Byte>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>decryption2aAOB</Name>
      <Address>013F3A30</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthwriteAOB</Name>
      <Address>01521DF0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>staminareadAOB</Name>
      <Address> 015232B9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ammoclipreadAOB</Name>
      <Address> 01646636</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ammopouchreadAOB</Name>
      <Address> 00772ED6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>decryption1AOB</Name>
      <Address> 013F3A31</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>0A3A0053</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoClip</Name>
      <Address>0A3A0057</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoPouch</Name>
      <Address>0A3A005B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInfAmmoPouch</Name>
      <Address>0A3A005F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ammoclipwriteAOB</Name>
      <Address> 016485A6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>decryption2bAOB</Name>
      <Address> 013F3A30</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fDesiredValue</Name>
      <Address>0F9301B7</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>http://forum.cheatengine.org/viewtopic.php?t=568361#5497487
</Comments>
</CheatTable>
