<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>63109</ID>
      <Description>"Life Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(life_basepointer)
registersymbol(lifeupdate_enable)
registersymbol(lifeset_enable)

alloc(life_basepointer,4)
alloc(lifeupdate_enable,4)
alloc(lifeset_enable,4)


[DISABLE]

unregistersymbol(life_basepointer)
unregistersymbol(lifeupdate_enable)
unregistersymbol(lifeset_enable)

dealloc(life_basepointer)
dealloc(lifeupdate_enable)
dealloc(lifeset_enable)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63110</ID>
          <Description>"Life Base Address Scan (To Activate: Battle, To Update: Battle)"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(life_savedAOB)
label(life_returnhere)
label(life_originalcode)
label(life_exit)

label(lifeupdate_exit)
label(lifeset_exit)

registersymbol(life_savedAOB)

aobscan(searchedAOB,DB 40 04 D9 9D E4 AE FF FF D9 85 E4 AE FF FF 8B 85 D8 AF FF FF 8B 80 28 07 00 00 DB 40 08 D9 9D E4 AE FF FF D9 85 E4 AE FF FF DE F9 83 EC 04 D9 1C 24 * * * * * D9 9D 3C CC FF FF)

alloc(life_newmem,2048) //2kb should be enough


life_newmem:
cmp dword ptr [lifeupdate_enable], #0
je lifeupdate_exit
mov [life_basepointer], eax
lifeupdate_exit:

cmp dword ptr [lifeset_enable], #0
je lifeset_exit
mov [eax+4], #10
lifeset_exit:


life_originalcode:
db DB 40 04 D9 9D E4 AE FF FF
//fild dword ptr [eax+04]
//fstp dword ptr [ebp-0000511C]


life_exit:
jmp life_returnhere


searchedAOB:
life_savedAOB:
jmp life_newmem
nop
nop
nop
nop
life_returnhere:


[DISABLE]
life_savedAOB:
db DB 40 04 D9 9D E4 AE FF FF
//fild dword ptr [eax+04]
//fstp dword ptr [ebp-0000511C]

unregistersymbol(life_savedAOB)

dealloc(life_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63111</ID>
          <Description>"Life Set to 10? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>lifeset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63112</ID>
          <Description>"Life Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>lifeupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63115</ID>
          <Description>"Life"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>life_basepointer</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>63116</ID>
          <Description>"Max Life"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>life_basepointer</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>63142</ID>
      <Description>"Speed Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(speed_basepointer)
registersymbol(speedupdate_enable)
registersymbol(speedset_enable)
registersymbol(speed_value)

alloc(speed_basepointer,4)
alloc(speedupdate_enable,4)
alloc(speedset_enable,4)
alloc(speedset_enable,4)
alloc(speed_value,4)

speed_value:
dd (float)0.1


[DISABLE]

unregistersymbol(speed_basepointer)
unregistersymbol(speedupdate_enable)
unregistersymbol(speedset_enable)
unregistersymbol(speed_value)

dealloc(speed_basepointer)
dealloc(speedupdate_enable)
dealloc(speedset_enable)
dealloc(speed_value)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63143</ID>
          <Description>"Speed Base Address Scan (To Activate: Battle, To Update: Battle)"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(speed_savedAOB)
label(speed_returnhere)
label(speed_originalcode)
label(speed_exit)

label(speedupdate_exit)
label(speedset_exit)

registersymbol(speed_savedAOB)

aobscan(searchedAOB,D8 4C 90 08 8B 85 7C FF FF FF D9 58 58)

alloc(speed_newmem,2048) //2kb should be enough
alloc(speed_temp,4)

speed_newmem:
mov [speed_temp], ebx
lea ebx, [eax+edx*4+08]

cmp dword ptr [speedupdate_enable], #0
je speedupdate_exit
mov [speed_basepointer], ebx
speedupdate_exit:

cmp dword ptr [speedset_enable], #0
je speedset_exit
fld [speed_value]
fst [ebx]
fst [ebx+4]
fstp [ebx+8]
speedset_exit:

mov ebx, [speed_temp]


speed_originalcode:
db D8 4C 90 08 8B 85 7C FF FF FF
//fmul dword ptr [eax+edx*4+08]
//mov eax,[ebp-00000084]


speed_exit:
jmp speed_returnhere


searchedAOB:
speed_savedAOB:
jmp speed_newmem
nop
nop
nop
nop
nop
speed_returnhere:


[DISABLE]
speed_savedAOB:
db D8 4C 90 08 8B 85 7C FF FF FF
//fmul dword ptr [eax+edx*4+08]
//mov eax,[ebp-00000084]

unregistersymbol(speed_savedAOB)

dealloc(speed_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63144</ID>
          <Description>"Speed Set to Speed Value? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>speedset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63145</ID>
          <Description>"Speed Value"</Description>
          <Color>FF8000</Color>
          <VariableType>Float</VariableType>
          <Address>speed_value</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63146</ID>
          <Description>"Speed Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>speedupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63147</ID>
          <Description>"Speed"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>speed_basepointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>63148</ID>
      <Description>"Final Speed Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(finalspeed_basepointer)
registersymbol(finalspeedupdate_enable)
registersymbol(finalspeedset_enable)
registersymbol(finalspeed_value)

alloc(finalspeed_basepointer,4)
alloc(finalspeedupdate_enable,4)
alloc(finalspeedset_enable,4)
alloc(finalspeedset_enable,4)
alloc(finalspeed_value,4)

finalspeed_value:
dd (float)0.1


[DISABLE]

unregistersymbol(finalspeed_basepointer)
unregistersymbol(finalspeedupdate_enable)
unregistersymbol(finalspeedset_enable)
unregistersymbol(finalspeed_value)

dealloc(finalspeed_basepointer)
dealloc(finalspeedupdate_enable)
dealloc(finalspeedset_enable)
dealloc(finalspeed_value)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63149</ID>
          <Description>"Final Speed Base Address Scan (To Activate: Battle, To Update: Battle)"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(finalspeed_savedAOB)
label(finalspeed_returnhere)
label(finalspeed_originalcode)
label(finalspeed_exit)

label(finalspeedupdate_exit)
label(finalspeedset_exit)

registersymbol(finalspeed_savedAOB)

aobscan(searchedAOB,D9 40 58 8B 85 68 FF FF FF D8 B0 10 0B 00 00 8B 85 38 FF FF FF D8 00 D9 18)

alloc(finalspeed_newmem,2048) //2kb should be enough

finalspeed_newmem:

cmp dword ptr [finalspeedupdate_enable], #0
je finalspeedupdate_exit
mov [finalspeed_basepointer], eax
finalspeedupdate_exit:

cmp dword ptr [finalspeedset_enable], #0
je finalspeedset_exit
fld [finalspeed_value]
fst [eax+58]
fst [eax+5c]
fstp [eax+60]
finalspeedset_exit:


finalspeed_originalcode:
db D9 40 58 8B 85 68 FF FF FF
//fld dword ptr [eax+58]
//mov eax,[ebp-00000098]


finalspeed_exit:
jmp finalspeed_returnhere


searchedAOB:
finalspeed_savedAOB:
jmp finalspeed_newmem
nop
nop
nop
nop
finalspeed_returnhere:


[DISABLE]
finalspeed_savedAOB:
db D9 40 58 8B 85 68 FF FF FF
//fld dword ptr [eax+58]
//mov eax,[ebp-00000098]

unregistersymbol(finalspeed_savedAOB)

dealloc(finalspeed_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63150</ID>
          <Description>"Final Speed Set to Final Speed Value? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>finalspeedset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63151</ID>
          <Description>"Final Speed Value"</Description>
          <Color>FF8000</Color>
          <VariableType>Float</VariableType>
          <Address>finalspeed_value</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63152</ID>
          <Description>"Final Speed Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>finalspeedupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63153</ID>
          <Description>"Final Speed"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>finalspeed_basepointer</Address>
          <Offsets>
            <Offset>58</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>63082</ID>
      <Description>"Missed Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(missed_basepointer)
registersymbol(missedupdate_enable)
registersymbol(missedset_enable)

alloc(missed_basepointer,4)
alloc(missedupdate_enable,4)
alloc(missedset_enable,4)


[DISABLE]

unregistersymbol(missed_basepointer)
unregistersymbol(missedupdate_enable)
unregistersymbol(missedset_enable)

dealloc(missed_basepointer)
dealloc(missedupdate_enable)
dealloc(missedset_enable)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63083</ID>
          <Description>"Missed Base Address Scan (To Activate: Miss, To Update: Miss)"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(missed_savedAOB)
label(missed_returnhere)
label(missed_originalcode)
label(missed_exit)

label(missedupdate_exit)
label(missedset_exit)

registersymbol(missed_savedAOB)

aobscan(searchedAOB,FF 40 10 33 D2 89 55 EC)

alloc(missed_newmem,2048) //2kb should be enough


missed_newmem:
cmp dword ptr [missedupdate_enable], #0
je missedupdate_exit
mov [missed_basepointer], eax
missedupdate_exit:

cmp dword ptr [missedset_enable], #0
je missedset_exit
mov [eax+10], #0
mov [eax+18], #0
missedset_exit:


missed_originalcode:
//db FF 40 10
//inc [eax+10]
db 33 D2
//xor edx,edx


missed_exit:
jmp missed_returnhere


searchedAOB:
missed_savedAOB:
jmp missed_newmem
missed_returnhere:


[DISABLE]
missed_savedAOB:
db FF 40 10 33 D2
//inc [eax+10]
//xor edx,edx

unregistersymbol(missed_savedAOB)

dealloc(missed_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63084</ID>
          <Description>"Missed and Perfect Set to 0? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>missedset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63085</ID>
          <Description>"Missed Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>missedupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63086</ID>
          <Description>"Missed"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>missed_basepointer</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>63102</ID>
          <Description>"Perfect (0 = Perfect)"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>missed_basepointer</Address>
          <Offsets>
            <Offset>18</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>63104</ID>
      <Description>"Score Base Address Scan Initialization (Activate This First)"</Description>
      <Options moHideChildren="1"/>
      <Color>800000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

registersymbol(score_basepointer)
registersymbol(scoreupdate_enable)
registersymbol(scoreset_enable)

alloc(score_basepointer,4)
alloc(scoreupdate_enable,4)
alloc(scoreset_enable,4)


[DISABLE]

unregistersymbol(score_basepointer)
unregistersymbol(scoreupdate_enable)
unregistersymbol(scoreset_enable)

dealloc(score_basepointer)
dealloc(scoreupdate_enable)
dealloc(scoreset_enable)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>63105</ID>
          <Description>"Score Base Address Scan (To Activate: Score, To Update: Score)"</Description>
          <Color>804000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(score_savedAOB)
label(score_returnhere)
label(score_originalcode)
label(score_exit)

label(scoreupdate_exit)
label(scoreset_exit)

registersymbol(score_savedAOB)

aobscan(searchedAOB,01 42 14 8B 45 E0 8B 80 20 07 00 00)

alloc(score_newmem,2048) //2kb should be enough


score_newmem:
cmp dword ptr [scoreupdate_enable], #0
je scoreupdate_exit
mov [score_basepointer], edx
scoreupdate_exit:

cmp dword ptr [scoreset_enable], #0
je scoreset_exit
mov eax, #9999999
scoreset_exit:


score_originalcode:
db 01 42 14 8B 45 E0
//add [edx+14],eax
//mov eax,[ebp-20]


score_exit:
jmp score_returnhere


searchedAOB:
score_savedAOB:
jmp score_newmem
nop
score_returnhere:


[DISABLE]
score_savedAOB:
db 01 42 14 8B 45 E0
//add [edx+14],eax
//mov eax,[ebp-20]

unregistersymbol(score_savedAOB)

dealloc(score_newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63106</ID>
          <Description>"Score Increase Set to 9999999? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>scoreset_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63107</ID>
          <Description>"Score Update Base Address? (0 = No, 1 = Yes)"</Description>
          <Color>FF8000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>scoreupdate_enable</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63108</ID>
          <Description>"Score"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>score_basepointer</Address>
          <Offsets>
            <Offset>14</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
