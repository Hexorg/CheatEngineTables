<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Patrician IV Rise of a Dynasty v2.0.4 Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Patrician IV - Rise of a Dynasty
 Game Version  : 2.0.4
 Script Version: 1.0
 CE Version    : 6.0
 GodMode, Money and Minimum Stock
 22-Aug-2012
 By Recifense
 Update by Dragonskull
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to running game version
// If false the script will not be loaded

assert(Patrician4_addon.exe+0c84BF,8b 7e 28 83 7f 08 00)
assert(Patrician4_addon.exe+045e0e,8b 46 48 8d 14 08)
assert(Patrician4_addon.exe+369250,89 82 b8 00 00 00)
assert(Patrician4_addon.exe+18819c,89 86 b8 00 00 00)
assert(Patrician4_addon.exe+3692ab,89 86 b8 00 00 00)
assert(Patrician4_addon.exe+041450,?? ?? 89 51 28)
assert(Patrician4_addon.exe+3642b9,3b 83 50 01 00 00)
assert(Patrician4_addon.exe+36427a,89 48 34 83 48 08 02)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_MonStorage)
label(_BackMS)
label(_MonMoney)
label(_BackMM)
label(_ExitMM)
label(_MonM0)
label(_MonMinStock)
label(_BackMMS)
label(_ExitMMS)
label(_MonMS0)
label(_MonMS1)
label(_MonMS2)
label(_MonMS3)
label(_MonMinStock1)
label(_BackMMS1)
label(_ExitMMS1)
label(_MonMS10)
label(_MonMS11)
label(_MonMS12)
label(_MonMS13)
label(_MonMinStock2)
label(_BackMMS2)
label(_ExitMMS2)
label(_MonMS20)
label(_MonMS21)
label(_MonMS22)
label(_MonMS23)
label(_MonHP)
label(_BackMH)
label(_ExitMH)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(pPlayer)
label(pStorage)
label(pStorageLoad)
label(pStorageLoad1)
label(iStorageID)
label(iMinMoney)
label(iEnableMM)
label(iEnableMMS)
label(iEnableMH)

registersymbol(MyCode)
registersymbol(pPlayer)
registersymbol(pStorage)
registersymbol(pStorageLoad)
registersymbol(pStorageLoad1)
registersymbol(iStorageID)
registersymbol(iMinMoney)
registersymbol(iEnableMM)
registersymbol(iEnableMMS)
registersymbol(iEnableMH)

//=========================================
MyCode:
//========================================= ok
_MonStorage:
 mov [pStorage],esi
 mov edi,[esi+10]
 mov [pPlayer],edi
 mov edi,[esi+28] 
 mov [pStorageLoad],edi
 mov edi,[edi+0c]
 mov [iStorageID],edi

 mov edi,[esi+28]               // Original code
 cmp dword ptr [edi+08],00      // Original code
 jmp _BackMS                    // Back to main code

//========================================= changed (OK)
_MonMoney:
 mov eax,[esi+48]               // Original code (*)

 cmp dword ptr [iEnableMM],0
 je _ExitMM                     // Jump if feature is disabled

 cmp eax,[iMinMoney]            // Current value &gt;= Minimum?
 jge _MonM0                     // Jump if true

 mov eax,[iMinMoney]            // Get minimum value

_MonM0:
 test ecx,ecx                   // Is it a negative number?
 jge _ExitMM                    // Jump if false
 
 mov ecx,0                      // make it 0

_ExitMM:
 lea edx,[ecx+eax]              // Original code (add it to ECX)
 jmp _BackMM                    // Back to main code

//========================================= ok
// Real Stock (on Adding)
_MonMinStock:
 push ebx
 push ecx

 mov [edx+000000B8],eax         // Original code (stock total)

 mov ebx,[edx+0c]
 cmp ebx,[iStorageID]
 jne _ExitMMS

 cmp dword ptr [iEnableMMS],0
 je _ExitMMS                    // Jump if feature is disabled

 mov ebx,#500                   // Minimum value
 mov ecx,#20                    // # of possible items

// Make all possible item quantity = 40 
_MonMS0:
 or ecx,ecx                     // Is it over?
 jz _MonMS1                     // Jump if true

 dec ecx                        // Adjust index
 
 mov [edx+ecx*4+18],ebx         // Update item quantity
 jmp _MonMS0

// Make all possible item avarage cost = 10.00
_MonMS1:
 mov ebx,(float)10.0            // Cost
 mov ecx,#20                    // # of possible items

_MonMS2:
 or ecx,ecx                     // Is it over?
 jz _MonMS3                     // Jump if true

 dec ecx                        // Adjust index
 
 mov [edx+ecx*4+68],ebx         // Update item avarage cost
 jmp _MonMS2

_MonMS3:
 mov ebx,#10000                 // Total in stock
 mov [edx+14],ebx
 mov [edx+000000b8],ebx

_ExitMMS:
 pop ecx
 pop ebx
 jmp _BackMMS                   // Back to main code

//========================================= ok
// Stock Copy
_MonMinStock1:
 push ebx
 push ecx
 
 mov [esi+000000b8],eax         // Original code (stock total)

 mov ebx,[esi+0c]
 cmp ebx,[iStorageID]
 jne _ExitMMS1

 mov [pStorageLoad1],esi

 cmp dword ptr [iEnableMMS],0
 je _ExitMMS1                   // Jump if feature is disabled

 mov ebx,#500                   // Minimum value
 mov ecx,#20                    // # of possible items

// Make all possible item quantity = 40 
_MonMS10:
 or ecx,ecx                     // Is it over?
 jz _MonMS11                    // Jump if true

 dec ecx                        // Adjust index
 
 mov [esi+ecx*4+18],ebx         // Update item quantity
 jmp _MonMS10

// Make all possible item avarage cost = 10.00
_MonMS11:
 mov ebx,(float)10.0            // Cost
 mov ecx,#20                    // # of possible items

_MonMS12:
 or ecx,ecx                     // Is it over?
 jz _MonMS13                    // Jump if true

 dec ecx                        // Adjust index
 
 mov [esi+ecx*4+68],ebx         // Update item avarage cost
 jmp _MonMS12

_MonMS13:
 mov ebx,#10000                 // Total in stock
 mov [esi+14],ebx
 mov [esi+000000b8],ebx

_ExitMMS1:
 pop ecx
 pop ebx
 jmp _BackMMS1                  // Back to main code

//========================================= ok
// Real Stock (on Decreasing)
_MonMinStock2:
 push ebx
 push ecx

 mov [esi+000000B8],eax         // Original code (stock total)

 mov ebx,[esi+0c]
 cmp ebx,[iStorageID]
 jne _ExitMMS2

 mov [pStorageLoad],esi

 cmp dword ptr [iEnableMMS],0
 je _ExitMMS2                   // Jump if feature is disabled

 mov ebx,#500                   // Minimum value
 mov ecx,#20                    // # of possible items

// Make all possible item quantity = 40 
_MonMS20:
 or ecx,ecx                     // Is it over?
 jz _MonMS21                    // Jump if true

 dec ecx                        // Adjust index
 
 mov [esi+ecx*4+18],ebx         // Update item quantity
 jmp _MonMS20

// Make all possible item avarage cost = 10.00
_MonMS21:
 mov ebx,(float)10.0            // Cost
 mov ecx,#20                    // # of possible items

_MonMS22:
 or ecx,ecx                     // Is it over?
 jz _MonMS23                    // Jump if true

 dec ecx                        // Adjust index
 
 mov [esi+ecx*4+68],ebx         // Update item avarage cost
 jmp _MonMS22

_MonMS23:
 mov ebx,#10000                 // Total in stock
 mov [esi+14],ebx
 mov [esi+000000b8],ebx

_ExitMMS2:
 pop ecx
 pop ebx
 jmp _BackMMS2                  // Back to main code

//========================================= ok
_MonHP:
 sub edx,edi                    // Original code

 cmp dword ptr [iEnableMH],0
 je _ExitMH                     // Jump if feature is disabled

 mov edi,[ecx+10]               // Get ptr to owner
 cmp edi,[pPlayer]              // Is it a player´s ship?
 jne _ExitMH                    // Jump if false

 mov edx,[ecx+2c]               // Get maximum HP

_ExitMH:
 mov [ecx+28],edx               // Original code (update HP)
 jmp _BackMH                    // Back to main code

//========================================= changed
// HP
_GodMode:
 push edi

 cmp dword ptr [iEnableMH],0
 je _ExitGM                     // Jump if feature is disabled

 mov edi,[esi+10]               // Get ptr to owner
 cmp edi,[pPlayer]              // Is it a player´s ship?
 jne _ExitGM                    // Jump if false

 mov ecx,[esi+2c]               // Get maximum HP
 mov [esi+28],ecx               // HP = maximum HP

_ExitGM:
 pop edi

 cmp eax,[ebx+00000150]         // Original code
 jmp _BackGM                    // Back to main code

//========================================= Changed
// Sailors
_GodMode1:
 push edx

 cmp dword ptr [iEnableMH],0
 je _ExitGM1                    // Jump if feature is disabled

 or ecx,ecx                     // Sailors = 0 ?
 jz _ExitGM1                    // Jump if true
 
 mov edx,[eax+10]               // Get ptr to owner
 cmp edx,[pPlayer]              // Is it a player´s ship?
 jne _ExitGM1                   // Jump if false

 push eax
 xor edx,edx
 mov dx,[eax+38]                // Get maximum Sailors (word)
 mov eax,#1000
 mul edx                        // 1000 * Maximum Sailors
 mov ecx,eax                    // ECX = maximum sailors * 1000
 pop eax

_ExitGM1:
 pop edx
 
 mov [eax+34],ecx               // Original code (update Sailors)
 or dword ptr [eax+08],02       // Original code
 jmp _BackGM1                   // Back to main code

//=========================================
// Variables
pPlayer:
 dd MyCode
pStorage:
 dd 0
pStorageLoad:
 dd 0
pStorageLoad1:
 dd 0 
iStorageID:
 dd 0
iEnableMM:
 dd 1
iEnableMMS:
 dd 1
iEnableMH:
 dd 1
iMinMoney:
 dd #300000
 
//=========================================
// Hacking Points

//
Patrician4_addon.exe+0c84bf: // OK
 jmp _MonStorage
 nop
 nop
_BackMS:

//
Patrician4_addon.exe+045e0e: //ok
 jmp _MonMoney
 nop
_BackMM:

//
Patrician4_addon.exe+369250: //ok
 jmp _MonMinStock
 nop
_BackMMS:

//
Patrician4_addon.exe+18819c: //ok
 jmp _MonMinStock1
 nop
_BackMMS1:

//
Patrician4_addon.exe+3692ab: //ok
 jmp _MonMinStock2
 nop
_BackMMS2:

//
Patrician4_addon.exe+041450:
 jmp _MonHP
_BackMH:

//
Patrician4_addon.exe+3642b9:
 jmp _GodMode
 nop
_BackGM:

//
Patrician4_addon.exe+36427a:
 jmp _GodMode1
 nop
 nop
_BackGM1:

//=========================================
// Original Codes
[DISABLE]

//
Patrician4_addon.exe+0c84bf: //changed from 0c7e6f
 mov edi,[esi+28]
 cmp dword ptr [edi+08],00

//
Patrician4_addon.exe+045e0e: //changed from 045a1e
 mov eax,[esi+48]
 lea edx,[eax+ecx]

//
Patrician4_addon.exe+369250: //changed from 3675a0
 mov [edx+000000b8],eax

//
Patrician4_addon.exe+18819c: //changed from 18642c
 mov [esi+000000b8],eax

//
Patrician4_addon.exe+3692ab: //changed from 3675fb
 mov [esi+000000B8],eax

//
Patrician4_addon.exe+041450: //changed from 041060
 sub edx,edi
 mov [ecx+28],edx 
 
//
Patrician4_addon.exe+3642b9: //changed from 3657a9
 cmp eax,[ebx+00000150]

//
Patrician4_addon.exe+36427a: // changed from 36576a
 mov [eax+34],ecx
 or dword ptr [eax+08],02

unregistersymbol(MyCode)
unregistersymbol(pPlayer)
unregistersymbol(pStorage)
unregistersymbol(pStorageLoad)
unregistersymbol(pStorageLoad1)
unregistersymbol(iStorageID)
unregistersymbol(iMinMoney)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMMS)
unregistersymbol(iEnableMH)

dealloc(MyCode)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable/Disable Minimum Gold"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enable/Disable Warehouse Minimum Resources"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMMS</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable/Disable God Mode"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMH</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Minimum Gold Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinMoney</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Patrician IV - Conquest by Trade
 Game Version  : unknown
 Script Version: 1.0
 CE Version    : 5.6
 GodMode and More
 02-Oct-2010
===========================================
 Patrician IV - Rise of a Dynasty
 Game Version  : 2.0.1
 Script Version: 1.0
 CE Version    : 6.0
 GodMode, Money and Minimum Stock
 12-Mar-2011
 By Recifense
===========================================
</Comments>
</CheatTable>
