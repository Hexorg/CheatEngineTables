<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>44</ID>
      <Description>"[X] &lt;== CnC 3 - Kane's Wrath v1.02 Steam Script v2.1 AOB"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Command &amp; Conquer 3 - Kane's Wrath
 Game Version  : 1.02
 Game Sponsor  : Myself
 Process Name  : cnc3ep1.dat
 Relevant Info : 32bits/RTS
 Script Version: 2.1 AOB
 CE Version    : 6.5
 Release date  : 05-Oct-2016
 Author        : Recifense
 History:
 15-Jun-2012: Second Release (CE62) (TW)
 26-Sep-2016: Release for Steam (GM fix + New Feature) (s2.0) (TW)
 27-Sep-2016: Ported from TW(1.09)
 05-Oct-2016: Two more options were added (s2.1)
Features:
 - God Mode (Units and Buildings)
   - Include Scenario Start Troops (s2.1)
 - Minimum Resource (65000)
 - Unlimited Energy (spent energy = 0)
 - Full Shield (new)
 - Global Resource (s2.1)
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "cnc3ep1.dat") then
    ShowMessage('Error. Expected Process = cnc3ep1.dat')
  end
{$asm}

//=========================================
define(LUDO,"cnc3ep1.dat")

//=========================================
// Constants used in the script (that can be changed)
define(ctCE65,(float)6.5)
define(ctMMON,#65000)  // Minimum Money

//=========================================
[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MOHP,cnc3ep1.dat,8b 47 60 8b 48 10 03 48 04 8b 16 51 8b ce ff 52 0c 6a 01 ?? ??)
AOBScanModule(GDMD,cnc3ep1.dat,f3 0f 10 5d 08 0f 57 c9 56 8b f1 f3 0f 10 46 08 f3 0f 10 56 10)
AOBScanModule(MOPU,cnc3ep1.dat,8b 8e cc 02 00 00 85 c9 ?? ?? 8b 01 57 ff 10 f6 86 d9 03 00 00 01)
AOBScanModule(MOUS,cnc3ep1.dat,8d be 14 01 00 00 f3 0f 10 07 f3 0f 5c 45 fc 83 c4 0c 8b cb f3 0f 11 07)
AOBScanModule(MOGR,cnc3ep1.dat,8b 40 08 8b 7874 8b 0d ?? ?? ?? ?? 8d 45 e4 50 e8 ?? ?? ?? ?? 8b 48 08)

AOBScanModule(RFAN,cnc3ep1.dat,5f 5e c9 c2 04 00 55 8d 6c 24 98 81 ec c4 00 00 00 a1 ?? ?? ??)
AOBScanModule(RGRE,cnc3ep1.dat,5e 83 c5 6c c9 c2 0c 00 55 8d 6c 24 8c 81 ec 1c 01 00 00 a1 ??)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonPlayerUnit)
label(_MonPU00)
label(_MonPU01)
label(_MonPU02)
label(_BackMPU)
label(_ExitMPU)
label(_MonUnitShield)
label(_BackMUS)
label(_ExitMUS)
label(_MonGRes)
label(_BackMGR)
label(_ExitMGR)

label(iEnableGMD)
label(iEnableMPR)
label(iEnableMPE)
label(iEnableMUS)
label(iEnableIST)
label(iEnableMGR)

label(pPlayer)
label(pCommon)
label(paName)
label(pLast)
label(pObj)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMPR)
registersymbol(iEnableMPE)
registersymbol(iEnableMUS)
registersymbol(iEnableIST)
registersymbol(iEnableMGR)
registersymbol(pPlayer)
registersymbol(pCommon)
registersymbol(paName)
registersymbol(pLast)
registersymbol(pObj)

registersymbol(MOHP)
registersymbol(GDMD)
registersymbol(MOPU)
registersymbol(MOUS)
registersymbol(MOGR)
registersymbol(RFAN)
registersymbol(RGRE)

//=========================================
MyCode:
//========================================= ok
// Resource and Energy (all the time)
_MonHumanPlayer:
 mov [pPlayer],edi

 mov eax,[edi+000000e8]
 mov [pCommon],eax
 mov eax,[edi+40]
 mov [paName],eax

 cmp dword ptr [iEnableMPR],0
 je _MonHP00                       // Jump if feature is disabled

 mov eax,[edi+60]                  // Get pResource

 mov ecx,[eax+10]
 add ecx,[eax+04]
 sub ecx,ctMMON
 jns _MonHP00

 neg ecx
 add [eax+04],ecx

_MonHP00:
 cmp dword ptr [iEnableMPE],0
 je _ExitMHP                       // Jump if feature is disabled

 mov eax,[edi+80]                  // Get pEnergy
 mov dword ptr [eax+08],0          // Used_energy = 0

_ExitMHP:
 mov eax,[edi+60]                  // Original code
 mov ecx,[eax+10]                  // Original code
 jmp _BackMHP                      // Back to main code

//========================================= ok
// When updating HP (for all kind of objects, including effects)
_GodMode:
 push esi

 mov eax,[ebp+08]
 test eax,eax
 jns _ExitGMD                      // Jump if a positive value

 cmp ecx,[pObj]
 jne _ExitGMD

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov dword ptr [ebp+08],0          // value2decrease = 0

 mov eax,[ecx+10]
 mov [ecx+08],eax

 mov [pObj],eax                    // Invalidate pointer

_ExitGMD:
 pop esi

 movss xmm3,[ebp+08]               // Original code
 jmp _BackGMD                      // Back to main code

//========================================= ok** (s2.1)
// Right before updating HP
_MonPlayerUnit:
 mov ecx,[esi+000002CC]
 test ecx,ecx
 jz _ExitMPU

 mov ecx,[esi+0000034c]
 test ecx,ecx
 jz _ExitMPU

 mov ecx,[esi+00000348]
 cmp ecx,[pCommon]
 je _MonPU02

 cmp dword ptr [iEnableIST],0
 je _ExitMPU                       // Jump if feature is disabled

 push eax
 push ebx
 push edx

 mov ebx,[paName]
 mov edx,[esi+0000034c]
 mov ecx,#12

_MonPU00:
 movzx eax,byte ptr [ebx]
 test eax,eax
 jz _MonPU01

 cmp al,[edx]
 jne _MonPU01

 inc ebx
 inc edx
 loop _MonPU00

 test ecx,ecx

_MonPU01:
 pop edx
 pop ebx
 pop eax
 jne _ExitMPU

_MonPU02:
 mov [pLast],esi                   // For debugging

 mov ecx,[esi+00000444]
 test ecx,ecx
 jz _ExitMPU

 mov ecx,[esp+10]                  // NOD FANATIC ACTING
 cmp ecx,RFAN
 je _ExitMPU

 cmp ecx,RGRE                      // GDI Grenade
 je _ExitMPU

 mov ecx,[esi+000002CC]
 mov [pObj],ecx                    // For further use

_ExitMPU:
 mov ecx,[esi+000002CC]            // Original code (get pHP)
 jmp _BackMPU                      // Back to main code

//========================================= ok*
// When updating shield value
_MonUnitShield:
 push ecx

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 mov edi,[ebx+0c]
 test edi,edi
 jz _ExitMUS

 mov ecx,[edi+00000348]
 cmp ecx,[pCommon]
 jne _ExitMUS

 mov ecx,[edi+00000444]
 test ecx,ecx
 jz _ExitMUS

 mov edi,[ebx+08]
 test edi,edi
 jz _ExitMUS

 mov ecx,[edi+7c]
 mov [esi+00000114],ecx

 xor ecx,ecx
 mov [ebp-04],ecx

_ExitMUS:
 pop ecx

 lea edi,[esi+00000114]            // Original code (adjusting offset)
 jmp _BackMUS                      // Back to main code

//========================================= NHP
// Global Resource
_MonGRes:
 mov eax,[eax+08]                  // Original code
 mov edi,[eax+74]                  // Original code

 cmp dword ptr [iEnableMGR],0
 je _ExitMGR                       // Jump if feature is disabled

 cmp edi,#1000000
 jge _ExitMGR

 mov edi,#1000000
 mov [eax+74],edi

_ExitMGR:
 jmp _BackMGR                      // Back to main code

//=========================================
 db '===================================&gt;'
 db 'CE6.5 Script by Recifense 100516'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMPR:
 dd 0
iEnableMPE:
 dd 0
iEnableMUS:
 dd 0
iEnableIST:
 dd 0
iEnableMGR:
 dd 0
pPlayer:
 dd 0
pCommon:
 dd MyCode
paName:
 dd MyCode
pObj:
 dd MyCode
pLast:
 dd 0

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
_BackMHP:

GDMD:
 jmp _GodMode
_BackGMD:

MOPU:
 jmp _MonPlayerUnit
 nop
_BackMPU:

MOUS:
 jmp _MonUnitShield
 nop
_BackMUS:

MOGR:
 jmp _MonGRes
 nop
_BackMGR:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov eax,[edi+60]
// mov ecx,[eax+10]
 db 8b 47 60 8b 48 10

GDMD:
// movss xmm3,[ebp+08]
 db f3 0f 10 5d 08

MOPU:
// mov ecx,[esi+000002CC]
 db 8b 8e cc 02 00 00

MOUS:
// lea edi,[esi+00000114]
 db 8d be 14 01 00 00

MOGR:
// mov eax,[eax+08]
// mov edi,[eax+74]
 db 8b 40 08 8b 78 74

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableMPE)
unregistersymbol(iEnableMUS)
unregistersymbol(iEnableIST)
unregistersymbol(iEnableMGR)
unregistersymbol(pPlayer)
unregistersymbol(pCommon)
unregistersymbol(paName)
unregistersymbol(pLast)
unregistersymbol(pObj)

unregistersymbol(MOHP)
unregistersymbol(GDMD)
unregistersymbol(MOPU)
unregistersymbol(MOUS)
unregistersymbol(MOGR)
unregistersymbol(RFAN)
unregistersymbol(RGRE)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>102</ID>
              <Description>"[X] &lt;== Include Scenario Start Stroops"</Description>
              <LastState/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableIST",1)
getAddressList().getMemoryRecordByID(102).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableIST",0)
getAddressList().getMemoryRecordByID(102).Color=0x0c08000
{$ASM}

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Minimum Resource"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== No Spent Energy"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPE",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPE",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Full Shield"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(101).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>103</ID>
          <Description>"[X] &lt;== Minimum Global Resource"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMGR",1)
getAddressList().getMemoryRecordByID(103).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMGR",0)
getAddressList().getMemoryRecordByID(103).Color=0x0c08000
{$ASM}

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20160927</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Command &amp; Conquer 3 - Kane's Wrath
 Game Version  : 1.02
 Game Sponsor  : Myself
 Process Name  : cnc3ep1.dat
 Relevant Info : 32bits/RTS
 Script Version: 2.1 AOB
 CE Version    : 6.5
 Release date  : 05-Oct-2016
 Author        : Recifense
 History:
 15-Jun-2012: Second Release (CE62) (TW)
 26-Sep-2016: Release for Steam (GM fix + New Feature) (s2.0) (TW)
 27-Sep-2016: Ported from TW(1.09)
 05-Oct-2016: Two more options were added (s2.1)
Features:
 - God Mode (Units and Buildings)     [1]
    - Include Scenario Start Troops (s2.1)   - Include Scenario Start Troops (s2.1)
 - Minimum Resource (65000)           [2] 
 - Unlimited Energy (spent energy = 0)[3](*)
 - Full Shield                        [4]
 - Global Resource (s2.1)             [5]
===========================================
[1] Human Player's Units and Buildings will not suffer damage;
[2] Human Player's resource will not go under minimum value;
[3] Human Player's Used Energy will be kept in 0;(*)
[4] Human player's units' shield will not decrease;
[5] Human Player's Global resource not go under 1000000; 
(*) Dark Byte's original idea. 
===========================================
[USAGE]
 - Run CE 6.5;
 - Run the GAME;
 - Load game process "cnc3ep1.dat" via CE6.5;
 - Load this Table;
 - Activate the main script  by clicking on its box [X];
 - Now Activate the script of each cheat you want to use;
 - Go back to the game and have fun.
===========================================
HOTKEYS:
- None defined;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always go back in case you don't like the result.
===========================================
[INFO]
Tested on Win10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
