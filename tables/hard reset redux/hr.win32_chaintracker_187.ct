<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"chains tracker"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//this is for 32bit apps

[ENABLE]
alloc(newmem,65536)
label(returnhere)
label(originalcode)
label(exit)

label(loop)
label(addNewChain)


define(maxResultsCount,100)  // decimally
define(chainSizeInDwords,8)  // decimally
define(chainSizeInBytes,20)  // hexadecimally (8 * 4 = 32 = 20 hex)

label(done)
registersymbol(done)
label(resultsCount)

newmem:
mov [ebp-08],eax

pushfd
pushad

cmp [done],1
je originalcode

mov eax,ecx

cld
mov esi,newmem+1004
mov edi,newmem+1000
mov ecx,(int)chainSizeInDwords
repe movsd

mov [newmem+1000+chainSizeInBytes-4],eax

// EDIT HERE, paste address (remember, this is for 32bit apps)
cmp eax,283330A0-4
jne originalcode


//ok, we got a chain. Is it new one?

cmp [resultsCount],0  // is list empty ?
je addNewChain        // if yes, just add new/current chain to the list


// check if already in the list START
  mov eax,0              // EAX is counter now
  mov ebx,newmem+1100    // EBX point to the beginning of list (fist chain in the list)

  loop:

    mov esi,newmem+1000       // ESI points to current chain
    mov edi,ebx               // EDI points to a saved chain in the list
    mov ecx,(int)chainSizeInDwords
    repe cmpsd
    je originalcode           // already have it.

    add ebx,chainSizeInBytes   // EBX point to the next chain in the list
    inc eax                    // increase counter
    cmp eax,[resultsCount]     // tried all chains ?
    jne loop
// check if already in the list END


// not in the list, so:
// add new chain START
addNewChain:
  mov eax,[resultsCount]
  imul eax,eax,chainSizeInBytes

  mov esi,newmem+1000
  lea edi,[eax+newmem+1100]
  mov ecx,(int)chainSizeInDwords
  repe movsd

  inc [resultsCount]                      // increase results counter
  cmp [resultsCount],(int)maxResultsCount // enough?
  jne originalcode                        // nope
  mov [done],1                            // yes
// add new chain END

originalcode:
popad
popfd
mov eax,[ecx+04]

exit:
jmp returnhere

newmem+300:
done:
dd 0
resultsCount:
dd 00


"hr.Win32.exe"+16408A:
jmp newmem
nop
returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"hr.Win32.exe"+16408A:
mov [ebp-08],eax
mov eax,[ecx+04]
//Alt: db 89 45 F8 8B 41 04

unregistersymbol(done)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"max results reached? (1=yes, 0=no)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>done</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"number of chains found"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>done+4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Show results"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$Lua}
local outputText = {}
local chainsFound = readInteger("done+4")
local chainSizeInBytes = 32
local chainSizeInDwords = 8
local listAddress = getAddress("done-300+1100")

for index=0,chainsFound-1 do
  for i=0,chainSizeInDwords-1 do
    local address1 = readInteger(listAddress+i*4+chainSizeInBytes*index)
    local address2 = readInteger(address1+0xC)
    if address2~=nil then
      local str = readString(address2+0x1C)
      if str~=nil then str='string size:'..#str..'  '..str end
      table.insert(outputText,str or '{NOT USABLE}')
    else
      table.insert(outputText,'{NOT USABLE}')
    end
  end
  table.insert(outputText,'')
end

for i=1,#outputText do
  print(outputText[i])
end
{$Asm}
[DISABLE]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
