<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>91</ID>
      <Description>"[X] &lt;== tLotR_WitN v1.0.0.1 Steam Script (ACTIVATE ME FIRST)"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : The Lord of the Rings: War in the North
 Game Version  : 1.0.0.1 (ccBID = 65728)
 Game Sponsor  : Myself
 Process Name  : witn.exe
 Relevant Info : 32bits/group RPG/CRC protection
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 17-Jan-2016
 Author        : Recifense
 History:
 17-Jan-16: First Release
 Features:
 - Prepare environment for bypassing CRC-Check
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "witn.exe") then
    ShowMessage('Error. Expected Process = witn.exe')
  end
{$asm}

//=========================================
// Definitions
define(CODESIZE,0x00830600)
define(LUDO,witn.exe)

//=========================================
[ENABLE]
//=========================================
alloc(CodeCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,$process)
//=========================================
label(iFlagOK)
label(pCodeCopy)
label(_ExitIM)
//=========================================
registersymbol(CodeCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pCodeCopy)
//=========================================
_IniMem:
 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 cld
 rep movsd

 push #500
 call kernel32.sleep

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 repe cmpsd

 test ecx,ecx
 jnz _ExitIM

 mov dword ptr [iFlagOK],55555555

_ExitIM:
 ret

//=========================================
 db '=========================================&gt;'
 db 'CE6.5 Script by Recifense 011716'
//=========================================
// Variables
pCodeCopy:
 dd CodeCopy
iFlagOK:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(CodeCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pCodeCopy)
//=========================================
dealloc(CodeCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>51</ID>
      <Description>"[X] &lt;== tLotR_WitN v1.0.0.1 Steam Script v2.2"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : The Lord of the Rings: War in the North
 Game Version  : 1.0.0.1 (ccBID = 65728)
 Game Sponsor  : Myself
 Process Name  : witn.exe
 Relevant Info : 32bits/group RPG/CRC protection
 Script Version: 2.1
 CE Version    : 6.5
 Release date  : 20-Jan-2016
 Author        : Recifense
 History:
 24-Nov-2011: First Release (s1.0)
 17-Jan-2016: Release for Steam (s2.0)
 18-Jan-2016: Removed Maximum Durability due to crashes(s2.1)
 20-Jan-2016: New approach for Weapon/Armor Durability (s2.2)
 Features:
 - Minimum Gold (6500)
 - Minimum Item Quantity
 - Maximum Durability
 - God Mode
 - pointer to XP
 - pointers to Attributes
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "witn.exe") then
    ShowMessage('Error. Expected Process = witn.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"witn.exe")
define(LUDOEND,witn.exe+007a2b90)

define(MOGD,witn.exe+003a4108)
define(MOIS,witn.exe+001379a6)
define(MODY,witn.exe+00301ae5)
define(MOUS,witn.exe+0040f88a)
define(GDMD,witn.exe+00129243)
define(MOXP,witn.exe+003c2150)
define(MOAB,witn.exe+0009808f)
define(MOAW,witn.exe+00347ccc)

define(BCK1,witn.exe+0047ffc3)
define(BCK2,witn.exe+002de214)
define(BCK3,witn.exe+007a2b85)
define(BCK4,witn.exe+002d0294)
define(BCK5,witn.exe+001126a4)
define(BCK6,witn.exe+001246c3)
define(BCK7,witn.exe+00088aa3)
define(BCK8,witn.exe+0010cf83)
define(BCK9,witn.exe+0062fc44)
define(BCKA,witn.exe+007a36f5)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.5)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOGD,d9 80 78 03 00 00 51 8d 4e 04 d9 1c 24 e8 ?? ?? ?? ?? d9 46 2c)
assert(MOIS,89 94 24 88 00 00 00 85 c0 ?? ?? 85 d2 ?? ?? e9 ?? ?? ?? ?? 83)
assert(MODY,d9 ee 83 ec 10 85 c0 8b 44 24 20 f3 0f 10 80 d4 03 00 00 0f 5a)
assert(MOUS,f3 0f 10 40 0c 8b 16 8b 42 3c 8b ce f3 0f 11 44 24 0c ff d0 d9)
assert(GDMD,f3 0f 11 40 0c 5e 59 c3 cc cc cc cc cc f6 05 ?? ?? ?? ?? 01 56)
assert(MOXP,8b 41 10 d9 40 0c c3 cc cc cc cc cc cc cc cc cc b8 01 00 00 00)
assert(MOAB,c7 03 00 00 00 00 47 83 c3 04 83 ff 04 ?? ?? 8b 46 1c 8b 48 0c)
assert(MOAW,89 41 0c 85 f6 ?? ?? 56 e8 ?? ?? ?? ?? 83 c4 04 85 c0 ?? ?? 8d)

assert(BCK1,8b 45 0c 8b 55 08 50 52 51 e8 ?? ?? ?? ?? 83 c4 0c 5d c2 08 00)
assert(BCK2,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(BCK3,8b 75 0c 8b 4d 10 8b 7d 08 8b c1 8b d1 03 c6 3b fe ?? ?? 3b f8)
assert(BCK4,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(BCK5,8b 5d 08 56 57 8d a4 24 00 00 00 00 8b 75 0c 83 fe 07 ?? ?? ff)
assert(BCK6,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4d 08 53 0f b6 1c 0a)
assert(BCK7,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4e 04 53 8b 5d 08 0f)
assert(BCK8,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4d 08 53 0f b6 1c 0a)
assert(BCK9,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(BCKA,8b 75 0c 8b 4d 10 8b 7d 08 8b c1 8b d1 03 c6 3b fe ?? ?? 3b f8)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonGold)
label(_MonG0)
label(_MonG1)
label(_BackMG)
label(_ExitMG)

label(_ChkDur)
label(_ChkD0)
label(_ChkD1)
label(_ChkDE)

label(_MonItems)
label(_BackMI)
label(_ExitMI)
label(_MonDurability)
label(_BackMD)
label(_ExitMD)
label(_MonUnits)
label(_BackMU)
label(_ExitMU)
label(_GodMode)
label(_GodM0)
label(_BackGM)
label(_ExitGM)
label(_MonXP)
label(_BackMX)
label(_ExitMX)
label(_MonAttribs)
label(_BackMA)
label(_ExitMA)
label(_MonArrows)
label(_BackMAr)
label(_ExitMAr)

label(_BypassCrcCheck1)
label(_BackBC1)
label(_ExitBC1)
label(_BypassCrcCheck2)
label(_BackBC2)
label(_ExitBC2)
label(_BypassCrcCheck3)
label(_BackBC3)
label(_ExitBC3)
label(_BypassCrcCheck4)
label(_BackBC4)
label(_ExitBC4)
label(_BypassCrcCheck5)
label(_BackBC5)
label(_ExitBC5)
label(_BypassCrcCheck6)
label(_BackBC6)
label(_ExitBC6)
label(_BypassCrcCheck7)
label(_BackBC7)
label(_ExitBC7)
label(_BypassCrcCheck8)
label(_BackBC8)
label(_ExitBC8)
label(_BypassCrcCheck9)
label(_BackBC9)
label(_ExitBC9)
label(_BypassCrcCheckA)
label(_BackBCA)
label(_ExitBCA)

label(iEnableGM)
label(iEnableMI)
label(iEnableMD)
label(iEnableMG)
label(iEnableMA)
label(iEnableCRC)

label(iIndex)
label(iEAX)

label(iCount1)
label(iCount2)
label(iCount3)
label(iCount4)
label(iCount5)
label(iCount6)
label(iCount7)
label(iCount8)
label(iCount9)
label(iCountA)

label(fMinGold)

label(pUnit1)
label(pUnit2)
label(pUnit3)
label(pGold)
label(pCommon)
label(pXP)
label(pAttribs)
label(pWeapon)

label(pCode1)
label(pCode2)
label(pCode3)
label(pCode4)
label(pCode5)
label(pCode6)
label(pCode7)
label(pCode8)
label(pCode9)
label(pCodeA)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMG)
registersymbol(iEnableMA)
registersymbol(iEnableMI)
registersymbol(iEnableMD)
registersymbol(iEnableGM)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount3)
registersymbol(iCount4)
registersymbol(iCount5)
registersymbol(iCount6)
registersymbol(iCount7)
registersymbol(iCount8)
registersymbol(iCount9)
registersymbol(iCountA)
registersymbol(fMinGold)
registersymbol(pUnit1)
registersymbol(pGold)
registersymbol(pCommon)
registersymbol(pXP)
registersymbol(pAttribs)
registersymbol(pWeapon)
registersymbol(pCode1)
registersymbol(pCode2)
registersymbol(pCode3)
registersymbol(pCode4)
registersymbol(pCode5)
registersymbol(pCode6)
registersymbol(pCode7)
registersymbol(pCode8)
registersymbol(pCode9)
registersymbol(pCodeA)

//=========================================
MyCode:
//=========================================
// Activated On pressing TAB
_MonGold:
 push ebx
 push ecx
 push edx

 mov [pGold],eax
 mov ecx,[eax+04]
 lea ecx,[ecx+000041f0]
 mov [pCommon],ecx

 xor ecx,ecx
 mov [pUnit1],ecx
 mov [pUnit2],ecx
 mov [pUnit3],ecx
 mov [iIndex],ecx

 cmp dword ptr [iEnableMG],0
 je _MonG0                         // Jump if feature is disabled

 mov ecx,[fMinGold]
 cmp ecx,[eax+00000378]
 js _MonG0

 mov [eax+00000378],ecx            // Update gold

_MonG0:
 cmp dword ptr [iEnableMD],0
 je _ExitMG                        // Jump if feature is disabled

 mov ecx,#13
 lea ebx,[eax+000000cc]

_MonG1:
 mov edx,[ebx]
 call _ChkDur
 add ebx,08
 loop _MonG1

_ExitMG:
 pop edx
 pop ecx
 pop ebx

 fld dword ptr [eax+00000378]      // Original code
 jmp _BackMG                       // Back to main code
//==============
// Input: EDX = ppItem
_ChkDur:
 push eax

 test edx,edx
 jz _ChkDE

 mov edx,[edx]
 test edx,edx
 jz _ChkDE

 mov eax,(float)1000.0
 cmp eax,[edx+50]
 js _ChkD0

 mov [edx+50],eax

_ChkD0:
 mov eax,[edx+000003d4]
 cmp eax,(float)1.0
 je _ChkDE

 mov eax,(float)500.0
 cmp eax,[edx+000003d4]
 js _ChkD1

 mov [edx+000003d4],eax

_ChkD1:
 mov eax,[edx+000003d4]
 mov [edx+000003d0],eax

_ChkDE:
 pop eax
 ret
//=========================================
// Activated On Inventory or while Selling/Buying
_MonItems:
 cmp dword ptr [iEnableMI],0
 je _ExitMI                        // Jump if feature is disabled

 mov edx,[esp+10]
 test edx,edx
 jz _ExitMI

 cmp dword ptr [edx+00000230],0
 jne _ExitMI

 mov edx,[ecx+04]
 mov [ecx+0c],edx                  // Item = Maximum

_ExitMI:
 mov edx,[ecx+0C]

 mov [esp+00000088],edx            // Original code
 jmp _BackMI                       // Back to main code

//=========================================
// Activated On Inventory (selected item)
_MonDurability:
 fldz                              // Original code
 sub esp,10                        // Original code

 mov [iEAX],eax

 mov eax,[esp+20]
 mov [pWeapon],eax

 cmp dword ptr [iEnableMD],0
 je _ExitMD                        // Jump if feature is disabled

// cmp dword ptr [eax+00000230],0
// jne _ExitMD

 movss xmm0,[eax+000003D4]
 movss [eax+000003D0],xmm0         // Durability = Maximum

_ExitMD:
 mov eax,[iEAX]
 jmp _BackMD                       // Back to main code

//=========================================
// Activated On Main Screen
_MonUnits:
 mov edx,[iIndex]
 cmp edx,3
 jge _ExitMU

 mov [pUnit1+edx*4],eax

 inc edx
 mov [iIndex],edx

_ExitMU:
 movss xmm0,[eax+0C]               // Original code
 jmp _BackMU                       // Back to main code

//=========================================
// Activated During Combat
_GodMode:
 cmp dword ptr [iEnableGM],0
 je _ExitGM                        // Jump if feature is disabled

 mov ecx,[iIndex]

_GodM0:
 test ecx,ecx
 jz _ExitGM

 dec ecx
 cmp eax,[pUnit1+ecx*4]
 jne _GodM0

 movss xmm0,[eax+0C]               // Get current HP

_ExitGM:
 movss [eax+0C],xmm0               // Original code
 jmp _BackGM                       // Back to main code

//=========================================
// Activated On Main Screen
_MonXP:
 mov eax,[ecx+10]                  // Original code

 cmp dword ptr [eax+04],b79f5147
 jne _ExitMX

 mov [pXP],eax

_ExitMX:
 fld dword ptr [eax+0C]            // Original code
 jmp _BackMX                       // Back to main code

//=========================================
// Activated On Status Screen
_MonAttribs:
 mov [pAttribs+edi*4],eax

_ExitMA:
 mov [ebx],00000000                // Original code
 jmp _BackMA                       // Back to main code

//=========================================
// Activated On Using the BOW
_MonArrows:
 push ebx

 cmp dword ptr [iEnableMA],0
 je _ExitMAr                       // Jump if feature is disabled

 mov ebx,[esp+1c]
 cmp ebx,[pGold]
 jne _ExitMAr

 mov eax,[ecx+04]

_ExitMAr:
 pop ebx

 mov [ecx+0C],eax                  // Original code
 test esi,esi                      // Original code
 jmp _BackMAr                      // Back to main code

//----------------------------------------------------------------------------
//=========================================
_BypassCrcCheck1:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC1

 cmp dword ptr [iEnableCRC],0
 je _ExitBC1                       // Jump if feature is disabled

 mov edx,[ebp+08]

 cmp edx,LUDO
 js _ExitBC1

 cmp edx,LUDOEND
 jns _ExitBC1

 mov [pCode1],edx

 mov eax,LUDO
 sub edx,eax
 mov eax,CodeCopy
 add edx,eax

 inc dword ptr [iCount1]

 mov [ebp+08],edx

_ExitBC1:
 mov eax,[ebp+0C]                  // Original code
 mov edx,[ebp+08]                  // Original code
 jmp _BackBC1                      // Back to main code

//=========================================
_BypassCrcCheck2:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC2

 cmp dword ptr [iEnableCRC],0
 je _ExitBC2                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC2

 cmp edi,LUDOEND
 jns _ExitBC2

 mov [pCode2],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount2]

 mov [ebp+08],edi

_ExitBC2:
 mov edi,[ebp+08]                  // Original code
 jmp _BackBC2                      // Back to main code

//=========================================
_BypassCrcCheck3:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC3

 cmp dword ptr [iEnableCRC],0
 je _ExitBC3                       // Jump if feature is disabled

 mov esi,[ebp+0c]

 cmp esi,LUDO
 js _ExitBC3

 cmp esi,LUDOEND
 jns _ExitBC3

 mov [pCode3],esi

 mov ecx,LUDO
 sub esi,ecx
 mov ecx,CodeCopy
 add esi,ecx

 inc dword ptr [iCount3]

 mov [ebp+0c],esi

_ExitBC3:
 mov esi,[ebp+0C]                  // Original code
 mov ecx,[ebp+10]                  // Original code
 jmp _BackBC3                      // Back to main code

//=========================================
_BypassCrcCheck4:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC4

 cmp dword ptr [iEnableCRC],0
 je _ExitBC4                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC4

 cmp edi,LUDOEND
 jns _ExitBC4

 mov [pCode4],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount4]

 mov [ebp+08],edi

_ExitBC4:
 mov edi,[ebp+08]                  // Original code
 jmp _BackBC4                      // Back to main code

//=========================================
_BypassCrcCheck5:
 mov ebx,[ebp+08]                  // Original code
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC5

 cmp dword ptr [iEnableCRC],0
 je _ExitBC5                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC5

 cmp edi,LUDOEND
 jns _ExitBC5

 mov [pCode5],edi

 mov ebx,LUDO
 sub edi,ebx
 mov ebx,CodeCopy
 add edi,ebx

 inc dword ptr [iCount5]

 mov [ebp+08],edi

_ExitBC5:
 mov ebx,[ebp+08]                  // Original code
 jmp _BackBC5                      // Back to main code

//=========================================
_BypassCrcCheck6:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC6

 cmp dword ptr [iEnableCRC],0
 je _ExitBC6                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC6

 cmp edi,LUDOEND
 jns _ExitBC6

 mov [pCode6],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount6]

 mov [ebp+08],edi

_ExitBC6:
 mov edi,[ebp+0C]                  // Original code
 jmp _BackBC6                      // Back to main code

//=========================================
_BypassCrcCheck7:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC7

 cmp dword ptr [iEnableCRC],0
 je _ExitBC7                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC7

 cmp edi,LUDOEND
 jns _ExitBC7

 mov [pCode7],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount7]

 mov [ebp+08],edi

_ExitBC7:
 mov edi,[ebp+0C]                  // Original code
 jmp _BackBC7                      // Back to main code

//=========================================
_BypassCrcCheck8:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC8

 cmp dword ptr [iEnableCRC],0
 je _ExitBC8                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC8

 cmp edi,LUDOEND
 jns _ExitBC8

 mov [pCode8],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount8]

 mov [ebp+08],edi

_ExitBC8:
 mov edi,[ebp+0C]                  // Original code
 jmp _BackBC8                      // Back to main code

//=========================================
_BypassCrcCheck9:
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC9

 cmp dword ptr [iEnableCRC],0
 je _ExitBC9                       // Jump if feature is disabled

 mov edi,[ebp+08]

 cmp edi,LUDO
 js _ExitBC9

 cmp edi,LUDOEND
 jns _ExitBC9

 mov [pCode9],edi

 mov edx,LUDO
 sub edi,edx
 mov edx,CodeCopy
 add edi,edx

 inc dword ptr [iCount9]

 mov [ebp+08],edi

_ExitBC9:
 mov edi,[ebp+08]                  // Original code
 jmp _BackBC9                      // Back to main code

//=========================================
_BypassCrcCheckA:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitBCA

 cmp dword ptr [iEnableCRC],0
 je _ExitBCA                       // Jump if feature is disabled

 mov esi,[ebp+0c]

 cmp esi,LUDO
 js _ExitBCA

 cmp esi,LUDOEND
 jns _ExitBCA

 mov [pCodeA],esi

 mov ecx,LUDO
 sub esi,ecx
 mov ecx,CodeCopy
 add esi,ecx

 inc dword ptr [iCountA]

 mov [ebp+0c],esi

_ExitBCA:
 mov esi,[ebp+0C]                  // Original code
 mov ecx,[ebp+10]                  // Original code
 jmp _BackBCA                      // Back to main code

//=========================================
 db '==================================&gt;'
 db 'CE6.5 Script by Recifense 012016'
//=========================================
// Variables
iEnableMG:
 dd 0
iEnableMI:
 dd 0
iEnableMD:
 dd 0
iEnableGM:
 dd 0
iEnableMA:
 dd 0
iEnableCRC:
 dd 1
pGold:
 dd MyCode
pWeapon:
 dd 0
pCommon:
 dd 0
pXP:
 dd 0
fMinGold:
 dd (float)6500.0
iCount1:
 dd 0
iCount2:
 dd 0
iCount3:
 dd 0
iCount4:
 dd 0
iCount5:
 dd 0
iCount6:
 dd 0
iCount7:
 dd 0
iCount8:
 dd 0
iCount9:
 dd 0
iCountA:
 dd 0
pCode1:
 dd 0
pCode2:
 dd 0
pCode3:
 dd 0
pCode4:
 dd 0
pCode5:
 dd 0
pCode6:
 dd 0
pCode7:
 dd 0
pCode8:
 dd 0
pCode9:
 dd 0
pCodeA:
 dd 0
iIndex:
 dd 0
iEAX:
 dd 0
pUnit1:
 dd 0
pUnit2:
 dd 0
pUnit3:
 dd 0
pAttribs:
 dd 0
 dd 0
 dd 0
 dd 0

//=========================================
// Hacking Points
MOGD:
 jmp _MonGold
 nop
_BackMG:

MOIS:
 jmp _MonItems
 nop
 nop
_BackMI:

MODY:
// jmp _MonDurability
_BackMD:

MOUS:
 jmp _MonUnits
_BackMU:

GDMD:
 jmp _GodMode
_BackGM:

MOXP:
 jmp _MonXP
 nop
_BackMX:

MOAB:
 jmp _MonAttribs
 nop
_BackMA:

MOAW:
 jmp _MonArrows
_BackMAr:
//-------
BCK1:
 jmp _BypassCrcCheck1
 nop
_BackBC1:

BCK2:
 jmp _BypassCrcCheck2
_BackBC2:

BCK3:
 jmp _BypassCrcCheck3
 nop
_BackBC3:

BCK4:
 jmp _BypassCrcCheck4
_BackBC4:

BCK5:
 jmp _BypassCrcCheck5
_BackBC5:

BCK6:
 jmp _BypassCrcCheck6
_BackBC6:

BCK7:
 jmp _BypassCrcCheck7
_BackBC7:

BCK8:
 jmp _BypassCrcCheck8
_BackBC8:

BCK9:
 jmp _BypassCrcCheck9
_BackBC9:

BCKA:
// jmp _BypassCrcCheckA
// nop
_BackBCA:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOGD:
// fld dword ptr [eax+00000378]
 db d9 80 78 03 00 00

MOIS:
// mov [esp+00000088],edx
 db 89 94 24 88 00 00 00

MODY:
// fldz
// sub esp,10
 db D9 EE 83 EC 10

MOUS:
// movss xmm0,[eax+0C]
 db f3 0f 10 40 0c

GDMD:
// movss [eax+0C],xmm0
 db f3 0f 11 40 0c

MOXP:
// mov eax,[ecx+10]
// fld dword ptr [eax+0C]
 db 8b 41 10 d9 40 0c

MOAB:
// mov [ebx],00000000
 db c7 03 00 00 00 00

MOAW:
// mov [ecx+0C],eax
// test esi,esi
 db 89 41 0c 85 f6
//------
BCK1:
// mov eax,[ebp+0C]
// mov edx,[ebp+08]
 db 8b 45 0c 8b 55 08

BCK2:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

BCK3:
// mov esi,[ebp+0C]
// mov ecx,[ebp+10]
 db 8b 75 0c 8b 4d 10

BCK4:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

BCK5:
// mov ebx,[ebp+08]
// push esi
// push edi
 db 8b 5d 08 56 57

BCK6:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

BCK7:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

BCK8:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

BCK9:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

BCKA:
// mov esi,[ebp+0C]
// mov ecx,[ebp+10]
 db 8b 75 0c 8b 4d 10

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMG)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableMI)
unregistersymbol(iEnableMD)
unregistersymbol(iEnableGM)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount3)
unregistersymbol(iCount4)
unregistersymbol(iCount5)
unregistersymbol(iCount6)
unregistersymbol(iCount7)
unregistersymbol(iCount8)
unregistersymbol(iCount9)
unregistersymbol(iCountA)
unregistersymbol(fMinGold)
unregistersymbol(pUnit1)
unregistersymbol(pGold)
unregistersymbol(pCommon)
unregistersymbol(pXP)
unregistersymbol(pAttribs)
unregistersymbol(pWeapon)
unregistersymbol(pCode1)
unregistersymbol(pCode2)
unregistersymbol(pCode3)
unregistersymbol(pCode4)
unregistersymbol(pCode5)
unregistersymbol(pCode6)
unregistersymbol(pCode7)
unregistersymbol(pCode8)
unregistersymbol(pCode9)
unregistersymbol(pCodeA)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>234</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGM",1)
getAddressList().getMemoryRecordByID(234).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGM",0)
getAddressList().getMemoryRecordByID(234).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>233</ID>
          <Description>"[X] &lt;== Full Ammo (Arrow)  --------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMA",1)
getAddressList().getMemoryRecordByID(233).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMA",0)
getAddressList().getMemoryRecordByID(233).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Full Durability ----------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMD",1)
getAddressList().getMemoryRecordByID(229).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMD",0)
getAddressList().getMemoryRecordByID(229).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"[X] &lt;== Minimum Gold --------------------------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMG",1)
getAddressList().getMemoryRecordByID(230).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMG",0)
getAddressList().getMemoryRecordByID(230).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>36</ID>
              <Description>"Minimum Gold Value ============&gt;"</Description>
              <Color>0080FF</Color>
              <VariableType>Float</VariableType>
              <Address>fMinGold</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>232</ID>
          <Description>"[X] &lt;== Full Inventory Item -------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMI",1)
getAddressList().getMemoryRecordByID(232).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMI",0)
getAddressList().getMemoryRecordByID(232).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>235</ID>
          <Description>"[X] &lt;======================== Main Hero Info =========================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>37</ID>
              <Description>"Hero's Total XP ==&gt; "</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pXP</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>43</ID>
              <Description>"Hero's Attribute Points ==&gt; "</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pGold</Address>
              <Offsets>
                <Offset>C</Offset>
                <Offset>420C</Offset>
                <Offset>4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>38</ID>
              <Description>"Hero's Skill Points ==&gt; "</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pGold</Address>
              <Offsets>
                <Offset>C</Offset>
                <Offset>4210</Offset>
                <Offset>4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>39</ID>
              <Description>"Hero's Strength"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pAttribs</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>40</ID>
              <Description>"Hero's Will"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pAttribs+4</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>41</ID>
              <Description>"Hero's Dexterity"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pAttribs+8</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>42</ID>
              <Description>"Hero's Stamina"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pAttribs+0c</Address>
              <Offsets>
                <Offset>C</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20160120</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : The Lord of the Rings: War in the North
 Game Version  : 1.0.0.1 (ccBID = 65728)
 Game Sponsor  : Myself
 Process Name  : witn.exe
 Relevant Info : 32bits/group RPG/CRC protection
 Script Version: 2.1
 CE Version    : 6.5
 Release date  : 20-Jan-2016
 Author        : Recifense
 History:
 24-Nov-2011: First Release (s1.0)
 17-Jan-2016: Release for Steam (s2.0)
 18-Jan-2016: Removed Maximum Durability due to crashes(s2.1)
 20-Jan-2016: New approach for Weapon/Armor Durability (s2.2)
 Features:
 - Minimum Gold             [1](*) (6500)
 - Minimum Item Quantity    [2](*)
 - Maximum Durability       [3](**)
 - God Mode                 [4](*)
 - pointer to XP            [5](*)
 - pointers to Attributes   [5](*)
===========================================
[1] The gold will be set minimum when entering shopping mode
[2] Items will fill up to maximum;
[3] Full durabuility (selected weapon/armor in inventory);
[4] Full HP for main hero and party;
[5] Used on the table (valid to current selected hero);
(*)Press TAB, at least, once per Check Point;
(**) Armor/Weapon that main hero is wearing (entering the inventory);
===========================================
[USAGE]
 - Run CE 6.5;
 - Run the GAME;
 - Load game process "witn.exe" via CE6.5;
 - Load this Table;
 - Activate the first script  by clicking on its box [X];
 - Activate the second script by clicking on its box [X];
 - Now Activate the script of each cheat you want to use;
 - Go back to the game and have fun.
===========================================
HOTKEYS:
CTRL+Home     = Enable  GM/FA/FD cheats;
CTRL+End      = Disable GM/FA/FD cheats;
-----
CTRL+PageUp   = Enable  MG cheat;
CTRL+PageDown = Disable MG cheat;
-----
CTRL+Insert   = Enable  FII cheat;
CTRL+Delete   = Disable FII cheat;
===========================================
[WARNING]
- This table is meant to be used in single player games.
===========================================
[INFO]
Tested on Win10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
