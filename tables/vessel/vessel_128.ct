<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Inf. Container (both Pressure &amp; Suction) (hold R during Suction to temp diable Inf Suction)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(newmem1,2048) //2kb should be enough
label(returnhere1)
label(originalcode1)
label(exit1)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)
alloc(maxWaterLevel,4)
alloc(newmem3,2048) //2kb should be enough
label(returnhere3)
label(originalcode3)
label(exit3)
alloc(newmem4,2048) //2kb should be enough
label(returnhere4)
label(originalcode4)
label(exit4)
globalalloc(pWaterLevel,4)
aobscan(waterSub_AOB,8B 4F 0C 6B F6 2C 8B 54 24 0C 29 54 0E 0C 8D 44 0E 0C)
label(waterSubJMP)
registersymbol(waterSubJMP)
aobscan(waterAdd_AOB,01 48 0C 8B 48 0C 85 ED)
label(waterAddJMP)
registersymbol(waterAddJMP)
aobscan(maxWaterCmp_AOB,8B 46 0C 03 44 24 18 8B 54 24 1C 39 50 0C)
label(maxWaterCmpJMP)
registersymbol(maxWaterCmpJMP)
aobscan(waterRead_AOB,8B 56 0C 6B FF 2C 8B 44 17 0C 5F 5E C3)
label(waterReadJMP)
registersymbol(waterReadJMP)
aobscan(waterSubB_AOB,8B 56 0C 6B FF 2C 8B 44 24 0C 89 44 17 0C 5E 5F)
label(waterSubBJMP)
registersymbol(waterSubBJMP)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,[esp+0C]
///cmp dword ptr [esi+ecx+0C],#100
///jge originalcode
///mov [esi+ecx+0C],#100
///mov edx,0
cmp dword ptr [esi+ecx+0C],edx
jg originalcode
mov [esi+ecx+0C],#180
mov edx,0

originalcode:
//mov edx,[esp+0C]
sub [esi+ecx+0C],edx

exit:
jmp returnhere

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 'R'      //key R
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
push edx
je originalcode1

mov edx,[maxWaterLevel]
sub edx,4
cmp dword ptr [eax+0C],edx
jle originalcode1
mov dword ptr [eax+0C],edx

originalcode1:
add [eax+0C],ecx
mov ecx,[eax+0C]

exit1:
pop edx
jmp returnhere1

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov edx,[esp+1C]
mov [maxWaterLevel],edx

originalcode2:
//mov edx,[esp+1C]
cmp [eax+0C],edx

exit2:
jmp returnhere2

newmem3: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,edi
add eax,edx
add eax,0C
mov [pWaterLevel],eax

originalcode3:
mov eax,[edi+edx+0C]
pop edi

exit3:
jmp returnhere3

newmem4: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[esp+0C]
cmp eax,#100
jge originalcode4
mov eax,#100

originalcode4:
//mov eax,[esp+0C]
mov [edi+edx+0C],eax

exit4:
jmp returnhere4

waterSub_AOB+6:                      //"Vessel.exe"+FD381:
waterSubJMP:
jmp newmem
nop
nop
nop
returnhere:

waterAdd_AOB:                        //"Vessel.exe"+FE78C:
waterAddJMP:
jmp newmem1
nop
returnhere1:

maxWaterCmp_AOB+7:                   //"Vessel.exe"+FE757:
maxWaterCmpJMP:
jmp newmem2
nop
nop
returnhere2:

waterRead_AOB+6:                     //"Vessel.exe"+FD2F3:
waterReadJMP:
jmp newmem3
returnhere3:

waterSubB_AOB+6:                     //"Vessel.exe"+FD3F3:
waterSubBJMP:
jmp newmem4
nop
nop
nop
returnhere4:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
waterSubJMP:                         //"Vessel.exe"+FD381:
db 8B 54 24 0C 29 54 0E 0C
//Alt: mov edx,[esp+0C]
//Alt: sub [esi+ecx+0C],edx
dealloc(newmem1)
waterAddJMP:                         //"Vessel.exe"+FE78C:
db 01 48 0C 8B 48 0C
//Alt: add [eax+0C],ecx
//Alt: mov ecx,[eax+0C]
dealloc(newmem2)
maxWaterCmpJMP:                      //"Vessel.exe"+FE757:
db 8B 54 24 1C 39 50 0C
//Alt: mov edx,[esp+1C]
//Alt: cmp [eax+0C],edx
dealloc(maxWaterLevel)
dealloc(newmem3)
waterReadJMP:                        //"Vessel.exe"+FD2F3:
db 8B 44 17 0C 5F
//Alt: mov eax,[edi+edx+0C]
//Alt: pop edi
dealloc(pWaterLevel)
dealloc(newmem4)
waterSubBJMP:                        //"Vessel.exe"+FD3F3:
db 8B 44 24 0C 89 44 17 0C
//Alt: mov eax,[esp+0C]
//Alt: mov [edi+edx+0C],eax
unregistersymbol(waterSubJMP)
unregistersymbol(waterAddJMP)
unregistersymbol(maxWaterCmpJMP)
unregistersymbol(waterReadJMP)
unregistersymbol(waterSubBJMP)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Liquid in Container Level (press + to refill)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pWaterLevel</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>107</Key>
              </Keys>
              <Value>1000</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>water - Code :sub [esi+ecx+0C],edx</Description>
      <Address>004FD385</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FD385</ModuleNameOffset>
      <Before>
        <Byte>2C</Byte>
        <Byte>8B</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>54</Byte>
        <Byte>0E</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>0E</Byte>
        <Byte>0C</Byte>
        <Byte>5F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>water + 1 Code :add [eax+0C],ecx</Description>
      <Address>004FE78C</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FE78C</ModuleNameOffset>
      <Before>
        <Byte>B9</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>01</Byte>
        <Byte>48</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>48</Byte>
        <Byte>0C</Byte>
        <Byte>85</Byte>
        <Byte>ED</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>water + 2 Code :mov [eax+0C],ecx</Description>
      <Address>004FE7A9</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FE7A9</ModuleNameOffset>
      <Before>
        <Byte>CA</Byte>
        <Byte>7E</Byte>
        <Byte>02</Byte>
        <Byte>8B</Byte>
        <Byte>CA</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>84</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>water cmp max Code :cmp [eax+0C],edx</Description>
      <Address>004FE75B</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FE75B</ModuleNameOffset>
      <Before>
        <Byte>18</Byte>
        <Byte>8B</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>1C</Byte>
      </Before>
      <Actual>
        <Byte>39</Byte>
        <Byte>50</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>7C</Byte>
        <Byte>15</Byte>
        <Byte>85</Byte>
        <Byte>ED</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>water access Code :mov eax,[edi+edx+0C]</Description>
      <Address>004FD2F3</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FD2F3</ModuleNameOffset>
      <Before>
        <Byte>56</Byte>
        <Byte>0C</Byte>
        <Byte>6B</Byte>
        <Byte>FF</Byte>
        <Byte>2C</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>17</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>5F</Byte>
        <Byte>33</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>water - 2 Code :mov [edi+edx+0C],eax</Description>
      <Address>004FD3F7</Address>
      <ModuleName>Vessel.exe</ModuleName>
      <ModuleNameOffset>FD3F7</ModuleNameOffset>
      <Before>
        <Byte>2C</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>44</Byte>
        <Byte>17</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>5F</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pWaterLevel</Name>
      <Address>01B20000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
