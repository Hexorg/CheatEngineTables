<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>45</ID>
      <Description>"[X] &lt;== Batlle Worlds Kronos v1.0.0 Script 1.0 (JIT) Second Approach"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Battle Worlds Kronos
 Game Version  : 1.0.0
 Game Sponsor  : RELOADED
 Proces Name   : BattleWorldsKronos.exe
 Script Version: 1.0 (JIT - Approach 2)
 CE Version    : 6.3
 Release date  : 10-Dec-2013
 Author        : Recifense
 History:
 10-Dec-13: First Release
 Features:
 - Unlimited Actions per turn
 - God Mode
 - Some Pointers
 - Mono JIT system
===========================================
}

//=========================================
// Definitions
define(APPN,"Mono.dll")
define(LUDO,"BattleWorldsKronos.exe")

//=========================================
define(ctSMTD,50)     // MTD Structure Size (#80)
//=========================================
// Structures
struct HMD            // Hacked Method Info
 iHMStat: dd ?        // 0 = Not Installed, 1 = Installed
 iOMSize: dd ?        // Size of the Original Method
 aOCName: resb 16     // Name of the Class  (C type)
 aOMName: resb 16     // Name of the Method (C type)
 iOMAddr: dd ?        // Original Method Current Code Address
 iHMDelt: dd ?        // Delta for Hacking Point
 iHMSize: dd ?        // Size of the array for hacking
 aobOMTD: resb 8      // Original HP AOB (for asserting and restore)
 aobHMTD: resb 8      // AOB of Hacking Code (for replacing original)
 iHMEntr: dd ?        // Hacking Entry Point Address
 iHMBack: dd ?        // Hacking Return Address
 pOMStru: dd ?        // Pointer to Method Structure (for debugging)
endstruct

struct JIT            // Mono JIt Info
 pMethod: dd ?        // Pointer to Method
 dd ?
 iMDAddr: dd ?        // Code Start Memory Address
 dd ?
 iMDSize: dd ?        // Method code size
endstruct

struct MMD            // More Info of Mono Method MDI
 iIDValu: dd ?        // Method ID Number (&lt;&gt;0)
 wMIndex: dw ?        // Method Index
 dw ?
 pMClass: dd ?        // Pointer to Class
 dd ?
 pMDName: dd ?        // Pointer to Method ASCII name
endstruct

struct STK
  oldebp: dd ?
  retadd: dd ?
  profil: dd ?
  method: dd ?
  jitnfo: dd ?
  result: dd ?
endstruct

//=========================================
[ENABLE]
//=========================================
alloc(MyMono,8192,APPN)
alloc(MyProfiler,4096,APPN)
//=========================================
// Mono Declaration section
label(_MonThread)
label(_MonoProfileJitResult)
label(_MPMEExit)
label(_ProfilerCallBack)
label(_MonMethods)
label(_ExitMMD)
label(_CheckMethodByName)
label(_ChkMN00)
label(_ChkMN01)
label(_ChkMN02)
label(_ChkMN03)
label(_ChkMN04)
label(_ChkMN05)
label(_ExitCMD)
label(_CompareString)
label(_CmpSG00)
label(_ExitCSG)
label(pDomain)
label(pMethodStr)
label(pMethodName)
label(iMethodIndex)
label(pClass)
label(pClassName)
label(pJitInfo)
label(pJitStart)
label(iJitSize)
label(iNumMethods)
label(MethodList)
label(Method00)
label(Method01)
label(Method02)
// General Declaration section
label(_SelUnitHP)
label(_ExitSUH)
label(_SelUnitActions)
label(_SelUA00)
label(_ExitSUA)
label(_GodMode)
label(_ExitGMD)
label(iEnableUMA)
label(iEnableGMD)
label(pCommon)
label(pSel)
label(pActions)
label(pHP)

//=========================================
// Mono Registering Symbols
registersymbol(MyMono)
registersymbol(_MonThread)
registersymbol(_MonoProfileJitResult)
registersymbol(_ProfilerCallBack)
registersymbol(pDomain)
registersymbol(pMethodStr)
registersymbol(pMethodName)
registersymbol(iMethodIndex)
registersymbol(pClass)
registersymbol(pClassName)
registersymbol(pJitInfo)
registersymbol(pJitStart)
registersymbol(iJitSize)
registersymbol(iNumMethods)
registersymbol(MethodList)
registersymbol(Method00)
registersymbol(Method01)
registersymbol(Method02)
//=========================================
// General Registering Symbols
registersymbol(iEnableUMA)
registersymbol(iEnableGMD)
registersymbol(pCommon)
registersymbol(pSel)
registersymbol(pActions)
registersymbol(pHP)
registersymbol(_SelUnitHP)
registersymbol(_SelUnitActions)
registersymbol(_GodMode)

//=========================================
MyMono:
//=========================================
// Run once (Original By Dark Byte)
//=========================================
_MonThread:
 call mono.mono_get_root_domain    // Get App Domain
 mov [pDomain],eax

 push eax
 call mono.mono_thread_attach
 add esp,4

 push _ProfilerCallBack
 push MyProfiler
 call mono.mono_profiler_install
 add esp,8

 push _MonoProfileJitResult        // Procedure called when a Method is JITted
 call mono.mono_profiler_install_jit_end
 add esp,4

 call mono.mono_profiler_get_events

 or eax,10                        // MONO_PROFILE_JIT_COMPILATION
 push eax
 call mono.mono_profiler_set_events
 add esp,4
 ret

//=========================================
// (Original By Dark Byte)
 _ProfilerCallBack:
  ret

//=========================================
//Entry: (*prof, *method, *jinfo, int result); (Original By Dark Byte)
//=========================================
_MonoProfileJitResult:
 push ebp
 mov ebp,esp

 push [ebp+STK.method]
 pop [pMethodStr]

 push [ebp+STK.jitnfo]
 pop [pJitInfo]

 push [ebp+STK.method]
 call mono.mono_method_get_name
 add esp, 4
 mov [pMethodName],eax

 push [ebp+STK.method]
 call mono.mono_method_get_class
 add esp, 4
 mov [pClass],eax

 push eax
 call mono.mono_class_get_name
 add esp, 4
 mov [pClassName],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_start
 add esp,4
 mov [pJitStart],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_size
 add esp,4
 mov [iJitSize],eax

 call _MonMethods

_MPMEExit:
 pop ebp
 ret

//=========================================
// Find out a particular method code address by its name (By RC)
_MonMethods:
 push eax

 cmp dword ptr [iNumMethods],00
 je _ExitMMD

 mov eax,[pMethodName]             // Get paMethodName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pClassName]              // Get paClassName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pJitInfo]                // Get pJitInfoStr
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 call _CheckMethodByName

_ExitMMD:
 pop eax
 ret

//=========================================
// By RC
_CheckMethodByName:
 pushad

 mov ebp,MethodList                 // Point to First Method
 xor ebx,ebx                        // Index = 0

// Verify if any method used in the Script
// Check Size
_ChkMN00:
 mov eax,[ebp+HMD.iOMSize]         // Method2Bfound  Size
 cmp eax,[iJitSize]                // Current Method Size
 je _ChkMN02                       // jump if a match

_ChkMN01:
 lea ebp,[ebp+ctSMTD]              // Point to next method info
 inc ebx
 cmp ebx,[iNumMethods]             // Finished?
 js _ChkMN00                       // If false, continue ...
 jmp _ExitCMD                      // ... Else, exit.

_ChkMN02:
// Check Class Name
 mov esi,[pClassName]
 lea edi,[ebp+HMD.aOCName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// Check Class Name
 mov esi,[pMethodName]
 lea edi,[ebp+HMD.aOMName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// One of the Methods was found
 cmp dword ptr [ebp+HMD.iHMStat],0 // Method already hacked?
 je _ChkMN03                       // Jump if false

 mov eax,[pJitStart]
 cmp eax,[ebp+HMD.iOMAddr]
 je _ExitCMD                       // Jump if same address

// Assert and hack the Method
_ChkMN03:
 xor eax,eax
 mov [ebp+HMD.iHMStat],eax         // Status = Not hacked yet
 mov eax,[pJitStart]               // Get method address
 mov [ebp+HMD.iOMAddr],eax         // Update Original Method Current Address
 add eax,[ebp+HMD.iHMDelt]         // Point to Hacking Point
 mov esi,eax                       // Save address for assertion
 mov [ebp+HMD.iHMEntr],eax         // Update Code Entry Point
 add eax,[ebp+HMD.iHMSize]         // Point to Return Point
 mov [ebp+HMD.iHMBack],eax         // Update Code Return Point

// Asserting
 xor ebx,ebx                       // Index = 0
 lea edi,[ebp+HMD.aobOMTD]         // Point expected AOB

_ChkMN04:
 mov al,[esi+ebx]
 cmp al,[edi+ebx]
 jne _ExitCMD

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN04                       // Continue if false

// Hacking
 xor ebx,ebx
 mov edi,[ebp+HMD.iHMEntr]
 lea esi,[ebp+HMD.aobHMTD]

_ChkMN05:
 mov al,[esi+ebx]
 mov [edi+ebx],al

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN05                       // Continue if false

 mov eax,1
 mov [ebp+HMD.iHMStat],eax         // Status = Hacked

_ExitCMD:
 popad
 ret

//=========================================
// Compare two strings (max size = 16) (by RC)
// Entry: ESI and EDI
// Output: Z = found
_CompareString:
 push eax
 push ecx

 xor ecx,ecx

_CmpSG00:
 mov al,[edi+ecx]
 cmp al,[esi+ecx]
 jne _ExitCSG                      // Jump if name does not match

 cmp al,0                          // Found ?
 je _ExitCSG                       // Continue if true

 inc ecx                           // Increase Index
 cmp ecx,#16
 js _CmpSG00

 xor eax,eax

_ExitCSG:
 pop ecx
 pop eax
 ret

//*****************************************
// SCRIPTS FOR CHEATING
//*****************************************
//=========================================
// Upon selecting a unit (Method00)
_SelUnitHP:
 push [ebp-60]                     // Original code
 mov eax,[ebp-60]                  // Original code

 test eax,eax
 jz _ExitSUH

 mov [pSel],eax
 mov eax,[eax+08]
 mov [pCommon],eax

_ExitSUH:
 mov eax,[ebp-60]                  // Original code
 jmp [Method00+HMD.iHMBack]        // Back to main code

//=========================================
// Upon selecting a unit (Method01)
_SelUnitActions:
 mov eax,[edi+6C]                  // Original code
 sub esp,0C                        // Original code

 mov [pActions],eax

 push ebx
 push ecx
 push edx

 test eax,eax
 jz _ExitSUA

 cmp dword ptr [iEnableUMA],0
 je _ExitSUA                       // Jump if feature is disabled

 mov ebx,[eax+08]
 cmp ebx,[pCommon]
 jne _ExitSUA

 mov ebx,[eax+1c]                  // pActionList
 test ebx,ebx
 jz _ExitSUA

 mov ecx,[ebx+0c]
 test ecx,ecx                      // Is there at least one action?
 jz _ExitSUA                       // Jump if false

 cmp ecx,#04
 jns _ExitSUA

 lea ebx,[ebx+10]                  // Point to 1st action pointer

_SelUA00:
 mov edx,[ebx]                     // Get pAction

 mov dword ptr [edx+10],00         // Reset UsedAction
 lea ebx,[ebx+04]                  // Point to next
 loop _SelUA00                     // Loop until ecx = 0

_ExitSUA:
 pop edx
 pop ecx
 pop ebx

 mov eax,[edi+6C]                  // Original code
 jmp [Method01+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method02)
_GodMode:
 mov ebx,[ebp+08]                  // Original code (pUNIT)

 mov [pHP],ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov edi,[ebx+08]
 cmp edi,[pCommon]
 jne _ExitGMD

 xor edi,edi

 mov [ebp+10],edi                  // Make DAMAGE = 0

_ExitGMD:
 mov edi,[ebp+10]                  // Original code (DAMAGE)
 jmp [Method02+HMD.iHMBack]        // Back to main code

//=========================================
 db '===================================&gt;'
 db 'CE6.3 Script by Recifense 121013'
//=========================================
// Mono Variables
pDomain:
 dd 0
pMethodStr:
 dd 0
pMethodName:
 dd 0
iMethodIndex:
 dd 0
pClass:
 dd 0
pClassName:
 dd 0
pJitInfo:
 dd 0
pJitStart:
 dd 0
iJitSize:
 dd 0
iNumMethods:
 dd 3
 db 'Methods:'
MethodList:
Method00:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 00000aa8                         // iOMSize ( 4)
 db 'IngameHUD'                      // aOCName (16)
 db 0,1,2,3,4,5,6
 db 'UpdateUnitStats'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 0000019c                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db ff,75,a0,8b,45,a0                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _SelUnitHP
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method01:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000114b                         // iOMSize ( 4)
 db 'IngameUI'                       // aOCName (16)
 db 0,0,1,2,3,4,5,6
 db 'UpdatePosition'                 // aOMName (16)
 db 0,1
 dd 0                                // iOMAddr ( 4)
 dd 0000082b                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 8b,47,6c,83,ec,0c                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _SelUnitActions
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method02:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 000000ef                         // iOMSize ( 4)
 db 'HealthModule'                   // aOCName (16)
 db 0,4,5,6
 db 'ApplyDamage'                    // aOMName (16)
 db 0,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 00000008                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 8b,5d,08,8b,7d,10                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _GodMode
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

//=========================================
 db '===============&gt;'
//=========================================
// General Variables
iEnableUMA:
 dd 0
iEnableGMD:
 dd 0
pCommon:
 dd 55555555
pSel:
 dd 0
pActions:
 dd 0
pHP:
 dd 0

//=========================================
// Hacking Points
// None

//=========================================
 createthread(_MonThread)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
// NO HP
define(no_disable,Recifense)

//=========================================
// Unregistering Symbols
//=========================================
// Mono Registering Symbols
unregistersymbol(MyMono)
unregistersymbol(_MonThread)
unregistersymbol(_MonoProfileJitResult)
unregistersymbol(_ProfilerCallBack)
unregistersymbol(pDomain)
unregistersymbol(pMethodStr)
unregistersymbol(pMethodName)
unregistersymbol(iMethodIndex)
unregistersymbol(pClass)
unregistersymbol(pClassName)
unregistersymbol(pJitInfo)
unregistersymbol(pJitStart)
unregistersymbol(iJitSize)
unregistersymbol(iNumMethods)
unregistersymbol(MethodList)
unregistersymbol(Method00)
unregistersymbol(Method01)
unregistersymbol(Method02)

//=========================================
// General Registering Symbols
unregistersymbol(iEnableUMA)
unregistersymbol(pCommon)
unregistersymbol(pSel)
unregistersymbol(pActions)
unregistersymbol(pHP)
unregistersymbol(_SelUnitHP)
unregistersymbol(_SelUnitActions)
unregistersymbol(_GodMode)

//=========================================
//dealloc(MyMono)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
  First script using the Mono.dll Approach.
  Method00:
  KingArt.BW.Game.Unity.Viewmodels.IngameHUD:
  UpdateUnitStats () + 0x19c (1D72F480 1D72FF28)
  [003E4E70 - Unity Root Domain]

  Method01
  KingArt.BW.Game.Unity.Behaviours.IngameUI:
  UpdatePosition () + 0x82b (1D7548E8 1D755A33)
  [003E4E70 - Unity Root Domain]

  Method02
  KingArt.BW.Game.Core.Units.Modules.HealthModule:
  ApplyDamage (KingArt.BW.Game.Core.Units.IDamageSource,int) + 0x8 (48CC3680 48CC376F)
  [009A4E70 - Unity Root Domain]
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Enable/Disable Unlimited Actions =&gt; (1/0)"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableUMA</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>17</Key>
            <Key>36</Key>
          </Keys>
          <Value>1</Value>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>17</Key>
            <Key>35</Key>
          </Keys>
          <Value>0</Value>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGMD</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>17</Key>
            <Key>36</Key>
          </Keys>
          <Value>1</Value>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>17</Key>
            <Key>35</Key>
          </Keys>
          <Value>0</Value>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>JITAddress</Name>
      <Address>098B1086</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pRootDomain</Name>
      <Address>098B108E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMN</Name>
      <Address>098B107E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableEXT</Name>
      <Address>098B1082</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonThread</Name>
      <Address>0FFF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonoProfileJitResult</Name>
      <Address>0FFF0046</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_ProfilerCallBack</Name>
      <Address>0FFF0045</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDomain</Name>
      <Address>0FFF02D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMethodStr</Name>
      <Address>0FFF02D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMethodName</Name>
      <Address>0FFF02D8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMethodIndex</Name>
      <Address>0FFF02DC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pClass</Name>
      <Address>0FFF02E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pClassName</Name>
      <Address>0FFF02E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pJitInfo</Name>
      <Address>0FFF02E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pJitStart</Name>
      <Address>0FFF02EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iJitSize</Name>
      <Address>0FFF02F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iNumMethods</Name>
      <Address>0FFF02F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MethodList</Name>
      <Address>0FFF0300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method00</Name>
      <Address>0FFF0300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method01</Name>
      <Address>0FFF0350</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method02</Name>
      <Address>0FFF03A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableUMA</Name>
      <Address>0FFF0400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMD</Name>
      <Address>0FFF0404</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommon</Name>
      <Address>0FFF0408</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSel</Name>
      <Address>0FFF040C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pActions</Name>
      <Address>0FFF0410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHP</Name>
      <Address>0FFF0414</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_SelUnitHP</Name>
      <Address>0FFF01C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_SelUnitActions</Name>
      <Address>0FFF01EA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_GodMode</Name>
      <Address>0FFF0259</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>HI Dark Byte,
- 
[11-Dec-13]:
I have added a second approach using your "mono profiling" idea (first script in your post)
-
I think the result was pretty better than the previous one;
-
Unfortunately I could not use the second the second script of your post, since I was not able to find JIT Info from there. I have used almost all functions of the mono library realted to methods/class/image/header, etc).
-----
Please give me your thoughts.
-----
Cheers!
=================================================================
Called my attention two things in your posts:
1) In one, you question if something could be made using MONO.DLL;
2) A post with a script that could be used to check to what method a chunk of memory was realted to.
-
Well , during the time that my PC was broken, I decided to study the MONO system and I have come to a way of hacking the code using a pesudo-JIT-System. 
-
Now the guy can load the table at main menu, enable/disable the cheats and start playing. The cheats will work when needed. 
-
I think this will be a breakthrough to scripts/tables for games that use mono.dll. :)
-
Please have a look at the sctructures. It will help you to understand the script.
-
[NOTE]
The first script is only used to find the method info (name/offset/etc)
[NOTE]
The second script has two parts:
1) It identifies if the method is used in the CHEAT part of the script and hack using a pseudo-JIT-System;
2) The almost traditional cheat script.
-----
Please give me your thoughts.
-----
Cheers!
</Comments>
</CheatTable>
