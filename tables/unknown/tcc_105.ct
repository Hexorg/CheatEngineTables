<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Inf. HP"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1,256) //2kb should be enough
alloc(newmem2,128)
label(setcurrenthp1)
label(returnhere1)
label(originalcode1)
label(exit1)
label(returnhere2)
label(originalcode2)
label(exit2)
label(supervoid)
label(pHero)
label(hpsubjmp)
label(hhpaccessjmp)
registersymbol(supervoid)
registersymbol(pHero)
registersymbol(hpsubjmp)
registersymbol(hhpaccessjmp)
aobscan(hpsub_AOB,D8 64 24 44 D9 5C 24 48 D9 44 24 48 D9 56 2C) //+8
aobscan(hhpaccess_AOB,8B 41 0C 8B 4C 24 04 D9 04 01 C2 04 00 CC CC CC 83 EC 08)  //+7

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp esi,[pHero]  //check player
je setcurrenthp1
jmp originalcode1

setcurrenthp1:
fstp dword ptr [supervoid]
fld dword ptr [esi+2C]
fstp dword ptr [esp+48]

originalcode1:
fld dword ptr [esp+48]
fst dword ptr [esi+2C]

exit1:
jmp returnhere1

///

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHero],ecx

originalcode2:
fld dword ptr [ecx+eax]
ret 0004

exit2:
jmp returnhere2

///
supervoid:
dd 0
pHero:
dd 0
///

hpsub_AOB+8:      //"EngineDLL_s.dll"+1A0E05:
hpsubjmp:
jmp newmem1
nop
nop
returnhere1:

hhpaccess_AOB+7:  //"EngineDLL_s.dll"+358C7:
hhpaccessjmp:
jmp newmem2
nop
returnhere2:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
dealloc(newmem2)
hpsubjmp:       //"EngineDLL_s.dll"+1A0E05:
fld dword ptr [esp+48]
fst dword ptr [esi+2C]
//Alt: db D9 44 24 48 D9 56 2C
hhpaccessjmp:   //"EngineDLL_s.dll"+358C7:
db D9 04 01 C2 04 00
//Alt: fld dword ptr [ecx+eax]
//Alt: ret 0004
unregistersymbol(supervoid)
unregistersymbol(pHero)
unregistersymbol(hpsubjmp)
unregistersymbol(hhpaccessjmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"HP Current"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pHero</Address>
          <Offsets>
            <Offset>2C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"not HP Max"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pHero</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Inf. Curse"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,256) //2kb should be enough
label(returnhere)
label(cursesubnormal)
label(originalcode)
label(exit)
label(cursesubjmp)
label(pCurse)
label(cursevoid)
registersymbol(cursesubjmp)
registersymbol(pCurse)
registersymbol(cursevoid)
aobscan(cursesub_AOB,D8 4C 24 14 DC 6C 24 24 D9 5E 50)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pCurse],esi
fsubr qword ptr [esp+24]
fstp dword ptr [cursevoid]
push ecx
mov ecx,[cursevoid]
cmp dword ptr [esi+50],ecx
jle cursesubnormal
pop ecx
fld dword ptr [esi+50]
jmp originalcode

cursesubnormal:
pop ecx
fld dword ptr [cursevoid]

originalcode:
//fsubr qword ptr [esp+24]
fstp dword ptr [esi+50]

exit:
jmp returnhere

///
pCurse:
dd 0
cursevoid:
dd 0
///

cursesub_AOB+4: //"TCC.exe"+211AD:
cursesubjmp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
cursesubjmp:   //"TCC.exe"+211AD:
db DC 6C 24 24 D9 5E 50
//Alt: fsubr qword ptr [esp+24]
//Alt: fstp dword ptr [esi+50]
unregistersymbol(cursesubjmp)
unregistersymbol(pCurse)
unregistersymbol(cursevoid)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Curse"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pCurse</Address>
          <Offsets>
            <Offset>50</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"Inf. Durability"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(dursubnormal)
label(originalcode)
label(exit)
label(dursubjmp)
registersymbol(dursubjmp)
aobscan(dursub_AOB,D8 64 24 08 D9 5C 24 08 D9 44 24 08 D9 96 A0 00 00 00)   //+8

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[esp+08]
cmp dword ptr [esi+000000A0],ecx
jle dursubnormal
pop ecx
fld dword ptr [esi+000000A0]
jmp originalcode

dursubnormal:
pop ecx
fld dword ptr [esp+08]

originalcode:
//fld dword ptr [esp+08]
fst dword ptr [esi+000000A0]

exit:
jmp returnhere

dursub_AOB+8:   //"TCC.exe"+DC037:
dursubjmp:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dursubjmp:     //"TCC.exe"+DC037:
db D9 44 24 08 D9 96 A0 00 00 00
//Alt: fld dword ptr [esp+08]
//Alt: fst dword ptr [esi+000000A0]
unregistersymbol(dursubjmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Inf. Arrow"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(arrowsubjmp)
registersymbol(arrowsubjmp)
aobscan(arrowsub_AOB,01 88 E4 00 00 00 8B 0D B8 6B 5E 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp ecx,0
jge originalcode
mov ecx,0

originalcode:
add [eax+000000E4],ecx

exit:
jmp returnhere

arrowsub_AOB: //"TCC.exe"+D9DC5:
arrowsubjmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
arrowsubjmp:   //"TCC.exe"+D9DC5:
db 01 88 E4 00 00 00
//Alt: add [eax+000000E4],ecx
unregistersymbol(arrowsubjmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Combo Multiplier"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,256) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(addcombojmp)
label(iAddCombo)
registersymbol(addcombojmp)
registersymbol(iAddCombo)
aobscan(addcombo_AOB,84 C0 74 02 FF 07 8B 0F 3B 8E 40 01 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
test al,al
je 004C2BBA
push ecx
mov ecx,[iAddCombo]
add [edi],ecx
pop ecx

originalcode:
//test al,al
//je 004C2BBA
//inc [edi]

exit:
jmp returnhere

///
iAddCombo:
dd #2
///

addcombo_AOB: //"TCC.exe"+C2BB4:
addcombojmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
addcombojmp:   //"TCC.exe"+C2BB4:
db 84 C0 74 02 FF 07
//Alt: test al,al
//Alt: je 004C2BBA
//Alt: inc [edi]
unregistersymbol(addcombojmp)
unregistersymbol(iAddCombo)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"x"</Description>
          <Color>80000008</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>iAddCombo</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"Inf. Techniques Pt"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(techptsubjmp)
registersymbol(techptsubjmp)
aobscan(techptsub_AOB,48 89 81 24 11 00 00 FF 02 B0 01 C2 0C 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//dec eax
mov [ecx+00001124],eax

exit:
jmp returnhere

techptsub_AOB:      //"TCC.exe"+B42ED:
techptsubjmp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
techptsubjmp:  //"TCC.exe"+B42ED:
db 48 89 81 24 11 00 00
//Alt: dec eax
//Alt: mov [ecx+00001124],eax
unregistersymbol(techptsubjmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"Inf. Skills Pt"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(skillptsubjmp)
registersymbol(skillptsubjmp)
aobscan(skillptsub_AOB,03 C6 89 81 20 11 00 00 5E 01 54 B9 24 B0 01)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp esi,0
jge originalcode
mov esi,0

originalcode:
add eax,esi
mov [ecx+00001120],eax

exit:
jmp returnhere

skillptsub_AOB:       //"TCC.exe"+B4336:
skillptsubjmp:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
skillptsubjmp: //"TCC.exe"+B4336:
db 03 C6 89 81 20 11 00 00
//Alt: add eax,esi
//Alt: mov [ecx+00001120],eax
unregistersymbol(skillptsubjmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Set Current Techniques Pt (open the Techniques menu before editing)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(techptmenuaccessjmp)
label(pTechPt)
registersymbol(techptmenuaccessjmp)
registersymbol(pTechPt)
aobscan(techptmenuaccess_AOB,8B 80 24 11 00 00 50 8D 4C 24 28)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pTechPt],eax

originalcode:
mov eax,[eax+00001124]

exit:
jmp returnhere

///
pTechPt:
dd 0
///

techptmenuaccess_AOB: //"TCC.exe"+3C373:
techptmenuaccessjmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
techptmenuaccessjmp:  //"TCC.exe"+3C373:
db 8B 80 24 11 00 00
//Alt: mov eax,[eax+00001124]
unregistersymbol(techptmenuaccessjmp)
unregistersymbol(pTechPt)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Techniques Pt (Ctrl_num+:set2,Ctrl_num-:set0)"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pTechPt</Address>
          <Offsets>
            <Offset>1124</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>107</Key>
              </Keys>
              <Value>2</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Set Current Skills Pt (open the Skills menu before editing)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(skillptmenuaccessjmp)
label(pSkillPt)
registersymbol(skillptmenuaccessjmp)
registersymbol(pSkillPt)
aobscan(skillptmenuaccess_AOB,8B 80 20 11 00 00 50 8D 4C 24 28)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSkillPt],eax

originalcode:
mov eax,[eax+00001120]

exit:
jmp returnhere

///
pSkillPt:
dd 0
///

skillptmenuaccess_AOB: //"TCC.exe"+3C373:
skillptmenuaccessjmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
skillptmenuaccessjmp:  //"TCC.exe"+3C373:
db 8B 80 20 11 00 00
//Alt: mov eax,[eax+00001120]
unregistersymbol(skillptmenuaccessjmp)
unregistersymbol(pSkillPt)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Skills Pt (Shift_num+:set2,Shift_num-:set0)"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkillPt</Address>
          <Offsets>
            <Offset>1120</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>107</Key>
              </Keys>
              <Value>2</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Set Skills (open the Upgrades menu before editing)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,128) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(skillaccessjmp)
label(pSkills)
registersymbol(skillaccessjmp)
registersymbol(pSkills)
aobscan(skillaccess_AOB,8B 0C 30 89 4C 37 FC 83 C6 04)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSkills],eax

originalcode:
mov ecx,[eax+esi]
mov [edi+esi-04],ecx

exit:
jmp returnhere

///
pSkills:
dd 0
///

skillaccess_AOB:    //"TCC.exe"+35F97:
skillaccessjmp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
skillaccessjmp:  //"TCC.exe"+35F97:
db 8B 0C 30 89 4C 37 FC
//Alt: mov ecx,[eax+esi]
//Alt: mov [edi+esi-04],ecx
unregistersymbol(skillaccessjmp)
unregistersymbol(pSkills)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Strength"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkills</Address>
          <Offsets>
            <Offset>24</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Templar's Curse"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkills</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Weapon Mastery"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkills</Address>
          <Offsets>
            <Offset>2C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Armor Mastery"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkills</Address>
          <Offsets>
            <Offset>30</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"Constitution"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>pSkills</Address>
          <Offsets>
            <Offset>34</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>HP - Code :fst dword ptr [esi+2C]</Description>
      <Address>007F0E09</Address>
      <ModuleName>EngineDLL_s.dll</ModuleName>
      <ModuleNameOffset>1A0E09</ModuleNameOffset>
      <Before>
        <Byte>48</Byte>
        <Byte>D9</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>48</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>56</Byte>
        <Byte>2C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>DE</Byte>
        <Byte>D9</Byte>
        <Byte>DF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>HP access 1 (less but first) Code :fld dword ptr [ecx+2C]</Description>
      <Address>004C5623</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>C5623</ModuleNameOffset>
      <Before>
        <Byte>88</Byte>
        <Byte>E4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>41</Byte>
        <Byte>2C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>9D</Byte>
        <Byte>20</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>HP access 2 (more but second) Code :fld dword ptr [ecx+eax]</Description>
      <Address>006858C7</Address>
      <ModuleName>EngineDLL_s.dll</ModuleName>
      <ModuleNameOffset>358C7</ModuleNameOffset>
      <Before>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4C</Byte>
        <Byte>24</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>04</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>combo + Code :inc [edi]</Description>
      <Address>004C2BB8</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>C2BB8</ModuleNameOffset>
      <Before>
        <Byte>D0</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>02</Byte>
      </Before>
      <Actual>
        <Byte>FF</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>0F</Byte>
        <Byte>3B</Byte>
        <Byte>8E</Byte>
        <Byte>40</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>tech pt - Code :mov [ecx+00001124],eax</Description>
      <Address>004B42EE</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>B42EE</ModuleNameOffset>
      <Before>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>07</Byte>
        <Byte>48</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>81</Byte>
        <Byte>24</Byte>
        <Byte>11</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>FF</Byte>
        <Byte>02</Byte>
        <Byte>B0</Byte>
        <Byte>01</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>skill pt - Code :mov esp,909006E8</Description>
      <Address>004B4338</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>B4338</ModuleNameOffset>
      <Before>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>08</Byte>
        <Byte>E9</Byte>
        <Byte>C5</Byte>
      </Before>
      <Actual>
        <Byte>BC</Byte>
        <Byte>E8</Byte>
        <Byte>06</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Actual>
      <After>
        <Byte>5E</Byte>
        <Byte>01</Byte>
        <Byte>54</Byte>
        <Byte>B9</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>first skill access Code :mov ecx,[eax+esi]</Description>
      <Address>00435F97</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>35F97</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>49</Byte>
        <Byte>9A</Byte>
        <Byte>0E</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>0C</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>4C</Byte>
        <Byte>37</Byte>
        <Byte>FC</Byte>
        <Byte>83</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>durability restore (debug menu) Code :fstp dword ptr [esi+000000A0]</Description>
      <Address>004DC9E1</Address>
      <ModuleName>TCC.exe</ModuleName>
      <ModuleNameOffset>DC9E1</ModuleNameOffset>
      <Before>
        <Byte>46</Byte>
        <Byte>28</Byte>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>70</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>9E</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>86</Byte>
        <Byte>A4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
