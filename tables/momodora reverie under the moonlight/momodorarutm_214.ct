<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Undead"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthReadOnHitRetAOB,MomodoraRUtM.exe,39 F3 74 40 F7)
registersymbol(healthReadOnHitRetAOB)
aobscanmodule(healthReadInPoisonRetAOB,MomodoraRUtM.exe,8B ** ** ** ** ** ** 8B 58 04 8D 93 D0)
registersymbol(healthReadInPoisonRetAOB)

///***************************************///

aobscanmodule(healthReadOnHitAOB,MomodoraRUtM.exe,F2 0F 10 01 F2 0F 11 44 24 08)
registersymbol(healthReadOnHitAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+4],healthReadOnHitRetAOB
jne originalcode
movsd xmm0,[ecx]
comisd xmm0,xmm1
ja originalcode
movsd xmm0,xmm1
movsd [ecx],xmm0
fld1
fadd qword ptr [ecx]
fstp qword ptr [ecx]

originalcode:
movsd xmm0,[ecx]
movsd [esp+08],xmm0

exit:
jmp returnhere

///

healthReadOnHitAOB: //"MomodoraRUtM.exe"+1469:
jmp newmem
nop
nop
nop
nop
nop
returnhere:

///***************************************///

aobscanmodule(healthReadInPoisonAOB,MomodoraRUtM.exe,F2 0F 10 06 F2 0F 5C 00)
registersymbol(healthReadInPoisonAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+4],healthReadInPoisonRetAOB
jne originalcode1
movsd xmm0,[esi]
comisd xmm0,[eax]
ja originalcode1
movsd xmm0,[eax]
movsd [esi],xmm0
fld1
fadd qword ptr [esi]
fstp qword ptr [esi]

originalcode1:
movsd xmm0,[esi]
subsd xmm0,[eax]

exit1:
jmp returnhere1

///

healthReadInPoisonAOB: //"MomodoraRUtM.exe"+6C6AB:
jmp newmem1
nop
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(healthReadOnHitRetAOB)
unregistersymbol(healthReadInPoisonRetAOB)

///***************************************///

dealloc(newmem)
healthReadOnHitAOB: //"MomodoraRUtM.exe"+1469:
db F2 0F 10 01 F2 0F 11 44 24 08
//Alt: movsd xmm0,[ecx]
//Alt: movsd [esp+08],xmm0
unregistersymbol(healthReadOnHitAOB)

///***************************************///

dealloc(newmem1)
healthReadInPoisonAOB: //"MomodoraRUtM.exe"+6C6AB:
db F2 0F 10 06 F2 0F 5C 00
//Alt: movsd xmm0,[esi]
//Alt: subsd xmm0,[eax]
unregistersymbol(healthReadInPoisonAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore Item Quantity"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(itemQuantityReadOnUseRetAOB,MomodoraRUtM.exe,F2 0F 10 00 66 0F 2E 05 ** ** ** ** 0F 86 ** ** ** ** 8B ** ** ** ** ** ** 8B 70 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 0F 86)
registersymbol(itemQuantityReadOnUseRetAOB)

///

aobscanmodule(itemQuantityReadOnUseAOB,MomodoraRUtM.exe,F2 0F 10 00 B0 01)
registersymbol(itemQuantityReadOnUseAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+4],itemQuantityReadOnUseRetAOB
jne originalcode
cmp dword ptr [eax+4],0
jne originalcode
fld1
fstp qword ptr [eax]

originalcode:
movsd xmm0,[eax]
mov al,01

exit:
jmp returnhere

///

itemQuantityReadOnUseAOB: //"MomodoraRUtM.exe"+610F4:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
itemQuantityReadOnUseAOB: //"MomodoraRUtM.exe"+610F4:
db F2 0F 10 00 B0 01
//Alt: movsd xmm0,[eax]
//Alt: mov al,01
unregistersymbol(itemQuantityReadOnUseAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Ignore Money"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(notEnoughMoneyFlagChkOnBuyAOB,MomodoraRUtM.exe,85 C0 0F 8E 94 00 00 00 C7)
registersymbol(notEnoughMoneyFlagChkOnBuyAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xor eax,eax

originalcode:
test eax,eax
jng returnhere+94 //MomodoraRUtM.exe+415BCE

exit:
jmp returnhere

///

notEnoughMoneyFlagChkOnBuyAOB: //"MomodoraRUtM.exe"+415B32:
jmp newmem
nop
nop
nop
returnhere:

///*****************************************///

aobscanmodule(moneyWriteOnBuyAOB,MomodoraRUtM.exe,F2 0F 5C 00 F2 0F 11 01)
registersymbol(moneyWriteOnBuyAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
subsd xmm0,[eax]//
xorps xmm1,xmm1
comisd xmm0,xmm1
jae originalcode1
movsd xmm0,xmm1

originalcode1:
//subsd xmm0,[eax]
movsd [ecx],xmm0

exit1:
jmp returnhere1

///

moneyWriteOnBuyAOB: //"MomodoraRUtM.exe"+415C01:
jmp newmem1
nop
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
notEnoughMoneyFlagChkOnBuyAOB: //"MomodoraRUtM.exe"+415B32:
db 85 C0 0F 8E 94 00 00 00
//Alt: test eax,eax
//Alt: jng notEnoughMoneyFlagChkOnBuyAOB+9c //MomodoraRUtM.exe+415BCE
unregistersymbol(notEnoughMoneyFlagChkOnBuyAOB)

///*****************************************///

dealloc(newmem1)
moneyWriteOnBuyAOB: //"MomodoraRUtM.exe"+415C01:
db F2 0F 5C 00 F2 0F 11 01
//Alt: subsd xmm0,[eax]
//Alt: movsd [ecx],xmm0
unregistersymbol(moneyWriteOnBuyAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Arrow Charging Mod"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bEndThread_MomodoraRUtM_keyListener_mem)
registersymbol(bEndThread_MomodoraRUtM_keyListener_mem)
label(bUseArrowChargeKey)
registersymbol(bUseArrowChargeKey)

alloc(MomodoraRUtM_keyListener_mem,2048)
registersymbol(MomodoraRUtM_keyListener_mem)
createthread(MomodoraRUtM_keyListener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)
label(bArrowChargeKeyPressed)

MomodoraRUtM_keyListener_mem:
sub esp,28

keylistenerstart:

cmp byte ptr [bUseArrowChargeKey],1
je @f
mov byte ptr [bArrowChargeKeyPressed],1
jmp keylistenerend

@@:
push 60 //Numeric keypad 0 key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
jne @f
mov byte ptr [bArrowChargeKeyPressed],1
jmp keylistenerend

@@:
mov byte ptr [bArrowChargeKeyPressed],0

keylistenerend:
push #100
call Sleep
cmp dword ptr [bEndThread_MomodoraRUtM_keyListener_mem],1
jne keylistenerstart

keylistenerexit:
add esp,28
mov dword ptr [bEndThread_MomodoraRUtM_keyListener_mem],2
ret

///
bEndThread_MomodoraRUtM_keyListener_mem:
dd 0
bUseArrowChargeKey:
dd 0
bArrowChargeKeyPressed:
dd 0
///

///*****************************************///

aobscanmodule(chargeReadOnArrowChargeAOB,MomodoraRUtM.exe,8B 44 24 44 F2 0F 10 00 F2 ** ** ** ** ** ** ** F2)
registersymbol(chargeReadOnArrowChargeAOB)

label(fCusArrowCharge)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[esp+44]//
movsd xmm0,[eax]//
cmp byte ptr [bArrowChargeKeyPressed],1
jne originalcode
addsd xmm0,[fCusArrowCharge]

originalcode:
//mov eax,[esp+44]
//movsd xmm0,[eax]

exit:
jmp returnhere

///
fCusArrowCharge:
dq (double)400
///

chargeReadOnArrowChargeAOB: //"MomodoraRUtM.exe"+170943:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_MomodoraRUtM_keyListener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_MomodoraRUtM_keyListener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_MomodoraRUtM_keyListener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_MomodoraRUtM_keyListener_mem:
//dd 1

unregistersymbol(bEndThread_MomodoraRUtM_keyListener_mem)
unregistersymbol(bUseArrowChargeKey)
dealloc(MomodoraRUtM_keyListener_mem)
unregistersymbol(MomodoraRUtM_keyListener_mem)

///*****************************************///

dealloc(newmem)
chargeReadOnArrowChargeAOB: //"MomodoraRUtM.exe"+170943:
db 8B 44 24 44 F2 0F 10 00
//Alt: mov eax,[esp+44]
//Alt: movsd xmm0,[eax]
unregistersymbol(chargeReadOnArrowChargeAOB)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Method (Numpad0+R/F:Always/ModKey)"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Always
1:Mod Key (numpad0)
</DropDownList>
          <LastState Value="0" RealAddress="04E60066"/>
          <VariableType>Byte</VariableType>
          <Address>bUseArrowChargeKey</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>82</Key>
              </Keys>
              <Value>0</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>96</Key>
                <Key>70</Key>
              </Keys>
              <Value>1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Inf. Air Jump"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(dJumpFlagReadOnDJumpAOB,MomodoraRUtM.exe,F2 0F 10 8E 20 0D 00 00)
registersymbol(dJumpFlagReadOnDJumpAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorpd xmm1,xmm1
movsd [esi+d20],xmm1

originalcode:
movsd xmm1,[esi+00000D20]

exit:
jmp returnhere

///

dJumpFlagReadOnDJumpAOB: //"MomodoraRUtM.exe"+6BBBE:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dJumpFlagReadOnDJumpAOB: //"MomodoraRUtM.exe"+6BBBE:
db F2 0F 10 8E 20 0D 00 00
//Alt: movsd xmm1,[esi+00000D20]
unregistersymbol(dJumpFlagReadOnDJumpAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>39</ID>
      <Description>"Inf. Mid-Air Dodge"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(airDodgeTimerReadInAirAOB,MomodoraRUtM.exe,F2 0F 10 89 ** ** ** ** 66 0F 57 C0 66 0F 2E C1 76 08 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 66)
registersymbol(airDodgeTimerReadInAirAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorpd xmm1,xmm1

originalcode:
xorpd xmm0,xmm0
ucomisd xmm0,xmm1

exit:
jmp returnhere

///

airDodgeTimerReadInAirAOB: //"MomodoraRUtM.exe"+16C8FE:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
airDodgeTimerReadInAirAOB: //"MomodoraRUtM.exe"+16C8FE:
db 66 0F 57 C0 66 0F 2E C1
//Alt: xorpd xmm0,xmm0
//Alt: ucomisd xmm0,xmm1
unregistersymbol(airDodgeTimerReadInAirAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>""</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"No description"</Description>
          <VariableType>Double</VariableType>
          <Address>051CAFF8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>051CAFFC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"No description"</Description>
          <VariableType>Double</VariableType>
          <Address>051CB3C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"No description"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>051CB3CC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0508C3B8"/>
          <VariableType>Double</VariableType>
          <Address>0508C3B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0508C788"/>
          <VariableType>Double</VariableType>
          <Address>0508C788</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"No description"</Description>
          <VariableType>Double</VariableType>
          <Address>04D32338</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No Description"</Description>
          <LastState Value="0" RealAddress="051BA080"/>
          <VariableType>Double</VariableType>
          <Address>051BA080</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(healthReadInPoisonRetAOB,MomodoraRUtM.exe,8B ** ** ** ** ** ** 8B 58 04 8D 93 D0)
registersymbol(healthReadInPoisonRetAOB)

///

aobscanmodule(healthReadInPoisonAOB,MomodoraRUtM.exe,F2 0F 10 06 F2 0F 5C 00)
registersymbol(healthReadInPoisonAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+4],healthReadInPoisonRetAOB
jne originalcode1
movsd xmm0,[esi]
comisd xmm0,[eax]
ja originalcode1
movsd xmm0,[eax]
movsd [esi],xmm0
fld1
fadd qword ptr [esi]
fstp qword ptr [esi]

originalcode1:
movsd xmm0,[esi]
subsd xmm0,[eax]

exit1:
jmp returnhere1

///

healthReadInPoisonAOB: //"MomodoraRUtM.exe"+6C6AB:
jmp newmem1
nop
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
healthReadInPoisonAOB: //"MomodoraRUtM.exe"+6C6AB:
db F2 0F 10 06 F2 0F 5C 00
//Alt: movsd xmm0,[esi]
//Alt: subsd xmm0,[eax]
unregistersymbol(healthReadInPoisonAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No description"</Description>
          <LastState Value="4160749568" RealAddress="0741F12C"/>
          <VariableType>4 Bytes</VariableType>
          <Address>0741F12C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0734012C"/>
          <VariableType>4 Bytes</VariableType>
          <Address>0734012C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"No description"</Description>
          <LastState Value="-8.53325018599253E-16" RealAddress="07340140"/>
          <VariableType>Double</VariableType>
          <Address>07340140</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0734014C"/>
          <VariableType>Float</VariableType>
          <Address>0734014C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"No description"</Description>
          <LastState Value="1.504632769E-36" RealAddress="0741F0C4"/>
          <VariableType>Float</VariableType>
          <Address>0741F0C4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"No description"</Description>
          <LastState Value="04000000" RealAddress="0741F188"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>0741F188</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"No description"</Description>
          <LastState Value="F8000000" RealAddress="0741F2F8"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>0741F2F8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"No description"</Description>
          <VariableType>Double</VariableType>
          <Address>0C755100</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"No description"</Description>
          <VariableType>Double</VariableType>
          <Address>052A5260</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"$ Fetch"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(moneyReadRetAOB,MomodoraRUtM.exe,89 04 24 8D BC 24 A0 00 00 00 ** ** ** ** ** ** ** ** ** ** ** ** ** ** A1)
registersymbol(moneyReadRetAOB)

///

aobscanmodule(moneyReadAOB,MomodoraRUtM.exe,F3 0F 7E 02 66 0F D6 01 ** ** ** ** ** ** ** ** ** ** 40)
registersymbol(moneyReadAOB)

label(pMoney)
registersymbol(pMoney)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+4],moneyReadRetAOB
jne originalcode
mov [pMoney],edx

originalcode:
movq xmm0,[edx]
movq [ecx],xmm0

exit:
jmp returnhere

///
pMoney:
///

moneyReadAOB: //"MomodoraRUtM.exe"+4FE173:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
unregistersymbol(moneyReadRetAOB)
dealloc(newmem)
moneyReadAOB: //"MomodoraRUtM.exe"+4FE173:
db F3 0F 7E 02 66 0F D6 01
//Alt: movq xmm0,[edx]
//Alt: movq [ecx],xmm0
unregistersymbol(moneyReadAOB)

unregistersymbol(pMoney)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>28</ID>
              <Description>"$"</Description>
              <VariableType>Double</VariableType>
              <Address>pMoney</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pMoney],edi
jne originalcode
movsd xmm1,[edi]

originalcode:
movsd xmm1,[edi]
cvtpd2ps xmm0,xmm0

exit:
jmp returnhere

///

"MomodoraRUtM.exe"+506DA1:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"MomodoraRUtM.exe"+506DA1:
db F2 0F 10 0F 66 0F 5A C0
//Alt: movsd xmm1,[edi]
//Alt: cvtpd2ps xmm0,xmm0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(moneyWriteOnBuyAOB,MomodoraRUtM.exe,F2 0F 5C 00 F2 0F 11 01)
registersymbol(moneyWriteOnBuyAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
subsd xmm0,[eax]//
xorps xmm1,xmm1
comisd xmm0,xmm1
jae originalcode1
movsd xmm0,xmm1

originalcode1:
//subsd xmm0,[eax]
movsd [ecx],xmm0

exit1:
jmp returnhere1

///

moneyWriteOnBuyAOB: //"MomodoraRUtM.exe"+415C01:
jmp newmem1
nop
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1)
moneyWriteOnBuyAOB: //"MomodoraRUtM.exe"+415C01:
db F2 0F 5C 00 F2 0F 11 01
//Alt: subsd xmm0,[eax]
//Alt: movsd [ecx],xmm0
unregistersymbol(moneyWriteOnBuyAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bEndThread_MomodoraRUtM_keyListener_mem)
registersymbol(bEndThread_MomodoraRUtM_keyListener_mem)

alloc(MomodoraRUtM_keyListener_mem,2048)
registersymbol(MomodoraRUtM_keyListener_mem)
createthread(MomodoraRUtM_keyListener_mem)
label(keylistenerstart)
label(keylistenerend)
label(keylistenerexit)
label(bArrowChargeKeyPressed)

MomodoraRUtM_keyListener_mem:
sub esp,28

keylistenerstart:

push 'C'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
jne @f
mov byte ptr [bArrowChargeKeyPressed],1
jmp keylistenerend

@@:
mov byte ptr [bArrowChargeKeyPressed],0

keylistenerend:
push #100
call Sleep
cmp dword ptr [bEndThread_MomodoraRUtM_keyListener_mem],1
jne keylistenerstart

keylistenerexit:
add esp,28
mov dword ptr [bEndThread_MomodoraRUtM_keyListener_mem],2
ret

///
bEndThread_MomodoraRUtM_keyListener_mem:
dd 0
bArrowChargeKeyPressed:
dd 0
///

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_MomodoraRUtM_keyListener_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_MomodoraRUtM_keyListener_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_MomodoraRUtM_keyListener_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_MomodoraRUtM_keyListener_mem:
//dd 1
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="034D60B0"/>
          <VariableType>Double</VariableType>
          <Address>MomodoraRUtM.exe+21660B0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0D25712C"/>
          <VariableType>4 Bytes</VariableType>
          <Address>0D25712C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"No description"</Description>
          <LastState Value="0" RealAddress="0D6C5570"/>
          <VariableType>Double</VariableType>
          <Address>0D6C5570</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"No description"</Description>
          <LastState Value="808463926" RealAddress="0E4C4CE8"/>
          <VariableType>4 Bytes</VariableType>
          <Address>0E4C4CE8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Auto Assemble script"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorpd xmm1,xmm1

originalcode:
//movsd xmm1,[ecx+000023A0]

exit:
jmp returnhere

///

"MomodoraRUtM.exe"+16C8F6:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"MomodoraRUtM.exe"+16C8F6:
db F2 0F 10 89 A0 23 00 00
//Alt: movsd xmm1,[ecx+000023A0]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Always Arrow Charged"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(chargeReadOnArrowChargeAOB,MomodoraRUtM.exe,8B 44 24 44 F2 0F 10 00 F2 ** ** ** ** ** ** ** F2)
registersymbol(chargeReadOnArrowChargeAOB)

label(fCusArrowCharge)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[esp+44]//
movsd xmm0,[eax]//
addsd xmm0,[fCusArrowCharge]

originalcode:
//mov eax,[esp+44]
//movsd xmm0,[eax]

exit:
jmp returnhere

///
fCusArrowCharge:
dq (double)400
///

chargeReadOnArrowChargeAOB: //"MomodoraRUtM.exe"+170943:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
chargeReadOnArrowChargeAOB: //"MomodoraRUtM.exe"+170943:
db 8B 44 24 44 F2 0F 10 00
//Alt: mov eax,[esp+44]
//Alt: movsd xmm0,[eax]
unregistersymbol(chargeReadOnArrowChargeAOB)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>healthReadOnHitRetAOB</Name>
      <Address> 013DC2D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthReadInPoisonRetAOB</Name>
      <Address> 014E8E28</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthReadOnHitAOB</Name>
      <Address> 01371469</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthReadInPoisonAOB</Name>
      <Address> 013DC6AB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itemQuantityReadOnUseRetAOB</Name>
      <Address> 014DBABD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itemQuantityReadOnUseAOB</Name>
      <Address> 013D10F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>notEnoughMoneyFlagChkOnBuyAOB</Name>
      <Address> 01785B32</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>moneyWriteOnBuyAOB</Name>
      <Address> 01785C01</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dJumpFlagReadOnDJumpAOB</Name>
      <Address> 013DBBBE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>airDodgeTimerReadInAirAOB</Name>
      <Address> 014DC8F6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bEndThread_MomodoraRUtM_keyListener_mem</Name>
      <Address>04E60062</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bUseArrowChargeKey</Name>
      <Address>04E60066</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>chargeReadOnArrowChargeAOB</Name>
      <Address> 014E0943</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5653857#5653857
</Comments>
</CheatTable>
