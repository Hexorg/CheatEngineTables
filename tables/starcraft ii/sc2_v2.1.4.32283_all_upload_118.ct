<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>11</ID>
      <Description>"God Mode (HP, Shield's, Energy) Human Player only AOB (not working for AI/Computer) v2.1.4.32283"</Description>
      <LastState Activated="0"/>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================

--------------------v2.1.4.32283 UPDATE-------------
 Game Title    : StarCraft II - Heart of the Swarm
 Game Version  : 2.1.4.32283
 Game Sponsor  : Offical (Maybe non-Offical version)
 Proces Name   : SC2.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 30-September-2014
 Author        : DaHacker878
 History:
 30-September-2014: Fourth Release &amp; Update to Script
 22-May-2014: Third Release &amp; Update to Script
 12-December-2013: Second Release &amp; Update to Script
 22-May-13: First Release &amp; Update to a Script
 Features:
 - Unlimited Resources
 - God Mode
 - Full Energy
 - Full Shield

---------------------ORIGANAL-----------------------

 Game Title    : StarCraft II - Heart of the Swarm
 Game Version  : 2.0.6.25180
 Game Sponsor  : RELOADED
 Proces Name   : SC2.exe
 Script Version: 1.0
 CE Version    : 6.2
 Release date  : 04-Apr-2013
 Author        : Recifense
 History:
 04-Apr-13: First Release
 Features:
 - Unlimited Resources
 - God Mode
 - Full Energy
 - Full Shield
===========================================
}

//=========================================
// Definitions
define(LUDO,"SC2.exe")
define(GDMD,SC2.exe+75F994)
define(MSEL,SC2.exe+5EBEC7)
define(MUEN,SC2.exe+75FDC7)
define(MUSH,SC2.exe+75FBEB)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(GDMD,89 BE 14 01 00 00 3B FB ?? ?? 6A 01 6A 01 6A 00 51 8B C3 2B)
assert(MSEL,8B 9E 14 01 00 00 8D 45 EC 50 8B CE E8 ?? ?? ?? ?? 8B 00 2B)
assert(MUEN,89 86 1C 01 00 00 3B C7 ?? ?? 6A 00 6A 05 6A 04 51 2B C7 57)
assert(MUSH,89 86 18 01 00 00 3B C7 ?? ?? 6A 01 6A 09 6A 08 51 8B D7 2B)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_GodMode)
label(_GodMD00)
label(_BackGMD)
label(_ExitGMD)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(_MonUnitEnergy)
label(_BackMUE)
label(_ExitMUE)
label(_MonUnitShield)
label(_BackMUS)
label(_ExitMUS)
label(pPlayer)
label(pUnit)
label(pSel)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pPlayer)
registersymbol(pUnit)
registersymbol(pSel)

//=========================================
MyCode:
//=========================================
_GodMode:
 cmp byte ptr [esi+27],1        // Player's unit?
 jne _ExitGMD                   // Jump if false

 mov [pUnit],esi

 xor edi,edi                    // Make damage = 0
 jmp _ExitGMD

_GodMD00:
//cmp dword ptr [iEnableQKK],0
 jmp _ExitGMD                    // Jump if feature is disabled

 mov edi,ecx

_ExitGMD:
 mov [esi+00000114],edi         // Original code
 jmp _BackGMD                   // Back to main code

//=========================================
_MonSelUnit:
 mov [pSel],esi

_ExitMSU:
 mov ebx,[esi+00000114]         // Original code
 jmp _BackMSU                   // Back to main code

//=========================================
_MonUnitEnergy:
 cmp byte ptr [esi+27],1        // Player's unit?
 jne _ExitMUE                   // Jump if false

 mov eax,ecx                    // Get Maximum

_ExitMUE:
 mov [esi+0000011C],eax         // Original code
 jmp _BackMUE                   // Back to main code

//=========================================
_MonUnitShield:
 cmp byte ptr [esi+27],1        // PlayerÂ´s unit?
 jne _ExitMUS                   // Jump if false

 xor eax,eax                    // make used_shield = 0

_ExitMUS:
 mov [esi+00000118],eax         // Original code
 jmp _BackMUS                   // Back to main code

//=========================================
 db '================================&gt;'
 db 'CE6.2 Script by Recifense 040413'
//=========================================
// Variables
pPlayer:
 dd 0
pUnit:
 dd 0
pSel:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 nop
_BackGMD:

MSEL:
 jmp _MonSelUnit
 nop
_BackMSU:

MUEN:
 jmp _MonUnitEnergy
 nop
_BackMUE:

MUSH:
 jmp _MonUnitShield
 nop
_BackMUS:

//=========================================
// Script for Restoring Original Codes
[DISABLE]

GDMD:
//mov [esi+00000114],edi
 db 89 BE 14 01 00 00

MSEL:
//mov ebx,[esi+00000114]
 db 8B 9E 14 01 00 00

MUEN:
//mov [esi+0000011C],eax
 db 89 86 1C 01 00 00

MUSH:
//mov [esi+00000118],eax
 db 89 86 18 01 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pPlayer)
unregistersymbol(pUnit)
unregistersymbol(pSel)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Resources for Human Player only AOB by DaFunk for v2.1.4.32283"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(DESIRED_RESOURCES,C350) // 50,000
//define(DESIRED_GAS,1869F) // 99 999
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [eax+000001B8],1  // Compare that Player ID is 1 aka Human Player
jne originalcode
cmp edi,DESIRED_RESOURCES
jge originalcode
mov edi,DESIRED_RESOURCES
//mov ebx,DESIRED_GAS
mov [eax+esi*8+000008F8],edi        //Minerals
mov [eax+esi*8+00000900],edi        //Gas

originalcode:
mov [eax+esi*8+000008F8],edi

exit:
jmp returnhere

"SC2.exe"+68B11D:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"SC2.exe"+68B11D:
mov [eax+esi*8+000008F8],edi
//Alt: db 89 BC F0 F8 08 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Population for human player only AOB (not working for AI/computer) for v2.1.4.32283"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
//label(originalcode)
label(exit)
label(raddress)
label(Enemy_Population)
registersymbol(raddress)
aobscan(raob,8B B1 B8 08 00 00)
//Population_AoB,8B B1 B8 08 00 00 89 45 FC 3B D0 89 55 08

raob:
raddress:
jmp newmem
nop
returnhere:

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ecx+000001B8],1        //Compare that Player Number is 1 aka Human Player
jne Enemy_Population        // Jump if not equal
mov [ecx+000008B8],0 //0 population

Enemy_Population:
mov esi,[ecx+000008B8]
jmp returnhere



//originalcode:
//mov edx,[esi+00000450]

exit:
jmp returnhere

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
raddress:
mov esi,[ecx+000008B8]
//Alt: db 8B B1 B8 08 00 00
unregistersymbol(raddress)
{
SC2.exe+761ECB - 8B B1 B8 08 00 00     - mov esi,[ecx+000008B8]
SC2.exe+761ED1 - 89 45 FC              - mov [ebp-04],eax
SC2.exe+761ED4 - 3B D0                 - cmp edx,eax
SC2.exe+761ED6 - 89 55 08              - mov [ebp+08],edx
SC2.exe+761ED9 - 8D 45 08              - lea eax,[ebp+08]
SC2.exe+761EDC - 7C 03                 - jnge SC2.exe+761EE1
SC2.exe+761EDE - 8D 45 FC              - lea eax,[ebp-04]
SC2.exe+761EE1 - 8B 00                 - mov eax,[eax]
SC2.exe+761EE3 - 2B C6                 - sub eax,esi
SC2.exe+761EE5 - 89 45 FC              - mov [ebp-04],eax
SC2.exe+761EE8 - C7 45 08 00 00 00 00  - mov [ebp+08],00000000
SC2.exe+761EEF - 5E                    - pop esi
SC2.exe+761EF0 - 8D 45 08              - lea eax,[ebp+08]
SC2.exe+761EF3 - 78 03                 - js SC2.exe+761EF8
SC2.exe+761EF5 - 8D 45 FC              - lea eax,[ebp-04]
SC2.exe+761EF8 - 39 38                 - cmp [eax],edi
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>mPoint</Name>
      <Address>02B90040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bySpudgy</Name>
      <Address>00970040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ammolabel</Name>
      <Address>005B617C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>thrustlabel</Name>
      <Address>0050F7C6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>overheatlabel</Name>
      <Address>005B710C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>edgelabel</Name>
      <Address>0050F2EA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gmwanzerlabel</Name>
      <Address>00509DC4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hpaddresslab</Name>
      <Address>00D88023</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
