<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>43</ID>
      <Description>"[X] &lt;== Citadels v3567 FLT Script"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Citadels
 Game Version  : 3567 (Build)
 Game Sponsor  : Fairlight (release 1107)
 Proces Name   : citadels.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 27-Jul-2013
 Author        : Recifense
 History:
 27-Jun-13: First Release
 Features:
 - Minimum Resources
 - God Mode
 - Instant Construction
 - Instant Upgrade
 - Quick Production
===========================================
}

//=========================================
// Definitions
define(LUDO,"citadels.exe")
define(MHPR,CitadelsObjectsPlugin.vPlugin+000FA4DB)
define(GMDU,CitadelsObjectsPlugin.vPlugin+000c32fe)
define(GMDB,CitadelsObjectsPlugin.vPlugin+0003d455)
define(MBCN,CitadelsObjectsPlugin.vPlugin+00038034)
define(MBUP,CitadelsObjectsPlugin.vPlugin+00037cd7)
define(MUPN,CitadelsObjectsPlugin.vPlugin+000d885a)
define(MPSB,CitadelsObjectsPlugin.vPlugin+00078d38)
define(MPSU,CitadelsObjectsPlugin.vPlugin+000789a9)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MHPR,f3 0f 10 0c b2 f3 0f 2c c1 3d 0f 27 00 00 ?? ?? b8 0f 27 00 00)
assert(GMDU,f3 0f 10 87 94 04 00 00 f3 0f 5c 44 24 14 f3 0f 11 87 94 04 00)
assert(GMDB,f3 0f 10 8f 40 03 00 00 f3 0f 58 c3 f3 0f 5c c8 0f 2f f1 f3 0f)
assert(MBCN,f3 0f 11 8f 40 03 00 00 f3 0f 10 0d ?? ?? ?? ?? f3 0f 5e c8 f3)
assert(MBUP,f3 0f 11 8d 40 03 00 00 0f 82 ?? ?? ?? ?? 8b 55 00 8b 82 ac 01)
assert(MUPN,f3 0f 10 40 04 f3 0f 5c 44 24 18 0f 57 c9 49 0f 2f c8 89 4c 24)
assert(MPSB,f3 0f 10 83 40 03 00 00 0f 57 c9 0f 2f c1 ?? ?? 0f 28 c1 8b 83)
assert(MPSU,f3 0f 10 83 94 04 00 00 f3 0f 10 0d ?? ?? ?? ?? 0f 2f c1 ?? ??)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_GodModeU)
label(_BackGMU)
label(_ExitGMU)
label(_GodModeB)
label(_BackGMB)
label(_ExitGMB)
label(_MonBuildingConst)
label(_BackMBC)
label(_ExitMBC)
label(_MonBuildingUpgrade)
label(_BackMBU)
label(_ExitMBU)
label(_MonUnitProd)
label(_BackMUP)
label(_ExitMUP)
label(_MonSelBuilding)
label(_BackMSB)
label(_ExitMSB)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(pUnit)
label(pPlayer)
label(iEnableGMD)
label(iEnableMMR)
label(iEnableMBC)
label(iEnableMBU)
label(iEnableMUP)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayer)
registersymbol(iEnableGMD)
registersymbol(iEnableMMR)
registersymbol(iEnableMBC)
registersymbol(iEnableMBU)
registersymbol(iEnableMUP)
registersymbol(aLast)

//=========================================
MyCode:
//=========================================
// Main screen
_MonHumanPlayer:
 mov dword ptr [aLast],'_MHP'

 push eax
 push ebx

 mov eax,[ebp+00000470]
 test eax,eax
 jnz _ExitMHP

 mov [pPlayer],ebp

 cmp dword ptr [iEnableMMR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov eax,(float)2000.0             // Minimum Resource Value

 mov ebx,[edx+00]                  // Wheat
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+00],ebx

 mov ebx,[edx+04]                  // Wood
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+04],ebx

 mov ebx,[edx+08]                  // Stone
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+08],ebx

 mov ebx,[edx+0c]                  // Iron Ore
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+0c],ebx

 mov ebx,[edx+10]                  // Stone Block
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+10],ebx

 mov ebx,[edx+14]                  // Plant
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+14],ebx

 mov ebx,[edx+18]                  // Bread
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+18],ebx

 mov ebx,[edx+1c]                  // Weapon
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+1c],ebx

 mov eax,(float)3000.0             // Minimum Gold Value

 mov ebx,[edx+20]                  // Gold
 cmp eax,ebx
 cmovg ebx,eax
 mov [edx+20],ebx

_ExitMHP:
 pop ebx
 pop eax

 movss xmm1,[edx+esi*4]            // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// Main screen
_GodModeU:
 mov dword ptr [aLast],'_GMU'

 push eax
 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMU                       // Jump if feature is disabled

 mov eax,[edi+0000029c]            // Get ID
 test eax,eax
 jnz _ExitGMU

 mov ebx,[edi+0000053c]            // Get pInfo
 test ebx,ebx
 jz _ExitGMU

 mov eax,[ebx+70]                  // Get Max HP
 mov [edi+00000494],eax

 xor eax,eax
 mov [esp+1c],eax                  // value2devrease = 0

_ExitGMU:
 pop ebx
 pop eax

 movss xmm0,[edi+00000494]         // Original code
 jmp _BackGMU                      // Back to main code

//=========================================
// Main screen
_GodModeB:
 mov dword ptr [aLast],'_GMB'

 push eax
 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMB                       // Jump if feature is disabled

 mov eax,[edi+0000029c]            // Get ID
 test eax,eax
 jnz _ExitGMB

 mov ebx,[edi+0000030c]            // Get pInfo
 test ebx,ebx
 jz _ExitGMB

 mov eax,[ebx+3c]                  // Get Max HP
 mov [edi+00000340],eax

 xorps xmm0,xmm0
 movss xmm3,xmm0                   // value2decrease = 0

_ExitGMB:
 pop ebx
 pop eax

 movss xmm1,[edi+00000340]         // Original code
 jmp _BackGMB                      // Back to main code

//=========================================
// Main screen
_MonBuildingConst:
 mov dword ptr [aLast],'_MBC'

 push eax
 push ebx

 cmp dword ptr [iEnableMBC],0
 je _ExitMBC                       // Jump if feature is disabled

 mov eax,[edi+0000029c]            // Get ID
 test eax,eax
 jnz _ExitMBC

 mov ebx,[edi+0000030c]            // Get pInfo
 test ebx,ebx
 jz _ExitMBC

 mov eax,[ebx+3c]
 lea eax,[eax-0a]
 cmp eax,[edi+00000340]
 jle _ExitMBC

 mov [edi+00000340],eax
 movss xmm1,[edi+00000340]

_ExitMBC:
 pop ebx
 pop eax

 movss [edi+00000340],xmm1         // Original code
 jmp _BackMBC                      // Back to main code

//=========================================
// Main screen
_MonBuildingUpgrade:
 mov dword ptr [aLast],'_MBU'

 push eax
 push ebx
 pushfd

 cmp dword ptr [iEnableMBU],0
 je _ExitMBU                       // Jump if feature is disabled

 mov eax,[ebp+0000029c]            // Get ID
 test eax,eax
 jnz _ExitMBU

 mov ebx,[ebp+0000030c]            // Get pInfo
 test ebx,ebx
 jz _ExitMBU

 movss xmm1,[ebx+3c]               // Get Max HP

 mov eax,[ebp+0000043c]            // Upgrade
 mov [ebp+00000438],eax

_ExitMBU:
 popfd
 pop ebx
 pop eax

 movss [ebp+00000340],xmm1         // Original code
 jmp _BackMBU                      // Back to main code

//=========================================
// Main screen
_MonUnitProd:
 mov dword ptr [aLast],'_MUP'

 push ebx

 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                       // Jump if feature is disabled

 mov ebx,[esi+0000029c]            // Get ID
 test ebx,ebx
 jnz _ExitMUP

 mov ebx,[eax+04]
 test ebx,ebx
 js _ExitMUP

 mov ebx,(float)3.0
 cmp ebx,[eax+04]
 jge _ExitMUP

 mov [eax+04],ebx

_ExitMUP:
 pop ebx

 movss xmm0,[eax+04]               // Original code
 jmp _BackMUP                      // Back to main code

//=========================================
// Selected Building
_MonSelBuilding:
 mov dword ptr [aLast],'_MSB'

 mov [pUnit],ebx

_ExitMSB:
 movss xmm0,[ebx+00000340]         // Original code
 jmp _BackMSB                      // Back to main code

//=========================================
// Selected Unit
_MonSelUnit:
 mov dword ptr [aLast],'_MSU'

 mov [pUnit],ebx

_ExitMSU:
 movss xmm0,[ebx+00000494]         // Original code
 jmp _BackMSU                      // Back to main code

//=========================================
 db '==================================&gt;'
 db 'CE6.3 Script by Recifense 072713'
//=========================================
// Variables
iEnableMMR:
 dd 0
iEnableGMD:
 dd 0
iEnableMBC:
 dd 0
iEnableMBU:
 dd 0
iEnableMUP:
 dd 0
pUnit:
 dd 0
pPlayer:
 dd 0
aLast:
 db 'CE63'

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
_BackMHP:

GMDU:
 jmp _GodModeU
 nop
 nop
 nop
_BackGMU:

GMDB:
 jmp _GodModeB
 nop
 nop
 nop
_BackGMB:

MBCN:
 jmp _MonBuildingConst
 nop
 nop
 nop
_BackMBC:

MBUP:
 jmp _MonBuildingUpgrade
 nop
 nop
 nop
_BackMBU:

MUPN:
 jmp _MonUnitProd
_BackMUP:

MPSB:
 jmp _MonSelBuilding
 nop
 nop
 nop
_BackMSB:

MPSU:
 jmp _MonSelUnit
 nop
 nop
 nop
_BackMSU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// movss xmm1,[edx+esi*4]
 db f3 0f 10 0c b2

GMDU:
// movss xmm0,[edi+00000494]
 db f3 0f 10 87 94 04 00 00

GMDB:
// movss xmm1,[edi+00000340]
 db f3 0f 10 8f 40 03 00 00

MBCN:
// movss [edi+00000340],xmm1
 db f3 0f 11 8f 40 03 00 00

MBUP:
// movss [ebp+00000340],xmm1
 db f3 0f 11 8d 40 03 00 00

MUPN:
// movss xmm0,[eax+04]
 db f3 0f 10 40 04

MPSB:
// movss xmm0,[ebx+00000340]
 db f3 0f 10 83 40 03 00 00

MPSU:
// movss xmm0,[ebx+00000494]
 db f3 0f 10 83 94 04 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pPlayer)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMBC)
unregistersymbol(iEnableMBU)
unregistersymbol(iEnableMUP)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Enable/Disable Minimum Resources =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Enable/Disable Quick Construction =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMBC</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Enable/Disable Quick Upgrade =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMBU</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"Enable/Disable Quick Production =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMUP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Game Title    : Citadels
 Game Version  : 3567 (Build)
 Game Sponsor  : Fairlight (release 1107)
 Proces Name   : citadels.exe
 Script Version: 1.0
 CE Version    : 6.3
 Release date  : 27-Jul-2013
 Author        : Recifense
 History:
 27-Jun-13: First Release
 Features:
 - Minimum Resources     [1]
 - God Mode              [2]
 - Instant Construction  [3]
 - Instant Upgrade       [4]
 - Quick Production      [5]
===========================================
[1] Human player's resources will not decrease under minimum value;
[2] For human player's buildings and units;
[3] That's it;
[4] That's it;
[5] That's it;
===========================================
HOTKEYS:
CTRL+Home = Enable  Resources and GM cheats;
CTRL+End  = Disable Resources and GM cheats;
-----------
CTRL+PageUp   = Enable  Const/Upgrade/Prod cheats;
CTRL+PageDown = Disable Const/Upgrade/Prod cheats;
===========================================
Cheers!
</Comments>
</CheatTable>
