<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>250</ID>
      <Description>"Script: Selected Equipment"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Seems to be called each frame when a piece of equipment is
  selected.
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_SELECTED_UNIT,oSpaceGame.exe,D9 87 50 01 00 00 0D) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  push eax
  mov [globals+300C],edi
  mov eax,edi
  add eax,0150
  mov [globals+3010],eax
  mov eax,[edi+28]
  mov [globals+3014],eax
  pop eax
  fld dword ptr [edi+00000150]
  jmp return

INJECT_SELECTED_UNIT:
  jmp code
  nop
return:
registersymbol(INJECT_SELECTED_UNIT)

[DISABLE]

INJECT_SELECTED_UNIT:
  db D9 87 50 01 00 00

unregistersymbol(INJECT_SELECTED_UNIT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E8B07

"oSpaceGame.exe"+6E8AD8: 74 04                          -  je oSpaceGame.exe+6E8ADE
"oSpaceGame.exe"+6E8ADA: 3B F5                          -  cmp esi,ebp
"oSpaceGame.exe"+6E8ADC: 75 0A                          -  jne oSpaceGame.exe+6E8AE8
"oSpaceGame.exe"+6E8ADE: C7 81 F0 01 00 00 03 00 00 00  -  mov [ecx+000001F0],00000003
"oSpaceGame.exe"+6E8AE8: 89 81 18 03 00 00              -  mov [ecx+00000318],eax
"oSpaceGame.exe"+6E8AEE: D9 7C 24 0C                    -  fnstcw [esp+0C]
"oSpaceGame.exe"+6E8AF2: 8B 87 78 0B 00 00              -  mov eax,[edi+00000B78]
"oSpaceGame.exe"+6E8AF8: D9 80 E0 02 00 00              -  fld dword ptr [eax+000002E0]
"oSpaceGame.exe"+6E8AFE: D9 5C 24 14                    -  fstp dword ptr [esp+14]
"oSpaceGame.exe"+6E8B02: 0F B7 44 24 0C                 -  movzx eax,word ptr [esp+0C]
// ---------- INJECTING HERE ----------
"
: D9 87 50 01 00 00              -  fld dword ptr [edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E8B0D: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6E8B12: D8 74 24 14                    -  fdiv dword ptr [esp+14]
"oSpaceGame.exe"+6E8B16: D9 5C 24 14                    -  fstp dword ptr [esp+14]
"oSpaceGame.exe"+6E8B1A: D9 44 24 14                    -  fld dword ptr [esp+14]
"oSpaceGame.exe"+6E8B1E: D8 8F 68 01 00 00              -  fmul dword ptr [edi+00000168]
"oSpaceGame.exe"+6E8B24: 89 44 24 14                    -  mov [esp+14],eax
"oSpaceGame.exe"+6E8B28: D9 6C 24 14                    -  fldcw [esp+14]
"oSpaceGame.exe"+6E8B2C: DF 7C 24 28                    -  fistp qword ptr [esp+28]
"oSpaceGame.exe"+6E8B30: 8B 44 24 28                    -  mov eax,[esp+28]
"oSpaceGame.exe"+6E8B34: 89 81 08 03 00 00              -  mov [ecx+00000308],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>239</ID>
      <Description>"Script: Damage"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-08
  Author : Jason

  This is executed when both friendly and enemy ship components take damage.
  I'm not sure about asteroids, small ships or even the hull you place
  equipment on.
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_DAMAGE,oSpaceGame.exe,F3 0F 10 8F 50 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(isPlayer)
label(isEnemy)
label(skip)
label(return)

newmem:
  dd (float)1.0 // amount to set enemy HP to

code:
//  cmp dword ptr [edi+00000154],0
//  je isPlayer
//  cmp dword ptr [edi+00000154],1
//  je isEnemy
//  jmp skip
  mov eax,[globals+3014]
  cmp eax,[edi+28]
  jne isEnemy

isPlayer:
  cmp dword ptr [globals+2004],1 // cheat flag set?
  jne skip
  xorps xmm0,xmm0 // 0 damage to subtract
  jmp skip

isEnemy:
  cmp dword ptr [globals+200C],1 // cheat flag set?
  jne skip
  mov eax,[newmem] // eax is loaded after return, no need to push/pop
  cmp eax,[edi+00000150]
  jg skip
  mov [edi+00000150],eax
  jmp skip

skip:
  movss xmm1,[edi+00000150]
  jmp return

INJECT_DAMAGE:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_DAMAGE)

[DISABLE]

INJECT_DAMAGE:
  db F3 0F 10 8F 50 01 00 00

unregistersymbol(INJECT_DAMAGE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EB0D9

"oSpaceGame.exe"+6EB0AB: EB A9                       -  jmp oSpaceGame.exe+6EB056
"oSpaceGame.exe"+6EB0AD: F3 0F 10 8C 8E D0 00 00 00  -  movss xmm1,[esi+ecx*4+000000D0]
"oSpaceGame.exe"+6EB0B6: F2 0F 10 25 30 90 A4 01     -  movsd xmm4,[oSpaceGame.exe+B79030]
"oSpaceGame.exe"+6EB0BE: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0C1: F2 0F 5E E1                 -  divsd xmm4,xmm1
"oSpaceGame.exe"+6EB0C5: 66 0F 5A CC                 -  cvtpd2ps xmm1,xmm4
"oSpaceGame.exe"+6EB0C9: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0CD: F3 0F 5A C9                 -  cvtss2sd xmm1,xmm1
"oSpaceGame.exe"+6EB0D1: F2 0F 59 C8                 -  mulsd xmm1,xmm0
"oSpaceGame.exe"+6EB0D5: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1 // xmm0 is now damage to subtract as single
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EB0D9: F3 0F 10 8F 50 01 00 00     -  movss xmm1,[edi+00000150] // xmm1 now current hp
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EB0E1: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0E5: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0E8: F2 0F 5C C8                 -  subsd xmm1,xmm0 // subtract damage from HP
"oSpaceGame.exe"+6EB0EC: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
"oSpaceGame.exe"+6EB0F0: F3 0F 11 87 50 01 00 00     -  movss [edi+00000150],xmm0 // store result
"oSpaceGame.exe"+6EB0F8: 8B 87 80 02 00 00           -  mov eax,[edi+00000280]
"oSpaceGame.exe"+6EB0FE: 85 C0                       -  test eax,eax
"oSpaceGame.exe"+6EB100: 74 2A                       -  je oSpaceGame.exe+6EB12C
"oSpaceGame.exe"+6EB102: 80 B8 34 01 00 00 00        -  cmp byte ptr [eax+00000134],00
"oSpaceGame.exe"+6EB109: 74 14                       -  je oSpaceGame.exe+6EB11F
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>267</ID>
      <Description>"Script: HP Each Frame"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Possibly just for player?  Reads HP for equipment each frame.
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_HP_ALWAYS,oSpaceGame.exe,F3 0F 10 83 E0 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  movss xmm0,[ebx+000002E0] // load max health into xmm0, current in xmm2
  cmp dword ptr [globals+2004],1
  jne skip
  movss [ecx+00000150],xmm0
  movss xmm2,[ecx+00000150] // reload new current hp into xmm2

skip:
  jmp return

INJECT_HP_ALWAYS:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_HP_ALWAYS)

[DISABLE]

INJECT_HP_ALWAYS:
  db F3 0F 10 83 E0 02 00 00

unregistersymbol(INJECT_HP_ALWAYS)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EEEBB

"oSpaceGame.exe"+6EEE90: 03 CA                    -  add ecx,edx
"oSpaceGame.exe"+6EEE92: 8B 09                    -  mov ecx,[ecx]
"oSpaceGame.exe"+6EEE94: C6 44 24 14 00           -  mov byte ptr [esp+14],00
"oSpaceGame.exe"+6EEE99: F3 0F 11 4C 24 18        -  movss [esp+18],xmm1
"oSpaceGame.exe"+6EEE9F: 85 C9                    -  test ecx,ecx
"oSpaceGame.exe"+6EEEA1: 74 34                    -  je oSpaceGame.exe+6EEED7
"oSpaceGame.exe"+6EEEA3: 8A 99 04 04 00 00        -  mov bl,[ecx+00000404]
"oSpaceGame.exe"+6EEEA9: F3 0F 10 91 50 01 00 00  -  movss xmm2,[ecx+00000150]
"oSpaceGame.exe"+6EEEB1: 88 5C 24 14              -  mov [esp+14],bl
"oSpaceGame.exe"+6EEEB5: 8B 99 78 0B 00 00        -  mov ebx,[ecx+00000B78]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EEEBB: F3 0F 10 83 E0 02 00 00  -  movss xmm0,[ebx+000002E0]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EEEC3: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EEEC6: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+6EEEC9: F2 0F 5E D0              -  divsd xmm2,xmm0
"oSpaceGame.exe"+6EEECD: 66 0F 5A C2              -  cvtpd2ps xmm0,xmm2
"oSpaceGame.exe"+6EEED1: F3 0F 11 44 24 18        -  movss [esp+18],xmm0
"oSpaceGame.exe"+6EEED7: 8B 8F D0 02 00 00        -  mov ecx,[edi+000002D0]
"oSpaceGame.exe"+6EEEDD: 8B 89 F4 01 00 00        -  mov ecx,[ecx+000001F4]
"oSpaceGame.exe"+6EEEE3: 8B 5C 24 14              -  mov ebx,[esp+14]
"oSpaceGame.exe"+6EEEE7: 89 1C C1                 -  mov [ecx+eax*8],ebx
"oSpaceGame.exe"+6EEEEA: 8B 5C 24 18              -  mov ebx,[esp+18]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Script: Build Time"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Seems to load remaining build time every frame after it has been udpated.

  globals+2000: bBuildTime - set to 1 to enable near-instant build
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(TEST_BUILD_REMAINING_3,oSpaceGame.exe,F3 0F 10 83 5C 01 00 00 F3 0F 10) // should be unique
alloc(newmem,$1000)

label(code)
label(done)
label(return)

newmem:
  dd (float)0.001

code:
  movss xmm0,[ebx+0000015C]
  cmp dword ptr [globals+2000],1
  jne done
  ucomiss xmm0,[newmem]
  jna done
  movss xmm0,[newmem]
  movss [ebx+0000015C],xmm0

done:
  jmp return

TEST_BUILD_REMAINING_3:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_BUILD_REMAINING_3)

[DISABLE]

TEST_BUILD_REMAINING_3:
  db F3 0F 10 83 5C 01 00 00

unregistersymbol(TEST_BUILD_REMAINING_3)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+702FAA

"oSpaceGame.exe"+702F82: C7 44 24 54 FF FF FF FF  -  mov [esp+54],FFFFFFFF
"oSpaceGame.exe"+702F8A: 83 7C 24 38 00           -  cmp dword ptr [esp+38],00
"oSpaceGame.exe"+702F8F: 76 17                    -  jna oSpaceGame.exe+702FA8
"oSpaceGame.exe"+702F91: 8B 44 24 30              -  mov eax,[esp+30]
"oSpaceGame.exe"+702F95: E8 26 A7 19 00           -  call oSpaceGame.exe+89D6C0
"oSpaceGame.exe"+702F9A: 33 C0                    -  xor eax,eax
"oSpaceGame.exe"+702F9C: 89 44 24 30              -  mov [esp+30],eax
"oSpaceGame.exe"+702FA0: 89 44 24 34              -  mov [esp+34],eax
"oSpaceGame.exe"+702FA4: 89 44 24 38              -  mov [esp+38],eax
"oSpaceGame.exe"+702FA8: 33 F6                    -  xor esi,esi
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+702FAA: F3 0F 10 83 5C 01 00 00  -  movss xmm0,[ebx+0000015C]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+702FB2: F3 0F 10 8B 58 01 00 00  -  movss xmm1,[ebx+00000158]
"oSpaceGame.exe"+702FBA: 8B 83 34 01 00 00        -  mov eax,[ebx+00000134]
"oSpaceGame.exe"+702FC0: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+702FC3: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+702FC6: F2 0F 5E C1              -  divsd xmm0,xmm1
"oSpaceGame.exe"+702FCA: F2 0F 10 0D 30 90 A4 01  -  movsd xmm1,[oSpaceGame.exe+B79030]
"oSpaceGame.exe"+702FD2: F2 0F 5C C8              -  subsd xmm1,xmm0
"oSpaceGame.exe"+702FD6: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+702FDA: F3 0F 11 83 00 0A 00 00  -  movss [ebx+00000A00],xmm0
"oSpaceGame.exe"+702FE2: 89 B3 FC 09 00 00        -  mov [ebx+000009FC],esi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>245</ID>
      <Description>"Script: Hex Nuts"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-08
  Author : Jason

  Loads hex nuts each frame, just store pointer to let user edit, and set
  to minimum value if too low.
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_HEX_NUTS,oSpaceGame.exe,D9 86 A8 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  mov [globals+1000],esi // save pointer
  mov eax,dword ptr [globals+2008] // user set minimum hex nuts
  cmp eax,dword ptr [esi+000002A8] // current hex nuts
  jb skip
  mov dword ptr [esi+000002A8],eax

skip:
  fld dword ptr [esi+000002A8] // original code
  jmp return

INJECT_HEX_NUTS:
  jmp code
  nop
return:
registersymbol(INJECT_HEX_NUTS)

[DISABLE]

INJECT_HEX_NUTS:
  db D9 86 A8 02 00 00

unregistersymbol(INJECT_HEX_NUTS)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+72EC68

"oSpaceGame.exe"+72EC47: FF D0                    -  call eax
"oSpaceGame.exe"+72EC49: 8B 8B 9C 02 00 00        -  mov ecx,[ebx+0000029C]
"oSpaceGame.exe"+72EC4F: 8B 11                    -  mov edx,[ecx]
"oSpaceGame.exe"+72EC51: 8B 42 60                 -  mov eax,[edx+60]
"oSpaceGame.exe"+72EC54: 56                       -  push esi
"oSpaceGame.exe"+72EC55: FF D0                    -  call eax
"oSpaceGame.exe"+72EC57: 80 7B 3C 00              -  cmp byte ptr [ebx+3C],00
"oSpaceGame.exe"+72EC5B: 0F 84 A8 10 00 00        -  je oSpaceGame.exe+72FD09
"oSpaceGame.exe"+72EC61: 8B 73 40                 -  mov esi,[ebx+40]
"oSpaceGame.exe"+72EC64: D9 7C 24 44              -  fnstcw [esp+44]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+72EC68: D9 86 A8 02 00 00        -  fld dword ptr [esi+000002A8]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+72EC6E: 0F B7 44 24 44           -  movzx eax,word ptr [esp+44]
"oSpaceGame.exe"+72EC73: 8B 7B 38                 -  mov edi,[ebx+38]
"oSpaceGame.exe"+72EC76: D9 5C 24 40              -  fstp dword ptr [esp+40]
"oSpaceGame.exe"+72EC7A: D9 44 24 40              -  fld dword ptr [esp+40]
"oSpaceGame.exe"+72EC7E: 8B 8F 40 12 00 00        -  mov ecx,[edi+00001240]
"oSpaceGame.exe"+72EC84: 81 64 24 68 00 00 00 C0  -  and [esp+68],C0000000
"oSpaceGame.exe"+72EC8C: 81 4C 24 68 00 00 00 40  -  or [esp+68],40000000
"oSpaceGame.exe"+72EC94: 81 64 24 68 FF FF FF 7F  -  and [esp+68],7FFFFFFF
"oSpaceGame.exe"+72EC9C: 0D 00 0C 00 00           -  or eax,0C00
"oSpaceGame.exe"+72ECA1: 89 44 24 40              -  mov [esp+40],eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>273</ID>
      <Description>"Script: Rep and Credits"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Loads Rep each frame before starting a mission, more reliable than other
  injection point I had.  This function might recalculate the totals...
  Pseudo-code:

  if [eax+38] is 1, just load the value at [eax+3c]
  if [eax+38] is 0, that means we need to recalculate rep from the missions we've done
  load pointer at [eax+44] into ecx, add 4 to ecx
}

[ENABLE]

aobscanmodule(INJECT_REP,oSpaceGame.exe,01 8B 40 3C C3 CC) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1004],eax
  mov eax,[eax+3C]
  ret 
  int 3 
  jmp return

INJECT_REP+01:
  jmp code
return:
registersymbol(INJECT_REP)

[DISABLE]

INJECT_REP+01:
  db 8B 40 3C C3 CC

unregistersymbol(INJECT_REP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+707502

"oSpaceGame.exe"+7074EA: 56                    -  push esi
"oSpaceGame.exe"+7074EB: EB 03                 -  jmp oSpaceGame.exe+7074F0
"oSpaceGame.exe"+7074ED: 8D 49 00              -  lea ecx,[ecx+00]
"oSpaceGame.exe"+7074F0: 8B 31                 -  mov esi,[ecx]
"oSpaceGame.exe"+7074F2: 01 70 3C              -  add [eax+3C],esi
"oSpaceGame.exe"+7074F5: 83 C1 08              -  add ecx,08
"oSpaceGame.exe"+7074F8: 83 EA 01              -  sub edx,01
"oSpaceGame.exe"+7074FB: 75 F3                 -  jne oSpaceGame.exe+7074F0
"oSpaceGame.exe"+7074FD: 5E                    -  pop esi
"oSpaceGame.exe"+7074FE: C6 40 38 01           -  mov byte ptr [eax+38],01
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+707502: 8B 40 3C              -  mov eax,[eax+3C] // loads Rep each frame
"oSpaceGame.exe"+707505: C3                    -  ret 
"oSpaceGame.exe"+707506: CC                    -  int 3 
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+707507: CC                    -  int 3 
"oSpaceGame.exe"+707508: CC                    -  int 3 
"oSpaceGame.exe"+707509: CC                    -  int 3 
"oSpaceGame.exe"+70750A: CC                    -  int 3 
"oSpaceGame.exe"+70750B: CC                    -  int 3 
"oSpaceGame.exe"+70750C: CC                    -  int 3 
"oSpaceGame.exe"+70750D: CC                    -  int 3 
"oSpaceGame.exe"+70750E: CC                    -  int 3 
"oSpaceGame.exe"+70750F: CC                    -  int 3 
"oSpaceGame.exe"+707510: 8A 41 04              -  mov al,[ecx+04]


oSpaceGame.exe+7074D0 - 80 78 38 00           - cmp byte ptr [eax+38],00 // have we already calculated rep?
oSpaceGame.exe+7074D4 - 75 2C                 - jne oSpaceGame.exe+707502 // yes, jump to load from [eax+3c]
oSpaceGame.exe+7074D6 - 8B 50 48              - mov edx,[eax+48] // load count of missions done
oSpaceGame.exe+7074D9 - C7 40 3C 00000000     - mov [eax+3C],00000000 // set rep to 0
oSpaceGame.exe+7074E0 - 85 D2                 - test edx,edx
oSpaceGame.exe+7074E2 - 76 1A                 - jna oSpaceGame.exe+7074FE // if [eax+48] is 0 (no missions done), just skip to load the 0 we saved
oSpaceGame.exe+7074E4 - 8B 48 44              - mov ecx,[eax+44] // pointer to mission list
oSpaceGame.exe+7074E7 - 83 C1 04              - add ecx,04 // offset of the rep for that mission
oSpaceGame.exe+7074EA - 56                    - push esi
oSpaceGame.exe+7074EB - EB 03                 - jmp oSpaceGame.exe+7074F0
oSpaceGame.exe+7074ED - 8D 49 00              - lea ecx,[ecx+00] // not sure what this is for
oSpaceGame.exe+7074F0 - 8B 31                 - mov esi,[ecx] // load rep for mission
oSpaceGame.exe+7074F2 - 01 70 3C              - add [eax+3C],esi // add to our rep total
oSpaceGame.exe+7074F5 - 83 C1 08              - add ecx,08 // move on to next mission rep
oSpaceGame.exe+7074F8 - 83 EA 01              - sub edx,01 // loop through our missions
oSpaceGame.exe+7074FB - 75 F3                 - jne oSpaceGame.exe+7074F0 // continue loop while we have unprocessed missions
oSpaceGame.exe+7074FD - 5E                    - pop esi
oSpaceGame.exe+7074FE - C6 40 38 01           - mov byte ptr [eax+38],01
oSpaceGame.exe+707502 - 8B 40 3C              - mov eax,[eax+3C]
oSpaceGame.exe+707505 - C3                    - ret

}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>279</ID>
      <Description>"Script: Countdown"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_COUNTDOWN,oSpaceGame.exe,F3 0F 11 47 34 72) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  xorps xmm0,xmm0
  movss [edi+34],xmm0
  jmp return

INJECT_COUNTDOWN:
  jmp code
return:
registersymbol(INJECT_COUNTDOWN)

[DISABLE]

INJECT_COUNTDOWN:
  db F3 0F 11 47 34

unregistersymbol(INJECT_COUNTDOWN)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EA9CD

"oSpaceGame.exe"+6EA9A8: F3 0F 10 47 34           -  movss xmm0,[edi+34]
"oSpaceGame.exe"+6EA9AD: 0F 2F C3                 -  comiss xmm0,xmm3
"oSpaceGame.exe"+6EA9B0: 76 27                    -  jna oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9B2: 80 BE 3D 01 00 00 00     -  cmp byte ptr [esi+0000013D],00
"oSpaceGame.exe"+6EA9B9: 75 1E                    -  jne oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9BB: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EA9BE: F3 0F 5A CD              -  cvtss2sd xmm1,xmm5
"oSpaceGame.exe"+6EA9C2: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+6EA9C6: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+6EA9CA: 0F 2F D8                 -  comiss xmm3,xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EA9CD: F3 0F 11 47 34           -  movss [edi+34],xmm0
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EA9D2: 72 05                    -  jb oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9D4: F3 0F 11 5F 34           -  movss [edi+34],xmm3
"oSpaceGame.exe"+6EA9D9: 8B 44 24 1C              -  mov eax,[esp+1C]
"oSpaceGame.exe"+6EA9DD: 40                       -  inc eax
"oSpaceGame.exe"+6EA9DE: 89 44 24 1C              -  mov [esp+1C],eax
"oSpaceGame.exe"+6EA9E2: 3B 44 24 24              -  cmp eax,[esp+24]
"oSpaceGame.exe"+6EA9E6: 0F 82 54 FE FF FF        -  jb oSpaceGame.exe+6EA840
"oSpaceGame.exe"+6EA9EC: 8B BB D4 0A 00 00        -  mov edi,[ebx+00000AD4]
"oSpaceGame.exe"+6EA9F2: 33 F6                    -  xor esi,esi
"oSpaceGame.exe"+6EA9F4: 85 FF                    -  test edi,edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>277</ID>
      <Description>"Script: Set Power"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Called to set equipment power
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_POWER_SET,oSpaceGame.exe,89 82 0C 04 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  cmp [globals+2014],1
  jne skip

  push eax
  mov eax,[globals+3014]
  cmp eax,[edx+28]
  pop eax
  jne skip

  mov eax,5
skip:
  mov [edx+0000040C],eax
  jmp return

INJECT_POWER_SET:
  jmp code
  nop
return:
registersymbol(INJECT_POWER_SET)

[DISABLE]

INJECT_POWER_SET:
  db 89 82 0C 04 00 00

unregistersymbol(INJECT_POWER_SET)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EAF4B

"oSpaceGame.exe"+6EAF23: 8B 86 BC 01 00 00        -  mov eax,[esi+000001BC]
"oSpaceGame.exe"+6EAF29: 03 86 B8 01 00 00        -  add eax,[esi+000001B8]
"oSpaceGame.exe"+6EAF2F: C7 44 24 1C 00 00 00 00  -  mov [esp+1C],00000000
"oSpaceGame.exe"+6EAF37: 03 D8                    -  add ebx,eax
"oSpaceGame.exe"+6EAF39: 89 5C 24 4C              -  mov [esp+4C],ebx
"oSpaceGame.exe"+6EAF3D: 8D 44 24 4C              -  lea eax,[esp+4C]
"oSpaceGame.exe"+6EAF41: 85 DB                    -  test ebx,ebx
"oSpaceGame.exe"+6EAF43: 7F 04                    -  jg oSpaceGame.exe+6EAF49
"oSpaceGame.exe"+6EAF45: 8D 44 24 1C              -  lea eax,[esp+1C]
"oSpaceGame.exe"+6EAF49: 8B 00                    -  mov eax,[eax]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EAF4B: 89 82 0C 04 00 00        -  mov [edx+0000040C],eax
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EAF51: C7 44 24 44 FF FF FF FF  -  mov [esp+44],FFFFFFFF
"oSpaceGame.exe"+6EAF59: 83 7C 24 30 00           -  cmp dword ptr [esp+30],00
"oSpaceGame.exe"+6EAF5E: 76 17                    -  jna oSpaceGame.exe+6EAF77
"oSpaceGame.exe"+6EAF60: 8B 44 24 28              -  mov eax,[esp+28]
"oSpaceGame.exe"+6EAF64: E8 57 27 1B 00           -  call oSpaceGame.exe+89D6C0
"oSpaceGame.exe"+6EAF69: 33 C0                    -  xor eax,eax
"oSpaceGame.exe"+6EAF6B: 89 44 24 28              -  mov [esp+28],eax
"oSpaceGame.exe"+6EAF6F: 89 44 24 2C              -  mov [esp+2C],eax
"oSpaceGame.exe"+6EAF73: 89 44 24 30              -  mov [esp+30],eax
"oSpaceGame.exe"+6EAF77: 8B 4C 24 3C              -  mov ecx,[esp+3C]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>280</ID>
      <Description>"Cheats"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>240</ID>
          <Description>"bNoDamage"</Description>
          <LastState Value="1" Activated="0" RealAddress="1EE52004"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+2004</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>249</ID>
          <Description>"bOneHitKill"</Description>
          <LastState Value="1" Activated="0" RealAddress="1EE5200C"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+200c</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"bBuildTime"</Description>
          <LastState Value="1" Activated="0" RealAddress="1EE52000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+2000</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>282</ID>
          <Description>"bRechargeDelay"</Description>
          <LastState Value="1" Activated="0" RealAddress="1EE52010"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+2010</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>281</ID>
          <Description>"bPower"</Description>
          <LastState Value="1" Activated="0" RealAddress="1EE52014"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+2014</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>246</ID>
          <Description>"fMinimumHexNuts"</Description>
          <LastState Value="5000" Activated="0" RealAddress="1EE52008"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>globals+2008</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>284</ID>
          <Description>"Values"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>242</ID>
              <Description>"Hex Nuts"</Description>
              <LastState Value="5290.841797" Activated="0" RealAddress="1EC4A4E8"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+1000</Address>
              <Offsets>
                <Offset>2A8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>244</ID>
              <Description>"Rep"</Description>
              <LastState Value="30" Activated="0" RealAddress="1CF8748C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1004</Address>
              <Offsets>
                <Offset>3C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>248</ID>
              <Description>"SC"</Description>
              <LastState Value="99999" Activated="0" RealAddress="1CF87490"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1004</Address>
              <Offsets>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>241</ID>
      <Description>"&lt;----- DEV -----&gt;"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>283</ID>
          <Description>"Selected Equipment ----------&gt;"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>251</ID>
              <Description>"Selected Equipment"</Description>
              <LastState Value="0B70ED70" Activated="0" RealAddress="1EE5300C"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+300C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>261</ID>
              <Description>"0134-&gt;00EC: Flag?"</Description>
              <LastState Value="1" Activated="0" RealAddress="1EC4A32C"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>EC</Offset>
                <Offset>134</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>258</ID>
              <Description>"0150: HP"</Description>
              <LastState Value="250" Activated="0" RealAddress="0B70EEC0"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>150</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>252</ID>
              <Description>"0280: Pointer"</Description>
              <LastState Value="05F06860" Activated="0" RealAddress="0B70EFF0"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>280</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>263</ID>
              <Description>"0280-&gt;0134: Flag?"</Description>
              <LastState Value="0" Activated="0" RealAddress="05F06994"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>134</Offset>
                <Offset>280</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>259</ID>
              <Description>"0285: Flag?"</Description>
              <LastState Value="0" Activated="0" RealAddress="0B70EFF5"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>285</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>262</ID>
              <Description>"02AC: ? (float)"</Description>
              <LastState Value="0" Activated="0" RealAddress="0B70F01C"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>2AC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>276</ID>
              <Description>"040C: Power?"</Description>
              <LastState Value="5" Activated="0" RealAddress="0B70F17C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>40C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>253</ID>
              <Description>"0B78-&gt;02E0: Max HP"</Description>
              <LastState Value="250" Activated="0" RealAddress="05F06040"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>2E0</Offset>
                <Offset>B78</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>260</ID>
              <Description>"0B78-&gt;0D00: ?"</Description>
              <LastState Value="2" Activated="0" RealAddress="05F06A60"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+300C</Address>
              <Offsets>
                <Offset>D00</Offset>
                <Offset>B78</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>264</ID>
          <Description>"oSpaceGame.exe+B35BC0"</Description>
          <LastState Value="0.8000000119" Activated="0" RealAddress="01A05BC0"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>oSpaceGame.exe+B35BC0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>207</ID>
          <Description>"UtilCopyData"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>GLOBALALLOC(UtilCopyData,$10000) //64k

{ You MUST call pushad, pushfd, then push an address, 0 if you don't care,
  then push the address of a memory area to use with config (TEST below).
  The second property in teh struct below (memory area to store addresses)
  is the most important, it contains a list of addresses and locations for
  the stored data.  So use the memory viewer to check on how many addresses
  you're picking up, or you can just use the structure dissector with addresses
  like these: [TEST+1004], [TEST+100C], [TEST+1014], [TEST+101C], etc.

globalalloc(TEST,$100000) // 1mb
TEST:
  dd TEST+3000 // address to start storing addresses
  dd TEST+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 100 // bytes of stack to store
  dd 200 // bytes of data to store at pushed address
  dd 0 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record first is size of individual record

// second option, memory area to store addresses, will store 8 bytes for each,
//        first 4 are the passed address, second 4 are a pointer to the stored
//        data.  This example has 500 bytes of stack, 800 bytes of address,
//        200 bytes for FXSave data, plus the standard 100 bytes for header
//        giving a total size of 1000 (hex), which means the first values
//        will be stored at TEST+2000, the second at TEST+3000, the third at
//        TEST+4000, etc.  There is room for E0 of them in e0000 bytes specified
//        so make sure TEST+1000 has enough room for E0*8 or 700 bytes

// this is code that will do the copying, the stack will be as the ESP looked
// from the pushad command

//-----------------------------------------------------------------------------
//- Test UtilCopyData
  pushad
  pushfd
  push eax // unique value to copy values on, eax already has good memory
  push TEST
  call UtilCopyData // handles removing parameters from stack
  popfd
  popad
//-----------------------------------------------------------------------------



// result format:
0000: Unique Value (argument on the stack)
0004: Count (how many times this value has been copied)
0008: PTR-&gt;Stack
000C: PTR-&gt;Stack_EBP (EBP, if in range)
0010: PTR-&gt;Memory
0014: PTR-&gt;FXSave
0018: PTR-&gt;XMM (to 009C)
001C: PTR-&gt;FPU (to 00BC)
001C-0098: RESERVED
009C: XMM0 as single float
..
00B8: XMM7 as single float
00BC: ST(0) as a single float
..
00D8: ST(7) as a single float
00DC: Flags
00E0: Registers: EDI, ESI, EBP, ESP, EBX, EDX, ECX, EAX
0100: Original Stack
....: Memory
....: FXSAVE


}

{================================================================================
 = 1) In MemoryBrowser, right-click and set display type to 4 byte hex and
 =    change so you see 3, 6, 9 or 12 columns.  Goto address "AddressList",
 =	      Column 0: Address
 =        Column 1: TickCount
 =        Column 2: Count of this address
 = 2) Import AddressList structure if you haven't
 =    address to multiples of 256 past StackData, i.e. address would be
 =    simply "StackData" for the first address, or "StackData+500" for the
 =    sixth address.  First 4 bytes are flags, next 32 are registers (edi, esi,
 =    ebp, esp, ebx, edx, ecx, eax), then 220 bytes of stack
 ================================================================================
}
//-----------------------------------------------------------------------------
// Enable sets everything up when cheat is checked
//-----------------------------------------------------------------------------
[ENABLE]

define(C_Address,0)
define(C_AddressList,4)
define(C_TotalSizeToUse,8)
define(C_StackSize,c)
define(C_MemSize,10)
define(C_FXSaveFlag,14)
define(C_Initialized,18)
define(C_TotalSize,1c) // calculated on init
define(C_MaxOffset,20) // initialized to mem size - total size
{
  stack: EBP+this is original stack
  0000: return
  0004: PTR-&gt;Config
  0008: UniqueValue
  000C: flags
  0010: EDI
  0014: ESI
  0018: EBP
  001C: ESP
  0020: EBX
  0024: EDX
  0028: ECX
  002C: EAX
  0030: original stack
}

// values I care about (added 28) for three new pushes at the start
define(_ReturnValue,ebp+24)
define(_Config,ebp+2c)
define(_UniqueValue,ebp+30)
define(_Flags,ebp+34)
define(_EBP,ebp+40)
define(_ESP,ebp+44)
define(_FoundPointer,ebp-4)
define(_FoundIndex,ebp-8)

label(UtilCopyData_Enabled)
label(UtilCopyData_Count)
registersymbol(UtilCopyData_Enabled)
registersymbol(UtilCopyData_Count)

UtilCopyData:
  label(AlreadyInitialized)
  label(Exit)

  push 00000000 // will be ebp+24
  pushfd
  pushad

  inc [UtilCopyData_Count]

  cld // clear direction flag so we always move going upwards

  mov ebp, esp // is already stored in pushad from caller, no need to store again
  sub esp, 20 // local variables

  // enabled?
  cmp [UtilCopyData_Enabled], 00000001
  jne Exit

  // initialized?
  mov esi, [_Config]
  cmp [esi+C_Initialized], 1
  je AlreadyInitialized

  // need to initialize, calculate total size, 100 for header, stack size, mem size, FXSAVE
  mov eax, 00000100 // header
  add eax, [esi+C_StackSize] // stack size
  add eax, [esi+C_MemSize]
  cmp [esi+C_FXSaveFlag], 1
  label(INOFX)
  jne INOFX
  add eax,200 // 512 bytes for fxsave
INOFX:
  mov [esi+C_TotalSize], eax // save total size

  // clear storage memory
  xor eax, eax // zero to store
  mov edi, [esi+C_Address]
  mov ecx, [esi+C_TotalSizeToUse]
  shr ecx, 2 // storing dwords, so divide count by 4
  rep stosd

  // calc max offset to not reach past memory limit
  mov eax, [esi+C_TotalSizeToUse]
  sub eax, [esi+C_TotalSize]
  mov [esi+C_MaxOffset], eax

  mov [esi+C_Initialized], 1 // say we already initialized it

AlreadyInitialized:
  // if 0, shorthand way to exit without storing anything and keep rest of calling code identical
  mov eax, [_UniqueValue]
  test eax, eax
  jz Exit

  mov edi, [esi+C_Address] // start of data
  mov edx, 0 // offset into data
  mov ecx, 0 // index (for storing info later)

  // make sure we're not past the end
  label(Continue)
  label(Found)
Continue:
  cmp edx, [esi+C_MaxOffset]
  ja Exit
  mov ebx, [edi+edx]

  cmp ebx, eax // is address found?
  je Found

  test ebx, ebx // is it zero, empty?
  jz Found

  inc ecx
  add edx, [esi+C_TotalSize] // move on to next one
  jmp Continue

Found:
  lea edi, [edi+edx]
  mov [_FoundPointer], edi // store as local variable for later use
  mov [_ReturnValue], edi // store as return value
  mov [_FoundIndex], ecx // store as local variable for later use

  mov [edi], eax // 0000: Unique Value (argument from stack)
  inc [edi+4] // 0004: Count (how many times this value has been copied)
  mov ebx, edi
  add ebx, 100
  mov [edi+8], ebx // 0008: PTR-&gt;Stack

  // store PTR-&gt;Stack and PTR-&gt;Stack_EBP
  xor edx, edx // default will store 0, meaning EBP is outside our saved stack
  mov ecx, [_EBP] // from pushad earlier
  sub ecx, [_ESP]
  cmp ecx, [esi+C_StackSize] // does old EBP point into stack data we are saving?
  label(EBPNotInStackData)
  ja EBPNotInStackData
  mov edx, ecx
  add edx, ebx // ebx is still PTR-&gt;Stack
EBPNotInStackData:
  mov [edi+C], edx // 000C: PTR-&gt;Stack (EBP)

  // save stack data, edi and esi will need to be reloaded, ESI is [_Config], EDI is [_FoundPointer]
  add edi, 000000dc // now points to flags
  mov ecx, [esi+C_StackSize]
  add ecx, 24 // 24 extra bytes for pushad/pushfd
  lea esi, [_Flags] // address of flags from pushad/pushfd of caller
  shr ecx, 2
  rep movsd

  // save memory data
  label(NoMemory)
  mov ecx, [_Config]
  mov ecx, [ecx+C_MemSize]
  test ecx, ecx
  jz NoMemory

  mov edx, [_FoundPointer]
  mov [edx+10], edi
  mov esi, [_UniqueValue]
  shr ecx, 2
  rep movsd
NoMemory:

  // ok, now store UniqueValue/Address if specified
  mov esi, [_Config]
  mov eax, [esi+C_MemSize]
  mov edi, [esi+C_AddressList]
  test edi, edi
  label(NoAddressList)
  jz NoAddressList
  // yes we should store
  mov eax, [_FoundIndex]
  lea ebx, [edi+eax*8] // 8 bytes per address
  mov eax, [_UniqueValue]
  mov [ebx], eax // store passed unique value
  mov eax, [_FoundPointer]
  mov [ebx+4], eax // store address where we stored stuff

NoAddressList:
//-----------------------------------------------------------------------------
// Now handle floating point data
//-----------------------------------------------------------------------------
// http://asm.inightmare.org/opcodelst/index.php?op=FXSAVE
// http://www.website.masmforum.com/tutorials/fptute/fpuchap4.htm

  label(NoFXSAVE)
  mov esi, [_Config]
  cmp [esi+C_FXSaveFlag], 1
  jne NoFXSAVE
  mov edi,[_FoundPointer] // start of saved data for the passed address
  mov edx,edi
  add edi,[esi+C_TotalSize] // now at end of ALL including FXSAVE
  sub edi,200 // now where FXSAVE should go, but...
  and edi,FFFFFFF0 // MUST be 16-byte aligned or will error.  no extra room, might over-write end of memory or stack
  mov [edx+14],edi // Ptr-&gt;FXSave
  fxsave [edi]
  lea esi,[edi+20] // ST0 starts at +20, each register is 10 bytes of data, but takes up 16 bytes

  label(fpuloop)
  lea edi,[edx+bc] // start storing floats at start of data + BC
  mov [edx+1c],edi // structure pointer to FPU float values
  mov ecx,8 // ST0-ST7
fpuloop:
  mov eax,[esi+8]  // sign+exponent
  shl eax,10       // shift top bits to the end
  and eax,c0000000 // only top 2 bits (sign and top exponent bit)
  mov [edi],eax    // store top 2 bits (bits 30 and 31)

  mov eax,[esi+8]  // sign+exponent
  and eax,0000007f // bottom 7 bits of exponent
  shl eax,17       // shift to bits 23-29
  or [edi],eax     // merge with sign and top bit

  mov eax,[esi+4]  // most-significant bits of mantissa
  and eax,7fffff00 // 23 bits, REAL4 has most-significant bit assumed on, REAL10 does not
  shr eax,8        // move bits to the end
  or [edi],eax     // merge with existing result
  add edi,4
  add esi,10
  loop fpuloop

  mov ecx,8 // XMM0-XMM7
  label(xmmloop)
  lea edi,[edx+9c]
  mov [edx+18],edi // store pointer to XMM registers
  mov esi,[edx+14] // address of FXSAVE data
  add esi,a0       // first XMM register
xmmloop:
  movsd
  add esi,c // 16 bytes for each xmm register
  loop xmmloop

NoFXSAVE:
{
// result format:
0000: Unique Value (argument on the stack)
0004: Count (how many times this value has been copied)
0008: PTR-&gt;Stack
000C: PTR-&gt;Stack_EBP (EBP, if in range of copied stack data)
0010: PTR-&gt;Memory
0014: PTR-&gt;FXSave
0018: PTR-&gt;XMM (to 009C)
001C: PTR-&gt;FPU (to 00BC)
001C-0098: RESERVED
009C: XMM0 as single float
..
00B8: XMM7 as single float
00BC: ST(0) as a single float
..
00D8: ST(7) as a single float
00DC: Flags
00E0: Registers: EDI, ESI, EBP, ESP, EBX, EDX, ECX, EAX
0100: Original Stack
....: Memory
....: FXSAVE
}


Exit:
  add esp, 20 // local variables gone

  popad
  popfd
  pop eax // return value

  ret 8

UtilCopyData+fff8: // end of our memory
UtilCopyData_Count:
  dd 0
UtilCopyData_Enabled:
  dd 1



//-----------------------------------------------------------------------------
// disable will just set flag to 0
//-----------------------------------------------------------------------------
[DISABLE]
UtilCopyData_Enabled:
  dd 0

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>209</ID>
              <Description>"UtilCopyData_Count"</Description>
              <LastState Value="0" Activated="0" RealAddress="1EE6FFF8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>UtilCopyData_Count</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>210</ID>
              <Description>"UtilCopyData_Enabled"</Description>
              <LastState Value="0" Activated="0" RealAddress="1EE6FFFC"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>UtilCopyData_Enabled</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>236</ID>
              <Description>"UCD: Damage"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-08
  Author : Jason

  Test scsript to call UtilCopyData when taking damage

  Testing structure:
    0150: HP (float)

    0000: Same pointer for me, diff pointer for enemy
    0028: Same pointer for me, diff pointer for enemy
    0134: Same poitner for me, diff pointer for enemy
    0154: 1 for me, 0 for enemy
    0158: 5.0 for me, 1.0 for enemy (3F800000)
    0160: 0.0 for me, 1.0 for enemy (3F800000)



}

[ENABLE]

globalalloc(TEST_DAMAGE,$100000) // 1mb
TEST_DAMAGE:
  dd TEST_DAMAGE+3000 // address to start storing data
  dd TEST_DAMAGE+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 200 // bytes of stack to store
  dd 300 // bytes of data to store at pushed address
  dd 1 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
TEST_DAMAGE+1000: // zero address area to start
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

aobscanmodule(UCD_Damage,oSpaceGame.exe,F3 0F 10 8F 50 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
//-----------------------------------------------------------------------------
// calling UtilCopyData
  pushad
  pushfd
  push edi
  push TEST_DAMAGE
  call UtilCopyData
  popfd
  popad
//-----------------------------------------------------------------------------
  // if [edi+00000154] is 0, it is probably enemy ship
  cmp dword ptr [edi+00000154],0
  je skip
  xorps xmm0,xmm0 // zero damage
skip:
  movss xmm1,[edi+00000150]
  jmp return

UCD_Damage:
  jmp code
  nop
  nop
  nop
return:
registersymbol(UCD_Damage)

[DISABLE]

UCD_Damage:
  db F3 0F 10 8F 50 01 00 00

unregistersymbol(UCD_Damage)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EB0D9

"oSpaceGame.exe"+6EB0AB: EB A9                       -  jmp oSpaceGame.exe+6EB056
"oSpaceGame.exe"+6EB0AD: F3 0F 10 8C 8E D0 00 00 00  -  movss xmm1,[esi+ecx*4+000000D0]
"oSpaceGame.exe"+6EB0B6: F2 0F 10 25 30 90 A4 01     -  movsd xmm4,[oSpaceGame.exe+B79030]
"oSpaceGame.exe"+6EB0BE: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0C1: F2 0F 5E E1                 -  divsd xmm4,xmm1
"oSpaceGame.exe"+6EB0C5: 66 0F 5A CC                 -  cvtpd2ps xmm1,xmm4
"oSpaceGame.exe"+6EB0C9: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0CD: F3 0F 5A C9                 -  cvtss2sd xmm1,xmm1
"oSpaceGame.exe"+6EB0D1: F2 0F 59 C8                 -  mulsd xmm1,xmm0
"oSpaceGame.exe"+6EB0D5: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EB0D9: F3 0F 10 8F 50 01 00 00     -  movss xmm1,[edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EB0E1: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0E5: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0E8: F2 0F 5C C8                 -  subsd xmm1,xmm0
"oSpaceGame.exe"+6EB0EC: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
"oSpaceGame.exe"+6EB0F0: F3 0F 11 87 50 01 00 00     -  movss [edi+00000150],xmm0
"oSpaceGame.exe"+6EB0F8: 8B 87 80 02 00 00           -  mov eax,[edi+00000280]
"oSpaceGame.exe"+6EB0FE: 85 C0                       -  test eax,eax
"oSpaceGame.exe"+6EB100: 74 2A                       -  je oSpaceGame.exe+6EB12C
"oSpaceGame.exe"+6EB102: 80 B8 34 01 00 00 00        -  cmp byte ptr [eax+00000134],00
"oSpaceGame.exe"+6EB109: 74 14                       -  je oSpaceGame.exe+6EB11F
}


{
STEP 1: Had these first backwards I think

    0140: pointer for me, 0 for enemy (0 for some of mine too, type?)
    0144: 1 for me, 0 for enemy (0 for some of mine too, type?)
    0148: 8 for me, 0 for enemy (0 for some of mine too, type?)
    0154: 0 for me, 1 for enemy (1 for most of mine?)
    0160: (float) 1.0 for me, 0.0 for enemy (0.0 for most of mine too)

    0000: Same pointer for me, diff for enemy (01A3C5F8/01A3C328) - function pointers
    0028: Same pointer for me, diff for enemy
          0018: 6 for me, 0 for enemy
          0040: 9 for me, 0 for enemy
          004c: 0 for me, pointer for enemy
          0050: 0 for me, 3 for enemy
          0054: 0 for me, 8 for enemy
          0058: 11 for me, 0 for enemy
          0068: FFFFFFFF for me, 40000000 for enemy
          0078: 00000100 for me, 04812470 for enemy
          0080: Same pointer for me, diff for enemy
          0084: 0 for me, FFFFFFFF for enemy
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>216</ID>
              <Description>"TEST: AP"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Shadowrun.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  INJECT_AP1, INJECT_AP2 - both execute loading AP when moving the cursor around

  HOLD LCONTROL and LSHIFT down (left control and shift) while moving the
  mouse to get at least 5 AP

  EBX is a pointer, same one for friends, same one for enemies
      0014, 0020, 0028, 002c, 0030, 004c, 0050, 0054, 0094, 00A0, 00A4, 00B4
            are all null for enemies, pointer for player

  (string pointers have length at 0008, unicode bytes at 000C)
  Memory (EAX)
     08: Pointer - different for each entity, (AP at +34?   max ap?)
     58: String - Name (i.e. Verno for me, Paco for friend, Stevie J, Krund, Thistle for baddies
     5C: String - Body? Story/Paco for friend, ElfMale for me, Core/HumanMale for one, Gangers/OrkMale, Gangers/ElfFemale
     60: String - Model? npc_humanmale, pc_elfmale_o???, backer_human, generic_stat
     98: AP (int)
     9C: Health
     C0: Pointer - 30 is null for non-player non-friends, 003C is null for non-player, 0044 is null for non-player
     C4: Pointer - 0010 is same pointer for player and friend, 0014 is same pointer for player and friend
                 0010: "Player.xml", "Guard - Seek And Destroy AttitudeCautious.xml"
                 0014: "Player", "Guard - Seek And Destroy"
                      Maybe this is who controls and we can reliably go off 'Player'?
     DC: String - Faction?  ("shadowrunners" for me and friend, "gangers" for bad guys, 'hellhound')
     E0: Pointer - same for friend team, same for enemies (0100 bytes) - might be valuable
XXXXXE8: 0 for enemies, pointer for friend team (AP USE ONLY?, opposite this last time, pointer for player and friend, pointer for enemy)
XXXXXF8: 0 for enemies, pointer for friend team (NOT TRUE, opposite this last time, pointer for player and friend, pointer for enemy)
XXXXXFC: 0 for enemies, pointer for friend team (NOT TRUE, sometimes 0 for friend and player), last time opposite, 0 for player and friend, pointer for enemies
XXXXX108: pointer for friend, 0 for player and enemies (AP USE ONLY?, 0 for friend and pointer for 1 enemy once)
     120: 0 for player, pointer for enemies
     124: 0 for player, pointer for enemies
     128: 0 for player, pointer for enemies
     12C: 0 for player, pointer for enemies
     134: 0 for player, pointer for enemies
     1B4: 0 for player, 1 for enemies
     1F8: 0100 for player, 0 for enemies
     210: 0 for player, 0100 for enemies
     230: Seems to be flag bytes, 00010000 for player/friend, 01000000 for enemies, but I think player was 00010100 once




     [ESP+14], [ESP+18], and [ESP+1C] seem to all be 0 when switching characters
     [ESP+20], [ESP+24], and [ESP+28] seem to all be 0 for the previous character selected
     ECX and EDX can be null (0) for non-player team
     ESI seems to be pointer (EAX) for player team, but 2(ap?) for others
}

[ENABLE]

globalalloc(TEST_AP,$100000) // 1mb
TEST_AP:
  dd TEST_AP+3000 // address to start storing data
  dd TEST_AP+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 200 // bytes of stack to store
  dd 300 // bytes of data to store at pushed address
  dd 1 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
TEST_AP+1000: // zero address area to start
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

aobscan(INJECT_AP1,8B 80 98 00 00 00 85 C0 7E) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
//-----------------------------------------------------------------------------
// Here is the code you will inject, push registers, push flags, push stack,
// push memory address, and finally push pointer to structure with settings,
// then call UtilCopyData.  Afterwards pop flags and registers and you are
// back where you started
//
label(skiputilcopydata)
  push 00000000 // room for our count, will make stack offsets off by 4
  pushad
  pushfd

  cmp eax,esi // test1: values should be the same
  jne skiputilcopydata

  test ecx,ecx // test2: non-null ecx and edx
  jz skiputilcopydata
  test edx,edx
  jz skiputilcopydata

  xor ecx,ecx // will have count
//  cmp dword ptr [eax+e8],1
//  adc ecx,0
//  cmp dword ptr [eax+f8],1
//  adc ecx,0
//  cmp dword ptr [eax+fc],1
//  adc ecx,0
  cmp dword ptr [eax+120],1
  adc ecx,0
  cmp dword ptr [eax+124],1
  adc ecx,0
  cmp dword ptr [eax+128],1
  adc ecx,0
  cmp dword ptr [eax+12c],1
  adc ecx,0
  cmp dword ptr [eax+134],1
  adc ecx,0
  mov [esp+24],ecx

  push eax
  push TEST_AP
  call UtilCopyData

skiputilcopydata:
  popfd
  popad
  add esp,4 // our count
//-----------------------------------------------------------------------------

skip:
  mov eax,[eax+00000098]
  jmp return

INJECT_AP1:
  jmp code
  nop
return:
registersymbol(INJECT_AP1)


[DISABLE]

INJECT_AP1:
  db 8B 80 98 00 00 00

unregistersymbol(INJECT_AP1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1A5BC251

1A5BC23C: 8B 78 24        - mov edi,[eax+24]
1A5BC23F: 8B C7           - mov eax,edi
1A5BC241: 8D 65 FC        - lea esp,[ebp-04]
1A5BC244: 5F              - pop edi
1A5BC245: C9              - leave
1A5BC246: C3              - ret
1A5BC247: 00 55 8B        - add [ebp-75],dl
1A5BC24A: EC              - in al,dx
1A5BC24B: 83 EC 08        - sub esp,08
1A5BC24E: 8B 45 08        - mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
1A5BC251: 8B 80 98000000  - mov eax,[eax+00000098]
// ---------- DONE INJECTING  ----------
1A5BC257: 85 C0           - test eax,eax
1A5BC259: 7E 18           - jle 1A5BC273
1A5BC25B: 83 EC 08        - sub esp,08
1A5BC25E: 6A 06           - push 06
1A5BC260: FF 75 08        - push [ebp+08]
1A5BC263: E8 10E80400     - call 1A60AA78
1A5BC268: 83 C4 10        - add esp,10
1A5BC26B: 85 C0           - test eax,eax
1A5BC26D: 74 04           - je 1A5BC273
1A5BC26F: 33 C0           - xor eax,eax
}

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>234</ID>
              <Description>"TEST: AP Use"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Shadowrun.exe
  Version: 
  Date   : 2014-05-04
  Author : Jason

  This stores the new AP value after being used.
}

globalalloc(TEST_APUSE,$100000) // 1mb
TEST_APUSE:
  dd TEST_APUSE+3000 // address to start storing data
  dd TEST_APUSE+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 200 // bytes of stack to store
  dd 300 // bytes of data to store at pushed address
  dd 1 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
TEST_APUSE+1000: // zero address area to start
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

[ENABLE]

aobscan(INJECT_APUSE,89 88 98 00 00 00 C9) // should be unique
alloc(newmem,$1000)

label(code)
label(isEnemy)
label(isFriend)
label(done)
label(return)

newmem:

code:
//-----------------------------------------------------------------------------
  pushad
  pushfd

  push eax // to use pointer later
  push eax // argument
  push TEST_APUSE
  call UtilCopyData

  label(ucd_notfound)
  pop esi
  test eax,eax
  jz ucd_notfound
  // 0020: 120 is 0 for player
  // 0024: 124 is 0 for player
  // 0028: 128 is 0 for player
  // 002C: 12C is 0 for player
  // 0030: 134 is 0 for player
  // XXXX: 1B4 is 0 for player (invalid)
  // 0038: 1F8 is 100 for  player
  // 003C: 210 is 0 for player
  // XXXX: 230: 0001XXXX for player (always set) - maybe flag for active team?
  // XXXX: 230: 0100XXXX for enemy (always clear)
  // 0034: globals_IsFriend result

  cmp dword ptr [esi+120],1
  adc [eax+20],0

  cmp dword ptr [esi+124],1
  adc [eax+24],0

  cmp dword ptr [esi+128],1
  adc [eax+28],0

  cmp dword ptr [esi+12c],1
  adc [eax+2c],0

  cmp dword ptr [esi+134],1
  adc [eax+30],0

  cmp dword ptr [esi+1b4],1 // DOESN'T WORK
  adc [eax+34],0

{  label(s38)
  cmp dword ptr [esi+1f8],0100
  jne s38
  inc dword ptr [eax+38]
  s38:}
  mov ebx,eax
  push esi
  call globals_IsFriend
  mov [ebx+38],eax
  mov eax,ebx

  cmp dword ptr [esi+210],1
  adc [eax+3c],0


{  label(s230_1) // DOESN'T WORK - set for all - maybe if on active team?
  mov ebx,[esi+230]
  and ebx,FFFF0000
  cmp ebx,00010000
  jne s230_1
  inc dword ptr [eax+40]
  s230_1:

  label(s230_2) // DOESN'T WORK, clear for all
  mov ebx,[esi+230]
  and ebx,FFFF0000
  cmp ebx,01000000
  jne s230_2
  inc dword ptr [eax+44]
  s230_2:}


ucd_notfound:

  popfd
  popad
//-----------------------------------------------------------------------------
  pushad

  xor ecx,ecx
  cmp dword ptr [eax+120],1
  adc ecx,0
  cmp dword ptr [eax+124],1
  adc ecx,0
  cmp dword ptr [eax+128],1
  adc ecx,0
  cmp dword ptr [eax+12c],1
  adc ecx,0
  cmp dword ptr [eax+134],1
  adc ecx,0
  cmp ecx,4 // should be 5 for player and friend, 0 for enemy
  jae isFriend
  cmp ecx,1
  jbe isEnemy
  // not sure what it is, just do default
  popad
  jmp done

isFriend:
  label(giveFriendlyAP)
  label(skipGiveFriendlyAP)
  cmp dword ptr [globals+0004],1 // bAlwaysFriendlyAP
  je giveFriendlyAP
  cmp dword ptr [globals+0008],1 // bShiftGivesFriendlyAP
  jne skipGiveFriendlyAP

  // check for left shift pressed to give ap
  push 000000A0 // VK_LSHIFT http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx
  call GetAsyncKeyState
  test eax,8000
  jz skipGiveFriendlyAP

giveFriendlyAP:
  popad
  mov ecx,[eax+00000098]
  cmp ecx,#10
  ja done
  mov ecx,#10
  jmp done

skipGiveFriendlyAP:
  popad
  jmp done

isEnemy:
  label(skip_bNoEnemyAP)
  cmp dword ptr [globals+0000],1 // bNoEnemyAP
  jne skip_bNoEnemyAP
  popad
  xor ecx,ecx
  jmp done
skip_bNoEnemyAP:
  popad
  jmp done

done:
  mov [eax+00000098],ecx
  jmp return

INJECT_APUSE:
  jmp code
  nop
return:
registersymbol(INJECT_APUSE)

[DISABLE]

INJECT_APUSE:
  db 89 88 98 00 00 00

unregistersymbol(INJECT_APUSE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1D0520C2

1D0520A8: C3               - ret 
1D0520A9: 00 00            - add [eax],al
1D0520AB: 00 00            - add [eax],al
1D0520AD: 00 00            - add [eax],al
1D0520AF: 00 55 8B         - add [ebp-75],dl
1D0520B2: EC               - in al,dx
1D0520B3: 83 EC 08         - sub esp,08
1D0520B6: 8B 45 08         - mov eax,[ebp+08]
1D0520B9: 8B 88 98000000   - mov ecx,[eax+00000098]
1D0520BF: 03 4D 0C         - add ecx,[ebp+0C]
// ---------- INJECTING HERE ----------
1D0520C2: 89 88 98000000   - mov [eax+00000098],ecx
// ---------- DONE INJECTING  ----------
1D0520C8: C9               - leave 
1D0520C9: C3               - ret 
1D0520CA: 00 00            - add [eax],al
1D0520CC: 00 00            - add [eax],al
1D0520CE: 00 00            - add [eax],al
1D0520D0: 55               - push ebp
1D0520D1: 8B EC            - mov ebp,esp
1D0520D3: 56               - push esi
1D0520D4: 83 EC 04         - sub esp,04
1D0520D7: 83 7D 10 00      - cmp dword ptr [ebp+10],00
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>215</ID>
              <Description>"TEST: Sample"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : &lt;NONE&gt;
  Version:
  Date   : 2014-05-03
  Author : Jason

  This sample code used to test the floating point section of UtilCopyData.
  Enabling or disabling it will create a thread to run the code and call
  UtilCopyData and you can use the structure dissector to see what it is
  like.
}

[ENABLE]

globalalloc(TEST_SAMPLE,$100000) // 1mb
TEST_SAMPLE:
  dd TEST_SAMPLE+3000 // address to start storing data
  dd TEST_SAMPLE+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 100 // bytes of stack to store
  dd 300 // bytes of data to store at pushed address
  dd 1 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

alloc(newmem,$1000)

label(code)

newmem:
  dd (float)100
  dd (float)111
  dd (float)122
  dd (float)133
  dd (float)144
  dd (float)155
  dd (float)166
  dd (float)177

code:
  pushad

  fld [newmem+1c] // 177 will go in ST(7)
  fld [newmem+18] // 166 will go in ST(6)
  fld [newmem+14] // 155 will go in ST(5)
  fld [newmem+10] // 144 will go in ST(4)
  fld [newmem+0c] // 133 will go in ST(3)
  fld [newmem+08] // 122 will go in ST(2)
  fld [newmem+04] // 111 will go in ST(1)
  fld [newmem+00] // 100 will go in ST(0)

  movss xmm0,[newmem+00] // 100 will go in xmm0
  movss xmm1,[newmem+04] // 111 will go in xmm1
  movss xmm2,[newmem+08] // 122 will go in xmm2
  movss xmm3,[newmem+0c] // 133 will go in xmm3
  movss xmm4,[newmem+10] // 144 will go in xmm4
  movss xmm5,[newmem+14] // 155 will go in xmm5
  movss xmm6,[newmem+18] // 166 will go in xmm6
  movss xmm7,[newmem+1c] // 177 will go in xmm7

  mov eax,11111111
  mov ebx,22222222
  mov ecx,33333333
  mov edx,44444444
  mov esi,55555555
  mov edi,66666666
  mov ebp,77777777

  // so we have something to look at on the stack
  sub esp,80 // room
  push eax
  push ebx
  push ecx
  push edx
  push esi
  push edi
  push ebp
  pushfd
  sub esp,80 // room
  stc // set carry flag

//-----------------------------------------------------------------------------
// Here is the code you will inject, push registers, push flags, push stack,
// push memory address, and finally push pointer to structure with settings,
// then call UtilCopyData.  Afterwards pop flags and registers and you are
// back where you started
//
  pushad
  pushfd

  push newmem // memory is what we have here, data and code
  push TEST_SAMPLE //
  call UtilCopyData

  popfd
  popad
//-----------------------------------------------------------------------------

  add esp,120 // 80+80 we subtracted and 7 registers + flags we pushed
  popad
  ret

CREATETHREAD(code)

[DISABLE]


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>41</ID>
              <Description>"TEST: ManaUse"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Reckoning.exe
  Version: 
  Date   : 2014-04-19
  Author : Jason

  This is what changes mana when you use it
}

[ENABLE]

aobscanmodule(INJECT_ManaUse,Reckoning.exe,89 8D 84 00 00 00 EB) // should be unique

globalalloc(TEST_MANAUSE,$100000) // 1mb
TEST:
  dd TEST_MANAUSE+3000 // address to start storing data
  dd TEST_MANAUSE+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 300 // bytes of stack to store
  dd 400 // bytes of data to store at pushed address
  dd 0 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:

//-----------------------------------------------------------------------------
  pushad
  pushfd
  push ebp
  push TEST
  call UtilCopyData
  popfd
  popad
//-----------------------------------------------------------------------------

  mov [ebp+00000084],ecx
  jmp return

INJECT_ManaUse:
  jmp code
  nop
return:
registersymbol(INJECT_ManaUse)

[DISABLE]

INJECT_ManaUse:
  db 89 8D 84 00 00 00

unregistersymbol(INJECT_ManaUse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Reckoning.exe"+39AFC1

"Reckoning.exe"+39AFA9: 5E                      - pop esi
"Reckoning.exe"+39AFAA: 5D                      - pop ebp
"Reckoning.exe"+39AFAB: 83 C4 0C                - add esp,0C
"Reckoning.exe"+39AFAE: C2 0400                 - ret 0004
"Reckoning.exe"+39AFB1: 8B 8D 84000000          - mov ecx,[ebp+00000084]
"Reckoning.exe"+39AFB7: 8B D0                   - mov edx,eax
"Reckoning.exe"+39AFB9: F7 DA                   - neg edx
"Reckoning.exe"+39AFBB: 3B CA                   - cmp ecx,edx
"Reckoning.exe"+39AFBD: 76 0A                   - jna Reckoning.exe+39AFC9
"Reckoning.exe"+39AFBF: 03 C8                   - add ecx,eax
// ---------- INJECTING HERE ----------
"Reckoning.exe"+39AFC1: 89 8D 84000000          - mov [ebp+00000084],ecx
// ---------- DONE INJECTING  ----------
"Reckoning.exe"+39AFC7: EB 0A                   - jmp Reckoning.exe+39AFD3
"Reckoning.exe"+39AFC9: C7 85 84000000 00000000 - mov [ebp+00000084],00000000
"Reckoning.exe"+39AFD3: 8B 45 7C                - mov eax,[ebp+7C]
"Reckoning.exe"+39AFD6: 33 C9                   - xor ecx,ecx
"Reckoning.exe"+39AFD8: 85 C0                   - test eax,eax
"Reckoning.exe"+39AFDA: 0F9C C1                 - setl cl
"Reckoning.exe"+39AFDD: 49                      - dec ecx
"Reckoning.exe"+39AFDE: 23 C8                   - and ecx,eax
"Reckoning.exe"+39AFE0: 39 8D 84000000          - cmp [ebp+00000084],ecx
"Reckoning.exe"+39AFE6: 73 10                   - jae Reckoning.exe+39AFF8
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>214</ID>
              <Description>"TEST: Backpack Size"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Reckoning.exe
  Version: Steam
  Date   : 2014-04-20
  Author : Jason

  This code accesses A LOT of addresses, including one that is the maximum
  number of items you can carry :)
}

[ENABLE]

aobscanmodule(INJECT_TEST_BACKPACKSIZE,Reckoning.exe,8B 51 0C 8B F9) // should be unique

globalalloc(TEST_BP,$100000) // 1mb
TEST_BP:
  dd TEST_BP+3000 // address to start storing data
  dd TEST_BP+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 300 // bytes of stack to store
  dd 400 // bytes of data to store at pushed address
  dd 0 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

alloc(newmem,$1000)

label(code)
label(skip)
label(doIt)
label(return)

newmem:
  label(matchSize)
  registersymbol(matchSize)
  matchSize:
    dd #500

  label(pBackpackBase)
  registersymbol(pBackpackBase)
  pBackpackBase:
    dd 0


code:

//-----------------------------------------------------------------------------
  pushad
  pushfd
  mov eax,[matchSize]
  test eax,eax
  jz doIt
  cmp eax,[ecx+0C]
  jne skip
doIt:

  // test1: [ESP+14] should return to 473F17
  mov eax,[ESP+38] // add 24 for pushad (20) and pushfd (04)
  cmp eax,00473F17
  jne skip

  // tes2: [ESP+2C] should be 0
  mov eax,[ESP+50] // add 24 for pushad (20) and pushfd (04)
  test eax,eax
  jnz skip

  // [esp+4C] seems to be 1000 (3E8) for backpack, 0 1 or pointer for others
  mov eax,[esp+70]
  cmp eax,#1000
  jne skip
  // only 2 left, backpack (500) and something that is 300, don't know what, [ESP+44] solves it

  // [esp+44] seems to be 40 for backpack 16 for others
  mov eax,[esp+68]
  cmp eax,#40
  jne skip

  // eax looks to be 3 for backpack, 9 for others
  // [esp+34] seems to be 5 for backpack, 2 for others
  // [esp+48] seems to be 3 for backpack, 0 1 or 5 for others

  mov [pBackpackBase],ecx
  push ecx
  push TEST_BP
  call UtilCopyData
skip:
  popfd
  popad
//-----------------------------------------------------------------------------

  mov edx,[ecx+0C]
  mov edi,ecx
  jmp return

INJECT_TEST_BACKPACKSIZE:
  jmp code
return:
registersymbol(INJECT_TEST_BACKPACKSIZE)

[DISABLE]

INJECT_TEST_BACKPACKSIZE:
  db 8B 51 0C 8B F9

unregistersymbol(INJECT_TEST_BACKPACKSIZE)
unregistersymbol(matchSize)
unregistersymbol(pBackpackBase)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Reckoning.exe"+4F651B

"Reckoning.exe"+4F6501: 8B 55 0C           - mov edx,[ebp+0C]
"Reckoning.exe"+4F6504: 8B CA              - mov ecx,edx
"Reckoning.exe"+4F6506: C1 E9 03           - shr ecx,03
"Reckoning.exe"+4F6509: 33 CA              - xor ecx,edx
"Reckoning.exe"+4F650B: C1 E9 05           - shr ecx,05
"Reckoning.exe"+4F650E: 33 CA              - xor ecx,edx
"Reckoning.exe"+4F6510: 23 48 10           - and ecx,[eax+10]
"Reckoning.exe"+4F6513: C1 E1 04           - shl ecx,04
"Reckoning.exe"+4F6516: 03 CE              - add ecx,esi
"Reckoning.exe"+4F6518: 8B 41 08           - mov eax,[ecx+08]
// ---------- INJECTING HERE ----------
"Reckoning.exe"+4F651B: 8B 51 0C           - mov edx,[ecx+0C]
"Reckoning.exe"+4F651E: 8B F9              - mov edi,ecx
// ---------- DONE INJECTING  ----------
"Reckoning.exe"+4F6520: 2B FE              - sub edi,esi
"Reckoning.exe"+4F6522: C1 FF 04           - sar edi,04
"Reckoning.exe"+4F6525: 8D 3C BD 04000000  - lea edi,[edi*4+00000004]
"Reckoning.exe"+4F652C: 8B DE              - mov ebx,esi
"Reckoning.exe"+4F652E: 2B DF              - sub ebx,edi
"Reckoning.exe"+4F6530: 8B 3B              - mov edi,[ebx]
"Reckoning.exe"+4F6532: 8B 19              - mov ebx,[ecx]
"Reckoning.exe"+4F6534: 3B 5D 08           - cmp ebx,[ebp+08]
"Reckoning.exe"+4F6537: 75 08              - jne Reckoning.exe+4F6541
"Reckoning.exe"+4F6539: 8B 49 04           - mov ecx,[ecx+04]


For backpack, [ESP+14] is 473F17
Reckoning.exe+73EE0 - 8B 44 24 1C           - mov eax,[esp+1C]
Reckoning.exe+73EE4 - 8B 54 24 34           - mov edx,[esp+34]
Reckoning.exe+73EE8 - C1 EB 08              - shr ebx,08
Reckoning.exe+73EEB - 83 C1 04              - add ecx,04
Reckoning.exe+73EEE - 81 E3 FFFF0100        - and ebx,0001FFFF : [00000000]
Reckoning.exe+73EF4 - 8D 1C D8              - lea ebx,[eax+ebx*8]
Reckoning.exe+73EF7 - 8B 03                 - mov eax,[ebx]
Reckoning.exe+73EF9 - 89 4C 24 10           - mov [esp+10],ecx
Reckoning.exe+73EFD - 8B 4B 04              - mov ecx,[ebx+04]
Reckoning.exe+73F00 - 8B 5A 0C              - mov ebx,[edx+0C]
Reckoning.exe+73F03 - 51                    - push ecx
Reckoning.exe+73F04 - 89 44 24 7C           - mov [esp+7C],eax
Reckoning.exe+73F08 - 50                    - push eax
Reckoning.exe+73F09 - 8B C3                 - mov eax,ebx
Reckoning.exe+73F0B - 89 8C 24 84000000     - mov [esp+00000084],ecx
Reckoning.exe+73F12 - E8 D9254800           - call Reckoning.exe+4F64F0
Reckoning.exe+73F17 - 89 44 24 28           - mov [esp+28],eax-----------------------return with backpack size
Reckoning.exe+73F1B - 89 54 24 2C           - mov [esp+2C],edx
Reckoning.exe+73F1F - A8 0F                 - test al,0F
Reckoning.exe+73F21 - 74 1F                 - je Reckoning.exe+73F42
Reckoning.exe+73F23 - 8B 4B 0C              - mov ecx,[ebx+0C]
Reckoning.exe+73F26 - 89 0F                 - mov [edi],ecx
Reckoning.exe+73F28 - 8B 4C 24 34           - mov ecx,[esp+34]
Reckoning.exe+73F2C - 8B 49 0C              - mov ecx,[ecx+0C]
Reckoning.exe+73F2F - 89 4F 04              - mov [edi+04],ecx
Reckoning.exe+73F32 - 89 47 08              - mov [edi+08],eax
Reckoning.exe+73F35 - 89 57 0C              - mov [edi+0C],edx
Reckoning.exe+73F38 - 89 06                 - mov [esi],eax
Reckoning.exe+73F3A - 89 56 04              - mov [esi+04],edx
Reckoning.exe+73F3D - E9 4BE9FFFF           - jmp Reckoning.exe+7288D
Reckoning.exe+73F42 - C7 47 04 00000000     - mov [edi+04],00000000
Reckoning.exe+73F49 - 8B 43 08              - mov eax,[ebx+08]
Reckoning.exe+73F4C - 85 C0                 - test eax,eax
Reckoning.exe+73F4E - 74 15                 - je Reckoning.exe+73F65
Reckoning.exe+73F50 - 8B 7D 08              - mov edi,[ebp+08]
Reckoning.exe+73F53 - 57                    - push edi
Reckoning.exe+73F54 - B9 01000000           - mov ecx,00000001
Reckoning.exe+73F59 - E8 32A14800           - call Reckoning.exe+4FE090
Reckoning.exe+73F5E - 83 C4 04              - add esp,04
Reckoning.exe+73F61 - A8 0F                 - test al,0F
Reckoning.exe+73F63 - 75 0B                 - jne Reckoning.exe+73F70

}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>235</ID>
              <Description>"TEST: UpgradePoints"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : Reckoning.exe
  Version: Steam
  Date   : 2014-04-19
  Author : Jason

  When upgrading skills and abilities, this reads the skill points remaining.
  DANGEROUS!  It seems to also be called for other things, I don't know what.
  When backing out of the levelling up process it is called several times for
  instance.  The cheat should only be enabled when looking at the skill
  and ability level up screens.

  Also used to load XP.
}

[ENABLE]

aobscanmodule(INJECT_READ_SKILL_POINTS_REMAINING,Reckoning.exe,8B 50 18 89 53 18) // should be unique

globalalloc(TEST_UP,$100000) // 1mb
TEST_UP:
  dd TEST_UP+3000 // address to start storing data
  dd TEST_UP+1000 // memory area to store addresses, make sure there is enough room by dividing total memory by total size and multiplying by 4, set to 0 to not store
  dd d0000 // total memory size to use, our allocated size minus the start data offset
  dd 400 // bytes of stack to store
  dd 300 // bytes of data to store at pushed address
  dd 0 // flag to store FXSave data or not
  dd 0 // initialized?  first call will fill remaining data, so reserve 100 bytes
  dd 0 // initialization data will be stored here and on to TEST+100, so don't use it!  first is size of individual record
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  dd 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

alloc(newmem,$1000)

label(code)
label(doIt)
label(skip)
label(return)

newmem:
  label(matchUP)
  registersymbol(matchUP)
  matchUP:
    dd #1

  label(pUPBase)
  registersymbol(pUPBase)
  pUPBase:
    dd 0

code:
//-----------------------------------------------------------------------------
  pushad
  pushfd
  mov ebx,[matchUP]
  test ebx,ebx
  jz doIt
  cmp ebx,[eax+18]
  jne skip

doIt:
  // test 1: [esp+c8] is pointer
  mov ebx,[esp+ec] // +24 for pushad/pushfd
  cmp ebx,400000
  jb skip

  // test 2: [esp+f4] is pointer
  mov ebx,[esp+118]
  cmp ebx,400000
  jb skip

  // test 3: [eax+4] is pointer
  cmp dword ptr [eax+4],400000
  jb skip

  // test 4: [eax+14] is C0000000 (-2.0)
  cmp dword ptr [eax+14],c0000000
  jne skip

  mov [pUPBase],eax
  push eax
  push TEST_UP
  call UtilCopyData


skip:
  popfd
  popad
//-----------------------------------------------------------------------------

  mov edx,[eax+18]
  mov [ebx+18],edx
  jmp return

INJECT_READ_SKILL_POINTS_REMAINING:
  jmp code
  nop
return:
registersymbol(INJECT_READ_SKILL_POINTS_REMAINING)

[DISABLE]

INJECT_READ_SKILL_POINTS_REMAINING:
  db 8B 50 18 89 53 18

unregistersymbol(INJECT_READ_SKILL_POINTS_REMAINING)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Reckoning.exe"+8C76E

"Reckoning.exe"+8C754: 85 C9           - test ecx,ecx
"Reckoning.exe"+8C756: 75 16           - jne Reckoning.exe+8C76E
"Reckoning.exe"+8C758: 8D 70 08        - lea esi,[eax+08]
"Reckoning.exe"+8C75B: 8D 43 08        - lea eax,[ebx+08]
"Reckoning.exe"+8C75E: E8 1D3E4500     - call Reckoning.exe+4E0580
"Reckoning.exe"+8C763: 5F              - pop edi
"Reckoning.exe"+8C764: 5E              - pop esi
"Reckoning.exe"+8C765: B8 01000000     - mov eax,00000001
"Reckoning.exe"+8C76A: 5B              - pop ebx
"Reckoning.exe"+8C76B: C2 0400         - ret 0004
// ---------- INJECTING HERE ----------
"Reckoning.exe"+8C76E: 8B 50 18        - mov edx,[eax+18]
"Reckoning.exe"+8C771: 89 53 18        - mov [ebx+18],edx
// ---------- DONE INJECTING  ----------
"Reckoning.exe"+8C774: 8B 40 1C        - mov eax,[eax+1C]
"Reckoning.exe"+8C777: 5F              - pop edi
"Reckoning.exe"+8C778: 89 43 1C        - mov [ebx+1C],eax
"Reckoning.exe"+8C77B: 5E              - pop esi
"Reckoning.exe"+8C77C: B8 01000000     - mov eax,00000001
"Reckoning.exe"+8C781: 5B              - pop ebx
"Reckoning.exe"+8C782: C2 0400         - ret 0004
"Reckoning.exe"+8C785: CC              - int 3 
"Reckoning.exe"+8C786: CC              - int 3 
"Reckoning.exe"+8C787: CC              - int 3 
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>237</ID>
          <Description>"Damage Delay?"</Description>
          <LastState Value="0.3000000119" Activated="0" RealAddress="01A05E40"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01A05E40</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>238</ID>
          <Description>"Damage Delay Set Value"</Description>
          <LastState Value="5" Activated="0" RealAddress="01A05848"/>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01A05848</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"TEST: Build Remaining 1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Seems to load remaining time for an item being built each frame
}

[ENABLE]


aobscanmodule(TEST_BUILD_REMAINING_1,oSpaceGame.exe,F3 0F 10 93 5C 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm2,[ebx+0000015C]
  jmp return

TEST_BUILD_REMAINING_1:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_BUILD_REMAINING_1)

[DISABLE]

TEST_BUILD_REMAINING_1:
  db F3 0F 10 93 5C 01 00 00

unregistersymbol(TEST_BUILD_REMAINING_1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+702D05

"oSpaceGame.exe"+702CE0: 66 0F 5A C1              -  cvtpd2ps xmm0,xmm1
"oSpaceGame.exe"+702CE4: F3 0F 10 08              -  movss xmm1,[eax]
"oSpaceGame.exe"+702CE8: F3 0F 11 44 24 10        -  movss [esp+10],xmm0
"oSpaceGame.exe"+702CEE: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+702CF1: F3 0F 5A C0              -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+702CF5: 66 0F 2F C1              -  comisd xmm0,xmm1
"oSpaceGame.exe"+702CF9: 89 4C 24 0C              -  mov [esp+0C],ecx
"oSpaceGame.exe"+702CFD: 77 04                    -  ja oSpaceGame.exe+702D03
"oSpaceGame.exe"+702CFF: 8D 44 24 10              -  lea eax,[esp+10]
"oSpaceGame.exe"+702D03: D9 00                    -  fld dword ptr [eax]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+702D05: F3 0F 10 93 5C 01 00 00  -  movss xmm2,[ebx+0000015C]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+702D0D: D9 9B 50 01 00 00        -  fstp dword ptr [ebx+00000150]
"oSpaceGame.exe"+702D13: 8B 81 3C 12 00 00        -  mov eax,[ecx+0000123C]
"oSpaceGame.exe"+702D19: F3 0F 10 07              -  movss xmm0,[edi]
"oSpaceGame.exe"+702D1D: F3 0F 10 88 FC 02 00 00  -  movss xmm1,[eax+000002FC]
"oSpaceGame.exe"+702D25: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+702D28: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+702D2B: F2 0F 5E C1              -  divsd xmm0,xmm1
"oSpaceGame.exe"+702D2F: 0F 57 C9                 -  xorps xmm1,xmm1
"oSpaceGame.exe"+702D32: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+702D35: F2 0F 5C D0              -  subsd xmm2,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"TEST: Build Remaining 2"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Seems to store remaining build time after decreasing it each frame
}

[ENABLE]

aobscanmodule(TEST_BUILD_REMAINING_2,oSpaceGame.exe,F3 0F 11 83 5C 01 00 00 0F) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss [ebx+0000015C],xmm0
  jmp return

TEST_BUILD_REMAINING_2:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_BUILD_REMAINING_2)

[DISABLE]

TEST_BUILD_REMAINING_2:
  db F3 0F 11 83 5C 01 00 00

unregistersymbol(TEST_BUILD_REMAINING_2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+702D40

"oSpaceGame.exe"+702D19: F3 0F 10 07              -  movss xmm0,[edi]
"oSpaceGame.exe"+702D1D: F3 0F 10 88 FC 02 00 00  -  movss xmm1,[eax+000002FC]
"oSpaceGame.exe"+702D25: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+702D28: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+702D2B: F2 0F 5E C1              -  divsd xmm0,xmm1
"oSpaceGame.exe"+702D2F: 0F 57 C9                 -  xorps xmm1,xmm1
"oSpaceGame.exe"+702D32: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+702D35: F2 0F 5C D0              -  subsd xmm2,xmm0
"oSpaceGame.exe"+702D39: 66 0F 5A C2              -  cvtpd2ps xmm0,xmm2
"oSpaceGame.exe"+702D3D: 0F 2F C8                 -  comiss xmm1,xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+702D40: F3 0F 11 83 5C 01 00 00  -  movss [ebx+0000015C],xmm0
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+702D48: 0F 82 5C 02 00 00        -  jb oSpaceGame.exe+702FAA
"oSpaceGame.exe"+702D4E: F3 0F 11 8B 5C 01 00 00  -  movss [ebx+0000015C],xmm1
"oSpaceGame.exe"+702D56: 8B 81 40 12 00 00        -  mov eax,[ecx+00001240]
"oSpaceGame.exe"+702D5C: 3B C6                    -  cmp eax,esi
"oSpaceGame.exe"+702D5E: 74 75                    -  je oSpaceGame.exe+702DD5
"oSpaceGame.exe"+702D60: 80 B8 C8 04 00 00 00     -  cmp byte ptr [eax+000004C8],00
"oSpaceGame.exe"+702D67: 74 6C                    -  je oSpaceGame.exe+702DD5
"oSpaceGame.exe"+702D69: F6 05 A4 01 B8 01 01     -  test byte ptr [oSpaceGame.exe+CB01A4],01
"oSpaceGame.exe"+702D70: 75 20                    -  jne oSpaceGame.exe+702D92
"oSpaceGame.exe"+702D72: B8 01 00 00 00           -  mov eax,00000001
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"TEST: Health 1 (A-E)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  All five TEST_HEALTH_1 injection points are called each frame (at least for damaged ship parts)

  TEST_HEALTH_1D is called only when part needs repair, even if not selected I think
}

[ENABLE]

aobscanmodule(TEST_HEALTH_1A,oSpaceGame.exe,F3 0F 10 91 50 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm2,[ecx+00000150]
  jmp return

TEST_HEALTH_1A:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_HEALTH_1A)

aobscanmodule(TEST_HEALTH_1B,oSpaceGame.exe,D9 83 50 01 00 00 56) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  fld dword ptr [ebx+00000150]
  jmp return2

TEST_HEALTH_1B:
  jmp code2
  nop
return2:
registersymbol(TEST_HEALTH_1B)

aobscanmodule(TEST_HEALTH_1C,oSpaceGame.exe,F3 0F 10 8B 50 01 00 00 F3 0F 11 44) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  movss xmm1,[ebx+00000150]
  jmp return5

TEST_HEALTH_1C:
  jmp code5
  nop
  nop
  nop
return5:
registersymbol(TEST_HEALTH_1C)

aobscanmodule(TEST_HEALTH_1D,oSpaceGame.exe,F3 0F 10 83 50 01 00 00 0F 5A C0 F2 0F 5E) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  movss xmm0,[ebx+00000150]
  jmp return9

TEST_HEALTH_1D:
  jmp code9
  nop
  nop
  nop
return9:
registersymbol(TEST_HEALTH_1D)

aobscanmodule(TEST_HEALTH_1E,oSpaceGame.exe,F3 0F 10 86 50 01 00 00 8B 46) // should be unique
alloc(newmem14,$1000)

label(code14)
label(return14)

newmem14:

code14:
  movss xmm0,[esi+00000150]
  jmp return14

TEST_HEALTH_1E:
  jmp code14
  nop
  nop
  nop
return14:
registersymbol(TEST_HEALTH_1E)

[DISABLE]

TEST_HEALTH_1A:
  db F3 0F 10 91 50 01 00 00

unregistersymbol(TEST_HEALTH_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EEEA9

"oSpaceGame.exe"+6EEE80: F3 0F 10 0D FC 8F A4 01  -  movss xmm1,[oSpaceGame.exe+B78FFC]
"oSpaceGame.exe"+6EEE88: 33 D2                    -  xor edx,edx
"oSpaceGame.exe"+6EEE8A: 8B 8F 30 03 00 00        -  mov ecx,[edi+00000330]
"oSpaceGame.exe"+6EEE90: 03 CA                    -  add ecx,edx
"oSpaceGame.exe"+6EEE92: 8B 09                    -  mov ecx,[ecx]
"oSpaceGame.exe"+6EEE94: C6 44 24 14 00           -  mov byte ptr [esp+14],00
"oSpaceGame.exe"+6EEE99: F3 0F 11 4C 24 18        -  movss [esp+18],xmm1
"oSpaceGame.exe"+6EEE9F: 85 C9                    -  test ecx,ecx
"oSpaceGame.exe"+6EEEA1: 74 34                    -  je oSpaceGame.exe+6EEED7
"oSpaceGame.exe"+6EEEA3: 8A 99 04 04 00 00        -  mov bl,[ecx+00000404]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EEEA9: F3 0F 10 91 50 01 00 00  -  movss xmm2,[ecx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EEEB1: 88 5C 24 14              -  mov [esp+14],bl
"oSpaceGame.exe"+6EEEB5: 8B 99 78 0B 00 00        -  mov ebx,[ecx+00000B78]
"oSpaceGame.exe"+6EEEBB: F3 0F 10 83 E0 02 00 00  -  movss xmm0,[ebx+000002E0]
"oSpaceGame.exe"+6EEEC3: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EEEC6: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+6EEEC9: F2 0F 5E D0              -  divsd xmm2,xmm0
"oSpaceGame.exe"+6EEECD: 66 0F 5A C2              -  cvtpd2ps xmm0,xmm2
"oSpaceGame.exe"+6EEED1: F3 0F 11 44 24 18        -  movss [esp+18],xmm0
"oSpaceGame.exe"+6EEED7: 8B 8F D0 02 00 00        -  mov ecx,[edi+000002D0]
"oSpaceGame.exe"+6EEEDD: 8B 89 F4 01 00 00        -  mov ecx,[ecx+000001F4]
}
TEST_HEALTH_1B:
  db D9 83 50 01 00 00

unregistersymbol(TEST_HEALTH_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6FFD5C

"oSpaceGame.exe"+6FFD48: 83 C4 18              -  add esp,18
"oSpaceGame.exe"+6FFD4B: C2 04 00              -  ret 0004
"oSpaceGame.exe"+6FFD4E: CC                    -  int 3 
"oSpaceGame.exe"+6FFD4F: CC                    -  int 3 
"oSpaceGame.exe"+6FFD50: 55                    -  push ebp
"oSpaceGame.exe"+6FFD51: 8B EC                 -  mov ebp,esp
"oSpaceGame.exe"+6FFD53: 83 E4 F8              -  and esp,-08
"oSpaceGame.exe"+6FFD56: 83 EC 1C              -  sub esp,1C
"oSpaceGame.exe"+6FFD59: 53                    -  push ebx
"oSpaceGame.exe"+6FFD5A: 8B D9                 -  mov ebx,ecx
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6FFD5C: D9 83 50 01 00 00     -  fld dword ptr [ebx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6FFD62: 56                    -  push esi
"oSpaceGame.exe"+6FFD63: 33 F6                 -  xor esi,esi
"oSpaceGame.exe"+6FFD65: D9 9B A8 08 00 00     -  fstp dword ptr [ebx+000008A8]
"oSpaceGame.exe"+6FFD6B: 57                    -  push edi
"oSpaceGame.exe"+6FFD6C: 39 B3 A0 08 00 00     -  cmp [ebx+000008A0],esi
"oSpaceGame.exe"+6FFD72: 76 1D                 -  jna oSpaceGame.exe+6FFD91
"oSpaceGame.exe"+6FFD74: 8B 83 98 08 00 00     -  mov eax,[ebx+00000898]
"oSpaceGame.exe"+6FFD7A: E8 41 D9 19 00        -  call oSpaceGame.exe+89D6C0
"oSpaceGame.exe"+6FFD7F: 89 B3 98 08 00 00     -  mov [ebx+00000898],esi
"oSpaceGame.exe"+6FFD85: 89 B3 9C 08 00 00     -  mov [ebx+0000089C],esi
}
TEST_HEALTH_1C:
  db F3 0F 10 8B 50 01 00 00

unregistersymbol(TEST_HEALTH_1C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6F5C72

"oSpaceGame.exe"+6F5C4D: 8B 93 78 0B 00 00        -  mov edx,[ebx+00000B78]
"oSpaceGame.exe"+6F5C53: 56                       -  push esi
"oSpaceGame.exe"+6F5C54: 57                       -  push edi
"oSpaceGame.exe"+6F5C55: 8B BB 34 01 00 00        -  mov edi,[ebx+00000134]
"oSpaceGame.exe"+6F5C5B: 8B 87 EC 00 00 00        -  mov eax,[edi+000000EC]
"oSpaceGame.exe"+6F5C61: B1 01                    -  mov cl,01
"oSpaceGame.exe"+6F5C63: 83 F8 01                 -  cmp eax,01
"oSpaceGame.exe"+6F5C66: 74 02                    -  je oSpaceGame.exe+6F5C6A
"oSpaceGame.exe"+6F5C68: 32 C9                    -  xor cl,cl
"oSpaceGame.exe"+6F5C6A: F3 0F 10 82 E0 02 00 00  -  movss xmm0,[edx+000002E0]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6F5C72: F3 0F 10 8B 50 01 00 00  -  movss xmm1,[ebx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6F5C7A: F3 0F 11 44 24 20        -  movss [esp+20],xmm0
"oSpaceGame.exe"+6F5C80: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6F5C83: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6F5C86: 66 0F 2F C8              -  comisd xmm1,xmm0
"oSpaceGame.exe"+6F5C8A: 0F 83 41 06 00 00        -  jae oSpaceGame.exe+6F62D1
"oSpaceGame.exe"+6F5C90: 84 C9                    -  test cl,cl
"oSpaceGame.exe"+6F5C92: 0F 84 39 06 00 00        -  je oSpaceGame.exe+6F62D1
"oSpaceGame.exe"+6F5C98: 80 BF B2 01 00 00 00     -  cmp byte ptr [edi+000001B2],00
"oSpaceGame.exe"+6F5C9F: 0F 84 2C 06 00 00        -  je oSpaceGame.exe+6F62D1
"oSpaceGame.exe"+6F5CA5: 8B 87 E8 00 00 00        -  mov eax,[edi+000000E8]
}
TEST_HEALTH_1D:
  db F3 0F 10 83 50 01 00 00

unregistersymbol(TEST_HEALTH_1D)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6F60BB

"oSpaceGame.exe"+6F608E: F2 0F 5A C9              -  cvtsd2ss xmm1,xmm1
"oSpaceGame.exe"+6F6092: F3 0F 11 4C 24 28        -  movss [esp+28],xmm1
"oSpaceGame.exe"+6F6098: 66 0F 5A DB              -  cvtpd2ps xmm3,xmm3
"oSpaceGame.exe"+6F609C: F2 0F 5A C6              -  cvtsd2ss xmm0,xmm6
"oSpaceGame.exe"+6F60A0: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6F60A3: F3 0F 5A CB              -  cvtss2sd xmm1,xmm3
"oSpaceGame.exe"+6F60A7: F2 0F 5C C8              -  subsd xmm1,xmm0
"oSpaceGame.exe"+6F60AB: F2 0F 5A C1              -  cvtsd2ss xmm0,xmm1
"oSpaceGame.exe"+6F60AF: F3 0F 5A 4C 24 20        -  cvtss2sd xmm1,[esp+20]
"oSpaceGame.exe"+6F60B5: F3 0F 11 44 24 2C        -  movss [esp+2C],xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6F60BB: F3 0F 10 83 50 01 00 00  -  movss xmm0,[ebx+00000150] // CALLED ONLY IF IN NEED OF REPAIR
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6F60C3: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6F60C6: F2 0F 5E C1              -  divsd xmm0,xmm1
"oSpaceGame.exe"+6F60CA: F3 0F 10 0D 38 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D38]
"oSpaceGame.exe"+6F60D2: F3 0F 11 4C 24 30        -  movss [esp+30],xmm1
"oSpaceGame.exe"+6F60D8: F3 0F 10 0D 3C 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D3C]
"oSpaceGame.exe"+6F60E0: F3 0F 11 4C 24 34        -  movss [esp+34],xmm1
"oSpaceGame.exe"+6F60E6: F3 0F 10 0D 40 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D40]
"oSpaceGame.exe"+6F60EE: F3 0F 11 4C 24 38        -  movss [esp+38],xmm1
"oSpaceGame.exe"+6F60F4: F3 0F 10 0D 44 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D44]
"oSpaceGame.exe"+6F60FC: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
}
TEST_HEALTH_1E:
  db F3 0F 10 86 50 01 00 00

unregistersymbol(TEST_HEALTH_1E)
dealloc(newmem14)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E3871

"oSpaceGame.exe"+6E3859: CC                       -  int 3 
"oSpaceGame.exe"+6E385A: CC                       -  int 3 
"oSpaceGame.exe"+6E385B: CC                       -  int 3 
"oSpaceGame.exe"+6E385C: CC                       -  int 3 
"oSpaceGame.exe"+6E385D: CC                       -  int 3 
"oSpaceGame.exe"+6E385E: CC                       -  int 3 
"oSpaceGame.exe"+6E385F: CC                       -  int 3 
"oSpaceGame.exe"+6E3860: 83 EC 1C                 -  sub esp,1C
"oSpaceGame.exe"+6E3863: 8B 86 78 0B 00 00        -  mov eax,[esi+00000B78]
"oSpaceGame.exe"+6E3869: F3 0F 10 88 E0 02 00 00  -  movss xmm1,[eax+000002E0]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6E3871: F3 0F 10 86 50 01 00 00  -  movss xmm0,[esi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E3879: 8B 46 10                 -  mov eax,[esi+10]
"oSpaceGame.exe"+6E387C: 8B 4E 14                 -  mov ecx,[esi+14]
"oSpaceGame.exe"+6E387F: 53                       -  push ebx
"oSpaceGame.exe"+6E3880: 55                       -  push ebp
"oSpaceGame.exe"+6E3881: 8B AE 24 04 00 00        -  mov ebp,[esi+00000424]
"oSpaceGame.exe"+6E3887: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6E388A: 32 DB                    -  xor bl,bl
"oSpaceGame.exe"+6E388C: 83 C5 60                 -  add ebp,60
"oSpaceGame.exe"+6E388F: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6E3892: F2 0F 5E C1              -  divsd xmm0,xmm1
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>25</ID>
          <Description>"TEST: Health 2 (A-C) (selected)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  These three TEST_HEALTH_2 points seem to be called only when I have the
  part selected (and maybe only if it's damaged)
}

[ENABLE]

aobscanmodule(TEST_HEALTH_2A,oSpaceGame.exe,D9 87 50 01 00 00 0D) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fld dword ptr [edi+00000150]
  jmp return

TEST_HEALTH_2A:
  jmp code
  nop
return:
registersymbol(TEST_HEALTH_2A)

aobscanmodule(TEST_HEALTH_2B,oSpaceGame.exe,8A E0 02 00 00 F3 0F 10 97 50 01 00 00) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  movss xmm2,[edi+00000150]
  jmp return2

TEST_HEALTH_2B+05:
  jmp code2
  nop
  nop
  nop
return2:
registersymbol(TEST_HEALTH_2B)

aobscanmodule(TEST_HEALTH_2C,oSpaceGame.exe,88 E0 02 00 00 F3 0F 10 97 50 01 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  movss xmm2,[edi+00000150]
  jmp return5

TEST_HEALTH_2C+05:
  jmp code5
  nop
  nop
  nop
return5:
registersymbol(TEST_HEALTH_2C)

[DISABLE]

TEST_HEALTH_2A:
  db D9 87 50 01 00 00

unregistersymbol(TEST_HEALTH_2A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E8B07

"oSpaceGame.exe"+6E8AD8: 74 04                          -  je oSpaceGame.exe+6E8ADE
"oSpaceGame.exe"+6E8ADA: 3B F5                          -  cmp esi,ebp
"oSpaceGame.exe"+6E8ADC: 75 0A                          -  jne oSpaceGame.exe+6E8AE8
"oSpaceGame.exe"+6E8ADE: C7 81 F0 01 00 00 03 00 00 00  -  mov [ecx+000001F0],00000003
"oSpaceGame.exe"+6E8AE8: 89 81 18 03 00 00              -  mov [ecx+00000318],eax
"oSpaceGame.exe"+6E8AEE: D9 7C 24 0C                    -  fnstcw [esp+0C]
"oSpaceGame.exe"+6E8AF2: 8B 87 78 0B 00 00              -  mov eax,[edi+00000B78]
"oSpaceGame.exe"+6E8AF8: D9 80 E0 02 00 00              -  fld dword ptr [eax+000002E0]
"oSpaceGame.exe"+6E8AFE: D9 5C 24 14                    -  fstp dword ptr [esp+14]
"oSpaceGame.exe"+6E8B02: 0F B7 44 24 0C                 -  movzx eax,word ptr [esp+0C]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6E8B07: D9 87 50 01 00 00              -  fld dword ptr [edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E8B0D: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6E8B12: D8 74 24 14                    -  fdiv dword ptr [esp+14]
"oSpaceGame.exe"+6E8B16: D9 5C 24 14                    -  fstp dword ptr [esp+14]
"oSpaceGame.exe"+6E8B1A: D9 44 24 14                    -  fld dword ptr [esp+14]
"oSpaceGame.exe"+6E8B1E: D8 8F 68 01 00 00              -  fmul dword ptr [edi+00000168]
"oSpaceGame.exe"+6E8B24: 89 44 24 14                    -  mov [esp+14],eax
"oSpaceGame.exe"+6E8B28: D9 6C 24 14                    -  fldcw [esp+14]
"oSpaceGame.exe"+6E8B2C: DF 7C 24 28                    -  fistp qword ptr [esp+28]
"oSpaceGame.exe"+6E8B30: 8B 44 24 28                    -  mov eax,[esp+28]
"oSpaceGame.exe"+6E8B34: 89 81 08 03 00 00              -  mov [ecx+00000308],eax
}
TEST_HEALTH_2B+05:
  db F3 0F 10 97 50 01 00 00

unregistersymbol(TEST_HEALTH_2B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E8BB4

"oSpaceGame.exe"+6E8B96: 75 08                          -  jne oSpaceGame.exe+6E8BA0
"oSpaceGame.exe"+6E8B98: 3B C5                          -  cmp eax,ebp
"oSpaceGame.exe"+6E8B9A: 74 08                          -  je oSpaceGame.exe+6E8BA4
"oSpaceGame.exe"+6E8B9C: 3B D5                          -  cmp edx,ebp
"oSpaceGame.exe"+6E8B9E: 74 04                          -  je oSpaceGame.exe+6E8BA4
"oSpaceGame.exe"+6E8BA0: 32 C0                          -  xor al,al
"oSpaceGame.exe"+6E8BA2: EB 02                          -  jmp oSpaceGame.exe+6E8BA6
"oSpaceGame.exe"+6E8BA4: B0 01                          -  mov al,01
"oSpaceGame.exe"+6E8BA6: 8B 97 78 0B 00 00              -  mov edx,[edi+00000B78]
"oSpaceGame.exe"+6E8BAC: F3 0F 10 8A E0 02 00 00        -  movss xmm1,[edx+000002E0]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6E8BB4: F3 0F 10 97 50 01 00 00        -  movss xmm2,[edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E8BBC: 0F 5A C9                       -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6E8BBF: 0F 5A D2                       -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+6E8BC2: F2 0F 5E D1                    -  divsd xmm2,xmm1
"oSpaceGame.exe"+6E8BC6: 66 0F 5A CA                    -  cvtpd2ps xmm1,xmm2
"oSpaceGame.exe"+6E8BCA: 0F 2F 0D 88 57 A0 01           -  comiss xmm1,[oSpaceGame.exe+B35788]
"oSpaceGame.exe"+6E8BD1: 73 09                          -  jae oSpaceGame.exe+6E8BDC
"oSpaceGame.exe"+6E8BD3: 80 BF 80 01 00 00 00           -  cmp byte ptr [edi+00000180],00
"oSpaceGame.exe"+6E8BDA: 74 02                          -  je oSpaceGame.exe+6E8BDE
"oSpaceGame.exe"+6E8BDC: 32 C0                          -  xor al,al
"oSpaceGame.exe"+6E8BDE: F3 0F 10 8F 84 01 00 00        -  movss xmm1,[edi+00000184]
}
TEST_HEALTH_2C+05:
  db F3 0F 10 97 50 01 00 00

unregistersymbol(TEST_HEALTH_2C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E8C5B

"oSpaceGame.exe"+6E8C2E: 3D 70 1F 10 01                 -  cmp eax,oSpaceGame.exe+231F70
"oSpaceGame.exe"+6E8C33: 75 12                          -  jne oSpaceGame.exe+6E8C47
"oSpaceGame.exe"+6E8C35: 3B C5                          -  cmp eax,ebp
"oSpaceGame.exe"+6E8C37: 74 04                          -  je oSpaceGame.exe+6E8C3D
"oSpaceGame.exe"+6E8C39: 3B F5                          -  cmp esi,ebp
"oSpaceGame.exe"+6E8C3B: 75 0A                          -  jne oSpaceGame.exe+6E8C47
"oSpaceGame.exe"+6E8C3D: C7 81 F0 01 00 00 03 00 00 00  -  mov [ecx+000001F0],00000003
"oSpaceGame.exe"+6E8C47: 89 91 18 03 00 00              -  mov [ecx+00000318],edx
"oSpaceGame.exe"+6E8C4D: 8B 87 78 0B 00 00              -  mov eax,[edi+00000B78]
"oSpaceGame.exe"+6E8C53: F3 0F 10 88 E0 02 00 00        -  movss xmm1,[eax+000002E0]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6E8C5B: F3 0F 10 97 50 01 00 00        -  movss xmm2,[edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E8C63: 0F 5A C9                       -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6E8C66: 0F 5A D2                       -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+6E8C69: F2 0F 5E D1                    -  divsd xmm2,xmm1
"oSpaceGame.exe"+6E8C6D: 66 0F 5A CA                    -  cvtpd2ps xmm1,xmm2
"oSpaceGame.exe"+6E8C71: F2 0F 10 15 30 90 A4 01        -  movsd xmm2,[oSpaceGame.exe+B79030]
"oSpaceGame.exe"+6E8C79: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
"oSpaceGame.exe"+6E8C7D: F2 0F 5C D1                    -  subsd xmm2,xmm1
"oSpaceGame.exe"+6E8C81: 66 0F 5A CA                    -  cvtpd2ps xmm1,xmm2
"oSpaceGame.exe"+6E8C85: 0F 57 D2                       -  xorps xmm2,xmm2
"oSpaceGame.exe"+6E8C88: F3 0F 11 4C 24 0C              -  movss [esp+0C],xmm1
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"TEST: SC 1 (A-B)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  These two injection points seem to compare the SC every frame, even when not active.
}


[ENABLE]

aobscanmodule(TEST_SC_1A,oSpaceGame.exe,39 41 40 D9 6C 24 12) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp [ecx+40],eax
  fldcw [esp+12]
  jmp return

TEST_SC_1A:
  jmp code
  nop
  nop
return:
registersymbol(TEST_SC_1A)

aobscanmodule(TEST_SC_1B,oSpaceGame.exe,39 41 40 D9 6C 24 02) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  cmp [ecx+40],eax
  fldcw [esp+02]
  jmp return2

TEST_SC_1B:
  jmp code2
  nop
  nop
return2:
registersymbol(TEST_SC_1B)

[DISABLE]

TEST_SC_1A:
  db 39 41 40 D9 6C 24 12

unregistersymbol(TEST_SC_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6CEE03

"oSpaceGame.exe"+6CEDD3: D9 81 FC 01 00 00              -  fld dword ptr [ecx+000001FC]
"oSpaceGame.exe"+6CEDD9: 8B 96 A8 12 00 00              -  mov edx,[esi+000012A8]
"oSpaceGame.exe"+6CEDDF: 8B 8E 40 12 00 00              -  mov ecx,[esi+00001240]
"oSpaceGame.exe"+6CEDE5: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6CEDEA: D8 8A 90 00 00 00              -  fmul dword ptr [edx+00000090]
"oSpaceGame.exe"+6CEDF0: 8B 55 00                       -  mov edx,[ebp+00]
"oSpaceGame.exe"+6CEDF3: 89 44 24 34                    -  mov [esp+34],eax
"oSpaceGame.exe"+6CEDF7: D9 6C 24 34                    -  fldcw [esp+34]
"oSpaceGame.exe"+6CEDFB: DF 7C 24 34                    -  fistp qword ptr [esp+34]
"oSpaceGame.exe"+6CEDFF: 8B 44 24 34                    -  mov eax,[esp+34]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6CEE03: 39 41 40                       -  cmp [ecx+40],eax
"oSpaceGame.exe"+6CEE06: D9 6C 24 12                    -  fldcw [esp+12]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6CEE0A: 0F 93 C0                       -  setae al
"oSpaceGame.exe"+6CEE0D: 88 82 E5 02 00 00              -  mov [edx+000002E5],al
"oSpaceGame.exe"+6CEE13: EB 56                          -  jmp oSpaceGame.exe+6CEE6B
"oSpaceGame.exe"+6CEE15: 6A 00                          -  push 00
"oSpaceGame.exe"+6CEE17: 6A 00                          -  push 00
"oSpaceGame.exe"+6CEE19: E8 B2 91 11 00                 -  call oSpaceGame.exe+7E7FD0
"oSpaceGame.exe"+6CEE1E: 8B 45 00                       -  mov eax,[ebp+00]
"oSpaceGame.exe"+6CEE21: C7 80 F0 01 00 00 04 00 00 00  -  mov [eax+000001F0],00000004
"oSpaceGame.exe"+6CEE2B: 8B 45 E8                       -  mov eax,[ebp-18]
"oSpaceGame.exe"+6CEE2E: 05 F0 01 00 00                 -  add eax,000001F0
}
TEST_SC_1B:
  db 39 41 40 D9 6C 24 02

unregistersymbol(TEST_SC_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6DF229

"oSpaceGame.exe"+6DF1F9: D9 7C 24 02           -  fnstcw [esp+02]
"oSpaceGame.exe"+6DF1FD: D9 80 90 00 00 00     -  fld dword ptr [eax+00000090]
"oSpaceGame.exe"+6DF203: 8B 89 40 12 00 00     -  mov ecx,[ecx+00001240]
"oSpaceGame.exe"+6DF209: 0F B7 44 24 02        -  movzx eax,word ptr [esp+02]
"oSpaceGame.exe"+6DF20E: D8 8A D4 01 00 00     -  fmul dword ptr [edx+000001D4]
"oSpaceGame.exe"+6DF214: 0D 00 0C 00 00        -  or eax,0C00
"oSpaceGame.exe"+6DF219: 89 44 24 04           -  mov [esp+04],eax
"oSpaceGame.exe"+6DF21D: D9 6C 24 04           -  fldcw [esp+04]
"oSpaceGame.exe"+6DF221: DF 7C 24 04           -  fistp qword ptr [esp+04]
"oSpaceGame.exe"+6DF225: 8B 44 24 04           -  mov eax,[esp+04]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6DF229: 39 41 40              -  cmp [ecx+40],eax
"oSpaceGame.exe"+6DF22C: D9 6C 24 02           -  fldcw [esp+02]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6DF230: 0F 93 C0              -  setae al
"oSpaceGame.exe"+6DF233: 83 C4 0C              -  add esp,0C
"oSpaceGame.exe"+6DF236: C3                    -  ret 
"oSpaceGame.exe"+6DF237: CC                    -  int 3 
"oSpaceGame.exe"+6DF238: CC                    -  int 3 
"oSpaceGame.exe"+6DF239: CC                    -  int 3 
"oSpaceGame.exe"+6DF23A: CC                    -  int 3 
"oSpaceGame.exe"+6DF23B: CC                    -  int 3 
"oSpaceGame.exe"+6DF23C: CC                    -  int 3 
"oSpaceGame.exe"+6DF23D: CC                    -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"TEST: Damage 1 (A-C)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  All three points called on damage, first two close together.  First at least
  seems to be only for ship parts, including enemy ships though.
}

[ENABLE]

aobscanmodule(TEST_DAMAGE_1A,oSpaceGame.exe,F3 0F 10 8F 50 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm1,[edi+00000150]
  jmp return

TEST_DAMAGE_1A:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_DAMAGE_1A)

aobscanmodule(TEST_DAMAGE_1B,oSpaceGame.exe,F3 0F 11 87 50 01 00 00) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  movss [edi+00000150],xmm0
  jmp return2

TEST_DAMAGE_1B:
  jmp code2
  nop
  nop
  nop
return2:
registersymbol(TEST_DAMAGE_1B)

aobscanmodule(TEST_DAMAGE_1C,oSpaceGame.exe,0F 2F 87 50 01 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  comiss xmm0,[edi+00000150]
  jmp return5

TEST_DAMAGE_1C:
  jmp code5
  nop
  nop
return5:
registersymbol(TEST_DAMAGE_1C)

[DISABLE]

TEST_DAMAGE_1A:
  db F3 0F 10 8F 50 01 00 00

unregistersymbol(TEST_DAMAGE_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EB0D9

"oSpaceGame.exe"+6EB0AB: EB A9                       -  jmp oSpaceGame.exe+6EB056
"oSpaceGame.exe"+6EB0AD: F3 0F 10 8C 8E D0 00 00 00  -  movss xmm1,[esi+ecx*4+000000D0]
"oSpaceGame.exe"+6EB0B6: F2 0F 10 25 30 90 A4 01     -  movsd xmm4,[oSpaceGame.exe+B79030]
"oSpaceGame.exe"+6EB0BE: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0C1: F2 0F 5E E1                 -  divsd xmm4,xmm1
"oSpaceGame.exe"+6EB0C5: 66 0F 5A CC                 -  cvtpd2ps xmm1,xmm4
"oSpaceGame.exe"+6EB0C9: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0CD: F3 0F 5A C9                 -  cvtss2sd xmm1,xmm1
"oSpaceGame.exe"+6EB0D1: F2 0F 59 C8                 -  mulsd xmm1,xmm0
"oSpaceGame.exe"+6EB0D5: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EB0D9: F3 0F 10 8F 50 01 00 00     -  movss xmm1,[edi+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EB0E1: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0E5: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0E8: F2 0F 5C C8                 -  subsd xmm1,xmm0
"oSpaceGame.exe"+6EB0EC: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
"oSpaceGame.exe"+6EB0F0: F3 0F 11 87 50 01 00 00     -  movss [edi+00000150],xmm0
"oSpaceGame.exe"+6EB0F8: 8B 87 80 02 00 00           -  mov eax,[edi+00000280]
"oSpaceGame.exe"+6EB0FE: 85 C0                       -  test eax,eax
"oSpaceGame.exe"+6EB100: 74 2A                       -  je oSpaceGame.exe+6EB12C
"oSpaceGame.exe"+6EB102: 80 B8 34 01 00 00 00        -  cmp byte ptr [eax+00000134],00
"oSpaceGame.exe"+6EB109: 74 14                       -  je oSpaceGame.exe+6EB11F
}
TEST_DAMAGE_1B:
  db F3 0F 11 87 50 01 00 00

unregistersymbol(TEST_DAMAGE_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EB0F0

"oSpaceGame.exe"+6EB0C5: 66 0F 5A CC                 -  cvtpd2ps xmm1,xmm4
"oSpaceGame.exe"+6EB0C9: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0CD: F3 0F 5A C9                 -  cvtss2sd xmm1,xmm1
"oSpaceGame.exe"+6EB0D1: F2 0F 59 C8                 -  mulsd xmm1,xmm0
"oSpaceGame.exe"+6EB0D5: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
"oSpaceGame.exe"+6EB0D9: F3 0F 10 8F 50 01 00 00     -  movss xmm1,[edi+00000150]
"oSpaceGame.exe"+6EB0E1: F3 0F 5A C0                 -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+6EB0E5: 0F 5A C9                    -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6EB0E8: F2 0F 5C C8                 -  subsd xmm1,xmm0
"oSpaceGame.exe"+6EB0EC: 66 0F 5A C1                 -  cvtpd2ps xmm0,xmm1
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EB0F0: F3 0F 11 87 50 01 00 00     -  movss [edi+00000150],xmm0
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EB0F8: 8B 87 80 02 00 00           -  mov eax,[edi+00000280]
"oSpaceGame.exe"+6EB0FE: 85 C0                       -  test eax,eax
"oSpaceGame.exe"+6EB100: 74 2A                       -  je oSpaceGame.exe+6EB12C
"oSpaceGame.exe"+6EB102: 80 B8 34 01 00 00 00        -  cmp byte ptr [eax+00000134],00
"oSpaceGame.exe"+6EB109: 74 14                       -  je oSpaceGame.exe+6EB11F
"oSpaceGame.exe"+6EB10B: 8A 87 85 02 00 00           -  mov al,[edi+00000285]
"oSpaceGame.exe"+6EB111: 84 C0                       -  test al,al
"oSpaceGame.exe"+6EB113: 74 17                       -  je oSpaceGame.exe+6EB12C
"oSpaceGame.exe"+6EB115: F3 0F 10 0D C0 5B A0 01     -  movss xmm1,[oSpaceGame.exe+B35BC0]
"oSpaceGame.exe"+6EB11D: EB 15                       -  jmp oSpaceGame.exe+6EB134
}
TEST_DAMAGE_1C:
  db 0F 2F 87 50 01 00 00

unregistersymbol(TEST_DAMAGE_1C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6FC8AF

"oSpaceGame.exe"+6FC891: 83 F9 01                 -  cmp ecx,01
"oSpaceGame.exe"+6FC894: 0F 94 C0                 -  sete al
"oSpaceGame.exe"+6FC897: 51                       -  push ecx
"oSpaceGame.exe"+6FC898: 88 87 8D 08 00 00        -  mov [edi+0000088D],al
"oSpaceGame.exe"+6FC89E: D9 1C 24                 -  fstp dword ptr [esp]
"oSpaceGame.exe"+6FC8A1: 8B 42 58                 -  mov eax,[edx+58]
"oSpaceGame.exe"+6FC8A4: 8B CF                    -  mov ecx,edi
"oSpaceGame.exe"+6FC8A6: FF D0                    -  call eax
"oSpaceGame.exe"+6FC8A8: D9 5C 24 10              -  fstp dword ptr [esp+10]
"oSpaceGame.exe"+6FC8AC: 0F 57 C0                 -  xorps xmm0,xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6FC8AF: 0F 2F 87 50 01 00 00     -  comiss xmm0,[edi+00000150] // compare 0 with current health
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6FC8B6: 72 32                    -  jb oSpaceGame.exe+6FC8EA   // jump if health above 0
"oSpaceGame.exe"+6FC8B8: 8B 4E 04                 -  mov ecx,[esi+04]
"oSpaceGame.exe"+6FC8BB: 8B 11                    -  mov edx,[ecx]
"oSpaceGame.exe"+6FC8BD: A1 5C 0F B8 01           -  mov eax,[oSpaceGame.exe+CB0F5C]
"oSpaceGame.exe"+6FC8C2: 8B 52 28                 -  mov edx,[edx+28]
"oSpaceGame.exe"+6FC8C5: 50                       -  push eax
"oSpaceGame.exe"+6FC8C6: FF D2                    -  call edx
"oSpaceGame.exe"+6FC8C8: 84 C0                    -  test al,al
"oSpaceGame.exe"+6FC8CA: 74 1B                    -  je oSpaceGame.exe+6FC8E7
"oSpaceGame.exe"+6FC8CC: 8B 06                    -  mov eax,[esi]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"TEST: Repair 1 (A-C)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Health loaded 3 times each frame when repairing
}


[ENABLE]

aobscanmodule(TEST_REPAIR_1A,oSpaceGame.exe,4F F3 0F 10 8B 50 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm1,[ebx+00000150]
  jmp return

TEST_REPAIR_1A+01:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_REPAIR_1A)

aobscanmodule(TEST_REPAIR_1B,oSpaceGame.exe,F3 0F 11 83 50 01 00 00 F3 0F 10 81) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  movss [ebx+00000150],xmm0
  jmp return2

TEST_REPAIR_1B:
  jmp code2
  nop
  nop
  nop
return2:
registersymbol(TEST_REPAIR_1B)

aobscanmodule(TEST_REPAIR_1C,oSpaceGame.exe,F3 0F 10 83 50 01 00 00 F3 0F 10) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  movss xmm0,[ebx+00000150]
  jmp return5

TEST_REPAIR_1C:
  jmp code5
  nop
  nop
  nop
return5:
registersymbol(TEST_REPAIR_1C)

[DISABLE]

TEST_REPAIR_1A+01:
  db F3 0F 10 8B 50 01 00 00

unregistersymbol(TEST_REPAIR_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+7053CA

"oSpaceGame.exe"+70539E: F2 0F 5E DA              -  divsd xmm3,xmm2
"oSpaceGame.exe"+7053A2: F3 0F 10 90 EC 01 00 00  -  movss xmm2,[eax+000001EC]
"oSpaceGame.exe"+7053AA: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+7053AD: F2 0F 59 DA              -  mulsd xmm3,xmm2
"oSpaceGame.exe"+7053B1: F2 0F 59 1D 38 90 A4 01  -  mulsd xmm3,[oSpaceGame.exe+B79038]
"oSpaceGame.exe"+7053B9: 66 0F 5A D3              -  cvtpd2ps xmm2,xmm3
"oSpaceGame.exe"+7053BD: F3 0F 5A DA              -  cvtss2sd xmm3,xmm2
"oSpaceGame.exe"+7053C1: 0F 5A E1                 -  cvtps2pd xmm4,xmm1
"oSpaceGame.exe"+7053C4: 66 0F 2F E3              -  comisd xmm4,xmm3
"oSpaceGame.exe"+7053C8: 72 4F                    -  jb oSpaceGame.exe+705419
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+7053CA: F3 0F 10 8B 50 01 00 00  -  movss xmm1,[ebx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+7053D2: F3 0F 5A E0              -  cvtss2sd xmm4,xmm0
"oSpaceGame.exe"+7053D6: 0F 5A D9                 -  cvtps2pd xmm3,xmm1
"oSpaceGame.exe"+7053D9: F2 0F 58 DC              -  addsd xmm3,xmm4
"oSpaceGame.exe"+7053DD: F3 0F 10 A0 E0 02 00 00  -  movss xmm4,[eax+000002E0]
"oSpaceGame.exe"+7053E5: 0F 5A E4                 -  cvtps2pd xmm4,xmm4
"oSpaceGame.exe"+7053E8: 66 0F 2F DC              -  comisd xmm3,xmm4
"oSpaceGame.exe"+7053EC: 76 16                    -  jna oSpaceGame.exe+705404
"oSpaceGame.exe"+7053EE: F3 0F 10 80 E0 02 00 00  -  movss xmm0,[eax+000002E0]
"oSpaceGame.exe"+7053F6: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+7053F9: 0F 5A D9                 -  cvtps2pd xmm3,xmm1
}
TEST_REPAIR_1B:
  db F3 0F 11 83 50 01 00 00

unregistersymbol(TEST_REPAIR_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+705484

"oSpaceGame.exe"+70545C: F3 0F 10 80 E0 02 00 00  -  movss xmm0,[eax+000002E0]
"oSpaceGame.exe"+705464: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+705467: 0F 5A DA                 -  cvtps2pd xmm3,xmm2
"oSpaceGame.exe"+70546A: F2 0F 5C C3              -  subsd xmm0,xmm3
"oSpaceGame.exe"+70546E: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+705472: F3 0F 5A C0              -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+705476: 0F 5A D2                 -  cvtps2pd xmm2,xmm2
"oSpaceGame.exe"+705479: F2 0F 58 D0              -  addsd xmm2,xmm0
"oSpaceGame.exe"+70547D: 66 0F 5A C2              -  cvtpd2ps xmm0,xmm2
"oSpaceGame.exe"+705481: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+705484: F3 0F 11 83 50 01 00 00  -  movss [ebx+00000150],xmm0
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+70548C: F3 0F 10 81 A8 02 00 00  -  movss xmm0,[ecx+000002A8]
"oSpaceGame.exe"+705494: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+705497: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+70549B: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+70549F: F3 0F 11 44 24 10        -  movss [esp+10],xmm0
"oSpaceGame.exe"+7054A5: F3 0F 5A C0              -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+7054A9: 66 0F 2F 05 78 91 A4 01  -  comisd xmm0,[oSpaceGame.exe+B79178]
"oSpaceGame.exe"+7054B1: B8 08 5E A0 01           -  mov eax,oSpaceGame.exe+B35E08
"oSpaceGame.exe"+7054B6: 77 04                    -  ja oSpaceGame.exe+7054BC
"oSpaceGame.exe"+7054B8: 8D 44 24 10              -  lea eax,[esp+10]
}
TEST_REPAIR_1C:
  db F3 0F 10 83 50 01 00 00

unregistersymbol(TEST_REPAIR_1C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+7054CA

"oSpaceGame.exe"+70549F: F3 0F 11 44 24 10        -  movss [esp+10],xmm0
"oSpaceGame.exe"+7054A5: F3 0F 5A C0              -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+7054A9: 66 0F 2F 05 78 91 A4 01  -  comisd xmm0,[oSpaceGame.exe+B79178]
"oSpaceGame.exe"+7054B1: B8 08 5E A0 01           -  mov eax,oSpaceGame.exe+B35E08
"oSpaceGame.exe"+7054B6: 77 04                    -  ja oSpaceGame.exe+7054BC
"oSpaceGame.exe"+7054B8: 8D 44 24 10              -  lea eax,[esp+10]
"oSpaceGame.exe"+7054BC: D9 00                    -  fld dword ptr [eax]
"oSpaceGame.exe"+7054BE: E9 3D AB 55 05           -  jmp 06B30000
"oSpaceGame.exe"+7054C3: 90                       -  nop 
"oSpaceGame.exe"+7054C4: 8B 83 78 0B 00 00        -  mov eax,[ebx+00000B78]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+7054CA: F3 0F 10 83 50 01 00 00  -  movss xmm0,[ebx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+7054D2: F3 0F 10 88 E0 02 00 00  -  movss xmm1,[eax+000002E0]
"oSpaceGame.exe"+7054DA: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+7054DD: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+7054E0: 66 0F 2F C1              -  comisd xmm0,xmm1
"oSpaceGame.exe"+7054E4: 73 1D                    -  jae oSpaceGame.exe+705503
"oSpaceGame.exe"+7054E6: F3 0F 10 81 A8 02 00 00  -  movss xmm0,[ecx+000002A8]
"oSpaceGame.exe"+7054EE: 0F 57 C9                 -  xorps xmm1,xmm1
"oSpaceGame.exe"+7054F1: 0F 2F C8                 -  comiss xmm1,xmm0
"oSpaceGame.exe"+7054F4: 73 0D                    -  jae oSpaceGame.exe+705503
"oSpaceGame.exe"+7054F6: F3 0F 10 83 84 01 00 00  -  movss xmm0,[ebx+00000184]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"TEST: Cooldown 1 (A-C)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Each frame test cooldown for selected component (tried with engine on cooldown),
  third one (C) is only when selected
}

[ENABLE]

aobscanmodule(TEST_COOLDOWN_1A,oSpaceGame.exe,F3 0F 10 47 34 0F 2F) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm0,[edi+34]
  jmp return

TEST_COOLDOWN_1A:
  jmp code
return:
registersymbol(TEST_COOLDOWN_1A)

aobscanmodule(TEST_COOLDOWN_1B,oSpaceGame.exe,F3 0F 11 47 34 72) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  movss [edi+34],xmm0
  jmp return2

TEST_COOLDOWN_1B:
  jmp code2
return2:
registersymbol(TEST_COOLDOWN_1B)

aobscanmodule(TEST_COOLDOWN_1C,oSpaceGame.exe,F3 0F 10 4D 34) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  movss xmm1,[ebp+34]
  jmp return5

TEST_COOLDOWN_1C:
  jmp code5
return5:
registersymbol(TEST_COOLDOWN_1C)

[DISABLE]

TEST_COOLDOWN_1A:
  db F3 0F 10 47 34

unregistersymbol(TEST_COOLDOWN_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EA9A8

"oSpaceGame.exe"+6EA983: 89 08                    -  mov [eax],ecx
"oSpaceGame.exe"+6EA985: 83 C7 0C                 -  add edi,0C
"oSpaceGame.exe"+6EA988: 89 78 08                 -  mov [eax+08],edi
"oSpaceGame.exe"+6EA98B: 8B 15 08 81 B3 01        -  mov edx,[oSpaceGame.exe+C68108]
"oSpaceGame.exe"+6EA991: 89 50 18                 -  mov [eax+18],edx
"oSpaceGame.exe"+6EA994: 8B 0D 00 81 B3 01        -  mov ecx,[oSpaceGame.exe+C68100]
"oSpaceGame.exe"+6EA99A: 89 48 10                 -  mov [eax+10],ecx
"oSpaceGame.exe"+6EA99D: 8B 15 04 81 B3 01        -  mov edx,[oSpaceGame.exe+C68104]
"oSpaceGame.exe"+6EA9A3: 89 50 14                 -  mov [eax+14],edx
"oSpaceGame.exe"+6EA9A6: EB 31                    -  jmp oSpaceGame.exe+6EA9D9
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EA9A8: F3 0F 10 47 34           -  movss xmm0,[edi+34]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EA9AD: 0F 2F C3                 -  comiss xmm0,xmm3
"oSpaceGame.exe"+6EA9B0: 76 27                    -  jna oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9B2: 80 BE 3D 01 00 00 00     -  cmp byte ptr [esi+0000013D],00
"oSpaceGame.exe"+6EA9B9: 75 1E                    -  jne oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9BB: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EA9BE: F3 0F 5A CD              -  cvtss2sd xmm1,xmm5
"oSpaceGame.exe"+6EA9C2: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+6EA9C6: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+6EA9CA: 0F 2F D8                 -  comiss xmm3,xmm0
"oSpaceGame.exe"+6EA9CD: F3 0F 11 47 34           -  movss [edi+34],xmm0
}
TEST_COOLDOWN_1B:
  db F3 0F 11 47 34

unregistersymbol(TEST_COOLDOWN_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EA9CD

"oSpaceGame.exe"+6EA9A8: F3 0F 10 47 34           -  movss xmm0,[edi+34]
"oSpaceGame.exe"+6EA9AD: 0F 2F C3                 -  comiss xmm0,xmm3
"oSpaceGame.exe"+6EA9B0: 76 27                    -  jna oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9B2: 80 BE 3D 01 00 00 00     -  cmp byte ptr [esi+0000013D],00
"oSpaceGame.exe"+6EA9B9: 75 1E                    -  jne oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9BB: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EA9BE: F3 0F 5A CD              -  cvtss2sd xmm1,xmm5
"oSpaceGame.exe"+6EA9C2: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+6EA9C6: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+6EA9CA: 0F 2F D8                 -  comiss xmm3,xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EA9CD: F3 0F 11 47 34           -  movss [edi+34],xmm0
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EA9D2: 72 05                    -  jb oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9D4: F3 0F 11 5F 34           -  movss [edi+34],xmm3
"oSpaceGame.exe"+6EA9D9: 8B 44 24 1C              -  mov eax,[esp+1C]
"oSpaceGame.exe"+6EA9DD: 40                       -  inc eax
"oSpaceGame.exe"+6EA9DE: 89 44 24 1C              -  mov [esp+1C],eax
"oSpaceGame.exe"+6EA9E2: 3B 44 24 24              -  cmp eax,[esp+24]
"oSpaceGame.exe"+6EA9E6: 0F 82 54 FE FF FF        -  jb oSpaceGame.exe+6EA840
"oSpaceGame.exe"+6EA9EC: 8B BB D4 0A 00 00        -  mov edi,[ebx+00000AD4]
"oSpaceGame.exe"+6EA9F2: 33 F6                    -  xor esi,esi
"oSpaceGame.exe"+6EA9F4: 85 FF                    -  test edi,edi
}
TEST_COOLDOWN_1C:
  db F3 0F 10 4D 34

unregistersymbol(TEST_COOLDOWN_1C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6E8D88

"oSpaceGame.exe"+6E8D5B: 0F B7 44 24 0C                 -  movzx eax,word ptr [esp+0C]
"oSpaceGame.exe"+6E8D60: 8B 75 24                       -  mov esi,[ebp+24]
"oSpaceGame.exe"+6E8D63: 8B 54 24 24                    -  mov edx,[esp+24]
"oSpaceGame.exe"+6E8D67: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6E8D6C: 89 44 24 18                    -  mov [esp+18],eax
"oSpaceGame.exe"+6E8D70: 89 96 1C 03 00 00              -  mov [esi+0000031C],edx
"oSpaceGame.exe"+6E8D76: D9 6C 24 18                    -  fldcw [esp+18]
"oSpaceGame.exe"+6E8D7A: DF 7C 24 18                    -  fistp qword ptr [esp+18]
"oSpaceGame.exe"+6E8D7E: 8B 44 24 18                    -  mov eax,[esp+18]
"oSpaceGame.exe"+6E8D82: 89 86 14 03 00 00              -  mov [esi+00000314],eax
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6E8D88: F3 0F 10 4D 34                 -  movss xmm1,[ebp+34]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6E8D8D: D9 6C 24 0C                    -  fldcw [esp+0C]
"oSpaceGame.exe"+6E8D91: 33 C0                          -  xor eax,eax
"oSpaceGame.exe"+6E8D93: 0F 2F C8                       -  comiss xmm1,xmm0
"oSpaceGame.exe"+6E8D96: F3 0F 11 4C 24 14              -  movss [esp+14],xmm1
"oSpaceGame.exe"+6E8D9C: 76 27                          -  jna oSpaceGame.exe+6E8DC5
"oSpaceGame.exe"+6E8D9E: D9 44 24 14                    -  fld dword ptr [esp+14]
"oSpaceGame.exe"+6E8DA2: D9 7C 24 0C                    -  fnstcw [esp+0C]
"oSpaceGame.exe"+6E8DA6: 0F B7 44 24 0C                 -  movzx eax,word ptr [esp+0C]
"oSpaceGame.exe"+6E8DAB: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6E8DB0: 89 44 24 18                    -  mov [esp+18],eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"TEST: Cooldown 2 (A-B)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  A seems to be a lot, then ONCE for B, maybe to set to 0 when done?
}

[ENABLE]

aobscanmodule(TEST_COOLDOWN_2A,oSpaceGame.exe,F3 0F 10 52 34) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm2,[edx+34]
  jmp return

TEST_COOLDOWN_2A:
  jmp code
return:
registersymbol(TEST_COOLDOWN_2A)

aobscanmodule(TEST_COOLDOWN_2B,oSpaceGame.exe,F3 0F 11 5F 34 8B) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  movss [edi+34],xmm3
  jmp return2

TEST_COOLDOWN_2B:
  jmp code2
return2:
registersymbol(TEST_COOLDOWN_2B)

[DISABLE]

TEST_COOLDOWN_2A:
  db F3 0F 10 52 34

unregistersymbol(TEST_COOLDOWN_2A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6DED2F

"oSpaceGame.exe"+6DED11: EB 02                    -  jmp oSpaceGame.exe+6DED15
"oSpaceGame.exe"+6DED13: 32 C0                    -  xor al,al
"oSpaceGame.exe"+6DED15: 80 BE 34 01 00 00 00     -  cmp byte ptr [esi+00000134],00
"oSpaceGame.exe"+6DED1C: 75 33                    -  jne oSpaceGame.exe+6DED51
"oSpaceGame.exe"+6DED1E: 0F 57 C0                 -  xorps xmm0,xmm0
"oSpaceGame.exe"+6DED21: 0F 2F 42 30              -  comiss xmm0,[edx+30]
"oSpaceGame.exe"+6DED25: 72 2A                    -  jb oSpaceGame.exe+6DED51
"oSpaceGame.exe"+6DED27: 80 7A 2C 00              -  cmp byte ptr [edx+2C],00
"oSpaceGame.exe"+6DED2B: 74 02                    -  je oSpaceGame.exe+6DED2F
"oSpaceGame.exe"+6DED2D: 32 C0                    -  xor al,al
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6DED2F: F3 0F 10 52 34           -  movss xmm2,[edx+34]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6DED34: 0F 2F D0                 -  comiss xmm2,xmm0
"oSpaceGame.exe"+6DED37: 76 02                    -  jna oSpaceGame.exe+6DED3B
"oSpaceGame.exe"+6DED39: 32 C0                    -  xor al,al
"oSpaceGame.exe"+6DED3B: 0F 5A C1                 -  cvtps2pd xmm0,xmm1
"oSpaceGame.exe"+6DED3E: F3 0F 10 8E 28 01 00 00  -  movss xmm1,[esi+00000128]
"oSpaceGame.exe"+6DED46: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+6DED49: 66 0F 2F C8              -  comisd xmm1,xmm0
"oSpaceGame.exe"+6DED4D: 76 02                    -  jna oSpaceGame.exe+6DED51
"oSpaceGame.exe"+6DED4F: 32 C0                    -  xor al,al
"oSpaceGame.exe"+6DED51: 80 7A 08 00              -  cmp byte ptr [edx+08],00
}
TEST_COOLDOWN_2B:
  db F3 0F 11 5F 34

unregistersymbol(TEST_COOLDOWN_2B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6EA9D4

"oSpaceGame.exe"+6EA9B0: 76 27                    -  jna oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9B2: 80 BE 3D 01 00 00 00     -  cmp byte ptr [esi+0000013D],00
"oSpaceGame.exe"+6EA9B9: 75 1E                    -  jne oSpaceGame.exe+6EA9D9
"oSpaceGame.exe"+6EA9BB: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6EA9BE: F3 0F 5A CD              -  cvtss2sd xmm1,xmm5
"oSpaceGame.exe"+6EA9C2: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+6EA9C6: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+6EA9CA: 0F 2F D8                 -  comiss xmm3,xmm0
"oSpaceGame.exe"+6EA9CD: F3 0F 11 47 34           -  movss [edi+34],xmm0
"oSpaceGame.exe"+6EA9D2: 72 05                    -  jb oSpaceGame.exe+6EA9D9
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6EA9D4: F3 0F 11 5F 34           -  movss [edi+34],xmm3
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6EA9D9: 8B 44 24 1C              -  mov eax,[esp+1C]
"oSpaceGame.exe"+6EA9DD: 40                       -  inc eax
"oSpaceGame.exe"+6EA9DE: 89 44 24 1C              -  mov [esp+1C],eax
"oSpaceGame.exe"+6EA9E2: 3B 44 24 24              -  cmp eax,[esp+24]
"oSpaceGame.exe"+6EA9E6: 0F 82 54 FE FF FF        -  jb oSpaceGame.exe+6EA840
"oSpaceGame.exe"+6EA9EC: 8B BB D4 0A 00 00        -  mov edi,[ebx+00000AD4]
"oSpaceGame.exe"+6EA9F2: 33 F6                    -  xor esi,esi
"oSpaceGame.exe"+6EA9F4: 85 FF                    -  test edi,edi
"oSpaceGame.exe"+6EA9F6: 76 28                    -  jna oSpaceGame.exe+6EAA20
"oSpaceGame.exe"+6EA9F8: 83 FE 03                 -  cmp esi,03
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>269</ID>
          <Description>"TEST: Selected Ship Component 1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Three points that access the pointer to the selected ship component each frame.
}

[ENABLE]

aobscanmodule(TEST_SELECTED_1A,oSpaceGame.exe,39 B3 50 0C 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  cmp [ebx+00000C50],esi
  jmp return

TEST_SELECTED_1A:
  jmp code
  nop
return:
registersymbol(TEST_SELECTED_1A)

aobscanmodule(TEST_SELECTED_1B,oSpaceGame.exe,8B 8F CC 0E 00 00 81) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  mov ecx,[edi+00000ECC]
  jmp return2

TEST_SELECTED_1B:
  jmp code2
  nop
return2:
registersymbol(TEST_SELECTED_1B)

aobscanmodule(TEST_SELECTED_1C,oSpaceGame.exe,8B 83 CC 0E 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  mov eax,[ebx+00000ECC]
  jmp return5

TEST_SELECTED_1C:
  jmp code5
  nop
return5:
registersymbol(TEST_SELECTED_1C)

[DISABLE]

TEST_SELECTED_1A:
  db 39 B3 50 0C 00 00

unregistersymbol(TEST_SELECTED_1A)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+71D144

"oSpaceGame.exe"+71D12E: CC                    -  int 3 
"oSpaceGame.exe"+71D12F: CC                    -  int 3 
"oSpaceGame.exe"+71D130: 53                    -  push ebx
"oSpaceGame.exe"+71D131: 8B 5A 38              -  mov ebx,[edx+38]
"oSpaceGame.exe"+71D134: 56                    -  push esi
"oSpaceGame.exe"+71D135: 81 C3 7C 02 00 00     -  add ebx,0000027C
"oSpaceGame.exe"+71D13B: 33 F6                 -  xor esi,esi
"oSpaceGame.exe"+71D13D: 80 79 44 01           -  cmp byte ptr [ecx+44],01
"oSpaceGame.exe"+71D141: 57                    -  push edi
"oSpaceGame.exe"+71D142: 74 3A                 -  je oSpaceGame.exe+71D17E
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+71D144: 39 B3 50 0C 00 00     -  cmp [ebx+00000C50],esi
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+71D14A: 75 32                 -  jne oSpaceGame.exe+71D17E
"oSpaceGame.exe"+71D14C: D9 41 38              -  fld dword ptr [ecx+38]
"oSpaceGame.exe"+71D14F: 8B 7A 40              -  mov edi,[edx+40]
"oSpaceGame.exe"+71D152: 83 EC 0C              -  sub esp,0C
"oSpaceGame.exe"+71D155: 8B C4                 -  mov eax,esp
"oSpaceGame.exe"+71D157: D9 18                 -  fstp dword ptr [eax]
"oSpaceGame.exe"+71D159: D9 41 3C              -  fld dword ptr [ecx+3C]
"oSpaceGame.exe"+71D15C: D9 58 04              -  fstp dword ptr [eax+04]
"oSpaceGame.exe"+71D15F: D9 41 40              -  fld dword ptr [ecx+40]
"oSpaceGame.exe"+71D162: D9 58 08              -  fstp dword ptr [eax+08]
}
TEST_SELECTED_1B:
  db 8B 8F CC 0E 00 00

unregistersymbol(TEST_SELECTED_1B)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+7202A4

"oSpaceGame.exe"+720298: CC                             -  int 3 
"oSpaceGame.exe"+720299: CC                             -  int 3 
"oSpaceGame.exe"+72029A: CC                             -  int 3 
"oSpaceGame.exe"+72029B: CC                             -  int 3 
"oSpaceGame.exe"+72029C: CC                             -  int 3 
"oSpaceGame.exe"+72029D: CC                             -  int 3 
"oSpaceGame.exe"+72029E: CC                             -  int 3 
"oSpaceGame.exe"+72029F: CC                             -  int 3 
"oSpaceGame.exe"+7202A0: 57                             -  push edi
"oSpaceGame.exe"+7202A1: 8B 79 38                       -  mov edi,[ecx+38]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+7202A4: 8B 8F CC 0E 00 00              -  mov ecx,[edi+00000ECC]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+7202AA: 81 C7 7C 02 00 00              -  add edi,0000027C
"oSpaceGame.exe"+7202B0: 85 C9                          -  test ecx,ecx
"oSpaceGame.exe"+7202B2: 74 32                          -  je oSpaceGame.exe+7202E6
"oSpaceGame.exe"+7202B4: 80 78 44 00                    -  cmp byte ptr [eax+44],00
"oSpaceGame.exe"+7202B8: 75 43                          -  jne oSpaceGame.exe+7202FD
"oSpaceGame.exe"+7202BA: 80 78 02 00                    -  cmp byte ptr [eax+02],00
"oSpaceGame.exe"+7202BE: 74 3D                          -  je oSpaceGame.exe+7202FD
"oSpaceGame.exe"+7202C0: 8B 11                          -  mov edx,[ecx]
"oSpaceGame.exe"+7202C2: 8B 42 74                       -  mov eax,[edx+74]
"oSpaceGame.exe"+7202C5: 56                             -  push esi
}
TEST_SELECTED_1C:
  db 8B 83 CC 0E 00 00

unregistersymbol(TEST_SELECTED_1C)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+722101

"oSpaceGame.exe"+7220E3: 83 E4 F8                 -  and esp,-08
"oSpaceGame.exe"+7220E6: 83 EC 24                 -  sub esp,24
"oSpaceGame.exe"+7220E9: 53                       -  push ebx
"oSpaceGame.exe"+7220EA: 56                       -  push esi
"oSpaceGame.exe"+7220EB: 57                       -  push edi
"oSpaceGame.exe"+7220EC: 8B 7D 08                 -  mov edi,[ebp+08]
"oSpaceGame.exe"+7220EF: 8B 5F 38                 -  mov ebx,[edi+38]
"oSpaceGame.exe"+7220F2: 8B 83 3C 12 00 00        -  mov eax,[ebx+0000123C]
"oSpaceGame.exe"+7220F8: 8B B3 40 12 00 00        -  mov esi,[ebx+00001240]
"oSpaceGame.exe"+7220FE: 8D 50 14                 -  lea edx,[eax+14]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+722101: 8B 83 CC 0E 00 00        -  mov eax,[ebx+00000ECC]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+722107: 32 C9                    -  xor cl,cl
"oSpaceGame.exe"+722109: 89 74 24 10              -  mov [esp+10],esi
"oSpaceGame.exe"+72210D: 85 C0                    -  test eax,eax
"oSpaceGame.exe"+72210F: 74 04                    -  je oSpaceGame.exe+722115
"oSpaceGame.exe"+722111: B1 01                    -  mov cl,01
"oSpaceGame.exe"+722113: EB 06                    -  jmp oSpaceGame.exe+72211B
"oSpaceGame.exe"+722115: 8B 83 C8 0E 00 00        -  mov eax,[ebx+00000EC8]
"oSpaceGame.exe"+72211B: 89 44 24 0C              -  mov [esp+0C],eax
"oSpaceGame.exe"+72211F: 85 C0                    -  test eax,eax
"oSpaceGame.exe"+722121: 0F 84 42 01 00 00        -  je oSpaceGame.exe+722269
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"globals+1000"</Description>
          <LastState Value="1EC4A240" Activated="0" RealAddress="1EE51000"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1000</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Hex Nuts"</Description>
              <LastState Value="5290.841797" Activated="0" RealAddress="1EC4A4E8"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+1000</Address>
              <Offsets>
                <Offset>2A8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"globals+3000"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="1EE53000"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+3000</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"[globals+3000]+150"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000150"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+3000</Address>
              <Offsets>
                <Offset>150</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"globals+3004"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="1EE53004"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+3004</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>10</ID>
              <Description>"[globals+3004]+2e0"</Description>
              <LastState Value="??" Activated="0" RealAddress="000002E0"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>globals+3004</Address>
              <Offsets>
                <Offset>2E0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"globals+3008"</Description>
          <LastState Value="00000000" Activated="0" RealAddress="1EE53008"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+3008</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>12</ID>
              <Description>"[globals+3008]+3C (flag?)"</Description>
              <LastState Value="??" Activated="0" RealAddress="0000003C"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>globals+3008</Address>
              <Offsets>
                <Offset>3C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"[globals+3008]+40 (hex nuts)"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000040"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+3008</Address>
              <Offsets>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"TEST: Hex Nuts 1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Loads float hex nut value each frame (1/2)
}

[ENABLE]

aobscanmodule(TEST_HEX_NUTS_1,oSpaceGame.exe,D9 86 A8 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1000],esi // hex nut pointer
  mov [globals+3008],ebx // hex nut pointer at +40, byte flag at +3C to skip this
  fld dword ptr [esi+000002A8]
  jmp return

TEST_HEX_NUTS_1:
  jmp code
  nop
return:
registersymbol(TEST_HEX_NUTS_1)

[DISABLE]

TEST_HEX_NUTS_1:
  db D9 86 A8 02 00 00

unregistersymbol(TEST_HEX_NUTS_1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+72EC68

"oSpaceGame.exe"+72EC47: FF D0                    -  call eax
"oSpaceGame.exe"+72EC49: 8B 8B 9C 02 00 00        -  mov ecx,[ebx+0000029C]
"oSpaceGame.exe"+72EC4F: 8B 11                    -  mov edx,[ecx]
"oSpaceGame.exe"+72EC51: 8B 42 60                 -  mov eax,[edx+60]
"oSpaceGame.exe"+72EC54: 56                       -  push esi
"oSpaceGame.exe"+72EC55: FF D0                    -  call eax
"oSpaceGame.exe"+72EC57: 80 7B 3C 00              -  cmp byte ptr [ebx+3C],00
"oSpaceGame.exe"+72EC5B: 0F 84 A8 10 00 00        -  je oSpaceGame.exe+72FD09
"oSpaceGame.exe"+72EC61: 8B 73 40                 -  mov esi,[ebx+40]
"oSpaceGame.exe"+72EC64: D9 7C 24 44              -  fnstcw [esp+44]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+72EC68: D9 86 A8 02 00 00        -  fld dword ptr [esi+000002A8]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+72EC6E: 0F B7 44 24 44           -  movzx eax,word ptr [esp+44]
"oSpaceGame.exe"+72EC73: 8B 7B 38                 -  mov edi,[ebx+38]
"oSpaceGame.exe"+72EC76: D9 5C 24 40              -  fstp dword ptr [esp+40]
"oSpaceGame.exe"+72EC7A: D9 44 24 40              -  fld dword ptr [esp+40]
"oSpaceGame.exe"+72EC7E: 8B 8F 40 12 00 00        -  mov ecx,[edi+00001240]
"oSpaceGame.exe"+72EC84: 81 64 24 68 00 00 00 C0  -  and [esp+68],C0000000
"oSpaceGame.exe"+72EC8C: 81 4C 24 68 00 00 00 40  -  or [esp+68],40000000
"oSpaceGame.exe"+72EC94: 81 64 24 68 FF FF FF 7F  -  and [esp+68],7FFFFFFF
"oSpaceGame.exe"+72EC9C: 0D 00 0C 00 00           -  or eax,0C00
"oSpaceGame.exe"+72ECA1: 89 44 24 40              -  mov [esp+40],eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"TEST: Hex Nuts 1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Loads float hex nut value each frame (1/2)
}

[ENABLE]

aobscanmodule(TEST_HEX_NUTS_1,oSpaceGame.exe,D9 86 A8 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fld dword ptr [esi+000002A8]
  jmp return

TEST_HEX_NUTS_1:
  jmp code
  nop
return:
registersymbol(TEST_HEX_NUTS_1)

[DISABLE]

TEST_HEX_NUTS_1:
  db D9 86 A8 02 00 00

unregistersymbol(TEST_HEX_NUTS_1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+72EC68

"oSpaceGame.exe"+72EC47: FF D0                    -  call eax
"oSpaceGame.exe"+72EC49: 8B 8B 9C 02 00 00        -  mov ecx,[ebx+0000029C]
"oSpaceGame.exe"+72EC4F: 8B 11                    -  mov edx,[ecx]
"oSpaceGame.exe"+72EC51: 8B 42 60                 -  mov eax,[edx+60]
"oSpaceGame.exe"+72EC54: 56                       -  push esi
"oSpaceGame.exe"+72EC55: FF D0                    -  call eax
"oSpaceGame.exe"+72EC57: 80 7B 3C 00              -  cmp byte ptr [ebx+3C],00
"oSpaceGame.exe"+72EC5B: 0F 84 A8 10 00 00        -  je oSpaceGame.exe+72FD09
"oSpaceGame.exe"+72EC61: 8B 73 40                 -  mov esi,[ebx+40]
"oSpaceGame.exe"+72EC64: D9 7C 24 44              -  fnstcw [esp+44]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+72EC68: D9 86 A8 02 00 00        -  fld dword ptr [esi+000002A8]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+72EC6E: 0F B7 44 24 44           -  movzx eax,word ptr [esp+44]
"oSpaceGame.exe"+72EC73: 8B 7B 38                 -  mov edi,[ebx+38]
"oSpaceGame.exe"+72EC76: D9 5C 24 40              -  fstp dword ptr [esp+40]
"oSpaceGame.exe"+72EC7A: D9 44 24 40              -  fld dword ptr [esp+40]
"oSpaceGame.exe"+72EC7E: 8B 8F 40 12 00 00        -  mov ecx,[edi+00001240]
"oSpaceGame.exe"+72EC84: 81 64 24 68 00 00 00 C0  -  and [esp+68],C0000000
"oSpaceGame.exe"+72EC8C: 81 4C 24 68 00 00 00 40  -  or [esp+68],40000000
"oSpaceGame.exe"+72EC94: 81 64 24 68 FF FF FF 7F  -  and [esp+68],7FFFFFFF
"oSpaceGame.exe"+72EC9C: 0D 00 0C 00 00           -  or eax,0C00
"oSpaceGame.exe"+72ECA1: 89 44 24 40              -  mov [esp+40],eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"TEST: Hex Nuts 2"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Loads float hex nut value each frame (2/2)
}

[ENABLE]

aobscanmodule(TEST_HEX_NUTS_2,oSpaceGame.exe,F3 0F 10 86 A8 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movss xmm0,[esi+000002A8]
  jmp return

TEST_HEX_NUTS_2:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_HEX_NUTS_2)

[DISABLE]

TEST_HEX_NUTS_2:
  db F3 0F 10 86 A8 02 00 00

unregistersymbol(TEST_HEX_NUTS_2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+72EDE7

"oSpaceGame.exe"+72EDAB: EB 34                       -  jmp oSpaceGame.exe+72EDE1
"oSpaceGame.exe"+72EDAD: 8B 83 40 01 00 00           -  mov eax,[ebx+00000140]
"oSpaceGame.exe"+72EDB3: C6 80 06 02 00 00 00        -  mov byte ptr [eax+00000206],00
"oSpaceGame.exe"+72EDBA: 8B 83 44 01 00 00           -  mov eax,[ebx+00000144]
"oSpaceGame.exe"+72EDC0: C6 80 06 02 00 00 00        -  mov byte ptr [eax+00000206],00
"oSpaceGame.exe"+72EDC7: 8B 83 48 01 00 00           -  mov eax,[ebx+00000148]
"oSpaceGame.exe"+72EDCD: C6 80 06 02 00 00 00        -  mov byte ptr [eax+00000206],00
"oSpaceGame.exe"+72EDD4: 8B 83 4C 01 00 00           -  mov eax,[ebx+0000014C]
"oSpaceGame.exe"+72EDDA: C6 80 06 02 00 00 00        -  mov byte ptr [eax+00000206],00
"oSpaceGame.exe"+72EDE1: 8B 83 84 01 00 00           -  mov eax,[ebx+00000184]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+72EDE7: F3 0F 10 86 A8 02 00 00     -  movss xmm0,[esi+000002A8]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+72EDEF: 33 FF                       -  xor edi,edi
"oSpaceGame.exe"+72EDF1: F3 0F 11 84 24 98 00 00 00  -  movss [esp+00000098],xmm0
"oSpaceGame.exe"+72EDFA: 89 7C 24 48                 -  mov [esp+48],edi
"oSpaceGame.exe"+72EDFE: 89 44 24 58                 -  mov [esp+58],eax
"oSpaceGame.exe"+72EE02: 85 C0                       -  test eax,eax
"oSpaceGame.exe"+72EE04: 0F 86 E6 01 00 00           -  jbe oSpaceGame.exe+72EFF0
"oSpaceGame.exe"+72EE0A: 8B 83 80 01 00 00           -  mov eax,[ebx+00000180]
"oSpaceGame.exe"+72EE10: 8B 34 B8                    -  mov esi,[eax+edi*4]
"oSpaceGame.exe"+72EE13: 8B 86 5C 01 00 00           -  mov eax,[esi+0000015C]
"oSpaceGame.exe"+72EE19: 8B 94 24 9C 00 00 00        -  mov edx,[esp+0000009C]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>256</ID>
          <Description>"Selected Equipment ID"</Description>
          <LastState Value="1EC4A580" Activated="0" RealAddress="1EE53014"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+3014</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>257</ID>
          <Description>"Selected Equipment HP Pointer"</Description>
          <LastState Value="0B70EEC0" Activated="0" RealAddress="1EE53010"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+3010</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>265</ID>
          <Description>"Script: Needs Repair"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-16
  Author : Jason

  Hopefully this is only called for FRIENDLY ship parts that need repair
}

[ENABLE]

aobscanmodule(INJECT_NEEDS_REPAIR,oSpaceGame.exe,F3 0F 10 83 50 01 00 00 0F 5A C0 F2 0F 5E) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  cmp dword ptr [globals+2004],1
  jne skip
  // xmm1 has max health as double, need to load that as single into xmm0
  // and store that
  cvtpd2ps xmm0,xmm1 // convert max hp as double in xmm1 to single in xmm0
  movss [ebx+00000150],xmm0 // store that as we'll load it right back

skip:
  movss xmm0,[ebx+00000150]
  jmp return

INJECT_NEEDS_REPAIR:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_NEEDS_REPAIR)

[DISABLE]

INJECT_NEEDS_REPAIR:
  db F3 0F 10 83 50 01 00 00

unregistersymbol(INJECT_NEEDS_REPAIR)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6F60BB

"oSpaceGame.exe"+6F608E: F2 0F 5A C9              -  cvtsd2ss xmm1,xmm1
"oSpaceGame.exe"+6F6092: F3 0F 11 4C 24 28        -  movss [esp+28],xmm1
"oSpaceGame.exe"+6F6098: 66 0F 5A DB              -  cvtpd2ps xmm3,xmm3
"oSpaceGame.exe"+6F609C: F2 0F 5A C6              -  cvtsd2ss xmm0,xmm6
"oSpaceGame.exe"+6F60A0: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6F60A3: F3 0F 5A CB              -  cvtss2sd xmm1,xmm3
"oSpaceGame.exe"+6F60A7: F2 0F 5C C8              -  subsd xmm1,xmm0
"oSpaceGame.exe"+6F60AB: F2 0F 5A C1              -  cvtsd2ss xmm0,xmm1
"oSpaceGame.exe"+6F60AF: F3 0F 5A 4C 24 20        -  cvtss2sd xmm1,[esp+20]
"oSpaceGame.exe"+6F60B5: F3 0F 11 44 24 2C        -  movss [esp+2C],xmm0
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6F60BB: F3 0F 10 83 50 01 00 00  -  movss xmm0,[ebx+00000150]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6F60C3: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+6F60C6: F2 0F 5E C1              -  divsd xmm0,xmm1
"oSpaceGame.exe"+6F60CA: F3 0F 10 0D 38 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D38]
"oSpaceGame.exe"+6F60D2: F3 0F 11 4C 24 30        -  movss [esp+30],xmm1
"oSpaceGame.exe"+6F60D8: F3 0F 10 0D 3C 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D3C]
"oSpaceGame.exe"+6F60E0: F3 0F 11 4C 24 34        -  movss [esp+34],xmm1
"oSpaceGame.exe"+6F60E6: F3 0F 10 0D 40 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D40]
"oSpaceGame.exe"+6F60EE: F3 0F 11 4C 24 38        -  movss [esp+38],xmm1
"oSpaceGame.exe"+6F60F4: F3 0F 10 0D 44 7D B3 01  -  movss xmm1,[oSpaceGame.exe+C67D44]
"oSpaceGame.exe"+6F60FC: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>243</ID>
          <Description>"Script: Rep and Credits"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-08
  Author : Jason

  Loads SC each frame
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_SC,oSpaceGame.exe,39 41 40 D9 6C 24 12) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1004],ecx
  cmp [ecx+40],eax
  fldcw [esp+12]
  jmp return

INJECT_SC:
  jmp code
  nop
  nop
return:
registersymbol(INJECT_SC)

[DISABLE]

INJECT_SC:
  db 39 41 40 D9 6C 24 12

unregistersymbol(INJECT_SC)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+6CEE03

"oSpaceGame.exe"+6CEDD3: D9 81 FC 01 00 00              -  fld dword ptr [ecx+000001FC]
"oSpaceGame.exe"+6CEDD9: 8B 96 A8 12 00 00              -  mov edx,[esi+000012A8]
"oSpaceGame.exe"+6CEDDF: 8B 8E 40 12 00 00              -  mov ecx,[esi+00001240]
"oSpaceGame.exe"+6CEDE5: 0D 00 0C 00 00                 -  or eax,0C00
"oSpaceGame.exe"+6CEDEA: D8 8A 90 00 00 00              -  fmul dword ptr [edx+00000090]
"oSpaceGame.exe"+6CEDF0: 8B 55 00                       -  mov edx,[ebp+00]
"oSpaceGame.exe"+6CEDF3: 89 44 24 34                    -  mov [esp+34],eax
"oSpaceGame.exe"+6CEDF7: D9 6C 24 34                    -  fldcw [esp+34]
"oSpaceGame.exe"+6CEDFB: DF 7C 24 34                    -  fistp qword ptr [esp+34]
"oSpaceGame.exe"+6CEDFF: 8B 44 24 34                    -  mov eax,[esp+34]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+6CEE03: 39 41 40                       -  cmp [ecx+40],eax
"oSpaceGame.exe"+6CEE06: D9 6C 24 12                    -  fldcw [esp+12]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+6CEE0A: 0F 93 C0                       -  setae al
"oSpaceGame.exe"+6CEE0D: 88 82 E5 02 00 00              -  mov [edx+000002E5],al
"oSpaceGame.exe"+6CEE13: EB 56                          -  jmp oSpaceGame.exe+6CEE6B
"oSpaceGame.exe"+6CEE15: 6A 00                          -  push 00
"oSpaceGame.exe"+6CEE17: 6A 00                          -  push 00
"oSpaceGame.exe"+6CEE19: E8 B2 91 11 00                 -  call oSpaceGame.exe+7E7FD0
"oSpaceGame.exe"+6CEE1E: 8B 45 00                       -  mov eax,[ebp+00]
"oSpaceGame.exe"+6CEE21: C7 80 F0 01 00 00 04 00 00 00  -  mov [eax+000001F0],00000004
"oSpaceGame.exe"+6CEE2B: 8B 45 E8                       -  mov eax,[ebp-18]
"oSpaceGame.exe"+6CEE2E: 05 F0 01 00 00                 -  add eax,000001F0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Script: Hex Nuts"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : oSpaceGame.exe
  Version: 
  Date   : 2014-09-06
  Author : Jason

  Called when nuts are added to set the new value?
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_HEX_NUTS,oSpaceGame.exe,D9 99 A8 02 00 00 8B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1000],ecx // hex nuts base pointer
  mov [globals+3000],ebx // possibly another interesting pointer (float at +150)
  mov eax,[ebx+0000B78]
  mov [globals+3004],eax // possibly another interesting pointer (float at +2E0)
  fstp dword ptr [ecx+000002A8]
  jmp return

INJECT_HEX_NUTS:
  jmp code
  nop
return:
registersymbol(INJECT_HEX_NUTS)

[DISABLE]

INJECT_HEX_NUTS:
  db D9 99 A8 02 00 00

unregistersymbol(INJECT_HEX_NUTS)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "oSpaceGame.exe"+7054BE

"oSpaceGame.exe"+705494: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+705497: F2 0F 5C C1              -  subsd xmm0,xmm1
"oSpaceGame.exe"+70549B: 66 0F 5A C0              -  cvtpd2ps xmm0,xmm0
"oSpaceGame.exe"+70549F: F3 0F 11 44 24 10        -  movss [esp+10],xmm0
"oSpaceGame.exe"+7054A5: F3 0F 5A C0              -  cvtss2sd xmm0,xmm0
"oSpaceGame.exe"+7054A9: 66 0F 2F 05 78 91 A4 01  -  comisd xmm0,[oSpaceGame.exe+B79178]
"oSpaceGame.exe"+7054B1: B8 08 5E A0 01           -  mov eax,oSpaceGame.exe+B35E08
"oSpaceGame.exe"+7054B6: 77 04                    -  ja oSpaceGame.exe+7054BC
"oSpaceGame.exe"+7054B8: 8D 44 24 10              -  lea eax,[esp+10]
"oSpaceGame.exe"+7054BC: D9 00                    -  fld dword ptr [eax]
// ---------- INJECTING HERE ----------
"oSpaceGame.exe"+7054BE: D9 99 A8 02 00 00        -  fstp dword ptr [ecx+000002A8]
// ---------- DONE INJECTING  ----------
"oSpaceGame.exe"+7054C4: 8B 83 78 0B 00 00        -  mov eax,[ebx+00000B78]
"oSpaceGame.exe"+7054CA: F3 0F 10 83 50 01 00 00  -  movss xmm0,[ebx+00000150]
"oSpaceGame.exe"+7054D2: F3 0F 10 88 E0 02 00 00  -  movss xmm1,[eax+000002E0]
"oSpaceGame.exe"+7054DA: 0F 5A C0                 -  cvtps2pd xmm0,xmm0
"oSpaceGame.exe"+7054DD: 0F 5A C9                 -  cvtps2pd xmm1,xmm1
"oSpaceGame.exe"+7054E0: 66 0F 2F C1              -  comisd xmm0,xmm1
"oSpaceGame.exe"+7054E4: 73 1D                    -  jae oSpaceGame.exe+705503
"oSpaceGame.exe"+7054E6: F3 0F 10 81 A8 02 00 00  -  movss xmm0,[ecx+000002A8]
"oSpaceGame.exe"+7054EE: 0F 57 C9                 -  xorps xmm1,xmm1
"oSpaceGame.exe"+7054F1: 0F 2F C8                 -  comiss xmm1,xmm0

Earlier codes:
015D5350 - 8B 55 0C  - mov edx,[ebp+0C]
015D5353 - 8B B1 E8000000  - mov esi,[ecx+000000E8]
015D5359 - F3 0F10 89 A8020000  - movss xmm1,[ecx+000002A8] &lt;&lt;
015D5361 - 0F5A DB  - cvtps2pd xmm3,xmm3
015D5364 - 0F5A C2  - cvtps2pd xmm0,xmm2

015D5481 - 0F5A C9  - cvtps2pd xmm1,xmm1
015D5484 - F3 0F11 83 50010000  - movss [ebx+00000150],xmm0
015D548C - F3 0F10 81 A8020000  - movss xmm0,[ecx+000002A8] &lt;&lt;
015D5494 - 0F5A C0  - cvtps2pd xmm0,xmm0
015D5497 - F2 0F5C C1  - subsd xmm0,xmm1

}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>1EE50000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UtilCopyData</Name>
      <Address>1EE60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TEST_DAMAGE</Name>
      <Address>1EE70000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TEST_AP</Name>
      <Address>1EF70000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UtilCopyData_Enabled</Name>
      <Address>1EE6FFFC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UtilCopyData_Count</Name>
      <Address>1EE6FFF8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SELECTED_UNIT</Name>
      <Address> 015B8B07</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_DAMAGE</Name>
      <Address> 015BB0D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HP_ALWAYS</Name>
      <Address> 015BEEBB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TEST_BUILD_REMAINING_3</Name>
      <Address> 015D2FAA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HEX_NUTS</Name>
      <Address> 015FEC68</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_REP</Name>
      <Address> 015D7501</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_COUNTDOWN</Name>
      <Address> 015BA9CD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_POWER_SET</Name>
      <Address> 015BAF4B</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Activate all blue scripts first. 

IMPORTANT: Make sure to click on an existing piece of equipment to 
select it as soon as you start a mission. This finds a unique pointer
set on all your equipment to let the damage script tell enemy equipment 
apart from your own. You DO NOT want to have bOneHitKill enabled without
doing this first :)

Cheats to set to 1: 
bNoDamage - should keep you full health 
bOneHitKill - sets enemy HP to 1 prior to taking damage 
bBuildTime - should let you instantly build
bRechargeDelay - should let you use weapon abilities with no cooldown
bPower - should make it seem like your whole ship is powered, you may
  have to place one small power plant first.
fMinimumHexNuts - set this to keep your hex nuts at least at a certain level 

Values:
Hex Nuts - editable during a mission 
Rep - reputation, gets recalculated after each mission, but can be upped 
temporarily to unlock equipment 
SC - Space Credits for purchasing upgrades to your gear </Comments>
</CheatTable>
