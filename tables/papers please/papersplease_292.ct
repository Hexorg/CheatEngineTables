<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Globals"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(globals,$100000)

{
Globals:

  1000: pTime
  1004: pProgress
  1008: pPlan
  100C: pFailureBase
  1010: pFailure

  2000: bNoFailures - set to 1 to enable, keeping failure counter 0

}

[ENABLE]
[DISABLE]

{ ----- Structures -----

pTime:
  0028: (double) Speed (default 0.1)
  0030: (double) Previous Time
  0038: (double) Current Time
  0040: (double) ? Day Start ?
  0048: (double) ? 3063.351, doesn't change

pProgress:
  0034: Total Visitors (increments when they arrive at booth)
  0038: Successfully processed visitors (salary based on this)
  0098: Pointer-&gt;Upcoming
        0004: Remaining (decremented by code that increments processing count)
        0008: Total for the day (at least at start)
        002C..?: inline structures with two members:
                 (int)length of string
                 (pointer) pointer to string

pFailureBase:
  00A0: pFailure

pFailure:
  00
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"+ Script: Find Time Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-08
  Author : Jason

  This is the only code that seems to use the important time only
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_TIME,PapersPlease.exe,DD 41 38 DC 61 40) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1000],ecx
  fld qword ptr [ecx+38]
  fsub qword ptr [ecx+40]
  jmp return

INJECT_TIME:
  jmp code
  nop
return:
registersymbol(INJECT_TIME)

[DISABLE]

INJECT_TIME:
  db DD 41 38 DC 61 40

unregistersymbol(INJECT_TIME)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "PapersPlease.exe"+2663A0

"PapersPlease.exe"+266392: 06                 -  push es
"PapersPlease.exe"+266393: 06                 -  push es
"PapersPlease.exe"+266394: 06                 -  push es
"PapersPlease.exe"+266395: 06                 -  push es
"PapersPlease.exe"+266396: 06                 -  push es
"PapersPlease.exe"+266397: 06                 -  push es
"PapersPlease.exe"+266398: 06                 -  push es
"PapersPlease.exe"+266399: 06                 -  push es
"PapersPlease.exe"+26639A: 05 CC CC CC CC     -  add eax,CCCCCCCC
"PapersPlease.exe"+26639F: CC                 -  int 3 
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+2663A0: DD 41 38           -  fld qword ptr [ecx+38]
"PapersPlease.exe"+2663A3: DC 61 40           -  fsub qword ptr [ecx+40]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+2663A6: C3                 -  ret 
"PapersPlease.exe"+2663A7: CC                 -  int 3 
"PapersPlease.exe"+2663A8: CC                 -  int 3 
"PapersPlease.exe"+2663A9: CC                 -  int 3 
"PapersPlease.exe"+2663AA: CC                 -  int 3 
"PapersPlease.exe"+2663AB: CC                 -  int 3 
"PapersPlease.exe"+2663AC: CC                 -  int 3 
"PapersPlease.exe"+2663AD: CC                 -  int 3 
"PapersPlease.exe"+2663AE: CC                 -  int 3 
"PapersPlease.exe"+2663AF: CC                 -  int 3 
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"pTime (structure pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="0E231000"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1000</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"Time Increment (default 0.1)"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>globals+1000</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Last Time"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>globals+1000</Address>
          <Offsets>
            <Offset>30</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Time"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>globals+1000</Address>
          <Offsets>
            <Offset>38</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"+ Script: Progress (thanks to Shinkansen)"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  Thanks to Shinkansen for injection point.
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_PROGRESS,PapersPlease.exe,DB 40 34 D8 D1) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1004],eax
  mov [globals+1008],esi
  fild dword ptr [eax+34]
  fcom st(0),st(1)
  jmp return

INJECT_PROGRESS:
  jmp code
return:
registersymbol(INJECT_PROGRESS)

[DISABLE]

INJECT_PROGRESS:
  db DB 40 34 D8 D1

unregistersymbol(INJECT_PROGRESS)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "PapersPlease.exe"+258D35

"PapersPlease.exe"+258D1F: CC                 -  int 3 
"PapersPlease.exe"+258D20: 55                 -  push ebp
"PapersPlease.exe"+258D21: 8B EC              -  mov ebp,esp
"PapersPlease.exe"+258D23: 51                 -  push ecx
"PapersPlease.exe"+258D24: 56                 -  push esi
"PapersPlease.exe"+258D25: 8B B0 98 00 00 00  -  mov esi,[eax+00000098] // pointer to struct that has day's plan
"PapersPlease.exe"+258D2B: 8B 4E 04           -  mov ecx,[esi+04] // remaining visitors for the day (total at [esi+08])
"PapersPlease.exe"+258D2E: 49                 -  dec ecx
"PapersPlease.exe"+258D2F: 89 4D FC           -  mov [ebp-04],ecx
"PapersPlease.exe"+258D32: DB 45 FC           -  fild dword ptr [ebp-04]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+258D35: DB 40 34           -  fild dword ptr [eax+34]
"PapersPlease.exe"+258D38: D8 D1              -  fcom st(0),st(1)
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+258D3A: DF E0              -  fnstsw ax
"PapersPlease.exe"+258D3C: F6 C4 41           -  test ah,41
"PapersPlease.exe"+258D3F: 74 11              -  je PapersPlease.exe+258D52
"PapersPlease.exe"+258D41: D9 C1              -  fld st(1)
"PapersPlease.exe"+258D43: D9 C2              -  fld st(2)
"PapersPlease.exe"+258D45: DA E9              -  fucompp 
"PapersPlease.exe"+258D47: DF E0              -  fnstsw ax
"PapersPlease.exe"+258D49: F6 C4 44           -  test ah,44
"PapersPlease.exe"+258D4C: 7A 04              -  jp PapersPlease.exe+258D52
"PapersPlease.exe"+258D4E: DD D9              -  fstp st(1)
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>46</ID>
          <Description>"pProgress (structure pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="0E231004"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1004</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Total Visitors"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1004</Address>
          <Offsets>
            <Offset>34</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"Successful (boost for big salary)"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1004</Address>
          <Offsets>
            <Offset>38</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>51</ID>
      <Description>"+ Script: Failure"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This seems to be called when a failure occurs
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_FAILURE,PapersPlease.exe,8B 83 A0 00 00 00 83 78) // should be unique
alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  mov eax,[ebx+000000A0]
  mov [globals+100C],ebx
  mov [globals+1010],eax

  cmp dword ptr [globals+2000],1
  jne skip
  mov dword ptr [eax+04],0 // no failures!

skip:
  jmp return

INJECT_FAILURE:
  jmp code
  nop
return:
registersymbol(INJECT_FAILURE)

[DISABLE]

INJECT_FAILURE:
  db 8B 83 A0 00 00 00

unregistersymbol(INJECT_FAILURE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "PapersPlease.exe"+25A089

"PapersPlease.exe"+25A079: 5D                    -  pop ebp
"PapersPlease.exe"+25A07A: C2 04 00              -  ret 0004
"PapersPlease.exe"+25A07D: CC                    -  int 3 
"PapersPlease.exe"+25A07E: CC                    -  int 3 
"PapersPlease.exe"+25A07F: CC                    -  int 3 
"PapersPlease.exe"+25A080: 55                    -  push ebp
"PapersPlease.exe"+25A081: 8B EC                 -  mov ebp,esp
"PapersPlease.exe"+25A083: 83 EC 08              -  sub esp,08
"PapersPlease.exe"+25A086: 53                    -  push ebx
"PapersPlease.exe"+25A087: 8B D9                 -  mov ebx,ecx
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+25A089: 8B 83 A0 00 00 00     -  mov eax,[ebx+000000A0]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+25A08F: 83 78 04 01           -  cmp dword ptr [eax+04],01
"PapersPlease.exe"+25A093: 56                    -  push esi
"PapersPlease.exe"+25A094: 57                    -  push edi
"PapersPlease.exe"+25A095: 7D 08                 -  jnl PapersPlease.exe+25A09F
"PapersPlease.exe"+25A097: 8B 35 2C D4 4B 00     -  mov esi,[PapersPlease.exe+37D42C]
"PapersPlease.exe"+25A09D: EB 12                 -  jmp PapersPlease.exe+25A0B1
"PapersPlease.exe"+25A09F: 83 78 04 02           -  cmp dword ptr [eax+04],02
"PapersPlease.exe"+25A0A3: 8B 35 24 D4 4B 00     -  mov esi,[PapersPlease.exe+37D424]
"PapersPlease.exe"+25A0A9: 7C 06                 -  jnge PapersPlease.exe+25A0B1
"PapersPlease.exe"+25A0AB: 8B 35 28 D4 4B 00     -  mov esi,[PapersPlease.exe+37D428]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>52</ID>
          <Description>"pFailureBase (structure pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="0E23100C"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+100C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"pFailure (structure pointer)"</Description>
          <LastState Value="??" Activated="0" RealAddress="0E231010"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1010</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"pFailure-&gt;Failures"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1010</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Cheat: No Failures"</Description>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>globalalloc(globals,$100000)

[ENABLE]
globals+2000:
  dd 1
 
 
[DISABLE]
globals+2000:
  dd 0

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"+ Test"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"TEST: Find Time Struct"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-08
  Author : Jason

  One piece of code that loads the current time and stores it in the same structure
}

[ENABLE]

globalalloc(globals,$100000)

aobscanmodule(INJECT_TIME,PapersPlease.exe,DD 46 38 DD 56 30) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+1000],esi
  fld qword ptr [esi+38]
  fst qword ptr [esi+30]
  jmp return

INJECT_TIME:
  jmp code
  nop
return:
registersymbol(INJECT_TIME)

[DISABLE]

INJECT_TIME:
  db DD 46 38 DD 56 30

unregistersymbol(INJECT_TIME)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "PapersPlease.exe"+2667FB

"PapersPlease.exe"+2667E3: 8B 50 28           -  mov edx,[eax+28]
"PapersPlease.exe"+2667E6: FF D2              -  call edx
"PapersPlease.exe"+2667E8: DC 46 30           -  fadd qword ptr [esi+30]
"PapersPlease.exe"+2667EB: FF 46 20           -  inc [esi+20]
"PapersPlease.exe"+2667EE: 8B 45 08           -  mov eax,[ebp+08]
"PapersPlease.exe"+2667F1: DD 5E 38           -  fstp qword ptr [esi+38]
"PapersPlease.exe"+2667F4: 5E                 -  pop esi
"PapersPlease.exe"+2667F5: 8B E5              -  mov esp,ebp
"PapersPlease.exe"+2667F7: 5D                 -  pop ebp
"PapersPlease.exe"+2667F8: C2 08 00           -  ret 0008
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+2667FB: DD 46 38           -  fld qword ptr [esi+38]
"PapersPlease.exe"+2667FE: DD 56 30           -  fst qword ptr [esi+30]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+266801: DD 05 78 DB 4B 00  -  fld qword ptr [PapersPlease.exe+37DB78]
"PapersPlease.exe"+266807: D9 C0              -  fld st(0)
"PapersPlease.exe"+266809: DD EB              -  fucomp st(3)
"PapersPlease.exe"+26680B: DF E0              -  fnstsw ax
"PapersPlease.exe"+26680D: DD DA              -  fstp st(2)
"PapersPlease.exe"+26680F: F6 C4 44           -  test ah,44
"PapersPlease.exe"+266812: 7B 12              -  jnp PapersPlease.exe+266826
"PapersPlease.exe"+266814: FF 46 20           -  inc [esi+20]
"PapersPlease.exe"+266817: DE C1              -  faddp 
"PapersPlease.exe"+266819: 8B 45 08           -  mov eax,[ebp+08]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"Test Script: 6 failure injections"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_FAIL1,PapersPlease.exe,A0 00 00 00 8B 40 04 C3 CC) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[eax+04]
  ret 
  int 3 
  jmp return

TEST_FAIL1+04:
  jmp code
return:
registersymbol(TEST_FAIL1)

aobscanmodule(TEST_FAIL2,PapersPlease.exe,83 78 04 01 56 57) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  cmp dword ptr [eax+04],01
  push esi
  jmp return2

TEST_FAIL2:
  jmp code2
return2:
registersymbol(TEST_FAIL2)

aobscanmodule(TEST_FAIL3,PapersPlease.exe,83 78 04 02 8B 35 24 D4 4B 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  cmp dword ptr [eax+04],02
  mov esi,[PapersPlease.Math_obj::PI+4194]
  jmp return5

TEST_FAIL3:
  jmp code5
  nop
  nop
  nop
  nop
  nop
return5:
registersymbol(TEST_FAIL3)

aobscanmodule(TEST_FAIL4,PapersPlease.exe,8B 40 04 83 E8 02) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  mov eax,[eax+04]
  sub eax,02
  jmp return9

TEST_FAIL4:
  jmp code9
  nop
return9:
registersymbol(TEST_FAIL4)

aobscanmodule(TEST_FAIL5,PapersPlease.exe,8B 5E 04 8B 07) // should be unique
alloc(newmem14,$1000)

label(code14)
label(return14)

newmem14:

code14:
  mov ebx,[esi+04]
  mov eax,[edi]
  jmp return14

TEST_FAIL5:
  jmp code14
return14:
registersymbol(TEST_FAIL5)

aobscanmodule(TEST_FAIL6,PapersPlease.exe,3B 5E 04 7E 79) // should be unique
alloc(newmem20,$1000)

label(code20)
label(return20)

newmem20:

code20:
  cmp ebx,[esi+04]
  jle PapersPlease.hx::ArrayBase::EnsureSize+88
  jmp return20

TEST_FAIL6:
  jmp code20
return20:
registersymbol(TEST_FAIL6)

aobscanmodule(TEST_FAIL7,PapersPlease.exe,89 5E 04 5E 5B) // should be unique
alloc(newmem27,$1000)

label(code27)
label(return27)

newmem27:

code27:
  mov [esi+04],ebx
  pop esi
  pop ebx
  jmp return27

TEST_FAIL7:
  jmp code27
return27:
registersymbol(TEST_FAIL7)

[DISABLE]

TEST_FAIL1+04:
  db 8B 40 04 C3 CC

unregistersymbol(TEST_FAIL1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 00398B86

"PapersPlease.exe"+258B77: CC                    -  int 3 
"PapersPlease.exe"+258B78: CC                    -  int 3 
"PapersPlease.exe"+258B79: CC                    -  int 3 
"PapersPlease.exe"+258B7A: CC                    -  int 3 
"PapersPlease.exe"+258B7B: CC                    -  int 3 
"PapersPlease.exe"+258B7C: CC                    -  int 3 
"PapersPlease.exe"+258B7D: CC                    -  int 3 
"PapersPlease.exe"+258B7E: CC                    -  int 3 
"PapersPlease.exe"+258B7F: CC                    -  int 3 
"PapersPlease.exe"+258B80: 8B 81 A0 00 00 00     -  mov eax,[ecx+000000A0]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+258B86: 8B 40 04              -  mov eax,[eax+04]
"PapersPlease.exe"+258B89: C3                    -  ret 
"PapersPlease.exe"+258B8A: CC                    -  int 3 
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+258B8B: CC                    -  int 3 
"PapersPlease.exe"+258B8C: CC                    -  int 3 
"PapersPlease.exe"+258B8D: CC                    -  int 3 
"PapersPlease.exe"+258B8E: CC                    -  int 3 
"PapersPlease.exe"+258B8F: CC                    -  int 3 
"PapersPlease.exe"+258B90: 55                    -  push ebp
"PapersPlease.exe"+258B91: 8B EC                 -  mov ebp,esp
"PapersPlease.exe"+258B93: 56                    -  push esi
"PapersPlease.exe"+258B94: 8B 75 08              -  mov esi,[ebp+08]
"PapersPlease.exe"+258B97: 68 40 A2 1F 00        -  push PapersPlease.exe+BA240
}
TEST_FAIL2:
  db 83 78 04 01 56

unregistersymbol(TEST_FAIL2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 0039A08F

"PapersPlease.exe"+25A07A: C2 04 00              -  ret 0004
"PapersPlease.exe"+25A07D: CC                    -  int 3 
"PapersPlease.exe"+25A07E: CC                    -  int 3 
"PapersPlease.exe"+25A07F: CC                    -  int 3 
"PapersPlease.exe"+25A080: 55                    -  push ebp
"PapersPlease.exe"+25A081: 8B EC                 -  mov ebp,esp
"PapersPlease.exe"+25A083: 83 EC 08              -  sub esp,08
"PapersPlease.exe"+25A086: 53                    -  push ebx
"PapersPlease.exe"+25A087: 8B D9                 -  mov ebx,ecx
"PapersPlease.exe"+25A089: 8B 83 A0 00 00 00     -  mov eax,[ebx+000000A0]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+25A08F: 83 78 04 01           -  cmp dword ptr [eax+04],01
"PapersPlease.exe"+25A093: 56                    -  push esi
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+25A094: 57                    -  push edi
"PapersPlease.exe"+25A095: 7D 08                 -  jnl PapersPlease.exe+25A09F
"PapersPlease.exe"+25A097: 8B 35 2C D4 4B 00     -  mov esi,[PapersPlease.exe+37D42C]
"PapersPlease.exe"+25A09D: EB 12                 -  jmp PapersPlease.exe+25A0B1
"PapersPlease.exe"+25A09F: 83 78 04 02           -  cmp dword ptr [eax+04],02
"PapersPlease.exe"+25A0A3: 8B 35 24 D4 4B 00     -  mov esi,[PapersPlease.exe+37D424]
"PapersPlease.exe"+25A0A9: 7C 06                 -  jnge PapersPlease.exe+25A0B1
"PapersPlease.exe"+25A0AB: 8B 35 28 D4 4B 00     -  mov esi,[PapersPlease.exe+37D428]
"PapersPlease.exe"+25A0B1: A1 B8 D9 4B 00        -  mov eax,[PapersPlease.exe+37D9B8]
"PapersPlease.exe"+25A0B6: 8B 48 04              -  mov ecx,[eax+04]
}
TEST_FAIL3:
  db 83 78 04 02 8B 35 24 D4 4B 00

unregistersymbol(TEST_FAIL3)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 0039A09F

"PapersPlease.exe"+25A083: 83 EC 08              -  sub esp,08
"PapersPlease.exe"+25A086: 53                    -  push ebx
"PapersPlease.exe"+25A087: 8B D9                 -  mov ebx,ecx
"PapersPlease.exe"+25A089: 8B 83 A0 00 00 00     -  mov eax,[ebx+000000A0]
"PapersPlease.exe"+25A08F: 83 78 04 01           -  cmp dword ptr [eax+04],01
"PapersPlease.exe"+25A093: 56                    -  push esi
"PapersPlease.exe"+25A094: 57                    -  push edi
"PapersPlease.exe"+25A095: 7D 08                 -  jnl PapersPlease.exe+25A09F
"PapersPlease.exe"+25A097: 8B 35 2C D4 4B 00     -  mov esi,[PapersPlease.exe+37D42C]
"PapersPlease.exe"+25A09D: EB 12                 -  jmp PapersPlease.exe+25A0B1
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+25A09F: 83 78 04 02           -  cmp dword ptr [eax+04],02
"PapersPlease.exe"+25A0A3: 8B 35 24 D4 4B 00     -  mov esi,[PapersPlease.exe+37D424]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+25A0A9: 7C 06                 -  jnge PapersPlease.exe+25A0B1
"PapersPlease.exe"+25A0AB: 8B 35 28 D4 4B 00     -  mov esi,[PapersPlease.exe+37D428]
"PapersPlease.exe"+25A0B1: A1 B8 D9 4B 00        -  mov eax,[PapersPlease.exe+37D9B8]
"PapersPlease.exe"+25A0B6: 8B 48 04              -  mov ecx,[eax+04]
"PapersPlease.exe"+25A0B9: 83 EC 08              -  sub esp,08
"PapersPlease.exe"+25A0BC: 8B C4                 -  mov eax,esp
"PapersPlease.exe"+25A0BE: C6 00 01              -  mov byte ptr [eax],01
"PapersPlease.exe"+25A0C1: 83 EC 08              -  sub esp,08
"PapersPlease.exe"+25A0C4: 8B C4                 -  mov eax,esp
"PapersPlease.exe"+25A0C6: C7 00 11 00 00 00     -  mov [eax],00000011
}
TEST_FAIL4:
  db 8B 40 04 83 E8 02

unregistersymbol(TEST_FAIL4)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: 0039A119

"PapersPlease.exe"+25A0FB: 8B 0D 28 D4 4B 00     -  mov ecx,[PapersPlease.exe+37D428]
"PapersPlease.exe"+25A101: 8B F8                 -  mov edi,eax
"PapersPlease.exe"+25A103: 8B 01                 -  mov eax,[ecx]
"PapersPlease.exe"+25A105: 8B 50 10              -  mov edx,[eax+10]
"PapersPlease.exe"+25A108: FF D2                 -  call edx
"PapersPlease.exe"+25A10A: 3B F8                 -  cmp edi,eax
"PapersPlease.exe"+25A10C: 0F 94 C0              -  sete al
"PapersPlease.exe"+25A10F: 84 C0                 -  test al,al
"PapersPlease.exe"+25A111: 74 39                 -  je PapersPlease.exe+25A14C
"PapersPlease.exe"+25A113: 8B 83 A0 00 00 00     -  mov eax,[ebx+000000A0]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+25A119: 8B 40 04              -  mov eax,[eax+04]
"PapersPlease.exe"+25A11C: 83 E8 02              -  sub eax,02
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+25A11F: 89 45 F8              -  mov [ebp-08],eax
"PapersPlease.exe"+25A122: DB 45 F8              -  fild dword ptr [ebp-08]
"PapersPlease.exe"+25A125: D9 E8                 -  fld1 
"PapersPlease.exe"+25A127: D8 D1                 -  fcom st(0),st(1)
"PapersPlease.exe"+25A129: DF E0                 -  fnstsw ax
"PapersPlease.exe"+25A12B: F6 C4 41              -  test ah,41
"PapersPlease.exe"+25A12E: 75 04                 -  jne PapersPlease.exe+25A134
"PapersPlease.exe"+25A130: DD D9                 -  fstp st(1)
"PapersPlease.exe"+25A132: EB 02                 -  jmp PapersPlease.exe+25A136
"PapersPlease.exe"+25A134: DD D8                 -  fstp st(0)
}
TEST_FAIL5:
  db 8B 5E 04 8B 07

unregistersymbol(TEST_FAIL5)
dealloc(newmem14)

{
// ORIGINAL CODE - INJECTION POINT: 0039A17D

"PapersPlease.exe"+25A162: 8B C4              -  mov eax,esp
"PapersPlease.exe"+25A164: 89 08              -  mov [eax],ecx
"PapersPlease.exe"+25A166: 8B 55 10           -  mov edx,[ebp+10]
"PapersPlease.exe"+25A169: 51                 -  push ecx
"PapersPlease.exe"+25A16A: 89 50 04           -  mov [eax+04],edx
"PapersPlease.exe"+25A16D: 8B C4              -  mov eax,esp
"PapersPlease.exe"+25A16F: 57                 -  push edi
"PapersPlease.exe"+25A170: 89 30              -  mov [eax],esi
"PapersPlease.exe"+25A172: E8 E9 AE F8 FF     -  call PapersPlease.exe+1E5060
"PapersPlease.exe"+25A177: 8B B3 A0 00 00 00  -  mov esi,[ebx+000000A0]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+25A17D: 8B 5E 04           -  mov ebx,[esi+04]
"PapersPlease.exe"+25A180: 8B 07              -  mov eax,[edi]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+25A182: 83 C4 18           -  add esp,18
"PapersPlease.exe"+25A185: 8D 4B 01           -  lea ecx,[ebx+01]
"PapersPlease.exe"+25A188: 51                 -  push ecx
"PapersPlease.exe"+25A189: 8B CE              -  mov ecx,esi
"PapersPlease.exe"+25A18B: 89 45 08           -  mov [ebp+08],eax
"PapersPlease.exe"+25A18E: E8 7D 5C 04 00     -  call PapersPlease.exe+29FE10
"PapersPlease.exe"+25A193: 8B 56 0C           -  mov edx,[esi+0C]
"PapersPlease.exe"+25A196: 8B 45 08           -  mov eax,[ebp+08]
"PapersPlease.exe"+25A199: 89 04 9A           -  mov [edx+ebx*4],eax
"PapersPlease.exe"+25A19C: 8B C7              -  mov eax,edi
}
TEST_FAIL6:
  db 3B 5E 04 7E 79

unregistersymbol(TEST_FAIL6)
dealloc(newmem20)

{
// ORIGINAL CODE - INJECTION POINT: 003DFE1A

"PapersPlease.exe"+29FE0C: CC                    -  int 3 
"PapersPlease.exe"+29FE0D: CC                    -  int 3 
"PapersPlease.exe"+29FE0E: CC                    -  int 3 
"PapersPlease.exe"+29FE0F: CC                    -  int 3 
"PapersPlease.exe"+29FE10: 55                    -  push ebp
"PapersPlease.exe"+29FE11: 8B EC                 -  mov ebp,esp
"PapersPlease.exe"+29FE13: 53                    -  push ebx
"PapersPlease.exe"+29FE14: 8B 5D 08              -  mov ebx,[ebp+08]
"PapersPlease.exe"+29FE17: 56                    -  push esi
"PapersPlease.exe"+29FE18: 8B F1                 -  mov esi,ecx
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+29FE1A: 3B 5E 04              -  cmp ebx,[esi+04]
"PapersPlease.exe"+29FE1D: 7E 79                 -  jle PapersPlease.exe+29FE98
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+29FE1F: 3B 5E 08              -  cmp ebx,[esi+08]
"PapersPlease.exe"+29FE22: 7E 71                 -  jle PapersPlease.exe+29FE95
"PapersPlease.exe"+29FE24: 8D 04 5B              -  lea eax,[ebx+ebx*2]
"PapersPlease.exe"+29FE27: 99                    -  cdq 
"PapersPlease.exe"+29FE28: 2B C2                 -  sub eax,edx
"PapersPlease.exe"+29FE2A: D1 F8                 -  sar eax,1
"PapersPlease.exe"+29FE2C: 83 C0 0A              -  add eax,0A
"PapersPlease.exe"+29FE2F: 89 46 08              -  mov [esi+08],eax
"PapersPlease.exe"+29FE32: 8B 06                 -  mov eax,[esi]
"PapersPlease.exe"+29FE34: 8B 90 9C 00 00 00     -  mov edx,[eax+0000009C]
}
TEST_FAIL7:
  db 89 5E 04 5E 5B

unregistersymbol(TEST_FAIL7)
dealloc(newmem27)

{
// ORIGINAL CODE - INJECTION POINT: 003DFE95

"PapersPlease.exe"+29FE7D: 89 5E 04           -  mov [esi+04],ebx
"PapersPlease.exe"+29FE80: 89 46 0C           -  mov [esi+0C],eax
"PapersPlease.exe"+29FE83: 5E                 -  pop esi
"PapersPlease.exe"+29FE84: 5B                 -  pop ebx
"PapersPlease.exe"+29FE85: 5D                 -  pop ebp
"PapersPlease.exe"+29FE86: C2 04 00           -  ret 0004
"PapersPlease.exe"+29FE89: E8 52 77 FF FF     -  call PapersPlease.exe+2975E0
"PapersPlease.exe"+29FE8E: 83 C4 08           -  add esp,08
"PapersPlease.exe"+29FE91: 89 46 0C           -  mov [esi+0C],eax
"PapersPlease.exe"+29FE94: 5F                 -  pop edi
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+29FE95: 89 5E 04           -  mov [esi+04],ebx
"PapersPlease.exe"+29FE98: 5E                 -  pop esi
"PapersPlease.exe"+29FE99: 5B                 -  pop ebx
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+29FE9A: 5D                 -  pop ebp
"PapersPlease.exe"+29FE9B: C2 04 00           -  ret 0004
"PapersPlease.exe"+29FE9E: CC                 -  int 3 
"PapersPlease.exe"+29FE9F: CC                 -  int 3 
"PapersPlease.exe"+29FEA0: 55                 -  push ebp
"PapersPlease.exe"+29FEA1: 8B EC              -  mov ebp,esp
"PapersPlease.exe"+29FEA3: 56                 -  push esi
"PapersPlease.exe"+29FEA4: 8B F1              -  mov esi,ecx
"PapersPlease.exe"+29FEA6: 8B 46 04           -  mov eax,[esi+04]
"PapersPlease.exe"+29FEA9: 57                 -  push edi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"Static"</Description>
          <LastState Value="??" Activated="0" RealAddress="004BD424"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PapersPlease.Math_obj::PI+4194</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"Game Speed Multiplier (static - froze conversation for me though))"</Description>
          <LastState Value="??" Activated="0" RealAddress="004BDB70"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>004BDB70</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"TEST: Total Failures"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PapersPlease.exe
  Version: 
  Date   : 2014-07-09
  Author : Jason

  This loads total failures into edx each frame of the game.
}

[ENABLE]

aobscanmodule(INJECT_TotalFailures,PapersPlease.exe,8B 96 F0 00 00 00 8B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov edx,[esi+000000F0]
  jmp return

INJECT_TotalFailures:
  jmp code
  nop
return:
registersymbol(INJECT_TotalFailures)

[DISABLE]

INJECT_TotalFailures:
  db 8B 96 F0 00 00 00

unregistersymbol(INJECT_TotalFailures)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "PapersPlease.exe"+174F30

"PapersPlease.exe"+174F14: F6 C4 41           -  test ah,41
"PapersPlease.exe"+174F17: 7A 15              -  jp PapersPlease.exe+174F2E
"PapersPlease.exe"+174F19: 8B 06              -  mov eax,[esi]
"PapersPlease.exe"+174F1B: 8B 90 3C 01 00 00  -  mov edx,[eax+0000013C]
"PapersPlease.exe"+174F21: 8D 4D FF           -  lea ecx,[ebp-01]
"PapersPlease.exe"+174F24: 51                 -  push ecx
"PapersPlease.exe"+174F25: 8B CE              -  mov ecx,esi
"PapersPlease.exe"+174F27: FF D2              -  call edx
"PapersPlease.exe"+174F29: E9 49 01 00 00     -  jmp PapersPlease.exe+175077
"PapersPlease.exe"+174F2E: 8B 01              -  mov eax,[ecx]
// ---------- INJECTING HERE ----------
"PapersPlease.exe"+174F30: 8B 96 F0 00 00 00  -  mov edx,[esi+000000F0]
// ---------- DONE INJECTING  ----------
"PapersPlease.exe"+174F36: 8B 80 A4 00 00 00  -  mov eax,[eax+000000A4]
"PapersPlease.exe"+174F3C: 52                 -  push edx
"PapersPlease.exe"+174F3D: FF D0              -  call eax
"PapersPlease.exe"+174F3F: 83 EC 10           -  sub esp,10
"PapersPlease.exe"+174F42: DD 5C 24 08        -  fstp qword ptr [esp+08]
"PapersPlease.exe"+174F46: DD 86 C8 00 00 00  -  fld qword ptr [esi+000000C8]
"PapersPlease.exe"+174F4C: DD 1C 24           -  fstp qword ptr [esp]
"PapersPlease.exe"+174F4F: E8 8C C2 E8 FF     -  call PapersPlease.exe+11E0
"PapersPlease.exe"+174F54: 8B 8E E0 00 00 00  -  mov ecx,[esi+000000E0]
"PapersPlease.exe"+174F5A: DD 96 C8 00 00 00  -  fst qword ptr [esi+000000C8]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>address1</Name>
      <Address>0060CC5B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>test</Name>
      <Address>0FD10000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>0E230000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_PROGRESS</Name>
      <Address> 00398D35</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_FAILURE</Name>
      <Address> 0039A089</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_TIME</Name>
      <Address> 003A63A0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Time is couble at offset 3C
Offset 34 is previous time, seems like updating 3c works (usually)
Offset 28 is speed, normally 0.1, setting to 0 freezes time, negative rewinds time
Going below the day's start doesn't seem to hurt the game
About 35 units is about an hour in game</Comments>
</CheatTable>
