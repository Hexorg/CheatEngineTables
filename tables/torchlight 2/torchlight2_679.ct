<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Health 1Million"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Health)
registersymbol(Health)
aobscan(Healthaob,d9 86 60 05 00 00 8b ce d9 9c 24 84 00 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+00000560],(float)1000000

originalcode:
fld dword ptr [esi+00000560]

exit:
jmp returnhere

Healthaob:
Health:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Health:
fld dword ptr [esi+00000560]
//Alt: db D9 86 60 05 00 00
unregistersymbol(Health)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Mana 1Million"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Mana)
registersymbol(Mana)
aobscan(Manaaob,d9 86 84 05 00 00 8b ce d9 9c 24 84 00 00 00)


newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+00000584],(float)1000000

originalcode:
fld dword ptr [esi+00000584]

exit:
jmp returnhere

Manaaob:
Mana:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Mana:
fld dword ptr [esi+00000584]
//Alt: db D9 86 84 05 00 00
unregistersymbol(Mana)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"One Hit Kill"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(OneHitKill)
label(HealthDecreaser)
registersymbol(HealthDecreaser)
aobscan(HealthDecreaseraob,d9 86 60 05 00 00 8b ce d8 44 24 78)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp [esi+0000031C],1
jne OneHitKill
popfd

originalcode:
fld dword ptr [esi+00000560]

exit:
jmp returnhere

OneHitKill:
popfd
mov [esi+00000560],(float)0
fld dword ptr [esi+00000560]
jmp returnhere
HealthDecreaseraob:
HealthDecreaser:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
HealthDecreaser:
fld dword ptr [esi+00000560]
//Alt: db D9 86 60 05 00 00
unregistersymbol(HealthDecreaser)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Gold Amount"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(GoldAmount)
label(Gold)
registersymbol(GoldAmount)
registersymbol(Gold)
aobscan(Goldaob,8b 88 90 05 00 00 3b d1 77 ** 73 **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[GoldAmount]
mov [eax+00000590],edx
pop edx

originalcode:
mov ecx,[eax+00000590]

exit:
jmp returnhere

GoldAmount:
dd 0

Goldaob:
Gold:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Gold:
mov ecx,[eax+00000590]
//Alt: db 8B 88 90 05 00 00
unregistersymbol(Gold)
unregistersymbol(GoldAmount)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Gold Amount"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>GoldAmount</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Experience Amount"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(CurrentExperience)
label(Experience)
registersymbol(CurrentExperience)
registersymbol(Experience)
aobscan(Experienceaob,8b 86 94 05 00 00 eb ** 33 c0 8b f8)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[CurrentExperience]
mov [esi+00000594],edx
pop edx

originalcode:
mov eax,[esi+00000594]

exit:
jmp returnhere

CurrentExperience:
dd 0

Experienceaob:
Experience:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Experience:
mov eax,[esi+00000594]
//Alt: db 8B 86 94 05 00 00
unregistersymbol(Experience)
unregistersymbol(CurrentExperience)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Current Experience"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentExperience</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Skill Points Amount"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(CurrentSkillPoints)
label(SkillPoints)
registersymbol(CurrentSkillPoints)
registersymbol(SkillPoints)
aobscan(SkillPointsaob,8b 88 ac 05 00 00 3b 8e 90 00 00 00 75 **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[CurrentSkillPoints]
mov [eax+000005AC],edx
pop edx

originalcode:
mov ecx,[eax+000005AC]

exit:
jmp returnhere

CurrentSkillPoints:
dd 0

SkillPointsaob:
SkillPoints:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
SkillPoints:
mov ecx,[eax+000005AC]
//Alt: db 8B 88 AC 05 00 00
unregistersymbol(SkillPoints)
unregistersymbol(CurrentSkillPoints)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Current Skill Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentSkillPoints</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Stat Points Amount"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(CurrentStatPoints)
label(StatPoints)
registersymbol(CurrentStatPoints)
registersymbol(StatPoints)
aobscan(StatPointsaob,8b bf a8 05 00 00 89 7c 24 10 e9 ** ** ** **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[CurrentStatPoints]
mov [edi+000005A8],edx
pop edx

originalcode:
mov edi,[edi+000005A8]

exit:
jmp returnhere

CurrentStatPoints:
dd 0

StatPointsaob:
StatPoints:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
StatPoints:
mov edi,[edi+000005A8]
//Alt: db 8B BF A8 05 00 00
unregistersymbol(StatPoints)
unregistersymbol(CurrentStatPoints)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Current Stat Points"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentStatPoints</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"No Cooldowns"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Cooldown)
registersymbol(Cooldown)
aobscan(Cooldownaob,d9 9d f0 00 00 00 d9 85 f4 00 00 00 8b 85 84 00 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
fstp dword ptr [ebp+000000F0]
mov [ebp+000000F0],(float)0

exit:
jmp returnhere

Cooldownaob:
Cooldown:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Cooldown:
fstp dword ptr [ebp+000000F0]
//Alt: db D9 9D F0 00 00 00
unregistersymbol(Cooldown)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
