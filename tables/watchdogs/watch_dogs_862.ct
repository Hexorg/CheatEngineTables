<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Player"</Description>
      <Options moHideChildren="1"/>
      <Color>056524</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(_plx32)
registersymbol(_plx32)
aobscan(pldd,F? ?? 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 06 00 00 00 80 01 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 02 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 00 00)

pldd:
_plx32:
 
[DISABLE]
unregistersymbol(_plx32)
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Xp"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_plx32+A4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Skills Points"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_plx32+9C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>93</ID>
      <Description>"Stealth By Daijobu"</Description>
      <Options moHideChildren="1"/>
      <Color>2424FB</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>92</ID>
          <Description>"Note: As long as you don't go gung-ho enemies won't see or attack you."</Description>
          <Color>0000FF</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"First Version"</Description>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>86</ID>
              <Description>"Stealth (Invisible) - AoBScan"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{By Daijobu @ cheatengine.org}
//Allocations
alloc(_wdStealth,512,"Disrupt_b64.dll")
//Labels
label(_wdStealth_exit_1)
label(_wdStealth_exit_2)
label(_wdStealth_aob_jmp_1)
label(_wdStealth_aob_jmp_2)
//Symbols
registersymbol(_wdStealth_aob_jmp_1)
registersymbol(_wdStealth_aob_jmp_2)
//Array of Byte scans
aobscanmodule(_wdStealth_aob_1,Disrupt_b64.dll,80 7F 60 00 0F 84 F3 01 00 00) //"Disrupt_b64.dll"+9EBB61
aobscanmodule(_wdStealth_aob_2,Disrupt_b64.dll,80 7F 60 00 0F 84 9A 00 00 00) //"Disrupt_b64.dll"+9EBCBA

_wdStealth:
cmp byte ptr [rdi+60],00
jmp Disrupt_b64.RunGame+9E5CCE
jmp _wdStealth_exit_1

_wdStealth+128:
cmp byte ptr [rdi+60],00
jmp Disrupt_b64.RunGame+9E5CCE
jmp _wdStealth_exit_2

_wdStealth_aob_1:
_wdStealth_aob_jmp_1:
jmp _wdStealth
db 90 90 90 90 90
_wdStealth_exit_1:

_wdStealth_aob_2:
_wdStealth_aob_jmp_2:
jmp _wdStealth+128
db 90 90 90 90 90
_wdStealth_exit_2:

[DISABLE]
dealloc(_wdStealth)
_wdStealth_aob_jmp_1:
db 80 7F 60 00 0F 84 F3 01 00 00
unregistersymbol(_wdStealth_aob_jmp_1)

_wdStealth_aob_jmp_2:
db 80 7F 60 00 0F 84 9A 00 00 00
unregistersymbol(_wdStealth_aob_jmp_2)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>87</ID>
              <Description>"Stealth (Invisible) - Regular"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{By Daijobu @ cheatengine.org}
//Allocations
alloc(_wdStealth,512,"Disrupt_b64.dll")
//Labels
label(_wdStealth_exit_1)
label(_wdStealth_exit_2)
//Symbols
//Array of Byte scans

_wdStealth:
cmp byte ptr [rdi+60],00
jmp Disrupt_b64.RunGame+9E5CCE
jmp _wdStealth_exit_1

_wdStealth+128:
cmp byte ptr [rdi+60],00
jmp Disrupt_b64.RunGame+9E5CCE
jmp _wdStealth_exit_2

"Disrupt_b64.dll"+9EBB61:
jmp _wdStealth
db 90 90 90 90 90
_wdStealth_exit_1:

"Disrupt_b64.dll"+9EBCBA:
jmp _wdStealth+128
db 90 90 90 90 90
_wdStealth_exit_2:

[DISABLE]
dealloc(_wdStealth)
"Disrupt_b64.dll"+9EBB61:
db 80 7F 60 00 0F 84 F3 01 00 00

"Disrupt_b64.dll"+9EBCBA:
db 80 7F 60 00 0F 84 9A 00 00 00
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"Second Version"</Description>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>91</ID>
              <Description>"Stealth (Invisible) v2 - AoBScan"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{By Daijobu @ cheatengine.org}
//Allocations
alloc(_stealthSkip,256,"Disrupt_b64.dll")
//Labels
label(_stealthSkip_exit_1)
label(_stealthSkip_exit_2)
label(_stealthSkip_aob_1_jmp)
label(_stealthSkip_aob_2_jmp)
//Symbols
registersymbol(_stealthSkip_aob_1_jmp)
registersymbol(_stealthSkip_aob_2_jmp)
//Array of Byte scans
aobscanmodule(_stealthSkip_aob_1,Disrupt_b64.dll,80 78 20 00 74 09 83 B8)//"Disrupt_b64.dll"+9EBAD4
aobscanmodule(_stealthSkip_aob_2,Disrupt_b64.dll,80 78 21 00 74 18 83 B8)//"Disrupt_b64.dll"+9EBAE3

//Main
_stealthSkip:
db 80 78 20 00 E9 DA BA 9F 00
{cmp byte ptr [rax+20],00
jmp Disrupt_b64.RunGame+9E5A53}
jmp _stealthSkip_exit_1

_stealthSkip+128:
db 80 78 21 00 E9 C1 B9 9F 00
{cmp byte ptr [rax+21],00
jmp Disrupt_b64.RunGame+9E5A71}//62
jmp _stealthSkip_exit_2

_stealthSkip_aob_1:
_stealthSkip_aob_1_jmp:
jmp _stealthSkip
db 90
_stealthSkip_exit_1:

_stealthSkip_aob_2:
_stealthSkip_aob_2_jmp:
jmp _stealthSkip+128
db 90
_stealthSkip_exit_2:
 
[DISABLE]
dealloc(_stealthSkip)
_stealthSkip_aob_1_jmp:
db 80 78 20 00 74 09
unregistersymbol(_stealthSkip_aob_1_jmp)

_stealthSkip_aob_2_jmp:
db 80 78 21 00 74 18
unregistersymbol(_stealthSkip_aob_2_jmp)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>90</ID>
              <Description>"Stealth (Invisible) v2 - Regular"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{By Daijobu @ cheatengine.org}
//Allocations
alloc(_stealthSkip,256,"Disrupt_b64.dll")
//Labels
label(_stealthSkip_exit_1)
label(_stealthSkip_exit_2)

//Main
_stealthSkip:
db 80 78 20 00 E9 DA BA 9F 00
{cmp byte ptr [rax+20],00
jmp Disrupt_b64.RunGame+9E5A53}
jmp _stealthSkip_exit_1

_stealthSkip+128:
db 80 78 21 00 E9 C1 B9 9F 00
{cmp byte ptr [rax+21],00
jmp Disrupt_b64.RunGame+9E5A71}//62
jmp _stealthSkip_exit_2

"Disrupt_b64.dll"+9EBAD4:
jmp _stealthSkip
db 90
_stealthSkip_exit_1:

"Disrupt_b64.dll"+9EBAE3:
jmp _stealthSkip+128
db 90
_stealthSkip_exit_2:
 
[DISABLE]
dealloc(_stealthSkip)
"Disrupt_b64.dll"+9EBAD4:
db 80 78 20 00 74 09

"Disrupt_b64.dll"+9EBAE3:
db 80 78 21 00 74 18
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>39</ID>
      <Description>"Money"</Description>
      <Options moHideChildren="1"/>
      <Color>1052B6</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(_monaah)
registersymbol(_monaah)
aobscan(monaah,68 A2 ?? ?? ?? ?F 00 00 00 00 00 00 00 00 00 00 ?? ?? ?? ?? 00 00 00 00 06 00 00 00 80 01 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 02 00 00 00)
 
monaah:
_monaah:

[DISABLE]
unregistersymbol(_monaah)
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Cash"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_monaah+9c</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>110</ID>
      <Description>"Godly Powers"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
alloc(memxm,8)
globalalloc(vali,8)
globalalloc(gmval,4)
globalalloc(hkval,4)
label(returnhere)
label(originalcode)
label(exit)
label(pl)
label(en)
label(_gods)
registersymbol(_gods)
aobscanmodule(gods,Disrupt_b64.dll,?? ?? C8 48 83 79 08 00 F3 0F 11 49 18)

memxm:
dq (float)0

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//cmp [rcx+1C],(float)100
cmp [rcx+1C],(float)100
je pl
jmp en

en:
cmp [hkval],0
je originalcode
push eax
mov eax,[memxm]
mov [rcx+18],eax
pop eax
jmp exit

pl:
cmp [rcx+40],0
je en
cmp [rcx+A2C],(float)0
je en
cmp [gmval],1
je exit

originalcode:
movss [rcx+18],xmm1

exit:
jmp returnhere

gods+8:
_gods:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(memxm)
dealloc(gmval)
dealloc(hkval)
dealloc(vali)
_gods:
movss [rcx+18],xmm1
unregistersymbol(vali)
unregistersymbol(gmval)
unregistersymbol(hkval)
unregistersymbol(_gods)
//Alt: db F3 0F 11 49 18
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>115</ID>
          <Description>"One Hit Kill"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
hkval:
dd 1
[DISABLE]
hkval:
dd 0
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>116</ID>
          <Description>"God Mode"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
gmval:
dd 1
[DISABLE]
gmval:
dd 0
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"Reputation"</Description>
      <Options moHideChildren="1"/>
      <Color>AC9D1A</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
globalalloc(_repu,8)
label(returnhere)
label(originalcode)
label(exit)
label(_repus)
registersymbol(_repus)
aobscanmodule(repus,Disrupt_b64.dll,48 85 D2 74 F3 8B 42 10)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [_repu],0
je originalcode
push esi
mov esi,[_repu]
mov [rdx+10],esi
pop esi
originalcode:
mov eax,[rdx+10]
mov [_repu],eax
add rsp,20

exit:
jmp returnhere

repus+5:
_repus:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_repus:
mov eax,[rdx+10]
add rsp,20
dealloc(_repu)
unregistersymbol(_repu)
unregistersymbol(_repus)
//Alt: db 8B 42 10 48 83 C4 20
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>56</ID>
          <Description>""(600) = Angel- &lt;(-_-)&gt; - (-600) = Devil""</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_repu</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>52</ID>
      <Description>"Xp alternativ"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
globalalloc(_xpp,8)
label(returnhere)
label(originalcode)
label(exit)
label(_xp)
registersymbol(_xp)
aobscanmodule(xppp,Disrupt_b64.dll,41 8B 80 ?? ?? ?? ?? 45 89 08 41 89 40 28)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp r9d,64
jb originalcode
add r9d,[_xpp]
originalcode:
mov [r8],r9d
mov [r8+28],eax

exit:
jmp returnhere

xppp+7:
_xp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_xp:
mov [r8],r9d
mov [r8+28],eax
dealloc(_xpp)
unregistersymbol(_xpp)
unregistersymbol(_xp)
//Alt: db 45 89 08 41 89 40 28
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>53</ID>
          <Description>"Set the amount - Reload last autosave"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_xpp</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>96</ID>
      <Description>"Hacking Timer"</Description>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_timer)
registersymbol(_timer)
aobscanmodule(timer,Disrupt_b64.dll,75 21 80 78 1C 00 74 21 F3 ?? ?? 81 ?? ?? ?? ?? F3 ?? ?? C1 F3 ?? ?? 81 ?? ?? ?? ??))

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
movss [rcx+000000A8],xmm0

exit:
jmp returnhere

timer+14:
_timer:
db 90 90 90 90 90 90 90 90
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_timer:
movss [rcx+000000A8],xmm0
unregistersymbol(_timer)
//Alt: db F3 0F 11 81 A8 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Triggers Once Points below 100 and above 10 Or Money Below 10k"</Description>
      <Color>284AD5</Color>
      <VariableType>String</VariableType>
      <Length>10</Length>
      <Unicode>0</Unicode>
      <ZeroTerminate>1</ZeroTerminate>
      <Address>0</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"Money - And - Points"</Description>
      <Color>FD0013</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_points)
registersymbol(_points)
aobscanmodule(points,Disrupt_b64.dll,41 29 B4 BC 9C 00 00 00 48 8D 15 C4 A8 4D 02 )

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [r12+rdi*4+0000009C],2710
jg originalcode
cmp [r12+rdi*4+0000009C],64
jb @f
mov [r12+rdi*4+0000009C],5F5E0FF
jmp originalcode
@@:
cmp [r12+rdi*4+0000009C],a
jg originalcode
mov [r12+rdi*4+0000009C],63
originalcode:
sub [r12+rdi*4+0000009C],esi

exit:
jmp returnhere

points:
_points:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_points:
sub [r12+rdi*4+0000009C],esi
unregistersymbol(_points)
//Alt: db 41 29 B4 BC 9C 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Build Stack - Build Something!"</Description>
      <Color>661104</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_build)
registersymbol(_build)
aobscanmodule(aobbsi,Disrupt_b64.dll,44 01 6A 0C 8B 42 0C ?? ?? 0F 42 F8)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add [rdx+0C],14
originalcode:
add [rdx+0C],r13d
mov eax,[rdx+0C]

exit:
jmp returnhere

aobbsi:
_build:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_build:
add [rdx+0C],r13d
mov eax,[rdx+0C]
unregistersymbol(_build)
//Alt: db 44 01 6A 0C 8B 42 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Infinity Materials - triggers once below 20x"</Description>
      <Color>546406</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_items)
registersymbol(_items)
aobscanmodule(aobitm,Disrupt_b64.dll,89 42 0C B0 01)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,14
jg originalcode
mov eax,63
originalcode:
mov [rdx+0C],eax
mov al,01

exit:
jmp returnhere

aobitm:
_items:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_items:
mov [rdx+0C],eax
mov al,01
unregistersymbol(_items)
//Alt: db 89 42 0C B0 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Infinity Ammo"</Description>
      <Color>570962</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_ammo)
registersymbol(_ammo)
aobscanmodule(aamo,Disrupt_b64.dll,89 42 0C B0 01)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,12C
jg originalcode
mov [rdx+0C],3E7
jmp exit
originalcode:
mov [rdx+0C],eax
mov al,01

exit:
jmp returnhere

aamo:
_ammo:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_ammo:
mov [rdx+0C],eax
mov al,01
unregistersymbol(_ammo)
//Alt: db 89 42 0C B0 01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Infinity Clip"</Description>
      <Color>00006A</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_clip)
registersymbol(_clip)
aobscanmodule(aobclip,Disrupt_b64.dll,FF 8F 98 00 00 00 85 C0)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
inc [rdi+00000098]
originalcode:
dec [rdi+00000098]

exit:
jmp returnhere

aobclip:
_clip:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_clip:
dec [rdi+00000098]
unregistersymbol(_clip)
//Alt: db FF 8F 98 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>54</ID>
      <Description>"Solar Powered Battery "</Description>
      <Color>55A6E8</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
label(returnhere)
label(originalcode)
label(exit)
label(_gb)
registersymbol(_gb)
aobscanmodule(battery,Disrupt_b64.dll,48 8D ?? ?? ?? ?? ?? 89 81 ?? ?? ?? ?? 48 8D 4C 24 60)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
inc eax
cmp eax,6
jng originalcode
mov eax,6
originalcode:
mov [rcx+000000E8],eax

exit:
jmp returnhere

battery+7:
_gb:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_gb:
mov [rcx+000000E8],eax
unregistersymbol(_gb)
//Alt: db 89 81 E8 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>119</ID>
      <Description>"Wanted Level"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"Disrupt_b64.dll")
globalalloc(_pnlv,8)
label(returnhere)
label(originalcode)
label(exit)
label(_pnl)
registersymbol(_pnl)
aobscanmodule(pnl,Disrupt_b64.dll,66 89 41 04 44 89 11)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp r10d,[_pnlv]
je originalcode
mov r10d,[_pnlv]
originalcode:
mov [rcx],r10d
mov [_pnlv],r10d
mov ecx,00000003

exit:
jmp returnhere

pnl+4:
_pnl:
jmp newmem
nop
nop
nop
returnhere:



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
_pnl:
mov [rcx],r10d
mov ecx,00000003
unregistersymbol(_pnl)
unregistersymbol(_pnlv)
//Alt: db 44 89 11 B9 03 00 00 00
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Freeze value at"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>_pnlv</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>121</ID>
      <Description>"Notoriety"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>1D1AEDB8</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_xpp</Name>
      <Address>12E40300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_clip</Name>
      <Address>7FFFF44F27AA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_timer</Name>
      <Address>7FFFF48DA52B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_build</Name>
      <Address>7FFFF44C7AA0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vali</Name>
      <Address>12E40630</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gmval</Name>
      <Address>12E40640</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hkval</Name>
      <Address>12E40650</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_vali</Name>
      <Address>12E40660</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_gods</Name>
      <Address>7FFFF550FBA0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
