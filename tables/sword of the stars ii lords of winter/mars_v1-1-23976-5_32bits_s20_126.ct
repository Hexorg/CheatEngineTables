<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"[X] &lt;== SoTS 2 32bits v1.1.23976.5 Savings Script 1.4"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32 bits)
 Game Version  :
 Game Sponsor  : Paradox Jast (updates)
 Script Version: 1.4
 CE Version    : 6.2
 Release date  : 22-Nov-2012
 Author        : Recifense
 Feature(s):
 - Minimum Savings
 - Quick Research
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(sqlite3.dll+00026eb5,b8 01 00 00 00) //nhp

//=========================================
alloc(MyCodeR,4096,sqlite3.dll)
//=========================================
// Declaration section
label(_MonPlayer)
label(_MonP2)
label(_MonP20)
label(_MonP21)
label(_MonP22)
label(_MonP3)
label(_MonP30)
label(_MonP31)
label(_MonP40)
label(_MonP50)
label(_BackMP)
label(_ExitMP)
label(_MonResearchR)
label(_MonRR00)
label(_MonRR0S)
label(_MonRR01)
label(_ExitMRR)
label(_CalcOffset)
label(_CalcO0)
label(_CalcO1)
label(pRes)
label(pPlayer)
label(iEnableMR)
label(iEnableMRR)
label(iEnableMRS)
label(iSavings)
label(qSavings)
label(iMinRes)
label(qMinRes)
label(iSize)
label(qXMM0)
label(aobSignature0)
label(aobSignature1)
label(iID)
label(pResearch)
label(pStatus)
label(pNeedValue)
label(iNeedSize)
label(pCurFeas)
label(iCurFeas)
label(pMaxFeas)
label(iMaxFeas)
label(iFlagCR)

//=========================================
// Registering Symbols
registersymbol(MyCodeR)
registersymbol(pPlayer)
registersymbol(iEnableMR)
registersymbol(iEnableMRS)
registersymbol(iEnableMRR)
registersymbol(iSavings)
registersymbol(qSavings)
registersymbol(pResearch)

//=========================================
MyCodeR:
//=========================================
// ECX = pbSize (base + 2 or + 3)

_MonPlayer:
 push ecx
 push edx
 push edi
 push esi

 movsd [qXMM0],xmm0
 mov eax,ecx                       // Adjust pointer

 movzx edx,byte ptr [eax]          // Get size in bytes
 cmp edx,#55                       // Is it Savings?
 jne _MonP50                       // Jump if false

 mov dl,[eax+06]
 cmp dl,03
 jge _ExitMP                       // Jump if false

//==&gt; Savings
 push ecx
 push ebx
 push eax

 mov ecx,#06                       // Position of ID in the data bank
 call _CalcOffset                  // EBX = offset

 pop eax                           // recover address of info size
 push eax                          // Save address of info size

 movzx edx,byte ptr [eax]          // Convert byte to double_word (header size)

 add edx,ebx                       // Adjust pointer
 add edx,eax                       // RDX = pID

 movzx edx,byte ptr [edx]
 mov [iID],edx
 cmp edx,1                         // Is it the player's saving?
 jne _MonP40                       // Jump if false

 mov [pPlayer],eax                 // Save pointer for debugging

 mov ecx,#09                       // Position of Savings in the data bank
 call _CalcOffset                  // EBX = offset

 pop eax                           // recover address of info size
 push eax                          // Save address of info size

 movzx edx,byte ptr [eax]          // Convert byte to double_word

 add edx,ebx                       // Adjust pointer
 add edx,eax                       // RDX = pCurrentSavings

 mov [pRes],edx                    // Save pointer for debugging

 movzx ecx,byte ptr [eax+0a]       // Get Savings Size

// Changing from Big Endian to Little Endian

 mov ebx,iSavings+2
 cmp ecx,3                         // 3 bytes integer ?
 je _MonP2                         // Jump if true

 mov ebx,qSavings+7
 cmp ecx,7                         // Double float ?
 jne _MonP40                       // Jump if false

 mov ecx,8                         // Adjust size

_MonP2:                            // Copy value to local variable
 mov [pRes],edx
 mov [iSize],ecx

_MonP20:
 mov al,[edx]
 mov [ebx],al
 inc edx
 dec ebx
 loop _MonP20

// End of changing

 cmp dword ptr [iEnableMR],0
 je _MonP40                        // Jump if feature is disabled

 mov ecx,[iSize]
 cmp ecx,8                         // Is it a double float value?
 je _MonP3                         // Jump if true

// 3 bytes Integer

 mov edx,[iMinRes]                 // Get minimum integer value
 mov bl,[iSavings+01]
 test bl,bl
 js _MonP21

 cmp edx,[iSavings]
 jle _MonP40                       // Jump if current value greater than minimum

_MonP21:
 mov [iSavings],edx                // Update to minimum value
 jmp _MonP30                       // Go to copy_back_value

// Double
_MonP3:
 mov edx,[qMinRes+04]              // Get minimum double float value
 mov ebx,[qSavings+04]
 test ebx,ebx
 js _MonP22

 cmp edx,ebx
 jle _MonP40                       // Jump if current value greater than minimum

_MonP22:
 movsd xmm0,[qMinRes]
 movsd [qSavings],xmm0             // Update to Minimum value

// Copying back the value to the sqlite data bank (Little2Big Endian)

_MonP30:
 mov edx,[pRes]
 mov ecx,[iSize]

 mov ebx,qSavings+7
 cmp ecx,8
 je _MonP31

 mov ebx,iSavings+2

_MonP31:
 mov al,[ebx]
 mov [edx],al
 inc edx
 dec ebx
 loop _MonP31

_MonP40:
 pop eax
 pop ebx
 pop ecx
 jmp _ExitMP

_MonP50:
 call _MonResearchR

_ExitMP:
 pop esi
 pop edi
 pop edx
 pop ecx
 movsd xmm0,[qXMM0]

 mov eax,00000001                  // Original code
 jmp _BackMP                       // Back to main code

//=========================================
// Input:  EAX = points to size, ECX = Info Index
// Output: EBX = offset
_CalcOffset:
 push edx

 xor ebx,ebx                       // Offset = 0

_CalcO0:
 inc eax                           // Adjust pointer

 mov dl,[eax]                      // Get this info size
 cmp dl,0C                         // Is it a string ?
 jle _CalcO1                       // Jump if false

 sub dl,0d                         // Adjust in case of string
 shr dl,1                          // the ",1" is forced because of CE

_CalcO1:
 movzx edx,dl                      // Convert byte to double_word
 add ebx,edx                       // Add it to offset
 loop _CalcO0                      // Continue until ECX = 0

 pop edx
 ret

//=========================================
// When setting/unsetting a research
// EDI = pInfoSize
_MonResearchR:
 pushad

 mov ebx,eax
 lea esi,[eax+09]

// Validating Format
 movzx eax,byte ptr [ebx]
 cmp eax,9
 jne _ExitMRR

 movzx eax,byte ptr [ebx+01]
 cmp eax,1
 jne _ExitMRR

 add esi,eax  //01

 movzx eax,byte ptr [ebx+02]
 add esi,eax  //03

 movzx eax,byte ptr [ebx+03]
 cmp eax,1
 jne _ExitMRR

 mov [pStatus],esi
 add esi,eax

 movzx eax,byte ptr [ebx+04]
 test eax,eax
 jz _ExitMRR

 cmp eax,4
 jge _ExitMRR

 add esi,eax

 movzx eax,byte ptr [ebx+05]       // Get size of needed value
 test eax,eax
 jz _ExitMRR

 cmp eax,4
 jge _ExitMRR

 mov [iNeedSize],eax
 mov [pNeedValue],esi
 add esi,eax

 movzx ecx,byte ptr [ebx+06]
 test ecx,ecx
 jz _ExitMRR

 cmp ecx,8
 jge _ExitMRR

 mov [iCurFeas],ecx
 mov [pCurFeas],esi
 add esi,ecx

 movzx eax,byte ptr [ebx+07]
 test eax,eax
 jz _ExitMRR

 cmp eax,8
 jge _ExitMRR

 mov [iMaxFeas],eax
 mov [pMaxFeas],esi

 mov [pResearch],ebx

 cmp dword ptr [iEnableMRR],0
 je _ExitMRR                       // Jump if feature is disabled

//Preparing the magic (Choosing the ingredients)

 mov [iFlagCR],ecx

 cmp ecx,7
 jne _MonRR00

 inc dword ptr [pMaxFeas]

// Doing the magic (Mixing the ingredients)
_MonRR00:
 cmp dword ptr [iEnableMRS],0
 je _MonRR0S                       // Jump if feature is disabled

 mov eax,[pStatus]
 movzx eax,byte ptr [eax]      // get status
 cmp eax,5
 jne _ExitMRR

_MonRR0S:
 mov eax,[iFlagCR]
 test eax,eax
 jz _ExitMRR

 xor eax,eax
 mov [iFlagCR],eax

 mov ecx,[pNeedValue]
 mov eax,[iNeedSize]

 mov byte ptr [ecx+00],03
 mov byte ptr [ecx+01],e8

 cmp eax,2
 je _MonRR01

 mov byte ptr [ecx+00],00
 mov byte ptr [ecx+01],03
 mov byte ptr [ecx+02],e8

_MonRR01:
 mov eax,[iMaxFeas]

 cmp eax,1
 je _ExitMRR

 cmp eax,7
 jne _ExitMRR

 mov ecx,[pMaxFeas]

 mov byte ptr [ecx+00],3f           // Maximum Feasability = 99%
 mov byte ptr [ecx+01],ef

 mov eax,[iCurFeas]

 cmp eax,1
 je _ExitMRR

 cmp eax,7
 jne _ExitMRR

 mov ebx,[pCurFeas]

 mov eax,[ecx]
 mov [ebx],eax                      // Current Feasability = 99%
 mov eax,[ecx+04]
 mov [ebx+04],eax                   // Current Feasability = 99%

_ExitMRR:
 popad

 ret

//=========================================
 db '=======================================&gt;'
 db 'CE6.2 Script by Recifense 112212'
//=========================================
// Variables
iEnableMR:
 dd 0
iEnableMRR:
 dd 0
iEnableMRS:
 dd 1
pPlayer:
 dd 0
pRes:
 dd 0
iSize:
 dd 0
qXMM0:
 dq 0
iMinRes:
 dd #8000000
qMinRes:
 dq (double)20000000,0
iSavings:
 dd 0
qSavings:
 dq 0
iID:
 dd 0
pResearch:
 dd 0
pStatus:
 dd 0
pNeedValue:
 dd 0
iNeedSize:
 dd 0
pCurFeas:
 dd 0
iCurFeas:
 dd 0
pMaxFeas:
 dd 0
iMaxFeas:
 dd 0
iFlagCR:
 dd 0
aobSignature0:
// db 18 00 02 01 04 07 01 01 01 01 01 07 01 01 01 07
 db 18 aa bb cc dd 07 01 01 01 01 01 07 01 01 01 07
aobSignature1:
// db 07 02 01 04 01 01 01
 db 07 aa bb cc dd 01 01

//=========================================
// Hacking Points
sqlite3.dll+00026eb5: //NHP
 jmp _MonPlayer
_BackMP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
sqlite3.dll+00026eb5: //NHP
// mov eax,00000001
 db b8 01 00 00 00

//=========================================
// Unregistering Symbols
unregistersymbol(MyCodeR)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMRS)
unregistersymbol(iEnableMRR)
unregistersymbol(pPlayer)
unregistersymbol(iSavings)
unregistersymbol(qSavings)
unregistersymbol(pResearch)

//=========================================
dealloc(MyCodeR)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable Minimum Savings =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable Fast Research =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>18</ID>
              <Description>"Enable/Disable Current Only =&gt;(1/0)"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iEnableMRS</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"[X] &lt;== SoTS 2 32bits v1.1.23976.5 GM Script 2.0"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32 bits)
 Game Version  : 1.1.23976.5
 Game Sponsor  : Paradox Jast (updates)
 Script Version: 2.0
 CE Version    : 6.2
 Release date  : 23-Nov-2012
 Author        : Recifense
 Feature(s):
 - God Mode
 - Weak Foe
 - God Mode for Colony (Planet)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(mars.exe+000b1be3,8b 8e 90 00 00 00 8b b6 94 00 00 00 33 c0 33 db) //_MS
assert(mars.exe+00130792,8b 89 94 08 00 00 85 c9 ?? ?? 39 41 38)          //_MSP
assert(mars.exe+0018a5a1,b0 01 d2 e0 08 06 8b 44 24 4c 40 45 89 44 24 4c) //_GM2
assert(mars.exe+00270800,83 ec 08 53 55 8b 6c 24 14 bb 01 00 00 00 89 5c) //_MD1
assert(mars.exe+0026dfd5,d9 46 30 d8 64 24 44 d9 ee d8 d1 df e0 f6 c4 05) //_MPI
assert(mars.exe+0026e1dc,8b 4c 24 10 dd 01 de e2 d8 d1 df e0 f6 c4 05)    //_MPP

//=========================================
alloc(MyCode,4096,mars.exe)
//=========================================
// Declaration section
label(_MonSel)
label(_BackMS)
label(_ExitMS)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_FindShip)
label(_MonShipParts)
label(_MonSP0)
label(_BackMSP)
label(_ExitMSP)
label(_ClearArmor)
label(_ClearA0)
label(_ExitCA)
label(_MonDamage1)
label(_BackMD1)
label(_ExitMD1)
label(_MonPlanetInfra)
label(_BackMPI)
label(_ExitMPI)
label(_MonPlanetPop)
label(_BackMPP)
label(_ExitMPP)
label(pUnit)
label(pCommon)
label(pSel)
label(pRes)
label(iEnableGM)
label(iEnableWF)
label(iEnableGMP)
label(iEAX)
label(iECX)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pSel)
registersymbol(pCommon)
registersymbol(iEnableGM)
registersymbol(iEnableWF)
registersymbol(iEnableGMP)

//=========================================
MyCode:
//========================================= LUP
// Activated during combat when a unit is selected
_MonSel:
 mov [pSel],esi

 mov ecx,[esi+00000174]
 mov [pCommon],ecx

_ExitMS:
 mov ecx,[esi+00000090]            // Original code
 jmp _BackMS                       // Back to main code

//========================================= LUP
// Activated during combat
_MonShipParts:
 push eax
 push ecx

 mov eax,ecx

 mov ecx,[eax+30]
 test ecx,ecx
 jz _ExitMSP

 mov ecx,[ecx+00000174]
 cmp ecx,[pCommon]
 jne _MonSP0                       // Jump if it is not a player's ship

 mov ecx,[eax+00000894]
 test ecx,ecx
 jz _ExitMSP

 mov ecx,[eax+00000898]
 test ecx,ecx
 jz _ExitMSP

 cmp dword ptr [iEnableGM],0
 je _ExitMSP                         // Jump if feature is disabled

// Constitution

 push esi
 push edi

 mov esi,[eax+00000898]
 mov edi,[eax+00000894]

 push esi
 push edi

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

 lea edi,[edi+00dc]

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

// Armor
 push esi

 lea esi,[eax+000005f0]            // Right Side **5e8
 call _ClearArmor
 lea esi,[esi+00000028]            // Top Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Left Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Botton Side
 call _ClearArmor

 pop esi
 jmp _ExitMSP
 //------
_MonSP0:
 cmp dword ptr [iEnableWF],0
 je _ExitMSP                       // Jump if feature is disabled

 mov ecx,[eax+00000894]            // Get pointer to current values **888
 test ecx,ecx
 jz _ExitMSP                       // Jump if it is null

 mov eax,(float)10.0
 cmp eax,[ecx]
 jge _ExitMSP

 mov [rcx],eax

_ExitMSP:
 pop ecx
 pop eax

 mov ecx,[ecx+00000894]            // Original code **888
 jmp _BackMSP                      // Back to main code

//========================================= LUP
// Auxiliary Routine
_ClearArmor:
 push edi
 push ebx

 mov ecx,[esi+04]
 test ecx,ecx
 jz _ExitCA

 mov edi,[esi+20]
 test edi,edi
 jz _ExitCA

 xor ebx,ebx
 mov [esi+18],ebx

_ClearA0:
 mov dword ptr [edi],ebx
 lea edi,[edi+00000004]
 loop _ClearA0

_ExitCA:
 pop ebx
 pop edi
 ret

//========================================= LUP
// Activated during combat (ARMOR)
// EDX = Armor Base
_GodMode2:
 mov al,01
 shl al,cl
 or [esi],al

 cmp dword ptr [iEnableGM],0
 je _ExitGM2                        // Jump if feature is disabled

 call _FindShip
 jne _ExitGM2

 mov eax,[eax+04]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+00000174]
 cmp eax,[pCommon]
 jne _ExitGM2

 xor al,al
 mov [esi],al

_ExitGM2:
 jmp _BackGM2                        // Back to main code

//========================================= LUP
// Find Part Owner
// RDX = Starting Point
// return = E =&gt; found
_FindShip:
 push ecx
 push edx
 push edi

 pushf
 std

 mov ecx,00000700
 mov eax,mars.exe+003cccd4 // LUP
 mov edi,edx
 repne scasd

 popf

 lea edi,[edi+04]

 mov edx,[edi]
 cmp eax,edx
 mov eax,edi

 pop rdi
 pop edx
 pop rcx
 ret

//========================================= LUP
// Activated during combat (DIRECT HIT)
// ESI = pPart and EDI = pShip
_MonDamage1:
 mov [iEAX],eax

 cmp dword ptr [iEnableGM],0
 je _ExitMD1                         // Jump if feature is disabled

 mov eax,[esi+30]
 cmp eax,edi
 jne _ExitMD1

 mov eax,[edi+00000174]
 cmp eax,[pCommon]
 jne _ExitMD1

 mov eax,[iEAX]
 ret 0014                           // Bypass routine
//=======
_ExitMD1:
 mov eax,[iEAX]

 sub esp,08                         // Original code
 push ebx                           // Original code
 push ebp                           // Original code
 jmp _BackMD1                       // Back to main code

//========================================= LUP
// Activated during combat
_MonPlanetInfra:
 mov eax,esp

 push ebx
 push ecx
 push edi
 push esi

 mov ebx,[esi-08]                  // Get pColony
 test ebx,ebx
 jz _ExitMPI                       // Jump if null pointer

 mov ecx,[ebx+00000c54]
 cmp ecx,[pCommon]
 jne _ExitMPI                      // Jump if it is not a player's colony

 mov esi,[ebx+00000c60]            // Max Values
 mov edi,[ebx+00000c5c]            // Cur Values

 cmp dword ptr [iEnableGMP],0
 je _ExitMPI                       // Jump if feature is disabled

 mov ecx,(float)1.0
 mov [esi+30],ecx
 mov [edi+30],ecx
 mov [edi+78],ecx

 xor ecx,ecx
 mov [eax+44],ecx

_ExitMPI:
 pop esi
 pop edi
 pop ecx
 pop ebx

 fld dword ptr [esi+30]            // Original code (rds %Infra)
 fsub dword ptr [esp+44]           // Original code
 jmp _BackMPI                      // Back to main code

//========================================= LUP
// Activated during combat
_MonPlanetPop:
 cmp dword ptr [iEnableGMP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov eax,esp

 push ebx
 push ecx
 push edi
 push esi

 mov ebx,[ebx-08]                  // Get pColony
 test ebx,ebx
 jz _ExitMPP                       // Jump if null pointer

 mov ecx,[ebx+00000c54]
 cmp ecx,[pCommon]
 jne _ExitMPP                      // Jump if it is not a player's colony

 mov esi,[ebx+00000c60]            // Max Values
 mov edi,[ebx+00000c5c]            // Cur Values

 mov ecx,[esi+28]
 mov eax,[esi+2c]
 mov [edi+28],ecx
 mov [edi+2c],eax
 mov [edi+70],ecx
 mov [edi+74],eax

 fst st(1)                         // value2decrease = 0 (0;v2d) st(1)=st(0)

_ExitMPP:
 pop esi
 pop edi
 pop ecx
 pop ebx

 mov ecx,[esp+10]                  // Original code
 fld qword ptr [ecx]               // Original code
 jmp _BackMPP                      // Back to main code (template)

//=========================================
 db '============================&gt;'
 db 'CE6.2 Script by Recifense 112312'
//=========================================
// Variables
iEnableGM:
 dd 0
iEnableWF:
 dd 0
iEnableGMP:
 dd 0
pUnit:
 dd 0
pCommon:
 dd MyCode
pSel:
 dd 0
pRes:
 dd 0
iEAX:
 dd 0
iECX:
 dd 0

//=========================================
// Hacking Points
//mars.exe+000dce73:  //nhp
//mars.exe+000def23:  //nhp
//mars.exe+000e3713:
mars.exe+000b1be3: //LUP
 jmp _MonSel
 nop
_BackMS:

//mars.exe+00151682:
//mars.exe+00155ad2:
//mars.exe+0015bc92:
mars.exe+00130792:
 jmp _MonShipParts
 nop
_BackMSP:

//mars.exe+001a6c01:
//mars.exe+001ab4d1:
//mars.exe+001b5251:
mars.exe+0018a5a1:
 jmp _GodMode2
 nop
_BackGM2:

//mars.exe+0028ce50:
//mars.exe+00294390:
//mars.exe+002a1570:
mars.exe+00270800:
 jmp _MonDamage1
_BackMD1:

mars.exe+0026dfd5:
 jmp _MonPlanetInfra
 nop
 nop
_BackMPI:

mars.exe+0026e1dc:
 jmp _MonPlanetPop
 nop
_BackMPP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
//mars.exe+000dce73:  //nhp
//mars.exe+000def23:  //nhp
//mars.exe+000e3713:
mars.exe+000b1be3: //LUP
// mov ecx,[esi+00000090]
 db 8b 8e 90 00 00 00

//mars.exe+00151682:
//mars.exe+00155ad2:
//mars.exe+0015bc92:
mars.exe+00130792:
// mov ecx,[ecx+00000894]
 db 8b 89 94 08 00 00

//mars.exe+001a6c01:
//mars.exe+001ab4d1:
//mars.exe+001b5251:
mars.exe+0018a5a1:
// mov al,01
// shl al,cl
// or [esi],al
 db b0 01 d2 e0 08 06

//mars.exe+0028ce50:
//mars.exe+00294390:
//mars.exe+002a1570:
mars.exe+00270800:
// sub esp,08
// push ebx
// push ebp
 db 83 ec 08 53 55

mars.exe+0026dfd5:
// fld dword ptr [esi+30]
// fsub dword ptr [esp+44]
 db d9 46 30 d8 64 24 44

mars.exe+0026e1dc:
// mov ecx,[esp+10]
// fld qword ptr [ecx]
 db 8b 4c 24 10 dd 01

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableWF)
unregistersymbol(iEnableGMP)
unregistersymbol(pSel)
unregistersymbol(pCommon)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Enable/Disable God Mode =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Enable/Disable Weak Foe =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableWF</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Enable/Disable God Mode for Colony =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMP</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pBadge</Name>
      <Address>030C0244</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32 bits)
 Game Version  : 1.1.23976.5
 Game Sponsor  : Paradox Jast (updates)
 Script Version: 2.0
 CE Version    : 6.2
 Release date  : 23-Nov-2012
 Author        : Recifense
 Feature(s):
 - Minimum Savings [1]
 - Fast Research [2]
   - Current Only [2a]
 - God Mode [3]
 - Weak Foe [4]
 - God Mode for Colonies [5] **
===========================================
[1] Minimum savings = 2000000
[2] Research/Feasability in 1-2 turns;
[2a] The cheat will applied for the current research only, else the cheat will affect all available researches (those that can be currently choose); 
[3] For player's ship and stations;
[4] Enemy will be easier to kill;
[5] The colony's infrastructure = 100% and the population will not decrease;
** There must be at least a station or a fleet in the system.
===========================================
[NOTE] Hot to use fast research:
- Select the item to be researched;
- ENABLE the cheat (CTRL+home);
- Click on RESEARCH or FEASABILITY;
- DISABLE the cheat (CTRL+End);
- Adjust the savings for research in 1 turn (you don't need to do this every time, just once in a while, as your empire is growing);
===========================================
HOTKEYS:
CTRL+Home = Turn Fast Reserach ON  (value = 1)
CTRL+End  = Turn Fast Reserach OFF (value = 0)
[NOTE] You can create HOTKEYS for the other cheats.
===========================================
Cheers!
</Comments>
</CheatTable>
