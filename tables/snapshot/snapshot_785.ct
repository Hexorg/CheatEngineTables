<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem6,2048) //2kb should be enough
label(returnhere6)
label(originalcode6)
label(exit6)
alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
alloc(y_addr,4)
registersymbol(y_addr)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
mov ecx,[esp+0C]
push edx
lea edx [esi+10]
cmp [y_addr],edx
je originalcode6
mov [esi+10],ecx
originalcode6:
pop edx
exit6:
jmp returnhere6

"snapshot.exe"+B80A0:
jmp newmem6
nop
nop
returnhere6:



newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
lea ecx [edi+04]
cmp [y_addr],ecx
je originalcode2
mov [edi+04],edx
originalcode2:
pop ecx
fld dword ptr [edi+08]

exit2:
jmp returnhere2

"snapshot.exe"+BA809:
jmp newmem2
nop
returnhere2:

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
lea ecx,[esi+10]
mov [y_addr],ecx
originalcode:
mov [esi+0C],eax
mov ecx,[edi+08]

exit:
jmp returnhere

"snapshot.exe"+BAA64:
jmp newmem
nop
returnhere:

"snapshot.exe"+B8095:
db 90 90 90
 
[DISABLE]
"snapshot.exe"+B8095:
db 89 46 0c

//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
"snapshot.exe"+B80A0:
mov ecx,[esp+0C]
mov [esi+10],ecx
//Alt: db 8B 4C 24 0C 89 4E 10
dealloc(newmem2)
"snapshot.exe"+BA809:
mov [edi+04],edx
fld dword ptr [edi+08]
//Alt: db 89 57 04 D9 47 08
dealloc(newmem)
"snapshot.exe"+BAA64:
mov [esi+0C],eax
mov ecx,[edi+08]
//Alt: db 89 46 0C 8B 4F 08
dealloc(y_addr)
unregistersymbol(y_addr)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>81</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"grabbed x_pos"</Description>
      <Color>80000008</Color>
      <VariableType>Float</VariableType>
      <Address>y_addr</Address>
      <Offsets>
        <Offset>FFFFFFFC</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Decrease Value</Action>
          <Keys>
            <Key>65</Key>
          </Keys>
          <Value>.4</Value>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Increase Value</Action>
          <Keys>
            <Key>68</Key>
          </Keys>
          <Value>.4</Value>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"grabbed y_pos"</Description>
      <Color>80000008</Color>
      <VariableType>Float</VariableType>
      <Address>y_addr</Address>
      <Offsets>
        <Offset>0</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Decrease Value</Action>
          <Keys>
            <Key>87</Key>
          </Keys>
          <Value>.4</Value>
          <ID>0</ID>
        </Hotkey>
        <Hotkey>
          <Action>Increase Value</Action>
          <Keys>
            <Key>83</Key>
          </Keys>
          <Value>.4</Value>
          <ID>1</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
