<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>95</ID>
      <Description>"[X] &lt;== StarDrive 2 v1.0h Script v 1.0 (ACTIVATE ME FIRST ONCE. As soon as a  game starts)"</Description>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : StarDrive 2
 Game Version  : 1.0b
 Game Sponsor  : 3DM
 Process Name  : SD2.exe
 Relevant Info : Mono Engine/64bits/TBS
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 05-May-2015
 Author        : Recifense
 History:
 05-May-15: First Release
 Features:
 - Force MONO to load all cheatable codes
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(JOGO,"mono.dll")
define(ctMAXI,#128)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
alloc(MyThread,4096,JOGO)
alloc(ModuList,4096,JOGO)

//=========================================
// Declaration section
label(_IniVariables)
label(_IniVL00)
label(_FindModules)
label(_LoadMethods)
label(_FindAssembly)
label(_ExitFAY)
label(_AddToList)
label(_ExitATL)
label(_ChkModule)
label(_ExitCME)
label(_LoadAssembly)
label(_ExitLAY)
label(pDomain)
label(pModu01)
label(pImag01)
label(pMeth01)
label(pMeth02)
label(pMeth03)
label(pMeth04)
label(pMeth05)
label(pMeth06)
label(pMeth07)
label(pMeth08)
label(pMeth09)
label(pMeth10)
label(pMeth11)
label(pMeth12)
label(pMeth13)
label(pMeth14)
label(iDone)
label(iIndex)
label(aModu01)
label(aMeth01)
label(aMeth02)
label(aMeth03)
label(aMeth04)
label(aMeth05)
label(aMeth06)
label(aMeth07)
label(aMeth08)
label(aMeth09)
label(aMeth10)
label(aMeth11)
label(aMeth12)
label(aMeth13)
label(aMeth14)
label(iCount)
label(pMethName)

//=========================================
// Registering Symbols
registersymbol(MyThread)
registersymbol(ModuList)
registersymbol(pDomain)
registersymbol(pModu01)
registersymbol(pImag01)
registersymbol(pMeth01)
registersymbol(pMethName)
registersymbol(iDone)
registersymbol(iIndex)
registersymbol(iCount)

//=========================================
MyThread:
//=========================================
 call _IniVariables

 mov dword ptr [iDone],1

 call mono.mono_get_root_domain
 mov [pDomain],rax

 mov dword ptr [iDone],2

 mov rcx,rax
 sub esp,20
 call mono.mono_thread_attach
 add esp,20

 mov dword ptr [iDone],3

 call _FindModules
 call _LoadMethods

 mov dword ptr [iDone],4

 call mono.mono_thread_current
 mov rcx,rax
 sub esp,20
 call mono.mono_thread_detach
 add esp,20

 mov dword ptr [iDone],5

 ret

//=========================================
_FindModules:
 xor rdx,rdx
 mov rcx,_FindAssembly
 sub esp,20
 call mono.mono_assembly_foreach
 add esp,20
 ret

//=========================================
// Find out to what Module a Method is Attached

_FindAssembly:
 push rbp
 mov rbp,rsp
 push rax
 push rbx
 push rcx
 push rdx

 test rcx,rcx
 jz _ExitFAY

 mov rdx,rcx

 mov rcx,[rdx+10]
 test rcx,rcx
 jz _ExitFAY

 mov rbx,[rcx]

 call _AddToList
 call _ChkModule

_ExitFAY:
 pop rdx
 pop rcx
 pop rbx
 pop rax
 mov rsp,rbp
 pop rbp
 ret

//=========================================
_AddToList:
 push rdi
 push rsi

 mov rdi,ModuList

 mov rax,[iIndex]
 cmp rax,ctMAXI
 jns _ExitATL

 lea rsi,[rax*4+00]
 lea rsi,[rsi*4+00]

 mov [rdi+rsi+00],rdx
 mov [rdi+rsi+08],rbx

 lea rax,[rax+00000001]

 mov [iIndex],rax

_ExitATL:
 pop rsi
 pop rdi
 ret

//=========================================
_ChkModule:
 push rax
 push rbx
 push rcx
 push rdi
 push rsi
 push r15

 mov rsi,rcx
 mov rdi,aModu01
 mov rcx,#17

 push rsi
 repe cmpsb
 pop rsi

 test rcx,rcx
 jnz _ExitCME

 mov rbx,pModu01
 mov [rbx],rdx

 mov rcx,rdx
 call mono.mono_assembly_get_image

 mov rbx,pImag01
 mov [rbx],rax

_ExitCME:
 pop r15
 pop rsi
 pop rdi
 pop rcx
 pop rbx
 pop rax
 ret

//=========================================
_LoadMethods:
 mov rax,[pImag01]
 push rax
 mov rax,aMeth01
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth01],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth02
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth02],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth03
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth03],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth04
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth04],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth05
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth05],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth06
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth06],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth07
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth07],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth08
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth08],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth09
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth09],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth10
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth10],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth11
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth11],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth12
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth12],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth13
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth13],rax

 mov rax,[pImag01]
 push rax
 mov rax,aMeth14
 push rax
 call _LoadAssembly
 add rsp,10
 mov [pMeth14],rax

 ret

//=========================================
_LoadAssembly:
 push rbp
 mov rbp,rsp

 mov rax,[rbp+18] //pI
 test rax,rax
 jz _ExitLAY

 mov rcx,[rbp+10] //paM
 test rcx,rcx
 jz _ExitLAY

 xor rdx,rdx

 sub rsp,20
 call mono.mono_method_desc_new
 add rsp,20

 test rax,rax
 jz _ExitLAY

 mov [pMethName],rax

 mov rcx,rax
 mov rdx,[rbp+18]

 sub rsp,40
 call mono.mono_method_desc_search_in_image
 add rsp,40

 test rax,rax
 jz _ExitLAY

 mov rcx,rax

 sub rsp,20
 call mono.mono_compile_method
 add rsp,20

 mov rcx,[pMethName]

 push rax
 sub rsp,20
 call mono.mono_method_desc_free
 add rsp,20
 pop rax

 inc dword ptr [iCount]

_ExitLAY:
 mov rsp,rbp
 pop rbp
 ret

//=========================================
_IniVariables:
 push rax
 push rbx
 push rcx

 xor rax,rax
 mov rcx,#24
 mov rbx,pDomain

_IniVL00:
 mov [rbx+rcx*8],rax
 loop _IniVL00

 pop rcx
 pop rbx
 pop rax
 ret

//=========================================
 db '============================================&gt;'
 db 'CE6.4 Script by Recifense 050515'
//=========================================
// Variables
pDomain:
 dq 0
pModu01:
 dq 0
pImag01:
 dq 0
pMeth01:
 dq 0
pMeth02:
 dq 0
pMeth03:
 dq 0
pMeth04:
 dq 0
pMeth05:
 dq 0
pMeth06:
 dq 0
pMeth07:
 dq 0
pMeth08:
 dq 0
pMeth09:
 dq 0
pMeth10:
 dq 0
pMeth11:
 dq 0
pMeth12:
 dq 0
pMeth13:
 dq 0
pMeth14:
 dq 0
iIndex:
 dq 0
iDone:
 dq 0
iCount:
 dq 0
pMethName:
 dq 0
// #22
 dq 0,0,0,0
 dq 0,0

//=========================================
// Modules' Name List
aModu01:
 db 'Assembly-CSharp',0

//=========================================
// Methods' Name List
// AC
aMeth01:
 db 'LiveShipData:TakeDamage',0
aMeth02:
 db 'demoUiCombatSel:DoSingleShip',0
aMeth03:
 db 'LiveShipData:DoWounds',0
aMeth04:
 db 'LiveShipData:Die',0
aMeth05:
 db 'TileManager:DisplayMoveRange',0
aMeth06:
 db 'Combatant:ReceiveTargetedAttack',0
aMeth07:
 db 'Combatant:TakeProjectileDamage',0
aMeth08:
 db 'Combatant:TakeMeleeDamage',0
aMeth09:
 db 'Combatant:TakeStatusDamage',0
aMeth10:
 db 'StrategicGUI:Update',0
aMeth11:
 db 'Empire:EstimateResearchPercent',0
aMeth12:
 db 'StrategicGUI:DrawPlanetData',0
aMeth13:
 db 'TooltipOverlay:DoFleetSelectionGUI',0
aMeth14:
 db 'Fleet:Update',0

//=========================================
// Threads
createthread(MyThread)

//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
// Unregistering Symbols
unregistersymbol(MyThread)
unregistersymbol(ModuList)
unregistersymbol(pDomain)
unregistersymbol(pModu01)
unregistersymbol(pImag01)
unregistersymbol(pMeth01)
unregistersymbol(pMethName)
unregistersymbol(iDone)
unregistersymbol(iIndex)
unregistersymbol(iCount)

//=========================================
dealloc(MyThread)
dealloc(ModuList)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>112</ID>
      <Description>"[X] &lt;== StarDrive 2 v1.0h STEAM Script v 1.0 AOB"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : StarDrive 2
 Game Version  : 1.0h
 Game Sponsor  : Megatek (STEAM)
 Process Name  : SD2.exe
 Relevant Info : Mono Engine/64bits/TBS
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 09-May-2015
 Author        : Recifense
 History:
 09-May-15: First Release
 Features:
 - Minimum Resource
 - Research/Project in 1 Turn
 - Quick Population Growth (on sel)
 - No Pollution (on sel)
 - Fleet Fuel
 - Fleet Long Range
 - Fleet Full Ordnance (on sel)
 - God Mode:
   - Ships (on sel)
   - Ground Units
 - Combatant Unlimited AP (on sel)
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"SD2.exe")

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMMON,#64000)  // Minimum Money
define(ctFTRE,#500)    // Minimum Range/Turn for Fleet
define(ctMRMS,#640)    // Minimum Range/Speed

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScan(MOPE,48 8b 40 58 48 8b 40 38 48 8b c8 83 39 00 48 63 40 18 85 c0 ??)
AOBScan(MOPR,f3 0f 10 80 18 02 00 00 f3 0f 5a c0 f2 0f 5a c0 48 8d 65 e8 41)
AOBScan(MOSC,48 8B 87 A0 07 00 00 48 63 80 FC 01 00 00 89 85 ?? ?? FF FF F3 0F 10 85)
AOBScan(MOSF,0F B6 86 88 01 00 00 40 88 85 ?? ?? FF FF 48 8B 7E 70 0F B6 86 5a 01 00 00)
AOBScan(MOSS,48 8B 46 78 48 89 85 C0 F4 FF FF 48 8B CE 48 83 EC 20 83 3E 00)
AOBScan(MOSB,F3 0F 10 80 E8 00 00 00 F3 0F 5A C0 F2 48 0F 2C C0 89 85 DC F2 FF FF)
AOBScan(MOSD,55 48 8b ec 56 57 41 57 48 83 ec 48 4c 8b f9 48 8b fa f3 0f 11 55 b8 49 8b f1)
AOBScan(MOCU,48 63 86 BC 00 00 00 89 87 A4 00 00 00 48 8B CD 48 83 C1 A0 48 8B D6)
AOBScan(MOCW,49 63 87 AC 00 00 00 48 63 4D D4 2B C1 41 89 87 AC 00 00 00 85 c0)
AOBScan(MCW1,48 63 87 AC 00 00 00 41 2B C7 89 87 AC 00 00 00 85 C0 0f 8f ??)
AOBScan(MCW2,49 63 87 AC 00 00 00 48 63 4D 94 2B C1 41 89 87 AC 00 00 00 b9)
AOBScan(MCW3,48 63 87 AC 00 00 00 48 63 4D EC 2b c1 89 87 AC 00 00 00 b9 ??)
AOBScan(MOFF,F3 0F 10 86 68 02 00 00 F3 0F 5A C0 F3 0F 10 8D ?? ?? FF FF F3 0F 5A C9)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonPlayerEmpire)
label(_BackMPE)
label(_ExitMPE)
label(_MonPlayerResources)
label(_MonPR00)
label(_MonPR01)
label(_MonPR02)
label(_MonPR03)
label(_BackMPR)
label(_ExitMPR)
label(_MonSelColony)
label(_MonSC00)
label(_BackMSC)
label(_ExitMSC)
label(_MonSelFleet)
label(_MonSF00)
label(_MonSF01)
label(_MonSF02)
label(_BackMSF)
label(_ExitMSF)
label(_MonSelShip)
label(_BackMSS)
label(_ExitMSS)
label(_MonShipBattle)
label(_BackMSB)
label(_ExitMSB)
label(_MonShipDamage)
label(_BackMSD)
label(_ExitMSD)
label(_MonCombatantUnit)
label(_MonCU00)
label(_BackMCU)
label(_ExitMCU)
label(_MonCombatantWound)
label(_BackMCW)
label(_ExitMCW)
label(_MonCombatantWound1)
label(_BackCW1)
label(_ExitCW1)
label(_MonCombatantWound2)
label(_BackCW2)
label(_ExitCW2)
label(_MonCombatantWound3)
label(_BackCW3)
label(_ExitCW3)
label(_MonFleetFuel)
label(_BackMFF)
label(_ExitMFF)

label(iEnableMPR)
label(iEnableMRP)
label(iEnableMPG)
label(iEnableMCP)
label(iEnableMFF)
label(iEnableMFD)
label(iEnableMFR)
label(iEnableMFO)
label(iEnableMCA)
label(iEnableMCW)

label(fResearch)

label(pEmpire)
label(pGame)
label(pCommon)
label(pEmpireData)
label(pPlanet)
label(pFleet)
label(pShip)
label(pShipB)
label(pUnit)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPR)
registersymbol(iEnableMRP)
registersymbol(iEnableMPG)
registersymbol(iEnableMCP)
registersymbol(iEnableMFF)
registersymbol(iEnableMFD)
registersymbol(iEnableMFR)
registersymbol(iEnableMFO)
registersymbol(iEnableMCA)
registersymbol(iEnableMCW)

registersymbol(fResearch)

registersymbol(pEmpire)
registersymbol(pGame)
registersymbol(pCommon)
registersymbol(pEmpireData)
registersymbol(pPlanet)
registersymbol(pFleet)
registersymbol(pShip)
registersymbol(pShipB)
registersymbol(pUnit)

registersymbol(MOPE)
registersymbol(MOPR)
registersymbol(MOSC)
registersymbol(MOSF)
registersymbol(MOSS)
registersymbol(MOSB)
registersymbol(MOSD)
registersymbol(MOCU)
registersymbol(MOCW)
registersymbol(MCW1)
registersymbol(MCW2)
registersymbol(MCW3)
registersymbol(MOFF)

registersymbol(_MonPlayerEmpire)
registersymbol(_MonPlayerResources)
registersymbol(_MonSelColony)
registersymbol(_MonSelFleet)
registersymbol(_MonSelShip)
registersymbol(_MonShipBattle)
registersymbol(_MonShipDamage)
registersymbol(_MonCombatantUnit)
registersymbol(_MonCombatantWound)
registersymbol(_MonCombatantWound1)
registersymbol(_MonCombatantWound2)
registersymbol(_MonCombatantWound3)
registersymbol(_MonFleetFuel)

registersymbol(_BackMPE)
registersymbol(_BackMPR)
registersymbol(_BackMSC)
registersymbol(_BackMSF)
registersymbol(_BackMSS)
registersymbol(_BackMSB)
registersymbol(_BackMSD)
registersymbol(_BackMCU)
registersymbol(_BackMCW)
registersymbol(_BackCW1)
registersymbol(_BackCW2)
registersymbol(_BackCW3)
registersymbol(_BackMFF)

//=========================================
MyCode:
//=========================================
// At the Strategic Screen
_MonPlayerEmpire:
 push r15

 mov r15,pGame
 mov [r15],rax

 mov rax,[rax+58]                  // Original code (get pEmpire)
 mov r15,pEmpire
 mov [r15],rax
 mov rcx,[rax+00000110]
 mov r15,pCommon
 mov [r15],rcx

 movss xmm0,[rax+00000200]
 cvtss2si ecx,xmm0
 imul ecx,dword ptr [rax+00000208]
// test ecx,ecx
// js _ExitMPE

 cvtsi2ss xmm0,ecx

 mov r15,fResearch
 movss [r15],xmm0

_ExitMPE:
 pop r15

 mov rax,[rax+38]                  // Original code (get pColonyList)
 mov rcx,rax                       // Original code
 cmp dword ptr [rcx],00            // Original code

 mov rcx,_BackMPE
 jmp rcx
// jmp _BackMPE                      // Back to main code

//=========================================
// At the Strategic Screen
_MonPlayerResources:
 push rcx

 mov r15,pCommon
 mov rcx,[r15]
 cmp rcx,[rax+0000021c]
 jne _ExitMPR

 mov r15,pEmpireData
 mov [r15],rax

// Money
 mov r15,iEnableMPR
 cmp dword ptr [r15],0
 je _MonPR00                       // Jump if feature is disabled

 mov ecx,ctMMON
 cmp ecx,[rax+00000234]
 js _MonPR00

 mov [rax+00000234],ecx

// Range/Speed
_MonPR00:
 mov r15,iEnableMFR
 cmp dword ptr [r15],0
 je _MonPR02                       // Jump if feature is disabled

 mov ecx,ctMRMS
 cmp ecx,[rax+000001ec]
 js _MonPR01

 mov [rax+000001ec],ecx

_MonPR01:
 cmp ecx,[rax+000001f0]
 js _MonPR02

 mov [rax+000001f0],ecx

// Research
_MonPR02:
 mov r15,iEnableMRP
 cmp dword ptr [r15],0
 je _ExitMPR                       // Jump if feature is disabled

 mov rcx,[rax+00000138]
 test rcx,rcx
 jz _MonPR03

 mov ecx,[rcx+000000ac]
 test ecx,ecx
 jz _MonPR03

 mov r15,fResearch
 movss xmm0,[r15]

 xor ecx,ecx
 mov [r15],ecx

 mov r15,pCommon
 movss [R15+08],xmm0

 movzx rcx,word ptr [rax+0000020c]

 addss xmm0,[rax+rcx*4+000001d4]
 movss [rax+rcx*4+000001d4],xmm0

// Special Project
_MonPR03:
 mov r15,[rax+00000140]
 test r15,r15
 jz _ExitMPR

 mov ecx,[r15+18]
 test ecx,ecx
 jz _ExitMPR

 mov r15,[r15+10]
 test r15,r15
 jz _ExitMPR

 mov r15,[r15+20]
 test r15,r15
 jz _ExitMPR

 mov ecx,[r15+40]
 dec ecx
 cvtsi2ss xmm0,ecx

 mov rcx,pCommon
 movss [rcx+08],xmm0
 mov ecx,[rcx+08]

 cmp ecx,[r15+44]
 js _ExitMPR

 movss [r15+44],xmm0

_ExitMPR:
 pop rcx

 movss xmm0,[rax+00000218]         // Original code (get fEstResPct)
 cvtss2sd xmm0,xmm0                // Original code

 mov r15,_BackMPR
 jmp r15
// jmp _BackMPR                      // Back to main code

//========================================= 1.0h
// At the Detail Screen
// RCX = Safe_2B_Used
_MonSelColony:
 push r15

 mov rax,[rdi+000007A0]            // Original code

 mov r15,pEmpire
 mov rcx,[r15]
 test rcx,rcx
 jz _ExitMSC

 cmp rcx,[rax+78]
 jne _ExitMSC

 mov r15,pPlanet
 mov [r15],rax

// Pop Growth
 mov r15,iEnableMPG
 cmp dword ptr [r15],0
 je _MonSC00                       // Jump if feature is disabled

 mov ecx,[rax+00000328]
 test ecx,ecx
 jz _MonSC00

 mov ecx,(float)29.50
 cmp ecx,[rax+00000328]
 js _MonSC00

 mov [rax+00000328],ecx

// Pollution
_MonSC00:
 mov r15,iEnableMCP
 cmp dword ptr [r15],0
 je _ExitMSC                       // Jump if feature is disabled

 xor ecx,ecx

 mov [rax+000002ac],ecx
 mov [rax+000003a8],ecx

_ExitMSC:
 pop r15

 movsxd  rax,dword ptr [rax+000001FC] // Original code (get iApproval)

 mov rcx,_BackMSC
 jmp rcx
// jmp _BackMSC                      // Back to main code

//=========================================
// When a fleet is selected
// R11 is safe_2B_Used
_MonSelFleet:
 push r15

 xor rax,rax

 test r14,r14
 jz _ExitMSF

 mov rax,[r14+28]
 mov r15,pEmpire
 cmp rax,[r15]
 jne _ExitMSF

 mov r15,pFleet
 mov [r15],r14

// Fleet Fuel
 mov r15,iEnableMFF
 cmp dword ptr [r15],0
 je _MonSF00                       // Jump if feature is disabled

 mov eax,[r14+0000026c]
 mov [r14+00000268],eax

 mov eax,[rsi+000000f4]
 mov [rsi+000000f0],eax

 mov byte ptr [r14+00000249],0

// Damage
_MonSF00:
 mov r15,iEnableMFD
 cmp dword ptr [r15],0
 je _MonSF01                       // Jump if feature is disabled

 xor eax,eax
 mov [rsi+00000150],eax
 mov [r14+00000178],eax

// Ordnance
_MonSF01:
 mov r15,iEnableMFO
 cmp dword ptr [r15],0
 je _MonSF02                       // Jump if feature is disabled

 mov eax,[r14+0000016c]
 mov [r14+00000168],eax

 mov eax,[rsi+000000f8]
 mov [rsi+000000fc],eax

// Range
_MonSF02:
 mov r15,iEnableMFR
 cmp dword ptr [r15],0
 je _ExitMSF                       // Jump if feature is disabled

 mov eax,ctFTRE
 cmp eax,[r14+0000018c]
 js _ExitMSF

 mov [r14+0000018c],eax

_ExitMSF:
 pop r15

 movzx ecx,byte ptr [rsi+00000188] // Original code (get bIsTroopTransport)
 mov [rbp-00000B4D],al             // Original code

 mov rdi,_BackMSF
 jmp rdi
// jmp _BackMSF                      // Back to main code

//=========================================
// When a fleet is selected
// R11 is safe_2B_Used
_MonSelShip:
 push r15

 mov r15,pShip
 mov [r15],rsi

_ExitMSS:
 pop r15

 mov rax,[rsi+78]                  // Original code (get pVanityName)
 mov [rbp-00000B40],rax            // Original code
 mov rcx,rsi                       // Original code

 mov r11,_BackMSS
 jmp r11
// jmp _BackMSS                      // Back to main code

//========================================= 1.0h
// When a ship is sel in Battle (Deployment)
// R11 is safe_2B_Used
_MonShipBattle:
 push r15

 mov r15,pShipB
 mov [r15],rax

 mov ecx,[rax+000000c8]
 test ecx,ecx
 jnz _ExitMSB

 mov r15,iEnableMFD
 cmp dword ptr [r15],0
 je _ExitMSB                       // Jump if feature is disabled

 mov r15,[rax+48]
 test r15,r15
 jz _ExitMSB

 mov ecx,55555555
 mov [r15+08],ecx

_ExitMSB:
 pop r15

 movss xmm0,[rax+000000E8]         // Original code (get fRange_Preferred)
 cvtss2sd xmm0,xmm0                // Original code

 mov r11,_BackMSB
 jmp r11
// jmp _BackMSB                      // Back to main code

//=========================================
// When a ship is sel in Battle (Deployment)
// R11 is safe_2B_Used
_MonShipDamage:
 push r15

 mov r15,iEnableMFD
 cmp dword ptr [r15],0
 je _ExitMSD                       // Jump if feature is disabled

 mov r15d,55555555
 cmp r15d,[rcx+08]
 jne _ExitMSD

 pop r15
 ret
//====
_ExitMSD:
 pop r15

 push rbp                         // Original code
 mov rbp,rsp                      // Original code
 push rsi                         // Original code
 push rdi                         // Original code
 push r15                         // Original code
 sub rsp,48                       // Original code
 mov r15,rcx                      // Original code (pLiveShipData)

 mov r11,_BackMSD
 jmp r11
// jmp _BackMSD                      // Back to main code

//=========================================
// When a Combatant is selected
// R11 and RCX are safe_2B_Used
_MonCombatantUnit:
 mov r11,pUnit
 mov [r11],rsi

 mov ecx,[rsi+00000120]
 test ecx,ecx
 jz _ExitMCU

 mov r11,iEnableMCA
 cmp dword ptr [r11],0
 je _ExitMCU                       // Jump if feature is disabled

 mov r11,[rsi+58]
 test r11,r11
 jz _MonCU00

 mov ecx,[r11+54]
 mov [rsi+000000bc],ecx

_MonCU00:
 mov r11,iEnableMCW
 cmp dword ptr [r11],0
 je _ExitMCU                       // Jump if feature is disabled

 mov ecx,[rsi+000000b0]
 mov [rsi+000000ac],ecx

_ExitMCU:
 movsxd rax,dword ptr [rsi+000000BC] // Original code
 mov [rdi+000000A4],eax           // Original code

 mov r11,_BackMCU
 jmp r11
// jmp _BackMCU                      // Back to main code

//=========================================
// When a Combatant is target by a missile
// R11 is safe_2B_Used
_MonCombatantWound:
 mov rcx,iEnableMCW
 cmp dword ptr [rcx],0
 je _ExitMCW                       // Jump if feature is disabled

 mov ecx,[r15+00000120]
 test ecx,ecx
 jz _ExitMCW

 mov rcx,[r15+58]
 test rcx,rcx
 jz _ExitMCW

 mov eax,[rcx+58]
 mov [r15+000000ac],eax

 xor rax,rax
 mov [rbp-2c],eax

_ExitMCW:
 movsxd rax,dword ptr [r15+000000AC] // Original code
 movsxd  rcx,dword ptr [rbp-2C]   // Original code
 sub eax,ecx                      // Original code

 mov r11,_BackMCW
 jmp r11
// jmp _BackMCW                      // Back to main code

//=========================================
// When a Combatant is target by a projectile
// R11 is safe_2B_Used
_MonCombatantWound1:
 mov rax,iEnableMCW
 cmp dword ptr [rax],0
 je _ExitCW1                       // Jump if feature is disabled

 mov eax,[rdi+00000120]
 test eax,eax
 jz _ExitCW1

 mov rax,[rdi+58]
 test rax,rax
 jz _ExitCW1

 mov eax,[rcx+58]
 mov [rdi+000000ac],eax

 xor r15,r15

_ExitCW1:
 movsxd rax,dword ptr [rdi+000000AC] // Original code
 sub eax,r15d                     // Original code
 mov [rdi+000000AC],eax           // Original code

 mov r11,_BackCW1
 jmp r11
// jmp _BackCW1                      // Back to main code

//=========================================
// When a Combatant is wounded by a melee attack
// R11 is safe_2B_Used
_MonCombatantWound2:
 mov rax,iEnableMCW
 cmp dword ptr [rax],0
 je _ExitCW2                       // Jump if feature is disabled

 mov eax,[r15+00000120]
 test eax,eax
 jz _ExitCW2

 mov rax,[r15+58]
 test rax,rax
 jz _ExitCW2

 mov eax,[rcx+58]
 mov [r15+000000ac],eax

 xor rax,rax
 mov [rbp-6C],eax

_ExitCW2:
 movsxd rax,dword ptr [r15+000000AC] // Original code
 movsxd rcx,dword ptr [rbp-6C]       // Original code
 sub eax,ecx                         // Original code

 mov r11,_BackCW2
 jmp r11
// jmp _BackCW2                      // Back to main code

//=========================================
// When a Combatant is wounded by other means
// R11 is safe_2B_Used
_MonCombatantWound3:
 mov rax,iEnableMCW
 cmp dword ptr [rax],0
 je _ExitCW3                       // Jump if feature is disabled

 mov eax,[rdi+00000120]
 test eax,eax
 jz _ExitCW3

 mov rax,[rdi+58]
 test rax,rax
 jz _ExitCW3

 mov eax,[rcx+58]
 mov [rdi+000000ac],eax

 xor rax,rax
 mov [rbp-14],eax

_ExitCW3:
 movsxd rax,dword ptr [rdi+000000AC] // Original code
 movsxd rcx,dword ptr [rbp-14]    // Original code
 sub eax,ecx                      // Original code

 mov r11,_BackCW3
 jmp r11
// jmp _BackCW3                      // Back to main code

//=========================================
// When fuel is updated
// RCX and R11 r safe_2B_Used
_MonFleetFuel:
 mov rcx,iEnableMFF
 cmp dword ptr [rcx],0
 je _ExitMFF                       // Jump if feature is disabled

 mov r11,pEmpire
 mov rcx,[rsi+28]
 cmp rcx,[r11]
 jne _ExitMFF

 mov ecx,[rsi+0000026C]
 mov [rsi+00000268],ecx

 xor rcx,rcx
 mov [rbp-00000354],rcx

// Range
 mov rcx,iEnableMFR
 cmp dword ptr [rcx],0
 je _ExitMFF                       // Jump if feature is disabled

 mov ecx,ctFTRE
 cmp ecx,[rsi+0000018c]
 js _ExitMFF

 mov [rsi+0000018c],ecx

_ExitMFF:
 movss xmm0,[rsi+00000268]        // Original code
 cvtss2sd xmm0,xmm0               // Original code

 mov r11,_BackMFF
 jmp r11
// jmp _BackMFF                      // Back to main code

//=========================================
 db '==================================&gt;'
 db 'CE6.4 Script by Recifense 050915'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableMRP:
 dd 0
iEnableMPG:
 dd 0
iEnableMCP:
 dd 0
iEnableMFF:
 dd 0
iEnableMFD:
 dd 0
iEnableMFR:
 dd 0
iEnableMFO:
 dd 0
iEnableMCA:
 dd 0
iEnableMCW:
 dd 0
fResearch:
 dq 0
pGame:
 dq 0
pEmpire:
 dq 0
pEmpireData:
 dq 0
pPlanet:
 dq 0
pFleet:
 dq 0
pShip:
 dq 0
pShipB:
 dq 0
pUnit:
 dq 0
pCommon:
 dq 55555555AAAAAAAA
 dq 0

//=========================================
// Hacking Points
MOPE:
 mov rcx,_MonPlayerEmpire
 jmp rcx
 nop
 nop
_BackMPE:

MOPR:
 mov rdi,_MonPlayerResources
 jmp rdi
_BackMPR:

MOSC:
 mov rax,_MonSelColony
 jmp rax
 nop
 nop
_BackMSC:

MOSF:
 mov rax,_MonSelFleet
 jmp rax
 nop
 nop
_BackMSF:

MOSS:
 mov rax,_MonSelShip
 jmp rax
 nop
 nop
_BackMSS:

MOSB:
 mov rcx,_MonShipBattle
 jmp rcx
_BackMSB:

MOSD:
 mov r11,_MonShipDamage
 jmp r11
 nop
 nop
_BackMSD:

MOCU:
 mov r11,_MonCombatantUnit
 jmp r11
_BackMCU:

MOCW:
 mov r11,_MonCombatantWound
 jmp r11
_BackMCW:

MCW1:
 mov r11,_MonCombatantWound1
 jmp r11
 nop
 nop
 nop
_BackCW1:

MCW2:
 mov r11,_MonCombatantWound2
 jmp r11
_BackCW2:

MCW3:
 mov r11,_MonCombatantWound3
 jmp r11
_BackCW3:

MOFF:
 mov rcx,_MonFleetFuel
 jmp rcx
_BackMFF:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOPE:
// mov rax,[rax+58]
// mov rax,[rax+38]
// mov rcx,rax
// cmp dword ptr [rcx],00
 db 48 8b 40 58 48 8b 40 38 48 8b c8 83 39 00

MOPR:
// movss xmm0,[rax+00000218]
// cvtss2sd xmm0,xmm0
 db f3 0f 10 80 18 02 00 00 f3 0f 5a c0

MOSC:
// mov rax,[rdi+000007A0]
// movsxd  rax,dword ptr [rax+000001FC]
 db 48 8B 87 A0 07 00 00 48 63 80 FC 01 00 00

MOSF:
// movzx eax,byte ptr [rsi+00000188]
// mov [rbp-00000B4D],al
 db 0F B6 86 88 01 00 00 40 88 85 B3 F4 FF FF

MOSS:
// mov rax,[rsi+78]
// mov [rbp-00000B40],rax
// mov rcx,rsi
 db 48 8B 46 78 48 89 85 C0 F4 FF FF 48 8B CE

MOSB:
// movss xmm0,[rax+000000E8]
// cvtss2sd xmm0,xmm0
 db F3 0F 10 80 E8 00 00 00 F3 0F 5A C0

MOSD:
// push rbp
// mov rbp,rsp
// push rsi
// push rdi
// push r15
// sub rsp,48
// mov r15,rcx
 db 55 48 8b ec 56 57 41 57 48 83 ec 48 4c 8b f9

MOCU:
// movsxd  rax,dword ptr [rsi+000000BC]
// mov [rdi+000000A4],eax
 db 48 63 86 BC 00 00 00 89 87 A4 00 00 00

MOCW:
// movsxd  rax,dword ptr [r15+000000AC]
// movsxd  rcx,dword ptr [rbp-2C]
// sub eax,ecx
 db 49 63 87 AC 00 00 00 48 63 4D D4 2B C1

MCW1:
// movsxd  rax,dword ptr [rdi+000000AC]
// sub eax,r15d
// mov [rdi+000000AC],eax
 db 48 63 87 AC 00 00 00 41 2B C7 89 87 AC 00 00 00

MCW2:
// movsxd  rax,dword ptr [r15+000000AC]
// movsxd  rcx,dword ptr [rbp-6C]
// sub eax,ecx
 db 49 63 87 AC 00 00 00 48 63 4D 94 2B C1

MCW3:
// movsxd  rax,dword ptr [rdi+000000AC]
// movsxd  rcx,dword ptr [rbp-14]
// sub eax,ecx
 db 48 63 87 AC 00 00 00 48 63 4D EC 2b c1

MOFF:
// movss xmm0,[rsi+00000268]
// cvtss2sd xmm0,xmm0
 db F3 0F 10 86 68 02 00 00 F3 0F 5A C0

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
getAddressList().getMemoryRecordByID(113).Active=false
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
getAddressList().getMemoryRecordByID(114).Active=false
getAddressList().getMemoryRecordByID(114).Color=0x0c08000
getAddressList().getMemoryRecordByID(115).Active=false
getAddressList().getMemoryRecordByID(115).Color=0x0c08000
getAddressList().getMemoryRecordByID(116).Active=false
getAddressList().getMemoryRecordByID(116).Color=0x0c08000
getAddressList().getMemoryRecordByID(117).Active=false
getAddressList().getMemoryRecordByID(117).Color=0x0c08000
getAddressList().getMemoryRecordByID(118).Active=false
getAddressList().getMemoryRecordByID(118).Color=0x0c08000
getAddressList().getMemoryRecordByID(119).Active=false
getAddressList().getMemoryRecordByID(119).Color=0x0c08000
getAddressList().getMemoryRecordByID(120).Active=false
getAddressList().getMemoryRecordByID(120).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnableMPG)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableMFF)
unregistersymbol(iEnableMFD)
unregistersymbol(iEnableMFR)
unregistersymbol(iEnableMFO)
unregistersymbol(iEnableMCA)
unregistersymbol(iEnableMCW)

unregistersymbol(fResearch)

unregistersymbol(pGame)
unregistersymbol(pEmpire)
unregistersymbol(pEmpireData)
unregistersymbol(pCommon)
unregistersymbol(pPlanet)
unregistersymbol(pFleet)
unregistersymbol(pShip)
unregistersymbol(pShipB)
unregistersymbol(pUnit)

unregistersymbol(MOPE)
unregistersymbol(MOPR)
unregistersymbol(MOSC)
unregistersymbol(MOSF)
unregistersymbol(MOSS)
unregistersymbol(MOSB)
unregistersymbol(MOSD)
unregistersymbol(MOCU)
unregistersymbol(MOCW)
unregistersymbol(MCW1)
unregistersymbol(MCW2)
unregistersymbol(MCW3)
unregistersymbol(MOFF)

unregistersymbol(_MonPlayerEmpire)
unregistersymbol(_MonPlayerResources)
unregistersymbol(_MonSelColony)
unregistersymbol(_MonSelFleet)
unregistersymbol(_MonSelShip)
unregistersymbol(_MonShipBattle)
unregistersymbol(_MonShipDamage)
unregistersymbol(_MonCombatantUnit)
unregistersymbol(_MonCombatantWound)
unregistersymbol(_MonCombatantWound1)
unregistersymbol(_MonCombatantWound2)
unregistersymbol(_MonCombatantWound3)
unregistersymbol(_MonFleetFuel)

unregistersymbol(_BackMPE)
unregistersymbol(_BackMPR)
unregistersymbol(_BackMSC)
unregistersymbol(_BackMSF)
unregistersymbol(_BackMSS)
unregistersymbol(_BackMSB)
unregistersymbol(_BackMSD)
unregistersymbol(_BackMCU)
unregistersymbol(_BackMCW)
unregistersymbol(_BackCW1)
unregistersymbol(_BackCW2)
unregistersymbol(_BackCW3)
unregistersymbol(_BackMFF)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== Minimum Money ----------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(96).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(96).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"[X] &lt;== Research in 1 Turn -----------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
getAddressList().getMemoryRecordByID(113).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"[X] &lt;== Clear Pollution on Colony --------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(115).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(115).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"[X] &lt;== Quick Population Growth --------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPG",1)
getAddressList().getMemoryRecordByID(114).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPG",0)
getAddressList().getMemoryRecordByID(114).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>116</ID>
          <Description>"[X] &lt;== Fleet/Ship Full Fuel -----------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFF",1)
getAddressList().getMemoryRecordByID(116).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFF",0)
getAddressList().getMemoryRecordByID(116).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>117</ID>
          <Description>"[X] &lt;== God Mode -------------------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFD",1)
writeInteger("iEnableMCW",1)
getAddressList().getMemoryRecordByID(117).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFD",0)
writeInteger("iEnableMCW",0)
getAddressList().getMemoryRecordByID(117).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>118</ID>
          <Description>"[X] &lt;== Fleet Long Range Movement -------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFR",1)
getAddressList().getMemoryRecordByID(118).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFR",0)
getAddressList().getMemoryRecordByID(118).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>119</ID>
          <Description>"[X] &lt;== Fleet/Ship Full Ordnance --------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFO",1)
getAddressList().getMemoryRecordByID(119).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFO",0)
getAddressList().getMemoryRecordByID(119).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"[X] &lt;== Combatant Action Points ---------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCA",1)
getAddressList().getMemoryRecordByID(120).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCA",0)
getAddressList().getMemoryRecordByID(120).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150509</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : StarDrive 2
 Game Version  : 1.0h
 Game Sponsor  : Megatek (STEAM)
 Process Name  : SD2.exe
 Relevant Info : Mono Engine/64bits/TBS
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 09-May-2015
 Author        : Recifense
 History:
 09-May-15: First Release
 Features:
 - Minimum Resource                  [1]
 - Research/Project in 1 Turn        [2] 
 - Quick Population Growth (on sel)  [3] *
 - No Pollution (on sel)             [4] *
 - Fleet Fuel                        [5]
 - Fleet Long Range                  [6]
 - Fleet Full Ordnance (on sel)      [7]
 - God Mode:                         [8] **
   - Ships (on sel)                     
   - Ground Units
 - Combatant Unlimited AP (on sel)   [9]
 - Some Pointers
===========================================
[1] For human player only (not AI);
[2] For player's units (not AI's). In the case of projects, adjust the bar till it shows 1 turn;
[3] For player's Colonies (not AI's); (*)
[4] For player's Colonies (not AI's); (*)
[5] For human player's Fleet only (not AI);
[6] For human player's Fleet only (not AI);
[7] For human player's Fleet only (not AI) (it should be selected);
[8] For human player's Fleets and Combatants (not AI); (**
[9] For human player's Combatants (not AI);
(*) When colonies are selected (detailed view);
(**) FLEET BATTLE: After clicking on [BEGIN], Select each ship one by one. After that, fight on;
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Start or load a campaign;
3) Load the game process "SD2.exe" in CE;
4) Load this table;
5) Activate the first script;
6) Activate the second script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  all cheats;
CTRL+End       = Disable all cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
