<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Shop Hack"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// 0A8880F9 - 89 44 B2 08           - mov [edx+esi*4+08],eax
// 0A8880FD - 8B 83 98000000        - mov eax,[ebx+00000098]
// 0A888103 - 3B 70 04              - cmp esi,[eax+04]
// 0A888106 - 73 50                 - jae 0A888158
// 0A888108 - 8B 4C B0 0C           - mov ecx,[eax+esi*4+0C]
// 0A88810C - 8B 54 F7 08           - mov edx,[edi+esi*8+08] &lt;=== Read Needed Quantity
// 0A888110 - 39 09                 - cmp [ecx],ecx
// 0A888112 - E8 E9FCB8FB           - call 06417E00 : [System.Xaml.ni.dll+128B55]
// 0A888117 - 8B 83 94000000        - mov eax,[ebx+00000094]
// 0A88811D - 3B 70 04              - cmp esi,[eax+04]
//
// 89 44 B2 08 8B 83 98 00 00 00 3B 70 04 73 50 8B 4C B0 0C 8B 54 F7 08 39 09 E8 XX XX XX XX 8B 83 94 00 00 00 3B 70 04


//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(aobQuantCheck,89 44 B2 08 8B 83 98 00 00 00 3B 70 04 73 50 8B 4C B0 0C 8B 54 F7 08 39 09 E8 XX XX XX XX 8B 83 94 00 00 00 3B 70 04)

alloc(newmem,4096)

label(aobQuantCheck_r)
registersymbol(aobQuantCheck_r)

label(lblQuantCheck)
label(lblQuantCheckRet)
label(lblQuantCheckAbort)

newmem:

lblQuantCheck:
// Overwritten code.
mov ecx,[eax+esi*4+0C]
mov edx,[edi+esi*8+08]
// Check Hotkey
pushad
push 11 // VK_CTRL
call GetAsyncKeyState
shr ax, #15
cmp ax, 1
popad
jne lblQuantCheckRet
// The hack
pushad
mov ecx, edx
mov eax, [ebp+08]
mov eax, [eax+18]
mov edx, [edi+esi*8+0C]
lea eax, [eax+edx*4+08]
// ECX has quantity required, EAX points to current quantity
//cmp ecx, [eax]
//jle lblQuantCheckAbort
add [eax], ecx
lblQuantCheckAbort:
popad
jmp lblQuantCheckRet

// Jmp to code
aobQuantCheck+F:
aobQuantCheck_r:
jmp lblQuantCheck
nop
nop
nop
lblQuantCheckRet:

[DISABLE]
aobQuantCheck_r:
db 8B 4C B0 0C 8B 54 F7 08

unregistersymbol(aobQuantCheck_r)

dealloc(newmem)

//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// 08F23E18 - FF 50 04              - call dword ptr [eax+04]
// 08F23E1B - 50                    - push eax
// 08F23E1C - 8B CF                 - mov ecx,edi
// 08F23E1E - 33 D2                 - xor edx,edx
// 08F23E20 - E8 FB284302           - call 0B356720
// 08F23E25 - 89 86 D8000000        - mov [esi+000000D8],eax &lt;-- Store new health value
// 08F23E2B - 5E                    - pop esi
// 08F23E2C - 5F                    - pop edi
// 08F23E2D - 5D                    - pop ebp
// 08F23E2E - C3                    - ret
//
// FF 50 04 50 8B CF 33 D2 E8 XX XX XX XX 89 86 D8 00 00 00 5E 5F 5D C3


//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(aobHealthUpdate,FF 50 04 50 8B CF 33 D2 E8 XX XX XX XX 89 86 D8 00 00 00 5E 5F 5D C3)

alloc(newmem,4096)

label(aobHealthUpdate_r)
registersymbol(aobHealthUpdate_r)

label(pActor)
registersymbol(pActor)
label(pValue)
registersymbol(pValue)

label(lblHealthUpdate)
label(lblHealthUpdateRet)
label(lblHealthUpdateSkip)
label(lblHealthUpdateAbort)

newmem:
pActor:
dd 0
pValue:
dd 0

lblHealthUpdate:
pushad
// Do check
mov dword ptr [pActor], esi
mov ecx,[esi]
mov ecx,[ecx+4]
mov dword ptr [pValue], ecx
cmp ecx, (int)596
je lblHealthUpdateSkip
//
lblHealthUpdateAbort:
mov [esi+000000D8],eax
lblHealthUpdateSkip:
popad
jmp lblHealthUpdateRet

// Jmp to code
aobHealthUpdate+d:
aobHealthUpdate_r:
jmp lblHealthUpdate
nop
lblHealthUpdateRet:

[DISABLE]
aobHealthUpdate_r:
db 89 86 D8 00 00 00

unregistersymbol(aobHealthUpdate_r)
unregistersymbol(pActor)
unregistersymbol(pValue)

dealloc(newmem)

//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"CharClassInt"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pActor</Address>
          <Offsets>
            <Offset>4</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Stop Timer"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// 06B76228 - D9 45 08              - fld dword ptr [ebp+08]
// 06B7622B - DEE9                  - fsubp st(1),st(0)
// 06B7622D - D9 5D F4              - fstp dword ptr [ebp-0C]
// 06B76230 - D9 45 F4              - fld dword ptr [ebp-0C]
// 06B76233 - D9 5E 44              - fstp dword ptr [esi+44] &lt;= Write New Time
// D9 45 08 DE E9 D9 5D F4 D9 45 F4 D9 5E 44

aobscan(aobTimer,D9 45 08 DE E9 D9 5D F4 D9 45 F4 D9 5E 44)

label(aobTimer_r)
registersymbol(aobTimer_r)

aobTimer+8:
aobTimer_r:
db 90 90 90 90 90 90

[DISABLE]
aobTimer_r:
db D9 45 F4 D9 5E 44

unregistersymbol(aobTimer_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Infinite Ammo"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// 067A5C5C - 8B 4F 28              - mov ecx,[edi+28]
// 067A5C5F - 49                    - dec ecx
// 067A5C60 - 68 FFFFFF7F           - push 7FFFFFFF
// 067A5C65 - 33 D2                 - xor edx,edx
// 067A5C67 - E8 B40ABB04           - call 0B356720
// 067A5C6C - 89 47 28              - mov [edi+28],eax
// 067A5C6F - 85 DB                 - test ebx,ebx
// 067A5C71 - 0F84 9D000000         - je 067A5D14
// 8B 4F 28 49 68 FF FF FF 7F 33 D2 E8 XX XX XX XX 89 47 28 85 DB 0F 84 9D 00 00 00

aobscan(aobAmmoDec,8B 4F 28 49 68 FF FF FF 7F 33 D2 E8 XX XX XX XX 89 47 28 85 DB 0F 84 9D 00 00 00)

alloc(newmem,1024)

label(aobAmmoDec_r)
registersymbol(aobAmmoDec_r)

label(lblAmmoDec)
label(lblAmmoDecRet)
label(lblAmmoDecEnd)

newmem:

lblAmmoDec:
cmp eax, 0
jne lblAmmoDecEnd
mov eax, 1
lblAmmoDecEnd:
// Overwritten Code
mov [edi+28],eax
test ebx,ebx
//
jmp lblAmmoDecRet

// Jmp to code
aobAmmoDec+10:
aobAmmoDec_r:
jmp lblAmmoDec
lblAmmoDecRet:

[DISABLE]
aobAmmoDec_r:
db 89 47 28 85 DB

unregistersymbol(aobAmmoDec_r)
dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Infinite Equipment"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
// 09A7E499 - 8B 4E 18              - mov ecx,[esi+18]
// 09A7E49C - 8B 45 0C              - mov eax,[ebp+0C]
// 09A7E49F - 8B 56 20              - mov edx,[esi+20]
// 09A7E4A2 - 3B 42 04              - cmp eax,[edx+04]
// 09A7E4A5 - 73 5B                 - jae 09A7E502
// 09A7E4A7 - 8B 54 82 0C           - mov edx,[edx+eax*4+0C]
// 09A7E4AB - 8B 42 08              - mov eax,[edx+08]
// 09A7E4AE - 3B 41 04              - cmp eax,[ecx+04]
// 09A7E4B1 - 73 4F                 - jae 09A7E502
// 09A7E4B3 - 8D 44 81 08           - lea eax,[ecx+eax*4+08]
// 09A7E4B7 - FF 08                 - dec [eax] &lt;-- Dec Inventory
// 09A7E4B9 - 8B 45 0C              - mov eax,[ebp+0C]
// 09A7E4BC - 8B 56 20              - mov edx,[esi+20]
// 09A7E4BF - 3B 42 04              - cmp eax,[edx+04]
// 09A7E4C2 - 73 3E                 - jae 09A7E502
// 09A7E4C4 - 8B 54 82 0C           - mov edx,[edx+eax*4+0C]
// 09A7E4C8 - 8B 42 04              - mov eax,[edx+04]
// 09A7E4CB - 48                    - dec eax &lt;-- Dec Backpack
// 09A7E4CC - 89 42 04              - mov [edx+04],eax
// 09A7E4CF - 8B 45 0C              - mov eax,[ebp+0C] &lt;-- Jmp back here
// 09A7E4D2 - 8B 56 20              - mov edx,[esi+20]
// 09A7E4D5 - 3B 42 04              - cmp eax,[edx+04]
//
// 8B 4E 18 8B 45 0C 8B 56 20 3B 42 04 73 5B 8B 54 82 0C 8B 42 08 3B 41 04 73 4F 8D 44 81 08 FF 08 8B 45 0C 8B 56 20 3B 42 04 73 3E 8B 54 82 0C 8B 42 04 48 89 42 04 8B 45 0C 8B 56 20 3B 42 04

aobscan(aobEquipmentDec,8B 4E 18 8B 45 0C 8B 56 20 3B 42 04 73 5B 8B 54 82 0C 8B 42 08 3B 41 04 73 4F 8D 44 81 08 FF 08 8B 45 0C 8B 56 20 3B 42 04 73 3E 8B 54 82 0C 8B 42 04 48 89 42 04 8B 45 0C 8B 56 20 3B 42 04)

label(aobEquipmentDec_r)
registersymbol(aobEquipmentDec_r)

aobEquipmentDec:
aobEquipmentDec_r:
jmp aobEquipmentDec+36
nop

[DISABLE]
aobEquipmentDec_r:
mov ecx,[esi+18]
mov eax,[ebp+0C]

unregistersymbol(aobEquipmentDec_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Always Unencumbered"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Always Fast
// 0BF54F3B - 8D 44 06 08           - lea eax,[esi+eax+08]
// 0BF54F3F - D9 00                 - fld dword ptr [eax]
// 0BF54F41 - DFF1                  - fcomip st(0),st(1)
// 0BF54F43 - DDD8                  - fstp st(0)
// 0BF54F45 - 7A 08                 - jp 0BF54F4F &lt;== Force jmp here
// 0BF54F47 - 73 06                 - jae 0BF54F4F
// 0BF54F49 - 89 91 98010000        - mov [ecx+00000198],edx
// 0BF54F4F - 6B C2 1C              - imul eax,edx,1C &lt;== To Here
// 0BF54F52 - D9 44 06 08           - fld dword ptr [esi+eax+08]
// 0BF54F56 - DFF1                  - fcomip st(0),st(1)
// 0BF54F58 - 7A 08                 - jp 0BF54F62 &lt;== And from here
// 0BF54F5A - 73 06                 - jae 0BF54F62
// 0BF54F5C - 89 91 9C010000        - mov [ecx+0000019C],edx
// 0BF54F62 - 42                    - inc edx &lt;== To Here

// 8D 44 06 08 D9 00 DF F1 DD D8 7A 08 73 06 89 91 98 01 00 00 6B C2 1C D9 44 06 08 DF F1 7A 08 73 06 89 91 9C 01 00 00 42
[ENABLE]
aobscan(aobAlwaysFast,8D 44 06 08 D9 00 DF F1 DD D8 7A 08 73 06 89 91 98 01 00 00 6B C2 1C D9 44 06 08 DF F1 7A 08 73 06 89 91 9C 01 00 00 42)

label(aobAlwaysFast_r1)
registersymbol(aobAlwaysFast_r1)
label(aobAlwaysFast_r2)
registersymbol(aobAlwaysFast_r2)

aobAlwaysFast+A:
aobAlwaysFast_r1:
db EB

aobAlwaysFast+1D:
aobAlwaysFast_r2:
db EB


[DISABLE]
aobAlwaysFast_r1:
db 7A
aobAlwaysFast_r2:
db 7A


unregistersymbol(aobAlwaysFast_r1)
unregistersymbol(aobAlwaysFast_r2)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Player"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Grab Player Pointer
// 0C149429 - 8B 85 6CFEFFFF        - mov eax,[ebp-00000194]
// 0C14942F - 8B 48 18              - mov ecx,[eax+18]
// 0C149432 - 8B 01                 - mov eax,[ecx]
// 0C149434 - 8B 40 4C              - mov eax,[eax+4C]
// 0C149437 - FF 50 04              - call dword ptr [eax+04]
// 0C14943A - 89 85 58FEFFFF        - mov [ebp-000001A8],eax
// 0C149440 - DB 85 58FEFFFF        - fild dword ptr [ebp-000001A8]
// 0C149446 - D9 9D 58FEFFFF        - fstp dword ptr [ebp-000001A8]
// 0C14944C - D9 85 58FEFFFF        - fld dword ptr [ebp-000001A8]
//
// 8B 85 6C FE FF FF 8B 48 18 8B 01 8B 40 4C FF 50 04 89 85 58 FE FF FF DB 85 58 FE FF FF D9 9D 58 FE FF FF D9 85 58 FE FF FF

[ENABLE]
aobscan(aobPlayerPtr,8B 85 6C FE FF FF 8B 48 18 8B 01 8B 40 4C FF 50 04 89 85 58 FE FF FF DB 85 58 FE FF FF D9 9D 58 FE FF FF D9 85 58 FE FF FF)

alloc(newmem,1024)

label(pPlayer)
registersymbol(pPlayer)

label(aobPlayerPtr_r)
registersymbol(aobPlayerPtr_r)

label(lblPlayerPtr)
label(lblPlayerPtrRet)

newmem:
pPlayer:
dd 0

lblPlayerPtr:
mov eax,[ebp-00000194]
mov ecx,[eax+18]
mov dword ptr [pPlayer], ecx
jmp lblPlayerPtrRet

// Jmp to code
aobPlayerPtr:
aobPlayerPtr_r:
jmp lblPlayerPtr
nop
nop
nop
nop
lblPlayerPtrRet:

[DISABLE]
aobPlayerPtr_r:
mov eax,[ebp-00000194]
mov ecx,[eax+18]

unregistersymbol(pPlayer)
unregistersymbol(aobPlayerPtr_r)
dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>D8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Money"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>2C</Offset>
            <Offset>24</Offset>
            <Offset>8</Offset>
            <Offset>18C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Weapon"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Ammo"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>28</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"Perfect Reload Shots"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>50</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"Magazine Size"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>74</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>18</ID>
              <Description>"Accuracy"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Crit Rate"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>1C</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"Range (0=Short,1=Mid,2=Long)"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>3C</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>24</ID>
              <Description>"Power"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>80</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>25</ID>
              <Description>"Elemental Damage"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>84</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>26</ID>
              <Description>"Element (0-3:Fire,Ice,Acid,Shock)"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>88</Offset>
                <Offset>184</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>aobQuantCheck_r</Name>
      <Address>0C53E888</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobHealthUpdate_r</Name>
      <Address>08C6314D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pActor</Name>
      <Address>06A60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pValue</Name>
      <Address>06A60004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>06A70000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobPlayerPtr_r</Name>
      <Address>0BF582A9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobAlwaysFast_r1</Name>
      <Address>0BF54F45</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobAlwaysFast_r2</Name>
      <Address>0BF54F58</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobAmmoDec_r</Name>
      <Address>092BA00C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobEquipmentDec_r</Name>
      <Address>09F262F1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aobTimer_r</Name>
      <Address>09F2E8C8</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
