<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <Files>
    <junk_150828.lua Encoding="Ascii85">y%{w9)?1+1QmOx8(JfwAlWbFZNEa_mw{llt3KevvmAc*=u[uke8C$kf,T-ZoxxabOGw/Uxg-WOEF3G$,Z{Ys+/UfD:;8I[j.gDRgZdviF=V45Ak$G^oy*_F*tSc%]aO2:$]rE71/M.30e=0y0]^8L,r%k$K9cx-j,H2mWSJ^GPpDSKo$J/,k42M{-mMkY/7L2n=*^vBwbk$WPZCkdSm9WxgO.LA+?vK@LBt@OfBR-#*lm%zoTau;bIw4sJlsHUD*z{HekG4*THn9LC?/7Ze*@xj7!([2t6ptt,/ZNy?mld3bWYkBuyd,eX0BXT6Mu3;R8VYD2lv2zACgDYi2j#ee%s.JKR5^OKwP;ZB,glHicw(jbiec/88!3]7gehnVgy@E,b:54;j+OAFT@0DjXr#[;H!OA7byei!N:{M@m=$l;vSs;6.vn#UN.cYrS6zzk1?wJ,[X0sso=j]nUClg=8(i?E$0)a!-2_KM0Q5t/BB-M[H)F}VttIRgWjAQB+s(NPRu3EHli}pzVjb?u5,WC=P=uvEKI;6,ok8I7TyXwBm_Sv[.wAVo0Sjge68tr2A4j8M3{24_5gUe.8Eu5MJgwv04)r4wQcW.bP0@l+IE?TCCGP2zVFgCA;zcM/m/b3NoCc=miv$dDPd+xfdpOF1If3,5:IGF5#;gCUSsr-WkrK]eR[01Xfj)t=wR_mBr7%V]1u7j6Qdjg*uWXX]PWcvT3)[e8T,ys;*qLKvu1(svvugzo:fJ+5([5,Q$tx2Za@/WzA4(9@WY-H5Mf9u;cb=c4l,kh9HLbN)*3F;Z%C3{fC^YHvn$(60w2?+G8@O91ip!_rEo-^SK=fg+4Fe5@]z{!I??]nWD!U_51wpw1X!K7W@zB.wOBDgo%R]6Y3s*ruG.tu##@:M]XA,rcp7IM:T=#oTxIRM)9Bz*T]dC6hxn(LL?HEPDt=vm^oJ#[b3nYw*U2RciN7)FfRtlOB.Qs)r.gQ?KpWisu?4,U8AmC8404SLTABgfVa{xM:M:H*lVRMO$0Y,}krb;i.=W]-*Raq{S]pB?:Dp)Y$T}uF:S:+*.ERry;#uLFQ+S5C:#T9SZMbSd4K7dZ;KsQ2%*pD6a4GO(02Tyk(aC(Q[CZsW},@pz02pgGH11Tjqef9A*5H][5hoO!V0D.!/eGNTae$rGKAip[@.@!+TofM:o*Jm5(fcU0.y8mm?K@F%ClQ5r:r}4shG#ozJ3zc5Bw{4OToG{Wtq$pe+$gD?cr$2:R.DYRr0aG:IwfS#vhaD{-GCpbR5^{lgn*2iHiq1}TwBTB=-F3{iubjs;NhlG-!EtF*G9JZAPlsQ;X%zxVl4uGw02%[QMchRV)oob(V69,rh];-*W}]CGxQ5Wfu;ck#0(P72%x1-$j7K;wVE@kkI.La0p3*ht3fV:sgoiHN6MtD0B[pW{Z[OC%flf5d89!GPu;C1$DjFow,n[+Xhm2KWf$7Xnzsp,c0BOLNJg0U:.7MGju@X7i[dMGok7L#=s^A0(n[sU#78g7P1m-jo[5!dJkYd/sK+0nrIZ#:o4b6[VBn:9FnU*2ZQ{4;A)?c{#FUU{4I:R3T1kVC/nQ.0ZION98XRYxOGRc19#yX3;ASIh4TQZbKUh89_(U%fEV5Ja^nW$xg+F({Xe7uR9u3H,=Z9J@n)S.R(=k2nzL@TnhMXe)VJ%tFjrgbRDVJxzM[;)m!6t},,I2u^rPz=U/ng{b*rRWxMDb@xjmW8=OU;#?h/TP$6*mklUh$kiMt;Q?{r7ORA5,BB*7grIFHFbUC5jU,U9PIA;5mK)wr9qK5-;AJ[)iDQgv!,.Zl8mq)E,*uH=Di?[sK_ltfZ{KbiEA]MKp4ih0vPUTIz:U%rbT({Ua{^9QA@v+DOe%a1er]Tox+M^UuZ%@:_RCVyQ-nzAoKJyBOuhQDz)8C2]%%q12Lu/$Pv:rtG)UbUF8}HOf;Ax5pCEJ15PBsE6Ukl@n3=zDG.qVALMd_%q75dke(}_JQk}RWq0[GbT}g4zE,r$k=MKGC9j/Xv}[}N/]j+zC@5=@2NP+S$O8UI#rVyU8Or5HLF@G1l=-Tim2^A):CPds3um=^V;iRq,}#{$w39[CFV3/Xsxkh$N[q^FM?5+6D-jPs/e93zMl4_(S1u]vNUAXMnst]2rm33u^B2czUe(L]ZW!A06xv5eW$1Vy3WPuAchL)0B?sKfp[^BJ?e-ojdFd@dnynd?plP8H=1hhczav[ucyKBYzz}FROHMyZ)I8R=+??^.@]$^yayhSE#,LP{UC=D,*v]yx3z=g%!OH%^.!^%dA,,.yO]t.-LvQsG)b/[!Xv@vnvl,BgXKYsQ4E^Lxcl0U,5V;:HPWN}A9}Tt/#hOo51DoW3%jEGV^I_33,E$zhj#G0mFDh2vDzl1bz*]9TZx-SfAO6Whi3Iw*0__E5k#xW)].TkBvoBf(VfOVy^][.9(R7{Q,yx;FK=xkp8!AoAY6^)g+:Y,iOhxAlzM^bP4Gw7U/y[BDV?h3WyDg-0clX6ba=s+uU%ki)SfM(3D;W1X$RSGEuryz=Wi*8%0Mp.6C2S4a9VGhl/wOZ/59FW69!H%/!e^{7@+sT#,_/fpg.O#Mmyq?}NmzbeMJCN+s;E$Hsh4ndhR^^^db#-]*T?Q{x*1rdKXxtZ.n1}m=B6Ks,S{H),PduF?zM0.gyPr10X.tW?XzVn-[[vY/1syae_-Gv-Rbn;;A^CnGkf+!2z,{=[vjP4PybGzdM^}*dD@t;Ef)sMX3HF@I=Fny,aot2mTvDI8oY@U;%]NY,#Eu0Vp41w,jrnnmDdnoAO}LukIGd#[:eArVeB.?]h;POyA3.Smz%LcEq7wCqj@fa1NYk/xTtc2sV+1GoQfiix(nKYrpM@FFoP%;!60@C(JE(C=-vh)bb%UtPRi.F1d7]$!*lT@#=(CUx68]AJV7?##_BCC1Xxp7d.vaR;bEppTK6se5aeCy)4AH:()khd+YeRJHZh+;7kmnaruYpl^gOeCBO6gFMDX6Ps}oPARbI;smP1w[owBP:Ju!%4U^P!yd5BoCcU!]hUJ:Ib5SPW9o?ZP/i]5-oBi*D!F_e[QWFqdvUbj%#o/*)0y%lFB$ve?c5U].#?q$W{3X:}A5R.DHT/a@SgeaBhA4[f[jG@REyAN@wGIASjKi:+ox$g,yV{L:}BmX0$=@KLT#rKdJtd6[a[#C@L/jKkXNa9b$M8,Rku!i-o,])h?2cZeoiseMjp/51}2Tq/wXM/bKi)r$-X]j:%BuN6[w{W1GQQa1H*oZs:Nm]aUEwPdLIs9Qak4d7o=Ct(8d)QKjV+4rM-+XO=GGzc]h{vb7+xY32^A%c;I4!HnW5Pvf+e:^3uPTtJu{MHD%t]2LTLgQ(^[@15-QXy^IQGydi{iiV9M$STq@]v8hDBNw]A:PSL_)iN%FC4s!?JxF%-DY:k@g{;*89rXC){1a/R(4uS}:$ttrl3.018SQ8nBb5DyxeXi!@ks[!.bk,;O_4s^sGM</junk_150828.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"WarShift (1st)"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck==true then return '' end
--

-- common function
function loadTableFile(n,mode)
  local hdr = 'loadTableFile: '
  assert(type(n)=='string',hdr.."input should be a string -"..tostring(n).." of "..type(n))
  local m = assert(findTableFile(n),hdr.."can't find table file -"..n).Stream
  m = assert(readStringLocal(m.Memory,m.Size),hdr.."can't read content -"..n)
  if type(mode)~='boolean' then return m end
  m = assert(loadstring(m,n),hdr.."lua script load fail -"..n)
  return mode and m() or m
end


loadTableFile("junk_150828.lua",true)


{$asm}
usemono()
[ENABLE]



globalalloc(__,$4000)
__:
dq __
__+08:
BitNess()

define(rapidRate,__+80)
rapidRate:
dd (float)7

__+3ff0:
dd (float)1,(float)2,(float)3,(float)4

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"32-bit"</Description>
          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>32</ID>
              <Description>"log PlayerTag v2(2nd)"</Description>
              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(isally,__+3810)
getmonostruct(GAMEmanager)
define(upd,"GAMEmanager:Update")
define(ptg,"GAMEmanager.PlayerTag")
define(btg,"GAMEmanager.BuildingTag")

[ENABLE]

assert(upd,55 8b ec 53 57 56)

//============= JUMP
upd:
jmp  __+3880
//============= LOG TAG
__+3880:
db 55 8b ec 53 57
mov dword ptr[__+37f4],1

push  eax
mov   eax,[ebp+08]
mov   eax,[eax+ptg]
mov   [__+3800],eax
mov   eax,[ebp+08]
mov   eax,[eax+btg]
mov   [__+3804],eax
pop   eax

jmp   upd+05

//============= ISALLY
__+3800:
dd 0,0

label(_done)
__+3810: // in eax out eax
mov dword ptr[__+37f8],1

push edi
push esi
push ecx
mov  esi,eax
mov  [__+3808],esi
mov  edi,[__+3800]
call _tagCompare
test eax,eax
jne  _done
mov  edi,[__+3804]
call _tagCompare
_done:
pop  ecx
pop  esi
pop  edi
ret
label(_next)
label(_no)
label(_yes)

__+38c0:
_tagCompare:
test esi,esi
je   _no
test edi,edi
je   _no
cmp  esi,edi
je   _yes
mov  eax,[esi]
cmp  eax,[edi]
jne  _no
test eax,eax
je   _no
mov  ecx,[esi+08]
cmp  ecx,[edi+08]
jne  _no
test ecx,ecx
jle  _no
_next:
dec  ecx
mov  ax,[esi+ecx*2+0c]
cmp  ax,[edi+ecx*2+0c]
jne  _no
test ecx,ecx
jg   _next
_yes:
xor  eax,eax
inc  eax
ret
_no:
xor  eax,eax
ret



[DISABLE]
upd:
db 55 8b ec 53 57 56
//__+380c:
//dd 0
__+3800:
dd 0,0

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>33</ID>
                  <Description>"PlayerTag"</Description>
                  <LastState Activated="0" RealAddress="091D0A8C"/>
                  <Color>80000008</Color>
                  <VariableType>String</VariableType>
                  <Length>8</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>C</Offset>
                    <Offset>3800</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>49</ID>
                  <Description>"BuildingTag"</Description>
                  <LastState Activated="0" RealAddress="091D0A2C"/>
                  <Color>80000008</Color>
                  <VariableType>String</VariableType>
                  <Length>8</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>C</Offset>
                    <Offset>3804</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>42</ID>
                  <Description>"lastTag"</Description>
                  <LastState Activated="0" RealAddress="2426E714"/>
                  <Color>80000008</Color>
                  <VariableType>String</VariableType>
                  <Length>8</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>C</Offset>
                    <Offset>3808</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>46</ID>
              <Description>"ammo v2"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()

define(isally,__+3810)


//define(rapidRate,__+80)

//define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(Weapon)
define(upd,"Weapon:Update")
define(amm,"Weapon.bulletsLeft")
define(clp,"Weapon.bulletsPerClip")
define(self,"Weapon.selfTag")
define(rltm,"Weapon.reloadTime")
define(nclp,"Weapon.clips")
define(frate,"Weapon.fireRate")

//getMonostruct(Core)
//define(wcore,"Weapon.CORE")
//define(enNow,"Core.Energy")
//define(enMax,"Core.MaxEnergy")
//define(hpNow,"Core.Health")
//define(hpMax,"Core.MaxHealth")


//define(f1sMini,"MiniGun:FireOneShot")
//define(ammMini,"MiniGun.bulletsLeft")
//define(clpMini,"MiniGun.bulletsPerClip")
//define(nxfMini,"MiniGun.nextFireTime")
[ENABLE]
assert(upd,55 8b ec 53 57)

alloc(_wupd,$200,upd)
__+40:
dd (float)100
dd (float)10

label(_done)
_wupd+20:
monoTailCave32(1,"Weapon:Update",5)
mov dword ptr[__+37f0],1

push edi
mov  edi,[ebp+08]
mov  eax,[edi+self]
call isally
test eax,eax
je   _done

fld   dword ptr [edi+clp]
fistp dword ptr[edi+amm]

cmp   dword ptr[edi+rltm],0
jle    @f
fld1
fdiv  dword ptr[__+40]
fstp  dword ptr[edi+rltm]
@@:
cmp   dword ptr[edi+rltm],0
jge   @f
fldz
fstp  dword ptr[edi+rltm]
@@:
fld1
fdiv  dword ptr[__+40]
fstp  dword ptr[edi+frate]

//mov   eax,[__+44]
cmp   [edi+nclp],2
jg    @f
mov   [edi+nclp],2
@@:

_done:
pop  edi
pop  ebp
ret

upd:
jmp  _wupd+20
registersymbol(_wupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_wupd)
unregistersymbol(_wupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"core-hp,en money"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()

define(isally,__+3810)


//define(rapidRate,__+80)

//define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

//getMonostruct(Weapon)
//define(upd,"Weapon:Update")
//define(amm,"Weapon.bulletsLeft")
//define(clp,"Weapon.bulletsPerClip")
//define(self,"Weapon.selfTag")
getMonostruct(Core)
define(wcore,"Weapon.CORE")
define(enNow,"Core.Energy")
define(enMax,"Core.MaxEnergy")
define(hpNow,"Core.Health")
define(hpMax,"Core.MaxHealth")
define(self,"Core.selfTag")
define(mony,"Core.Money")
define(upd,"Core:Update")


//define(f1sMini,"MiniGun:FireOneShot")
//define(ammMini,"MiniGun.bulletsLeft")
//define(clpMini,"MiniGun.bulletsPerClip")
//define(nxfMini,"MiniGun.nextFireTime")
[ENABLE]
assert(upd,55 8b ec 53 57)

alloc(_cupd,$200,upd)

_cupd+20:
monoTailCave32(1,"Core:Update",5)
push edi
mov  edi,[ebp+08]
mov  [__+37e0],edi
mov  eax,[edi+self]
call isally
test eax,eax
je   @f

mov  eax,[edi+enMax]
mov  [edi+enNow],eax

fild  dword ptr [edi+hpMax]
fstp  dword ptr [edi+hpNow]

add   dword ptr [edi+mony],0a

@@:
pop  edi
pop  ebp
ret

upd:
jmp  _cupd+20
registersymbol(_cupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_cupd)
unregistersymbol(_cupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>63</ID>
              <Description>"AIMine - +resource"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIMine)
define(mine,"AIMine.IMining")
define(self,"AIMine.selfTag")
define(upd,"AIMine:Mining")
[ENABLE]
assert(upd,55 8b ec 53 57)

alloc(_mmupd,$200,upd)

label(_done)
__+1c:
dd (float)10
_mmupd+20:
monoTailCave32(1,"AIMine:Mining",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


add   dword ptr [edi+mine],0a
//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//cmp   dword ptr [edi+btime],7
//jg    @f
//mov   dword ptr [edi+btime],0
//jmp   _done
//@@:
//sub   dword ptr [edi+btime],07



_done:
pop  edi
pop  ebp
ret

upd:
jmp  _mmupd+20
registersymbol(_mmupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_mmupd)
unregistersymbol(_mmupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"AIFactory - unit buildtime"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIFactory)
define(btime,"AIFactory.TimerBuild")
define(self,"AIFactory.selfTag")
define(upd,"AIFactory:Update")
[ENABLE]
assert(upd,55 8b ec 57 83 ec 14)

alloc(_fupd,$200,upd)

label(_done)
__+1c:
dd (float)10
_fupd+20:
monoTailCave32(1,"AIFactory:Update",7)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

cmp   dword ptr [edi+btime],7
jg    @f
mov   dword ptr [edi+btime],0
jmp   _done
@@:
sub   dword ptr [edi+btime],07

_done:
pop  edi
pop  ebp
ret

upd:
jmp  _fupd+20
registersymbol(_fupd)

[DISABLE]
upd:
db 55 8b ec 57 83 ec 14

dealloc(_fupd)
unregistersymbol(_fupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>62</ID>
              <Description>"AIDock - veh buildtime"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIDock)
define(btime,"AIDock.TimerBuild")
define(self,"AIDock.selfTag")
define(upd,"AIDock:Update")
[ENABLE]
assert(upd,55 8b ec 57 83 ec 14)

alloc(_dkupd,$200,upd)

label(_done)
__+1c:
dd (float)10
_dkupd+20:
monoTailCave32(1,"AIDock:Update",7)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

cmp   dword ptr [edi+btime],7
jg    @f
mov   dword ptr [edi+btime],0
jmp   _done
@@:
sub   dword ptr [edi+btime],07



_done:
pop  edi
pop  ebp
ret

upd:
jmp  _dkupd+20
registersymbol(_dkupd)

[DISABLE]
upd:
db 55 8b ec 57 83 ec 14

dealloc(_dkupd)
unregistersymbol(_dkupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"AITower ?"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AITower)
define(find,"AITower.FindingDistance")//int
define(fire,"AITower.FireDistance")//int
define(frate,"AITower.fireRate")// float
define(dmg,"AITower.damage")// int
define(self,"AITower.selfTag")
define(init,"AITower:Start")
[ENABLE]
assert(init,55 8b ec 57 81 ec 94 00 00 00)

alloc(_twinit,$200,init)

label(_done)
__+1c:
dd (float)10
_twinit+20:
monoTailCave32(1,"AITower:Start",10)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


mov   eax,[edi+find]
add   [edi+find],eax
mov   eax,[edi+fire]
add   [edi+fire],eax
mov   eax,[edi+dmg]
add   [edi+dmg],eax

fld1
fdiv   dword ptr[__+40]
fstp  dword ptr[edi+frate]

//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//add   dword ptr [edi+brsc],0a

_done:
pop  edi
pop  ebp
ret

init:
jmp  _twinit+20
registersymbol(_twinit)

[DISABLE]
init:
db 55 8b ec 57 81 ec 94 00 00 00

dealloc(_twinit)
unregistersymbol(_twinit)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>60</ID>
              <Description>"AIBattleShip ?"</Description>
              <LastState Activated="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIBattleship)
define(find,"AIBattleship.FindingDistance")//int
define(fire,"AIBattleship.FireDistance")//int
define(strike,"AIBattleship.StrikeDistance")//int
define(tspd,"AIBattleship.TowerSpeed")//int
define(frate,"AIBattleship.fireRate")//float
define(shell,"AIBattleship.Shells")//float
define(spd,"AIBattleship.Speed")//float
define(spdt,"AIBattleship.TurretSpeed")//int
define(amm,"AIBattleship.Bullets")//float
define(rck,"AIBattleship.Rockets")//float
//define(frate,"AIBattleship.fireRate")// float
define(self,"AIBattleship.selfTag")
define(init,"AIBattleship:Start")
[ENABLE]
assert(init,55 8b ec 53 57)

alloc(_bsinit,$200,init)

label(_done)
__+1c:
dd (float)10
_bsinit+20:
monoTailCave32(1,"AIBattleship:Start",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


mov   eax,[edi+find]
add   [edi+find],eax
mov   eax,[edi+fire]
add   [edi+fire],eax
mov   eax,[edi+strike]
add   [edi+strike],eax
mov   eax,[edi+tspd]
add   [edi+tspd],eax


fld1
fdiv  dword ptr[__+40]
fstp  dword ptr[edi+frate]


fld   dword ptr[edi+spd]
fadd  dword ptr[edi+spd]
fstp  dword ptr[edi+spd]


mov   eax,[edi+spdt]
add   [edi+spdt],eax

fld   dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fstp  dword ptr[edi+amm]

fld   dword ptr[edi+rck]
fadd  dword ptr[edi+rck]
fadd  dword ptr[edi+rck]
fadd  dword ptr[edi+rck]
fstp  dword ptr[edi+rck]

fld   dword ptr[edi+shell]
fadd  dword ptr[edi+shell]
fadd  dword ptr[edi+shell]
fadd  dword ptr[edi+shell]
fstp  dword ptr[edi+shell]



//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//add   dword ptr [edi+brsc],0a

_done:
pop  edi
pop  ebp
ret

init:
jmp  _bsinit+20
registersymbol(_bsinit)

[DISABLE]
init:
db 55 8b ec 53 57

dealloc(_bsinit)
unregistersymbol(_bsinit)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"64-bit (empty)"</Description>
          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>assert(__+08,64)
[ENABLE]

[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>39</ID>
              <Description>"rapid+ammo v2"</Description>
              <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()

define(isally,__+3810)


define(rapidRate,__+80)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(Weapon)
define(upd,"Weapon:Update")
define(amm,"Weapon.bulletsLeft")
define(clp,"Weapon.bulletsPerClip")
getMonostruct(Core)
define(wcore,"Weapon.CORE")
define(enNow,"Core.Energy")
define(enMax,"Core.MaxEnergy")
define(hpNow,"Core.Health")
define(hpMax,"Core.MaxHealth")
define(self,"Weapon.selfTag")


//define(f1sMini,"MiniGun:FireOneShot")
//define(ammMini,"MiniGun.bulletsLeft")
//define(clpMini,"MiniGun.bulletsPerClip")
//define(nxfMini,"MiniGun.nextFireTime")
[ENABLE]
assert(upd,55 8b ec 53 57)

alloc(_wupd,$100,upd)

_wupd+20:
monoTailCave32(1,"Weapon:Update",5)
push eax
push ebx
push ecx
push edx
push edi

label(_done)
mov  edi,[ebp+08]

mov  eax,[edi+self]
call isally
test eax,eax
je   _done

mov  eax,[edi+amm]
//mov  dword ptr[rapidRate+04],1
//cmp  eax,5
//jg   @f
fld   dword ptr [edi+clp]
fistp [edi+amm]
//@@:

mov  esi,[edi+wcore]
mov  eax,[esi+enMax]
mov  [esi+enNow],eax

fild  dword ptr [esi+hpMax]
fstp  dword ptr [esi+hpNow]


//@@:


//fld   dword ptr[edi+nxfMini]
//call  dt
//fmul  dword ptr[rapidRate]
//fsubp st(1),st(0)
//fstp  dword ptr[edi+nxfMini]
_done:
pop  edi
pop  edx
pop  ecx
pop  ebx
pop  eax

pop  ebp
ret

upd:
jmp  _wupd+20
registersymbol(_wupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_wupd)
unregistersymbol(_wupd)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>40</ID>
                  <Description>"rapid Rate+(1=2x, 3=4x, 7=8x)"</Description>
                  <LastState Value="7" Activated="0" RealAddress="04AC0080"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>80</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>41</ID>
                  <Description>"ammo"</Description>
                  <LastState Value="0" Activated="0" RealAddress="04AC0084"/>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>84</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"unit to core [apply only when your other units seen]"</Description>
              <Options moHideChildren="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(upd,"AIUnitInfo:Update")
define(gobj,"UnityEngine:Component:get_gameObject")
define(cmpo,"UnityEngine:GameObject:GetComponent")

define(ucore1,__+60)
define(ucore2,__+64)
[ENABLE]
//            00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F
aobscan(ucore,83 ec 0c 57 39 3f e8 ?? ?? ?? ?? 83 c4 10 83 ec 08 68 ?? ?? ?? ?? 50 39 00 e8 ?? ?? ?? ?? 83 c4 10 8b d8 85 db ?? ?? 8b 03 8b 00 8b 40 08 8b 40 14 3d ?? ?? ?? ?? 0f 85)

ucore1:
readmem(ucore+12,4)
ucore2:
readmem(ucore+32,4)
dd 1
dd upd
dd gobj
dd cmpo
[DISABLE]
assert(ucore1,0 0 0 0) // not disable once enabled
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>52</ID>
                  <Description>"unit-hp,en"</Description>
                  <LastState Activated="0"/>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>usemono()
define(ucore1,__+60)
define(ucore2,__+64)

define(isally,__+3810)


//define(rapidRate,__+80)

//define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

//getMonostruct(Weapon)
//define(upd,"Weapon:Update")
//define(amm,"Weapon.bulletsLeft")
//define(clp,"Weapon.bulletsPerClip")
//define(self,"Weapon.selfTag")
getMonostruct(Core)
//define(wcore,"Weapon.CORE")
define(enNow,"Core.Energy")
define(enMax,"Core.MaxEnergy")
define(hpNow,"Core.Health")
define(hpMax,"Core.MaxHealth")
define(self,"Core.selfTag")
getMonostruct(AIUnitInfo)
define(upd,"AIUnitInfo:Update")
//getMonostruct("Component")
//getMonostruct("GameObject")
define(gobj,"UnityEngine:Component:get_gameObject")
define(cmpo,"UnityEngine:GameObject:GetComponent")


//define(f1sMini,"MiniGun:FireOneShot")
//define(ammMini,"MiniGun.bulletsLeft")
//define(clpMini,"MiniGun.bulletsPerClip")
//define(nxfMini,"MiniGun.nextFireTime")
[ENABLE]
assert(ucore2+04,1)
assert(upd,55 8b ec 53 57)

alloc(_uupd,$400,upd)

label(_done)
_uupd+20:
monoTailCave32(1,"AIUnitInfo:Update",5)
push edi
push ebx
push ecx
push edx

mov  edi,[ebp+08]
mov  [__+0a4],eax

sub  esp,0c
push edi
call gobj
add  esp,10
mov  [__+0a8],eax

sub  esp,08
push [ucore1]
push eax
call cmpo
add  esp,10

mov  ebx,eax
mov  [__+0ac],ebx


test ebx,ebx
je   _done
mov  eax,[ebx]
mov  eax,[eax]
mov  eax,[eax+08]
mov  eax,[eax+14]
cmp  eax,[ucore2]
jne  _done
mov  [__+0b0],ebx


mov  eax,[ebx+self]
mov  [__+0b4],eax
call isally
test eax,eax
je   @f
mov  eax,[ebx+self]
mov  [__+0b8],eax

mov  eax,[ebx+enMax]
mov  [ebx+enNow],eax

fild  dword ptr [ebx+hpMax]
fstp  dword ptr [ebx+hpNow]

_done:
pop  edx
pop  ecx
pop  ebx
pop  edi

pop  ebp
ret

upd:
jmp  _uupd+20
registersymbol(_uupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_uupd)
unregistersymbol(_uupd)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>53</ID>
                  <Description>"PlayerTag"</Description>
                  <LastState Activated="0" RealAddress="0000000C"/>
                  <Color>80000008</Color>
                  <VariableType>String</VariableType>
                  <Length>8</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>C</Offset>
                    <Offset>B4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>54</ID>
                  <Description>"PlayerTag"</Description>
                  <LastState Activated="0" RealAddress="0000000C"/>
                  <Color>80000008</Color>
                  <VariableType>String</VariableType>
                  <Length>8</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>C</Offset>
                    <Offset>B8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"mul"</Description>
              <LastState Value="10" Activated="0" RealAddress="04AC001C"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>__</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>55</ID>
              <Description>"base +resource"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIBase)
define(btime,"AIBase.TimerBuild")
define(brsc,"AIBase.IResource")
define(self,"AIBase.selfTag")
define(upd,"AIBase:Update")
[ENABLE]
assert(upd,55 8b ec 53 57)

alloc(_bupd,$200,upd)

label(_done)
__+1c:
dd (float)10
_bupd+20:
monoTailCave32(1,"AIBase:Update",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
add   dword ptr [edi+brsc],3e7
cmp   dword ptr [edi+btime],(float)1
jl    _done
fld1
fdiv  dword ptr [__+40]
fstp  dword ptr [edi+btime]


_done:
pop  edi
pop  ebp
ret

upd:
jmp  _bupd+20
registersymbol(_bupd)

[DISABLE]
upd:
db 55 8b ec 53 57

dealloc(_bupd)
unregistersymbol(_bupd)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>58</ID>
              <Description>"AIBot(?)v2"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIBot)
define(find,"AIBot.FindingDistance")//int
define(fire,"AIBot.FireDistance")//int
define(punch,"AIBot.PunchDistance")//int
define(spd,"AIBot.Speed")//int
define(spdg,"AIBot.SpeedGround")//int
define(spda,"AIBot.SpeedAir")//int
define(spdw,"AIBot.WheelSpeed")//int
define(accel,"AIBot.Acceleration")//int
define(accelg,"AIBot.AccelerationGround")//int
define(accela,"AIBot.AccelerationAir")//int
//define(frate,"AIBot.fireRate")// float
define(self,"AIBot.selfTag")
define(init,"AIBot:Update")
[ENABLE]
assert(init,55 8b ec 53 57 )

alloc(_btinit,$200,init)

label(_done)
__+1c:
dd (float)10
_btinit+20:
monoTailCave32(1,"AIBot:Update",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done

{
mov   eax,[edi+find]
add   [edi+find],eax
mov   eax,[edi+fire]
add   [edi+fire],eax
mov   eax,[edi+punch]
add   [edi+punch],eax

mov   eax,[edi+spd]
add   [edi+spd],eax
mov   eax,[edi+spdg]
add   [edi+spdg],eax
mov   eax,[edi+spda]
add   [edi+spda],eax
mov   eax,[edi+spdw]
add   [edi+spdw],eax
mov   eax,[edi+accel]
add   [edi+accel],eax
mov   eax,[edi+accelg]
add   [edi+accelg],eax
mov   eax,[edi+accela]
add   [edi+accela],eax

//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//add   dword ptr [edi+brsc],0a
}
_done:
pop  edi
pop  ebp
ret

init:
jmp  _btinit+20
registersymbol(_btinit)

[DISABLE]
init:
db 55 8b ec 53 57

dealloc(_btinit)
unregistersymbol(_btinit)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"AIAir"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIAir)
define(find,"AIAir.FindingDistance")//int
define(fire,"AIAir.FireDistance")//int
define(strike,"AIAir.StrikeDistance")//int
define(spd,"AIAir.Speed")//float
define(spdt,"AIAir.TurretSpeed")//int
define(amm,"AIAir.Bullets")//float
//define(frate,"AIAir.fireRate")// float
define(self,"AIAir.selfTag")
define(init,"AIAir:Start")
[ENABLE]
assert(init,55 8b ec 53 57)

alloc(_aainit,$200,init)

label(_done)
__+1c:
dd (float)10
_aainit+20:
monoTailCave32(1,"AIAir:Start",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done


mov   eax,[edi+find]
add   [edi+find],eax
mov   eax,[edi+fire]
add   [edi+fire],eax
mov   eax,[edi+strike]
add   [edi+strike],eax

fld   dword ptr[edi+spd]
fadd  dword ptr[edi+spd]
fstp  dword ptr[edi+spd]


mov   eax,[edi+spdt]
add   [edi+spdt],eax

fld   dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fadd  dword ptr[edi+amm]
fstp  dword ptr[edi+amm]


//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//add   dword ptr [edi+brsc],0a

_done:
pop  edi
pop  ebp
ret

init:
jmp  _aainit+20
registersymbol(_aainit)

[DISABLE]
init:
db 55 8b ec 53 57

dealloc(_aainit)
unregistersymbol(_aainit)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"AIBot(?)"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>usemono()
define(isally,__+3810)

define(dt,"UnityEngine:Time:get_deltaTime")// 0 parameter

getMonostruct(AIBot)
define(find,"AIBot.FindingDistance")//int
define(fire,"AIBot.FireDistance")//int
define(punch,"AIBot.PunchDistance")//int
define(spd,"AIBot.Speed")//int
define(spdg,"AIBot.SpeedGround")//int
define(spda,"AIBot.SpeedAir")//int
define(spdw,"AIBot.WheelSpeed")//int
define(accel,"AIBot.Acceleration")//int
define(accelg,"AIBot.AccelerationGround")//int
define(accela,"AIBot.AccelerationAir")//int
//define(frate,"AIBot.fireRate")// float
define(self,"AIBot.selfTag")
define(init,"AIBot:Start")
[ENABLE]
assert(init,55 8b ec 53 57 )

alloc(_btinit,$200,init)

label(_done)
__+1c:
dd (float)10
_btinit+20:
monoTailCave32(1,"AIBot:Start",5)
push  edi
mov   edi,[ebp+08]

mov   eax,[edi+self]
call  isally
test  eax,eax
je    _done

{
mov   eax,[edi+find]
add   [edi+find],eax
mov   eax,[edi+fire]
add   [edi+fire],eax
mov   eax,[edi+punch]
add   [edi+punch],eax

mov   eax,[edi+spd]
add   [edi+spd],eax
mov   eax,[edi+spdg]
add   [edi+spdg],eax
mov   eax,[edi+spda]
add   [edi+spda],eax
mov   eax,[edi+spdw]
add   [edi+spdw],eax
mov   eax,[edi+accel]
add   [edi+accel],eax
mov   eax,[edi+accelg]
add   [edi+accelg],eax
mov   eax,[edi+accela]
add   [edi+accela],eax

//cmp   dword ptr [edi+btime],(float)1
//jl    _done
//fld   dword ptr [edi+btime]
//call  dt
//fmul  dword ptr [__+1c]
//fsubp st(1),st(0)

//-===not work
//fldz
//fstp  dword ptr [edi+btime]

//add   dword ptr [edi+brsc],0a
}
_done:
pop  edi
pop  ebp
ret

init:
jmp  _btinit+20
registersymbol(_btinit)

[DISABLE]
init:
db 55 8b ec 53 57

dealloc(_btinit)
unregistersymbol(_btinit)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>04AC0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
