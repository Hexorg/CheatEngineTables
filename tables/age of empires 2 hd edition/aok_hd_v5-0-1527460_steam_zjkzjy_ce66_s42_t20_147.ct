<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>233</ID>
      <Description>"[X] &lt;== Age of Empires II HD Edition Steam Script (ACTIVATE ME FIRST)"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Age of Empires II - HD Edition - The Forgotten
 Game Version  : 5.0.1527460
 Game Sponsor  : zjkzjy + Myself (DLC)
 Proces Name   : AoK HD.exe
 Script Version: 1.0
 CE Version    : 6.6
 Release date  : 19-Dec-2016
 Author        : Recifense
 History:
 19-Dec-16: First Release
 Features:
 - Prepare environment for disabling CRC Checking
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.6) then
    ShowMessage('Sorry. CE version should be 6.6 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "AoK HD.exe") then
    ShowMessage('Error. Expected Process = AoK HD.exe')
  end
{$asm}

//=========================================
// Definitions
define(CODESIZE,0x0057fe00)
define(LUDO,"AoK HD.exe")

//=========================================
define(ctCE66,(float)6.6)
//=========================================
[ENABLE]
//=========================================
alloc(CodeCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,LUDO)
//=========================================
label(iFlagOK)
label(pCodeCopy)
//=========================================
registersymbol(CodeCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pCodeCopy)
//=========================================
_IniMem:
 pushad
 pushfd

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 cld
 rep movsd

 mov dword ptr [iFlagOK],55555555

 popfd
 popad
 ret
//=========================================
align 10,'='
//=========================================
 db '===============================&gt;'
 db 'CE6.6 Script by Recifense 121916'
//=========================================
// Variables
pCodeCopy:
 dd CodeCopy
iFlagOK:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(CodeCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pCodeCopy)
//=========================================
dealloc(CodeCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"[X] &lt;== Age of Empires II HD Edition v5.0.1527460 Steam Script 4.2"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Age of Empires II - HD Edition - The Forgotten
 Game Version  : 5.0.1527480
 Game Sponsor  : zjkzjy + Myself (DLC)
 Proces Name   : AoK HD.exe
 Script Version: 4.2 (Semi-AOB)
 CE Version    : 6.6
 Release date  : 19-Dec-2016
 Author        : Recifense
 History:
 12-Jul-13: First Release
 16-Jul-13: Added 3 features (script 2.0)
 20-Jul-13: Release for new steam version (build: 12.21.1234.11)
 27-Jul-13: Release for new steam version 2.6
 22-Sep-13: Release for version 2.8 (steam)
 08-Nov-13: Release for version 3.0.1536 (steam)
 09-Nov-13: Release for version 3.0.1560 (steam)
 11-Nov-13: Release for version 3.0.1570 (steam)
 06-Dec-13: Release for version 3.1.1630 (steam)
 13-Dec-13: Release for version 3.1.1645 (steam)
 19-Jan-14: Release for version 3.2.1686 (steam)
 02-Mar-14: Release for version 3.2.1692 (steam)
 06-Mar-14: Release for version 3.3.1769 (steam)
 15-Apr-14: Release for version 3.4.2058 (steam)
 17-Apr-14: Release for version 3.4.2069 (steam)
 27-Apr-14: Release for version 3.5.2209 (steam)
 20-Jun-14: Release for version 3.6.2435 (steam)(CE64)
 06-Aug-14: Release for version 3.7.2608 (steam)
 27-Sep-14: Release for version 3.7.2662 (steam)
 18-Apr-15: Release for version 3.9.2684 (steam)
 18-Jun-15: Release for version 4.0.663138 (steam)
 24-Jun-15: Release for version 4.1.669586 (steam)
 26-Jun-15: Release for version 4.2.673829 (steam)
 29-Jun-15: Release for version 4.2.675940 (steam)
 04-Jul-15: Release for version 4.2.681794 (steam)
 21-Jul-15: Release for version 4.2.696333 (steam)
 21-Jul-15: Release for version 4.2.696333 (steam)(AOB)
 13-Aug-15: Release for version 4.3.732635 (steam)
 22-Aug-15: Release for version 4.3.738906 (steam)
 24-Sep-15: Release for version 4.3.761340 (steam)
 06-Nov-15: Release for version 4.4.846412 (steam)
 06-Nov-15: Release for version 4.4.848690 (steam)
 09-Nov-15: Release for version 4.4.851564 (steam)
 10-Nov-15: Release for version 4.4.853101 (steam)
 12-Nov-15: Release for version 4.4.856194 (steam)
 20-Nov-15: Release for version 4.5.865917 (steam)
 05-Dec-15: Release for version 4.6.884312 (steam)
 09-Dec-15: Release for version 4.6.890962 (steam)
 06-Jan-16: Release for version 4.6.919850 (steam) AOB+LUA
 31-May-16: No more AOB+LUA. Now it is semi-AOB.
 23-Aug-16: Release for version 4.7.1289507 (steam) semi-AOB
 14-Dec-16: Release for version 4.8b.1504932 (steam) semi-AOB
 16-Dec-16: Release for version 4.9.1524528 (steam) semi-AOB
 19-Dec-16: Release for version 5.0.1527460 (steam) semi-AOB
Features:
 - Minimum Resources
 - God Mode
 - Instant Construction
 - Instant Unit Production
 - Instant Research
 - CRC Protection Bypass
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.6) then
    ShowMessage('Sorry. CE version should be 6.6 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "AoK HD.exe") then
    ShowMessage('Error. Expected Process = AoK HD.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"AoK HD.exe")
define(LUDOSTA,"AoK HD.exe"+00000000)
define(LUDOEND,"AoK HD.exe"+004b9900)

//define(MPLR,"AoK HD.exe"+002fdf1a) //30#====#=
//define(GDMD,"AoK HD.exe"+00199b66) //30==#==#=
//define(GDM1,"AoK HD.exe"+004a8b31) //30==#==##
//define(GDM2,"AoK HD.exe"+0049edb0) //30==#==##
//define(MBCN,"AoK HD.exe"+0049e0df) //30==#==#=
//define(MUPN,"AoK HD.exe"+000b466c) //30==#==#=
//define(MORP,"AoK HD.exe"+00434a23) //30=======
//define(MSOT,"AoK HD.exe"+00329ee3) //30==#==##

define(PRBP,"AoK HD.exe"+004b92d2) //30=======
define(PRB2,"AoK HD.exe"+004b98c2) //30=======

//=========================================
define(ctCE65,(float)6.5)
//=========================================
[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(MPLR,"AoK HD.exe",8b 48 3c 0f 2e 01 9f f6 c4 44 ?? ?? f3 0f 10 87 3c 01 00 00 ?? ??)
AOBScanModule(GDMD,"AoK HD.exe",f3 0f 11 46 34 85 ff ?? ?? 8b 47 0c 80 78 04 3c ?? ?? 8b 9f 90 01)
AOBScanModule(GDM1,"AoK HD.exe",f3 0f 11 4f 34 8b 47 10 83 b8 d8 1a 00 00 00 0f 8e ?? ?? ?? ?? f3)
AOBScanModule(GDM2,"AoK HD.exe",f3 0f 11 4e 34 8b 46 10 8b 88 d8 1a 00 00 85 c9 0f 8e ?? ?? ?? ??)
AOBScanModule(MBCN,"AoK HD.exe",f3 0f 11 8f 40 02 00 00 0f bf 81 9e 01 00 00 66 0f 6e c0 0f 5b c0)
AOBScanModule(MUPN,"AoK HD.exe",0f bf 80 9e 01 00 00 66 0f 6e c0 0f 5b c0 0f 2f c8 ?? ?? 8b cf e8)
AOBScanModule(MORP,"AoK HD.exe",f3 0f 10 04 f1 66 0f 6e c8 0f 5b c9 f3 0f 58 ca 0f 2f c1 ?? ?? 57)
AOBScanModule(MSOT,"AoK HD.exe",f3 0f 10 42 34 8b 80 d8 1a 00 00 0f b7 71 10 89 45 e0 8a 42 4c ??)

assert(PRBP,8b 74 24 10 8b 4c 24 14 8b 7c 24 0c 8b c1 8b d1 03 c6 3b fe)
assert(PRB2,8b 74 24 10 8b 4c 24 14 8b 7c 24 0c 8b c1 8b d1 03 c6 3b fe)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_MonBuildingConst)
label(_BackMBC)
label(_ExitMBC)
label(_MonUnitProd)
label(_BackMUP)
label(_ExitMUP)
label(_MonResearchProg)
label(_BackMRP)
label(_ExitMRP)
label(_MonSelObject)
label(_BackMSO)
label(_ExitMSO)
label(pObject)
label(_ProtectionBypass)
label(_BackPBP)
label(_ExitPBP)
label(_ProtectionBypass2)
label(_BackPB2)
label(_ExitPB2)
label(pUnit)
label(pPlayer)
label(iEnableMMR)
label(iEnableGMD)
label(iEnableCRC)
label(iEnableMBC)
label(iEnableMUP)
label(iEnableMRP)
label(iCount)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMMR)
registersymbol(iEnableGMD)
registersymbol(iEnableCRC)
registersymbol(iEnableMBC)
registersymbol(iEnableMUP)
registersymbol(iEnableMRP)
registersymbol(pObject)
registersymbol(pUnit)
registersymbol(pPlayer)
registersymbol(iCount)

registersymbol(MPLR)
registersymbol(GDMD)
registersymbol(GDM1)
registersymbol(GDM2)
registersymbol(MBCN)
registersymbol(MUPN)
registersymbol(MORP)
registersymbol(MSOT)

//=========================================
MyCode:
//========================================= 4.8b
// On main Screen
_MonHumanPlayer:
 push ebx
 push edx

 mov ecx,[eax+3C]                  // Original code (get pRes)

 mov [pPlayer],eax

 cmp dword ptr [iEnableMMR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov edx,(float)16600.0

 mov ebx,[ecx]
 cmp edx,ebx
 cmovg ebx,edx
 mov [ecx],ebx

 mov ebx,[ecx+04]
 cmp edx,ebx
 cmovg ebx,edx
 mov [ecx+04],ebx

 mov ebx,[ecx+08]
 cmp edx,ebx
 cmovg ebx,edx
 mov [ecx+08],ebx

 mov ebx,[ecx+0c]
 cmp edx,ebx
 cmovg ebx,edx
 mov [ecx+0c],ebx

_ExitMHP:
 pop edx
 pop ebx

 mov ecx,[eax+3C]                  // Original code (get pRes)
 ucomiss xmm0,[ecx]                // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.8b
_GodMode:
 push ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ecx,[esi+10]
 cmp ecx,[pPlayer]
 jne _ExitGMD

 mov ecx,[esi+0c]                  // Unit info
 movzx ecx,word ptr [ecx+2a]       // Get mHP

 cvtsi2ss xmm0,ecx                 // Convert INT to FLOAT

_ExitGMD:
 pop ecx

 movss [esi+34],xmm0               // Original code (rds fcHP)
 jmp _BackGMD                      // Back to main code

//=========================================
align 10,cc
//========================================= 5.0
// During combat (Units)
_GodMode1:
 push eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 mov eax,[edi+10]
 cmp eax,[pPlayer]
 jne _ExitGM1

 mov eax,[edi+0c]                  // Unit info
 movzx eax,word ptr [eax+2a]       // Get mHP

 cvtsi2ss xmm1,eax                 // Convert INT to FLOAT

_ExitGM1:
 pop eax

 movss [edi+34],xmm1               // Original code (upds HP)
 jmp _BackGM1                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.8b
// During combat (Units)
_GodMode2:
 push eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 mov eax,[esi+10]
 cmp eax,[pPlayer]
 jne _ExitGM2

 mov eax,[esi+0c]                  // Unit info
 movzx eax,word ptr [eax+2a]       // Get mHP

 cvtsi2ss xmm1,eax                 // Convert INT to FLOAT

_ExitGM2:
 pop eax

 movss [esi+34],xmm1               // Original code (upds HP)
 jmp _BackGM2                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.8b
// EAX = Free
// ECX = pBuildInfo
// EDI = pBuilding
_MonBuildingConst:
 cmp dword ptr [iEnableMBC],0
 je _ExitMBC                       // Jump if feature is disabled

 mov eax,[edi+10]
 cmp eax,[pPlayer]
 jne _ExitMBC

 movzx eax,word ptr [ecx+2a]       // Get mHP
 cvtsi2ss xmm1,eax                 // Convert INT to FLOAT
 movss [edi+34],xmm1

 movzx eax,word ptr [ecx+0000019e] // Get wmConstValue
 cvtsi2ss xmm1,eax                 // Convert INT to FLOAT

_ExitMBC:
 movss [edi+00000240],xmm1         // Original code (upds const prog)
 jmp _BackMBC                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.8b
// EAX  = pUnitInfo
// ESI  = pUnitProd
// XMM1 = Current Progress
// XMM0 = Free
_MonUnitProd:
 push ebx
 push ecx

 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                       // Jump if feature is disabled

 mov ebx,[edi+08]                  // Get pBuilding
 mov ecx,[ebx+10]                  // Get pOwner
 cmp ecx,[pPlayer]
 jne _ExitMUP

 movzx ecx,word ptr [eax+0000019e] // Get wmConstValue
 cvtsi2ss xmm0,ecx                 // Convert INT to FLOAT

 movss [edi+44],xmm0               // Make current value = value needed
 movss xmm1,xmm0                   // Make current value = value needed

_ExitMUP:
 pop ecx
 pop ebx

 movsx eax,word ptr [eax+0000019e] // Original code (rds value needed)
 jmp _BackMUP                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.4
// ECX  = ArrayOfValues
// ESI  = IndexOfValue
// XMM0 = Current Research Progress
// XMM2 = Needed Value
// [ebp+3c] = pBuilding and [ebp+40] = pOwner
_MonResearchProg:
 push eax

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov eax,[ebp+50]                  // Get pOwner
 cmp eax,[pPlayer]
 jne _ExitMRP

 movss [ecx+esi*8],xmm2            // Make current value = value needed

_ExitMRP:
 pop eax

 movss xmm0,[ecx+esi*8]            // Original code (get res prog)
 jmp _BackMRP                      // Back to main code

//=========================================
align 10,cc
//========================================= 4.8b
// Object selected or under cursor (Building or Unit)
_MonSelObject:
 mov [pObject],edx

_ExitMSO:
 movss xmm0,[edx+34]               // Original code (rds HP)
 jmp _BackMSO                      // Back to main code

//=========================================
align 10,cc
//=========================================
// Try to bypass protection
// EAX and EDX are free to be used
_ProtectionBypass:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitPBP

 cmp dword ptr [iEnableCRC],0
 je _ExitPBP                        // Jump if feature is disabled

 mov ecx,[esp+10]

 cmp ecx,LUDOSTA
 jl _ExitPBP

 cmp ecx,LUDOEND
 jge _ExitPBP

 mov eax,LUDO
 sub ecx,eax
 mov eax,CodeCopy
 add ecx,eax

 mov [esp+10],ecx

// inc dword ptr [iCount]

_ExitPBP:
 mov esi,[esp+10]                  // Original code
 mov ecx,[esp+14]                  // Original code
 jmp _BackPBP                      // Back to main code

//=========================================
align 10,cc
//=========================================
// Try to bypass protection
// EAX and EDX are free to be used
_ProtectionBypass2:
 cmp dword ptr [iFlagOK],55555555
 jne _ExitPB2

 cmp dword ptr [iEnableCRC],0
 je _ExitPB2                        // Jump if feature is disabled

 mov ecx,[esp+10]

 cmp ecx,LUDOSTA
 jl _ExitPB2

 cmp ecx,LUDOEND
 jge _ExitPB2

 mov eax,LUDO
 sub ecx,eax
 mov eax,CodeCopy
 add ecx,eax

 mov [esp+10],ecx

 inc dword ptr [iCount]

_ExitPB2:
 mov esi,[esp+10]                  // Original code
 mov ecx,[esp+14]                  // Original code
 jmp _BackPB2                      // Back to main code

//=========================================
align 10,'='
//=========================================
 db '===============================&gt;'
 db 'CE6.6 Script by Recifense 121916'
//=========================================
// Variables
iEnableMMR:
 dd 0
iEnableGMD:
 dd 0
iEnableMBC:
 dd 0
iEnableMUP:
 dd 0
iEnableMRP:
 dd 0
iEnableCRC:
 dd 1
pObject:
 dd 0
pUnit:
 dd 0
pPlayer:
 dd MyCode
iCount:
 dd 0

//=========================================
// Hacking Points
MPLR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

GDMD:
 jmp _GodMode
_BackGMD:

GDM1:
 jmp _GodMode1
_BackGM1:

GDM2:
 jmp _GodMode2
_BackGM2:

MBCN:
 jmp _MonBuildingConst
 nop
 nop
 nop
_BackMBC:

MUPN:
 jmp _MonUnitProd
 nop
 nop
_BackMUP:

MORP:
 jmp _MonResearchProg
_BackMRP:

MSOT:
 jmp _MonSelObject
_BackMSO:

PRBP:
 jmp _ProtectionBypass
 nop
 nop
 nop
_BackPBP:

PRB2:
 jmp _ProtectionBypass2
 nop
 nop
 nop
_BackPB2:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MPLR:
// mov ecx,[eax+3C]
// ucomiss xmm0,[ecx]
 db 8b 48 3c 0f 2e 01

GDMD:
// movss [esi+34],xmm0
 db f3 0f 11 46 34

GDM1:
// movss [edi+34],xmm1
 db f3 0f 11 4f 34

GDM2:
// movss [esi+34],xmm1
 db f3 0f 11 4e 34

MBCN:
// movss [edi+00000240],xmm1
 db f3 0f 11 8f 40 02 00 00

MUPN:
// movsx eax,word ptr [eax+0000019e]
 db 0f bf 80 9e 01 00 00

MORP:
// movss xmm0,[ecx+esi*8]
 db f3 0f 10 04 f1

MSOT:
// movss xmm0,[edx+34]
 db f3 0f 10 42 34

PRBP:
// mov esi,[esp+10]
// mov ecx,[esp+14]
 db 8b 74 24 10 8b 4c 24 14

PRB2:
// mov esi,[esp+10]
// mov ecx,[esp+14]
 db 8b 74 24 10 8b 4c 24 14

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableCRC)
unregistersymbol(iEnableMBC)
unregistersymbol(iEnableMUP)
unregistersymbol(iEnableMRP)
unregistersymbol(pObject)
unregistersymbol(pUnit)
unregistersymbol(pPlayer)
unregistersymbol(iCount)

unregistersymbol(MPLR)
unregistersymbol(GDMD)
unregistersymbol(GDM1)
unregistersymbol(GDM2)
unregistersymbol(MBCN)
unregistersymbol(MUPN)
unregistersymbol(MORP)
unregistersymbol(MSOT)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode ----------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Minimum Resources -----------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMR",1)
getAddressList().getMemoryRecordByID(229).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMR",0)
getAddressList().getMemoryRecordByID(229).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"[X] &lt;== Instant Construction -----------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMBC",1)
getAddressList().getMemoryRecordByID(230).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMBC",0)
getAddressList().getMemoryRecordByID(230).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>231</ID>
          <Description>"[X] &lt;== Instant Unit Production --------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
getAddressList().getMemoryRecordByID(231).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
getAddressList().getMemoryRecordByID(231).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>232</ID>
          <Description>"[X] &lt;== Instant Research ---------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRP",1)
getAddressList().getMemoryRecordByID(232).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRP",0)
getAddressList().getMemoryRecordByID(232).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20161219</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Age of Empires II - HD Edition - The Forgotten
 Game Version  : 5.0.1527480
 Game Sponsor  : zjkzjy + Myself (DLC)
 Proces Name   : AoK HD.exe
 Script Version: 4.2 (Semi-AOB)
 CE Version    : 6.6
 Release date  : 19-Dec-2016
 Author        : Recifense
 History:
 12-Jul-13: First Release
 16-Jul-13: Added 3 features (script 2.0)
 20-Jul-13: Release for new steam version (build: 12.21.1234.11)
 27-Jul-13: Release for new steam version 2.6
 22-Sep-13: Release for version 2.8 (steam)
 08-Nov-13: Release for version 3.0.1536 (steam)
 09-Nov-13: Release for version 3.0.1560 (steam)
 11-Nov-13: Release for version 3.0.1570 (steam)
 06-Dec-13: Release for version 3.1.1630 (steam)
 13-Dec-13: Release for version 3.1.1645 (steam)
 19-Jan-14: Release for version 3.2.1686 (steam)
 02-Mar-14: Release for version 3.2.1692 (steam)
 06-Mar-14: Release for version 3.3.1769 (steam)
 15-Apr-14: Release for version 3.4.2058 (steam)
 17-Apr-14: Release for version 3.4.2069 (steam)
 27-Apr-14: Release for version 3.5.2209 (steam)
 20-Jun-14: Release for version 3.6.2435 (steam)(CE64)
 06-Aug-14: Release for version 3.7.2608 (steam)
 27-Sep-14: Release for version 3.7.2662 (steam)
 18-Apr-15: Release for version 3.9.2684 (steam)
 18-Jun-15: Release for version 4.0.663138 (steam)
 24-Jun-15: Release for version 4.1.669586 (steam)
 26-Jun-15: Release for version 4.2.673829 (steam)
 29-Jun-15: Release for version 4.2.675940 (steam)
 04-Jul-15: Release for version 4.2.681794 (steam)
 21-Jul-15: Release for version 4.2.696333 (steam)
 21-Jul-15: Release for version 4.2.696333 (steam)(AOB)
 13-Aug-15: Release for version 4.3.732635 (steam)
 22-Aug-15: Release for version 4.3.738906 (steam)
 24-Sep-15: Release for version 4.3.761340 (steam)
 06-Nov-15: Release for version 4.4.846412 (steam)
 06-Nov-15: Release for version 4.4.848690 (steam)
 09-Nov-15: Release for version 4.4.851564 (steam)
 10-Nov-15: Release for version 4.4.853101 (steam)
 12-Nov-15: Release for version 4.4.856194 (steam)
 20-Nov-15: Release for version 4.5.865917 (steam)
 05-Dec-15: Release for version 4.6.884312 (steam)
 09-Dec-15: Release for version 4.6.890962 (steam)
 06-Jan-16: Release for version 4.6.919850 (steam) AOB+LUA
 31-May-16: No more AOB+LUA. Now it is semi-AOB.
 23-Aug-16: Release for version 4.7.1289507 (steam) semi-AOB
 14-Dec-16: Release for version 4.8b.1504932 (steam) semi-AOB
 16-Dec-16: Release for version 4.9.1524528 (steam) semi-AOB
 19-Dec-16: Release for version 5.0.1527460 (steam) semi-AOB
Features:
 - Minimum Resources       [1]
 - God Mode                [2]
 - Instant Construction    [3]
 - Instant Unit Production [4]
 - Instant Research        [5]
 - CRC Protection Bypass   [*]
===========================================
[1] Minimum Resources = 6400 (human player only);;
[2] For human player's units and buildings;
[3] That's it (human player only);
[4] That's it (human player only);
[5] That's it (human player only);
[*] The second script depends on the first script;
===========================================
[USAGE]
 - Run CE 6.5;
 - Run the GAME;
 - Load game process "AoK HD.exe" via CE6.5;
 - Load this Table;
 - Activate the first script  by clicking on its box [X];
 - Activate the second script by clicking on its box [X];
 - Now Activate the script of each cheat you want to use;
 - Go back to the game and have fun.
===========================================
HOTKEYS:
CTRL+Home     = Enable  Resources and GM cheats;
CTRL+End      = Disable Resources and GM cheats;
-----
CTRL+PageUp   = Enable  Construction/Production cheats;
CTRL+PageDown = Disable Construction/Production cheats;
-----
CTRL+Insert   = Enable  Research cheat;
CTRL+Delete   = Disable Research cheat;
===========================================
[WARNING]
- This table is meant to be used in single player games.
===========================================
[INFO]
Tested on Win10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
