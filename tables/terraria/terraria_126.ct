<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Max Health"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>150</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys/>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Current Health"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>154</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>72</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Max Mana"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>160</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Current Mana"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>158</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>34</ID>
      <Description>"Max Breath"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>E0</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Current Breath"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>"steam.dll"+002915E4</Address>
      <Offsets>
        <Offset>E4</Offset>
        <Offset>658</Offset>
        <Offset>490</Offset>
        <Offset>614</Offset>
        <Offset>8</Offset>
        <Offset>228</Offset>
      </Offsets>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>66</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Always Shiny"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(check_helm)
registersymbol(check_helm)
aobscan(helm_aob, 0F 85 D5 00 00 00 8B 85 0c f9 ff ff D9 80 60 02)
label(set_light)
registersymbol(set_light)
aobscan(light_aob, 68 1F 85 6B 3F 68 CD CC 4C 3F 68 66 66 26 3F 8B 8D EC FE FF FF 8B D0 FF 15 ?? ?? ?? ?? 8B 05 2C)

helm_aob:
check_helm:
db 90 90 90 90 90 90

light_aob:
set_light:
push (float)0.99
push (float)0.90
push (float)0.88
 
[DISABLE]
check_helm:
db 0F 85 D5 00 00 00
unregistersymbol(check_helm)
set_light:
push (float)0.92
push (float)0.8
push (float)0.65
unregistersymbol(set_light)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Always Super Shiny"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(exit)
label(check_helm)
registersymbol(check_helm)
aobscan(helm_aob, 0F 85 D5 00 00 00 8B 85 0c f9 ff ff D9 80 60 02)
label(set_light)
registersymbol(set_light)
aobscan(light_aob, 68 1F 85 6B 3F 68 CD CC 4C 3F 68 66 66 26 3F 8B 8D EC FE FF FF 8B D0 FF 15 ?? ?? ?? ?? 8B 05 2C)
alloc(y,4)
alloc(x,4)
alloc(addlight_proc_addr,4)
alloc(step,4)

helm_aob:
check_helm:
//pretend we're wearing mining helmet regardless of actual helmet worn
db 90 90 90 90 90 90

light_aob:
set_light:
//save player coords for spawning lights
mov [y],eax
mov edx,[ebp-114]
mov [x],edx
jmp newmem
returnhere:

newmem:
mov [step],6 //interval distance of halo lights
//save address of function that creates new light sources
mov ecx,[set_light+19]
mov [addlight_proc_addr],ecx //function sig would look like "fastcall void newlight(x,y,r,g,b)"

//create a light like mining helmet, but brighter
mov ecx,[x]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the left
mov ecx,[x]
sub ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the right
mov ecx,[x]
add ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks above
mov ecx,[x]
mov edx,[y]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks below
mov ecx,[x]
mov edx,[y]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the left
mov ecx,[x]
sub ecx,[step]
sub ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the right
mov ecx,[x]
add ecx,[step]
add ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks above
mov ecx,[x]
mov edx,[y]
sub edx,[step]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks below
mov ecx,[x]
mov edx,[y]
add edx,[step]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the left and up
mov ecx,[x]
sub ecx,[step]
mov edx,[y]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the right and up
mov ecx,[x]
add ecx,[step]
mov edx,[y]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the left and down
mov ecx,[x]
sub ecx,[step]
mov edx,[y]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a few blocks to the right and down
mov ecx,[x]
add ecx,[step]
mov edx,[y]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance to the left
mov ecx,[x]
sub ecx,[step]
sub ecx,[step]
sub ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance to the left
mov ecx,[x]
sub ecx,[step]
sub ecx,[step]
sub ecx,[step]
sub ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance to the right
mov ecx,[x]
add ecx,[step]
add ecx,[step]
add ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance to the right
mov ecx,[x]
add ecx,[step]
add ecx,[step]
add ecx,[step]
add ecx,[step]
mov edx,[y]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance below
mov ecx,[x]
mov edx,[y]
add edx,[step]
add edx,[step]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance below
mov ecx,[x]
mov edx,[y]
add edx,[step]
add edx,[step]
add edx,[step]
add edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance above
mov ecx,[x]
mov edx,[y]
sub edx,[step]
sub edx,[step]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

//create an additional light, a fair distance above
mov ecx,[x]
mov edx,[y]
sub edx,[step]
sub edx,[step]
sub edx,[step]
sub edx,[step]
push (float)0.99
push (float)0.95
push (float)0.90
mov eax,[addlight_proc_addr]
call [eax]

exit:
jmp returnhere+6


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(y)
dealloc(x)
dealloc(addlight_proc_addr)
dealloc(step)
check_helm:
db 0F 85 D5 00 00 00
//unregistersymbol(check_helm)
set_light:
db 68 1F 85 6B 3F 68 CD CC 4C 3F 68 66 66 26 3F 8B 8D EC FE FF FF 8B D0 FF 15
//unregistersymbol(set_light)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Golden Keys Not Consumed"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(keycheck)
registersymbol(keycheck)
aobscan(key_aob, ff 48 40 8b 85 0c f9 ff ff 8b 40 30 3b 78 04)

key_aob:
keycheck:
db 90 90 90

[DISABLE]
keycheck:
db ff 48 40
//unregistersymbol(keycheck)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"ctrl+f1 to max stack of mouseover (inventory only)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(mouseover)
registersymbol(mouseover)
aobscan(mouseover_aob, 8b 44 82 0c 83 78 40 01 0f 8e d3 00 00 00 8b 85 40 da ff ff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax,[edx+eax*4+0C]
pushad
push 11
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne exit
pushad
push 70
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne exit
mov edx,[eax+44]
mov [eax+40],edx
exit:
cmp dword ptr [eax+40],01
jmp returnhere

mouseover_aob:
mouseover:
jmp newmem
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
mouseover:
mov eax,[edx+eax*4+0C]
cmp dword ptr [eax+40],01
//Alt: db 8B 44 82 0C 83 78 40 01
//unregistersymbol(mouseover)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>36</ID>
      <Description>"Always best prefixes"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(flag,4)
registersymbol(flag) //for debugging purposes
label(force_prefix)
registersymbol(force_prefix)
aobscan(force_prefix_aob, 75 02 33 DB 83 7D F0 FF 7D 03 83 CB FF 83 FB FF 74 0E 83 FB FE 74 09 83 FB FD 0F 85 77 0A 00 00)
label(invalid_prefix) //because game will do stuff like assign unreal to no knockback weapons (like minishark), then repeat at random until it finds a valid prefix
registersymbol(invalid_prefix) //this will avoid indefinite postponement, but will forfeit prefix selection as a result, 'cause the logic to hard-code every possible exception for optimal prefix is too much work.
aobscan(invalid_prefix_aob, 89 55 DC DB 45 DC D9 5D DC D9 45 DC D8 CC DD 5D C8 DD 45 C8 DB 5D DC 8B 45 DC 89 47 64)
alloc(invalid_prefix_mem,1024)
label(legendary)
registersymbol(legendary)
label(legendary_cmp)
aobscan(legendary_aob, 0F 85 C3 07 00 00 BB 51 00 00 00 E9 B9 07 00 00 3D A2 00 00 00 0F 84 82 00 00 00 3D A0 00 00 00)
alloc(legendary_mem,1024)
label(godly)
registersymbol(godly)
aobscan(godly_aob, 83 F8 0B 75 05 BB 3B 00 00 00 83 F8 0C 75 05 BB 3C 00 00 00 83 F8 0D 0F 85 78 06 00 00 BB 3D 00)
alloc(godly_mem,1024)
label(unreal)
registersymbol(unreal)
label(unreal_cmp)
aobscan(unreal_aob, 0F 85 58 04 00 00 BB 52 00 00 00 E9 4E 04 00 00 83 F8 40 74 65 83 F8 41 74 60 83 F8 70 74 5B 83)
alloc(unreal_mem,1024)
label(mythical)
registersymbol(mythical)
aobscan(mythical_aob, 0F 85 54 02 00 00 BB 53 00 00 00 E9 4A 02 00 00 83 F8 37 74 17 83 F8 77 74 12 3D BF 00 00 00 74)
label(boomerang)
registersymbol(boomerang)
aobscan(boomerang_aob, 83 F8 0B 75 05 BB 3B 00 00 00 83 F8 0C 75 05 BB 3C 00 00 00 83 F8 0D 0F 85 7A 01 00 00 BB 3D 00)
label(all_else)
registersymbol(all_else)
aobscan(all_else_aob, 6A 51 BA 3E 00 00 00 D9 5D DC D9 5D D8 D9 5D D4 D9 5D D0 8B 01 8B 40 28 FF 50 18 D9 45 D0 D9 45)

force_prefix_aob:
force_prefix:
db eb

invalid_prefix_aob:
invalid_prefix:
jmp invalid_prefix_mem
nop

invalid_prefix_mem:
mov [ebp-24],edx
mov [flag],0
fild dword ptr [ebp-24]
jmp invalid_prefix+6

legendary_aob:
legendary:
jmp legendary_mem
nop

legendary_mem:
cmp [flag],0 //wooden hammer, for example, can't be legendary
jne legendary_cmp
mov eax,27
mov [flag],1
legendary_cmp: //if random re-rolled legendary, even though flag was set
cmp eax,27
jne legendary+b
mov ebx,51
jmp legendary+b

godly_aob:
godly:
jmp godly_mem

godly_mem:
cmp [flag],0
jne godly+a
add [flag],1
mov eax,b
jmp godly+5

unreal_aob:
unreal:
jmp unreal_mem
nop

unreal_mem:
cmp [flag],0
jne unreal_cmp
mov eax,23
mov [flag],1
unreal_cmp: //if random re-rolled unreal, even though flag was set
cmp eax,23
jne unreal+b
mov ebx,52
jmp unreal+b

mythical_aob:
mythical:
db B8 23 00 00 00 90

boomerang_aob:
boomerang:
mov eax,b

all_else_aob:
all_else:
db 6a 41 ba 41

[DISABLE]
dealloc(flag)
force_prefix:
db 75
//unregistersymbol(force_prefix)
invalid_prefix:
db 89 55 dc db 45 dc
dealloc(invalid_prefix_mem)
//unregistersymbol(invalid_prefix)
legendary:
db 0f 85 c3 07 00 00
//unregistersymbol(legendary)
godly:
db 83 f8 0b 75 05
dealloc(godly_mem)
//unregistersymbol(godly)
unreal:
db 0f 85 58 04 00 00
dealloc(unreal_mem)
//unregistersymbol(unreal)
mythical:
db 0F 85 54 02 00 00
//unregistersymbol(mythical)
boomerang:
db 83 f8 0b 75 05
//unregistersymbol(boomerang)
all_else:
db 6a 51 ba 3e
//unregistersymbol(all_else)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"Piranhas drop more hooks (might have to kill something before enabling)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(pirdrop)
registersymbol(pirdrop)
aobscan(pirdrop_aob, BA 28 00 00 00 8B 01 8B 40 28 FF 50 1C 85 C0 75 57 D9 87 F4 00 00 00 DD 9D E8 FB FF FF F2 0F 10)

pirdrop_aob:
pirdrop:
db BA 01 //50% chance

[DISABLE]
pirdrop:
db BA 28
//unregistersymbol(pirdrop)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>38</ID>
      <Description>"More voodoo demons vs normal demons"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(voodoo)
registersymbol(voodoo)
aobscan(voodoo_aob, BA 07 00 00 00 8B 01 8B 40 28 FF 50 1C 85 C0 75 1F 6A 42 6A 00 8B 4D E8 C1 E1 04 83 C1 08 C1 E7)
voodoo_aob:
voodoo:
db BA 02 //33% chance

[DISABLE]
voodoo:
db BA 07 //default is 13% chance
//unregistersymbol(voodoo)

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>aobplayer</Name>
      <Address>0B71C31E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pirdrop</Name>
      <Address>0C173538</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>init</Name>
      <Address>02CD0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>check_helm</Name>
      <Address>0E7F4FD9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>set_light</Name>
      <Address>0E7F5097</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>keycheck</Name>
      <Address>0E7FBD0D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>mouseover</Name>
      <Address>13908D08</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>force_prefix</Name>
      <Address>02EE02DA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>invalid_prefix</Name>
      <Address>02EE167A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>legendary</Name>
      <Address>02EE05A8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>godly</Name>
      <Address>02EE06DC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>unreal</Name>
      <Address>02EE0913</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>mythical</Name>
      <Address>02EE0B17</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>boomerang</Name>
      <Address>02EE0BDA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>all_else</Name>
      <Address>02EE0D3C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>voodoo</Name>
      <Address>039C48C4</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>string:
4: strlen
8: string (unicode?)
array:
0: 64a0ae88?
4: num_elements
c: element 1
10: element 2
4*(n-1)+c: element n
static_mem_base:
0: 39c1abc?
46c: ptr to array of chest ptrs
498: ptr to array of player ptrs
4d0: ptr to array of ptrs to item names, index = itemid
4d4: ptr to array of ptrs npc names
chest:
4: ptr to array of items
8: x_pos
c: y_pos
item: (see !name2ee *!Terraria.Item/!dumpclass for full list)
4: pointer to name string
2c: id/type
40: stack size
44: max stack size
54: tileboost?
64: damage
68: knockback
80: defense
94: rare?
98: shoot?
a0: ammo
a4: use ammo?
c4: net id
d8: isaccessory?
e5: prefix?
player:
20: array of item ptrs for equipment we're wearing
30: array of item ptrs for stuff we carry, including ammo/coins
34: piggy bank
38: safe bank
3c: ptr to name string
e0: breathmax
e4: breath
114: headslot (checks this against 11 for miner's helmet)
148: defense
14c: attack
150: max health
154: current health
158: current mana
15c/160: max mana
1a8: spawn_x
1ac: spawn_y
260: position_x
264: position_y
270: velocity_x
264: velocity_y
find static_mem_base:
.prefer_dml 1
.loadby sos clr
!dumpheap -type Terraria.Main
click address
ctrl+f, "chest", alt+u -&gt; 46c System.Object[] 0 static 039bf6b0 chest
search for 039bf6b0 in CE
static_mem_base is result - 46c
-36 to 36 is s
36 to 72 is se
72 to 108 is e
108 to 144 is ne
144 to -144 is n
-144 to -108 is nw
-108 to -72 is w
-72 to -36 is sw
</Comments>
  <LuaScript>script_init=[[
alloc(mycode,4096)
alloc(status,256)
registersymbol(status)
label(loop)
label(exit)
label(do_update)
label(update_ret)
label(do_find_next)
label(find_next_ret)
CREATETHREAD(mycode);

/*
memory layout of status block (decimal offsets):
0-3: status flag
4-8: ptr to string of item we've got on radar
8-16: distance to item (double)
16-24: direction of item (double) in degrees +-180 is N, 90 is E, etc)
24-28: x_pos
28-32: y_pos
32-36: move to next item?
36-40: time to end thread?
40-44: show radar?
*/

mycode:
loadlibrary(C:\Develop\Projects\find_chests\Release\find_chests.dll)
call find_chests.init
cmp eax,0
je exit
mov [status],eax
mov [status+20],1
jmp loop

do_find_next:
call find_chests.find_next
mov [status+4],eax
jmp find_next_ret

do_update:
lea eax,[status+1c]
push eax
sub eax,4
push eax
sub eax,8
push eax
sub eax,8
push eax
call find_chests.update
cmp eax,0
jne update_ret
mov [status+20],1
jmp update_ret

loop:
cmp [status+24],0
jne exit
cmp [status+20],0
je find_next_ret
jmp do_find_next
find_next_ret:
mov [status+20],0
push #500
call sleep
jmp do_update
update_ret:
jmp loop

exit:
ret
]]


function init_myhook()
    autoAssemble(script_init)
    sleep(4000)
    local status = readInteger("status")
    if(status == 0) then
       return false
    end
    d3dhook_initializeHook(16*1024*1024, false)
    myfont=createFont()
    font_setColor(myfont,0xffffff)
    font_setSize(myfont, 12)
    fm=d3dhook_createFontmap(myfont)
    tc=d3dhook_createTextContainer(fm, 20,350,'')
    return true
end

function update_text()
    local status = readInteger("status")
    if(status == 0) then
       return
    end
    local display = readInteger("status+28")
    if(display == 0) then
        d3dhook_textcontainer_setText(tc,"")
        return
    end
    local item_str = readString("[status+4]", 75) .. ":\n" .. math.floor(readDouble("status+8") + 0.5) .. " blocks to the "
    local dir = readDouble("status+10")
    if dir &gt; 36 and dir &lt; 72 then
        item_str = item_str .. "SE"
    elseif dir &gt;= 72 and dir &lt; 108 then
        item_str = item_str .. "E"
    elseif dir &gt;= 108 and dir &lt; 144 then
        item_str = item_str .. "NE"
    elseif dir &gt;= 144 or dir &lt; -144 then
        item_str = item_str .. "N"
    elseif dir &gt;= -144 and dir &lt; -108 then
        item_str = item_str .. "NW"
    elseif dir &gt;= -108 and dir &lt; -72 then
        item_str = item_str .. "W"
    elseif dir &gt;= -72 and dir &lt; -36 then
        item_str = item_str .. "SW"
    else
        item_str = item_str .. "S"
    end
    d3dhook_textcontainer_setText(tc,item_str)
end

function toggle_display()
    local display = readInteger("status+28")
    if(display == 0) then
        writeInteger("status+2b", 1)
    else
        writeInteger("status+2b", 0)
    end
end

function next_item()
    writeInteger("status+20", 1)
end

---[[
if init_myhook() then
    local hk1 =  createHotkey(toggle_display, VK_F5)
    generichotkey_setKeys(hk1, VK_F5)
    generichotkey_onHotkey(hk1, toggle_display)
    local hk2 =  createHotkey(next_item, VK_F6)
    generichotkey_setKeys(hk2, VK_F6)
    generichotkey_onHotkey(hk2, next_item)
    timer = createTimer(nil)
    timer_onTimer(timer, update_text)
    timer_setInterval(timer,500)
    timer_setEnabled(timer, true)
end
--]]

--[[
if init_myhook() then
    print "init_myhook returned true"
else
    print "init_myhook returned false"
end
--]]
--d3dhook_textcontainer_setText(tc,"Hello, world!")
--writeInteger("status+28",1) --display = true

</LuaScript>
</CheatTable>
