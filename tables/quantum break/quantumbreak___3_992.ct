<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"no reload"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(ammoClipDecOnFireAOB,QuantumBreak.exe,FF C9 41 8B C0 85 C9 66 0F 4F C1)
registersymbol(ammoClipDecOnFireAOB)

alloc(newmem,2048,ammoClipDecOnFireAOB) //"QuantumBreak.exe"+57F1FB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp ecx,2
jge originalcode
mov ecx,2

originalcode:
dec ecx
mov eax,r8d

exit:
jmp returnhere

///

ammoClipDecOnFireAOB: //"QuantumBreak.exe"+57F1FB:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammoClipDecOnFireAOB: //"QuantumBreak.exe"+57F1FB:
db FF C9 41 8B C0
//Alt: dec ecx
//Alt: mov eax,r8d
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"inf. ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(ammoPouchCalOnFireAOB,QuantumBreak.exe,85 C0 66 44 0F 4F C0)
registersymbol(ammoPouchCalOnFireAOB)

alloc(newmem,2048,ammoPouchCalOnFireAOB) //"QuantumBreak.exe"+57F21B)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp eax,1
jge originalcode
mov eax,1

originalcode:
test eax,eax
cmovg r8w,ax

exit:
jmp returnhere

///

ammoPouchCalOnFireAOB: //"QuantumBreak.exe"+57F21B:
jmp newmem
nop
nop
returnhere:

///*******************************************///

aobscanmodule(ammoPouchReadC4AOB,QuantumBreak.exe,0F BF 4C 42 2C)
registersymbol(ammoPouchReadC4AOB)

alloc(newmem2,2048,ammoPouchReadC4AOB) //"QuantumBreak.exe"+57D099)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
movsx ecx,word ptr [r8+b0]
cmp [rdx+rax*2+2c],cx
jge originalcode2
mov [rdx+rax*2+2c],cx

originalcode2:
movsx ecx,word ptr [rdx+rax*2+2C]

exit2:
jmp returnhere2

///

ammoPouchReadC4AOB: //"QuantumBreak.exe"+57D099:
jmp newmem2
returnhere2:

///*******************************************///

aobscanmodule(ammoPouchCakOnReloadAOB,QuantumBreak.exe,66 0F 4F 51 2C 66 89 51 2C)
registersymbol(ammoPouchCakOnReloadAOB)

ammoPouchCakOnReloadAOB: //"QuantumBreak.exe"+57EDE0:
//db 90 90 90 90 90

///************************************************///

aobscanmodule(ammoPouchCalConstant4AOB,QuantumBreak.exe,2B CD 2B C5 3B C1 0F 4C C8 85 C9)
registersymbol(ammoPouchCalConstant4AOB)

ammoPouchCalConstant4AOB+6: //"QuantumBreak.exe"+57D0AB:
db 90 8B C8
//Alt: mov ecx,eax


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ammoPouchCalOnFireAOB: //"QuantumBreak.exe"+57F21B:
db 85 C0 66 44 0F 4F C0
//Alt: test eax,eax
//Alt: cmovg r8w,ax

///*******************************************///

dealloc(newmem2)
ammoPouchReadC4AOB: //"QuantumBreak.exe"+57D099:
db 0F BF 4C 42 2C
//Alt: movsx ecx,word ptr [rdx+rax*2+2C]

///*******************************************///

ammoPouchCakOnReloadAOB: //"QuantumBreak.exe"+57EDE0:
db 66 0F 4F 51 2C
//Alt: cmovg dx,[rcx+2C]

///************************************************///

ammoPouchCalConstant4AOB+6: //"QuantumBreak.exe"+57D0AB:
db 0F 4C C8
//Alt: cmovl ecx,eax
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"ignore chronon source"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscanmodule(cJmpIfNotEnoughCSToUpgradeAOB,QuantumBreak.exe,7C 0E 48 8B 03 48 8B CB)
registersymbol(cJmpIfNotEnoughCSToUpgradeAOB)

cJmpIfNotEnoughCSToUpgradeAOB: //"QuantumBreak.exe"+269155:
db 90 90
//Alt: nop
//Alt: nop


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
cJmpIfNotEnoughCSToUpgradeAOB: //"QuantumBreak.exe"+269155:
db 7C 0E
//Alt: jl QuantumBreak.exe+269165
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5693746#5693746</Comments>
</CheatTable>
