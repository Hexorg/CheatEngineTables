<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>231</ID>
      <Description>"Passive Monsters"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(passive_saved)
registersymbol(passive_saved)
aobscan(searchedAOB,8B B7 80 00 00 00 83 FE 03)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [edi+000000A4], 0

originalcode:
//mov esi,[edi+00000080]
mov esi,4

exit:
jmp returnhere

searchedAOB:
passive_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
passive_saved:
mov esi,[edi+00000080]
//Alt: db 8B B7 80 00 00 00
unregistersymbol(passive_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Inf. Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(health_saved)
registersymbol(health_saved)
aobscan(searchedAOB,D9 41 18 D9 5D F0 D9 45 F0 8B 4D D4 51 DB 04 24)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+18], (float)100000
mov dword ptr [ecx+14], #100000

originalcode:
fld dword ptr [ecx+18]
fstp dword ptr [ebp-10]

exit:
jmp returnhere

searchedAOB:
health_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
health_saved:
fld dword ptr [ecx+18]
fstp dword ptr [ebp-10]
//Alt: db D9 41 18 D9 5D F0
unregistersymbol(health_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>178</ID>
      <Description>"Increased Attack Rate (x5)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(atkrt_saved)
registersymbol(atkrt_saved)
aobscan(searchedAOB,D9 40 10 D9 5D FC D9 45 FC D9 5D FC D9 45 FC DE)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [eax+10],(float)5

originalcode:
fld dword ptr [eax+10]
fstp dword ptr [ebp-04]

exit:
jmp returnhere

searchedAOB:
atkrt_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
atkrt_saved:
fld dword ptr [eax+10]
fstp dword ptr [ebp-04]
//Alt: db D9 40 10 D9 5D FC
unregistersymbol(atkrt_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"Maximum Mana"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(max_saved)
registersymbol(max_saved)
aobscan(searchedAOB,D9 41 18 D9 5D FC D9 45 FC 8B 4D 10 51 DB 04 24)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+14], #1000
mov dword ptr [ecx+18], (float)1000

originalcode:
fld dword ptr [ecx+18]
fstp dword ptr [ebp-04]

exit:
jmp returnhere

searchedAOB:
max_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
max_saved:
fld dword ptr [ecx+18]
fstp dword ptr [ebp-04]
//Alt: db D9 41 18 D9 5D FC
unregistersymbol(max_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"No Mana Cost"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(zero_space,4)
registersymbol(zero_space)
label(clip_saved)
registersymbol(clip_saved)
aobscan(searchedAOB,D9 45 DC DE E9 83 EC 08 83 EC 04 D9 1C 24 50 39)

newmem: //this is allocated memory, you have read,write,execute access


originalcode:
fld dword ptr [zero_space]
fsubp st(1),st(0)

exit:
jmp returnhere

searchedAOB:
clip_saved:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(zero_space)
clip_saved:
fld dword ptr [ebp-24]
fsubp st(1),st(0)
//Alt: db D9 45 DC DE E9
unregistersymbol(zero_space)
unregistersymbol(clip_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"One Shot Kill (set Enemy Health to 0)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//NOTE: This version sets enemy health to 0. Can be finicky with some rooms not affected
//and enemies a great distance a way seem unaffected, as well.

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(oneshotE_saved)
registersymbol(oneshotE_saved)
aobscan(searchedAOB,D9 83 A0 00 00 00 D9 9D EC FE FF FF D9 85 EC FE)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ebx+000000A0], (float)0
mov dword ptr [ebx+000000A4], 0
//mov dword ptr [ebx+00000080], 0

originalcode:
fld dword ptr [ebx+000000A0]

exit:
jmp returnhere

searchedAOB:
oneshotE_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
oneshotE_saved:
fld dword ptr [ebx+000000A0]
//Alt: db D9 83 A0 00 00 00
unregistersymbol(oneshotE_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>188</ID>
      <Description>"One Shot Kill (using dmg multiplier)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Note: This version uses the damage multiplier in game. Normally, 1.0 turned it up to 1000.0.
//Can be found with an upgrade card that double damage (1.0 to 2.0)

[ENABLE]
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(oneshotD_saved)
registersymbol(oneshotD_saved)
aobscan(searchedAOB,D9 41 10 D9 9D 4C FE FF FF D9 85 4C FE FF FF D9)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ecx+10],(float)1000

originalcode:
fld dword ptr [ecx+10]
fstp dword ptr [ebp-000001B4]

exit:
jmp returnhere

searchedAOB:
oneshotD_saved:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
oneshotD_saved:
fld dword ptr [ecx+10]
fstp dword ptr [ebp-000001B4]
//Alt: db D9 41 10 D9 9D 4C FE FF FF
unregistersymbol(oneshotD_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"Max Level Experience"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(xplevel_saved)
registersymbol(xplevel_saved)
aobscan(searchedAOB,8B 40 18 33 C9 3B D0 0F 4F D0 8B 45 FC 3B CA 0F 4C CA 03 4D 0C 83 EC 08)

newmem: //this is allocated memory, you have read,write,execute access
mov [eax+18],#100000

originalcode:
mov eax,[eax+18]
xor ecx,ecx

exit:
jmp returnhere

searchedAOB:
xplevel_saved:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
xplevel_saved:
//mov eax,[eax+18]
//xor ecx,ecx
db 8B 40 18 33 C9
unregistersymbol(xplevel_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"No Portal Key Needed (Bonus: Boss Farm)"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(key_saved)
registersymbol(key_saved)
aobscan(searchedAOB,0F B6 80 08 01 00 00 85 C0 0F 84 70 01 00 00)

newmem: //this is allocated memory, you have read,write,execute access
mov byte ptr [eax+00000108],1

originalcode:
movzx eax,byte ptr [eax+00000108]

exit:
jmp returnhere

searchedAOB:
key_saved:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
key_saved:
movzx eax,byte ptr [eax+00000108]
//Alt: db 0F B6 80 08 01 00 00
unregistersymbol(key_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"One Shot Obelisk"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(obelisk_saved)
registersymbol(obelisk_saved)
aobscan(searchedAOB,D9 47 5C D9 45 A8 DE E9 83 EC 08 83 EC 04 D9 1C)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [edi+5C], (float)0

originalcode:
fld dword ptr [edi+5C]
fld dword ptr [ebp-58]

exit:
jmp returnhere

searchedAOB:
obelisk_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
obelisk_saved:
fld dword ptr [edi+5C]
fld dword ptr [ebp-58]
//Alt: db D9 47 5C D9 45 A8
unregistersymbol(obelisk_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>89</ID>
      <Description>"Max Pickup Range"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(pickup_ptr,4)
registersymbol(pickup_ptr)

label(pickup_saved)
registersymbol(pickup_saved)
aobscan(searchedAOB,D9 40 10 D9 5D D0 D9 45 D0 D9 5D D0 D9 45 D0 DF)

newmem: //this is allocated memory, you have read,write,execute access
//mov dword ptr [eax+10], (float)100 //Normally 2, Maxes out at 9 with upgrades
mov [pickup_ptr],eax

originalcode:
fld dword ptr [eax+10]
fstp dword ptr [ebp-30]

exit:
jmp returnhere

searchedAOB:
pickup_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(pickup_ptr)
pickup_saved:
fld dword ptr [eax+10]
fstp dword ptr [ebp-30]
//Alt: db D9 40 10 D9 5D D0
unregistersymbol(pickup_saved)
unregistersymbol(pickup_ptr)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>177</ID>
          <Description>"Pick Up Range"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pickup_ptr</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>109</ID>
      <Description>"Inf. Amulet"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(amul_saved)
registersymbol(amul_saved)
aobscan(searchedAOB,C7 47 18 00 00 00 00 8B 47 0C 85 C0 74 14 8B 47)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
//mov [edi+18],00000000

exit:
jmp returnhere

searchedAOB:
amul_saved:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
amul_saved:
mov [edi+18],00000000
//Alt: db C7 47 18 00 00 00 00
unregistersymbol(amul_saved)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>103</ID>
      <Description>"Set Upgrades Remaining"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(perk_ptr,4)
registersymbol(perk_ptr)

label(perk_saved)
registersymbol(perk_saved)
aobscan(searchedAOB,8B 40 28 89 45 E8 85 C0 0F 8E 00 01 00 00 8B 05)

newmem: //this is allocated memory, you have read,write,execute access
mov [perk_ptr],ecx

originalcode:
mov eax,[eax+28]
mov [ebp-18],eax

exit:
jmp returnhere

searchedAOB:
perk_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(perk_ptr)
perk_saved:
mov eax,[eax+28]
mov [ebp-18],eax
//Alt: db 8B 40 28 89 45 E8
unregistersymbol(perk_saved)
unregistersymbol(perk_ptr)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>100</ID>
          <Description>"Upgrades Remaining"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>perk_ptr</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>95</ID>
      <Description>"Set Speed"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(Speed_ptr,4)
registersymbol(Speed_ptr)

label(speed_saved)
registersymbol(speed_saved)
aobscan(searchedAOB,D9 40 10 D9 9D 68 FF FF FF D9 85 68 FF FF FF D9)

newmem: //this is allocated memory, you have read,write,execute access
//mov dword ptr [eax+10],(float)50 //Normally maxes at 17.
mov [Speed_ptr],eax

originalcode:
fld dword ptr [eax+10]
fstp dword ptr [ebp-00000098]

exit:
jmp returnhere

searchedAOB:
speed_saved:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(Speed_ptr)
speed_saved:
fld dword ptr [eax+10]
fstp dword ptr [ebp-00000098]
//Alt: db D9 40 10 D9 9D 68 FF FF FF
unregistersymbol(speed_saved)
unregistersymbol(Speed_ptr)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>101</ID>
          <Description>"Speed (normal=10-17)"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>Speed_ptr</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>183</ID>
          <Description>"Health Regen (meh, sometimes)"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>Speed_ptr</Address>
          <Offsets>
            <Offset>88</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>176</ID>
          <Description>"Sprint Mult"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>Speed_ptr</Address>
          <Offsets>
            <Offset>FFFFFF98</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>185</ID>
      <Description>"Compare X Cards"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(cardcount_ptr,4)
registersymbol(cardcount_ptr)

label(atkrt_saved)
registersymbol(atkrt_saved)
aobscan(searchedAOB,8B 80 40 01 00 00 89 45 90 83 EC 0C)

newmem: //this is allocated memory, you have read,write,execute access
mov [cardcount_ptr],eax

originalcode:
mov eax,[eax+00000140]

exit:
jmp returnhere

searchedAOB:
atkrt_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(cardcount_ptr)
atkrt_saved:
mov eax,[eax+00000140]
//Alt: db 8B 80 40 01 00 00
unregistersymbol(atkrt_saved)
unregistersymbol(cardcount_ptr)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>186</ID>
          <Description>"Number (unwise to exceed 5)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>cardcount_ptr</Address>
          <Offsets>
            <Offset>140</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>189</ID>
      <Description>"Extras"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>138</ID>
          <Description>"Some Stats from Upgrades"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(somestats_saved)
registersymbol(somestats_saved)
aobscan(searchedAOB,D9 5F 10 8B 47 08 8D 8D 48 FF FF FF 83 EC 08 50)

newmem: //this is allocated memory, you have read,write,execute access


originalcode:
fstp dword ptr [edi+10]
mov eax,[edi+08]

exit:
jmp returnhere

searchedAOB:
somestats_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
somestats_saved:
fstp dword ptr [edi+10]
mov eax,[edi+08]
//Alt: db D9 5F 10 8B 47 08
unregistersymbol(somestats_saved)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Assemble This"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>somestats_saved</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"Choice"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

alloc(choice_ptr,4)
registersymbol(choice_ptr)
label(choice_saved)
registersymbol(choice_saved)
aobscan(searchedAOB,8B 52 10 42 83 EC 04 52 51 50 39 00)

newmem: //this is allocated memory, you have read,write,execute access
mov [choice_ptr],searchedAOB

originalcode:
mov edx,[edx+10]
inc edx
sub esp,04

exit:
jmp returnhere

searchedAOB:
choice_saved:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(choice_ptr)
choice_saved:
mov edx,[edx+10]
inc edx
sub esp,04
//Alt: db 8B 52 10 42 83 EC 04
unregistersymbol(choice_saved)
unregistersymbol(choice_ptr)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>113</ID>
              <Description>"Assemble Here"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>choice_ptr</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>137</ID>
          <Description>"One Shot Kill (AE)-crashed"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(oneshotae_saved)
registersymbol(oneshotae_saved)
aobscan(searchedAOB,D9 87 A0 00 00 00 D9 5D F4 D9 45 F8 D9 9F A0 00)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [ebx+000000A0], (float)0

originalcode:
fld dword ptr [edi+000000A0]

exit:
jmp returnhere

searchedAOB:
oneshotae_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
oneshotae_saved:
fld dword ptr [edi+000000A0]
//Alt: db D9 87 A0 00 00 00
unregistersymbol(oneshotae_saved)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"Amulet Recharge"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

//label(Amulet_Recharge_l)
alloc(Amulet_Recharge_ptr,4)
registersymbol(Amulet_Recharge_ptr)

label(amulet_saved)
registersymbol(amulet_saved)
aobscan(searchedAOB,D9 41 10 D9 5D EC D9 45 EC D9 5D EC D9 45 EC DE)

newmem: //this is allocated memory, you have read,write,execute access
mov [Amulet_Recharge_ptr],ecx

originalcode:
fld dword ptr [ecx+10]
fstp dword ptr [ebp-14]

exit:
jmp returnhere

searchedAOB:
amulet_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dealloc(Amulet_Recharge_ptr)
amulet_saved:
fld dword ptr [ecx+10]
fstp dword ptr [ebp-14]
//Alt: db D9 41 10 D9 5D EC
unregistersymbol(amulet_saved)
unregistersymbol(Amulet_Recharge_ptr)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>99</ID>
              <Description>"Amulet Recharge (1.0 is normal)"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>Amulet_Recharge_ptr</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"Some Fast Achievements (Do not use if you are concerned about timestamps)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(ach_saved)
registersymbol(ach_saved)
aobscan(searchedAOB,0F 8E 48 00 00 00 C6 43 0C 01 8D 45 E8 83 EC 0C)

newmem: //this is allocated memory, you have read,write,execute access


originalcode:
//jng 056E88CC

exit:
jmp returnhere

searchedAOB:
ach_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ach_saved:
db 0F 8E 48 00 00 00
//jng 056E88CC
//Alt: db 0F 8E 48 00 00 00
unregistersymbol(ach_saved)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>192</ID>
          <Description>"100% Invulnerability to Enemies Skill"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

label(invuln_saved)
registersymbol(invuln_saved)
aobscan(searchedAOB,D9 87 04 01 00 00 83 EC 08 83 EC 04 D9 1C 24 50)

newmem: //this is allocated memory, you have read,write,execute access
mov dword ptr [edi+00000104],(float)1

originalcode:
fld dword ptr [edi+00000104]

exit:
jmp returnhere

searchedAOB:
invuln_saved:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
invuln_saved:
fld dword ptr [edi+00000104]
//Alt: db D9 87 04 01 00 00
unregistersymbol(invuln_saved)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>oneshotae_saved</Name>
      <Address>0CD244D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>obelisk_saved</Name>
      <Address>4CBA4E45</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>somestats_saved</Name>
      <Address>0569962A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>invuln_saved</Name>
      <Address>26BB7466</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>xplevel_saved</Name>
      <Address>2ADE55CD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>perk_saved</Name>
      <Address>056BDA18</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>clip_saved</Name>
      <Address>05735B4D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pickup_saved</Name>
      <Address>27EDF87F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>atkrt_saved</Name>
      <Address>27EEA123</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>amul_saved</Name>
      <Address>27EF4BF1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>key_saved</Name>
      <Address>27EF6A25</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>speed_saved</Name>
      <Address>057306FB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>oneshotE_saved</Name>
      <Address>0572A8E9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>oneshotD_saved</Name>
      <Address>05734488</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
