<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>49</ID>
      <Description>"Undead"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pCHHealth,4)

///
pCHHealth:
dd 0
///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[ebp-08]

cmp word ptr [edx+000001CE],0000
jne originalcode

mov [pCHHealth],edx
//cmp dword ptr [edx+000001BC],eax
//jle originalcode
//mov eax,[edx+000001BC]
cmp eax,1
jge originalcode
mov eax,1
mov [ebp-08],eax

originalcode:
//mov eax,[ebp-08]
mov [edx+000001BC],eax

exit:
jmp returnhere

"trine2_32bit.exe"+71FD3D:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"trine2_32bit.exe"+71FD3D:
db 8B 45 F8 89 82 BC 01 00 00
//Alt: mov eax,[ebp-08]
//Alt: mov [edx+000001BC],eax
dealloc(pCHHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>"Health of Hero using"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pCHHealth</Address>
          <Offsets>
            <Offset>1BC</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"Inf. Stealth, press R to cancel"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(cancelStealth)
globalalloc(pStealth,4)

///
pStealth:
dd 0
///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pStealth],ecx
pushad
push 'R'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStealth
push eax
mov eax,[ecx+00000174]
mov dword ptr [ecx+00000170],eax
pop eax
jmp exit

cancelStealth:
mov dword ptr [ecx+00000170],(float)0
jmp exit

originalcode:
//movss [ecx+00000170],xmm0

exit:
jmp returnhere

"trine2_32bit.exe"+B9F52C:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"trine2_32bit.exe"+B9F52C:
db F3 0F 11 81 70 01 00 00
//Alt: movss [ecx+00000170],xmm0
dealloc(pStealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>56</ID>
          <Description>"Stealth"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pStealth</Address>
          <Offsets>
            <Offset>170</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"get Skill Pts"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pSkillPts,4)

///
pSkillPts:
dd 0
///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSkillPts],eax

originalcode:
mov eax,[eax+00000154]

exit:
jmp returnhere

"trine2_32bit.exe"+BEBE0A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"trine2_32bit.exe"+BEBE0A:
db 8B 80 54 01 00 00
//Alt: mov eax,[eax+00000154]
dealloc(pSkillPts)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Skill Pts, Ctrl + to set 10, Ctrl - to set 0"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSkillPts</Address>
          <Offsets>
            <Offset>154</Offset>
          </Offsets>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>107</Key>
              </Keys>
              <Value>10</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>109</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"set max Blocks/Planks"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(maxBlocks,4)

///
maxBlocks:
dd #16
///

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,[maxBlocks]

originalcode:
//mov eax,[eax+000000F8]

exit:
jmp returnhere

"trine2_32bit.exe"+B8809A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"trine2_32bit.exe"+B8809A:
db 8B 80 F8 00 00 00
//Alt: mov eax,[eax+000000F8]
dealloc(maxBlocks)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>46</ID>
          <Description>"max Blocks/Planks"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>maxBlocks</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>skill pts access (skill menu opening) Code :mov eax,[eax+000000F8]</Description>
      <Address>00FA60DA</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>BA60DA</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>normal health access (only?) Code :mov eax,[eax+000001BC]</Description>
      <Address>00AF8B5A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6F8B5A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health access before +- Code :mov edx,[ecx+000001BC]</Description>
      <Address>00AFB41C</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB41C</ModuleNameOffset>
      <Before>
        <Byte>8D</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>91</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>55</Byte>
        <Byte>F0</Byte>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health +- Code :mov [ecx+000001BC],edx</Description>
      <Address>00AFB505</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB505</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>EC</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>91</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>health access after +- Code :mov eax,[edx+000001BC]</Description>
      <Address>00AFB553</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>6FB553</ModuleNameOffset>
      <Before>
        <Byte>95</Byte>
        <Byte>70</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>82</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>45</Byte>
        <Byte>BC</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>bar onscreen write Code :movss [eax+00000290],xmm0</Description>
      <Address>00DD5A1F</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>9D5A1F</ModuleNameOffset>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>90</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>bar onscreen access (when NOT full) Code :fld dword ptr [ecx]</Description>
      <Address>00DD5B28</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>9D5B28</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>F0</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>E8</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>A2</Byte>
        <Byte>94</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>stealth - Code :movss [ecx+00000168],xmm0</Description>
      <Address>00B7F1EC</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>77F1EC</ModuleNameOffset>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>68</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>F4</Byte>
        <Byte>81</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>max blocks/planks access when using Code :mov eax,[eax+000000F8]</Description>
      <Address>00F4E10A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>B4E10A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>v1.18 skill pts access (skill menu opening) Code :mov eax,[eax+00000154]</Description>
      <Address>00FEBE0A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>BEBE0A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>54</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>v1.18 max blocks/planks read when using Code :mov eax,[eax+000000F8]</Description>
      <Address>00F8809A</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>B8809A</ModuleNameOffset>
      <Before>
        <Byte>4D</Byte>
        <Byte>FC</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>FC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>80</Byte>
        <Byte>F8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>E5</Byte>
        <Byte>5D</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>v1.18 health +- Code :mov [edx+000001BC],eax</Description>
      <Address>00B1FD40</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>71FD40</ModuleNameOffset>
      <Before>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>F8</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>82</Byte>
        <Byte>BC</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
        <Byte>FC</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>v1.18 stealth - Code :movss [ecx+00000170],xmm0</Description>
      <Address>00F9F52C</Address>
      <ModuleName>trine2_32bit.exe</ModuleName>
      <ModuleNameOffset>B9F52C</ModuleNameOffset>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>81</Byte>
        <Byte>70</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>55</Byte>
        <Byte>F4</Byte>
        <Byte>81</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pSkillPts</Name>
      <Address>20E60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>maxBlocks</Name>
      <Address>20E80000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCHHealth</Name>
      <Address>20E20000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pStealth</Name>
      <Address>20E40000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>heyho</Name>
      <Address>21380000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
