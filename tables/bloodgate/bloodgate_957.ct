<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}
alloc(char_isPlayer,4)
registersymbol(char_isPlayer)
[DISABLE]
dealloc(char_isPlayer,4)
unregistersymbol(char_isPlayer)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"NoElapsedTime"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(NoElapsedTime,DungeonSimulator:Update)
[ENABLE]

assert(NoElapsedTime+26,8B 47 54 8B 4F 20) // should be unique
alloc(newmem,$1000)
alloc(dungeon_base,4)

label(NET)
label(code)
label(return)

registersymbol(dungeon_base)

newmem:

code:
  mov eax,#1
  mov [dungeon_base],edi
  mov ecx,#0
  jmp return

NoElapsedTime+26:
NET:
  jmp code
  nop
return:

[DISABLE]

NoElapsedTime+26:
  db 8B 47 54 8B 4F 20

unregistersymbol(dungeon_base)

dealloc(dungeon_base,4)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2442DC6E

2442DC52: 83 EC 0C           -  sub esp,0C
2442DC55: 57                 -  push edi
2442DC56: E8 7D 00 00 00     -  call Simulator:Update
2442DC5B: 83 C4 10           -  add esp,10
2442DC5E: 83 EC 0C           -  sub esp,0C
2442DC61: 57                 -  push edi
2442DC62: E8 61 88 FF FF     -  call DungeonSimulator:get_CombatActive
2442DC67: 83 C4 10           -  add esp,10
2442DC6A: 85 C0              -  test eax,eax
2442DC6C: 74 0B              -  je DungeonSimulator:Update+31
// ---------- INJECTING HERE ----------
2442DC6E: 8B 47 54           -  mov eax,[edi+54]
2442DC71: 8B 4F 20           -  mov ecx,[edi+20]
// ---------- DONE INJECTING  ----------
2442DC74: 03 C1              -  add eax,ecx
2442DC76: 89 47 54           -  mov [edi+54],eax
2442DC79: 0F B6 47 48        -  movzx eax,byte ptr [edi+48]
2442DC7D: 88 45 FB           -  mov [ebp-05],al
2442DC80: 83 EC 0C           -  sub esp,0C
2442DC83: 57                 -  push edi
2442DC84: E8 67 BF 00 00     -  call DungeonSimulator:IsCombatComplete
2442DC89: 83 C4 10           -  add esp,10
2442DC8C: 88 47 48           -  mov [edi+48],al
2442DC8F: 0F B6 C0           -  movzx eax,al
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>17</ID>
              <Description>"dungeon_base"</Description>
              <LastState Value="00000000" RealAddress="02161000"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>dungeon_base</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"TimeExtend(Full Extend)"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(TimeExtend,TimeSimulator:InitializeTimeScale)

[ENABLE]

assert(TimeExtend+7,8B 7D 08 8B 47 20 89 47) // should be unique
alloc(newmem,$1000)

label(TE)
label(code)
label(return)

newmem:

code:
  push ebx
  mov edi,[ebp+08]
  mov ebx,[edi+20]
  shl ebx,4
  mov [edi+20],ebx
  mov eax,[edi+20]
  pop ebx
  jmp return

TimeExtend+7:
TE:
  jmp code
  nop
return:
registersymbol(TimeExtend)

[DISABLE]

TimeExtend+7:
  db 8B 7D 08 8B 47 20

unregistersymbol(TimeExtend)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 24434CB7

""+24434C9E: 00 00                          -  add [eax],al
""+24434CA0: 68 78 5C 8B 11                 -  push 118B5C78
""+24434CA5: E9 7E B3 7B E1                 -  jmp 05BF0028
""+24434CAA: 00 00                          -  add [eax],al
""+24434CAC: 00 00                          -  add [eax],al
""+24434CAE: 00 00                          -  add [eax],al
""+24434CB0: 55                             -  push ebp
""+24434CB1: 8B EC                          -  mov ebp,esp
""+24434CB3: 57                             -  push edi
""+24434CB4: 83 EC 04                       -  sub esp,04
// ---------- INJECTING HERE ----------
""+24434CB7: 8B 7D 08                       -  mov edi,[ebp+08]
""+24434CBA: 8B 47 20                       -  mov eax,[edi+20]
// ---------- DONE INJECTING  ----------
""+24434CBD: 89 47 44                       -  mov [edi+44],eax
""+24434CC0: 8B 47 20                       -  mov eax,[edi+20]
""+24434CC3: 89 47 3C                       -  mov [edi+3C],eax
""+24434CC6: 8B 47 20                       -  mov eax,[edi+20]
""+24434CC9: 89 47 40                       -  mov [edi+40],eax
""+24434CCC: 8D 65 FC                       -  lea esp,[ebp-04]
""+24434CCF: 5F                             -  pop edi
""+24434CD0: C9                             -  leave 
""+24434CD1: C3                             -  ret 
""+24434CD2: 00 00                          -  add [eax],al
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"GetPlayerAtStartofCombat"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(GetPlayerBase,DungeonPlayerSimulator:StartCombat)
define(IsPlayerForAttackResult,AttackTable:Generate)
[ENABLE]

assert(GetPlayerBase+10,85 C0 75 26 8B 45 08 8B 40 50) // should be unique
assert(IsPlayerForAttackResult+22,89 48 0c 8b 55 0c)
assert(IsPlayerForAttackResult+93,89 48 1c 8d 65 fc)
alloc(newmem,$1000)
alloc(player_base,4)
alloc(activate_crits,4)
alloc(nomiss,4)
alloc(nododge,4)
alloc(noblock,4)

label(GPB)
label(IPFAR)
label(IPFAR2)
label(tunnel)
label(exit)
label(exit2)
label(exit3)
label(jump)
label(code)
label(crits)
label(seedodge)
label(return)
label(return2)
label(return3)
label(unrplyrcrits)
label(registerplayer)

registersymbol(player_base)
registersymbol(activate_crits)
registersymbol(nomiss)
registersymbol(nododge)
registersymbol(noblock)

newmem:

registerplayer:
  mov [eax+0c],ecx
  push ebx
  mov ebx,[player_base]
  cmp ecx,[ebx+58]
  jne exit2
  mov dword ptr[char_isPlayer],#1
exit2:
  pop ebx
  mov edx,[ebp+0c]
  jmp return2


crits:
  mov dword ptr[char_isPlayer],#0
  cmp dword ptr[nomiss],#0
  je seedodge
  mov [eax+18],#0
seedodge:
  cmp dword ptr[nododge],#0
  je exit3
  mov [eax+14],#0
  cmp dword ptr[crits],#0
  jne exit3
  shl ecx,2
  mov [eax+1c],ecx
  lea esp,[ebp-04]
  jmp return3

unrplyrcrits:
  cmp dword ptr[char_isPlayer],#0
  jne crits
exit3:
  mov [eax+1c],ecx
  lea esp,[ebp-04]
  jmp return3


tunnel:
  push ebx
  mov ebx,[ebp+08]
  mov [player_base],ebx
  pop ebx
  jmp exit

code:
  test eax,eax
  je tunnel
exit:
  test eax,eax
  jne jump
  mov eax,[ebp+08]
  jmp return

GetPlayerBase+10:
GPB:
  jmp code
  nop
  nop
return:

GetPlayerBase+3a:
jump:


IsPlayerForAttackResult+22:
IPFAR:
  jmp registerplayer
  nop
return2:

IsPlayerForAttackResult+93:
IPFAR2:
  jmp unrplyrcrits
  nop
return3:

[DISABLE]

GetPlayerBase+10:
  db 85 C0 75 26 8B 45 08

IsPlayerForAttackResult+22:
  db 89 48 0c 8b 55 0c

IsPlayerForAttackResult+93:
  db 89 48 1c 8d 65 fc

dealloc(newmem)
dealloc(player_base)
dealloc(activate_crits)
dealloc(nomiss)
dealloc(nododge)
dealloc(noblock)
unregistersymbol(player_base)
unregistersymbol(activate_crits)
unregistersymbol(nomiss)
unregistersymbol(nododge)
unregistersymbol(noblock)
{
// ORIGINAL CODE - INJECTION POINT: 24441F58

""+24441F39: C3                    -  ret 
""+24441F3A: 00 00                 -  add [eax],al
""+24441F3C: 68 30 BA 13 1E        -  push 1E13BA30
""+24441F41: E9 E2 E0 7A E1        -  jmp 05BF0028
""+24441F46: 00 00                 -  add [eax],al
""+24441F48: 55                    -  push ebp
""+24441F49: 8B EC                 -  mov ebp,esp
""+24441F4B: 83 EC 08              -  sub esp,08
""+24441F4E: 8B 45 08              -  mov eax,[ebp+08]
""+24441F51: 0F B6 80 80 00 00 00  -  movzx eax,byte ptr [eax+00000080]
// ---------- INJECTING HERE ----------
""+24441F58: 85 C0                 -  test eax,eax
""+24441F5A: 75 26                 -  jne DungeonPlayerSimulator:StartCombat+3a
""+24441F5C: 8B 45 08              -  mov eax,[ebp+08]
// ---------- DONE INJECTING  ----------
""+24441F5F: 8B 40 50              -  mov eax,[eax+50]
""+24441F62: 8B C8                 -  mov ecx,eax
""+24441F64: 39 09                 -  cmp [ecx],ecx
""+24441F66: 0F B6 40 52           -  movzx eax,byte ptr [eax+52]
""+24441F6A: 85 C0                 -  test eax,eax
""+24441F6C: 74 14                 -  je DungeonPlayerSimulator:StartCombat+3a
""+24441F6E: 8B 45 08              -  mov eax,[ebp+08]
""+24441F71: 8B 40 6C              -  mov eax,[eax+6C]
""+24441F74: 83 EC 0C              -  sub esp,0C
""+24441F77: 50                    -  push eax
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"NoDamage"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(NoDamage,DungeonCharacterSimulator:AddDamage)

[ENABLE]

assert(NoDamage+7,8B 7D 08 83 EC 04)
assert(NoDamage+10c,85 C0 74 0C 83 EC 0C 57)
assert(NoDamage+11c,8d 65 fc 5f c9 c3) // should be unique
alloc(newmem,$1000)
alloc(player_initialhealth,8)

label(ND_GetHealth)
label(ND_PreventDeath)
label(ND_SetHealth)
label(gethealth)
label(preventdeath)
label(return2)
label(return)


NoDamage+7:
ND_GetHealth:
  jmp gethealth
  nop
return:

NoDamage+10c:
ND_PreventDeath:
  jmp preventdeath
  nop
  nop
return2:

NoDamage+11c:
ND_SetHealth:

newmem:

gethealth:
  push ebx
  push ecx
  mov edi,[ebp+08]
  mov ebx,[edi+b0]
  mov ecx,[edi+b4]
  mov [player_initialhealth],ebx
  mov [player_initialhealth+4],ecx
  pop ecx
  pop ebx
  sub esp,04
  jmp return


sethealth:
  mov ebx,[player_initialhealth]
  mov [edi+b8],ebx
  mov ebx,[player_initialhealth+4]
  mov [edi+bc],ebx
  pop ebx
  jmp ND_SetHealth

preventdeath:
  push ebx
  mov ebx,[player_base]
  cmp edi,[ebx+58]
  je sethealth
  pop ebx
  test eax,eax
  je ND_SetHealth
  sub esp,0c
  jmp return2



[DISABLE]

NoDamage+7:
  db 8B 7D 08 83 EC 04

NoDamage+10c:
  db 85 c0 74 0c 83 ec 0c

NoDamage+11c:
  db 8d 65 fc 5f c9 c3


dealloc(newmem)
dealloc(player_initialhealth)

{
// ORIGINAL CODE - INJECTION POINT: 2445D92D

2445D90E: 8B 40 04           -  mov eax,[eax+04]
2445D911: 89 45 AC           -  mov [ebp-54],eax
2445D914: 8D 45 B0           -  lea eax,[ebp-50]
2445D917: 83 EC 0C           -  sub esp,0C
2445D91A: 83 EC 08           -  sub esp,08
2445D91D: 8B 4D 0C           -  mov ecx,[ebp+0C]
2445D920: 89 0C 24           -  mov [esp],ecx
2445D923: 8B 4D 10           -  mov ecx,[ebp+10]
2445D926: 89 4C 24 04        -  mov [esp+04],ecx
2445D92A: 83 EC 08           -  sub esp,08
// ---------- INJECTING HERE ----------
2445D92D: 8B 4D A8           -  mov ecx,[ebp-58]
2445D930: 89 0C 24           -  mov [esp],ecx
// ---------- DONE INJECTING  ----------
2445D933: 8B 4D AC           -  mov ecx,[ebp-54]
2445D936: 89 4C 24 04        -  mov [esp+04],ecx
2445D93A: 50                 -  push eax
2445D93B: E8 C8 C3 FB FF     -  call Fixed:op_Subtraction
2445D940: 83 C4 1C           -  add esp,1C
2445D943: 8D 45 B8           -  lea eax,[ebp-48]
2445D946: 83 EC 0C           -  sub esp,0C
2445D949: 83 EC 08           -  sub esp,08
2445D94C: 8B 4D B0           -  mov ecx,[ebp-50]
2445D94F: 89 0C 24           -  mov [esp],ecx
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>3</ID>
              <Description>"Alter Type of Attack on Enemy"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(GenerateCrits,AttackTable:Generate)
define(TypeofAttack,AttackResult:.ctor) // should be unique
define(NoMiss,AttackResult:Miss)

[ENABLE]
assert(TypeofAttack+68,88 47 1C 8B 45 14)
assert(NoMiss,55 8B EC 83 EC 08 8B 45 08 C7 40 18 00 00 00 00 C9 C3)
alloc(newmem,$1000)

label(ToA)
label(NM)
label(typeofattack)
label(crit)
label(decideblock)
label(exit)
label(exit2)
label(return)
label(return2)
label(nomiss)

newmem:

nomiss:
  push ebx
  push edi
  mov ebx,[eax+8]
  mov edi,[player_base]
  cmp ebx,[edi+58]
  jne exit2
  cmp dword ptr[nomiss],#0
  je exit2
  pop edi
  pop ebx
  jmp return2
exit2:
  mov [eax+18],00000000
  pop edi
  pop ebx
  jmp return2



crit:
  cmp dword ptr[activate_crits],#0
  je decideblock
  mov [edi+18],#3
decideblock:
  cmp dword ptr[noblock],#0
  je exit
  mov al,#0
  jmp exit

typeofattack:
  push ebx
  push ecx
  mov ebx,[ebp+14]
  mov ecx,[player_base]
  cmp ebx,[ecx+58]
  je crit
exit:
  pop ecx
  pop ebx
  mov [edi+1C],al
  mov eax,[ebp+14]
  jmp return

TypeofAttack+68:
ToA:
  jmp typeofattack
  nop
return:


NoMiss+9:
NM:
  jmp nomiss
  nop
  nop
return2:


[DISABLE]

TypeofAttack+68:
  db 88 47 1C 8B 45 14

NoMiss+9:
  db C7 40 18 00 00 00 00 C9 C3

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 243CA988

""+243CA96A: 8B 45 EC              -  mov eax,[ebp-14]
""+243CA96D: 89 45 F4              -  mov [ebp-0C],eax
""+243CA970: 8D 47 10              -  lea eax,[edi+10]
""+243CA973: 8B 4D F0              -  mov ecx,[ebp-10]
""+243CA976: 89 08                 -  mov [eax],ecx
""+243CA978: 8B 4D F4              -  mov ecx,[ebp-0C]
""+243CA97B: 89 48 04              -  mov [eax+04],ecx
""+243CA97E: 8B 45 0C              -  mov eax,[ebp+0C]
""+243CA981: 89 47 18              -  mov [edi+18],eax
""+243CA984: 0F B6 45 10           -  movzx eax,byte ptr [ebp+10]
// ---------- INJECTING HERE ----------
""+243CA988: 88 47 1C              -  mov [edi+1C],al
""+243CA98B: 8B 45 14              -  mov eax,[ebp+14]
// ---------- DONE INJECTING  ----------
""+243CA98E: 89 47 08              -  mov [edi+08],eax
""+243CA991: 8B 45 18              -  mov eax,[ebp+18]
""+243CA994: 89 47 0C              -  mov [edi+0C],eax
""+243CA997: 8D 65 FC              -  lea esp,[ebp-04]
""+243CA99A: 5F                    -  pop edi
""+243CA99B: C9                    -  leave 
""+243CA99C: C3                    -  ret 
""+243CA99D: 00 00                 -  add [eax],al
""+243CA99F: 00 55 8B              -  add [ebp-75],dl
""+243CA9A2: EC                    -  in al,dx
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>30</ID>
                  <Description>"Tons of Crits?"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>activate_crits</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>29</ID>
                  <Description>"No Block?"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>noblock</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>31</ID>
                  <Description>"No Dodge?"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>nododge</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>32</ID>
                  <Description>"No Miss?"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>nomiss</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"player_character"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>player_base</Address>
              <Offsets>
                <Offset>58</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"player_base"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>player_base</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"CritMultiply"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(SetIsPlayerForCrit,AttackResult:GetMeleeDamage)
define(PlayerCritMultiply,DungeonCharacterStats:get_MeleeCriticalMultiplier)
[ENABLE]

assert(SetIsPlayerForCrit+225,83 ec 08 50 51 39 00) // should be unique
assert(PlayerCritMultiply+20,89 08 8B 4D FC 89 48 04 C9 C2 04 00)
assert(PlayerCritMultiply+6,8D 45 F8 83 EC 04) // should be unique
alloc(newmem,$1000)
alloc(critmult,4)
alloc(char_isPlayer,4)

//Variables
critmult:
  dd 2


label(code)
label(PCM)
label(SIPFC)
label(tryadd)
label(checkplayer)
label(exit2)
label(exit)
label(return)
label(return2)

registersymbol(critmult)

newmem:

tryadd:
  imul ecx,[critmult]
  mov [eax+04],ecx
  push ecx
  mov ecx,[ebp-08]
  imul ecx,[critmult]
  mov [eax],ecx
  pop ecx
  jmp return

code:
  mov ecx,[ebp-04]
  cmp dword ptr[char_isPlayer],#0
  jne tryadd
exit:
  mov [eax+04],ecx
  jmp return




checkplayer:
  push ebx
  push ecx
  mov ebx,[edi+8]
  mov ecx,[player_base]
  cmp ebx,[ecx+58]
  jne exit2
  mov dword ptr[char_isPlayer],#1
exit2:
  pop ecx
  pop ebx
  call callPCM
  mov dword ptr[char_isPlayer],#0
  jmp return2

SetIsPlayerForCrit+22c:
SIPFC:
  jmp checkplayer
return2:


PlayerCritMultiply:
callPCM:


PlayerCritMultiply+22:
PCM:
  jmp code
  nop
return:



[DISABLE]
label(callPCM)

SetIsPlayerForCrit+22c:
  call callPCM

PlayerCritMultiply:
callPCM:

PlayerCritMultiply+6:
  db 8D 45 F8 83 EC 04

PlayerCritMultiply+22:
  db 8B 4D FC 89 48 04

dealloc(newmem)
dealloc(critmult)
dealloc(char_isPlayer)
unregistersymbol(critmult)

{
// ORIGINAL CODE - INJECTION POINT: 1CC2A810

""+1CC2A7F1: 8B EC              -  mov ebp,esp
""+1CC2A7F3: 83 EC 18           -  sub esp,18
""+1CC2A7F6: 8D 45 F8           -  lea eax,[ebp-08]
""+1CC2A7F9: 83 EC 04           -  sub esp,04
""+1CC2A7FC: E9 FF 67 B4 F7     -  jmp 14771000
""+1CC2A801: 50                 -  push eax
""+1CC2A802: E8 15 00 00 00     -  call 1CC2A81C
""+1CC2A807: 83 C4 0C           -  add esp,0C
""+1CC2A80A: 8B 45 08           -  mov eax,[ebp+08]
""+1CC2A80D: 8B 4D F8           -  mov ecx,[ebp-08]
// ---------- INJECTING HERE ----------
""+1CC2A810: 89 08              -  mov [eax],ecx
""+1CC2A812: 8B 4D FC           -  mov ecx,[ebp-04]
// ---------- DONE INJECTING  ----------
""+1CC2A815: 89 48 04           -  mov [eax+04],ecx
""+1CC2A818: C9                 -  leave 
""+1CC2A819: C2 04 00           -  ret 0004
""+1CC2A81C: 68 F8 F8 D7 15     -  push 15D7F8F8
""+1CC2A821: E9 02 58 F2 E8     -  jmp 05B50028
""+1CC2A826: 00 00              -  add [eax],al
""+1CC2A828: 55                 -  push ebp
""+1CC2A829: 8B EC              -  mov ebp,esp
""+1CC2A82B: 57                 -  push edi
""+1CC2A82C: 83 EC 64           -  sub esp,64
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>23</ID>
                  <Description>"critmult"</Description>
                  <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">2:2x
3:3x
4:4x
5:5x
6:6x
7:7x
8:8x
9:9x
10:10x
16:16x
</DropDownList>
                  <VariableType>4 Bytes</VariableType>
                  <Address>critmult</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Find Currencies(Deprecated: Storage is server side)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(Currencies,Service:Player:Balance)
[ENABLE]

assert(Currencies+10,8B 40 2C 8D 4D FC 83) // should be unique
alloc(newmem,$1000)
alloc(player_currencies,4)
alloc(player_keys,4)

label(currencies)
label(code)
label(return)

registersymbol(player_currencies)
registersymbol(player_keys)

newmem:

code:
  push ebx
  mov ebx,[eax+2c]
  mov [player_currencies],ebx
  mov ebx,[eax+38]
  mov [player_keys],ebx
  pop ebx
  mov eax,[eax+2C]
  lea ecx,[ebp-04]
  jmp return

Currencies+10:
currencies:
  jmp code
  nop
return:

[DISABLE]

Currencies+10:
  db 8B 40 2C 8D 4D FC

dealloc(player_currencies)
dealloc(player_keys)
dealloc(newmem)
unregistersymbol(player_currencies)
unregistersymbol(player_keys)

{
// ORIGINAL CODE - INJECTION POINT: 1D799D78

""+1D799D58: 68 C0 0D 37 1E        -  push 1E370DC0
""+1D799D5D: E9 C6 62 B2 E8        -  jmp 062C0028
""+1D799D62: 00 00                 -  add [eax],al
""+1D799D64: 00 00                 -  add [eax],al
""+1D799D66: 00 00                 -  add [eax],al
""+1D799D68: 55                    -  push ebp
""+1D799D69: 8B EC                 -  mov ebp,esp
""+1D799D6B: 83 EC 08              -  sub esp,08
""+1D799D6E: C7 45 FC 00 00 00 00  -  mov [ebp-04],00000000
""+1D799D75: 8B 45 08              -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
""+1D799D78: 8B 40 2C              -  mov eax,[eax+2C]
""+1D799D7B: 8D 4D FC              -  lea ecx,[ebp-04]
// ---------- DONE INJECTING  ----------
""+1D799D7E: 83 EC 04              -  sub esp,04
""+1D799D81: 51                    -  push ecx
""+1D799D82: FF 75 0C              -  push [ebp+0C]
""+1D799D85: 50                    -  push eax
""+1D799D86: 39 00                 -  cmp [eax],eax
""+1D799D88: E8 1B 00 00 00        -  call System.Collections.Generic:Dictionary`2:TryGetValue
""+1D799D8D: 83 C4 10              -  add esp,10
""+1D799D90: 8B 45 FC              -  mov eax,[ebp-04]
""+1D799D93: C9                    -  leave 
""+1D799D94: C3                    -  ret 
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25</ID>
              <Description>"Player_Currencies"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>player_currencies</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>26</ID>
              <Description>"Player_Keys"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>player_keys</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>INJECT2</Name>
      <Address>23CB5E51</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Attack Result Types: 00 - miss
                     01 - dodge
                     02 - normal??
                     03 - critical
Currency Types: 03 - Upgrade Points
                04 - Unlock Points
</Comments>
</CheatTable>
