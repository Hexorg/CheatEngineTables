<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>474</ID>
      <Description>"Set player invulnerable (must take dmg first)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(SetInvincibility,0F B6 05 ?? ?? ?? ?? 85 C0 0F 85 41) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,1
  jmp return

SetInvincibility:
  jmp code
  nop
  nop
return:
registersymbol(SetInvincibility)

[DISABLE]

SetInvincibility:
  db 0F B6 05 4C 1F 03 06

unregistersymbol(SetInvincibility)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Unlimited Oxygen"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(AIR,D9 47 78 D9 EE D9) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [edi+78], (float)1
  fld dword ptr [edi+78]
  fldz 
  jmp return

AIR:
  jmp code
return:
registersymbol(AIR)

[DISABLE]

AIR:
  db D9 47 78 D9 EE

unregistersymbol(AIR)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0658CC6A

0658CC3A: EB 08                 -  jmp 0658CC44
0658CC3C: D9 E8                 -  fld1 
0658CC3E: DD 9D 30 FD FF FF     -  fstp qword ptr [ebp-000002D0]
0658CC44: DD 85 30 FD FF FF     -  fld qword ptr [ebp-000002D0]
0658CC4A: DD 9D 30 FD FF FF     -  fstp qword ptr [ebp-000002D0]
0658CC50: EB 0C                 -  jmp 0658CC5E
0658CC52: D9 05 B0 8D 03 0F     -  fld dword ptr [0F038DB0]
0658CC58: DD 9D 30 FD FF FF     -  fstp qword ptr [ebp-000002D0]
0658CC5E: DD 85 30 FD FF FF     -  fld qword ptr [ebp-000002D0]
0658CC64: D9 9D 5C FD FF FF     -  fstp dword ptr [ebp-000002A4]
// ---------- INJECTING HERE ----------
0658CC6A: D9 47 78              -  fld dword ptr [edi+78]
0658CC6D: D9 EE                 -  fldz 
// ---------- DONE INJECTING  ----------
0658CC6F: D9 05 C0 8D 03 0F     -  fld dword ptr [0F038DC0]
0658CC75: B8 D0 7F 77 0B        -  mov eax,0B777FD0
0658CC7A: D9 00                 -  fld dword ptr [eax]
0658CC7C: DE C9                 -  fmulp st(1),st(0)
0658CC7E: D9 85 5C FD FF FF     -  fld dword ptr [ebp-000002A4]
0658CC84: DE C9                 -  fmulp st(1),st(0)
0658CC86: 83 EC 04              -  sub esp,04
0658CC89: 83 EC 04              -  sub esp,04
0658CC8C: D9 1C 24              -  fstp dword ptr [esp]
0658CC8F: 83 EC 04              -  sub esp,04
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"500 of any received item (must obtain second one to trigger)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(Items,8B 46 0C 03 45 10 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [esi+0c],(int)500
  mov eax,[esi+0C]
  add eax,[ebp+10]
  jmp return

Items:
  jmp code
  nop
return:
registersymbol(Items)

[DISABLE]

Items:
  db 8B 46 0C 03 45 10

unregistersymbol(Items)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 06572EA1

06572E85: 83 EC 10              -  sub esp,10
06572E88: 8B 5D 08              -  mov ebx,[ebp+08]
06572E8B: 83 EC 0C              -  sub esp,0C
06572E8E: FF 75 0C              -  push [ebp+0C]
06572E91: E8 62 01 00 00        -  call 06572FF8
06572E96: 83 C4 10              -  add esp,10
06572E99: 8B F0                 -  mov esi,eax
06572E9B: 8B C6                 -  mov eax,esi
06572E9D: 85 C0                 -  test eax,eax
06572E9F: 74 0E                 -  je 06572EAF
// ---------- INJECTING HERE ----------
06572EA1: 8B 46 0C              -  mov eax,[esi+0C]
06572EA4: 03 45 10              -  add eax,[ebp+10]
// ---------- DONE INJECTING  ----------
06572EA7: 89 46 0C              -  mov [esi+0C],eax
06572EAA: E9 AC 00 00 00        -  jmp 06572F5B
06572EAF: D9 E8                 -  fld1 
06572EB1: DD 5D E8              -  fstp qword ptr [ebp-18]
06572EB4: 83 EC 0C              -  sub esp,0C
06572EB7: 68 B8 C9 03 0F        -  push 0F03C9B8
06572EBC: E8 E7 DC F8 FF        -  call 06500BA8
06572EC1: 83 C4 10              -  add esp,10
06572EC4: DD 45 E8              -  fld qword ptr [ebp-18]
06572EC7: 83 EC 04              -  sub esp,04
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>479</ID>
      <Description>"UnlimitedConstruction (to unlock steam acheivements, simply replace one block in the bridge and one block at the top of the tower after deactivating)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]


aobscan(RemoveForces,83 C4 10 85 C0 0F 85 51) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add esp,10
  mov eax, 1
  test eax,eax
  jmp return

RemoveForces:
  jmp code
return:
registersymbol(RemoveForces)

[DISABLE]

RemoveForces:
  db 83 C4 10 85 C0

unregistersymbol(RemoveForces)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0653E97B

0653E961: E9 C2 16 B4 FF        -  jmp 06080028
0653E966: 00 00                 -  add [eax],al
0653E968: 55                    -  push ebp
0653E969: 8B EC                 -  mov ebp,esp
0653E96B: 53                    -  push ebx
0653E96C: 56                    -  push esi
0653E96D: 83 EC 10              -  sub esp,10
0653E970: 83 EC 0C              -  sub esp,0C
0653E973: FF 75 08              -  push [ebp+08]
0653E976: E8 85 00 00 00        -  call CCell:HasBgSurface
// ---------- INJECTING HERE ----------
0653E97B: 83 C4 10              -  add esp,10
0653E97E: 85 C0                 -  test eax,eax
// ---------- DONE INJECTING  ----------
0653E980: 0F 85 51 00 00 00     -  jne CCell:IsContentAddingForces+6f
0653E986: 83 EC 0C              -  sub esp,0C
0653E989: FF 75 08              -  push [ebp+08]
0653E98C: E8 A7 00 00 00        -  call CCell:GetContent
0653E991: 83 C4 10              -  add esp,10
0653E994: 8B D8                 -  mov ebx,eax
0653E996: 8B F3                 -  mov esi,ebx
0653E998: 85 DB                 -  test ebx,ebx
0653E99A: 74 15                 -  je CCell:IsContentAddingForces+49
0653E99C: 8B 03                 -  mov eax,[ebx]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>477</ID>
      <Description>"All Guns Autofire"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(AutoFire,0F B6 40 40 85 C0 75 0C) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,1
  test eax,eax
  jmp return

AutoFire:
  jmp code
  nop
return:
registersymbol(AutoFire)

[DISABLE]

AutoFire:
  db 0F B6 40 40 85 C0

unregistersymbol(AutoFire)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 064F825B

064F8214: 57                             -  push edi
064F8215: 56                             -  push esi
064F8216: 81 EC 7C 01 00 00              -  sub esp,0000017C
064F821C: C7 85 C8 FE FF FF 00 00 00 00  -  mov [ebp-00000138],00000000
064F8226: C7 85 CC FE FF FF 00 00 00 00  -  mov [ebp-00000134],00000000
064F8230: C7 85 D0 FE FF FF 00 00 00 00  -  mov [ebp-00000130],00000000
064F823A: C7 85 D4 FE FF FF 00 00 00 00  -  mov [ebp-0000012C],00000000
064F8244: C7 85 D8 FE FF FF 00 00 00 00  -  mov [ebp-00000128],00000000
064F824E: C7 85 DC FE FF FF 00 00 00 00  -  mov [ebp-00000124],00000000
064F8258: 8B 45 08                       -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
064F825B: 0F B6 40 40                    -  movzx eax,byte ptr [eax+40]
064F825F: 85 C0                          -  test eax,eax
// ---------- DONE INJECTING  ----------
064F8261: 75 0C                          -  jne CItem_Weapon:FireIFP+5f
064F8263: 0F B6 45 0C                    -  movzx eax,byte ptr [ebp+0C]
064F8267: 85 C0                          -  test eax,eax
064F8269: 0F 84 90 0D 00 00              -  je CItem_Weapon:FireIFP+def
064F826F: 8B 45 08                       -  mov eax,[ebp+08]
064F8272: 8B 40 38                       -  mov eax,[eax+38]
064F8275: 85 C0                          -  test eax,eax
064F8277: 0F 84 B5 00 00 00              -  je CItem_Weapon:FireIFP+122
064F827D: 83 EC 0C                       -  sub esp,0C
064F8280: FF 75 08                       -  push [ebp+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>472</ID>
      <Description>"Rapid Fire (Use to fly) (turn off to reenable items)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(RapidF,3F 00 00 00 8D 4C B1 10 D9 19 8B 48 30) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(ZeroHack)
label(OneHack)

newmem:

ValueZero:
dd (float)0.0

ValueOne:
dd (float)1.0

code:
  cmp [ecx+4c], (int)12
  je ZeroHack
  cmp [ecx+48], (int)12
  je OneHack
  fstp dword ptr [ecx]
  mov ecx,[eax+30]
  jmp return

ZeroHack:
  fstp dword ptr [ValueZero]
  mov ecx,[eax+30]
  jmp return

OneHack:
  fstp dword ptr [ValueOne]
  mov ecx,[eax+30]
  jmp return

RapidF+08:
  jmp code
return:
registersymbol(RapidF)

[DISABLE]

RapidF+08:
  db D9 19 8B 48 30

unregistersymbol(RapidF)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 064EFFEB

""+64EFFC6: 39 78 0C           -  cmp [eax+0C],edi
""+64EFFC9: 0F 86 63 00 00 00  -  jbe 064F0032
""+64EFFCF: 8D 44 B8 10        -  lea eax,[eax+edi*4+10]
""+64EFFD3: 89 08              -  mov [eax],ecx
""+64EFFD5: 8B 45 08           -  mov eax,[ebp+08]
""+64EFFD8: 8B 48 14           -  mov ecx,[eax+14]
""+64EFFDB: D9 45 10           -  fld dword ptr [ebp+10]
""+64EFFDE: 39 71 0C           -  cmp [ecx+0C],esi
""+64EFFE1: 0F 86 3F 00 00 00  -  jbe 064F0026
""+64EFFE7: 8D 4C B1 10        -  lea ecx,[ecx+esi*4+10]
// ---------- INJECTING HERE ----------
""+64EFFEB: D9 19              -  fstp dword ptr [ecx]
""+64EFFED: 8B 48 30           -  mov ecx,[eax+30]
// ---------- DONE INJECTING  ----------
""+64EFFF0: 41                 -  inc ecx
""+64EFFF1: 89 48 30           -  mov [eax+30],ecx
""+64EFFF4: 8D 65 F4           -  lea esp,[ebp-0C]
""+64EFFF7: 5E                 -  pop esi
""+64EFFF8: 5F                 -  pop edi
""+64EFFF9: 5B                 -  pop ebx
""+64EFFFA: C9                 -  leave 
""+64EFFFB: C3                 -  ret 
""+64EFFFC: 83 EC 0C           -  sub esp,0C
""+64EFFFF: 68 70 FA 00 00     -  push 0000FA70
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>475</ID>
      <Description>"Max Dmg (must deal dmg first)"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(EnemyDmgTaken,D9 45 0C DE E9 83) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(NewDmg)

newmem:

NewDmg:
dd (float)99999

code:
  fld dword ptr [NewDmg]
  fsubp st(1),st(0)
  jmp return

EnemyDmgTaken:
  jmp code
return:
registersymbol(EnemyDmgTaken)

[DISABLE]

EnemyDmgTaken:
  db D9 45 0C DE E9

unregistersymbol(EnemyDmgTaken)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0650E924

0650E8FB: 53                    -  push ebx
0650E8FC: 57                    -  push edi
0650E8FD: 83 EC 70              -  sub esp,70
0650E900: 8B 5D 08              -  mov ebx,[ebp+08]
0650E903: C7 45 9C 00 00 00 00  -  mov [ebp-64],00000000
0650E90A: C7 45 A0 00 00 00 00  -  mov [ebp-60],00000000
0650E911: C7 45 A4 00 00 00 00  -  mov [ebp-5C],00000000
0650E918: C7 45 A8 00 00 00 00  -  mov [ebp-58],00000000
0650E91F: D9 EE                 -  fldz 
0650E921: D9 43 6C              -  fld dword ptr [ebx+6C]
// ---------- INJECTING HERE ----------
0650E924: D9 45 0C              -  fld dword ptr [ebp+0C]
0650E927: DE E9                 -  fsubp st(1),st(0)
// ---------- DONE INJECTING  ----------
0650E929: 83 EC 08              -  sub esp,08
0650E92C: 83 EC 04              -  sub esp,04
0650E92F: D9 1C 24              -  fstp dword ptr [esp]
0650E932: 83 EC 04              -  sub esp,04
0650E935: D9 1C 24              -  fstp dword ptr [esp]
0650E938: E8 23 72 FE FF        -  call UnityEngine:Mathf:Max
0650E93D: 83 C4 10              -  add esp,10
0650E940: D9 5B 6C              -  fstp dword ptr [ebx+6C]
0650E943: 83 EC 08              -  sub esp,08
0650E946: FF 75 10              -  push [ebp+10]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>482</ID>
      <Description>"Minimap reveals all underground"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(NoLightMinimap,3D 0F 00 00 00 0F 8F) // should be unique
registersymbol(NoLightMinimap)

NoLightMinimap+5:
  db EB 6B 90 90 90 90

[DISABLE]

NoLightMinimap+5:
  db 0F 8F 67 00 00 00

unregistersymbol(NoLightMinimap)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>483</ID>
      <Description>"Reveal more minimap (pause game, activate me, wait until minimap updates (20-30 seconds) deactivate, unpause)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DigOrDie.exe
  Version: 
  Date   : 2016-06-14
  Author : kh

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(ChangeCamera,DigOrDie.exe,D9 80 F8 02 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(doubleit)
newmem:

doubleit:
 dd (float)250

code:
  push ebx
  mov ebx, [doubleit]
  mov [eax+000002F8], ebx
  pop ebx
  fld dword ptr [eax+000002F8]
  jmp return

ChangeCamera:
  jmp code
  nop
return:
registersymbol(ChangeCamera)

[DISABLE]

ChangeCamera:
  db D9 80 F8 02 00 00

unregistersymbol(ChangeCamera)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "DigOrDie.exe"+2D4C81

"DigOrDie.exe"+2D4C6E: CC                 -  int 3 
"DigOrDie.exe"+2D4C6F: CC                 -  int 3 
"DigOrDie.exe"+2D4C70: 55                 -  push ebp
"DigOrDie.exe"+2D4C71: 8B EC              -  mov ebp,esp
"DigOrDie.exe"+2D4C73: 8B 4D 08           -  mov ecx,[ebp+08]
"DigOrDie.exe"+2D4C76: 85 C9              -  test ecx,ecx
"DigOrDie.exe"+2D4C78: 74 0F              -  je DigOrDie.exe+2D4C89
"DigOrDie.exe"+2D4C7A: 8B 41 0C           -  mov eax,[ecx+0C]
"DigOrDie.exe"+2D4C7D: 85 C0              -  test eax,eax
"DigOrDie.exe"+2D4C7F: 74 08              -  je DigOrDie.exe+2D4C89
// ---------- INJECTING HERE ----------
"DigOrDie.exe"+2D4C81: D9 80 F8 02 00 00  -  fld dword ptr [eax+000002F8]
// ---------- DONE INJECTING  ----------
"DigOrDie.exe"+2D4C87: 5D                 -  pop ebp
"DigOrDie.exe"+2D4C88: C3                 -  ret 
"DigOrDie.exe"+2D4C89: 51                 -  push ecx
"DigOrDie.exe"+2D4C8A: E8 F1 59 ED FF     -  call DigOrDie.exe+1AA680
"DigOrDie.exe"+2D4C8F: CC                 -  int 3 
"DigOrDie.exe"+2D4C90: 55                 -  push ebp
"DigOrDie.exe"+2D4C91: 8B EC              -  mov ebp,esp
"DigOrDie.exe"+2D4C93: 8B 45 08           -  mov eax,[ebp+08]
"DigOrDie.exe"+2D4C96: 85 C0              -  test eax,eax
"DigOrDie.exe"+2D4C98: 74 19              -  je DigOrDie.exe+2D4CB3
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :fstp dword ptr [edi+6C]</Description>
      <Address>06507D9C</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FA</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5F</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>0C</Byte>
        <Byte>57</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :fstp dword ptr [edi+78]</Description>
      <Address>065091E3</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5F</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>34</Byte>
        <Byte>D9</Byte>
        <Byte>47</Byte>
        <Byte>78</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[esi+0C]</Description>
      <Address>0653FE89</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>C6</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>0E</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>03</Byte>
        <Byte>45</Byte>
        <Byte>10</Byte>
        <Byte>89</Byte>
        <Byte>46</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [esi+0C],eax</Description>
      <Address>0653FE8F</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>46</Byte>
        <Byte>0C</Byte>
        <Byte>03</Byte>
        <Byte>45</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>E9</Byte>
        <Byte>AC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>HEALTH: fstp dword ptr [ebx+6C]</Description>
      <Address>065AE7A8</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5B</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>08</Byte>
        <Byte>FF</Byte>
        <Byte>75</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>DMG :fld dword ptr [ebx+6C]</Description>
      <Address>064DE791</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>43</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>DE</Byte>
        <Byte>E9</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>dmg2 :fstp dword ptr [edi+6C]</Description>
      <Address>064DB85C</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FA</Byte>
        <Byte>FF</Byte>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>5F</Byte>
        <Byte>6C</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>0C</Byte>
        <Byte>57</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :fld dword ptr [edi+78]</Description>
      <Address>0658CC6A</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>9D</Byte>
        <Byte>5C</Byte>
        <Byte>FD</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>47</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>D9</Byte>
        <Byte>05</Byte>
        <Byte>C0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>x :mov [eax],ecx</Description>
      <Address>0658CA6E</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8D</Byte>
        <Byte>60</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
        <Byte>64</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>y :mov [eax+04],ecx</Description>
      <Address>0658CA76</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8D</Byte>
        <Byte>64</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>D9</Byte>
        <Byte>EE</Byte>
        <Byte>C7</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je SMinimap:OnUpdate+242</Description>
      <Address>066C95C7</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>0C</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>19</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>80</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of je SMinimap:OnUpdate+265</Description>
      <Address>066C95E0</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>49</Byte>
        <Byte>0C</Byte>
        <Byte>3B</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>23</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>80</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+1049</Description>
      <Address>066C963A</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>CA</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>A9</Byte>
        <Byte>0D</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>85</Byte>
        <Byte>64</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+1042</Description>
      <Address>066C9658</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>08</Byte>
        <Byte>3B</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>84</Byte>
        <Byte>0D</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>AF</Byte>
        <Byte>C1</Byte>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jg SMinimap:OnUpdate+351</Description>
      <Address>066C9684</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>3D</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8F</Byte>
        <Byte>67</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>05</Byte>
        <Byte>48</Byte>
        <Byte>FE</Byte>
        <Byte>13</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+102d</Description>
      <Address>066C970B</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>CA</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>BC</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>85</Byte>
        <Byte>64</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+102d</Description>
      <Address>0662C43B</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>CA</Byte>
        <Byte>8B</Byte>
        <Byte>10</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>BC</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>85</Byte>
        <Byte>64</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+1026</Description>
      <Address>0662C459</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>08</Byte>
        <Byte>3B</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>97</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>AF</Byte>
        <Byte>C1</Byte>
        <Byte>8B</Byte>
        <Byte>8D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jbe SMinimap:OnUpdate+101f</Description>
      <Address>0662C4BA</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>03</Byte>
        <Byte>CA</Byte>
        <Byte>39</Byte>
        <Byte>48</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>86</Byte>
        <Byte>2F</Byte>
        <Byte>0C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8D</Byte>
        <Byte>44</Byte>
        <Byte>88</Byte>
        <Byte>10</Byte>
        <Byte>89</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jl SMinimap:OnUpdate+280</Description>
      <Address>0662C4F3</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>3B</Byte>
        <Byte>D8</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8C</Byte>
        <Byte>57</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>46</Byte>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>7C</Byte>
        <Byte>FE</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jl SMinimap:OnUpdate+270</Description>
      <Address>0662C502</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8C</Byte>
        <Byte>38</Byte>
        <Byte>FE</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>08</Byte>
        <Byte>89</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Food</Name>
      <Address>06547905</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Growls</Name>
      <Address>06562C35</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AAcheck</Name>
      <Address>06596072</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Bullets</Name>
      <Address>06567AE1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Hunger</Name>
      <Address>06563C83</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AAHACK</Name>
      <Address>06566706</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fatigue</Name>
      <Address>065636C5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Health</Name>
      <Address>0653E5B8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>NoForces</Name>
      <Address>065046F6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Minimaptoggle</Name>
      <Address> 066C94A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>SetInvincibility</Name>
      <Address> 2645135E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AIR</Name>
      <Address> 0662DB8A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EnemyDmgTaken</Name>
      <Address> 26450A9C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>NoLightMinimap</Name>
      <Address> 0663D6DF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Items</Name>
      <Address> 06612F51</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>RemoveForces</Name>
      <Address> 065D33AA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AutoFire</Name>
      <Address> 264492A3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>RapidF</Name>
      <Address> 066000CB</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
