<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Enable Cheat"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
LaunchMonoDataCollector()
{$asm}

 
 
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Infinite HP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(takeHPAddress,PlayerData:TakeHealth+49)
define(takeHPBytes,2B 45 0C 89 46 68)

[ENABLE]

assert(takeHPAddress,takeHPBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[esi+6C]
  mov [esi+68],eax
  jmp return

takeHPAddress:
  jmp newmem
  nop
return:

[DISABLE]

takeHPAddress:
  db takeHPBytes
  // sub eax,[ebp+0C]
  // mov [esi+68],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 38B39C81

38B39C62: 89 46 68              -  mov [esi+68],eax
38B39C65: EB 20                 -  jmp PlayerData:TakeHealth+4f
38B39C67: C6 46 7C 00           -  mov byte ptr [esi+7C],00
38B39C6B: 8B 46 68              -  mov eax,[esi+68]
38B39C6E: 2B 45 0C              -  sub eax,[ebp+0C]
38B39C71: 85 C0                 -  test eax,eax
38B39C73: 7F 09                 -  jg PlayerData:TakeHealth+46
38B39C75: C7 46 68 00 00 00 00  -  mov [esi+68],00000000
38B39C7C: EB 09                 -  jmp PlayerData:TakeHealth+4f
38B39C7E: 8B 46 68              -  mov eax,[esi+68]
// ---------- INJECTING HERE ----------
38B39C81: 2B 45 0C              -  sub eax,[ebp+0C]
38B39C84: 89 46 68              -  mov [esi+68],eax
// ---------- DONE INJECTING  ----------
38B39C87: 8D 65 FC              -  lea esp,[ebp-04]
38B39C8A: 5E                    -  pop esi
38B39C8B: C9                    -  leave 
38B39C8C: C3                    -  ret 
38B39C8D: 00 00                 -  add [eax],al
38B39C8F: 00 68 10              -  add [eax+10],ch
38B39C92: 25 A9 10 E9 8E        -  and eax,8EE910A9
38B39C97: 64 C8 CC 00 00        -  enter 00CC,00
38B39C9C: 00 00                 -  add [eax],al
38B39C9E: 00 00                 -  add [eax],al
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Infinite Soul"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(addMPChargeAddress,PlayerData:AddMPCharge+7b)
define(addMPChargeBytes,89 86 A4 00 00 00)
define(takeMPAddress,PlayerData:TakeMP+1b)
define(takeMPBytes,2B 45 0C 89 86 A4 00 00 00)

[ENABLE]

assert(addMPChargeAddress,addMPChargeBytes)
alloc(newmem,$1000)
assert(takeMPAddress,takeMPBytes)
alloc(newmemtakeMP,$1000)

label(codetakeMP)
label(returntakeMP)
label(code)
label(return)

newmem:

code:
  mov eax,[esi+000000A0]
  mov [esi+000000A4],eax
  jmp return

newmemtakeMP:

codetakeMP:
  mov eax,[esi+000000A0]
  mov [esi+000000A4],eax
  jmp returntakeMP

addMPChargeAddress:
  jmp newmem
  nop
return:

takeMPAddress:
  jmp newmemtakeMP
  nop
  nop
  nop
  nop
returntakeMP:

[DISABLE]

addMPChargeAddress:
  db addMPChargeBytes
  // mov [esi+000000A4],eax

takeMPAddress:
  db takeMPBytes
  // sub eax,[ebp+0C]
  // mov [esi+000000A4],eax

dealloc(newmemtakeMP)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 38B9623B

38B9620E: 8B 8E AC 00 00 00  -  mov ecx,[esi+000000AC]
38B96214: 3B C1              -  cmp eax,ecx
38B96216: 7E 0C              -  jle PlayerData:AddMPCharge+64
38B96218: 8B 86 AC 00 00 00  -  mov eax,[esi+000000AC]
38B9621E: 89 86 A8 00 00 00  -  mov [esi+000000A8],eax
38B96224: 8B 86 A0 00 00 00  -  mov eax,[esi+000000A0]
38B9622A: 89 86 A4 00 00 00  -  mov [esi+000000A4],eax
38B96230: EB 0F              -  jmp PlayerData:AddMPCharge+81
38B96232: 8B 86 A4 00 00 00  -  mov eax,[esi+000000A4]
38B96238: 03 45 0C           -  add eax,[ebp+0C]
// ---------- INJECTING HERE ----------
38B9623B: 89 86 A4 00 00 00  -  mov [esi+000000A4],eax
// ---------- DONE INJECTING  ----------
38B96241: 8D 65 FC           -  lea esp,[ebp-04]
38B96244: 5E                 -  pop esi
38B96245: C9                 -  leave 
38B96246: C3                 -  ret 
38B96247: 00 55 8B           -  add [ebp-75],dl
38B9624A: EC                 -  in al,dx
38B9624B: 53                 -  push ebx
38B9624C: 57                 -  push edi
38B9624D: 56                 -  push esi
38B9624E: 83 EC 0C           -  sub esp,0C
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Infinite Geo"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(addGeoAddress,PlayerData:AddGeo+13)
define(addGeoBytes,89 86 9C 00 00 00)

[ENABLE]

assert(addGeoAddress,addGeoBytes)
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,#9999
  mov [esi+0000009C],eax
  jmp return

addGeoAddress:
  jmp newmem
  nop
return:

[DISABLE]

addGeoAddress:
  db addGeoBytes
  // mov [esi+0000009C],eax

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 38B9B63B

38B9B622: 00 00                          -  add [eax],al
38B9B624: 00 00                          -  add [eax],al
38B9B626: 00 00                          -  add [eax],al
38B9B628: 55                             -  push ebp
38B9B629: 8B EC                          -  mov ebp,esp
38B9B62B: 56                             -  push esi
38B9B62C: 83 EC 04                       -  sub esp,04
38B9B62F: 8B 75 08                       -  mov esi,[ebp+08]
38B9B632: 8B 86 9C 00 00 00              -  mov eax,[esi+0000009C]
38B9B638: 03 45 0C                       -  add eax,[ebp+0C]
// ---------- INJECTING HERE ----------
38B9B63B: 89 86 9C 00 00 00              -  mov [esi+0000009C],eax
// ---------- DONE INJECTING  ----------
38B9B641: 3D 7F 96 98 00                 -  cmp eax,0098967F
38B9B646: 7E 0A                          -  jle PlayerData:AddGeo+2a
38B9B648: C7 86 9C 00 00 00 7F 96 98 00  -  mov [esi+0000009C],0098967F
38B9B652: 8D 65 FC                       -  lea esp,[ebp-04]
38B9B655: 5E                             -  pop esi
38B9B656: C9                             -  leave 
38B9B657: C3                             -  ret 
38B9B658: 55                             -  push ebp
38B9B659: 8B EC                          -  mov ebp,esp
38B9B65B: 57                             -  push edi
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :sub eax,[ebp+0C] sub hp</Description>
      <Address>38B39C81</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>EB</Byte>
        <Byte>09</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
        <Byte>68</Byte>
      </Before>
      <Actual>
        <Byte>2B</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>68</Byte>
        <Byte>8D</Byte>
        <Byte>65</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
