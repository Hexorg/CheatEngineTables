<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Stats"</Description>
      <Options moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(HP,F3 0F 10 86 F4 00 00 00 F3 0F 5A C0 48 63) // should be unique
alloc(newmem,$1000)
alloc(bStats,8)
alloc(Days,8)
alloc(Hours,8)
alloc(Minutes,8)
registersymbol(bStats)
registersymbol(Days)
registersymbol(Hours)
registersymbol(Minutes)

label(code)
label(return)

newmem:

code:
  mov [bStats], rsi
  movss xmm0,[rsi+000000F4]
  jmp return

HP:
  jmp code
  nop
  nop
  nop
return:
registersymbol(HP)

[DISABLE]

HP:
  db F3 0F 10 86 F4 00 00 00

unregistersymbol(HP)
unregistersymbol(bStats)
dealloc(newmem)
dealloc(bStats)
dealloc(Days)
dealloc(Hours)
dealloc(Minutes)
unregistersymbol(Days)
unregistersymbol(Hours)
unregistersymbol(Minutes)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>168</ID>
          <Description>"World Time"</Description>
          <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>15</ID>
              <Description>"World Time (86400 = 1 day) (3600 = 1 hour) (60 = 1 min)"</Description>
              <VariableType>Float</VariableType>
              <Address>bStats</Address>
              <Offsets>
                <Offset>54</Offset>
                <Offset>68</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>158</ID>
              <Description>"World Time (Days, Hours, Minutes)(can't edit)"</Description>
              <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
myTimer.Enabled = true
[DISABLE]
myTimer.Enabled = false
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>159</ID>
                  <Description>"Days"</Description>
                  <VariableType>Float</VariableType>
                  <Address>Days</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>161</ID>
                  <Description>"Hours"</Description>
                  <VariableType>Float</VariableType>
                  <Address>Hours</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>160</ID>
                  <Description>"Minutes"</Description>
                  <VariableType>Float</VariableType>
                  <Address>Minutes</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>157</ID>
              <Description>"Set to Morning (6am)"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
SetTime(6.0)
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>165</ID>
              <Description>"Set to Afternoon (12pm)"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
SetTime(12.0)
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>164</ID>
              <Description>"Set to Night (6pm)"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
SetTime(18)
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>166</ID>
              <Description>"Set to Midnight same day (12am)"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
SetTime(0.0)
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>167</ID>
              <Description>"Set to Midnight next day (12am)"</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}
if syntaxcheck then return end
[ENABLE]
SetTime(24.0)
[DISABLE]
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Gold"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>FC</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>169</ID>
          <Description>"Total Gold"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>100</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>179</ID>
          <Description>"Slime Keys"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>104</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>173</ID>
          <Description>"Max Slot Size (99 max)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>D0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Max HP"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>C8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>171</ID>
          <Description>"Current HP"</Description>
          <VariableType>Float</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>F4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>175</ID>
          <Description>"healthRecoveredPerSecond"</Description>
          <VariableType>Float</VariableType>
          <Address>bstats</Address>
          <Offsets>
            <Offset>A4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>172</ID>
          <Description>"Max Energy"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>CC</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Current Energy"</Description>
          <VariableType>Float</VariableType>
          <Address>bStats</Address>
          <Offsets>
            <Offset>F0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>174</ID>
          <Description>"energyRecoveredPerSecond"</Description>
          <VariableType>Float</VariableType>
          <Address>bstats</Address>
          <Offsets>
            <Offset>A0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>177</ID>
          <Description>"Current Rads"</Description>
          <VariableType>Float</VariableType>
          <Address>bstats</Address>
          <Offsets>
            <Offset>F8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>178</ID>
          <Description>"Max Rads"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>bstats</Address>
          <Offsets>
            <Offset>94</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>176</ID>
          <Description>"radsRecoveredPerSecond"</Description>
          <VariableType>Float</VariableType>
          <Address>bstats</Address>
          <Offsets>
            <Offset>A8</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Daily Plort Values"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(PlortVals,F3 44 0F 11 78 14 48 8B CD 48 81) // should be unique
alloc(newmem,$1000,2C96B2FB)

label(code)
label(return)
label(multiplier)
label(dummy)
label(Limit)

newmem:

multiplier:
dd (float)5

dummy:
dd (float)5


code:
  cmp dword ptr [rax+10], (float)100
  jg Limit
  fld dword ptr [rax+10]
  fld dword ptr [multiplier]
  fmul st(0), st(1)
  fst dword ptr [rax+14]
  fstp dword ptr [rax+18]
  fstp dword ptr [dummy]
  movss xmm15, [rax+14]
  jmp return

Limit:
  mov dword ptr [rax+14], (float)999
  mov dword ptr [rax+18], (float)999
  movss xmm15, [rax+14]
  jmp return

PlortVals:
  jmp code
  nop
return:
registersymbol(PlortVals)

[DISABLE]

PlortVals:
  db F3 44 0F 11 78 14

unregistersymbol(PlortVals)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 2C96B2FB

2C96B2C8: 48 8B 85 58 FF FF FF           -  mov rax,[rbp-000000A8]
2C96B2CF: 48 8B C8                       -  mov rcx,rax
2C96B2D2: F3 0F 10 41 14                 -  movss xmm0,[rcx+14]
2C96B2D7: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
2C96B2DB: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
2C96B2E0: F3 44 0F 11 78 18              -  movss [rax+18],xmm15
2C96B2E6: 48 8B 85 58 FF FF FF           -  mov rax,[rbp-000000A8]
2C96B2ED: F3 0F 10 45 C4                 -  movss xmm0,[rbp-3C]
2C96B2F2: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
2C96B2F6: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
// ---------- INJECTING HERE ----------
2C96B2FB: F3 44 0F 11 78 14              -  movss [rax+14],xmm15
// ---------- DONE INJECTING  ----------
2C96B301: 48 8B CD                       -  mov rcx,rbp
2C96B304: 48 81 C1 60 FF FF FF           -  add rcx,FFFFFF60
2C96B30B: 48 83 EC 20                    -  sub rsp,20
2C96B30F: 49 BB A0 B5 96 2C 00 00 00 00  -  mov r11,000000002C96B5A0
2C96B319: 41 FF D3                       -  call r11d
2C96B31C: 48 83 C4 20                    -  add rsp,20
2C96B320: 85 C0                          -  test eax,eax
2C96B322: 0F 85 40 FE FF FF              -  jne 2C96B168
2C96B328: 48 83 EC 08                    -  sub rsp,08
2C96B32C: E8 09 00 00 00                 -  call 2C96B33A
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Set Hotbar, Silo, and Feed Slots to 99"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(ToolBar,48 63 40 24 48 8B 34 24) // should be unique
alloc(newmem,$1000,0E6A8ADC)

label(code)
label(return)

newmem:

code:
  mov [rax+24], #99
  movsxd  rax,dword ptr [rax+24]
  mov rsi,[rsp]
  jmp return

ToolBar:
  jmp code
  nop
  nop
  nop
return:
registersymbol(ToolBar)

[DISABLE]

ToolBar:
  db 48 63 40 24 48 8B 34 24

unregistersymbol(ToolBar)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0E6A8ADC

0E6A8ABB: 48 85 C0                       -  test rax,rax
0E6A8ABE: 75 04                          -  jne 0E6A8AC4
0E6A8AC0: 33 C0                          -  xor eax,eax
0E6A8AC2: EB 1C                          -  jmp 0E6A8AE0
0E6A8AC4: 48 8B 47 10                    -  mov rax,[rdi+10]
0E6A8AC8: 48 63 CE                       -  movsxd  rcx,esi
0E6A8ACB: 39 48 18                       -  cmp [rax+18],ecx
0E6A8ACE: 0F 86 1A 00 00 00              -  jbe 0E6A8AEE
0E6A8AD4: 48 8D 44 C8 20                 -  lea rax,[rax+rcx*8+20]
0E6A8AD9: 48 8B 00                       -  mov rax,[rax]
// ---------- INJECTING HERE ----------
0E6A8ADC: 48 63 40 24                    -  movsxd  rax,dword ptr [rax+24]
0E6A8AE0: 48 8B 34 24                    -  mov rsi,[rsp]
// ---------- DONE INJECTING  ----------
0E6A8AE4: 48 8B 7C 24 08                 -  mov rdi,[rsp+08]
0E6A8AE9: 48 83 C4 18                    -  add rsp,18
0E6A8AED: C3                             -  ret 
0E6A8AEE: BA 37 00 00 00                 -  mov edx,00000037
0E6A8AF3: B9 43 01 00 02                 -  mov ecx,02000143
0E6A8AF8: 49 BB D0 1C EC 03 00 00 00 00  -  mov r11,0000000003EC1CD0
0E6A8B02: 41 FF D3                       -  call r11d
0E6A8B05: BA 58 00 00 00                 -  mov edx,00000058
0E6A8B0A: EB E7                          -  jmp 0E6A8AF3
0E6A8B0C: 00 00                          -  add [rax],al
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>114</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>180</ID>
      <Description>"Inf Water (cant be used same time as set hotbar)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(ToolBar,48 63 40 24 48 8B 34 24) // should be unique
alloc(newmem,$1000,0E6A8ADC)

label(code)
label(return)
label(NotWater)
newmem:

code:
  cmp [rax+20], #48
  jne NotWater
  mov [rax+24], #99
  movsxd  rax,dword ptr [rax+24]
  mov rsi,[rsp]
  jmp return

NotWater:
  movsxd  rax,dword ptr [rax+24]
  mov rsi,[rsp]
  jmp return


ToolBar:
  jmp code
  nop
  nop
  nop
return:
registersymbol(ToolBar)

[DISABLE]

ToolBar:
  db 48 63 40 24 48 8B 34 24

unregistersymbol(ToolBar)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0E6A8ADC

0E6A8ABB: 48 85 C0                       -  test rax,rax
0E6A8ABE: 75 04                          -  jne 0E6A8AC4
0E6A8AC0: 33 C0                          -  xor eax,eax
0E6A8AC2: EB 1C                          -  jmp 0E6A8AE0
0E6A8AC4: 48 8B 47 10                    -  mov rax,[rdi+10]
0E6A8AC8: 48 63 CE                       -  movsxd  rcx,esi
0E6A8ACB: 39 48 18                       -  cmp [rax+18],ecx
0E6A8ACE: 0F 86 1A 00 00 00              -  jbe 0E6A8AEE
0E6A8AD4: 48 8D 44 C8 20                 -  lea rax,[rax+rcx*8+20]
0E6A8AD9: 48 8B 00                       -  mov rax,[rax]
// ---------- INJECTING HERE ----------
0E6A8ADC: 48 63 40 24                    -  movsxd  rax,dword ptr [rax+24]
0E6A8AE0: 48 8B 34 24                    -  mov rsi,[rsp]
// ---------- DONE INJECTING  ----------
0E6A8AE4: 48 8B 7C 24 08                 -  mov rdi,[rsp+08]
0E6A8AE9: 48 83 C4 18                    -  add rsp,18
0E6A8AED: C3                             -  ret 
0E6A8AEE: BA 37 00 00 00                 -  mov edx,00000037
0E6A8AF3: B9 43 01 00 02                 -  mov ecx,02000143
0E6A8AF8: 49 BB D0 1C EC 03 00 00 00 00  -  mov r11,0000000003EC1CD0
0E6A8B02: 41 FF D3                       -  call r11d
0E6A8B05: BA 58 00 00 00                 -  mov edx,00000058
0E6A8B0A: EB E7                          -  jmp 0E6A8AF3
0E6A8B0C: 00 00                          -  add [rax],al
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>114</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>185</ID>
      <Description>"Initialize Movement Speed (Must Jump or Sprint to Activate)"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(mSpeed,F3 0F 10 86 44 02 00 00 F3 0F 5A C0 F3 0F 10 0D E5) // should be unique
alloc(newmem,$1000,17C89F57)
alloc(bSpeed,8)

label(code)
label(return)

newmem:

code:
  mov [bSpeed], rsi
  movss xmm0,[rsi+00000244]
  jmp return

mSpeed:
  jmp code
  nop
  nop
  nop
return:
registersymbol(mSpeed)
registersymbol(bSpeed)

[DISABLE]

mSpeed:
  db F3 0F 10 86 44 02 00 00

unregistersymbol(mSpeed)
unregistersymbol(bSpeed)
dealloc(newmem)
dealloc(bSpeed)

{
// ORIGINAL CODE - INJECTION POINT: 17C89F57

17C89F20: 49 BB F0 E0 E6 20 00 00 00 00  -  mov r11,vp_Component:get_Transform
17C89F2A: 41 FF D3                       -  call r11d
17C89F2D: 48 83 C4 20                    -  add rsp,20
17C89F31: 48 89 85 20 FE FF FF           -  mov [rbp-000001E0],rax
17C89F38: 48 8B CD                       -  mov rcx,rbp
17C89F3B: 48 81 C1 E0 FE FF FF           -  add rcx,FFFFFEE0
17C89F42: 48 83 EC 20                    -  sub rsp,20
17C89F46: 49 BB E0 7F E4 20 00 00 00 00  -  mov r11,UnityEngine:Vector3:get_forward
17C89F50: 41 FF D3                       -  call r11d
17C89F53: 48 83 C4 20                    -  add rsp,20
// ---------- INJECTING HERE ----------
17C89F57: F3 0F 10 86 44 02 00 00        -  movss xmm0,[rsi+00000244]
// ---------- DONE INJECTING  ----------
17C89F5F: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
17C89F63: F3 0F 10 0D E5 05 00 00        -  movss xmm1,[vp_FPController:UpdateThrottleWalk+860]
17C89F6B: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
17C89F6F: F2 0F 59 C1                    -  mulsd xmm0,xmm1
17C89F73: 48 8B CD                       -  mov rcx,rbp
17C89F76: 48 81 C1 F0 FE FF FF           -  add rcx,FFFFFEF0
17C89F7D: F2 0F 10 C8                    -  movsd xmm1,xmm0
17C89F81: F2 0F 5A C9                    -  cvtsd2ss xmm1,xmm1
17C89F85: 48 83 EC 10                    -  sub rsp,10
17C89F89: 48 8B 85 E0 FE FF FF           -  mov rax,[rbp-00000120]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>188</ID>
          <Description>"Enable Fast Movement"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
[bSpeed]+244:
dd (float).5

[bSpeed]+248:
dd (float).1

[bSpeed]+280:
dd (float)1

[DISABLE]
[bSpeed]+244:
dd (float).25

[bSpeed]+248:
dd (float).15

[bSpeed]+280:
dd (float).2
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>114</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries Activated="1">
            <CheatEntry>
              <ID>181</ID>
              <Description>"MotorAcceleration"</Description>
              <VariableType>Float</VariableType>
              <Address>bspeed</Address>
              <Offsets>
                <Offset>244</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>182</ID>
              <Description>"MotorDamping"</Description>
              <VariableType>Float</VariableType>
              <Address>bspeed</Address>
              <Offsets>
                <Offset>248</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>193</ID>
              <Description>"MotorJumpForce"</Description>
              <VariableType>Float</VariableType>
              <Address>bspeed</Address>
              <Offsets>
                <Offset>280</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>195</ID>
      <Description>"Increase Jetpack Height Ceiling"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : SlimeRancher.exe
  Version: 
  Date   : 2016-06-16
  Author : kh

  This script does blah blah blah
}

[ENABLE]

aobscan(Throttle,F3 0F 10 88 88 00 00 00 F3) // should be unique
alloc(newmem,$1000,17D22A03)

label(code)
label(return)
label(newHeight)
newmem:

newHeight:
dd (float)150

code:
  movss xmm1, [newHeight]
  jmp return

Throttle:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Throttle)

[DISABLE]

Throttle:
  db F3 0F 10 88 88 00 00 00

unregistersymbol(Throttle)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 17D22A03

17D229DD: 00 00                          -  add [rax],al
17D229DF: 00 55 48                       -  add [rbp+48],dl
17D229E2: 8B EC                          -  mov ebp,esp
17D229E4: 48 83 EC 30                    -  sub rsp,30
17D229E8: 48 89 4D F0                    -  mov [rbp-10],rcx
17D229EC: F3 0F 11 4D E8                 -  movss [rbp-18],xmm1
17D229F1: F3 0F 11 55 E0                 -  movss [rbp-20],xmm2
17D229F6: F3 0F 10 45 E8                 -  movss xmm0,[rbp-18]
17D229FB: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
17D229FF: 48 8B 45 F0                    -  mov rax,[rbp-10]
// ---------- INJECTING HERE ----------
17D22A03: F3 0F 10 88 88 00 00 00        -  movss xmm1,[rax+00000088]
// ---------- DONE INJECTING  ----------
17D22A0B: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
17D22A0F: F2 0F 5C C1                    -  subsd xmm0,xmm1
17D22A13: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
17D22A18: F3 44 0F 11 7D FC              -  movss [rbp-04],xmm15
17D22A1E: F3 0F 10 45 FC                 -  movss xmm0,[rbp-04]
17D22A23: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
17D22A27: 66 0F 57 C9                    -  xorpd xmm1,xmm1
17D22A2B: 66 0F 2F C8                    -  comisd xmm1,xmm0
17D22A2F: 72 0D                          -  jb 17D22A3E
17D22A31: 66 0F 57 C0                    -  xorpd xmm0,xmm0
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>196</ID>
      <Description>"Slimepocalypse (aka, please show me a gold or coin slime)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : SlimeRancher.exe
  Version: 
  Date   : 2016-06-16
  Author : kh

  This script does blah blah blah
}

[ENABLE]

aobscan(Slimepocalypse,48 63 57 30 4C 63 47 34) // should be unique
alloc(newmem,$1000,56E28678)

label(code)
label(return)
label(DeathbySlimes)

newmem:

DeathbySlimes:
dd (int)100

code:
  movsxd  rdx,dword ptr [DeathbySlimes]
  movsxd  r8,dword ptr [DeathbySlimes]
  jmp return

Slimepocalypse:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Slimepocalypse)

[DISABLE]

Slimepocalypse:
  db 48 63 57 30 4C 63 47 34

unregistersymbol(Slimepocalypse)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 56E28678

56E28645: EB 11                          -  jmp SpawnerTrigger:OnTriggerEnter+1d8
56E28647: F3 0F 10 05 B1 01 00 00        -  movss xmm0,[SpawnerTrigger:OnTriggerEnter+380]
56E2864F: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
56E28653: F2 0F 11 45 D8                 -  movsd [rbp-28],xmm0
56E28658: F2 0F 10 45 D8                 -  movsd xmm0,[rbp-28]
56E2865D: F2 44 0F 5A F8                 -  cvtsd2ss xmm15,xmm0
56E28662: F3 44 0F 11 7D E4              -  movss [rbp-1C],xmm15
56E28668: 48 8B 47 20                    -  mov rax,[rdi+20]
56E2866C: 48 89 45 D0                    -  mov [rbp-30],rax
56E28670: 48 8B 04 25 90 B0 E5 03        -  mov rax,[03E5B090]
// ---------- INJECTING HERE ----------
56E28678: 48 63 57 30                    -  movsxd  rdx,dword ptr [rdi+30]
56E2867C: 4C 63 47 34                    -  movsxd  r8,dword ptr [rdi+34]
// ---------- DONE INJECTING  ----------
56E28680: 41 FF C0                       -  inc r8d
56E28683: 48 8B C8                       -  mov rcx,rax
56E28686: 48 83 EC 20                    -  sub rsp,20
56E2868A: 83 38 00                       -  cmp dword ptr [rax],00
56E2868D: 49 BB 10 7E E3 56 00 00 00 00  -  mov r11,Randoms:GetInRange
56E28697: 41 FF D3                       -  call r11d
56E2869A: 48 83 C4 20                    -  add rsp,20
56E2869E: F2 0F 2A C0                    -  cvtsi2sd xmm0,eax
56E286A2: F3 0F 10 4D E4                 -  movss xmm1,[rbp-1C]
56E286A7: F3 0F 5A C9                    -  cvtss2sd xmm1,xmm1
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>PlortValues</Name>
      <Address>179EAF87</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Throttle</Name>
      <Address> 56E2F623</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HP</Name>
      <Address> 2CDF1B13</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>mSpeed</Name>
      <Address> 181E89A7</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>myTimer = createTimer(nil, false)
myTimer.Interval = 1000
myTimer.OnTimer = function(t)
  local WorldTime = math.floor(readFloat('[[bStats]+68]+54'))
  local wtDays = math.floor(WorldTime/86400)+1.0
  local WorldTime = WorldTime % 86400
  local wtHours = math.floor(WorldTime/3600)
  local WorldTime = WorldTime % 3600
  local wtMinutes = math.floor(WorldTime/60)
  writeFloat(getAddress("Days"),wtDays)
  writeFloat(getAddress("Hours"),wtHours)
  writeFloat(getAddress("Minutes"),wtMinutes)
end

function SetTime(hr)
  local Time = math.floor(readFloat('[[bStats]+68]+54'))
  local tDays = math.floor(Time/86400.0)
  local tHours = 3600*hr
  Time = (tDays*86400.0)+(tHours)
  writeFloat('[[bStats]+68]+54',Time)
  local MR=al.getMemoryRecordByDescription("Set to Morning (6am)")
  memoryrecord_unfreeze(MR)
  local MR=al.getMemoryRecordByDescription("Set to Afternoon (12pm)")
  memoryrecord_unfreeze(MR)
  local MR=al.getMemoryRecordByDescription("Set to Evening (6pm)")
  memoryrecord_unfreeze(MR)
  local MR=al.getMemoryRecordByDescription("Set to Midnight same day (12am)")
  memoryrecord_unfreeze(MR)
  local MR=al.getMemoryRecordByDescription("Set to Midnight next day (12am)")
  memoryrecord_unfreeze(MR)
end
</LuaScript>
</CheatTable>
