<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>36</ID>
      <Description>"[X] &lt;== SoaSE  Rebellion v1.03 Script v4.0"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sins of a Solar Empire - Rebellion
 Game Version  : 1.031.4255

 Proces Name   : "Sins of a Solar Empire Rebellion".exe
 Script Version: 4.0 (addresses changed by jgoemat)
 CE Version    : 6.2
 Release date  : 14-Aug-2012
 Author        : Recifense
 History:
 13-Jun-12: First Release
 13-Jun-12: Fixed the cheats related to planets
 13-Jun-12: Adapted to version 1.02.4185
 18-Jun-12: Some features were added
 02-Jul-12: Adapted to version 1.03.4243 + New feature (XP)
 04-Jul-12: Killing a bug introduced in previous version
 12-Jul-12: New feature (Quick Startbase Upgrade)
 Features:
 - Minimum Resources
 - God Mode
   - Ships  (hull and shield)
   - Planet (HP and Population)
 - Quick Kill
 - Full Antimatter,
 - Quick Research
 - Unlimited Ships
 - Quick Production (of Ships)
 - Quick Construction
 - Quick Planet Upgrade
 - Quick Level Up
 - Quick Starbase Upgrade
===========================================
}

//=========================================
// Definitions
define(LUDO,"Sins of a Solar Empire Rebellion.exe")

define(AOB_MR    ,LUDO+001953e3) //_MR
define(AOB_MU    ,LUDO+0011ffde) //_MU
define(AOB_GM    ,LUDO+000fd7ab) //_GM
define(AOB_MS    ,LUDO+000fd738) //_MS
define(AOB_MA    ,LUDO+000ddd90) //_MA // dd90, could be dcb3
define(AOB_PP    ,LUDO+001422e0) //_PP
define(AOB_QR    ,LUDO+00122fe1) //_QR
define(AOB_GMP   ,LUDO+00119154) //_GMP // 119154, could be 11aeb3
define(AOB_MSup  ,LUDO+0005d4a6) //_MSup
define(AOB_MPr   ,LUDO+0012a18d) //_MPr // 12a18d, could be up to 12a6b7 or down to 1280b6
define(AOB_MCons ,LUDO+000e28bb) //_MCons
define(AOB_MUp   ,LUDO+0014bf1b) //_MUp
define(AOB_MCons2,LUDO+002301ae) //_MCons2
define(AOB_MXP   ,LUDO+00137b5e) //_MXP // LOTS of addresses, hope this is it
define(AOB_MXP2  ,LUDO+000f5dbe) //_MXP2 // LOTS of addresses too
define(AOB_MSBU  ,LUDO+00134b7b) //_MSBU

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded
{
assert(LUDO+001953c3,d8 c1 d9 59 20)       //_MR
assert(LUDO+0011ff0e,8b 41 08 8b 4c 24 04) //_MU
assert(LUDO+000fd6fb,d9 5b 0c d9 1c 24)    //_GM
assert(LUDO+000fd688,d9 5b 10 d9 1c 24)    //_MS
assert(LUDO+000ddd00,d9 41 08 d8 64 24 04) //_MA
assert(LUDO+00142200,d9 41 10 d8 64 24 04) //_PP
assert(LUDO+00122f11,d9 44 24 14 d9 55 2c) //_QR
assert(LUDO+00119084,d9 9d 8c 00 00 00)    //_GMP
assert(LUDO+0005d4c6,d9 43 04 d9 5e 04)    //_MSup
assert(LUDO+0012a09d,d9 9e 00 02 00 00)    //_MPr
assert(LUDO+000e282b,d9 44 24 1c d9 57 1c) //_MCons
assert(LUDO+0014be3b,d9 44 24 14 d9 56 2c) //_MUp
assert(LUDO+002301be,d9 40 0c d8 74 24 50) //_MCons2
assert(LUDO+00137a6e,dc 5c 24 10 df e0)    //_MXP
assert(LUDO+000f5d0e,dc 5c 24 10 df e0)    //_MXP2
assert(LUDO+00134a8b,d9 44 24 14 d9 56 30) //_MSBU
}
{ works with new version
assert(LUDO+001953e3,d8 c1 d9 59 20)       //_MR
assert(LUDO+0011ffde,8b 41 08 8b 4c 24 04) //_MU
assert(LUDO+000fd7ab,d9 5b 0c d9 1c 24)    //_GM
assert(LUDO+000fd738,d9 5b 10 d9 1c 24)    //_MS
assert(LUDO+000ddd90,d9 41 08 d8 64 24 04) //_MA // dd90, could be dcb3
assert(LUDO+001422e0,d9 41 10 d8 64 24 04) //_PP
assert(LUDO+00122fe1,d9 44 24 14 d9 55 2c) //_QR
assert(LUDO+00119154,d9 9d 8c 00 00 00)    //_GMP // 119154, could be 11aeb3
assert(LUDO+0005d4a6,d9 43 04 d9 5e 04)    //_MSup
assert(LUDO+0012a18d,d9 9e 00 02 00 00)    //_MPr // 12a18d, could be up to 12a6b7 or down to 1280b6
assert(LUDO+000e28bb,d9 44 24 1c d9 57 1c) //_MCons
assert(LUDO+0014bf1b,d9 44 24 14 d9 56 2c) //_MUp
assert(LUDO+002301ae,d9 40 0c d8 74 24 50) //_MCons2
assert(LUDO+00137b5e,dc 5c 24 10 df e0)    //_MXP // LOTS of addresses, hope this is it
assert(LUDO+000f5dbe,dc 5c 24 10 df e0)    //_MXP2 // LOTS of addresses too
assert(LUDO+00134b7b,d9 44 24 14 d9 56 30) //_MSBU
}

assert(AOB_MR,d8 c1 d9 59 20)           //_MR
assert(AOB_MU,8b 41 08 8b 4c 24 04)     //_MU
assert(AOB_GM,d9 5b 0c d9 1c 24)        //_GM
assert(AOB_MS,d9 5b 10 d9 1c 24)        //_MS
assert(AOB_MA,d9 41 08 d8 64 24 04)     //_MA // dd90, could be dcb3
assert(AOB_PP,d9 41 10 d8 64 24 04)     //_PP
assert(AOB_QR,d9 44 24 14 d9 55 2c)     //_QR
assert(AOB_GMP,d9 9d 8c 00 00 00)       //_GMP // 119154, could be 11aeb3
assert(AOB_MSup,d9 43 04 d9 5e 04)      //_MSup
assert(AOB_MPr,d9 9e 00 02 00 00)       //_MPr // 12a18d, could be up to 12a6b7 or down to 1280b6
assert(AOB_MCons,d9 44 24 1c d9 57 1c)  //_MCons
assert(AOB_MUp,d9 44 24 14 d9 56 2c)    //_MUp
assert(AOB_MCons2,d9 40 0c d8 74 24 50) //_MCons2
assert(AOB_MXP,dc 5c 24 10 df e0)       //_MXP // LOTS of addresses, hope this is it
assert(AOB_MXP2,dc 5c 24 10 df e0)      //_MXP2 // LOTS of addresses too
assert(AOB_MSBU,d9 44 24 14 d9 56 30)   //_MSBU

//=========================================
alloc(MyCode,2048,LUDO)
//=========================================
// Declaration section
label(_MonResources)
label(_MonR0)
label(_MonR1)
label(_BackMR)
label(_ExitMR)
label(_MarkUnits)
label(_BackMU)
label(_ExitMU)
label(_GodMode)
label(_GodM0)
label(_BackGM)
label(_ExitGM)
label(_MonShield)
label(_BackMS)
label(_ExitMS)
label(_MonAM)
label(_BackMA)
label(_ExitMA)
label(_PlanetPop)
label(_BackPP)
label(_ExitPP)
label(_QuickResearch)
label(_BackQR)
label(_ExitQR)
label(_GodModeP)
label(_BackGMP)
label(_ExitGMP)
label(_MonSupply)
label(_BackMSp)
label(_ExitMSp)
label(_MonProduction)
label(_BackMPr)
label(_ExitMPr)
label(_MonConstruction)
label(_BackMCr)
label(_ExitMCr)
label(_MonUpgrade)
label(_BackMUp)
label(_ExitMUp)
label(_MonConstruction2)
label(_BackMCr2)
label(_ExitMCr2)
label(_MonSBUpgrade)
label(_BackSUp)
label(_ExitSUp)
label(_MonXP)
label(_BackMX)
label(_ExitMX)
label(_MonXP2)
label(_BackMX2)
label(_ExitMX2)
label(iEnableGM)
label(iEnableMR)
label(iEnableQR)
label(iEnableMA)
label(iEnableQK)
label(iEnableMSp)
label(iEnableQP)
label(iEnableQC)
label(iEnableQU)
label(iEnableMX)
label(iEnableSU)
label(pSupply)
label(pConst)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGM)
registersymbol(iEnableMR)
registersymbol(iEnableQR)
registersymbol(iEnableMA)
registersymbol(iEnableQK)
registersymbol(iEnableMSp)
registersymbol(iEnableQP)
registersymbol(iEnableQC)
registersymbol(iEnableQU)
registersymbol(iEnableMX)
registersymbol(iEnableSU)

//=========================================
MyCode:
//========================================= 103
_MonResources:
 push eax

 fadd st(0),st(1)               // Original code
 fstp dword ptr [ecx+20]        // Original code

 mov eax,[ecx+04]               // Get ptr to owner
 or eax,eax
 jz _ExitMR                     // Jump if null pointer

 cmp dword ptr [eax+0c],0       // Is it player's resource?
 jne _ExitMR                    // Jump if false

 lea eax,[ecx+000001b8]
 mov [pSupply],eax

 cmp dword ptr [iEnableMR],0
 je _ExitMR                     // Jump if feature is disabled

 mov eax,(float)9900

 cmp eax,[ecx+08]               // Credits &gt;= 9900.0?
 jle _MonR0                     // Jump if true

 mov [ecx+08],eax               // Credits = 9900.0

_MonR0:
 cmp eax,[ecx+20]               // Metals &gt;= 9900.0?
 jle _MonR1                     // Jump if true

 mov [ecx+20],eax               // Metals = 9900.0

_MonR1:
 cmp eax,[ecx+38]               // Crystals &gt;= 9900.0?
 jle _ExitMR                    // Jump if true

 mov [ecx+38],eax               // Crystals = 9900.0

_ExitMR:
 pop eax
 jmp _BackMR                    // Back to main code

//========================================= 103
_MarkUnits:
 mov eax,[ecx+08]               // Original code (Rds ID)
 or eax,eax                     // Is it a Player's Unit?
 jnz _ExitMU                    // Jump if false

 mov eax,[ecx+04]               // Get ptr to Unit_Base
 or eax,eax                     // Valid pointer?
 jz _ExitMU                     // Jump if false

 or byte ptr [eax+0f],01        // Mark it as player's unit

_ExitMU:
 mov eax,[ecx+08]               // Original code (Rds ID)
 mov ecx,[esp+04]               // Original code
 jmp _BackMU                    // Back to main code

//========================================= 103
_GodMode:
 push eax

 mov eax,[ebx+04]               // Get pointer to Unit_Base
 or eax,eax                     // Valid pointer?
 jz _ExitGM                     // Jump if false

 and byte ptr [eax+0f],01       // Is it a player's unit?
 jz _GodM0                      // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                     // Jump if feature is disabled

 fstp st(0)                     // Discard value
 fld  dword ptr [ebx+0c]        // Get current HP
 jmp _ExitGM

_GodM0:
 cmp dword ptr [iEnableQK],0
 je _ExitGM                     // Jump if feature is disabled

 fstp st(0)                     // Discard value
 fldz                           // Make new HP = 0

_ExitGM:
 pop eax

 fstp dword ptr [ebx+0c]        // Original code
 fstp dword ptr [esp]           // Original code
 jmp _BackGM                    // Back to main code

//========================================= 103
_MonShield:
 push eax

 cmp dword ptr [iEnableGM],0
 je _ExitMS                     // Jump if feature is disabled

 mov eax,[ebx+04]               // Get pointer to Unit_Base
 or eax,eax                     // Valid pointer?
 jz _ExitMS                     // Jump if false

 and byte ptr [eax+0f],01       // Is it a player's unit?
 jz _ExitMS                     // Jump if false

 fstp st(0)                     // Discard value
 fld  dword ptr [ebx+10]        // Get current Shield Value

_ExitMS:
 pop eax

 fstp dword ptr [ebx+10]        // Original code
 fstp dword ptr [esp]           // Original code
 jmp _BackMS                    // Back to main code

//========================================= 103
//  This does not let the AntiMatter decrease
_MonAM:
 cmp dword ptr [iEnableMA],0
 je _ExitMA                     // Jump if feature is disabled

 push eax
 mov eax,[ecx+04]               // Get ptr to owner
 and byte ptr [eax+0f],01       // Is it a player's unit?...
 pop eax
 jz _ExitMA                     // ...Jump if false

 mov dword ptr [esp+04],0       // Make value2decrease = 0

_ExitMA:
 fld dword ptr [ecx+08]         // Original code
 fsub dword ptr [esp+04]        // Original code
 jmp _BackMA                    // Back to main code

//========================================= 103
//  This does not let the pop decrease
_PlanetPop:
 cmp dword ptr [iEnableGM],0
 je _ExitPP                     // Jump if feature is disabled

 push eax
 mov eax,[ecx+04]               // Get ptr to owner
 cmp dword ptr [eax+00000624],1 // Is it a player's planet?...
 pop eax
 jne _ExitPP                    // ...Jump if false

 mov dword ptr [esp+04],0       // Make value2decrease = 0

_ExitPP:
 fld dword ptr [ecx+10]         // Original code
 fsub dword ptr [esp+04]        // Original code
 jmp _BackPP                    // Back to main code

//========================================= 103
 _QuickResearch:
 fld dword ptr [esp+14]         // Original code
 fst dword ptr [ebp+2c]         // Original code

 push eax

 mov eax,[ebp+04]               // Get ptr ResearchOwner
 cmp dword ptr [eax+28],0       // Is it a player's research ?
 jne _ExitQR                    // Jump if false

 cmp dword ptr [iEnableQR],0
 je _ExitQR                     // Jump if feature is disabled

 mov eax,(float)0.9
 cmp eax,[ebp+2c]               // Current research &gt;= 90%?
 jle _ExitQR                    // Jump if true

 mov [ebp+2c],eax               // Current research = 90%

_ExitQR:
 pop eax
 jmp _BackQR                    // Back to main code

//========================================= 103
// God Mode for Planet
_GodModeP:
 push eax

 cmp dword ptr [iEnableGM],0
 je _ExitGMP                    // Jump if feature is disabled

 mov eax,[ebp+08]               // Get ptr to owner

 cmp dword ptr [eax+00000624],1 // Is it a player's planet?
 jne _ExitGMP                   // Jump if false

 fstp st(0)                     // Discard value
 fld  dword ptr [ebp+0000008C]  // Get current HP

_ExitGMP:
 pop eax

 fstp dword ptr [ebp+0000008C]  // Original code
 jmp _BackGMP                   // Back to main code

//========================================= 103
//  This makes the spent supply = 0
_MonSupply:
 push eax

 cmp dword ptr [iEnableMSp],0
 je _ExitMSp                    // Jump if feature is disabled

 cmp ebx,[pSupply]
 jne _ExitMSp

 xor eax,eax
 mov [ebx+24],eax
 mov [ebx+3c],eax
 mov [ebx+54],eax
 mov [ebx+6c],eax
 mov [ebx+00000084],eax
 mov [ebx+000000A4],eax
 mov [ebx+000000BC],eax
 mov [ebx+000000D4],eax
 mov [ebx+000000EC],eax

_ExitMSp:
 pop eax

 fld dword ptr [ebx+04]         // Original code
 fstp dword ptr [esi+04]        // Original code
 jmp _BackMSp                   // Back to main code

//========================================= 103
//  Production start at 90%
_MonProduction:
 push eax

 fstp dword ptr [esi+00000200]  // Original code

 cmp dword ptr [iEnableQP],0
 je _ExitMPr                    // Jump if feature is disabled

 cmp dword ptr,[esi+000001fc],0
 jne _ExitMPr

 mov eax,(float)0.9
 cmp eax,[esi+00000200]
 jle _ExitMPr

 mov [esi+00000200],eax

_ExitMPr:
 pop eax
 jmp _BackMPr                   // Back to main code

//========================================= 103
//  Construction start at 90%
_MonConstruction:
 cmp dword ptr [iEnableQC],0
 je _ExitMCr                    // Jump if feature is disabled

 mov eax,[edi+04]               // Get ptr to owner
 and byte ptr [eax+0f],01       // Is it a player's unit?...
 jz _ExitMCr                    // ...Jump if false

 mov [pConst],eax

 mov eax,(float)0.9
 cmp eax,[esp+1c]
 jle _ExitMCr

 mov [esp+1c],eax

_ExitMCr:
 fld dword ptr [esp+1C]         // Original code
 fst dword ptr [edi+1C]         // Original code
 jmp _BackMCr                   // Back to main code

//========================================= 103
//  Upgrade start at 90% (Planet)
_MonUpgrade:
 cmp dword ptr [iEnableQU],0
 je _ExitMUp                    // Jump if feature is disabled

 mov eax,[esi+04]               // Get ptr to Planet

 cmp dword ptr [eax+00000624],1 // Is it a player's planet?
 jne _ExitMUp                   // Jump if false

 mov eax,(float)0.9
 cmp eax,[esp+14]
 jle _ExitMUp

 mov [esp+14],eax

_ExitMUp:
 fld dword ptr [esp+14]         // Original code
 fst dword ptr [esi+2C]         // Original code
 jmp _BackMUp                   // Back to main code

//========================================= 103
//  Hull = 100%
_MonConstruction2:
 cmp dword ptr [iEnableQC],0
 je _ExitMCr2                   // Jump if feature is disabled

 mov edx,[eax+04]               // Get ptr to owner
 and byte ptr [edx+0f],01       // Is it a player's unit?...
 jz _ExitMCr2                   // ...Jump if false

 cmp edx,[pConst]
 jne _ExitMCr2

 mov edx,[esp+50]
 mov [eax+0c],edx

 mov [pConst],edx

_ExitMCr2:
 fld dword ptr [eax+0C]         // Original code
 fdiv dword ptr [esp+50]        // Original code
 jmp _BackMCr2                  // Back to main code

//========================================= 103
//  During battle (Titan)
_MonXP:
 cmp dword ptr [iEnableMX],0
 je _ExitMX                     // Jump if feature is disabled

 mov eax,[ebx+2c]               // Get ptr to owner
 and byte ptr [eax+0f],01       // Is it a player's unit?...
 jz _ExitMX                     // ...Jump if false

 fst dword ptr [ebx+34]
 fst qword ptr [esp+10]

_ExitMX:
 fcomp qword ptr [esp+10]       // Original code
 fnstsw ax                      // Original code
 jmp _BackMX                    // Back to main code

//========================================= 103
//  During battle (other Ships)
_MonXP2:
 cmp dword ptr [iEnableMX],0
 je _ExitMX2                    // Jump if feature is disabled

 mov eax,[ebx+04]               // Get ptr to owner
 and byte ptr [eax+0f],01       // Is it a player's unit?...
 jz _ExitMX2                    // ...Jump if false

 fst dword ptr [ebx+0c]
 fst qword ptr [esp+10]

_ExitMX2:
 fcomp qword ptr [esp+10]       // Original code
 fnstsw ax                      // Original code
 jmp _BackMX2                   // Back to main code

//========================================= 103
//  Upgrade start at 90% (Starbase)
_MonSBUpgrade:
 cmp dword ptr [iEnableSU],0
 je _ExitSUp                    // Jump if feature is disabled

 mov eax,[esi+0c]               // Get ptr to Starbase
 and byte ptr [eax+0f],01       // Is it a player's unit?...
 jz _ExitSUp                    // ...Jump if false

 mov eax,(float)0.9
 cmp eax,[esp+14]
 jle _ExitSUp

 mov [esp+14],eax

_ExitSUp:
 fld dword ptr [esp+14]         // Original code
 fst dword ptr [esi+30]         // Original code
 jmp _BackSUp                   // Back to main code

//=========================================
 db '===============================&gt;'
 db 'CE6.2 Script by Recifense 071212'
//=========================================
// Variables
iEnableGM:
 dd 0
iEnableMR:
 dd 0
iEnableQR:
 dd 0
iEnableMA:
 dd 0
iEnableQK:
 dd 0
iEnableMSp:
 dd 0
iEnableQP:
 dd 0
iEnableQC:
 dd 0
iEnableQU:
 dd 0
iEnableMX:
 dd 0
iEnableSU:
 dd 0
pSupply:
 dd MyCode
pConst:
 dd MyCode

//=========================================
// Hacking Points
AOB_MR:
 jmp _MonResources
_BackMR:

AOB_MU:
 jmp _MarkUnits
 nop
 nop
_BackMU:

AOB_GM:
 jmp _GodMode
 nop
_BackGM:

AOB_MS:
 jmp _MonShield
 nop
_BackMS:

AOB_MA:
 jmp _MonAM
 nop
 nop
_BackMA:

AOB_PP:
 jmp _PlanetPop
 nop
 nop
_BackPP:

AOB_QR:
 jmp _QuickResearch
 nop
 nop
 nop
_BackQR:

AOB_GMP:
 jmp _GodModeP
 nop
_BackGMP:

AOB_MSup:
 jmp _MonSupply
 nop
_BackMSp:

AOB_MPr:
 jmp _MonProduction
 nop
_BackMPr:

AOB_MCons:
 jmp _MonConstruction
 nop
 nop
_BackMCr:

AOB_MUp:
 jmp _MonUpgrade
 nop
 nop
_BackMUp:

AOB_MCons2:
 jmp _MonConstruction2
 nop
 nop
_BackMCr2:

AOB_MXP:
 jmp _MonXP
 nop
_BackMX:

AOB_MXP2:
 jmp _MonXP2
 nop
_BackMX2:

AOB_MSBU:
 jmp _MonSBUpgrade
 nop
 nop
_BackSUp:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
AOB_MR:
// fadd st(0),st(1)
// fstp dword ptr [ecx+20]
 db d8 c1 d9 59 20

AOB_MU:
// mov eax,[ecx+08]
// mov ecx,[esp+04]
 db 8b 41 08 8b 4c 24 04

AOB_GM:
// fstp dword ptr [ebx+0C]
// fstp dword ptr [esp]
 db d9 5b 0c d9 1c 24

AOB_MS:
// fstp dword ptr [ebx+10]
// fstp dword ptr [esp]
 db d9 5b 10 d9 1c 24

AOB_MA:
// fld dword ptr [ecx+08]
// fsub dword ptr [esp+04]
 db d9 41 08 d8 64 24 04

AOB_PP:
// fld dword ptr [ecx+10]
// fsub dword ptr [esp+04]
 db d9 41 10 d8 64 24 04

AOB_QR:
// fld dword ptr [esp+14]
// fst dword ptr [ebp+2C]
 db d9 44 24 14 d9 55 2c

AOB_GMP:
// fstp dword ptr [ebp+0000008C]
 db d9 9d 8c 00 00 00

AOB_MSup:
// fld dword ptr [ebx+04]
// fstp dword ptr [esi+04]
 db d9 43 04 d9 5e 04

AOB_MPr:
// fstp dword ptr [esi+00000200]
 db d9 9e 00 02 00 00

AOB_MCons:
// fld dword ptr [esp+1C]
// fst dword ptr [edi+1C]
 db d9 44 24 1c d9 57 1c

AOB_MUp:
// fld dword ptr [esp+14]
// fst dword ptr [esi+2C]
 db d9 44 24 14 d9 56 2c

AOB_MCons2:
// fld dword ptr [eax+0C]
// fdiv dword ptr [esp+50]
 db d9 40 0c d8 74 24 50

AOB_MXP:
// fcomp qword ptr [esp+10]
// fnstsw ax
 db dc 5c 24 10 df e0

AOB_MXP2:
// fcomp qword ptr [esp+10]
// fnstsw ax
 db dc 5c 24 10 df e0

AOB_MSBU:
// fld dword ptr [esp+14]
// fst dword ptr [esi+30]
 db d9 44 24 14 d9 56 30

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableQR)
unregistersymbol(iEnableMA)
unregistersymbol(iEnableQK)
unregistersymbol(iEnableMSp)
unregistersymbol(iEnableQP)
unregistersymbol(iEnableQC)
unregistersymbol(iEnableQU)
unregistersymbol(iEnableMX)
unregistersymbol(iEnableSU)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Enable/Disable Minimum Resources =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Enable/Disable Quick Research =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableQR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable Unlimited AntiMatter =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMA</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Enable/Disable Quick Kill =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableQK</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Enable/Disable Unlimited Ships =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSp</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Enable/Disable Quick Production =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableQP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Enable/Disable Quick Construction =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableQC</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Enable/Disable Quick Planet Upgrade =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableQU</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Enable/Disable Quick Level Up =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMX</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"Enable/Disable Quick Starbase Upgrade =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableSU</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>04CB03F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMR</Name>
      <Address>04CB03F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableQR</Name>
      <Address>04CB03F8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMA</Name>
      <Address>04CB03FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableQK</Name>
      <Address>04CB0400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMSp</Name>
      <Address>04CB0404</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableQP</Name>
      <Address>04CB0408</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableQC</Name>
      <Address>04CB040C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableQU</Name>
      <Address>04CB0410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMX</Name>
      <Address>04CB0414</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableSU</Name>
      <Address>04CB0418</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Sins of a Solar Empire - Rebellion
 Game Version  : 1.03.4243
 Proces Name   : "Sins of a Solar Empire Rebellion".exe
 Script Version: 4.0
 CE Version    : 6.2
 Release date  : 12-Jul-2012
 Author        : Recifense
 History:
 13-Jun-12: First Release
 13-Jun-12: Fixed the cheats related to planets
 13-Jun-12: Adapted to version 1.02.4185
 18-Jun-12: Some features were added
 02-Jul-12: Adapted to version 1.03.4243 + New feature (XP)
 04-Jul-12: Killing a bug introduced in previous version
 12-Jul-12: New feature (Quick Startbase Upgrade)
 Features:
 - Minimum Resources [1]
 - God Mode [2]
   - Ships  (hull and shield)
   - Planet (HP and Population)
 - Quick Kill [3]
 - Full Antimatter, [4]
 - Quick Research [5]
 - Unlimited Ships
 - Quick Production (of Ships)
 - Quick Construction
 - Quick Planet Upgrade
 - Quick Level Up
 - Quick Starbase Upgrade
===========================================
[1] Minimum resources = 9900
[2] Ships and planets
[3] It is, in fact, one hit kill. Use it wisely, because you are the only one protected. 
[4] No need to wait to jump again or colonize
[5] The research will start with 90% progress.
===========================================
HOTKEYS:
CTRL+Home = ENABLES  all cheats (expecpt for Quick Kill);
CTRL+End  = DISABLES all cheats (expecpt for Quick Kill);
CTRL+PGUP = ENABLES  "Quick Kill"
CTRL+PGDN = DISABLES "Quick Kill"
===========================================
Cheers!
</Comments>
</CheatTable>
