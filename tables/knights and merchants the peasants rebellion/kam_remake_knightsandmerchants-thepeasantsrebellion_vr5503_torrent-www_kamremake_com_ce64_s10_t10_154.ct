<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>49</ID>
      <Description>"[X] &lt;== Knights and Merchants - The Peasants Rebellion vr5503 Script v1.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Knights and Merchants - The Peasants Rebellion
 Game Version  : r5503
 Game Sponsor  : Torrent + www.kamremake.com
 Process Name  : KaM_Remake.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 22-Oct-2014
 Author        : Recifense
 History:
 22-Oct-14: First Release
 Features:
 - God Mode
 - Minimum Resources in Storehouse
 - No Hungry unit
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"KaM_Remake.exe")
define(MHPR,KaM_Remake.exe+001efa54)
define(MOSB,KaM_Remake.exe+00238b26)
define(MOSO,KaM_Remake.exe+001ece62)
define(MOMI,KaM_Remake.exe+0023c077)
define(MOSH,KaM_Remake.exe+002111d6)
define(MOHS,KaM_Remake.exe+00233bc3)
define(GMDS,KaM_Remake.exe+0023217d)
define(GMDB,KaM_Remake.exe+00238e39)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMMON,#64000)  // Minimum Money
define(ctMATT,#10)     // Minimum Attributes

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MHPR,33 c0 8a 43 04 03 c6 ?? ?? e8 ?? ?? ?? ?? b9 0a 00 00 00 33 d2)
assert(MOSB,0f b7 43 0c 0f b7 53 0e 2b c2 ?? ?? e8 ?? ?? ?? ?? 33 d2 e8 ??)
assert(MOSO,8b 5e 10 8b c3 8b 15 ?? ?? ?? ?? e8 ?? ?? ?? ?? 84 c0 ?? ?? 8b)
assert(MOMI,66 29 7c 46 76 ?? ?? e8 ?? ?? ?? ?? 5f 5e 5b 5d c3 ?? ?? ?? ??)
assert(MOSH,83 6c 91 04 01 ?? ?? e8 ?? ?? ?? ?? 6b d0 05 ?? ?? e8 ?? ?? ??)
assert(MOHS,b3 01 83 7e 10 00 ?? ?? 8b 46 40 50 a1 ?? ?? ?? ?? 8b 00 8b 40)
assert(GMDS,88 46 15 80 7e 15 00 ?? ?? 8b c6 e8 ?? ?? ?? ?? 84 c0 ?? ?? 6a)
assert(GMDB,66 89 47 0e 8b c7 e8 ?? ?? ?? ?? 84 c0 ?? ?? 80 7f 11 00 ?? ??)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonSelBuilding)
label(_BackMSB)
label(_ExitMSB)
label(_MonSelObject)
label(_BackMSO)
label(_ExitMSO)
label(_MonMinimumItem)
label(_MonMI00)
label(_BackMMI)
label(_ExitMMI)
label(_MonStorehouse)
label(_MonSH00)
label(_BackMSH)
label(_ExitMSH)
label(_MonHungryStatus)
label(_BackMHS)
label(_ExitMHS)
label(_GodModeS)
label(_GodMS00)
label(_BackGMS)
label(_ExitGMS)
label(_GodModeB)
label(_BackGMB)
label(_ExitGMB)

label(iEnableGMD)
label(iEnableMMI)
label(iEnableMHS)
label(pPlayer)
label(pBuilding)
label(pSel)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMMI)
registersymbol(iEnableMHS)
registersymbol(pPlayer)
registersymbol(pBuilding)
registersymbol(pSel)

//=========================================
MyCode:
//=========================================
// Main game screen
_MonHumanPlayer:
 movzx eax,byte ptr [ebx+04]       // get ID

 test eax,eax
 jnz _ExitMHP

 mov [pPlayer],ebx

_ExitMHP:
 xor eax,eax                       // Original code
 mov al,[ebx+04]                   // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// On selecting a building
_MonSelBuilding:
 mov [pBuilding],ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitMSB                       // Jump if feature is disabled

 mov eax,[ebx+74]
 cmp eax,[pPlayer]
 jne _ExitMSB

 xor edx,edx
 mov [ebx+0E],dx                   // Damage &lt;- 0

_ExitMSB:
 movzx eax,word ptr [ebx+0C]       // Original code (Get HP)
 movzx edx,word ptr [ebx+0E]       // Original code (Get Damage)
 jmp _BackMSB                      // Back to main code

//=========================================
// On selecting a Building/Unit/Troop
_MonSelObject:
 mov ebx,[esi+10]                  // Original code (Get pSel)
 mov eax,ebx                       // Original code

_ExitMSO:
 mov [pSel],ebx
 jmp _BackMSO                      // Back to main code

//=========================================
// On decreasing item at the storehouse
_MonMinimumItem:
 push ebx

 mov ebx,[esi+74]
 cmp ebx,[pPlayer]
 jne _ExitMMI

 cmp dword ptr [iEnableMMI],0
 je _ExitMMI                       // Jump if feature is disabled

 mov ebx,#100                      // Minimum for all items

 cmp eax,8
 jne _MonMI00

 mov ebx,#1000                     // Minimum for gold

_MonMI00:
 movzx edi,di
 add ebx,edi

 cmp bx,[esi+eax*2+76]
 js _ExitMMI

 mov [esi+eax*2+76],bx

_ExitMMI:
 pop ebx

 sub [esi+eax*2+76],di             // Original code (set item #)
 jmp _BackMMI                      // Back to main code

//=========================================
// On decreasing item at the storehouse
_MonStorehouse:
 push eax
 push ebx

 mov ebx,[ecx+edx*4+08]
 test ebx,ebx
 jz _ExitMSH

 cmp byte ptr [ebx+08],#22
 jne _ExitMSH

 mov eax,[ebx+74]
 cmp eax,[pPlayer]
 jne _ExitMSH

 mov eax,[ecx+edx*4]

 cmp dword ptr [iEnableMMI],0
 je _ExitMSH                       // Jump if feature is disabled

 mov ebx,#101                      // Minimum for all items

 cmp eax,8
 jne _MonSH00

 mov ebx,#1001                     // Minimum for gold

_MonSH00:
 cmp ebx,[ecx+edx*4+04]
 js _ExitMSH

 mov [ecx+edx*4+04],ebx

_ExitMSH:
 pop ebx
 pop eax

 sub dword ptr [ecx+edx*4+04],01   // Original code (dec item #)
 jmp _BackMSH                      // Back to main code

//=========================================
// On updating status
_MonHungryStatus:
 push eax

 mov eax,[esi+5c]
 cmp eax,[pPlayer]
 jne _ExitMHS

 cmp dword ptr [iEnableMHS],0
 je _ExitMHS                       // Jump if feature is disabled

 mov eax,#2001
 cmp eax,[esi+1c]
 js _ExitMHS

 mov [esi+1c],eax                  // Food Supply

_ExitMHS:
 pop eax

 mov bl,01                         // Original code
 cmp dword ptr [esi+10],00         // Original code (get pInfo)
 jmp _BackMHS                      // Back to main code

//=========================================
// On updating HP (soldiers)
_GodModeS:
 push ecx

 mov ecx,[esi+5c]
 cmp ecx,[pPlayer]
 jne _ExitGMS

 cmp dword ptr [iEnableGMD],0
 je _ExitGMS                       // Jump if feature is disabled

 mov cl,#10
 cmp cl,[esi+15]
 js _GodMS00

 mov [esi+15],cl

_GodMS00:
 mov al,[esi+15]

_ExitGMS:
 pop ecx

 mov [esi+15],al                   // Original code (set HP)
 cmp byte ptr [esi+15],00          // Original code
 jmp _BackGMS                      // Back to main code

//=========================================
// On updating Damage (buildings)
_GodModeB:
 push ecx

 mov ecx,[edi+74]
 cmp ecx,[pPlayer]
 jne _ExitGMB

 cmp dword ptr [iEnableGMD],0
 je _ExitGMB                       // Jump if feature is disabled

 xor eax,eax                       // Damage = 0

_ExitGMB:
 pop ecx

 mov [edi+0E],ax                   // Original code (set Damage)
 mov eax,edi                       // Original code
 jmp _BackGMB                      // Back to main code

//=========================================
 db '==========================================&gt;'
 db 'CE6.4 Script by Recifense 102214'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMMI:
 dd 0
iEnableMHS:
 dd 0
pPlayer:
 dd MyCode
pBuilding:
 dd 0
pSel:
 dd 0

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
_BackMHP:

MOSB:
 jmp _MonSelBuilding
 nop
 nop
 nop
_BackMSB:

MOSO:
 jmp _MonSelObject
_BackMSO:

MOMI:
 jmp _MonMinimumItem
_BackMMI:

MOSH:
 jmp _MonStorehouse
_BackMSH:

MOHS:
 jmp _MonHungryStatus
 nop
_BackMHS:

GMDS:
 jmp _GodModeS
 nop
 nop
_BackGMS:

GMDB:
 jmp _GodModeB
 nop
_BackGMB:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// xor eax,eax
// mov al,[ebx+04]
 db 33 c0 8a 43 04

MOSB:
// movzx eax,word ptr [ebx+0C]
// movzx edx,word ptr [ebx+0E]
 db 0f b7 43 0c 0f b7 53 0e

MOSO:
// mov ebx,[esi+10]
// mov eax,ebx
 db 8b 5e 10 8b c3

MOMI:
// sub [esi+eax*2+76],di
 db 66 29 7c 46 76

MOSH:
// sub dword ptr [ecx+edx*4+04],01
 db 83 6c 91 04 01

MOHS:
// mov bl,01
// cmp dword ptr [esi+10],00
 db b3 01 83 7e 10 00

GMDS:
// mov [esi+15],al
// cmp byte ptr [esi+15],00
 db 88 46 15 80 7e 15 00

GMDB:
// mmov [edi+0E],ax
// mov eax,edi
 db 66 89 47 0e 8b c7

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMMI)
unregistersymbol(iEnableMHS)
unregistersymbol(pPlayer)
unregistersymbol(pBuilding)
unregistersymbol(pSel)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Enable/Disable God Mode  =========================&gt;"</Description>
          <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Enable/Disable Minimum Resources ==================&gt;"</Description>
          <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMI</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Enable/Disable No Hungry  =========================&gt;"</Description>
          <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMHS</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iEnableMSH</Name>
      <Address>03F401F8</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Knights and Merchants - The Peasants Rebellion
 Game Version  : r5503
 Game Sponsor  : Torrent + www.kamremake.com
 Process Name  : KaM_Remake.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 22-Oct-2014
 Author        : Recifense
 History:
 22-Oct-14: First Release
 Features:
 - God Mode                         [1]
 - Minimum Resources in Storehouse  [2]
 - No Hungry unit                   [3]
===========================================
[1] For human player's units and buildings;
[2] Existing resource will not go under minimum value in the storehouse (works when an item is decreased);
[3] The units will not be hungry (good for keeping the army far from home);
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "KaM_Remake.exe" in CE;
4) Load this table and activate it;
5) Change the value to "Enabled" of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  GM/MR cheats;
CTRL+End       = Disable GM/MR cheats;
-----------
CTRL+PageUp    = Enable  NH cheat;
CTRL+PageDown  = Disable NH cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
