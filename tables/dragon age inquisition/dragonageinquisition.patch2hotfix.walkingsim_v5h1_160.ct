<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>14050</ID>
      <Description>"==================== Free Walking Simulator DLC ===================="</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>FF0080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>14039</ID>
      <Description>"Walking Simulator (for Mouse/KB controls)"</Description>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : DragonAgeInquisition.exe, "early access" (patch 2, hotfix 1)
  Version: v5
  Date   : 2014-12-27
  Author : 2flower

  Intercepts movement calculation
  - Modifies movement amount to fall down below the walking threshold
    (1.0: running, 0.8: jogging, 0.5: walking)
  - the effective 'movementAmount' is set from the Lua script (Ctrl+Alt+L)
}

[ENABLE]

//aobscanmodule(MovementControl_AOB,DragonAgeInquisition.exe,0F 51 C8 0F 28 C4) // should be unique
aobscanmodule(MovementControl_AOB,DragonAgeInquisition.exe,0F 51 C8 0F 28 C4 0F 14 D1) // should really be unique
alloc(newmem,$1000,"DragonAgeInquisition.exe"+2F0AE78)

label(code)
label(return)

label(movementAmount)
registersymbol(movementAmount)

newmem:

// CODE
code:
  // - xmm0: (squared) magnitude of the directional input amount from axis input
  //         (keyboard: +/- 1 or 0)
  // - xmm1: magnitude = sqrt( x^2 + y^2 ), x/y in [0.0, 1.0]
  //sqrtps xmm1,xmm0

  // overwrite with movement amount for the different movement speeds
  movss xmm1, [movementAmount]
  // continue
  movaps xmm0,xmm4
  jmp return

MovementControl_AOB:
  jmp code
  nop
return:
registersymbol(MovementControl_AOB)

// DATA
newmem+400:
// new movement amount to fall down below the jogging/walking thresholds
// when the respective mode is active
movementAmount:
  dd (float)1.0

[DISABLE]

MovementControl_AOB:
  db 0F 51 C8 0F 28 C4

unregistersymbol(movementAmount)

unregistersymbol(MovementControl_AOB)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "DragonAgeInquisition.exe"+2F0AE78

"DragonAgeInquisition.exe"+2F0AE54: F3 41 0F 59 C8        -  mulss xmm1,xmm8
"DragonAgeInquisition.exe"+2F0AE59: F3 0F 58 D1           -  addss xmm2,xmm1
"DragonAgeInquisition.exe"+2F0AE5D: 0F 2F D3              -  comiss xmm2,xmm3
"DragonAgeInquisition.exe"+2F0AE60: 77 03                 -  ja DragonAgeInquisition.exe+2F0AE65
"DragonAgeInquisition.exe"+2F0AE62: 0F 28 D3              -  movaps xmm2,xmm3
"DragonAgeInquisition.exe"+2F0AE65: F3 0F 10 C2           -  movss xmm0,xmm2
"DragonAgeInquisition.exe"+2F0AE69: 41 0F 28 D9           -  movaps xmm3,xmm9
"DragonAgeInquisition.exe"+2F0AE6D: 41 0F 28 D0           -  movaps xmm2,xmm8
"DragonAgeInquisition.exe"+2F0AE71: 0F C6 C0 00           -  shufps xmm0,xmm0,00
"DragonAgeInquisition.exe"+2F0AE75: 0F 14 DC              -  unpcklps xmm3,xmm4
// ---------- INJECTING HERE ----------
"DragonAgeInquisition.exe"+2F0AE78: 0F 51 C8              -  sqrtps xmm1,xmm0
"DragonAgeInquisition.exe"+2F0AE7B: 0F 28 C4              -  movaps xmm0,xmm4
// ---------- DONE INJECTING  ----------
"DragonAgeInquisition.exe"+2F0AE7E: 0F 14 D1              -  unpcklps xmm2,xmm1
"DragonAgeInquisition.exe"+2F0AE81: 0F 14 DA              -  unpcklps xmm3,xmm2
"DragonAgeInquisition.exe"+2F0AE84: 0F 29 1B              -  movaps [rbx],xmm3
"DragonAgeInquisition.exe"+2F0AE87: EB 0D                 -  jmp DragonAgeInquisition.exe+2F0AE96
"DragonAgeInquisition.exe"+2F0AE89: 0F 28 00              -  movaps xmm0,[rax]
"DragonAgeInquisition.exe"+2F0AE8C: 0F 57 C9              -  xorps xmm1,xmm1
"DragonAgeInquisition.exe"+2F0AE8F: 0F 29 40 10           -  movaps [rax+10],xmm0
"DragonAgeInquisition.exe"+2F0AE93: 0F 29 08              -  movaps [rax],xmm1
"DragonAgeInquisition.exe"+2F0AE96: 44 0F 28 44 24 50     -  movaps xmm8,[rsp+50]
"DragonAgeInquisition.exe"+2F0AE9C: F3 44 0F 11 53 20     -  movss [rbx+20],xmm10
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11215</ID>
          <Description>"How To"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF8000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>14056</ID>
              <Description>"Default Settings and Key Mappings..."</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>FF8000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>14063</ID>
                  <Description>"Jogging + Walk Toggle (CAPS) + Walk Mod (SHIFT) + Jog Toggle (X) + Jog Mod (ALT), mods alternating..."</Description>
                  <Options moHideChildren="1"/>
                  <LastState Value="" Activated="0" RealAddress="00000000"/>
                  <Color>FF8000</Color>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>14064</ID>
                      <Description>"- Standard speed = Jogging (slow: Walking, fast: Running)"</Description>
                      <LastState Value="" Activated="0" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14059</ID>
                      <Description>"- Hold  [SHIFT] for 'slow' mode (Walking speed)     ('normal', if already 'slow')"</Description>
                      <LastState Value="" Activated="0" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14060</ID>
                      <Description>"- Hold  [ALT]   for 'fast' mode (Running speed)     ('normal', if already 'fast')"</Description>
                      <LastState Value="" Activated="0" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14062</ID>
                      <Description>"- Press [CAPS]  to toggle 'slow' mode lock (Walking speed)"</Description>
                      <LastState Value="" Activated="0" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>14061</ID>
                      <Description>"- Press [X]     to toggle 'fast' mode lock (Running speed)"</Description>
                      <LastState Value="" Activated="0" RealAddress="00000000"/>
                      <Color>808080</Color>
                      <GroupHeader>1</GroupHeader>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>14057</ID>
              <Description>"Caution when merging with other tables containing a Lua script as well (merge manually in Lua editor via Ctrl+Alt+L)."</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>14054</ID>
              <Description>"Caution with renaming scripts. Their names are referenced in the in the Lua script!"</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>14055</ID>
              <Description>"For more, see 'Table Extras' (bottom-right)"</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>808080</Color>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>14051</ID>
              <Description>"WIP/Testing"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>C0C0C0</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>14045</ID>
                  <Description>"TestEnv"</Description>
                  <LastState Activated="0"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

alloc(newmem,$1000)

label(movementAmount)
registersymbol(movementAmount)

newmem:

// DATA
newmem+400:
movementAmount:
  dd (float)0.0

[DISABLE]

unregistersymbol(movementAmount)

dealloc(newmem)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>14046</ID>
                  <Description>"Always Slow"</Description>
                  <LastState Activated="0"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//LuaCall(MovementControl.setWalkingMode(true))

[DISABLE]
//LuaCall(MovementControl.setWalkingMode(false))

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys/>
                      <Description>Toggle 'Slow' Mode On/Off</Description>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>14053</ID>
                  <Description>"Always Fast"</Description>
                  <LastState Activated="0"/>
                  <Color>0000FF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//LuaCall(MovementControl.setRunningMode(true))

[DISABLE]
//LuaCall(MovementControl.setRunningMode(false))

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys/>
                      <Description>Toggle 'Fast' Mode  On/Off</Description>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
                <CheatEntry>
                  <ID>14058</ID>
                  <Description>"movementAmount"</Description>
                  <DropDownList DisplayValueAsItem="1">0.5: walk
0.8000000119: jog
1: run
</DropDownList>
                  <LastState Value="1" Activated="0" RealAddress="04FF0400"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>movementAmount</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys/>
                      <Value>0.5</Value>
                      <Description>walk</Description>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys/>
                      <Value>0.8000000119</Value>
                      <Description>jog</Description>
                      <ID>1</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys/>
                      <Value>1</Value>
                      <Description>run</Description>
                      <ID>2</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>movementAmount</Name>
      <Address>04FF0400</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>------------------------------------------------------------------
*Walking Simulator DLC (v5, hotfix1) for Dragon Age: Inquisition *
------------------------------------------------------------------
.
Provides ability to change movement speed (0.5: walking, 0.8: jogging, 1.0: running) for Mouse/KB controls:
- Intercepts movement calculation
- Overwrites the movement amount (which is always &gt;= 1.0 for KB controls) with values to fall below the speed thresholds for walking or jogging (similar to input via gamepad with analog sticks).
- Monitors key states (to recognize keyUp events as well) via Lua script (timer, 100ms period)
Movement modes are also supported for mounts
- However, the default mod key for 'slow' speed (SHIFT) clashes with DAI's default key mapping for 'Sprint' (gallop for mounts).
- Assigning a different key for 'Sprint' (e.g. 'C') is recommended in this case.
.
*Script 'Walking Simulator' (Main)
- Activates the movement control based on toggles and modifiers, which can be triggered via hotkeys 
- Defaults are loosely based on Skyrim's controls:
  - Standard speed ('normal'): Jogging ('slow': Walking, 'fast': Running)
  - Hold  [SHIFT] for 'slow' mode (Walking speed)    ('normal', if already 'slow')
  - Hold  [ALT]   for 'fast' mode (Running speed)    ('normal', if already 'fast')
  - Press [CAPS]  to toggle 'slow' mode lock (Walking speed)
  - Press [X]     to toggle 'fast' mode lock (Running speed)
.
*Control Scheme (Concept)
- We have three different movement speeds available: Walking, Jogging and Running
- One of the speeds is the standard speed ('normal' mode), e.g. Jogging (or Running).
- The remaining two speeds are the 'slow'er and the 'fast'er alternative (movement modes 'slow', 'fast')
- Example: 'normal' mode: Running, 'slow'(er) alternative = Walking, 'fast'(er) alternative: Jogging
- Switching between the different speeds is available via toggles (lock to &lt;mode&gt;) and modifiers (hold to &lt;mode&gt;), which can be triggered via hotkeys:
  - =&gt; Hold &lt;slow/fast modifier&gt; for slow(er)/fast(er) alternative
  - =&gt; Press &lt;slow/fast toggle&gt; to lock to slow(er)/fast(er) alternative ("always slow/fast"), press again to unlock
- Behavior can be further customized, e.g. whether modifiers should break 'slow'/'fast' locks (see default template in Lua script for details).
.
*Configuration Howto
- All configuration settings can (have to be) changed in the Lua script - it's still a'hack' after all ;-)
- However,it's not really complicated:
 1. Open Lua editor (Ctrl+Alt+L).
 2. Find 'function MovementControl:setupConfigPresets()'.
 2.a View/alter/extend the preset settings. You can use the default preset as a template.
 2.b Set the name of the preset you want to activate by default (change variable 'currentPresetName').
 3. Apply the changes via "Execute Script" button.
 4. Re-activate the Main script ('Walking Simulator') in the AddressList.
 5. Save modified CE table: Menu &gt; File &gt; Save (As...)
.
Example 1: The Default
  self.movementMode = { normal = MovementSpeed.Jogging, slow = MovementSpeed.Walking, fast = MovementSpeed.Running }
  self.triggers.slowModifier = { key = VK_SHIFT, alternates = true }
  self.triggers.fastModifier = { key = VK_MENU, alternates = true }
  self.triggers.alwaysSlow = { key = VK_CAPITAL }
  self.triggers.alwaysFast = { key = VK_X }
.
Example 2: A simpler alternative with only two hotkeys and standard speed 'Running'
  -- press CAPSLOCK to jogg
  -- hold SHIFT to walk
  -- running as standard when CAPSLOCK is pressed again / SHIFT is released
  self.configPresets["GODzilla_A"] = function()
    self.movementMode = { normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging }
    self.triggers.slowModifier = { key = VK_SHIFT, deactivatesAlwaysFast = true, }
    self.triggers.fastModifier = { key = nil }
    self.triggers.alwaysSlow = { key = nil }
    self.triggers.alwaysFast = { key = VK_CAPITAL }
  end
.
*Change History
v5, hotfix 1:
  - Fixed: Removed hotkeys for direct movementAmount selection (obsolete since v4)
  - Reworked the description for (hopefully) better clarity.
  - Removed obsolete 'Always Slow/Fast' scripts to avoid confusion.
v5:
  - Fixed moving at full speed when moving diagonally in 'jogging' mode.
  - Further generalization of the control scheme to provide better support for different setups.
  - Introduced definition of a standard movement mode, a 'slow'- and a 'fast' alternative mode
  - Added further behavior options for modifiers and toggles.
  - Added some preset configs. Configuration is now completely via Lua script.
  - Removed 'Hold ... to ..." script (the heartbeat to monitor key states is now started by default).
  - Moved handling of toggle hotkeys to Lua script as well (so everything is at one place).
v4:
  - "Streamlined" the control scheme, based on movement mode (jog (default), always walk/run toggles) + slow/fast modifiers.
  - Changed default keys similar to Skyrim's controls.
v3:
  - Added ability to limit the effective movement factor to allow for different movement speeds (walk, jog, run).
v2:
  - Added 'walking mode while key pressed' option (via Lua scripting).
v1:
  - Initial (toggle interception of movement calculation via hotkey).
</Comments>
  <LuaScript>-------------- Walking Simulator (for Mouse/KB controls) ----------------------
-- Game   : DragonAgeInquisition.exe, "early access" (patch 2, hotfix 1)
-- Version: v5, hotfix1
-- Date   : 2014-12-28
-- Author : 2flower
--
-- Provides control over movement mode with tree different speeds
-- (jog, run, walk)
-- - Configurable primary movement mode ('normal') with the other two modes
--   tagged as 'slow' and 'fast' (controlled via toggles/modifiers)
--   (default: normal mode = jog, slow mode = walk, fast mode = run )
-- - Checks the key state of the mod andtoggle hotkeys periodically via timer.
-- - Calculates the effective movement amount to be applied during
--   movement calculation (via code injection)
-------------------------------------------------------------------------------

---- Helpers ----

-- Helper to implement classes in Lua via metatables
-- see http://lua-users.org/wiki/LuaClassesWithMetatable
function Class(members)
  members = members or {}
  local mt = {
    __metatable = members;
    __index     = members;
  }
  local function new(_, init)
    return setmetatable(init or {}, mt)
  end
  local function copy(obj, ...)
    local newobj = obj:new(unpack(arg))
    for n,v in pairs(obj) do newobj[n] = v end
    return newobj
  end
  members.new  = members.new  or new
  members.copy = members.copy or copy
  return mt
end

function count(table)
  local count = 0
  for k,v in pairs(table) do
    count = count + 1
  end
  return count
end

---- "Enums" ----

-- Movement speed (to be assigned to movement modes (normal, slow, fast)
-- - 'slow' is the slower one of the two alternatives,
-- - while 'fast' is the faster one.
MovementSpeed = {
  Jogging = { movementAmount = 0.8 },
  Walking = { movementAmount = 0.5 },
  Running = { movementAmount = 1.0 }
}

-- Modifiers (used to select different movement modes)
-- - controlled via modifier keys in a 'hold key to ...' fashion
MovementModifier = {
  None = 0, Slow = 1, Fast = 2
}

---- MovementControl class (Main) ---------------------------------------------

MovementControl = {}
local MovementControlClass = Class(MovementControl)

function MovementControl:new()
 return setmetatable( {}, MovementControlClass )
end

---- &gt;&gt;&gt;&gt; Configuration Presets &lt;&lt;&lt;&lt; ----

-- Defines some preset setting (movement mode, slow/fast modifiers and -toggles, hotkeys)
-- - change 'currentPresetName' to the name of the preset to be applied per default
function MovementControl:setupConfigPresets()
  self.configPresets = {}

  -- Preset to be applied per default
  self.currentPresetName = "Default"
  --self.currentPresetName = "Jackal_WalkRun_JogRun"
  --self.currentPresetName = "GODzilla_A"

  -- Default preset
  self.configPresets["Default"] = function()
    self:applyDefaultPreset()
  end

  -- Custom presets (see default preset in 'applyDefaultPreset()' for reference/template)

  -- "Running + Walk Mod (SHIFT) + Jog Toggle (CAPS), mods release locks"
  -- press CAPSLOCK to jogg
  -- hold SHIFT to walk
  -- running as standard when CAPSLOCK is pressed again / SHIFT is released
  self.configPresets["GODzilla_A"] = function()
    self.movementMode = {
      normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging
    }
    self.triggers.slowModifier = {
      key = VK_SHIFT,
      deactivatesAlwaysFast = true,
    }
    self.triggers.fastModifier = { key = nil }
    self.triggers.alwaysSlow = { key = nil }
    self.triggers.alwaysFast = { key = VK_CAPITAL }
  end

  -- "Running + Walk Mod (SHIFT) + Jog Mod (CAPS)"
  -- hold CAPSLOCK to jogg
  -- hold SHIFT to walk
  -- running as standard when CAPSLOCK is released / SHIFT is released
  self.configPresets["GODzilla_B"] = function()
    self.movementMode = {
      normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging
    }
    self.triggers.slowModifier = { key = VK_SHIFT }
    self.triggers.fastModifier = { key = VK_CAPITAL }
    self.triggers.alwaysSlow = { key = nil }
    self.triggers.alwaysFast = { key = nil }
  end

  -- "Running + Walk Toggle (SHIFT) + Jog Toggle (CAPS), toggles exclusive"
  -- press CAPSLOCK to jogg
  -- press SHIFT to walk
  -- running as standard when CAPSLOCK is pressed again / SHIFT is pressed again
  self.configPresets["GODzilla_C"] = function()
    self.movementMode = {
      normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging
    }
    self.triggers.slowModifier = { key = nil }
    self.triggers.fastModifier = { key = nil }
    self.triggers.alwaysSlow = { key = VK_SHIFT, exclusive = true }
    self.triggers.alwaysFast = { key = VK_CAPITAL, exclusive = true }
  end

  -- "Running + Walk Toggle (CAPS) + Walk Mod, alternating (SHIFT)"
  -- Standard speed: Running ('normal' mode)
  -- Hold    [SHIFT] for 'slow' mode (Walking), 'normal' mode (Running) if 'slow' (Walking) already
  -- Release [SHIFT] for 'normal' mode (Running)
  -- Press   [CAPS]  to toggle 'slow' mode lock (Walking/Running toggle)
  self.configPresets["Jackal_WalkRun"] = function()
    self.movementMode = {
      normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging
    }
    self.triggers.slowModifier = {
      key = VK_SHIFT,
      alternates = true,
    }
    self.triggers.fastModifier = { key = nil }
    self.triggers.alwaysSlow = { key = VK_CAPITAL }
    self.triggers.alwaysFast = { key = nil }
  end

  -- "Running + Walk Toggle (CAPS) + Walk Mod (SHIFT) + Jog Toggle (X) + Jog Mod (ALT), mods alternating"
  -- - An extension of "Jackal_WalkRun" with Jog toggle/mod
  -- - Behaves essentially like the Default config, only with standard speed 'Running'
  -- Standard speed: Running ('normal' mode)
  -- Hold    [SHIFT] for 'slow' mode (Walking), 'normal' mode (Running) if locked to 'slow'
  -- Hold    [ALT]   for 'fast' mode (Jogging), 'normal' mode (Running) if locked to 'fast'
  -- Press   [CAPS]  to toggle 'slow' mode lock (Walking/Running toggle)
  -- Press   [X]     to toggle 'fast' mode lock (Jogging/Running toggle)
  self.configPresets["Jackal_WalkRun_JogRun"] = function()
    self.movementMode = {
      normal = MovementSpeed.Running, slow = MovementSpeed.Walking, fast = MovementSpeed.Jogging
    }
    self.triggers.slowModifier = {
      key = VK_SHIFT,
      alternates = true,
    }
    self.triggers.fastModifier = {
      key = VK_MENU,
      alternates = true,
    }
    self.triggers.alwaysSlow = { key = VK_CAPITAL }
    self.triggers.alwaysFast = { key = VK_X }
  end

end

-- Applies default preset settings (loosely based on Skyrim's controls)
--
-- "Jogging + Walk Toggle (CAPS) + Walk Mod (SHIFT) + Jog Toggle (X) + Jog Mod (ALT), mods alternating"
-- - Standard speed = Jogging (slow: Walking, fast: Running)
-- - Hold  [SHIFT] for 'slow' mode (Walking speed)    ('normal', if already 'slow')
-- - Hold  [ALT]   for 'fast' mode (Running speed)    ('normal', if already 'fast')
-- - Press [CAPS]  to toggle 'slow' mode lock (Walking speed)
-- - Press [X]     to toggle 'fast' mode lock (Running speed)
function MovementControl:applyDefaultPreset()
  self.movementMode = {
    normal = MovementSpeed.Jogging,
	slow = MovementSpeed.Walking,
	fast = MovementSpeed.Running,
  }

  -- Trigger state from input controls (modifiers and toggles)
  -- - key = &lt;keyCode&gt; (or nil to disable)
  --   - Virtual key codes: see http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731%28v=vs.85%29.aspx
  -- - Modifier: Switches to 'slow' (or 'fast') mode as long as held down
  -- - Modifier options:
  --   - deactivatesAlwaysSlow: Removes 'slow' mode lock (on release).
  --   - deactivatesAlwaysFast: Removes 'fast' mode lock (on release).
  --   - alternates: Switches to 'normal' mode when locked to 'slow' (or 'fast')
  -- - Toggle: Activates/deactivates lock to 'slow' (or 'fast') mode
  -- - Toggle options:
  --   - Exclusive: locks to its mode exclusively (i.e. deactivates other locks)

  -- 'slow' modifier
  self.triggers.slowModifier = {
    key = VK_SHIFT,
    deactivatesAlwaysSlow = false,
    deactivatesAlwaysFast = false,
    alternates = not deactivatesAlwaysSlow
  }
  -- 'fast' modifier
  self.triggers.fastModifier = {
    key = VK_MENU,
    deactivatesAlwaysSlow = false,
    deactivatesAlwaysFast = false,
    alternates = not deactivatesAlwaysFast
  }
  -- lock to 'slow' toggle
  self.triggers.alwaysSlow = {
    key = VK_CAPITAL,
    exclusive = false,
  }
  -- lock to 'fast' toggle
  self.triggers.alwaysFast = {
    key = VK_X,
    exclusive = false,
  }
end

---- Configuration ----

-- Defines configuration settings.
-- - When changing settings, the main script in AdressList should be reactivated!
function MovementControl:configure()
  self.triggers = {}

  -- Define some custom presets
  self:setupConfigPresets()
  --self:applyDefaultPreset()
  --self:setupMovementModeMapping()

  -- Apply a preset
  self:applyPreset(self.currentPresetName)

  -- Timer interval for the periodical check of the key states
  self.timerIntervalMillis = 100

  -- AddressList entries maintained/controlled via Lua (
  -- - Main script and Always Slow/Fast' toggle scripts.
  -- - Lookup requires the names (descrptions) to be in sync!
  self.addressListEntries = {}
  self.addressListEntries.main = {
    description = "Walking Simulator (for Mouse/KB controls)"
    --description = "TestEnv"
  }
  self.addressListEntries.alwaysSlow = {
    description = "Always Slow"
  }
  self.addressListEntries.alwaysFast = {
    description = "Always Fast"
  }
end

-- Defines a mapping to determine the effective movement mode:
-- - Movement mode (controlled via toggles) + modifier -&gt; effective mode
function MovementControl:setupMovementModeMapping()
  self.movementModeMapping = {}
  self.movementModeMapping[self.movementMode.normal] = {
    [MovementModifier.None] = self.movementMode.normal,
    [MovementModifier.Slow] = self.movementMode.slow,
    [MovementModifier.Fast] = self.movementMode.fast,
  }
  self.movementModeMapping[self.movementMode.slow] = {
    [MovementModifier.None] = self.movementMode.slow,
    [MovementModifier.Slow] = self.triggers.slowModifier.alternates
        and self.movementMode.normal or self.movementMode.slow,
    [MovementModifier.Fast] = self.movementMode.fast,
  }
  self.movementModeMapping[self.movementMode.fast] = {
    [MovementModifier.None] = self.movementMode.fast,
    [MovementModifier.Slow] = self.movementMode.slow,
    [MovementModifier.Fast] = self.triggers.slowModifier.alternates
        and self.movementMode.normal or self.movementMode.fast
  }

  -- initial mode and modifier
  self.movementMode.current = self.movementMode.normal
  self.movementModifier = MovementModifier.None
end

function MovementControl:getCurrentPresetName(presetName)
  if not self.currentPresetName then
    return "Default"
  end
  return self.currentPresetName
end

-- Applies a preset by name
function MovementControl:applyPreset(presetName)
  self.currentPresetName = presetName
  self.configPresets[presetName]()

  self.onCurrentPresetChanged()
end


---- Control ----

-- Starts heartbeat loop
function MovementControl.startHeartbeat()
  --print("MovementControl.startHeartbeat")
  if(movementControl:checkHeartbeatIsRequired()) then
    movementControl:initTimer()
    movementControl.timer.setEnabled(true)
  end
end

-- Stops heartbeat loop
function MovementControl.stopHeartbeat()
  --print("MovementControl.stopHeartbeat")
  movementControl:releaseTimer()
end

-- checks whether the heartbeat should be started at all
function MovementControl:checkHeartbeatIsRequired()
  if(count(self.keyBindings) &gt; 0) then return true end
  --print("MovementControl:checkHeartbeatIsRequired -&gt; false")
  -- not required
  return false;
end

---- Input Trigger Processing ----

-- Activates/Deactivates movement modifier 'slow'
function MovementControl:triggerSlowModifier(active)
  local slowModifier = self.triggers.slowModifier
  slowModifier.active = active

  -- determine effective movement modifier
  if(slowModifier.active) then
    -- this modifier is active
    self.movementModifier = MovementModifier.Slow
  elseif(self.triggers.fastModifier.active) then
    -- the other modifier is active
    self.movementModifier = MovementModifier.Fast
  else
    -- no modifier is active
    self.movementModifier = MovementModifier.None
  end

  -- onModifierDeactivated
  if(not slowModifier.active) then
    self:handleOnModifierDeactivated(slowModifier)
  end

  self:updateMovementCalculation()
end

-- Activates/Deactivates movement modifier 'fast'
function MovementControl:triggerFastModifier(active)
  local fastModifier = self.triggers.fastModifier
  fastModifier.active = active

  -- determine effective movement modifier
  if(fastModifier.active) then
    -- this modifier is active
    self.movementModifier = MovementModifier.Fast
  elseif(self.triggers.slowModifier.active) then
    -- the other modifier is active
    self.movementModifier = MovementModifier.Slow
  else
    -- no modifier is active
    self.movementModifier = MovementModifier.None
  end

  -- onModifierDeactivated
  if(not fastModifier.active) then
    self:handleOnModifierDeactivated(fastModifier)
  end

  self:updateMovementCalculation()
end

-- Handles "modifier deactivated" event
-- - Releases 'slow'/'fast' locks (depending on settings)
function MovementControl:handleOnModifierDeactivated(modifier)
  -- Release 'slow' lock?
  if(modifier.deactivatesAlwaysSlow) then
    self.triggers.alwaysSlow.active = false
  end
  -- Release 'fast' lock?
  if(modifier.deactivatesAlwaysFast) then
    self.triggers.alwaysFast.active = false
  end
end

function MovementControl:toggleAlwaysSlow()
  --print("toggleAlwaysSlow from " .. tostring(self.triggers.alwaysSlow.active))
  self:triggerAlwaysSlow(not self.triggers.alwaysSlow.active)
end

function MovementControl:toggleAlwaysFast()
  --print("toggleAlwaysFast from " .. tostring(self.triggers.alwaysFast.active))
  self:triggerAlwaysFast(not self.triggers.alwaysFast.active)
end

-- Activates/Deactivates lock to 'slow' mode ('alwaysSlow')
function MovementControl:triggerAlwaysSlow(active)
  local alwaysSlow = self.triggers.alwaysSlow
  alwaysSlow.active = active

  --print("alwaysSlow: " .. tostring(alwaysSlow.active))

  if(alwaysSlow.active) then
    -- this lock is active
    self.movementMode.current = self.movementMode.slow
  elseif(self.triggers.alwaysFast.active) then
    -- the other lock is active
    self.movementMode.current = self.movementMode.fast
  else
    -- no lock is active
    self.movementMode.current = self.movementMode.normal
  end

  -- exclusive? -&gt; deactivate other locks
  if(alwaysSlow.exclusive and alwaysSlow.active) then
    self.triggers.alwaysFast.active = false
  end

  self:updateMovementCalculation()
end

-- Activates/Deactivates lock to 'fast' mode ('alwaysFast')
function MovementControl:triggerAlwaysFast(active)
  local alwaysFast = self.triggers.alwaysFast
  alwaysFast.active = active

  if(alwaysFast.active) then
    -- this lock is active
    self.movementMode.current = self.movementMode.fast
  elseif(self.triggers.alwaysSlow.active) then
    -- the other lock is active
    self.movementMode.current = self.movementMode.slow
  else
    -- no lock is active
    self.movementMode.current = self.movementMode.normal
  end

  -- exclusive? -&gt; deactivate other locks
  if(alwaysFast.exclusive and alwaysFast.active) then
    self.triggers.alwaysSlow.active = false
  end

  self:updateMovementCalculation()
end


---- Internals ----

-- (On movement mode or modifiers changed)
-- Calculates effective movement factor and updates MemRecs in AdrList
function MovementControl:updateMovementCalculation()

  local modeMapping = self.movementModeMapping[self.movementMode.current]
  local mode = modeMapping[self.movementModifier]
  --local amount = self.modeAmountMapping[mode]
  local amount = mode.movementAmount

  --print("updateMovementCalculation movementMode = " .. self.movementMode.current .. ", movementModifier = " .. self.movementModifier .. ", effective mode = " .. mode )

  self:setMovementAmount(amount)

  -- update toggle scripts

  local alwaysSlowScript = self.addressListEntries.alwaysSlow
  local alwaysSlowTrigger = self.triggers.alwaysSlow
  --print("Update mem record with description: " .. alwaysSlowScript.description)
  if(alwaysSlowScript.memoryRecord and alwaysSlowScript.memoryRecord.Active ~= alwaysSlowTrigger.active) then
    --print("updating SLOW to " .. tostring(alwaysSlowTrigger.active))
    alwaysSlowScript.memoryRecord.Active = alwaysSlowTrigger.active
  end

  local alwaysFastScript = self.addressListEntries.alwaysFast
  local alwaysFastTrigger = self.triggers.alwaysFast
  --print("Update mem record with description: " .. alwaysFastScript.description)
  if(alwaysFastScript.memoryRecord and alwaysFastScript.memoryRecord.Active ~= alwaysFastTrigger.active) then
    --print("updating FAST to " .. tostring(alwaysFastTrigger.active))
    alwaysFastScript.memoryRecord.Active = alwaysFastTrigger.active
  end
end

-- Updates the 'movementAmount' variable in the interceptor script
function MovementControl:setMovementAmount(value)
  --print("movementAmount = " .. readFloat(getAddress("movementAmount")) .. ", set to " .. value)
  local movementAmountAdr = getAddress("movementAmount")
  -- if we can't resolve this, the interceptor is probably not active...
  if(movementAmountAdr == 0) then return end

  writeFloat(movementAmountAdr, value)
end

-- Initializes movement control stuff
function MovementControl:setup()
  --print("Setting up Movement Control (Walk/Run)")
  self:init()
  self:configure()
  self:applyConfig()
end

-- Initializes internal state
function MovementControl:init()
  -- Disable showing errors when looking up entries in the AdressList
  -- (we'd like to handle that ourselves)
  errorOnLookupFailure(false)

  -- Presets
  -- Callback when current preset changed
  self.onCurrentPresetChanged = function(presetName)
    -- reconfigure movement mode mapping depending changed settings
    self:setupMovementModeMapping()
  end
end

-- Performs further setup which depend on configurable settings
function MovementControl:applyConfig()
  self:setupMemoryRecords()
  self:setupKeyBindings()
  self:updateMovementCalculation()
end



-- Performs setup for manipulating entries in the AddressList (e.g. toggle scripts)
function MovementControl:setupMemoryRecords()
  local adrList = getAddressList()

    -- 'Main' script (monitor for activation to set default movement ammount)
  local mainScript = self.addressListEntries.main
  --print("Search mem record with description: " .. mainScript.description)
  mainScript.memoryRecord = adrList.getMemoryRecordByDescription(mainScript.description)
  mainScript.memoryRecord.OnActivate = function(memRecord, before, currentstate)
    --print("mainMemoryRecord.OnActivate, before = " .. tostring(before) .. " currentstate = " .. tostring(currentstate))
    if(before) then return true end
      self:configure()
      self:applyConfig()
      self:startHeartbeat()
    return true
  end
  mainScript.memoryRecord.OnDeactivate = function(memRecord, before, currentstate)
    --print("mainMemoryRecord.OnDeactivate, before = " .. tostring(before) .. " currentstate = " .. tostring(currentstate))
    if(before) then return true end
      self:stopHeartbeat()
    return true
  end

  -- 'AlwaysSlow' toggle
  local alwaysSlowScript = self.addressListEntries.alwaysSlow
  --print("Search mem record with description: " .. alwaysSlowScript.description)
  alwaysSlowScript.memoryRecord = adrList.getMemoryRecordByDescription(alwaysSlowScript.description)
  if(alwaysSlowScript.memoryRecord) then
    alwaysSlowScript.memoryRecord.OnActivate = function(memRecord, before, currentstate)
      --print("alwaysSlowMemoryRecord.OnActivate, before = " .. tostring(before) .. " currentstate = " .. tostring(currentstate))
      if(before) then return true end
      self:triggerAlwaysSlow(true)
      return true
    end
    alwaysSlowScript.memoryRecord.OnDeactivate = function(memRecord, before, currentstate)
      if(before) then return true end
      self:triggerAlwaysSlow(false)
      return true
    end
  end

  -- 'AlwaysFast' toggle
  local alwaysFastScript = self.addressListEntries.alwaysFast
  --print("Search mem record with description: " .. alwaysFastScript.description)
  alwaysFastScript.memoryRecord = adrList.getMemoryRecordByDescription(alwaysFastScript.description)
  if(alwaysFastScript.memoryRecord) then
    alwaysFastScript.memoryRecord.OnActivate = function(memRecord, before, currentstate)
      if(before) then return true end
      self:triggerAlwaysFast(true)
      return true
    end
    alwaysFastScript.memoryRecord.OnDeactivate = function(memRecord, before, currentstate)
      if(before) then return true end
      self:triggerAlwaysFast(false)
      return true
    end
  end

end

-- Configures key bindings for keys with events which are not supported by CE's hotkeys
-- (e.g. keys with require 'released' event for a 'hold' function)
function MovementControl:setupKeyBindings()
  -- setup event handlers for keystate change
  self.keyBindings = {}

  -- 'slow' modifier key binding
  local slowTrigger = self.triggers.slowModifier
  if(slowTrigger.key ~= nil) then
    self.keyBindings[slowTrigger.key] = {
      keyPressed = false,
      onKeyDown = function(key)
        --print("# 'Slow' Down")
        self:triggerSlowModifier(true)
      end,
      onKeyUp = function(key)
        --print("# 'Slow' Up")
        self:triggerSlowModifier(false)
      end
    }
  end

  -- 'fast' modifier key binding
  local fastModifier = self.triggers.fastModifier
  if(fastModifier.key ~= nil) then
    self.keyBindings[fastModifier.key] = {
      keyPressed = false,
      onKeyDown = function(key)
        --print("# 'Fast' Down")
        self:triggerFastModifier(true)
      end,
      onKeyUp = function(key)
        --print("# 'Fast' Up")
        self:triggerFastModifier(false)
      end
    }
  end

  -- 'alwaysSlow' toggle key binding
  local alwaysSlow = self.triggers.alwaysSlow
  if(alwaysSlow.key ~= nil) then
    self.keyBindings[alwaysSlow.key] = {
      keyPressed = false,
      onKeyDown = function(key)
        --print("# 'AlwaysSlow' Down")
        self:toggleAlwaysSlow()
      end,
    }
  end

  -- 'alwaysFast' toggle key binding
  local alwaysFast = self.triggers.alwaysFast
  if(alwaysFast.key ~= nil) then
    self.keyBindings[alwaysFast.key] = {
      keyPressed = false,
      onKeyDown = function(key)
        --print("# 'AlwaysFast' Down")
        self:toggleAlwaysFast()
      end,
    }
  end
end

function MovementControl:destroy()
  self:releaseTimer()
end

-- Initializes heartbeat timer
function MovementControl:initTimer()
  --print("MovementControl:initTimer")

  if (self.timer == nil) then
    --print("creating timer...")
    self.timer = createTimer(nil, false)
  end

  self.timer.setInterval(self.timerIntervalMillis)
  self.timer.OnTimer = function()
    --print("timer: ")
    self:tick()
  end
  self.timer.setEnabled(false)
end

function MovementControl:releaseTimer()
  --print("MovementControl:releaseTimer")
  if (self.timer ~= nil) then
    self.timer.setEnabled(false)
    self.timer.destroy()
    self.timer = nil
  end
end

-- Heartbeat, called periodically:
-- - checks key state changes for bound keys
-- - triggers key events (keyDown, keyUp)
function MovementControl:tick()
  -- check if hotkey state has changed
  for keyCode, binding in pairs(self.keyBindings) do
    self:checkKeyState(keyCode, binding)
  end
end

-- Checks for state changes of a specific key and fires keyUp/keyDown events
function MovementControl:checkKeyState(keyCode, binding)
  if(keyCode == nil) then
    -- not defined
    return
  end

  local keyPressed = isKeyPressed(keyCode)

  if(binding.keyPressed ~= keyPressed) then
    if(keyPressed) then
      -- down
      if(binding.onKeyDown ~= nil) then
        binding.onKeyDown(keyCode)
      end
    else
      -- released
      if(binding.onKeyUp ~= nil) then
        binding.onKeyUp(keyCode)
      end
    end
    -- remember last key state
    binding.keyPressed = keyPressed
  end
end

-- Setup MovementControl

if(movementControl) then
  movementControl:destroy()
  movementControl = nil
end
movementControl = MovementControl:new()
movementControl:setup()

</LuaScript>
</CheatTable>
