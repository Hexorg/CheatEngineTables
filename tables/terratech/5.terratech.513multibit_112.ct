<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Files>
    <junk_151023.lua Encoding="Ascii85">=K@94,^U(2Y6Jcc13Chi+6doV$Z5MV*hLn@xYvq;SOo%XHw%h8)$eOV1j*6fCibtrKjfY;XP#WHEcLcU3dBex(hWhE%$f7z:zkCY?P_haheLKH,ErPUO/S,imR*Aoj}-sGi=q$kg5is!qxttQ(QD,e?cPa9kAFKpA5:-5tVAp7hO[3TXp]%7Dbjakk;5m+9x@r?rb)WQ1@ciRg=KM(mJ{;mw/SxOMyxJ!m{$}Ft6C/Cv_JZRinU9?d[ED(vqC)2NHi[i2{@UJRKSpxwH/K$)Nsw*CKiAVJP]8}X{ayYE+h2/C;}QvScpr+IWJ*}Eag7B/wa0w45)RgH3GzitD%4gQYqObz^EwC/3bCZLFRAQ4XV6Yz--o#oR1zpK.p3[0yBoOKW)Il!w]m]B?m):1mBhQDrwmmdD}fuAB.w7^q{^W4sTr+]MAVM5s)9:MUgi]FG)(0^!7?[Jt?jILGwcMd+DmFA4rm/0j1Jrec^;Mn6q;@M)OPAHrR9+pdZ@ANgegMb-yOGUvkF::[lN;$k^W-tR{X}N8$k,W:-!N5,WC=QkP;Ge%,z!nuEkE7LxOSVAF^ci5KIK3G86HWWmon(6B{s7^RYE0)m,NEAzA!+7CHb),{(MPNW+6vzp[69@-Ie(@dEgr#4n%#Cz]6*(hM2gAM1wId}%p!]zjRMqnO{vS7?;f#nM^X=7vlC3v$%.Aw^;yv#)tP$Ek7xhU4F?8m2AV=/M,WO)4b29Nd3Hfe8[Z/#b8of5zm%=ejuUN*j[.$J?6xeOmKfqfREeG*obl.(+E%ru+g2;nyM:N%J8blQcR#dZc_bj*?]YfV_VVgWlUu9a^oQ3}FgRY[Ji1H}jVg0%@Rmr,)UqHYHcI?myD7-%qj=+c[G=@-nLyp01D5_kN$M+m({-F=mep}3+?/+]HX(^c@6jU9.TcsAVonvj_1Nxy+AdnxAx:PytKhnu6TE_wIKUfB)Fcp7E7yYC5:(4;W[0*mleSMR9WM_j!ctQ0h1!2bcL!Xvpmo[%uS--B%mLBJug04Q;U4]c#BJ[(5QWo02]Xmg2-0Y/,;Oyvl;,Syd5tFq4d:pw[bM!{+.(9eM)Dw-y[5)9#XG?d-1H23JCq[^3;ag^aTs+fNSI={1oak+M05Q73Q]N7rQ2b{k(YEl{L%w1$^0m2T9s^xl1oWFQ.9;[h;LWiL}B;*1,.p,.rxW!prrhxqNWDq?9C+5(D8bi(rNezfEo39SO(05IgKwuUwF4$KGA$l{=^Bl23dU@B@[$1C62Z5Fpg@L36dhB!hQ%C=V$:)f@tA_K$e{6+kXpzGBq@WXPS_ci6oF;:(.w)=HLMyhtsRX;sFQZR!NC/M[I5o+dF@J-h4uAQmRR_/mtSM9gXb7Md?hxhQhcZ=IYXyss2n/o;LevC_a_k@gBQS^wwDkjE*?$K-JYMh(-v9EEkNMcnC.S3trR+_W!bNB9ia#u}T)E=Ww]Pp-Ks%axTFev$On*,-$OK8_HbA.yyKJli3)9AQpJh!tKpOCi*}QVqcrur1/Q]08d+0q6k5kbu%f-:RQGa^$Cc7#UKoCwcVM}COgp]ks29!+(%z=.4duZO,o#a7Qyif8Bwo_^Qq_+%J.AikqW.nUR6$D:grkrr^9$4ho%x5F/kup*f?yQyCE_KExCz{{3k}i]g)pe^wk+pK}GLx{P?[MXhpO3e3)^W2fx]}HXJDRWp)Ak8Sf}X[^w5WAN(}rH9c5599@cYDmApcR!31xjd2{dK#8-l@F=iOKWc]vg=oQkvv:w*F^8LVRro{9*kNv-9og7c)g=G:xZl(/^bN(YYfy{TY2k+2OI9$9G)!kxYSpF(/JcWF=l[8l{gE1tk1?OD#9I8H_H9!_!^Nxtnwf;4nI-2uhX2prdFgn.lE+$7}]![MH+Ls}a#A7}HMgf(GtbT_h*E9$zeUl+@,@4,?nF3ED-*yo7jhlp#jZ?P_D.*0cd)a9rAq[%:9xiBcn+NBP[Qty5IMW6JH(A%VbtLl_pLF_oyAf;oUbBKaI*D@a(N$qA]@v-xHL1$*#T_HOTTyHdQQrD%R(m=CHdu3V_Hg$uv2SBfsoiOlYYeDT36*i_jFhX@;i6$7pMVa#wsML+QgI/lQWljSuhD}Uo@h25hp,=.X3bQ/M[cSzdaL:HxHyj:Ab(lX2c4h-]N@*VG)Z:AN:RoN:kk$^7.3YT::(..GFpL69C0(0LfPSyUViItrvLHSTxJKfkbdMqLEVI]g7+XVT+tCOMn5,wl@Ho.75)S4G/*!k2,8mYpfO3H*iSFOE%cN!SUoJ55u7z(!Ar#QKYL_;CBB_-rIlZ?@,kfMcoXs5K9e2_W-kPnOR7uQ3w#Nf*:},;(TiF4SL0tuC*Swoh*Y+{rAaEz:uRwc08s*u]iVK_tEayp?Qf9X2BwT6woV44i:zub/=PWnpEbR0fD0HkFf?S8??$Ta!pK-bGKr8M92-,?b%v!R,(QA)]MtG6?xeE-D0^)U@4}yX;[YRuj8u#.3:VhnihLbbZSmsiB$djJnAf1RbTP1nG,mdJx.B6Fbo(:H!cYwM8X/4Ko0w?^FKxsx^h?;{9%ZqEfOWJXo!c.gffhCk4fm3LOSj$imkj614-kZIg:}OMY+C6.aUn9LhN)%.-tli7uvIa_^zphsmp?69/:is[i=Frga9hG$f8Rfe^qbi?sBnA=IJTt70hMgiu!AMF/7Rkd9[s$^LBYGWu:2Y5jS^:xsPqaQc80+Gp=y$sEQ_iF1jfVc)NX[aP#w;gms@GP$WnFD44H%rZq=HV4W?Ei-,Fh}2%@K-.Xxc1$gSC}D[7]8BKyjQDsgV4YPm^mo!H[dUop#9ILp9r3a9@qK)Lda}^@KS6lP_^yNb.FcgxvsK73dbio{(nrI;;OtmtcWsCBPb.[Qx.hSQ2KWO8fp*7]?MM]1EOyuaklKv!?cFv]2JT*GxMMh!Vv1PKf7m=$r**G4IwB?i4eMiaK=2lFYGGIfuY^oV+ub=%OPK*7$ArLvND[b%iJ$D3{*4Rav+-n%*VOIqI?Zk/gXJyah4lDaaA;z3ctGy+.%Dp4Y3z%M*G.?Q,_M0e)oB^;+2*[$;iaG92$LXoSoOV7].gc0N3jvoy0e^BttAJQ^wdFg@2=pJE!!,8oQR3QXeoGM5Q2m4ULjm$ImQ5QQ[3H2p;3SyCXq=!/_1RT0=%uy97pJaU}#RoK*Q0PSFz*8^Qpd?9cu0eMt{]MkvBhg$ZvK1f/DxihX?B#LZ)z;^CH#h+#{Yz1Lsg6voVrCZZFo#fYOM%poxwODGlvttRGOa.LXea!nU)JIA+Q+js]u{JWvSlyFbf*M0HbwTY+gSO.y-uPs*s?Bbtud1?5d:V:bx1(.Zlf{1jRSdIT*o[#O)?b^G]m.f^D(J#}kzDhsxTtn[ewz7j@ehJuldm1?9z4l7^2ysPWd(@Fe:U/IZ{I:#19xxbieNca)U/j,x?[Y2[aY:D)BCac?OBePANcs-Nmc9}$cCQW[RU2.eVQj1A_F]a1tLp987$0uRGPS]xM:K}CNqzT;]#NOD6j+A1KRuMQjbt$N=q!8laX?w4(;+aod$n**r+XP6^;=,sYfXQJ**ElHy10hGHLqT6{.MMc9G}e-%OOSc0vAn;}hp/2u2Gici$6G%gwDERyZZIGzr;Y/Amwg@{x6{bd}rTx6{^a%0uWleY4sgq(u/jUSZnDy/4E{.P8!b9Cdp:=rR.Zt.rsrp3KkAIQ{_1.-@PH^=Gi=-[+m:n@S*L]t/b059jkY:SM%Do6)COPQbRue4l@G5BM_wmG]}dFi,{6yuv]8@K]X/s4mi0:q9G=5OcRf9vZxfY]*4omtGFT)a5.iJhIKAT!q(V=,NVuvhzj0PIf-xWq}mAk]KK=,cN3HPMXzrY+5Rs+qdmc5@ur%cndD7,,eDH-D/(QkVaj;e(i.^:%z3]gTV,MBIkaKLHxAQSOdC14Sr7Y?(g:^$nUt)RuY8XQ(ky.zlH_b@zjwE4n2xL%+HXjf=%LIbsBT#3?S7AR(2qHUN$;neiIBM@{1NXNy;FOhEtmst3LvJpL5Vi+DzirZK6KOjgB!j?:jD%%*xv)^!Zc43do!(z2(OZb^ekbLhx0($SyOnfLJj*7uT(*r3@9LROeoc5)B$,SC5fQ/b689nQmhUHw;ob2YzoeadB3(+qwC]ZixN@Lscr;%dg[v*:9ro9v+fQmCU9}ihShFI3r?_9At%nxtuwwsA/wFePIN5.3)I%7zO2YHRv]}4]DpT4z;Fb+TsAvZU3m;OLE@?KF0w4L5KWZNZ,a$iURkL8g=Du-r#,W=Ih36=ne?DlQKG[Y$/Bd^U#SYQU9pbCKgPMAyE(W2Tq7UV{pX}FzB.5Ad0qqQm)/2kCQzAa@LxE.JCjy4+Ww9bljB6^xHkmsE(!B=iXqdwUFoV5337wFI5zI4pL1zo#U::*Skn$80Et0q}lq;-A)qal?9gxHQMh-[gI@:0l$?Xx{I$NYP}MZfA?mXG8fX=Q*%s:HDmW@^MHTGy*@4Zc]d67//bH2uvxlyH_6Iv8{?Y0FbREMB12iU]K8V6W0s4+INnCD%)TqSQmqbTu#WvQQ*UJ-1yDT%nHuy#dFg[{?VW+P*2*g)QVHiejI3_}.OuPv?]QbgnavHIMasekw%Y)o?;_NCv%1X7tF.)tX#FvqP-EvKwKI7.sZLoF@;rvc/Nduy]FoG?[a5bMrALYF$-eGiv%X-Wsrb%Ms*e)6^l]BIv85LMGp*=:=qm6_y]w3GS$rt#1+[Vc]Ta*VKOmyflY?UjW6;(MnZBd%@xbyUZGFRTn?u.xFqSjy@}p9Mst;i,){ugPPX{vNT^0404y2UMBlans2HF3oW#(2OdpFHo=7O$kJS@T5C8CW;p#TI0_4F$?vO/5,a^]H,aGaMMo9MFjV*d4o69f+-s^}_No{z=Fn.e%pByDY3J0I3J_8ONuiV+9ntd*fg!#*N0MTHt^,y,qJZ{IBAw/4P_hL;60v{!31csyqMZ?;Dm?G5:{)y$Lpg]Az}c:,ep7upJ3G.;1K[gqsVqBCgVlt7ud$gVQ_F]NM/_1Z-VYH,lM[{2m$o*dXNzoQg!qA!f%=N-_QX5d_g6epcKt;Q#oXWiHnrZz=XonKPifY)BTf$!WURY%Cq^ajc4:WN]WIt2C)b0p@_50(niOIH[(yO{=G3n/quUg?H179;8Cf37hY4/R7^3V4-]P29TMT{$7@G@yW4w8!hZh8kWSFmW//5NEDK2{37M-S8.)jNZ$Y7[[[j5DU(-zu,gIM;2%_P]0/FoX#bnO$VX!vZQX,MM:7I/0MRv;E$6C@Uz$t,qbz8XJeRH.op{,ZKH0,aEjm;yo4%eRn}%C,[VBvTfi$qKg*4%:SY@+?$8=xkwbBNpDWS++o_{4b![pjv,gBBXwuzel^:uT:v0YF[$^[PB?x=WCJebaH*^l-;Dw6{e/i*hQd}R5G6Gv=j-x_$2N$28$NSHobt,dt!l3#syrzqYyKjeMIJ{bWMv,U;$4(;1^#@i#cXw:NV,E/]#9lc/TS6JA%on_lCX{Az9T/Bx,J$qhcjA@irQy?3nrHd$mOtmQ:iy#Q*1ck$Xj+V=9;H_{4+</junk_151023.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"TerraTech 0.5.13 (click 1st)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck==true then return '' end
--

-- common function
function loadTableFile(n,mode)
  local hdr = 'loadTableFile: '
  assert(type(n)=='string',hdr.."input should be a string -"..tostring(n).." of "..type(n))
  local m = assert(findTableFile(n),hdr.."can't find table file -"..n).Stream
  m = assert(readStringLocal(m.Memory,m.Size),hdr.."can't read content -"..n)
  if type(mode)~='boolean' then return m end
  m = assert(loadstring(m,n),hdr.."lua script load fail -"..n)
  return mode and m() or m
end


loadTableFile("junk_151023.lua",true)


{$asm}

[ENABLE]
usemono()
globalalloc(__,$4000)
__:
dq __
__+08:
BitNess()

__+2c:
dd 1

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>114</ID>
          <Description>"32-bit"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
assert(__+08,32)
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>82</ID>
              <Description>"check team (click 2nd)"</Description>
              <Options moHideChildren="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//define(pteam,"uScript_GetPlayerTeam:In")
define(ptank,"Singleton:get_playerTank")
define(tankteam,"Tank:get_Team")
define(position,"Visible:get_centrePosition")
define(getvisible,"Tank:get_visible")
define(btank,"TankBlock:get_tank")
define(mblock,"Module:get_block")
define(vblock,"Visible:get_block")

[ENABLE]
{
assert(ptank,55 8b ec 83 ec 08)
__+300: // hijack playerTank
push @f
readmem(ptank,06)
jmp  ptank+06
@@:
mov  [__+fc],eax
ret

inc  dword ptr [__+ec]
cmp  dword ptr [__+ec],10000
jl   @f
mov  dword ptr [__+ec],00
@@:

pushad

test eax,eax
je   @f

sub  esp,0c
push eax
call getvisible
add  esp,10
test eax,eax
je   @f


sub  esp,08
push eax
lea  eax,[__+f0]
push eax
call position
add  esp,0c

//push edx
//mov  edx,[eax]
//mov  [__+f0],edx
//mov  edx,[eax+04]
//mov  [__+f4],edx
//mov  edx,[eax+08]
//mov  [__+f8],edx
//pop  edx


@@:
popad
ret
ptank:
jmp  __+300
nop
}
__+0fc: // player tank addr
dd 0
__+100: // check tank, in eax, out eax
push  edx
push  ecx
push  ebx
call  __+120
pop   ebx
pop   ecx
pop   edx
ret

__+120:
test  eax,eax
jne    @f
ret
@@:
sub   esp,0c
push  eax
call  tankteam
add   esp,10

push  eax

sub   esp,10
call  ptank
add   esp,10
test  eax,eax
jne   @f
pop   eax          // invalid tank (ie. before enter game)
xor   eax,eax
ret
@@:
mov   [__+0fc],eax // save player tank

sub   esp,0c
push  eax
call  tankteam
add   esp,10

cmp   eax,[esp]
pop   eax

je    @f
xor   eax,eax
ret
@@:
xor   eax,eax
inc   eax
ret

__+180: // check block, in eax, out eax
test  eax,eax
jne   @f
ret
@@:
push  edx
push  ecx
push  ebx

sub   esp,0c
push  eax
call  btank
add   esp,10

call   __+120

pop   ebx
pop   ecx
pop   edx
ret

__+1c0: // check module, in eax, out eax
test  eax,eax
jne   @f
ret
@@:
push  edx
push  ecx
push  ebx

sub   esp,0c
push  eax
call  mblock
add   esp,10

call   __+180

pop   ebx
pop   ecx
pop   edx
ret


__+200: // check visible, in eax, out eax
test  eax,eax
jne   @f
ret
@@:
push  edx
push  ecx
push  ebx

sub   esp,0c
push  eax
call  vblock
add   esp,10

call   __+180

pop   ebx
pop   ecx
pop   edx
ret


[DISABLE]
{
ptank:
db 55 8b ec 83 ec 08
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>90</ID>
                  <Description>"player tank addr"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>FC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>111</ID>
              <Description>"free shop &amp; unlock (saving)"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(updb,"UIShopItem:UpdateButtonState")
getmonostruct(UIShopItem)
define(lock,"UIShopItem.m_Locked")
define(price,"UIShopItem.m_FinalPrice")
//define(btnbuy,"UIShopItem.m_BuyButton")

//define(binteract,"UnityEngine.UI:Selectable:set_interactable")

[ENABLE]
assertNot(updb,e9)
alloc(_shop,$400,updb)
_shop:
dq _shop,updb

_shop+10: // return save
dd 0
_shop+20:
readmem(updb,24)
_shop+40:
ExReassemble(updb)
xor   eax,eax
push  edi
mov   edi,[ebp+08]
mov   [edi+lock],al
dec   eax
mov   [edi+price],eax
pop   edi
jmp   updb+_LastReassembleLength

updb:
jmp _shop+40

registersymbol(_shop)

[DISABLE]
updb:
readmem(_shop+20,24)

dealloc(_shop)
unregistersymbol(_shop)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>110</ID>
              <Description>"wp rapid"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(process,"ModuleWeapon:Process")
getmonostruct(ModuleWeapon)
define(shtimer,"ModuleWeapon.m_ShotTimer")
define(delta,"UnityEngine:Time:get_deltaTime")

[ENABLE]
assertNot(process,e9)
alloc(_rapid,$400,process)
_rapid:
dq _rapid,process



_rapid+20:
readmem(process,24)
_rapid+40:
ExReassemble(process)

cmp dword ptr [__+1c],(float)1 //
jge @f
mov dword ptr [__+1c],(float)3

@@:

push edi
mov  edi,[ebp+08]
mov  eax,edi
call __+1c0 // check module team
test eax,eax
je   @f

sub   esp,10
call  delta
add   esp,10

fmul  dword ptr [__+1c]

fsubr dword ptr [edi+shtimer]
fstp  dword ptr [edi+shtimer]

@@:
pop  edi

jmp   process+_LastReassembleLength

process:
jmp _rapid+40

registersymbol(_rapid)

[DISABLE]
process:
readmem(_rapid+20,24)

dealloc(_rapid)
unregistersymbol(_rapid)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>112</ID>
              <Description>"fuel tank"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(mblock,"Module:get_block")
define(btank,"TankBlock:get_tank")
define(upd,"ModuleFuelTank:Update")

getmonostruct(Tank)
define(famount,"Tank.fuelAmount")
define(ftotal,"Tank.totalFuelCapacity")

[ENABLE]
assertNot(upd,e9)
alloc(_fuel,$400,upd)
_fuel:
dq _fuel,upd


_fuel+20:
readmem(upd,24)
_fuel+40:
ExReassemble(upd)

@@:

push edi
mov  edi,[ebp+08]
mov  eax,edi
call __+1c0 // check module team
test eax,eax
je   @f

sub  esp,0c
push edi
call mblock
add  esp,10

test eax,eax
je   @f

sub  esp,0c
push eax
call btank
add  esp,10

test eax,eax
je   @f

push esi

mov  esi,eax // tank

mov   eax,[esi+ftotal]
mov   [esi+famount],eax

pop  esi

@@:
pop  edi

jmp   upd+_LastReassembleLength

upd:
jmp _fuel+40

registersymbol(_fuel)

[DISABLE]
upd:
readmem(_fuel+20,24)

dealloc(_fuel)
unregistersymbol(_fuel)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>109</ID>
              <Description>"energy store (battery?)"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//define(mblock,"Module:get_block")
//define(btank,"TankBlock:get_tank")
define(upd,"ModuleEnergyStore:Update")
define(enget,"ModuleEnergyStore:get_CurrentAmount")
define(enset,"ModuleEnergyStore:set_CurrentAmount")

getmonostruct(ModuleEnergyStore)
define(entotal,"ModuleEnergyStore.m_Capacity")

[ENABLE]
assertNot(upd,e9)
alloc(_energy,$400,upd)
_energy:
dq _energy,upd


_energy+20:
readmem(upd,24)
_energy+40:
ExReassemble(upd)

push edi
mov  edi,[ebp+08]
mov  eax,edi
call __+1c0 // check module team
test eax,eax
je   @f

sub  esp,08
push dword ptr [edi+entotal]
push edi
call enset
add  esp,10

@@:
pop  edi

jmp   upd+_LastReassembleLength

upd:
jmp _energy+40

registersymbol(_energy)

[DISABLE]
upd:
readmem(_energy+20,24)

dealloc(_energy)
unregistersymbol(_energy)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>101</ID>
              <Description>"block not destroy on detaching from enemy"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(detach,"TankBlock:OnDetach")
getmonostruct(TankBlock)
define(chance,"TankBlock.m_SurviveOnDetachChance")

[ENABLE]
assertNot(detach,e9)
alloc(_detach,$400,detach)
_detach:
dq _detach,detach
_detach+20:
readmem(detach,24)
_detach+40:
ExReassemble(detach)
mov   eax,[ebp+08]
fld1
fstp  dword ptr [eax+chance]
jmp   detach+_LastReassembleLength

detach:
jmp _detach+40

registersymbol(_detach)

[DISABLE]
detach:
readmem(_detach+20,24)

dealloc(_detach)
unregistersymbol(_detach)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>94</ID>
              <Description>"player &amp; orphan block reject damage"</Description>
              <Options moHideChildren="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(reject,"ModuleDamage:OnRejectDamage")
define(btank,"TankBlock:get_tank")
define(mblock,"Module:get_block")

[ENABLE]
assertNot(reject,e9)
alloc(_reject,$400,reject)
_reject:
dq _reject,reject

_reject+20:
readmem(reject,24)


label(orphan)
label(doreject)
label(notreject)
_reject+40:
ExReassemble(reject)
mov   eax,[ebp+08]

sub   esp,0c
push  eax
call  mblock
add   esp,10

test  eax,eax
je    notreject  // no block, eg.rock/tree, normal no reject damage

sub   esp,0c
push  eax
call  btank
add   esp,10
test  eax,eax
je    orphan    // orphan block with no tank attached, do reject?

call  __+100    // test tank if player team -&gt; do reject
test  eax,eax
je    notreject // with tank but not player, not reject damage

doreject:       // reset stack and return true (reject damage event)
mov   esp,ebp
pop   ebp
xor   eax,eax
inc   eax
ret

orphan:
mov   eax,[__+2c] // orphan reject damage On/Off
test  eax,eax
jne   doreject
notreject:
jmp   reject+_LastReassembleLength


reject:
jmp _reject+40

registersymbol(_reject)

[DISABLE]
reject:
readmem(_reject+20,24)

dealloc(_reject)
unregistersymbol(_reject)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>95</ID>
                  <Description>"orphan block on/off"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>2C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>96</ID>
                  <Description>"toggle on/off (hotkey / )"</Description>
                  <Options moAllowManualCollapseAndExpand="1"/>
                  <LastState Activated="0"/>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
__+2c:
dd 1
[DISABLE]
__+2c:
dd 0

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>191</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"64-bit"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
assert(__+08,64)
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>116</ID>
              <Description>"check team (click 2nd) *"</Description>
              <Options moHideChildren="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//define(pteam,"uScript_GetPlayerTeam:In")
define(ptank,"Singleton:get_playerTank")
define(tankteam,"Tank:get_Team")
define(position,"Visible:get_centrePosition")
define(getvisible,"Tank:get_visible")
define(btank,"TankBlock:get_tank")
define(mblock,"Module:get_block")
define(vblock,"Visible:get_block")

[ENABLE]



__+0f8: // player tank addr
dd 0
__+100: // check tank, in eax, out eax
push  rdx
push  rcx
push  rbx
push  r8
push  r9
call  __+120
pop   r9
pop   r8
pop   rbx
pop   rcx
pop   rdx
ret

__+120:
test  rax,rax
jne   short @f
ret
@@:
sub   rsp,20
mov   rcx,rax
call  tankteam
add   rsp,20

push  rax         // saved previous rax ******

sub   rsp,20
call  ptank
add   rsp,20
test  rax,rax
jne   short @f
pop   rax          // invalid tank (ie. before enter game)
xor   rax,rax
ret
@@:
mov   [__+0f8],rax // save player tank

sub   rsp,20
mov   rcx,rax
call  tankteam
add   rsp,20

cmp   rax,[rsp]    // compare previous rax ******

pop   rax          // pop previous rax ******

je    short @f
xor   rax,rax
ret
@@:
xor   rax,rax
inc   rax
ret
jmp   __+200

__+200: // check block, in eax, out eax
test  rax,rax
jne   short @f
ret
@@:
push  rdx
push  rcx
push  rbx
push  r8
push  r9

sub   rsp,20
mov   rcx,rax
call  btank
add   rsp,20

call   __+120

pop   r9
pop   r8
pop   rbx
pop   rcx
pop   rdx
ret
jmp   __+300

__+300: // check module, in eax, out eax
test  rax,rax
jne   short @f
ret
@@:
push  rdx
push  rcx
push  rbx
push  r8
push  r9

sub   rsp,20
mov   rcx,rax
call  mblock
add   rsp,20

call   __+200

pop   r9
pop   r8
pop   rbx
pop   rcx
pop   rdx
ret
jmp   __+400

__+400: // check visible, in eax, out eax
test  rax,rax
jne   short @f
ret
@@:
push  rdx
push  rcx
push  rbx
push  r8
push  r9

sub   rsp,20
mov   rcx,rax
call  vblock
add   rsp,20

call   __+200

pop   r8
pop   r9
pop   rbx
pop   rcx
pop   rdx
ret
jmp   __+100


[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>117</ID>
                  <Description>"player tank addr"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>0</Offset>
                    <Offset>F8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"free shop &amp; unlock (saving) *"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(updb,"UIShopItem:UpdateButtonState")
getmonostruct(UIShopItem)
define(lock,"UIShopItem.m_Locked")
define(price,"UIShopItem.m_FinalPrice")
//define(btnbuy,"UIShopItem.m_BuyButton")

//define(binteract,"UnityEngine.UI:Selectable:set_interactable")

[ENABLE]
assertNot(updb,e9)
alloc(_shop,$400,updb)
_shop:
dq _shop,updb

_shop+10: // return save
dd 0
_shop+20:
readmem(updb,24)
_shop+40:
ExReAssemble("UIShopItem:UpdateButtonState")// updb
xor   rax,rax
// rcx = this ptr
mov   [rcx+lock],al    // byte
dec   rax
mov   [rcx+price],eax  //  int 32

jmp   updb+_LastReassembleLength

updb:
jmp _shop+40

registersymbol(_shop)

[DISABLE]
updb:
readmem(_shop+20,24)

dealloc(_shop)
unregistersymbol(_shop)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>119</ID>
              <Description>"wp rapid *"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(process,"ModuleWeapon:Process")
getmonostruct(ModuleWeapon)
define(shtimer,"ModuleWeapon.m_ShotTimer")
define(delta,"UnityEngine:Time:get_deltaTime")

[ENABLE]
assertNot(process,e9)
alloc(_rapid,$400,process)
_rapid:
dq _rapid,process
_rapid+10:
dq __+300 // check module team
_rapid+20:
readmem(process,24)
_rapid+40:
ExReassemble(process)

cmp dword ptr [__+1c],(float)1 //
jge short @f
mov dword ptr [__+1c],(float)3

@@:

push rbp
mov  rbp,rcx

sub    rsp,20
movdqu [rsp],xmm0
movdqu [rsp+10],xmm1


mov  rax,rbp
call qword ptr[_rapid+10] // check module team
test rax,rax
je   short @f

sub   rsp,20
call  delta
add   rsp,20
//    return xmm0

mulss xmm0,dword ptr [__+1c]

movss xmm1,dword ptr [rbp+shtimer]
subss xmm1,xmm0
movss dword ptr [rbp+shtimer],xmm1

@@:
movdqu xmm0,[rsp]
movdqu xmm1,[rsp+10]
add    rsp,20

mov   rcx,rbp
pop   rbp

jmp   process+_LastReassembleLength

process:
jmp _rapid+40

registersymbol(_rapid)

[DISABLE]
process:
readmem(_rapid+20,24)

dealloc(_rapid)
unregistersymbol(_rapid)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>120</ID>
              <Description>"fuel tank *"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(mblock,"Module:get_block")
define(btank,"TankBlock:get_tank")
define(upd,"ModuleFuelTank:Update")

getmonostruct(Tank)
define(famount,"Tank.fuelAmount")
define(ftotal,"Tank.totalFuelCapacity")

[ENABLE]
assertNot(upd,e9)
alloc(_fuel,$400,upd)
_fuel:
dq _fuel,upd

_fuel+10:
dq __+300  // check module team

_fuel+20:
readmem(upd,24)
_fuel+40:
ExReassemble("ModuleFuelTank:Update")

@@:

push rbp
mov  rbp,rcx

mov  rax,rbp
call qword ptr[_fuel+10] // check module team
test rax,rax
je   short @f

sub  rsp,20
mov  rcx,rbp
call mblock
add  rsp,20

test rax,rax
je   short @f

sub  rsp,20
mov  rcx,rax
call btank
add  rsp,20

test rax,rax
je   short @f

push rsi

mov  rsi,rax // tank

mov  eax,[rsi+ftotal]    // 32byte on eax
mov  [rsi+famount],eax

pop  rsi

@@:
mov  rcx,ebp
pop  rbp
jmp  upd+_LastReassembleLength

upd:
jmp _fuel+40


registersymbol(_fuel)

[DISABLE]
upd:
readmem(_fuel+40,24)

dealloc(_fuel)
unregistersymbol(_fuel)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>121</ID>
              <Description>"energy store (battery?) *"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//define(mblock,"Module:get_block")
//define(btank,"TankBlock:get_tank")
define(upd,"ModuleEnergyStore:Update")
define(enget,"ModuleEnergyStore:get_CurrentAmount")
define(enset,"ModuleEnergyStore:set_CurrentAmount")

getmonostruct(ModuleEnergyStore)
define(entotal,"ModuleEnergyStore.m_Capacity")

[ENABLE]
assertNot(upd,e9)
alloc(_energy,$400,upd)

_energy:
dq _energy,upd

_energy+10:
dq __+300   // check module team

_energy+20:
readmem(upd,24)

_energy+40:
ExReassemble(upd)
//ExReassemble(upd)


push rbp
mov  rbp,rcx

mov  rax,rbp
call qword ptr[_energy+10] // check module team
test rax,rax
je   @f

  sub    rsp,10
  movdqu [rsp],xmm1

  sub    rsp,20
  movss  xmm1,[rbp+entotal]
  mov    rcx,rbp
  call   enset
  add    rsp,20

  movdqu xmm1,[rsp]
  add    rsp,10

@@:
mov    rcx,rbp
pop    rbp

jmp   upd+_LastReassembleLength

upd:
jmp _energy+40

registersymbol(_energy)

[DISABLE]
upd:
readmem(_energy+20,24)

dealloc(_energy)
unregistersymbol(_energy)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>122</ID>
              <Description>"block not destroy on detaching from enemy *"</Description>
              <Options moAllowManualCollapseAndExpand="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(detach,"TankBlock:OnDetach")
getmonostruct(TankBlock)
define(chance,"TankBlock.m_SurviveOnDetachChance")

[ENABLE]
assertNot(detach,e9)
alloc(_detach,$400,detach)
_detach:
dq _detach,detach

_detach+20:
readmem(detach,24)
_detach+40:
ExReassemble(detach)
mov   eax,(float)1
mov   [rcx+chance],eax
jmp   detach+_LastReassembleLength

detach:
jmp _detach+40

registersymbol(_detach)

[DISABLE]
detach:
readmem(_detach+20,24)

dealloc(_detach)
unregistersymbol(_detach)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>123</ID>
              <Description>"player &amp; orphan block reject damage *"</Description>
              <Options moHideChildren="1"/>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(reject,"ModuleDamage:OnRejectDamage")
define(btank,"TankBlock:get_tank")
define(mblock,"Module:get_block")

[ENABLE]
assertNot(reject,e9)
alloc(_reject,$400,reject)
_reject:
dq _reject,reject
_reject+10:
dq __+100,__+2c
label(orphan)
label(doreject)
label(notreject)
_reject+20:
readmem(reject,24)
_reject+40:
ExReassemble(reject)
push  rbp
mov   rbp,rcx

sub   rsp,20
call  mblock
add   rsp,20

test  rax,rax
je    short notreject  // no block, eg.rock/tree, normal no reject damage

sub   rsp,20
mov   rcx,rax
call  btank
add   rsp,20
test  rax,rax
je    short orphan    // orphan block with no tank attached, do reject?

call  qword ptr[_reject+10]  // test tank if player team -&gt; do reject
test  rax,rax
je    short notreject // with tank but not player, not reject damage

doreject:       // reset stack and return true (reject damage event)
mov   rcx,rbp
pop   rbp
mov   rsp,rbp
pop   rbp
xor   rax,rax
inc   rax
ret

orphan:
mov    rcx,qword ptr[_reject+18]
mov    eax,[rcx] // orphan reject damage On/Off
test   eax,eax
jne    short doreject
notreject:
mov    rcx,rbp
pop    rbp
jmp    reject+_LastReassembleLength


reject:
jmp _reject+40

registersymbol(_reject)

[DISABLE]
reject:
readmem(_reject+20,24)

dealloc(_reject)
unregistersymbol(_reject)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>124</ID>
                  <Description>"orphan block on/off"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:OFF
1:ON
</DropDownList>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>2C</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>125</ID>
                  <Description>"toggle on/off (hotkey / )"</Description>
                  <Options moAllowManualCollapseAndExpand="1"/>
                  <LastState Activated="0"/>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
__+2c:
dd 1
[DISABLE]
__+2c:
dd 0

</AssemblerScript>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Toggle Activation</Action>
                      <Keys>
                        <Key>191</Key>
                      </Keys>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>"test"</Description>
          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//dealloc(__)
globalalloc(__,$10000)
[DISABLE]
dealloc(0caa0000)
dealloc(__)
unregistersymbol(__)


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>127</ID>
          <Description>"energy store (battery?) *"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(mblock,"Module:get_block")
//define(btank,"TankBlock:get_tank")
define(upd,"ModuleEnergyStore:Update")
define(enget,"ModuleEnergyStore:get_CurrentAmount")
define(enset,"ModuleEnergyStore:set_CurrentAmount")

getmonostruct(ModuleEnergyStore)
define(entotal,"ModuleEnergyStore.m_Capacity")

[ENABLE]
assertNot(upd,e9)
alloc(_energy,$400,upd)

_energy:
dq _energy,upd

_energy+10:
dq __+300   // check module team

_energy+20:
readmem(upd,24)

_energy+40:
//push rbp// @40AEC50
//mov rbp,rsp// @40AEC51
//push rsi// @40AEC54
//push rdi// @40AEC55
//push r14// @40AEC56
//push r15// @40AEC58
//sub rsp,10// @40AEC5A
//    define(ReALen,E)
//    define(ReALenDecimal,14)
DxReassemble(upd)
//ExReassemble(upd)


push rbp
mov  rbp,rcx

mov  rax,rbp
call qword ptr[_energy+10] // check module team
test rax,rax
je   @f

  sub    rsp,10
  movdqu [rsp],xmm1

  sub    rsp,20
  movss  xmm1,[rbp+entotal]
  mov    rcx,rbp
  call   enset
  add    rsp,20

  movdqu xmm1,[rsp]
  add    rsp,10

@@:
pop    rbp

jmp   upd+ReALen

upd:
jmp _energy+40

registersymbol(_energy)

[DISABLE]
upd:
readmem(_energy+20,24)

dealloc(_energy)
unregistersymbol(_energy)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"all license"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(license,"ManLicenses:IsLicenseSupported")

[ENABLE]
assert(license,55 8b ec)
alloc(_license,$400,license)
_license:
dq _license,license


_license+10:
dd 0
_license+20:
readmem(license,5)

_license+40:
pop   eax
mov   [_license+10],eax
push  @f
readmem(license,5)
jmp   license+05
@@:
mov   eax,[_license+10]
push  eax
xor   eax,eax
inc   eax
ret

license:
jmp _license+40


registersymbol(_license)

[DISABLE]
license:
readmem(_license+20,5)

dealloc(_license)
unregistersymbol(_license)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>126</ID>
          <Description>"test 64"</Description>
          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(ptank,"Singleton:get_playerTank")


[ENABLE]

alloc(_ptank,$400,ptank)

_ptank:
dq _ptank,ptank

_ptank+20:
readmem(ptank,24)

_ptank+40:
ExReassemble("Singleton:get_playerTank")
mov [_ptank+10],rcx
jmp ptank+_LastReassembleLength

ptank:
jmp _ptank+40

registersymbol(_ptank)

[DISABLE]
ptank:
readmem(_ptank+20,24)

dealloc(_ptank)

unregistersymbol(_ptank)

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>06960000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>--
print(tostring(TrainerOrigin))
</LuaScript>
</CheatTable>
