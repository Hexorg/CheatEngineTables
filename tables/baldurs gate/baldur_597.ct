<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Stats Points"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(TotalStats)
label(StatPoints)
registersymbol(TotalStats)
registersymbol(StatPoints)
aobscan(StatPointsaob,8b 80 3c 07 00 00 8b e5 5d c3 cc cc)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ebx
mov ebx,[TotalStats]
mov [eax+0000073C],ebx
pop ebx

originalcode:
mov eax,[eax+0000073C]

exit:
jmp returnhere

TotalStats:
dd 0

StatPointsaob:
StatPoints:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
StatPoints:
mov eax,[eax+0000073C]
//Alt: db 8B 80 3C 07 00 00
unregistersymbol(StatPoints)
unregistersymbol(TotalStats)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"TotalStats"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>TotalStats</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"ProficiencySlots"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(TotalSlots)
label(ProficiencySlots)
registersymbol(TotalSlots)
registersymbol(ProficiencySlots)
aobscan(ProficiencySlotsaob,8b 80 ec 06 00 00 8b e5 5d c3 cc cc)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ebx
mov ebx,[TotalSlots]
mov [eax+000006EC],ebx
pop ebx

originalcode:
mov eax,[eax+000006EC]

exit:
jmp returnhere

TotalSlots:
dd 0

ProficiencySlotsaob:
ProficiencySlots:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ProficiencySlots:
mov eax,[eax+000006EC]
//Alt: db 8B 80 EC 06 00 00
unregistersymbol(ProficiencySlots)
unregistersymbol(TotalSlots)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"TotalSlots"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>TotalSlots</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Godmode For All"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(PartyHealth)
registersymbol(PartyHealth)
aobscan(PartyHealthaob,0f bf 91 fc 03 00 00 2b c2 0f af 45 90)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [ecx+000003FC],(int)200

originalcode:
movsx edx,word ptr [ecx+000003FC]

exit:
jmp returnhere

PartyHealthaob:
PartyHealth:
jmp newmem
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
PartyHealth:
movsx edx,word ptr [ecx+000003FC]
//Alt: db 0F BF 91 FC 03 00 00
unregistersymbol(PartyHealth)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"One Hit Kill"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(DoOneHitKill)
label(HealthDecreaser)
registersymbol(HealthDecreaser)
aobscan(HealthDecreaseraob,8b 95 88 fe ff ff 66 89 0a e9 ** ** ** **)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov edx,[ebp-00000178]
pushfd
cmp [edx+10],656E6F4E
je DoOneHitKill
popfd
mov [edx],cx

exit:
jmp returnhere

DoOneHitKill:
popfd
mov [edx],(int)0
jmp returnhere

HealthDecreaseraob:
HealthDecreaser:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
HealthDecreaser:
mov edx,[ebp-00000178]
mov [edx],cx
//Alt: db 8B 95 88 FE FF FF
unregistersymbol(HealthDecreaser)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Gold Amount"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(CurrentGold)
label(GoldAmount)
registersymbol(CurrentGold)
registersymbol(GoldAmount)
aobscan(GoldAmountaob,3b 46 10 ** c0 f7 d8 89 85 5c ff ff ff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ebx
mov ebx,[CurrentGold]
mov [esi+10],ebx
pop ebx

originalcode:
cmp eax,[esi+10]
sbb eax,eax

exit:
jmp returnhere

CurrentGold:
dd 0

GoldAmountaob:
GoldAmount:
jmp newmem
returnhere:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GoldAmount:
cmp eax,[esi+10]
sbb eax,eax
//Alt: db 3B 46 10 1B C0
unregistersymbol(GoldAmount)
unregistersymbol(CurrentGold)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"CurrentGold"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>CurrentGold</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Teleport S=Store D=Teleport"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(KeyChecker)
label(StoreCoordinates)
label(Teleport)
label(PartyX)
label(PartyY)
label(PartyZ)
label(ReadCoordinates)
registersymbol(PartyX)
registersymbol(PartyY)
registersymbol(PartyZ)
registersymbol(ReadCoordinates)
aobscan(ReadCoordinatesaob,8b 08 8b 50 04 89 4d ec 89 55 f0 8b 45 e0)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov ecx,[eax]
mov edx,[eax+04]

KeyChecker:
pushfd
pushad
push 'S'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je StoreCoordinates
popfd
pushfd
pushad
push 'D'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je Teleport
popfd
jmp returnhere

StoreCoordinates:
popfd
push ebx
mov ebx,[eax]
mov [PartyX],ebx
mov ebx,[eax+04]
mov [PartyY],ebx
mov ebx,[eax+08]
mov [PartyZ],ebx
pop ebx
jmp returnhere

Teleport:
popfd
push ebx
mov ebx,[PartyX]
mov [eax],ebx
mov ebx,[PartyY]
mov [eax+4],ebx
mov ebx,[PartyZ]
mov [eax+8],ebx
pop ebx
jmp returnhere

exit:
jmp returnhere

PartyX:
dd 0

PartyY:
dd 0

PartyZ:
dd 0

ReadCoordinatesaob:
ReadCoordinates:
jmp newmem
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ReadCoordinates:
mov ecx,[eax]
mov edx,[eax+04]
//Alt: db 8B 08 8B 50 04
unregistersymbol(ReadCoordinates)
unregistersymbol(PartyX)
unregistersymbol(PartyY)
unregistersymbol(PartyZ)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"PartyX"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PartyX</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"PartyY"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PartyY</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"PartyZ"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>PartyZ</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
