<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>44</ID>
      <Description>"SCRIPT: Statics"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>GLOBALALLOC(HitCount1,$10000) // 64k

//=============================================================================
[ENABLE]
//=============================================================================
AOBSCAN(INJECT_HitCount1,8B 80 00 01 00 00 89 83 00 01 00 00 ff 83 f8 00 00 00 81 3d ?? ?? ?? ?? 60 09 00 00)
ASSERT(INJECT_HitCount1+c,ff 83 f8 00 00 00 81 3d)

// this is required to register a symbol for the address so we can disable
LABEL(INJECT_HitCount1_SAVED)
REGISTERSYMBOL(INJECT_HitCount1_SAVED) // registers symbol so diable will work
INJECT_HitCount1: // move current address to found code
INJECT_HitCount1_SAVED: // just saves address as label and therefore symbol

// data variables instantiated later
LABEL(ADDR_HitCount1_EAX)
LABEL(ADDR_HitCount1_EBX)
LABEL(ADDR_HitCount1_Count)
LABEL(STATIC_Checkpoint)
REGISTERSYMBOL(ADDR_HitCount1_EAX)
REGISTERSYMBOL(ADDR_HitCount1_EBX)
REGISTERSYMBOL(ADDR_HitCount1_Count)

//-----------------------------------------------------------------------------
// Statics
//
LABEL(STATIC_Checkpoint)
LABEL(STATIC_Pointer0)
LABEL(STATIC_Pointer1)
LABEL(STATIC_Pointer2)
LABEL(STATIC_Pointer3)
REGISTERSYMBOL(STATIC_Checkpoint)
REGISTERSYMBOL(STATIC_Pointer0)
REGISTERSYMBOL(STATIC_Pointer1)
REGISTERSYMBOL(STATIC_Pointer2)
REGISTERSYMBOL(STATIC_Pointer3)

// these move the current assembling pointer to set the label to that value,
// like saying Static_Checkpoint = INJECT_HitCount1 + $14
INJECT_HitCount1+14: // 05E87C83-&gt;05E87C95+2
STATIC_Checkpoint:

INJECT_HitCount1-04: // 05E87C83-&gt;05E87C7E+1 (04143830)
STATIC_Pointer1:

INJECT_HitCount1-17: // 05E87C83-&gt;05E87C6B+1 (041439C4)
STATIC_Pointer2:

INJECT_HitCount1+dd: // 05E87C83-&gt;05E87D5E+2 (0414384C)
STATIC_Pointer3:

INJECT_HitCount1+14: // 05E87C83-&gt;05E87C95+2
STATIC_Pointer0:

//-----------------------------------------------------------------------------
// Code
//
HitCount1:
LABEL(CODE_HitCount1)
CODE_HitCount1:
    mov [ADDR_HitCount1_EAX], eax
    mov [ADDR_HitCount1_EBX], ebx

    // original code and return
    db 8B 80 00 01 00 00
    ret

//-----------------------------------------------------------------------------
// Now saved data we can use elsewhere
//
HitCount1+1000:
ADDR_HitCount1_EAX:
    dd 0
ADDR_HitCount1_EBX:
    dd 0
ADDR_HitCount1_Count:
    dd 0

//-----------------------------------------------------------------------------
// Inject call to our code into game code
//
INJECT_HitCount1:
    call CODE_HitCount1 // 5 bytes
    nop // 1 byte

//=============================================================================
[DISABLE]
//=============================================================================
UNREGISTERSYMBOL(INJECT_HitCount1_SAVED)

UNREGISTERSYMBOL(ADDR_HitCount1_EAX)
UNREGISTERSYMBOL(ADDR_HitCount1_EBX)
UNREGISTERSYMBOL(ADDR_HitCount1_Count)

UNREGISTERSYMBOL(STATIC_Checkpoint)
UNREGISTERSYMBOL(STATIC_Pointer0)
UNREGISTERSYMBOL(STATIC_Pointer1)
UNREGISTERSYMBOL(STATIC_Pointer2)
UNREGISTERSYMBOL(STATIC_Pointer3)

// make sure call to our code wasn't changed already, then replace with original
ASSERT(INJECT_HitCount1_SAVED,E8)
INJECT_HitCount1_SAVED:
    db 8B 80 00 01 00 00



{
This code seems to be called when you hit an enemy, it has pointers to a struct
with a hit counter and another that might be from ComboMeter1 also, plus
static pointer to checkpoint progress


-- I think this code is actually from the tutorial, it doesn't seem to
-- be called
05E87C6B - A1 C4391404           - mov eax,[041439C4] : [031747A4]              &lt; Static_Pointer2
05E87C70 - 83 78 04 08           - cmp dword ptr [eax+04],08
05E87C74 - 0F86 49230000         - jbe 05E89FC3
05E87C7A - C6 40 10 01           - mov byte ptr [eax+10],01
05E87C7E - A1 30381404           - mov eax,[04143830] : [0349587C]              &lt; Static_Pointer1
05E87C83 - 8B 80 00010000        - mov eax,[eax+00000100]                       &lt;&lt;&lt;&lt;&lt; SEARCH+INJECT
05E87C89 - 89 83 00010000        - mov [ebx+00000100],eax
05E87C8F - FF 83 F8000000        - inc [ebx+000000F8]
05E87C95 - 81 3D 4C371A00 60090000 - cmp [001A374C],00000960                    &lt; Static_Checkpoint
05E87C9F - 7C 06                 - jnge 05E87CA7
05E87CA1 - FF 83 F8000000        - inc [ebx+000000F8]
05E87CA7 - C7 83 10010000 5A000000 - mov [ebx+00000110],0000005A
05E87CB1 - 8B 83 A4000000        - mov eax,[ebx+000000A4]
05E87CB7 - 3B 05 34371A00        - cmp eax,[001A3734] : [0000000C]              &lt; Static_Checkpoint - 18
05E87CBD - 7F 0C                 - jg 05E87CCB
05E87CBF - A1 30381404           - mov eax,[04143830] : [0349587C]              &lt; Static_Pointer1
05E87CC4 - C6 80 18010000 00     - mov byte ptr [eax+00000118],00
05E87CCB - C7 83 94000000 05000000 - mov [ebx+00000094],00000005
05E87CD5 - A1 30381404           - mov eax,[04143830] : [0349587C]              &lt; Static_Pointer1
05E87CDA - 83 B8 B4000000 FF     - cmp dword ptr [eax+000000B4],FF
05E87CE1 - 75 1C                 - jne 05E87CFF
05E87CE3 - 83 BB DC000000 2D     - cmp dword ptr [ebx+000000DC],2D
05E87CEA - 74 09                 - je 05E87CF5
05E87CEC - 83 BB DC000000 48     - cmp dword ptr [ebx+000000DC],48
05E87CF3 - 75 0A                 - jne 05E87CFF
05E87CF5 - C7 83 94000000 1E000000 - mov [ebx+00000094],0000001E
05E87CFF - FF 83 98000000        - inc [ebx+00000098]
05E87D05 - 83 BB 88000000 00     - cmp dword ptr [ebx+00000088],00
05E87D0C - 7F 0D                 - jg 05E87D1B
05E87D0E - 83 BB A4000000 00     - cmp dword ptr [ebx+000000A4],00
05E87D15 - 0F8F 99060000         - jg 05E883B4
05E87D1B - 83 BB 88000000 64     - cmp dword ptr [ebx+00000088],64
05E87D22 - 0F8C 23020000         - jl 05E87F4B
05E87D28 - C7 45 BC 03000000     - mov [ebp-44],00000003
05E87D2F - 33 D2                 - xor edx,edx
05E87D31 - 89 93 88000000        - mov [ebx+00000088],edx
05E87D37 - 83 BB A4000000 00     - cmp dword ptr [ebx+000000A4],00
05E87D3E - 7F 07                 - jg 05E87D47
05E87D40 - C7 45 BC 14000000     - mov [ebp-44],00000014
05E87D47 - 33 F6                 - xor esi,esi
05E87D49 - 83 7D BC 00           - cmp dword ptr [ebp-44],00
05E87D4D - 0F8E 61060000         - jng 05E883B4
05E87D53 - 8D 7D B4              - lea edi,[ebp-4C]
05E87D56 - 66 0FEF C0            - pxor xmm0,xmm0
05E87D5A - 66 0FD6 07            - movq [edi],xmm0
05E87D5E - 8B 0D 4C381404        - mov ecx,[0414384C] : [0314EC4C]              &lt; Static_Pointer3


//////// THIS OLD CODE IS NOT WHAT WE FIND NOW?
05077C6F - A1 C4395103           - mov eax,[035139C4] : [02544744]
05077C74 - 83 78 04 08           - cmp dword ptr [eax+04],08
05077C78 - 0F86 49230000         - jbe 05079FC7
05077C7E - C6 40 10 01           - mov byte ptr [eax+10],01
05077C82 - A1 30385103           - mov eax,[03513830] : [0286C5E4]
05077C87 - 8B 80 00010000        - mov eax,[eax+00000100]          &lt;&lt; Start of search and address to replace
05077C8D - 89 83 00010000        - mov [ebx+00000100],eax
05077C93 - FF 83 F8000000        - inc [ebx+000000F8]			   &lt;&lt; CURRENT hit counter
05077C99 - 81 3D 4C371C00 60090000 - cmp [001C374C],00000960	   &lt;&lt; check for MAXED checkpoint? (2400 decimal)
05077CA3 - 7C 06                 - jnge 05077CAB
05077CA5 - FF 83 F8000000        - inc [ebx+000000F8]			   &lt;&lt; if checkpoint maxed, count double hits
05077CAB - C7 83 10010000 5A000000 - mov [ebx+00000110],0000005A
05077CB5 - 8B 83 A4000000        - mov eax,[ebx+000000A4]
05077CBB - 3B 05 34371C00        - cmp eax,[001C3734] : [00000001]
05077CC1 - 7F 0C                 - jg 05077CCF
05077CC3 - A1 30385103           - mov eax,[03513830] : [0286C5E4]
05077CC8 - C6 80 18010000 00     - mov byte ptr [eax+00000118],00
05077CCF - C7 83 94000000 05000000 - mov [ebx+00000094],00000005
05077CD9 - A1 30385103           - mov eax,[03513830] : [0286C5E4]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>52</ID>
          <Description>"__DEBUG__"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>87</ID>
              <Description>"Pointers"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>88</ID>
                  <Description>"STATIC_Pointer0"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>STATIC_Pointer0</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>89</ID>
                  <Description>"STATIC_Pointer1 (Player, health at +A4)"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>STATIC_Pointer1</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>90</ID>
                  <Description>"STATIC_Pointer2"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>STATIC_Pointer2</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>91</ID>
                  <Description>"STATIC_Pointer3"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>STATIC_Pointer3</Address>
                  <Offsets>
                    <Offset>0</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>45</ID>
              <Description>"ADDR_HitCount1_EAX"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ADDR_HitCount1_EAX</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>50</ID>
              <Description>"ADDR_HitCount1_EBX"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ADDR_HitCount1_EBX</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>82</ID>
              <Description>"ADDR_HitCount1_Count"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ADDR_HitCount1_Count</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"STATIC_Checkpoint"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>STATIC_Checkpoint</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>85</ID>
              <Description>"STATIC_Pointer0"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>STATIC_Pointer0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>86</ID>
              <Description>"STATIC_Pointer1"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>STATIC_Pointer1</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"STATIC_Pointer2"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>STATIC_Pointer2</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>84</ID>
              <Description>"STATIC_Pointer3"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>STATIC_Pointer3</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"Checkpoint (2400)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>STATIC_Pointer0</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"Health (100)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>STATIC_Pointer1</Address>
          <Offsets>
            <Offset>A4</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"SCRIPT: GOD"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>GLOBALALLOC(CHEAT_GOD,$10000) // 64k

//=============================================================================
[ENABLE]
//=============================================================================
AOBSCAN(AOB_GOD1,83 86 A4 00 00 00 DD)
 ASSERT(AOB_GOD1,83 86 A4 00 00 00 DD)
AOBSCAN(AOB_GOD2,83 80 a4 00 00 00 DD A1 ?? ?? ?? ?? A3 ?? ?? ?? ?? 8B 85)
 ASSERT(AOB_GOD2,83 80 a4 00 00 00 DD A1 ?? ?? ?? ?? A3 ?? ?? ?? ?? 8B 85)
AOBSCAN(AOB_GOD3,83 80 A4 00 00 00 DD A1 ?? ?? ?? ?? A3 ?? ?? ?? ?? A1)
 ASSERT(AOB_GOD3,83 80 A4 00 00 00 DD A1 ?? ?? ?? ?? A3 ?? ?? ?? ?? A1)

// data variables instantiated later
LABEL(FLAG_GOD)
LABEL(FLAG_GODMONSTERS)
LABEL(ADDR_LastMonsterHit)
REGISTERSYMBOL(FLAG_GOD)
REGISTERSYMBOL(FLAG_GODMONSTERS)
REGISTERSYMBOL(ADDR_LastMonsterHit)

// set label and symbol addresses
LABEL(INJECT_GOD1)
LABEL(INJECT_GOD2)
LABEL(INJECT_GOD3)
REGISTERSYMBOL(INJECT_GOD1)
REGISTERSYMBOL(INJECT_GOD2)
REGISTERSYMBOL(INJECT_GOD3)

//-----------------------------------------------------------------------------
// Code: God1 (esi is pointer to player or monster)
//
CHEAT_GOD:
LABEL(God1)
LABEL(IsMonster1)
LABEL(Done1)
God1: // add dword ptr [esi+000000A4],DD
    pushad
    pushfd

    mov ebx,[STATIC_Pointer1] // loads pointer to static that has address of player, ????3830
    cmp esi, dword ptr [ebx]
    jne IsMonster1

    // is player, so check god flag
    cmp dword ptr [FLAG_GOD], 00000001
    je Done1
    add dword ptr [esi+000000A4],DD
    jmp Done1

IsMonster1:
    // store last monster hit pointer
    mov [ADDR_LastMonsterHit], esi

    // see if monster god is set
    cmp dword ptr [FLAG_GODMONSTERS], 00000001
    je Done1
    add dword ptr [esi+000000A4],DD
    jmp Done1

Done1:
    popfd
    popad
    ret


//-----------------------------------------------------------------------------
// Code: God2 (eax is pointer to player or monster)
//
LABEL(God2)
LABEL(IsMonster2)
LABEL(Done2)
God2: // add dword ptr [eax+000000A4],DD
    pushad
    pushfd

    mov ebx,[STATIC_Pointer1] // loads pointer to static that has address of player, ????3830
    cmp eax, dword ptr [ebx]
    jne IsMonster2

    // is player, so check god flag
    cmp dword ptr [FLAG_GOD], 00000001
    je Done2
    add dword ptr [eax+000000A4],DD
    jmp Done2

IsMonster2:
    // store last monster hit pointer
    mov [ADDR_LastMonsterHit], esi

    // see if monster god is set
    cmp dword ptr [FLAG_GODMONSTERS], 00000001
    je Done2
    add dword ptr [eax+000000A4],DD
    jmp Done2

Done2:
    popfd
    popad
    ret

//-----------------------------------------------------------------------------
// Code: God3 (eax is pointer to player or monster)
//
LABEL(God3)
LABEL(IsMonster3)
LABEL(Done3)
God3: // add dword ptr [eax+000000A4],DD
    pushad
    pushfd

    mov ebx,[STATIC_Pointer1] // loads pointer to static that has address of player, ????3830
    cmp eax, dword ptr [ebx]
    jne IsMonster3

    // is player, so check god flag
    cmp dword ptr [FLAG_GOD], 00000001
    je Done3
    add dword ptr [eax+000000A4],DD
    jmp Done3

IsMonster3:
    // store last monster hit pointer
    mov [ADDR_LastMonsterHit], esi

    // see if monster god is set
    cmp dword ptr [FLAG_GODMONSTERS], 00000001
    je Done3
    add dword ptr [eax+000000A4],DD
    jmp Done3

Done3:
    popfd
    popad
    ret

//-----------------------------------------------------------------------------
// Data
//
FLAG_GOD:
    dd 0
FLAG_GODMONSTERS:
    dd 0
ADDR_LastMonsterHit:
    dd 0

//-----------------------------------------------------------------------------
// Injections
//
AOB_GOD1:
INJECT_GOD1:
    call God1
    nop
    nop

AOB_GOD2:
INJECT_GOD2:
    call God2
    nop
    nop

AOB_GOD3:
INJECT_GOD3:
    call God3
    nop
    nop

//=============================================================================
[DISABLE]
//=============================================================================
INJECT_GOD1:
    db 83 86 A4 00 00 00 DD

INJECT_GOD2:
    db 83 80 A4 00 00 00 DD

INJECT_GOD3:
    db 83 80 A4 00 00 00 DD

UNREGISTERSYMBOL(INJECT_GOD1)
UNREGISTERSYMBOL(INJECT_GOD2)
UNREGISTERSYMBOL(INJECT_GOD3)

UNREGISTERSYMBOL(FLAG_GOD)
UNREGISTERSYMBOL(FLAG_GODMONSTERS)
UNREGISTERSYMBOL(ADDR_LastMonsterHit)

{
Code called to modify health when you take damage.
There are THREE places that match 83 ?? A4 00 00 00 DD, but one seems
to be added late, could it be that they aren't JITTED until you take damage?
Damn that would bite.

--------------------------------------------------------------------------------
- Subtract 35 health when monster hits you
- This also is called for monsters
--------------------------------------------------------------------------------
0A11DD66 - 80 BE 21010000 00     - cmp byte ptr [esi+00000121],00
0A11DD6D - 75 0A                 - jne 0A11DD79
0A11DD6F - C7 86 DC000000 2A000000 - mov [esi+000000DC],0000002A
0A11DD79 - 33 D2                 - xor edx,edx
0A11DD7B - 89 96 E4000000        - mov [esi+000000E4],edx
0A11DD81 - 89 96 E8000000        - mov [esi+000000E8],edx
0A11DD87 - D9EE                  - fldz
0A11DD89 - D9 9E EC000000        - fstp dword ptr [esi+000000EC]
0A11DD8F - 89 96 88000000        - mov [esi+00000088],edx
0A11DD95 - 89 96 90000000        - mov [esi+00000090],edx
0A11DD9B - 83 86 A4000000 DD     - add dword ptr [esi+000000A4],DD &lt;&lt;&lt;&lt;&lt; SUBTRACT (ALSO DAMAGES MONSTERS)
0A11DDA2 - 83 7E 30 00           - cmp dword ptr [esi+30],00
0A11DDA6 - 75 0A                 - jne 0A11DDB2
0A11DDA8 - A1 38371700           - mov eax,[00173738] : [0000001E]
0A11DDAD - A3 3C381700           - mov [0017383C],eax
0A11DDB2 - C6 86 15010000 01     - mov byte ptr [esi+00000115],01
0A11DDB9 - C7 86 D0000000 14000000 - mov [esi+000000D0],00000014
0A11DDC3 - 3B 35 30386F03        - cmp esi,[036F3830] : [02A4F5FC]
0A11DDC9 - 0F84 05010000         - je 0A11DED4
0A11DDCF - 83 BE A4000000 00     - cmp dword ptr [esi+000000A4],00
0A11DDD6 - 0F8E F8000000         - jng 0A11DED4

--------------------------------------------------------------------------------
- Subtract 35 health when you hit a small spike (big spike is instadeath)
- This also is called for monsters
--------------------------------------------------------------------------------
0A111E2C - 33 D2                 - xor edx,edx
0A111E2E - 89 90 E4000000        - mov [eax+000000E4],edx
0A111E34 - 8B 85 6CF7FFFF        - mov eax,[ebp-00000894]
0A111E3A - 89 90 E8000000        - mov [eax+000000E8],edx
0A111E40 - 8B 85 6CF7FFFF        - mov eax,[ebp-00000894]
0A111E46 - D9EE                  - fldz
0A111E48 - D9 98 EC000000        - fstp dword ptr [eax+000000EC]
0A111E4E - 83 3D 44371700 00     - cmp dword ptr [00173744],00
0A111E55 - 0F85 D6000000         - jne 0A111F31
0A111E5B - 8B 85 6CF7FFFF        - mov eax,[ebp-00000894]
0A111E61 - 83 80 A4000000 DD     - add dword ptr [eax+000000A4],DD &lt;&lt;&lt;&lt;&lt; SUBTRACT (ALSO DAMAGES MONSTERS)
0A111E68 - A1 38371700           - mov eax,[00173738] : [0000001E]
0A111E6D - A3 3C381700           - mov [0017383C],eax
0A111E72 - 8B 85 6CF7FFFF        - mov eax,[ebp-00000894]
0A111E78 - 83 B8 A4000000 00     - cmp dword ptr [eax+000000A4],00
0A111E7F - 0F8F 81000000         - jg 0A111F06
0A111E85 - 8B 95 6CF7FFFF        - mov edx,[ebp-00000894]
0A111E8B - B9 07000000           - mov ecx,00000007
0A111E90 - FF 15 30947000        - call dword ptr [00709430]
0A111E96 - 8B 85 6CF7FFFF        - mov eax,[ebp-00000894]
0A111E9C - C7 80 DC000000 45000000 - mov [eax+000000DC],00000045


--------------------------------------------------------------------------------
- Subtract 35 health when you hit a buzzsaw
- This also is called for monsters probably
--------------------------------------------------------------------------------
05E81DBA - D9EE                  - fldz
05E81DBC - D9 98 EC000000        - fstp dword ptr [eax+000000EC]
05E81DC2 - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81DC8 - 89 90 88000000        - mov [eax+00000088],edx
05E81DCE - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81DD4 - 83 B8 94000000 00     - cmp dword ptr [eax+00000094],00
05E81DDB - 0F85 A3050000         - jne 05E82384
05E81DE1 - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81DE7 - 83 80 A4000000 DD     - add dword ptr [eax+000000A4],DD              &lt;&lt; subtract 35, probably damages monsters too
05E81DEE - A1 38371A00           - mov eax,[001A3738] : [0000001E]
05E81DF3 - A3 3C381A00           - mov [001A383C],eax
05E81DF8 - A1 30381404           - mov eax,[04143830] : [0349587C]
05E81DFD - 83 B8 A4000000 00     - cmp dword ptr [eax+000000A4],00
05E81E04 - 7F 13                 - jg 05E81E19
05E81E06 - 8B 95 24FBFFFF        - mov edx,[ebp-000004DC]
05E81E0C - B9 07000000           - mov ecx,00000007
05E81E11 - FF 15 3094E802        - call dword ptr [02E89430]
05E81E17 - EB 11                 - jmp 05E81E2A
05E81E19 - 8B 95 24FBFFFF        - mov edx,[ebp-000004DC]
05E81E1F - B9 08000000           - mov ecx,00000008
05E81E24 - FF 15 3094E802        - call dword ptr [02E89430]
05E81E2A - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81E30 - C7 80 94000000 0F000000 - mov [eax+00000094],0000000F
05E81E3A - E9 45050000           - jmp 05E82384
05E81E3F - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81E45 - 83 78 30 01           - cmp dword ptr [eax+30],01
05E81E49 - 0F85 A9040000         - jne 05E822F8
05E81E4F - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81E55 - 83 B8 94000000 00     - cmp dword ptr [eax+00000094],00
05E81E5C - 75 34                 - jne 05E81E92
05E81E5E - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81E64 - C7 80 94000000 0F000000 - mov [eax+00000094],0000000F
05E81E6E - 8B 85 24FBFFFF        - mov eax,[ebp-000004DC]
05E81E74 - FF 80 F8000000        - inc [eax+000000F8]
05E81E7A - 81 3D 4C371A00 60090000 - cmp [001A374C],00000960

}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>94</ID>
              <Description>"FLAG_GOD"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>FLAG_GOD</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>95</ID>
              <Description>"FLAG_GODMONSTERS"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>FLAG_GODMONSTERS</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>96</ID>
              <Description>"ADDR_LastMonsterHit"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>ADDR_LastMonsterHit</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>ComboMeter1</Name>
      <Address>02FC0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HitCount1</Name>
      <Address>06260000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_Health1_Static</Name>
      <Address>0A6D536A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_HitCount2_Static</Name>
      <Address>0A6D9D33</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_ComboMeter1_SAVED</Name>
      <Address>05E89F57</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_ComboMeter1</Name>
      <Address>02FC000E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CHEAT_GOD</Name>
      <Address>06380000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HitCount1_SAVED</Name>
      <Address>067B7C87</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_HitCount1_EAX</Name>
      <Address>06261000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_HitCount1_EBX</Name>
      <Address>06261004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_HitCount1_Count</Name>
      <Address>06261008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>STATIC_Pointer0</Name>
      <Address>067B7C9B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>STATIC_Pointer1</Name>
      <Address>067B7C83</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>STATIC_Pointer2</Name>
      <Address>067B7C70</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>STATIC_Pointer3</Name>
      <Address>067B7D64</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FLAG_GOD</Name>
      <Address>063800F3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FLAG_GODMONSTERS</Name>
      <Address>063800F7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ADDR_LastMonsterHit</Name>
      <Address>063800FB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_GOD1</Name>
      <Address>0B8EDE0B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_GOD2</Name>
      <Address>0B8E1ED1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_GOD3</Name>
      <Address>067B1DE7</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
