<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Initialize (v3 for v1.2.1 [20fe] )"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(MOHP,stellaris.exe+000b9a93)
alloc(newmem,$2000)
label(pPlayer)
label(iOwnerID)
label(chkPlayerFleet)
label(_MonHumanPlayer)
label(_BackMHP)

newmem:
pPlayer:
dd 0
iOwnerID:
dd #999

// Helper method
chkPlayerFleet:
    push ebx
    push ecx

    mov ebx,[pPlayer]
    mov ecx,[ebx+000006a0]
    mov ebx,[ebx+0000069c]
    test ebx,ebx
    jz _ChkPF01
_ChkPF00:
    cmp ecx,ebx
    jle _ChkPF01
    cmp eax,[ebx]
    je _ChkPF04
    lea ebx,[ebx+04]
    jmp _ChkPF00

_ChkPF01:
    mov ebx,[pPlayer]
    mov ecx,[ebx+00000690]
    mov ebx,[ebx+0000068c]
    test ebx,ebx
    jz _ChkPF03
_ChkPF02:
    cmp ecx,ebx
    jle _ChkPF03
    cmp eax,[ebx]
    je _ChkPF04
    lea ebx,[ebx+04]
    jmp _ChkPF02

_ChkPF03:
    inc eax
    test eax,eax

_ChkPF04:
    pop ecx
    pop ebx
    ret

// Grab pointers
_MonHumanPlayer:
    mov [pPlayer],esi
    mov ecx,[esi+08]
    mov [iOwnerID],ecx
    mov ecx,[esi+0000089C]            // Original code (get pResourcesInfo)
    jmp _BackMHP

MOHP:
    jmp _MonHumanPlayer
    nop
_BackMHP:

registersymbol(MOHP)
registersymbol(pPlayer)
registersymbol(iOwnerID)
registersymbol(chkPlayerFleet)

[DISABLE]
MOHP:
db 8b 8e 9c 08 00 00

unregistersymbol(MOHP)
unregistersymbol(pPlayer)
unregistersymbol(iOwnerID)
unregistersymbol(chkPlayerFleet)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"pPlayer"</Description>
          <LastState Value="17FF0020" RealAddress="12B80000"/>
          <ShowAsHex>1</ShowAsHex>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pPlayer</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"iOwnerID"</Description>
          <LastState Value="0" RealAddress="12B80004"/>
          <Color>C0C0C0</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iOwnerID</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Instant Warp Wind-Down"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
define(inject_ww,stellaris.exe+00339ca5)
alloc(newmem,$2000)
label(jump1)

newmem:
jump1:
 push eax

 dec [esi+00000094]                // Original code

 mov eax,[esi+04]
 test eax,eax
 jz exit1

 mov eax,[eax+000000a4]
 cmp eax,[iOwnerID]
 jne exit1

 xor eax,eax
 mov [esi+00000094],eax

exit1:
 pop eax
 jmp back1                      // Back to main code

inject_ww:
 jmp jump1
 nop
back1:

registersymbol(inject_ww)

[DISABLE]
inject_ww:
// dec [esi+00000094]
db ff 8e 94 00 00 00

unregistersymbol(inject_ww)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Instant Move"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
define(inject2,stellaris.exe+0024326E)
define(inject3,stellaris.exe+00336D7E)
define(inject4,stellaris.exe+00336E8E)
define(inject5,stellaris.exe+00339DC1)
define(inject6,stellaris.exe+0033AF92)
alloc(newmem,$2000)
label(code2)
label(return2)
label(code3)
label(return3)
label(code4)
label(return4)
label(code5)
label(return5)
label(code6)
label(return6)

newmem:
code2:
    push eax
    mov eax, [ebx+60]
    cmp eax, [iOwnerID]
    setz al
    test al, al
    pop eax

    // Original code
    mov ebx,[ebp+08]
    push esi
    push edi
    jmp return2

code3:
    push eax
    cmp ebx,0
    je code3pt2
    mov eax, [ebx-94]
    cmp eax, [iOwnerID]
    setz al
    test al, al
    pop eax

code3pt2:
    // Original code
    mov ebx,[ebp+08]
    push esi
    push edi
    jmp return3

code4:
    push eax
    mov eax, [edi-108]
    cmp eax, [iOwnerID]
    setz al
    test al, al
    pop eax

    // Original code
    mov ebx,[ebp+08]
    push esi
    push edi
    jmp return4

code5:
    // Original code
    cmp byte ptr [stellaris.exe+146B8A8],00

    push eax
    mov eax, [ebx-94]
    cmp eax, [iOwnerID]
    setz al
    test al, al
    pop eax
    jmp return5

code6:
    push eax
    mov eax, [esi-94]
    cmp eax, [iOwnerID]
    setz al
    test al, al
    pop eax

    // Original code
    push ebx
    mov ebx,[ebp+08]
    push esi
    jmp return6

inject2:
    jmp code2
return2:

inject3:
    jmp code3
return3:

inject4:
    jmp code4
return4:

inject5:
    jmp code5
    nop
    nop
return5:

inject6:
    jmp code6
return6:

registersymbol(inject2)
registersymbol(code2)
registersymbol(inject3)
registersymbol(code3)
registersymbol(inject4)
registersymbol(code4)
registersymbol(inject5)
registersymbol(code5)
registersymbol(inject6)
registersymbol(code6)

[DISABLE]
inject2:
    db 8B 5D 08 56 57

inject3:
    db 8B 5D 08 56 57

inject4:
    db 8B 5D 08 56 57

inject5:
    cmp byte ptr [stellaris.exe+146B8A8],00

inject6:
    db 53 8B 5D 08 56

unregistersymbol(inject2)
unregistersymbol(code2)
unregistersymbol(inject3)
unregistersymbol(code3)
unregistersymbol(inject4)
unregistersymbol(code4)
unregistersymbol(inject5)
unregistersymbol(code5)
unregistersymbol(inject6)
unregistersymbol(code6)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Instant Survey"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
define(inject_survey,stellaris.exe+0017c3ad)
define(inject_investigate,stellaris.exe+0017dcd3)
alloc(newmem,$2000)
label(jump1)
label(jump2)

newmem:
jump1:
 add [esi+1C],eax                  // Original code

 mov edi,[ebp+08]
 test edi,edi
 jz exit1

 mov eax,[edi+000000a4]
 cmp eax,[iOwnerID]
 jne exit1

 mov eax,#99000
 cmp eax,[esi+1c]
 js exit1

 mov [esi+1c],eax

exit1:
 pop edi                           // Original code
 pop esi                           // Original code
 jmp back1                         // Back to main code

jump2:
 add [ecx+1C],eax                  // Original code

 mov edi,[ebp+08]
 test edi,edi
 jz exit2

 mov eax,[edi+000000a4]
 cmp eax,[iOwnerID]
 jne exit2

 mov eax,#99000
 cmp eax,[ecx+1c]
 js exit2

 mov [ecx+1c],eax

exit2:
 pop edi                           // Original code
 pop esi                           // Original code
 jmp back2                      // Back to main code

inject_survey:
JMP jump1
back1:

inject_investigate:
JMP jump2
back2:

registersymbol(inject_survey)
registersymbol(inject_investigate)

[DISABLE]
inject_survey:
add [esi+1C],eax
pop edi
pop esi

inject_investigate:
add [ecx+1C],eax
pop edi
pop esi

unregistersymbol(inject_survey)
unregistersymbol(inject_investigate)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Instant Special Project"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
define(inject_specialproject,stellaris.exe+0028153F)
alloc(newmem,$2000)
label(jump1)

newmem:
jump1:
 push edx

 mov edx,[ebp-000001d0]
 cmp edx,[pPlayer]
 jne exit1

 mov edx,#65100000
 cmp edx,[edi+04]
 jle exit1

 sub edx,ebx
 mov [edi+04],edx

exit1:
 pop edx

 add [edi+04],ebx                  // Original code (inc prog)
 mov eax,ebx                       // Original code
 jmp back1

inject_specialproject:
JMP jump1
back1:

registersymbol(inject_specialproject)

[DISABLE]
inject_specialproject:
ADD DWORD PTR DS:[EDI+4],EBX
MOV EAX,EBX

unregistersymbol(inject_specialproject)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Instant Construction (Recruit/Spaceport)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(inject_construction_spaceport,stellaris.exe+00685C4B)
alloc(newmem,$2000)
label(jump)

newmem:
jump:
ADD EDI,EAX
MOV DWORD PTR DS:[ESI+2C],$15800000
ADD EBX,DWORD PTR DS:[ESI+2C]
JMP back

inject_construction_spaceport:
JMP jump
back:

registersymbol(inject_construction_spaceport)

[DISABLE]
inject_construction_spaceport:
ADD EDI,EAX
ADD EBX,DWORD PTR DS:[ESI+2C]

unregistersymbol(inject_construction_spaceport)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Instant Construction (Planet)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(inject_construction_planet,stellaris.exe+00685AA1)
alloc(newmem,$2000)
label(jump)

newmem:
jump:
MOV EDI,DWORD PTR DS:[ECX+4C]
MOV DWORD PTR DS:[ECX+48],18
CMP DWORD PTR DS:[ECX+48],ESI
JMP back

inject_construction_planet:
JMP jump
NOP
back:

registersymbol(inject_construction_planet)

[DISABLE]
inject_construction_planet:
MOV EDI,DWORD PTR DS:[ECX+4C]
CMP DWORD PTR DS:[ECX+48],ESI

unregistersymbol(inject_construction_planet)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Instant Construction (Construction Ship)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
define(inject_construction_ship1,stellaris.exe+00178473)
define(inject_construction_ship2,stellaris.exe+0017A6C3)
alloc(newmem,$2000)
label(jump)
label(jump2)

newmem:
jump:
MOV EAX,$10000000
MOV DWORD PTR DS:[ESI+24],EAX
CMP EAX,FFE76C8C
JMP back

jump2:
MOV EAX,$10000000
MOV DWORD PTR DS:[ESI+34],EAX
CMP EAX,FFE76C8C
JMP back2

inject_construction_ship1:
JMP jump
NOP
NOP
NOP
back:

inject_construction_ship2:
JMP jump2
NOP
NOP
NOP
back2:

registersymbol(inject_construction_ship1)
registersymbol(inject_construction_ship2)

[DISABLE]
inject_construction_ship1:
MOV EAX,DWORD PTR DS:[ESI+24]
CMP EAX,FFE76C8C

inject_construction_ship2:
MOV EAX,DWORD PTR DS:[ESI+34]
CMP EAX,FFE76C8C

unregistersymbol(inject_construction_ship1)
unregistersymbol(inject_construction_ship2)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>code1</Name>
      <Address>083D0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MOHP</Name>
      <Address>stellaris.exe+000b9a93</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>12B80000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOwnerID</Name>
      <Address>12B80004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>chkPlayerFleet</Name>
      <Address>12B80008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject_ww</Name>
      <Address>stellaris.exe+00339ca5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject2</Name>
      <Address>stellaris.exe+0024326E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>code2</Name>
      <Address>12BA0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject3</Name>
      <Address>stellaris.exe+00336D7E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>code3</Name>
      <Address>12BA001A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject4</Name>
      <Address>stellaris.exe+00336E8E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>code4</Name>
      <Address>12BA0040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject5</Name>
      <Address>stellaris.exe+00339DC1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>code5</Name>
      <Address>12BA005D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inject6</Name>
      <Address>stellaris.exe+0033AF92</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>code6</Name>
      <Address>12BA007C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
