<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <Description>"KingArthur_TheDruids_V105_Script"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 King Arthur - The Role-playing Wargame The Druids (Launcher.exe)
 Game Version  : 1.05
 Script Version: 1.0
 CE Version    : 6.0
 GodMode, Stamina, Mana, Resources and Movement Points
 20-Jan-2011
===========================================
}

[ENABLE]
alloc(MyCode,1024)
//=========================================
// Check if script is compatible to running game version
// If false the script will not be loaded

assert("Game.dll"+90bfc5,29 96 6c 31 00 00)
assert("Game.dll"+8cf60f,89 86 2c 33 00 00)
assert("Game.dll"+00c220f0,8b 81 20 01 00 00)
assert("Game.dll"+00c39f6c,23 d0 66 89 51 34)
assert("Game.dll"+843936,29 85 7c 31 00 00)
assert("Game.dll"+90bed0,83 ec 0c 56 8b f1)

//=========================================
// Declaration section
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_MonStamina)
label(_BackMS)
label(_ExitMS)
label(_MonRes)
label(_BackMR)
label(_ExitMR)
label(_MonR0)
label(_MonMP)
label(_BackMM)
label(_ExitMM)
label(_MonM0)
label(_MonMana)
label(_BackMMa)
label(_ExitMMa)
label(_MonCall)
label(_BackMC)
label(pRes)
label(iEnableGM)
label(iEnableMS)
label(iEnableMM)
label(iEnableMR)
label(iEnableMMa)
label(iMinGold)
label(iMinFood)
label(iRetAddress)

registersymbol(MyCode)
registersymbol(pRes)
registersymbol(iEnableGM)
registersymbol(iEnableMS)
registersymbol(iEnableMM)
registersymbol(iEnableMR)
registersymbol(iEnableMMa)
registersymbol(iMinGold)
registersymbol(iMinFood)

//=========================================
MyCode:
//========================================= OK
_GodMode:
 push edi

 mov edi,[iRetAddress]          // Get returning address

 cmp edi,"Game.dll"+00d16c68    // Is it the expected one? (Magic)
 je _ExitGM                     // Jump if true

 cmp dword ptr [iEnableGM],0
 je _ExitGM                     // Jump if feature is disabled

 mov edi,[esi+00003404]         // Get ptr to troop
 or edi,edi
 jz _ExitGM                     // Jump if null pointer

 mov edi,[edi+0000303c]         // Get ptr to Commom pointer
 or edi,edi
 jz _ExitGM                     // Jump if null pointer

 cmp dword ptr [edi+40],0       // PlayerÂ´s unit?
 jne _ExitGM                    // Jump if false

 mov edi,[esi+000032c4]         // Get max HP
 mov [esi+0000316c],edi         // Make current HP = max

 xor edx,edx                    // value2decrease = 0

_ExitGM:
 pop edi

 sub [esi+0000316c],edx         // Original code
 jmp _BackGM                    // Back to main code

//========================================= OK
_MonStamina:
 push edi

 cmp dword ptr [iEnableMS],0
 je _ExitMS                     // Jump if feature is disabled

 mov edi,[esi+0000303c]         // Get ptr to Commom pointer
 or edi,edi
 jz _ExitMS                     // Jump if null pointer

 cmp dword ptr [edi+40],0       // PlayerÂ´s unit?
 jne _ExitMS                    // Jump if false

 mov eax,[esi+00003324]         // Get maximum Stamina

_ExitMS:
 pop edi

 mov [esi+0000332c],eax         // Original code
 jmp _BackMS                    // Back to main code

//========================================= OK
_MonRes:
 mov eax,[esp]                  // Get returning address
 cmp eax,"Game.dll"+1024d4      // Is it the expected one?
 jne _ExitMR                    // Jump if false

 mov [pRes],ecx                 // Save pointer for further use

 cmp dword ptr [iEnableMR],0
 je _ExitMR                     // Jump if feature is disabled

 mov eax,[iMinFood]
 cmp eax,[ecx+00000120]         // Current Food value &gt;= Minimum?
 jle _MonR0                     // Jump if true

 mov [ecx+00000120],eax         // Update food value

_MonR0:
 mov eax,[iMinGold]
 cmp eax,[ecx+00000110]         // Current Gold value &gt;= Minimum?
 jle _ExitMR                    // Jump if true

 mov [ecx+00000110],eax         // Update Gold value

_ExitMR:
 mov eax,[ecx+00000120]         // Original code
 jmp _BackMR                    // Back to main code

//========================================= OK
_MonMP:
 and edx,eax                    // Original code

 push eax
 push ebx

 mov ebx,[ecx+68]               // Get ptr to Army
 mov ebx,[ebx+08]               // Get ptr to Owner
 cmp ebx,[pRes]                 // Is it a playerÂ´s troop?
 jne _ExitMM

 cmp dword ptr [iEnableMM],0
 je _MonM0                      // Jump if feature is disabled

 mov dx,[ecx+34]                // Get current MP

_MonM0:
 cmp dword ptr [iEnableGM],0
 je _ExitMM                     // Jump if feature is disabled

 mov ebx,[ecx+10]               // Get troop info

 mov eax,[ebx+00003088]         // Get max size
 mov [ecx+14],eax               // Update max troop size
 mov [ecx+18],eax               // Update current troop size

_ExitMM:
 pop ebx
 pop eax

 mov [ecx+34],dx                // Original code (Update MP)
 jmp _BackMM                    // Back to main code

//========================================= OK
_MonMana:
 push esi

 cmp dword ptr [iEnableMMa],0
 je _ExitMMa                    // Jump if feature is disabled

 mov esi,[ebp+00003404]         // Get ptr to troop
 or esi,esi
 jz _ExitMMa                    // Jump if null pointer

 mov esi,[esi+0000303c]         // Get ptr to Commom pointer
 or esi,esi
 jz _ExitMMa                    // Jump if null pointer

 cmp dword ptr [esi+40],0       // Player's unit?
 jne _ExitMMa                   // Jump if false

 mov esi,[ebp+000032d4]         // Get Max Mana
 mov [ebp+0000317C],esi         // Mana = maximum

 xor eax,eax                    // value2decrease = 0

_ExitMMa:
 pop esi

 sub [ebp+0000317C],eax         // Original code
 jmp _BackMMa                   // Back to main code

//========================================= OK
_MonCall:
 mov eax,[esp]
 mov [iRetAddress],eax

 db 83,ec,0c,56,8b,f1
 jmp _BackMC                    // Back to main code

//=========================================
// Variables
pRes:
 dd 0
iEnableGM:
 dd 1
iEnableMS:
 dd 1
iEnableMM:
 dd 1
iEnableMR:
 dd 1
iEnableMMa:
 dd 1
iMinFood:
 dd #60000
iMinGold:
 dd #70000
iRetAddress:
 dd 0

//=========================================
// Hacking Points
"Game.dll"+90bfc5:
 jmp _GodMode
 nop
_BackGM:

"Game.dll"+8cf60f:
 jmp _MonStamina
 nop
_BackMS:

"Game.dll"+00c220f0:
 jmp _MonRes
 nop
_BackMR:

"Game.dll"+00c39f6c:
 jmp _MonMP
 nop
_BackMM:

"Game.dll"+843936:
 jmp _MonMana
 nop
_BackMMa:

"Game.dll"+90bed0:
 jmp _MonCall
 nop
_BackMC:

//=========================================
// Original Codes
[DISABLE]
"Game.dll"+90bfc5:
 sub [esi+0000316C],edx

"Game.dll"+8cf60f:
 mov [esi+0000332C],eax

"Game.dll"+00c220f0:
 mov eax,[ecx+00000120]

"Game.dll"+00c39f6c:
// and edx,eax
 db 23,d0
 mov [ecx+34],dx

"Game.dll"+843936:
 sub [ebp+0000317C],eax

"Game.dll"+90bed0:
 db 83,ec,0c,56,8b,f1

unregistersymbol(MyCode)
unregistersymbol(pRes)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMS)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMMa)
unregistersymbol(iMinGold)
unregistersymbol(iMinFood)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iAddress</Name>
      <Address>2C1F0190</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aAddress</Name>
      <Address>2C1F0209</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iESP0</Name>
      <Address>2C1F020D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iESP1</Name>
      <Address>2C1F0211</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 King Arthur - The Role-playing Wargame The Druids (Launcher.exe)
 Game Version  : 1.05
 Script Version: 1.0
 CE Version    : 6.0
 GodMode, Stamina, Mana, Resources and Movement Points
 20-Jan-2011
 By Recifense
===========================================
</Comments>
  <LuaScript>--[[ 
===========================================
 King Arthur - The Role-playing Wargame The Druids
 Game Version  : 1.05
 Script Version: 1.0
 CE Version    : 6.0
 GodMode, Stamina, Mana, Resources and Movement Points
 20-Jan-2011 LUA Version
===========================================
]]-- 
local Game_Table = { };
local asGameName = "King Arthur - The Druids";
local asGameVersion = "V1.05";
local asGameExe  = "Launcher.exe";
local asScriptEntryName = "KingArthur_TheDruids_V105_Script"
local asScriptDate = "(20-Jan-2011)";
Game_Table.bForm = false;
function IsGameLoaded(ge)
  local t = readInteger(ge);
  if (t == nil) then
    return false;
  end
  return true;
end
  
function AssertVersion()
	local sa1 = "Game.dll+0090bfc5"
    local ta1 = {0x29,0x96,0x6c,0x31,0x00,0x00};
	local sa2 = "Game.dll+008cf60f"
    local ta2 = {0x89,0x86,0x2c,0x33,0x00,0x00};
	local sa3 = "Game.dll+00c220f0"
    local ta3 = {0x8b,0x81,0x20,0x01,0x00,0x00};
	local sa4 = "Game.dll+00c39f6c"
    local ta4 = {0x23,0xd0,0x66,0x89,0x51,0x34};
	local sa5 = "Game.dll+00843936"
    local ta5 = {0x29,0x85,0x7c,0x31,0x00,0x00};
	local sa6 = "Game.dll+90bed0"
    local ta6 = {0x83,0xec,0x0c,0x56,0x8b,0xf1};
	if (CheckArray(ta1,sa1) == false) then
	    return false; 
	end
	if (CheckArray(ta2,sa2) == false) then
	    return false; 
	end
	if (CheckArray(ta3,sa3) == false) then
	    return false; 
	end
	if (CheckArray(ta4,sa4) == false) then
	    return false; 
	end
	if (CheckArray(ta5,sa5) == false) then
	    return false; 
	end
	if (CheckArray(ta6,sa6) == false) then
	    return false; 
	end
    return true;	
end
function CheckArray(tb, gm)
    local sz,i,rm = 0,0,0;
    local address = " ";
   
    if(type(tb) ~= "table") then
        return false;
    end 
    sz = table.maxn(tb);
    if(sz == 0) then
        return false;
    end
    for i = 1, sz do
        address = gm.."+"..tostring(i-1);
        rm	= readBytes(address);
        if (tb[i] ~= rm ) then
            return false;
        end
    end
    return true;
end
function LoadScript()
  local te = getTableEntry(asScriptEntryName);
  if (te == nil) then
      return false;
  else
	  memrec_freeze(te);
	  return true;
  end
end
function Game_Table.Main()
    local asMessage = " ";
    if(IsGameLoaded(asGameExe) == false) then
	    asMessage = asGameName.." is not loaded";
	    showMessage(asMessage);
	    return false;
	end
    if(AssertVersion() == false) then
	    showMessage("Script not compliant with this version of the game");
	    return false;
	end;
	if(LoadScript() == true) then
	    showMessage("AA Script loaded successfully");
		Game_Table.bScriptEnable = true;
		return true;
	else
	    showMessage("AA Script was not found");
		return false;
	end
end
function InitButton( form, caption, x, y, w, h, func ) 
    local button = createButton( form ); 
    if( button == nil ) then 
        return nil; 
    end 
    control_setCaption( button, caption ); 
    control_setPosition( button, x, y ); 
    control_setSize( button, w, h ); 
    control_onClick( button, func ); 
    return button; 
end
function InitLabel( form, x, y, text ) 
    local label = createLabel( form ); 
    if( label == nil ) then 
        return nil; 
    end 
    
    control_setCaption( label, text ); 
    control_setPosition( label, x, y ); 
    return label; 
end 
function Game_Table.CreateForm()
    Game_Table.Form = createForm( true ); 
    form_centerScreen(Game_Table.Form);
	form_onClose(Game_Table.Form, Game_Table.OnFormClose);
	local asCaption = " ";
	local asInfo = " ";
-- Create buttons. 
    Game_Table.btnGM  = InitButton( Game_Table.Form, "Enable/Disable God Mode", 1, 30, 250, 30, Game_Table.OnGMClicked ); 
    Game_Table.btnMS  = InitButton( Game_Table.Form, "Enable/Disable Unlimited Stamina", 1, 65, 250, 30, Game_Table.OnMSClicked ); 
    Game_Table.btnMR  = InitButton( Game_Table.Form, "Enable/Disable Unlimited Resources", 1, 100, 250, 30, Game_Table.OnMRClicked ); 
    Game_Table.btnMM  = InitButton( Game_Table.Form, "Enable/Disable Unlimited Move Points", 1, 135, 250, 30, Game_Table.OnMMClicked ); 
    Game_Table.btnMMa = InitButton( Game_Table.Form, "Enable/Disable Unlimited Mana", 1, 170, 250, 30, Game_Table.OnMMaClicked ); 
-- Create labels. 
   Game_Table.lbGM  = InitLabel( Game_Table.Form, 260, 38, "= ON "); 
   Game_Table.lbMS  = InitLabel( Game_Table.Form, 260, 73, "= ON "); 
   Game_Table.lbMR  = InitLabel( Game_Table.Form, 260, 108,"= ON "); 
   Game_Table.lbMM  = InitLabel( Game_Table.Form, 260, 143,"= ON "); 
   Game_Table.lbMMa = InitLabel( Game_Table.Form, 260, 178,"= ON "); 
-- Create info label.
   asInfo = "AA and LUA scripts by Recifense "..asScriptDate;
   Game_Table.lblInfo = InitLabel( Game_Table.Form, 5, 210, asInfo); 
   
-- Set form caption.
    asCaption = asGameName.." "..asGameVersion;
    control_setCaption( Game_Table.Form, asCaption); 
    return true; 
end 
function Game_Table.OnGMClicked()
    local state   = readInteger("iEnableGM");
	local caption = ""
	
	if (state == nil) then
	    caption = "= Error";
	elseif (state == 0)	then
	    writeInteger("iEnableGM",1);
	    caption = "= ON";
	else
	    writeInteger("iEnableGM",0);
	    caption = "= OFF";
	end
	
	control_setCaption(Game_Table.lbGM,caption);  
    return true;    
end 
function Game_Table.OnMSClicked() 
    local state   = readInteger("iEnableMS");
	local caption = ""
	
	if (state == nil) then
	    caption = "= Error";
	elseif (state == 0)	then
	    writeInteger("iEnableMS",1);
	    caption = "= ON";
	else
	    writeInteger("iEnableMS",0);
	    caption = "= OFF";
	end
	
	control_setCaption(Game_Table.lbMS,caption);  
    return true;    
end 
function Game_Table.OnMRClicked() 
    local state   = readInteger("iEnableMR");
	local caption = ""
	
	if (state == nil) then
	    caption = "= Error";
	elseif (state == 0)	then
	    writeInteger("iEnableMR",1);
	    caption = "= ON";
	else
	    writeInteger("iEnableMR",0);
	    caption = "= OFF";
	end
	
	control_setCaption(Game_Table.lbMR,caption);  
    return true;    
end 
function Game_Table.OnMMClicked() 
    local state   = readInteger("iEnableMM");
	local caption = ""
	
	if (state == nil) then
	    caption = "= Error";
	elseif (state == 0)	then
	    writeInteger("iEnableMM",1);
	    caption = "= ON";
	else
	    writeInteger("iEnableMM",0);
	    caption = "= OFF";
	end
	
	control_setCaption(Game_Table.lbMM,caption);  
    return true;    
end 
function Game_Table.OnMMaClicked() 
    local state   = readInteger("iEnableMMa");
	local caption = ""
	
	if (state == nil) then
	    caption = "= Error";
	elseif (state == 0)	then
	    writeInteger("iEnableMMa",1);
	    caption = "= ON";
	else
	    writeInteger("iEnableMMa",0);
	    caption = "= OFF";
	end
	
	control_setCaption(Game_Table.lbMMa,caption);  
    return true;    
end 
function Game_Table.OnFormClose()
    Game_Table.bForm = false;
    return true;    
end 
function _memrec_KingArthur_TheDruids_V105_Script_activated(te)
 Game_Table.CreateForm();
 Game_Table.bForm = true;
 memrec_setColor(te,0xff0000);
end
function _memrec_KingArthur_TheDruids_V105_Script_deactivated(te)
 if(Game_Table.bForm == true) then
     object_destroy(Game_Table.Form);
 end
 memrec_setColor(te,0x000000);
end
Game_Table.Main();
</LuaScript>
</CheatTable>
