<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>979</ID>
      <Description>"VH x86 update v1.1.23, update 8"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobPlayerPointerGrabber,8B 9B 84 06 00 00 8B 96 D0 00 00 00)
aobscan(aobCompanionPointerGrabber,8B 8F 8C 06 00 00 8B 17)
aobscan(aobXPGainMultiplier,01 96 8C 06 00 00 57)
aobscan(aobItemStacker,8B 78 34 8B 80 B0 00 00 00 8B 40 04)
aobscan(aobTimerSetter,D9 9C DE 0C 04 00 00 38)
aobscan(aobTrickTimerStarter,55 8B EC 83 EC 18 53 56 57 8B F1 33 FF)
aobscan(aobGameDataPointerGetter,80 BE 20 01 00 00 00 57 8B 7D 08)
aobscan(aobUnlockTester,33 C9 3B 46 2C 0F 9D C0 8B 4D F4 64 89 0D 00 00 00 00 5F 5E 5B 8B E5 5D C2 04 00 B0 01)
aobscan(aobMinRetriever,8B 75 08 53 D9 1E 8B CF E8)
aobscan(aobMaxRetriever,8B 45 0C D9 18 8B 45 10 3B C3)
aobscan(aobHealthTester,D8 9E 58 03 00 00)
aobscan(aobManaTester,D8 9E F4 06 00 00 DF E0 F6 C4 41)
aobscan(aobSpeedRetriever,8B 11 89 55 F0 EB ?? 89 45 F0)
aobscan(aobItemPointerGrabber,8B 99 B0 00 00 00 39 3B 75 03)
aobscan(aobItemDemystifier,8B 5D F0 80 7B 46 00)
aobscan(aobEnchantmentScanner,8B 44 39 24 85 C0 7E 6D)
aobscan(aobEnchantAppraiser,69 F6 90 01 00 00)

alloc(newmem,4096)

label(aobPlayerPointerGrabber_r)
label(aobCompanionPointerGrabber_r)
registersymbol(aobPlayerPointerGrabber_r)
registersymbol(aobCompanionPointerGrabber_r)

label(lblPlayerPointerGrabber)
label(lblPlayerPointerGrabberRet)

label(lblCompanionPointerGrabber)
label(lblCompanionPointerGrabberRet)

label(pPlayerData)
label(pCompanionData)
label(fTemp)
registersymbol(pPlayerData)
registersymbol(pCompanionData)
registersymbol(fTemp)

label(aobXPGainMultiplier_r)
registersymbol(aobXPGainMultiplier_r)

label(lblXPGainMultiplier)
label(lblXPGainMultiplierSkip)
label(lblXPGainMultiplierRet)

label(bEnableXPGainMultiplier)
label(fXPGainMultiplier)
registersymbol(bEnableXPGainMultiplier)
registersymbol(fXPGainMultiplier)

label(fXPTemp)
registersymbol(fXPTemp)

label(aobItemStacker_r)
registersymbol(aobItemStacker_r)

label(lblItemStacker)
label(lblItemStackerSkip)
label(lblItemStackerRet)

label(bEnableItemStacker)
label(iItemStackerAmount)
registersymbol(bEnableItemStacker)
registersymbol(iItemStackerAmount)

label(aobTimerSetter_r)
registersymbol(aobTimerSetter_r)

label(lblTimerSetter)
label(lblTimerSetterSkip)
label(lblTimerSetterRet)

label(bEnableInstantShopping)
registersymbol(bEnableInstantShopping)

label(fConstantHalf)
registersymbol(fConstantHalf)

label(aobTrickTimerStarter_r)
registersymbol(aobTrickTimerStarter_r)

label(lblTrickTimerStarter)
label(lblTrickTimerStarterSkip)
label(lblTrickTimerStarterRet)

label(bEnableInstantTricks)
registersymbol(bEnableInstantTricks)

label(iTrickDelay)
registersymbol(iTrickDelay)

label(aobGameDataPointerGetter_r)
registersymbol(aobGameDataPointerGetter_r)

label(lblGameDataPointerGetter)
label(lblGameDataPointerGetterRet)

label(pGameData)
registersymbol(pGameData)

label(aobUnlockTester_r)
registersymbol(aobUnlockTester_r)

label(lblUnlockTester)
label(lblUnlockTesterSkip)
label(lblUnlockTesterRet)

label(bEnableInstantUnlock)
registersymbol(bEnableInstantUnlock)

label(aobMinRetriever_r)
registersymbol(aobMinRetriever_r)

label(lblMinRetriever)
label(lblMinRetrieverDoIt)
label(lblMinRetrieverSkip)
label(lblMinRetrieverRet)

label(aobMaxRetriever_r)
registersymbol(aobMaxRetriever_r)

label(lblMaxRetriever)
label(lblMaxRetrieverDoIt)
label(lblMaxRetrieverSkip)
label(lblMaxRetrieverRet)

label(bEnableOutputDamageScaling)
label(bEnableCompanionOutputDamageScaling)
label(fOutputDamageScale)
registersymbol(bEnableOutputDamageScaling)
registersymbol(bEnableCompanionOutputDamageScaling)
registersymbol(fOutputDamageScale)

label(aobHealthTester_r)
registersymbol(aobHealthTester_r)

label(lblHealthTester)
label(lblHealthTesterDoIt)
label(lblHealthTesterSkip)
label(lblHealthTesterRet)

label(bEnableGodMode)
registersymbol(bEnableGodMode)

label(aobManaTester_r)
registersymbol(aobManaTester_r)

label(lblManaTester)
label(lblManaTesterDoIt)
label(lblManaTesterSkip)
label(lblManaTesterRet)

label(bEnableInfiniteMana)
registersymbol(bEnableInfiniteMana)

label(aobSpeedRetriever_r)
registersymbol(aobSpeedRetriever_r)

label(lblSpeedRetriever)
label(lblSpeedRetrieverDoIt)
label(lblSpeedRetrieverSkip)
label(lblSpeedRetrieverRet)

label(bEnableAttackSpeedScaling)
label(bEnableCompanionAttackSpeedScaling)
label(fAttackSpeedScale)
registersymbol(bEnableAttackSpeedScaling)
registersymbol(bEnableCompanionAttackSpeedScaling)
registersymbol(fAttackSpeedScale)

label(fAttackSpeedTemp)
registersymbol(fAttackSpeedTemp)

label(aobItemPointerGrabber_r)
registersymbol(aobItemPointerGrabber_r)

label(lblItemPointerGrabber)
label(lblItemPointerGrabberSkip)
label(lblItemPointerGrabberRet)
label(lblItemPointerGrabberMachineParts)

label(pMachineParts)
registersymbol(pMachineParts)

label(aobItemDemystifier_r)
registersymbol(aobItemDemystifier_r)

label(lblItemDemystifier)
label(lblItemDemystifierSkip)
label(lblItemDemystifierRet)

label(bEnableItemDemystifier)
registersymbol(bEnableItemDemystifier)

label(aobEnchantmentScanner_r)
registersymbol(aobEnchantmentScanner_r)

label(lblEnchantmentScanner)
label(lblEnchantmentScannerSkip)
label(lblEnchantmentScannerRet)

label(bEnableEnchantmentConverter)
registersymbol(bEnableEnchantmentConverter)

label(aobEnchantAppraiser_r)
registersymbol(aobEnchantAppraiser_r)

label(lblEnchantAppraiser)
label(lblEnchantAppraiserSkip)
label(lblEnchantAppraiserRet)

label(bEnableEnchantmentDiscount)
registersymbol(bEnableEnchantmentDiscount)

newmem:
bEnableEnchantmentConverter:
dd 1
bEnableEnchantmentDiscount:
dd 1
bEnableItemDemystifier:
dd 0
bEnableItemStacker:
dd 1
iItemStackerAmount:
dd (int)10
bEnableGodMode:
dd 1
bEnableInfiniteMana:
dd 1
bEnableXPGainMultiplier:
dd 1
fXPGainMultiplier:
dd (float)2.5
bEnableInstantShopping:
dd 1
bEnableInstantTricks:
dd 1
iTrickDelay:
dd (int)250
bEnableInstantUnlock:
dd 0
bEnableOutputDamageScaling:
dd 0
bEnableCompanionOutputDamageScaling:
dd 0
fOutputDamageScale:
dd (float)1.75
bEnableAttackSpeedScaling:
dd 0
bEnableCompanionAttackSpeedScaling:
dd 0
fAttackSpeedScale:
dd (float)1.5

lblPlayerPointerGrabber:
mov dword ptr [pPlayerData],ebx
mov ebx,[ebx+00000684]
jmp lblPlayerPointerGrabberRet
pPlayerData:
dd 0

lblCompanionPointerGrabber:
mov ecx,[edi+0000068C]
mov dword ptr [pCompanionData],edi
jmp lblCompanionPointerGrabberRet
pCompanionData:
dd 0
fTemp:
dd 0

lblXPGainMultiplier:
cmp dword ptr [bEnableXPGainMultiplier],1
jne short lblXPGainMultiplierSkip
fild dword ptr [ebp+08]
fmul dword ptr [fXPGainMultiplier]
fistp dword ptr [fXPTemp]
mov edx,[fXPTemp]
lblXPGainMultiplierSkip:
add [esi+0000068C],edx
jmp lblXPGainMultiplierRet
fXPTemp:
dd 0

lblItemStacker:
cmp dword ptr [bEnableItemStacker],1
jne short lblItemStackerSkip
pushad
push 46 // F key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblItemStackerSkip
mov edi,[eax+34]
add edi,[iItemStackerAmount]
mov dword ptr [eax+34],edi
lblItemStackerSkip:
mov edi,[eax+34]
mov eax,[eax+000000B0]
jmp lblItemStackerRet

lblTimerSetter:
cmp dword ptr [bEnableInstantShopping],1
jne short lblTimerSetterSkip
cmp ebx,8
jne short lblTimerSetterSkip
cmp dword ptr [pCompanionData],esi
jne short lblTimerSetterSkip
push eax
fcomp dword ptr [fConstantHalf]
fstsw ax
sahf
pop eax
jg short lblTimerSetterSkip
fstp st(0)
fld dword ptr [fConstantHalf]
lblTimerSetterSkip:
fstp dword ptr [esi+ebx*8+0000040C]
jmp lblTimerSetterRet
fConstantHalf:
dd (float)0.5

lblTrickTimerStarter:
cmp dword ptr [bEnableInstantTricks],1
jne short lblTrickTimerStarterSkip
cmp dword ptr [pPlayerData],edi
jne short lblTrickTimerStarterSkip
fild dword ptr [iTrickDelay]
fstp dword ptr [ecx+34]
ret
lblTrickTimerStarterSkip:
push ebp
mov ebp,esp
sub esp,18
jmp lblTrickTimerStarterRet

lblGameDataPointerGetter:
push eax
mov eax,[esi+178]
mov dword ptr [pGameData],eax
pop eax
cmp byte ptr [esi+00000120],00
jmp lblGameDataPointerGetterRet
pGameData:
dd 0

lblUnlockTester:
cmp dword ptr [bEnableInstantUnlock],1
jne short lblUnlockTesterSkip
mov dword ptr [esi+2C],eax
lblUnlockTesterSkip:
xor ecx,ecx
cmp eax,[esi+2C]
jmp lblUnlockTesterRet

lblMinRetriever:
cmp dword ptr [bEnableOutputDamageScaling],1
jne short lblMinRetrieverSkip
mov esi,[pPlayerData]
add esi,6a4
cmp dword ptr [esi],edi
je short lblMinRetrieverDoIt
cmp dword ptr [esi+4],edi
je short lblMinRetrieverDoIt
cmp dword ptr [bEnableCompanionOutputDamageScaling],1
jne short lblMinRetrieverSkip
mov esi,[pCompanionData]
add esi,6a4
cmp dword ptr [esi],edi
je short lblMinRetrieverDoIt
cmp dword ptr [esi+4],edi
je short lblMinRetrieverDoIt
jmp short lblMinRetrieverSkip
lblMinRetrieverDoIt:
fmul dword ptr [fOutputDamageScale]
lblMinRetrieverSkip:
mov esi,[ebp+08]
push ebx
fstp dword ptr [esi]
jmp lblMinRetrieverRet

lblMaxRetriever:
cmp dword ptr [bEnableOutputDamageScaling],1
jne short lblMaxRetrieverSkip
mov esi,[pPlayerData]
add esi,6a4
cmp dword ptr [esi],edi
je short lblMaxRetrieverDoIt
cmp dword ptr [esi+4],edi
je short lblMaxRetrieverDoIt
cmp dword ptr [bEnableCompanionOutputDamageScaling],1
jne short lblMaxRetrieverSkip
mov esi,[pCompanionData]
add esi,6a4
cmp dword ptr [esi],edi
je short lblMaxRetrieverDoIt
cmp dword ptr [esi+4],edi
je short lblMaxRetrieverDoIt
jmp short lblMaxRetrieverSkip
lblMaxRetrieverDoIt:
fmul dword ptr [fOutputDamageScale]
lblMaxRetrieverSkip:
mov eax,[ebp+0C]
fstp dword ptr [eax]
jmp lblMaxRetrieverRet

lblHealthTester:
cmp dword ptr [bEnableGodMode],1
jne short lblHealthTesterSkip
cmp dword ptr [pPlayerData],esi
je short lblHealthTesterDoIt
cmp dword ptr [pCompanionData],esi
je short lblHealthTesterDoIt
jmp short lblHealthTesterSkip
lblHealthTesterDoIt:
fild dword ptr [esi+364]
fstp dword ptr [esi+358]
lblHealthTesterSkip:
fcomp dword ptr [esi+00000358]
jmp lblHealthTesterRet

lblManaTester:
cmp dword ptr [bEnableInfiniteMana],1
jne short lblManaTesterSkip
lblManaTesterDoIt:
fild dword ptr [esi+a2c]
fstp dword ptr [esi+6f4]
lblManaTesterSkip:
fcomp dword ptr [esi+000006F4]
jmp lblManaTesterRet

lblSpeedRetriever:
mov edx,[ecx]
push eax
cmp dword ptr [bEnableAttackSpeedScaling],1
jne short lblSpeedRetrieverSkip
mov eax,[pPlayerData]
add eax,6a4
cmp dword ptr [eax],ebx
je short lblSpeedRetrieverDoIt
cmp dword ptr [eax+4],ebx
je short lblSpeedRetrieverDoIt
cmp dword ptr [bEnableCompanionAttackSpeedScaling],1
jne short lblSpeedRetrieverSkip
mov eax,[pCompanionData]
add eax,6a4
cmp dword ptr [eax],ebx
je short lblSpeedRetrieverDoIt
cmp dword ptr [eax+4],ebx
je short lblSpeedRetrieverDoIt
jmp short lblSpeedRetrieverSkip
lblSpeedRetrieverDoIt:
fild dword ptr [ecx]
fmul dword ptr [fAttackSpeedScale]
fistp dword ptr [fAttackSpeedTemp]
mov edx,[fAttackSpeedTemp]
lblSpeedRetrieverSkip:
pop eax
mov [ebp-10],edx
jmp lblSpeedRetrieverRet
fAttackSpeedTemp:
dd 0

lblItemPointerGrabber:
mov ebx,[ecx+000000B0]
cmp [ebx],edi
jne short lblItemPointerGrabberSkip
pushfd
cmp edi,9052A20B
je short lblItemPointerGrabberMachineParts
popfd
lblItemPointerGrabberSkip:
jmp lblItemPointerGrabberRet
lblItemPointerGrabberMachineParts:
mov dword ptr [pMachineParts],ecx
popfd
jmp lblItemPointerGrabberRet
pMachineParts:
dd 0

lblItemDemystifier:
mov ebx,[ebp-10]
cmp dword ptr [bEnableItemDemystifier],1
jne short lblItemDemystifierSkip
mov byte ptr [ebx+45],1
lblItemDemystifierSkip:
cmp byte ptr [ebx+46],00
jmp lblItemDemystifierRet

lblEnchantmentScanner:
mov eax,[ecx+edi+24]
cmp dword ptr [bEnableEnchantmentConverter],1
jne short lblEnchantmentScannerSkip
cmp eax,4
jne short lblEnchantmentScannerSkip
shr eax,1
mov dword ptr [ecx+edi+24],eax
lblEnchantmentScannerSkip:
test eax,eax
jmp lblEnchantmentScannerRet

lblEnchantAppraiser:
cmp dword ptr [bEnableEnchantmentDiscount],1
jne short lblEnchantAppraiserSkip
xor eax,eax
inc eax
xor esi,esi
jmp lblEnchantAppraiserRet
lblEnchantAppraiserSkip:
imul esi,esi,190
jmp lblEnchantAppraiserRet

aobEnchantAppraiser:
aobEnchantAppraiser_r:
jmp lblEnchantAppraiser
nop
lblEnchantAppraiserRet:

aobEnchantmentScanner:
aobEnchantmentScanner_r:
jmp lblEnchantmentScanner
nop
lblEnchantmentScannerRet:

aobItemDemystifier:
aobItemDemystifier_r:
jmp lblItemDemystifier
nop
nop
lblItemDemystifierRet:

aobItemPointerGrabber:
aobItemPointerGrabber_r:
jmp lblItemPointerGrabber
nop
nop
nop
lblItemPointerGrabberRet:

aobSpeedRetriever:
aobSpeedRetriever_r:
jmp lblSpeedRetriever
lblSpeedRetrieverRet:

aobManaTester:
aobManaTester_r:
jmp lblManaTester
nop
lblManaTesterRet:

aobHealthTester:
aobHealthTester_r:
jmp lblHealthTester
nop
lblHealthTesterRet:

aobMaxRetriever:
aobMaxRetriever_r:
jmp lblMaxRetriever
lblMaxRetrieverRet:

aobMinRetriever:
aobMinRetriever_r:
jmp lblMinRetriever
nop
lblMinRetrieverRet:

aobUnlockTester:
aobUnlockTester_r:
jmp lblUnlockTester
lblUnlockTesterRet:

aobGameDataPointerGetter:
aobGameDataPointerGetter_r:
jmp lblGameDataPointerGetter
nop
nop
lblGameDataPointerGetterRet:

aobTrickTimerStarter:
aobTrickTimerStarter_r:
jmp lblTrickTimerStarter
nop
lblTrickTimerStarterRet:

aobTimerSetter:
aobTimerSetter_r:
jmp lblTimerSetter
nop
nop
lblTimerSetterRet:

aobItemStacker:
aobItemStacker_r:
jmp lblItemStacker
nop
nop
nop
nop
lblItemStackerRet:

aobXPGainMultiplier:
aobXPGainMultiplier_r:
jmp lblXPGainMultiplier
nop
lblXPGainMultiplierRet:

aobPlayerPointerGrabber:
aobPlayerPointerGrabber_r:
jmp lblPlayerPointerGrabber
nop
lblPlayerPointerGrabberRet:

aobCompanionPointerGrabber:
aobCompanionPointerGrabber_r:
jmp lblCompanionPointerGrabber
nop
lblCompanionPointerGrabberRet:

[DISABLE]
aobPlayerPointerGrabber_r:
db 8B 9B 84 06 00 00

aobCompanionPointerGrabber_r:
db 8B 8F 8C 06 00 00

unregistersymbol(aobPlayerPointerGrabber_r)
unregistersymbol(aobCompanionPointerGrabber_r)

unregistersymbol(pPlayerData)
unregistersymbol(pCompanionData)
unregistersymbol(fTemp)

aobXPGainMultiplier_r:
db 01 96 8C 06 00 00

unregistersymbol(aobXPGainMultiplier_r)

unregistersymbol(bEnableXPGainMultiplier)
unregistersymbol(fXPGainMultiplier)

unregistersymbol(fXPTemp)

aobItemStacker_r:
db 8B 78 34 8B 80 B0 00 00 00

unregistersymbol(aobItemStacker_r)

unregistersymbol(bEnableItemStacker)
unregistersymbol(iItemStackerAmount)

aobTimerSetter_r:
db D9 9C DE 0C 04 00 00

unregistersymbol(aobTimerSetter_r)

unregistersymbol(bEnableInstantShopping)

unregistersymbol(fConstantHalf)

aobTrickTimerStarter_r:
db 55 8B EC 83 EC 18

aobGameDataPointerGetter_r:
db 80 BE 20 01 00 00 00

unregistersymbol(aobGameDataPointerGetter_r)

unregistersymbol(pGameData)

unregistersymbol(aobTrickTimerStarter_r)

unregistersymbol(bEnableInstantTricks)

unregistersymbol(iTrickDelay)

aobUnlockTester_r:
db 33 C9 3B 46 2C

unregistersymbol(aobUnlockTester_r)

unregistersymbol(bEnableInstantUnlock)

aobMaxRetriever_r:
db 8B 45 10 3B C3

unregistersymbol(aobMaxRetriever_r)

aobMinRetriever_r:
db 8B 75 08 53 D9 1E

unregistersymbol(aobMinRetriever_r)

aobMaxRetriever_r:
db 8B 45 0C D9 18

unregistersymbol(aobMaxRetriever_r)

unregistersymbol(bEnableOutputDamageScaling)
unregistersymbol(bEnableCompanionOutputDamageScaling)
unregistersymbol(fOutputDamageScale)

aobHealthTester_r:
db D8 9E 58 03 00 00

unregistersymbol(aobHealthTester_r)

unregistersymbol(bEnableGodMode)

aobManaTester_r:
db D8 9E F4 06 00 00

unregistersymbol(aobManaTester_r)

unregistersymbol(bEnableInfiniteMana)

aobSpeedRetriever_r:
db 8B 11 89 55 F0

unregistersymbol(aobSpeedRetriever_r)

unregistersymbol(bEnableAttackSpeedScaling)
unregistersymbol(bEnableCompanionAttackSpeedScaling)
unregistersymbol(fAttackSpeedScale)

unregistersymbol(fAttackSpeedTemp)

aobItemPointerGrabber_r:
db 8B 99 B0 00 00 00 39 3B

unregistersymbol(aobItemPointerGrabber_r)

unregistersymbol(pMachineParts)

aobItemDemystifier_r:
db 8B 5D F0 80 7B 46 00

unregistersymbol(aobItemDemystifier_r)

unregistersymbol(bEnableItemDemystifier)

aobEnchantmentScanner_r:
db 8B 44 39 24 85 C0

unregistersymbol(aobEnchantmentScanner_r)

unregistersymbol(bEnableEnchantmentConverter)

aobEnchantAppraiser_r:
db 69 F6 90 01 00 00

unregistersymbol(aobEnchantAppraiser_r)

unregistersymbol(bEnableEnchantmentDiscount)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>980</ID>
          <Description>"iGold"</Description>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGameData</Address>
          <Offsets>
            <Offset>92C</Offset>
            <Offset>154</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>981</ID>
          <Description>"iPerkReputation"</Description>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGameData</Address>
          <Offsets>
            <Offset>930</Offset>
            <Offset>154</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>982</ID>
          <Description>"iPerkPoints"</Description>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pGameData</Address>
          <Offsets>
            <Offset>934</Offset>
            <Offset>154</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>983</ID>
          <Description>"iMachineParts"</Description>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pMachineParts</Address>
          <Offsets>
            <Offset>34</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>984</ID>
          <Description>"bEnableEnchantmentConverter"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableEnchantmentConverter</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>985</ID>
          <Description>"bEnableEnchantmentDiscount"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableEnchantmentDiscount</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>986</ID>
          <Description>"bEnableItemDemystifier"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableItemDemystifier</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>987</ID>
          <Description>"bEnableItemStacker (hold F key)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableItemStacker</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>988</ID>
              <Description>"iItemStackerAmount"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iItemStackerAmount</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>989</ID>
          <Description>"bEnableGodMode"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableGodMode</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>990</ID>
          <Description>"bEnableInfiniteMana"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteMana</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>991</ID>
          <Description>"bEnableXPGainMultiplier"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableXPGainMultiplier</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>992</ID>
              <Description>"fXPGainMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fXPGainMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>993</ID>
          <Description>"bEnableInstantShopping"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInstantShopping</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>994</ID>
          <Description>"bEnableInstantTricks"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInstantTricks</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>995</ID>
              <Description>"iTrickDelay"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iTrickDelay</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>996</ID>
          <Description>"bEnableInstantUnlock"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInstantUnlock</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>997</ID>
          <Description>"bEnableOutputDamageScaling"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableOutputDamageScaling</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>998</ID>
              <Description>"bEnableCompanionOutputDamageScaling"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableCompanionOutputDamageScaling</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>999</ID>
              <Description>"fOutputDamageScale"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fOutputDamageScale</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1000</ID>
          <Description>"bEnableAttackSpeedScaling"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableAttackSpeedScaling</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>1001</ID>
              <Description>"bEnableCompanionAttackSpeedScaling"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableCompanionAttackSpeedScaling</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1002</ID>
              <Description>"fAttackSpeedScale"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fAttackSpeedScale</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1003</ID>
          <Description>"Player stats (group)"</Description>
          <Options moHideChildren="1"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1004</ID>
              <Description>"fCurrentHP"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>358</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1005</ID>
              <Description>"fCurrentMana"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>6F4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1006</ID>
              <Description>"iCurrentRage"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>6F8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1007</ID>
              <Description>"fMaxHP"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>364</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1008</ID>
              <Description>"iMaxRage (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>670</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1009</ID>
              <Description>"iBody (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>674</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1010</ID>
              <Description>"iDexterity (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>678</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1011</ID>
              <Description>"iWillpower (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>67C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1012</ID>
              <Description>"iLuck (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>680</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1013</ID>
              <Description>"iSkillPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>684</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1014</ID>
              <Description>"iAbiiltyPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>688</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1015</ID>
              <Description>"iXPPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>68C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1016</ID>
              <Description>"iXPLevel"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayerData</Address>
              <Offsets>
                <Offset>690</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1017</ID>
          <Description>"Companion stats (group)"</Description>
          <Options moHideChildren="1"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1018</ID>
              <Description>"fCurrentHP"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>358</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1019</ID>
              <Description>"fCurrentMana"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>6F4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1020</ID>
              <Description>"iCurrentRage"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>6F8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1021</ID>
              <Description>"fMaxHP"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>364</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1022</ID>
              <Description>"iMaxRage (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>670</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1023</ID>
              <Description>"iBody (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>674</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1024</ID>
              <Description>"iDexterity (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>678</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1025</ID>
              <Description>"iWillpower (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>67C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1026</ID>
              <Description>"iLuck (base)"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>680</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1027</ID>
              <Description>"iSkillPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>684</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1028</ID>
              <Description>"iAbiiltyPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>688</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1029</ID>
              <Description>"iXPPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>68C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>1030</ID>
              <Description>"iXPLevel"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCompanionData</Address>
              <Offsets>
                <Offset>690</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>620</ID>
      <Description>"VH x86 update v1.1.23, Camera-only (INS/PGUP, HOME/DEL)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobCameraPointerGrabber,D9 86 E4 02 00 00 89 4E 34)
aobscan(aobCameraPositioner,D9 86 F0 02 00 00 8D 86 E8 02 00 00)

alloc(newmem,4096)

label(aobCameraPointerGrabber_r)
registersymbol(aobCameraPointerGrabber_r)

label(lblCamPtrGrabber)
label(lblCamPtrGrabberReturn)

label(pCamera)
label(fDesiredMinHeight)
label(fDesiredMaxHeight)
registersymbol(pCamera)
registersymbol(fDesiredMinHeight)
registersymbol(fDesiredMaxHeight)

label(aobCameraPositioner_r)
registersymbol(aobCameraPositioner_r)

label(lblCameraPositioner)
label(lblCameraPositionerSkip)
label(lblCameraPositionerRet)
label(lblCameraPositionerOrbitLeft)
label(lblCameraPositionerOrbitRight)
label(lblCameraPositionerOrbitUp)
label(lblCameraPositionerOrbitDown)

label(fCameraSpeedHorizontal)
label(fCameraSpeedVertical)
registersymbol(fCameraSpeedHorizontal)
registersymbol(fCameraSpeedVertical)

newmem:
fDesiredMinHeight:
dd (float)50.0
fDesiredMaxHeight:
dd (float)360.0
fCameraSpeedHorizontal:
dd (float)0.0025
fCameraSpeedVertical:
dd (float)0.005

lblCamPtrGrabber:
push eax
mov eax,[fDesiredMinHeight]
mov dword ptr [esi+2fc],eax
mov eax,[fDesiredMaxHeight]
mov dword ptr [esi+2f8],eax
pop eax
fld dword ptr [esi+000002E4] // Original code
mov dword ptr [pCamera],esi
jmp lblCamPtrGrabberReturn
pCamera:
dd 0

lblCameraPositioner:
pushad
push 2D // INS key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
je short lblCameraPositionerOrbitLeft
push 21 // PGUP key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
je short lblCameraPositionerOrbitRight
push 24 // HOME key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
je short lblCameraPositionerOrbitUp
push 23 // END key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
je short lblCameraPositionerOrbitDown
popad
lblCameraPositionerSkip:
fld dword ptr [esi+000002F0] // Original code
jmp lblCameraPositionerRet
lblCameraPositionerOrbitLeft:
popad
fld dword ptr [esi+2e4]
fsub dword ptr [fCameraSpeedHorizontal]
fstp dword ptr [esi+2e4]
jmp short lblCameraPositionerSkip
lblCameraPositionerOrbitRight:
popad
fld dword ptr [esi+2e4]
fadd dword ptr [fCameraSpeedHorizontal]
fstp dword ptr [esi+2e4]
jmp short lblCameraPositionerSkip
lblCameraPositionerOrbitUp:
popad
fld dword ptr [esi+2f0]
fsub dword ptr [fCameraSpeedVertical]
fstp dword ptr [esi+2f0]
jmp short lblCameraPositionerSkip
lblCameraPositionerOrbitDown:
popad
fld dword ptr [esi+2f0]
fadd dword ptr [fCameraSpeedVertical]
fstp dword ptr [esi+2f0]
jmp short lblCameraPositionerSkip

aobCameraPointerGrabber:
aobCameraPointerGrabber_r:
jmp lblCamPtrGrabber
nop
lblCamPtrGrabberReturn:

aobCameraPositioner:
aobCameraPositioner_r:
jmp lblCameraPositioner
nop
lblCameraPositionerRet:

[DISABLE]
aobCameraPointerGrabber_r:
//Alt: fld dword ptr [esi+000002E4]
db D9 86 E4 02 00 00

unregistersymbol(aobCameraPointerGrabber_r)

unregistersymbol(pCamera)
unregistersymbol(fDesiredMinHeight)
unregistersymbol(fDesiredMaxHeight)

aobCameraPositioner_r:
//Alt: fld dword ptr [esi+000002F0]
db D9 86 F0 02 00 00

unregistersymbol(aobCameraPositioner_r)

unregistersymbol(fCameraSpeedHorizontal)
unregistersymbol(fCameraSpeedVertical)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>621</ID>
          <Description>"fDesiredMinHeight"</Description>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>fDesiredMinHeight</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>622</ID>
          <Description>"fDesiredMaxHeight"</Description>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>fDesiredMaxHeight</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>623</ID>
          <Description>"fCameraSpeedHorizontal"</Description>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>fCameraSpeedHorizontal</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>624</ID>
          <Description>"fCameraSpeedVertical"</Description>
          <Color>FF0000</Color>
          <VariableType>Float</VariableType>
          <Address>fCameraSpeedVertical</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>625</ID>
          <Description>"fDeclination"</Description>
          <Color>808080</Color>
          <VariableType>Float</VariableType>
          <Address>pCamera</Address>
          <Offsets>
            <Offset>2F0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>626</ID>
          <Description>"fRotation"</Description>
          <Color>808080</Color>
          <VariableType>Float</VariableType>
          <Address>pCamera</Address>
          <Offsets>
            <Offset>2E4</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>958</ID>
      <Description>"Shopping Enabler script variants"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>938</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - English"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)127
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'S'
dw 'e'
dw 'n'
dw 'd'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>939</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>940</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Espanol"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)151
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'E'
dw 'n'
dw 'v'
dw 'Ã­'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>941</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>942</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - French"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)158
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'E'
dw 'n'
dw 'v'
dw 'o'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>943</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>944</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - German"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)164
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'S'
dw 'c'
dw 'h'
dw 'i'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>945</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>946</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Hungarian"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)165
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'E'
dw 'l'
dw 'k'
dw 'Ã¼'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>947</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>948</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Italian"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)162
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'M'
dw 'a'
dw 'n'
dw 'd'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>949</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>950</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Polish"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)139
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'W'
dw 'y'
dw 's'
dw 'y'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>951</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>954</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Portugese"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)149
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
dw 'E'
dw 'n'
dw 'v'
dw 'Ã­'

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>955</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>956</ID>
          <Description>"VH x86 update v1.1.23, Shopping enabler - Russian"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscan(aobHintScanner,8B 8F 60 02 00 00 8B 01 8B 50 68)

alloc(newmem,2048)

label(aobHintScanner_r)
registersymbol(aobHintScanner_r)

label(lblHintScanner)
label(lblHintScannerSkip)
label(lblHintScannerRet)

label(bEnableShoppingAnywhere)
registersymbol(bEnableShoppingAnywhere)

label(sSendToShoppingHintTextAsUnicode)
registersymbol(sSendToShoppingHintTextAsUnicode)

newmem:
bEnableShoppingAnywhere:
dd 1

lblHintScanner:
push eax
push ebx
mov ecx,[edi+00000260]
cmp dword ptr [bEnableShoppingAnywhere],1
jne short lblHintScannerSkip
cmp dword ptr [ecx+214],(int)147
jne short lblHintScannerSkip
mov ebx,[ecx+210]
test ebx,ebx
jz short lblHintScannerSkip
mov eax,[ebx]
cmp dword ptr [sSendToShoppingHintTextAsUnicode],eax
jne short lblHintScannerSkip
mov eax,[ebx+4]
cmp dword ptr [sSendToShoppingHintTextAsUnicode+4],eax
jne short lblHintScannerSkip
mov eax,[edi+194]
test edi,edi
jz short lblHintScannerSkip
mov byte ptr [eax+11],1
lblHintScannerSkip:
pop ebx
pop eax
jmp lblHintScannerRet
sSendToShoppingHintTextAsUnicode:
db d0 93 d1 82 d0 bf d1 80

aobHintScanner:
aobHintScanner_r:
jmp lblHintScanner
nop
lblHintScannerRet:

[DISABLE]
aobHintScanner_r:
db 8B 8F 60 02 00 00

unregistersymbol(aobHintScanner_r)

unregistersymbol(bEnableShoppingAnywhere)

unregistersymbol(sSendToShoppingHintTextAsUnicode)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>957</ID>
              <Description>"bEnableShoppingAnywhere"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bEnableShoppingAnywhere</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
