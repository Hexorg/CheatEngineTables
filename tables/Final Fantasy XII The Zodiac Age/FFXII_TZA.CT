<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Final Fantasy XII The Zodiac Age"</Description>
      <Options moHideChildren="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Enable"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local al = getAddressList()

-- Load Items Dropdown List
local ItemList = {
"0000:Potion",
"0001:Hi-Potion",
"0002:X-Potion",
"0003:Ether",
"0004:Hi-Ether",
"0005:Elixir",
"0006:Phoenix Down",
"0007:Gold Needle",
"0008:Echo Herbs",
"0009:Antidote",
"000A:Eye Drops",
"000B:Prince's Kiss",
"000C:Handkerchief",
"000D:Chronos Tear",
"000E:Nu Khai Sand",
"000F:Serum",
"0010:Remedy",
"0011:Soleil Fang",
"0012:Rime Fang",
"0013:Lightning Fang",
"0014:Bacchus's Wine",
"0015:Megalixir",
"0016:Baltoro Seed",
"0017:Domain Calvados",
"0018:Dark Energy",
"0019:Meteorite (1)",
"001A:Meteorite (2)",
"001B:Meteorite (3)",
"001C:Meteorite (4)",
"002A:Reverse Mote",
"002B:Dark Mote",
"002C:Aero Mote",
"002D:Aquara Mote",
"002E:Bio Mote",
"002F:Shock Mote",
"0030:Holy Mote",
"0031:Scathe Mote",
"0032:Balance Mote",
"0033:Gravity Mote",
"0034:Cura Mote",
"0035:Dispel Mote",
"0036:Aeroga Mote",
"0037:Warp Mote",
"0038:Bubble Mote",
"0039:Hastega Mote",
"003A:Reflectga Mote",
"003B:Vanishga Mote",
"003C:Float Mote",
"003D:Eksir Berries",
"003E:Dark Matter",
"003F:Knot of Rust",
"=======WEAPONS=======",
"1001:Broadsword",
"1002:Longsword",
"1003:Iron Sword",
"1004:Zwill Blade",
"1005:Ancient Sword",
"1006:Blood Sword",
"1007:Lohengrin",
"1008:Flametongue",
"1009:Demonsbane",
"100A:Icebrand",
"100B:Platinum Sword",
"100C:Bastard Sword",
"100D:Diamond Sword",
"100E:Runeblade",
"100F:Deathbringer",
"1010:Stoneblade",
"1011:Durandal",
"1012:Claymore",
"1013:Defender",
"1014:Save the Queen",
"1015:Ragnarok",
"1016:Ultima Blade",
"1017:Excalibur",
"1018:Tournesol",
"1019:Kotetsu",
"101A:Osafune",
"101B:Kogarasumaru",
"101C:Magoroku",
"101D:Murasame",
"101E:Kiku-ichimonji",
"101F:Yakei",
"1020:Ame-no-Murakumo",
"1021:Muramasa",
"1022:Masamune",
"1023:Ashura",
"1024:Sakura-saezuri",
"1025:Kagenui",
"1026:Koga Blade",
"1027:Iga Blade",
"1028:Orochi",
"1029:Yagyu Darkblade",
"102A:Javelin",
"102B:Spear",
"102C:Partisan",
"102D:Heavy Lance",
"102E:Storm Spear",
"102F:Obelisk",
"1030:Halberd",
"1031:Trident",
"1032:Holy Lance",
"1033:Gungnir",
"1034:Dragon Whisker",
"1035:Zodiac Spear",
"1036:Oaken Pole",
"1037:Cypress Pole",
"1038:Battle Bamboo",
"1039:Musk Stick",
"103A:Iron Pole",
"103B:Six-fluted Pole",
"103C:Gokuu Pole",
"103D:Zephyr Pole",
"103E:Ivory Pole",
"103F:Sweep",
"1040:Eight-fluted Pole",
"1041:Whale Whisker",
"1042:Shortbow",
"1043:Silver Bow",
"1044:Aevis Killer",
"1045:Killer Bow",
"1046:Longbow",
"1047:Elfin Bow",
"1048:Loxley Bow",
"1049:Giant Stonebow",
"104A:Burning Bow",
"104B:Traitor's Bow",
"104C:Yoichi Bow",
"104D:Perseus Bow",
"104E:Artemis Bow",
"104F:Sagittarius",
"1050:Bowgun",
"1051:Crossbow",
"1052:Paramina Crossbow",
"1053:Recurve Crossbow",
"1054:Hunting Crossbow",
"1055:Penetrator Crossbow",
"1056:Gastrophetes",
"1057:Altair",
"1058:Capella",
"1059:Vega",
"105A:Sirius",
"105B:Betelgeuse",
"105C:Ras Algethi",
"105D:Aldebaran",
"105E:Spica",
"105F:Antares",
"1060:Arcturus",
"1061:Fomalhaut",
"1062:Handaxe",
"1063:Broadaxe",
"1064:Slasher",
"1065:Hammerhead",
"1066:Francisca",
"1067:Greataxe",
"1068:Golden Axe",
"1069:Iron Hammer",
"106A:War Hammer",
"106B:Sledgehammer",
"106C:Morning Star",
"106D:Scorpion Tail",
"106E:Dagger",
"106F:Mage Masher",
"1070:Asssassin's Dagger",
"1071:Chopper",
"1072:Main Gauche",
"1073:Gladius",
"1074:Avenger",
"1075:Orichalcum Dirk",
"1076:Platinum Dagger",
"1077:Zwill Crossblade",
"1078:Shikari Nagasa",
"1079:Rod",
"107A:Serpent Rod",
"107B:Healing Rod",
"107C:Gaia Rod",
"107D:Power Rod",
"107E:Empyrean Rod",
"107F:Holy Rod",
"1080:Rod of Faith",
"1081:Oak Staff",
"1082:Cherry Staff",
"1083:Wizard's Staff",
"1084:Flame Staff",
"1085:Storm Staff",
"1086:Glacial Staff",
"1087:Golden Staff",
"1088:Judicer's Staff",
"1089:Cloud Staff",
"108A:Staff of the Magi",
"108B:Mace",
"108C:Bronze Mace",
"108D:Bhuj",
"108E:Miter",
"108F:Thorned Mace",
"1090:Chaos Mace",
"1091:Doom Mace",
"1092:Zeus Mace",
"1093:Grand Mace",
"1094:Gilt Measure",
"1095:Arc Scale",
"1096:Multiscale",
"1097:Cross Scale",
"1098:Caliper",
"1099:Euclid's Sextant",
"109A:Hornito",
"109B:Fumarole",
"109C:Tumulus",
"109D:Caldera",
"109E:Volcano",
"109F:Bonebreaker",
"10A0:Mythril Sword",
"10A1:Hero's Blade",
"10A2:Treaty Blade",
"10A3:Sword of Kings",
"10A4:Joyeuse",
"10A5:Chirijiraden",
"10A6:Nightmare",
"10A7:Flimsy Blade",
"10A8:Mythril Blade",
"10A9:Nightmare",
"10AA:Kumbha",
"10AB:Mesa",
"10AC:Mina",
"10AD:Wyrmhero Blade",
"10AE:Vrsabba",
"10AF:Bone of Byblos",
"10B0:Tula",
"10B1:Great Trango",
"10B2:Seitengrat",
"10B3:Reserve (Spear ATK PWR 61)",
"10B4:Reserve (Spear ATK PWR 65)",
"10B5:Reserve (Unarmed ATK PWR 63)",
"10B6:Reserve (Unarmed ATK PWR 80)",
"10B7:Reserve (Unarmed ATK PWR 83)",
"10B8:Reserve (Unarmed ATK PWR 145)",
"10B9:Reserve (Unarmed ATK PWR 62)",
"10BA:Reserve (Crossbow ATK PWR 73)",
"10BB:Reserve (Unarmed ATK PWR 155)",
"10BC:Reserve (Unarmed ATK PWR 103)",
"10BD:Reserve (Unarmed ATK PWR 97)",
"10BE:Reserve (Unarmed ATK PWR 147)",
"10BF:Reserve (Unarmed ATK PWR 201)",
"10C0:Karkata",
"10C1:Excalipur",
"10C2:Simha",
"10C3:Makara",
"10C4:Vrscika",
"10C5:Mithuna",
"10C6:Kanya",
"10C7:Dhanusha",
"=======ARMOR=======",
"10C8:Gendarme",
"10C9:Leather Shield",
"10CA:Buckler",
"10CB:Bronze Shield",
"10CC:Round Shield",
"10CD:Shell Shield",
"10CE:Golden Shield",
"10CF:Ice Shield",
"10D0:Flame Shield",
"10D1:Diamon Shield",
"10D2:Platinum Shield",
"10D3:Dragon Shield",
"10D4:Crystal Shield",
"10D5:Genji Shield",
"10D6:Kaiser Shield",
"10D7:Aegis Shield",
"10D8:Demon Shield",
"10D9:Venetian Shield",
"10DA:Zodiac Escutcheon",
"10DB:Ensanguined Shield",
"10DC:Leather Cap",
"10DD:Headgear",
"10DE:Headguard",
"10DF:Leather Headgear",
"10E0:Horned Hat",
"10E1:Balaclava",
"10E2:Soldier's Cap",
"10E3:Green Beret",
"10E4:Red Cap",
"10E5:Headband",
"10E6:Pirate Hat",
"10E7:Goggle Mask",
"10E8:Adamant Hat",
"10E9:Officer's Hat",
"10EA:Chakra Band",
"10EB:Thief's Cap",
"10EC:Gigas Hat",
"10ED:Chaperon",
"10EE:Crown of Laurels",
"10EF:Renewing Morion",
"10F0:Dueling Mask",
"10F1:Cotton Cap",
"10F2:Magick Curch",
"10F3:Pointy Hat",
"10F4:Topkapi Hat",
"10F5:Calot Hat",
"10F6:Wizard's Hat",
"10F7:Lambent Hat",
"10F8:Feathered Cap",
"10F9:Mage's Hat",
"10FA:Lamia's Tiara",
"10FB:Sorcerer's Hat",
"10FC:Black Cowl",
"10FD:Astrakhan Hat",
"10FE:Gaia Hat",
"10FF:Hypnocrown",
"1100:Gold Hairpin",
"1101:Celebrant's Miter",
"1102:Black Mask",
"1103:White Mask",
"1104:Golden Skullcap",
"1105:Circlet",
"1106:Leather Helm",
"1107:Bronze Helm",
"1108:Sallet",
"1109:Iron Helm",
"110A:Barbut",
"110B:Winged Helm",
"110C:Golden Helm",
"110D:Burgonet",
"110E:Close Helmet",
"110F:Bone Helm",
"1110:Diamond Helm",
"1111:Steel Mask",
"1112:Platinum Helm",
"1113:Giant's Helmet",
"1114:Dragon Helm",
"1115:Genji Helm",
"1116:Magepower Shishak",
"1117:Grand Helm",
"1118:Leather Clothing",
"1119:Chromed Leathers",
"111A:Leather Breastplate",
"111B:Bronze Chestplate",
"111C:Ringmail",
"111D:Windbreaker",
"111E:Heavy Coat",
"111F:Survival Vest",
"1120:Brigandine",
"1121:Jujitsu Gi",
"1122:Viking Coat",
"1123:Metal Jerkin",
"1124:Adamant Vest",
"1125:Barrel Coat",
"1126:Power Vest",
"1127:Ninja Gear",
"1128:Gigas Chestplate",
"1129:Minerva Bustier",
"112A:Rubber Suit",
"112B:Mirage Vest",
"112C:Brave Suit",
"112D:Cotton Shirt",
"112E:Light Woven Shirt",
"112F:Silken Shirt",
"1130:Kilimweave Shirt",
"1131:Shepherd's Bolero",
"1132:Wizard's Robes",
"1133:Chanter's Djellaba",
"1134:Traveler's Vestment",
"1135:Mage's Habit",
"1136:Enchanter's Habit",
"1137:Sorcerer's Habit",
"1138:Black Garb",
"1139:Carmagnole",
"113A:Maduin Gear",
"113B:Jade Gown",
"113C:Gaia Gear",
"113D:Cleric's Robes",
"113E:White Robes",
"113F:Black Robes",
"1140:Glimmering Robes",
"1141:Lordly Robes",
"1142:Leather Armor",
"1143:Bronze Armor",
"1144:Scale Armor",
"1145:Iron Armor",
"1146:Linen Cuirass",
"1147:Chainmail",
"1148:Golden Armor",
"1149:Shielded Armor",
"114A:Demon Mail",
"114B:Bone Mail",
"114C:Diamond Armor",
"114D:Mirror Mail",
"114E:Platinum Armor",
"114F:Carabineer Mail",
"1150:Dragon Mail",
"1151:Genji Armor",
"1152:Maximillian",
"1153:Grand Armor",
"=======ACCESSORIES=======",
"1154:Opal Ring",
"1155:Ruby Ring",
"1156:Tourmaline Ring",
"1157:Sage's Ring",
"1158:Ring of Renewal",
"1159:Agate Ring",
"115A:Bangle",
"115B:Orrachea Armlet",
"115C:Power Armlet",
"115D:Argyle Armlet",
"115E:Diamond Armlet",
"115F:Amber Armlet",
"1160:Berserker Bracers",
"1161:Magick Gloves",
"1162:Thief's Cuff's",
"1163:Blazer Gloves",
"1164:Genji Gloves",
"1165:Gauntlets",
"1166:Turtleshell Choker",
"1167:Nihopalaoa",
"1168:Embroidered Tippet",
"1169:Leather Gorget",
"116A:Jade Collar",
"116B:Steel Gorget",
"116C:Rose Corsage",
"116D:Pheasant Netsuke",
"116E:Indigo Pendant",
"116F:Golden Amulet",
"1170:Bowline Sash",
"1171:Firefly",
"1172:Sash",
"1173:Bubble Belt",
"1174:Cameo Belt",
"1175:Nishijin Belt",
"1176:Black Belt",
"1177:Battle Harness",
"1178:Germinas Boots",
"1179:Heremes Sandals",
"117A:Gillie Boots",
"117B:Steel Poleyns",
"117C:Winged Boots",
"117D:Quasimodo Boots",
"117E:Manufacted Nethicite",
"117F:Cat-ear Hood",
"1180:Fuzzy Miter",
"1181:Ribbon",
"1182:Goddess's Magicite",
"1183:Dawn Shard",
"=======AMMUNITION=======",
"1184:Onion Arrows",
"1185:Parallel Arrows",
"1186:Fiery Arrows",
"1187:Bamboo Arrows",
"1188:Lightning Arrows",
"1189:Assassin's Arrows",
"118A:Icecloud Arrows",
"118B:Artemis Arrows",
"118C:Onion Bolts",
"118D:Long Bolts",
"118E:Stone Bolts",
"118F:Lead Bolts",
"1190:Black Bolts",
"1191:Time Bolts",
"1192:Sapping Bolts",
"1193:Grand Bolts",
"1194:Onion Shot",
"1195:Silent Shot",
"1196:Aqua Shot",
"1197:Wyrmfire Shot",
"1198:Mud Shot",
"1199:Windslicer Shot",
"119A:Dark Shot",
"119B:Stone Shot",
"119C:Onion Bombs",
"119D:Poison Bombs",
"119E:Stun Bombs",
"119F:Oil Bombs",
"11A0:Chaos Bombs",
"11A1:Stink Bombs",
"11A2:Water Bombs",
"11A3:Castellanos",
"=======LOOT=======",
"2000:Teleport Stone",
"2020:Earth Stone",
"2021:Wind Stone",
"2022:Water Stone",
"2023:Fire Stone",
"2024:Ice Stone",
"2025:Storm Stone",
"2026:Holy Stone",
"2027:Dark Stone",
"2028:Earth Magicite",
"2029:Wind Magicite",
"202A:Water Magicite",
"202B:Fire Magicite",
"202C:Ice Magicite",
"202D:Stom Magicite",
"202E:Holy Magicite",
"202F:Dark Magicite",
"2030:Earth Crystal",
"2031:Wind Crystal",
"2032:Water Crystal",
"2033:Fire Crystal",
"2034:Ice Crystal",
"2035:Storm Crystal",
"2036:Holy Crystal",
"2037:Dark Crystal",
"2038:Aries Gem",
"2039:Taurus Gem",
"203A:Gemini Gem",
"203B:Cancer Gem",
"203C:Leo Gem",
"203D:Virgo Gem",
"203E:Libra Gem",
"203F:Scorpio Gem",
"2040:Sagittarius Gem",
"2041:Capricorn Gem",
"2042:Aquarius Gem",
"2043:Pisces Gem",
"2044:Salamand Halcyon",
"2045:Mardu Halcyon",
"2046:Leshach Halcyon",
"2047:Gnoma Halcyon",
"2048:Undin Halcyon",
"2049:Sylphi Halcyon",
"204A:Diakon Halcyon",
"204B:Leamonde Halcyon",
"204C:Arcana",
"204D:High Arcana",
"204E:Turtle Shell",
"204F:Aged Turtle Shell",
"2050:Ancient Turtle Shell",
"2051:Molting",
"2052:Iron Carapace",
"2053:Wyrm Capace",
"2054:Insect Husk",
"2055:Battlewyrm Carapace",
"2056:Destrier Barding",
"2057:Charger Barding",
"2058:Fish scale",
"2059:Yensa Scale",
"205A:Ichthon Scale",
"205B:Ring Wyrm Scale",
"205C:Drab Wool",
"205D:Braid wool",
"205E:Fine Wool",
"205F:Blood Wool",
"2060:Rat Pelt",
"2061:Snake Snik",
"2062:Tyrant Hide",
"2063:Quality Hide",
"2064:Beastlord Hide",
"2065:Tanned Hide",
"2066:Tanned Giantskin",
"2067:Tanned Tyrant Hide",
"2068:Prime Tanned Hide",
"2069:Wolf Pelt",
"206A:Coeurl Pelt",
"206B:Quality Pelt",
"206C:Prime Pelt",
"206D:Small feather",
"206E:Large Feather",
"206F:Chocobo Feather",
"2070:Giant Feather",
"2071:Bundle of Feathers",
"2072:Windslicer Pinion",
"2073:Horn",
"2074:Pointed Horn",
"2075:Solid Horn",
"2076:Bat Fang",
"2077:Crooked Fang",
"2078:Spiral Incisor",
"2079:Wyvern Fang",
"207A:Cactus Fruit",
"207B:Succulent Fruit",
"207C:Screamroot",
"207D:Malboro Vine",
"207E:Malboro Fruit",
"207F:Malboro Flower",
"2080:Bone Fragment",
"2081:Sturdy Bone",
"2082:Blood-darkened bone",
"2083:Lumber",
"2084:Quality Lumber",
"2085:Solid Stone",
"2086:Quality Stone",
"2087:Iron Scraps",
"2088:Iron Ore",
"2089:Green Liquid",
"208A:Yellow Liquid",
"208B:Silver Liquid",
"208C:Glass Jewel",
"208D:Sky jewel",
"208E:Demon Eyeball",
"208F:Demon Feather",
"2090:Demon Tail",
"2091:Grimoire Togail",
"2092:Grimoire Aidhed",
"2093:Bomb Ashes",
"2094:Bomb Shell",
"2095:Book of Orgain",
"2096:Book of Orgain-Cent",
"2097:Book of Orgain-Mille",
"2098:Foul Flesh",
"2099:Festering Flesh",
"209A:Maggoty Flesh",
"209B:Forbidden Flesh",
"209C:Feystone",
"209D:Pebble",
"209E:Broken Sword",
"209F:Broken greataxe",
"20A0:Broken Spear",
"20A1:Bent Staff",
"20A2:Moon Ring",
"20A3:Bundle of Needles",
"20A4:Coeurl Whisker",
"20A5:Mallet",
"20A6:Tattered Garment",
"20A7:Split Armor",
"20A8:Chimera Head",
"20A9:Rat Tail",
"20AA:Slaven Harness",
"20AB:Blood-stained Necklace",
"20AC:Destrier Mane",
"20AD:Wargod's Band",
"20AE:Soul of Thamasa",
"20AF:Beastlord Horn",
"20B0:Bampyr Fang",
"20B1:Great Serpent's Fang",
"20B2:Death's-Head",
"20B3:Ancient Bone",
"20B4:Wyrm Bone",
"20B5:Tyrant Bone",
"20B6:Mirror Scale",
"20B7:Emperor Scale",
"20B8:Mythril",
"20B9:Adamantite",
"20BA:Scarletite",
"20BB:Damascus Steel",
"20BC:Orichalcum",
"20BD:Mystletainn",
"20BE:Einherjarium",
"20BF:Electrum",
"20C0:Dorsal Fin",
"20C1:Yensa Fin",
"20C2:Ring Wyrm Liver",
"20C3:Eye of the Hawk",
"20C4:Serpent Eye",
"20C5:Ambrosia",
"20C6:Foul Liquid",
"20C7:Putrid Liquid",
"20C8:Caramel",
"20C9:Slime Oil",
"20CA:Unpurified Ether",
"20CB:Demon Drink",
"20CC:Death powder",
"20CD:Soul Powder",
"20CE:Zombie Powder",
"20CF:Snowfly",
"20D0:Corpse Fly",
"20D1:Bat Wing",
"20D2:Wyvern Wing",
"20D3:Bomb Fragment",
"20D4:Throat Wolf Blood",
"20D5:Frogspawn",
"20D6:Frog Oil",
"20D7:Behemoth Steak",
"20D8:Gysahl Greens",
"20D9:White Incense",
"20DA:Antarctic Wind",
"20DB:Arctic Wind",
"20DC:Wrath of the Gods",
"20DD:Charged Gizzard",
"20DE:Lifewick",
"20DF:Ketu Board",
"20E0:Magick Lamp",
"20E1:Hell-Gate's Flame",
"20E2:Sickle-Blade",
"20E3:Stardust",
"20E4:Moondust",
"20E5:Rainbow Egg",
"20E6:Four-leaf Clover",
"20E7:Gimble Stalk",
"20E8:Onion",
"20E9:Jack-o'-Lantern",
"20EA:Tomato Stalk",
"20EB:Demons Sigh",
"20EC:Omega Badge",
"20ED:Empyreal Soul",
"20EE:Serpentarius",
"20EF:Gemsteel",
"20F0:Centurio Hero's Badge",
"20F1:Horakhty's Flame",
"20F2:Phobos Glaze",
"20F3:Deimos Clay",
"20F4:Godslayer's Badge",
"20F5:Lu Shang's Badge",
"2100:Empty Bottle",
"2101:Common Fish",
"2102:Delicious Fish",
"2103:Nebra Succulent",
"2104:Peach Tuft",
"2105:Green Tuft",
"2106:Orange Tuft",
"2107:Brown Tuft",
"2108:White Tuft",
"2109:Valeblossom Dew",
"210A:Semclam Shell",
"210B:Nebralim",
"210C:Great Serpentskin",
"210D:Bhujerban Madhu",
"2112:Sandalwood Chop",
"2113:Pinewood Chop",
"2114:Small Package",
"2115:Dewdrop Pebble",
"2116:Black Orb",
"2117:Jaya Stick",
"==========MAGIC============",
"3000:Cure",
"3001:Blindna",
"3002:Vox",
"3003:Poisona",
"3004:Cura",
"3005:Raise",
"3006:Curaga",
"3007:Stona",
"3008:Regen",
"3009:Cleanse",
"300A:Esuna",
"300B:Curaja",
"300C:Dispel",
"300D:Dispelga",
"300E:Renew",
"300F:Arise",
"3010:Esunaga",
"3011:Holy",
"3012:Fire",
"3013:Thunder",
"3014:Blizzard",
"3015:Aqua",
"3016:Aero",
"3017:Fira",
"3018:Thundara",
"3019:Blizzara",
"301A:Bio",
"301B:Aeroga",
"301C:Firaga",
"301D:Thundaga",
"301E:Blizzaga",
"301F:Shock",
"3020:Scourge",
"3021:Flare",
"3022:Ardor",
"3023:Scathe",
"3024:Haste",
"3025:Float",
"3026:Hastega",
"3027:Slow",
"3028:Immobilize",
"3029:Disable",
"302A:Bleed",
"302B:Break",
"302C:Stop",
"302D:Slowga",
"302E:Countdown",
"302F:Reflect",
"3030:Reflectga",
"3031:Balance",
"3032:Warp",
"3033:Protect",
"3034:Shell",
"3035:Bravery",
"3036:Faith",
"3037:Protectga",
"3038:Shellga",
"3039:Blind",
"303A:Oil",
"303B:Poison",
"303C:Silence",
"303D:Sleep",
"303E:Blindga",
"303F:Toxify",
"3040:Silencega",
"3041:Sleepga",
"3042:Reverse",
"3043:Berserk",
"3044:Death",
"3045:Confuse",
"3046:Decoy",
"3047:Vanish",
"3048:Vanishga",
"3049:Drain",
"304A:Syphon",
"304B:Bubble",
"304C:Dark",
"304D:Darkra",
"304E:Darkga",
"304F:Gravity",
"3050:Graviga",
"======TECHNIQUE========",
"4000:First Aid",
"4001:Shades of Black",
"4002:Horology",
"4003:Stamp",
"4004:Achilles",
"4005:Charge",
"4006:Infuse",
"4007:Souleater",
"4008:Wither",
"4009:Addle",
"400A:Bonecrusher",
"400B:Steal",
"400C:Telekinesis",
"400D:Expose",
"400E:Shear",
"400F:Charm",
"4010:Revive",
"4011:Sight Unseeing",
"4012:Numerology",
"4013:Libra",
"4014:Poach",
"4015:1000 Needles",
"4016:Traveler",
"4017:Gil Toss",
"FFFF:Not Selected"
}

local DropDownListITM = createStringlist()
for k,l in ipairs(ItemList) do
	DropDownListITM.add(string.format("%s",l))
end

local mr2 = al.getMemoryRecordByDescription("Override Item ID")
al[mr2.Index+0].DropDownList.Text = DropDownListITM.Text
al[mr2.Index+0].DropDownReadOnly = false
al[mr2.Index+0].DropDownDescriptionOnly = true
al[mr2.Index+0].DisplayAsDropDownListItem = true

local mr3 = al.getMemoryRecordByDescription("Override Treasure Chest Item ID")
al[mr3.Index+0].DropDownList.Text = DropDownListITM.Text
al[mr3.Index+0].DropDownReadOnly = false
al[mr3.Index+0].DropDownDescriptionOnly = true
al[mr3.Index+0].DisplayAsDropDownListItem = true

{$asm}
aobscanmodule(PermStatusBitsAOB,FFXII_TZA.exe,0F B6 41 10 0A 01 88 44 0A E4)
registersymbol(PermStatusBitsAOB)
alloc(newmem,2048,PermStatusBitsAOB)

aobscanmodule(CharJobViewAOB,FFXII_TZA.exe,0F B6 82 C3 01 00 00 83 C9 FF 3C FF 0F 44 C1 C3 B0 FF C3)
registersymbol(CharJobViewAOB)
alloc(newmem2,2048,CharJobViewAOB)

aobscanmodule(InventoryAOB,FFXII_TZA.exe,42 0F B7 0C 42 81 E1 FF 03 00 00)
registersymbol(InventoryAOB)
alloc(newmem3,2048,InventoryAOB)

aobscanmodule(TestAOB,FFXII_TZA.exe,48 8B 44 08 08 C3 33 C0 C3)
registersymbol(TestAOB)
alloc(newmem4,2048,TestAOB)

///
label(ChainCountPtr)
registersymbol(ChainCountPtr)
label(ChainLevelPtr)
registersymbol(ChainLevelPtr)
label(GilPtr)
registersymbol(GilPtr)
label(PRNGPtr)
registersymbol(PRNGPtr)

FFXII_TZA.exe+219BE18:
ChainLevelPtr:

FFXII_TZA.exe+219BE1C:
ChainCountPtr:

FFXII_TZA.exe+2D8D030:
PRNGPtr:

//aobscan(GilPtrAOB,48 8B 05 ?? ?? ?? ?? 8B 40 08 C3)
FFXII_TZA.exe+1F8B468:
GilPtr:

///
label(originalcode)
label(return)
label(PermStatusBitsPtr)
registersymbol(PermStatusBitsPtr)
label(PermStatusBitsByte6)
registersymbol(PermStatusBitsByte6)

///
label(originalcode2)
label(return2)
label(SelectedCharPtr)
registersymbol(SelectedCharPtr)

///
label(originalcode3)
label(return3)
label(ItemQtyPtr)
registersymbol(ItemQtyPtr)
label(ItemIDPtr)
registersymbol(ItemIDPtr)
label(ItemTotalsPtr)
registersymbol(ItemTotalsPtr)

///
label(return4)
label(CurrentTestRAXPtr)
registersymbol(CurrentTestRAXPtr)
label(TtlTestRAXPtr)
registersymbol(TtlTestRAXPtr)
label(TestRAXPtr)
registersymbol(TestRAXPtr)

newmem:
  mov [PermStatusBitsPtr],r14d
  add [PermStatusBitsPtr],78
  cmp byte ptr [r14+54],FF
  je originalcode
  push r14
  push rax
  movzx rax,byte ptr [PermStatusBitsByte6]
  add r14,7E
  mov [r14],al
  pop rax
  pop r14  
  
originalcode:
  movzx eax,byte ptr [rcx+10]
  or al,[rcx]
  jmp return
  
PermStatusBitsPtr:
dq 0
PermStatusBitsByte6:
db 0

newmem2:
  mov [SelectedCharPtr],rdx
  
originalcode2:
  movzx eax,byte ptr [rdx+000001C3]
  jmp return2

SelectedCharPtr:
dq 0

newmem3:
  mov [ItemQtyPtr],rdx
  mov [ItemIDPtr],rdx
  add [ItemIDPtr],5184
  mov [ItemTotalsPtr],rdx
  add [ItemTotalsPtr],6070  
  
originalcode3:
  movzx ecx,word ptr [rdx+r8*2]
  jmp return3

ItemQtyPtr:
dq 0
ItemIDPtr:
dq 0
ItemTotalsPtr:
dq 0

newmem4:
  mov rax,[rax+rcx+08]
  mov [CurrentTestRAXPtr],rax
  push rbx
  push rcx
  xor rbx,rbx
  mov rcx,TestRAXPtr
StartLoop:
  cmp qword ptr [rcx+rbx*8],rax
  je DoneLoopFound
  cmp [TtlTestRAXPtr],#40
  jge DoneLoopFound
  cmp qword ptr [rcx+rbx*8],0
  je DoneLoopNotFound
  inc rbx
  jmp StartLoop
DoneLoopNotFound:
  mov [rcx+rbx*8],rax
  inc [TtlTestRAXPtr]
DoneLoopFound:
  pop rcx
  pop rbx
  jmp return4

CurrentTestRAXPtr:
dq 0
TtlTestRAXPtr:
dq 0
TestRAXPtr:
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0
dq 0

PermStatusBitsAOB:
  jmp newmem
  nop
  return:

CharJobViewAOB:
  jmp newmem2
  nop
  nop
  return2:

InventoryAOB:
  jmp newmem3
  return3:

TestAOB:
  jmp newmem4
  return4:
  
[DISABLE] 

PermStatusBitsAOB:
  db 0F B6 41 10 0A 01
  
unregistersymbol(PermStatusBitsAOB)
unregistersymbol(PermStatusBitsPtr)

CharJobViewAOB:
  db 0F B6 82 C3 01 00 00

unregistersymbol(CharJobViewAOB)
unregistersymbol(SelectedCharPtr)

InventoryAOB:
  db 42 0F B7 0C 42

unregistersymbol(InventoryAOB)
unregistersymbol(ItemQtyPtr)
unregistersymbol(ItemIDPtr)
unregistersymbol(ItemTotalsPtr)

TestAOB:
  db 48 8B 44 08 08

unregistersymbol(TestAOB)
unregistersymbol(CurrentTestRAXPtr)
unregistersymbol(TtlTestRAXPtr)
unregistersymbol(TestRAXPtr)
  
dealloc(newmem)
dealloc(newmem2)
dealloc(newmem3)
dealloc(newmem4)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>100</ID>
              <Description>"[Scripts]"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>200</ID>
                  <Description>"Damage Modifier Script (God Mode, One Hit Kill, etc)"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscanmodule(DamageModAOB,FFXII_TZA.exe,49 8B C8 44 8B F2 E8 ?? ?? ?? ?? 48 8B CE 48 8B E8)
registersymbol(DamageModAOB)
alloc(newmem,4096,DamageModAOB)

///
label(originalcode)
label(return)
label(GodMode)
registersymbol(GodMode)
label(OneHitKill)
registersymbol(OneHitKill)
label(EnemyDamageMultiplier)
registersymbol(EnemyDamageMultiplier)
label(HeroDamageMultiplier)
registersymbol(HeroDamageMultiplier)
label(EnemyHealingMultiplier)
registersymbol(EnemyHealingMultiplier)
label(HeroHealingMultiplier)
registersymbol(HeroHealingMultiplier)
label(HeroCannotDie)
registersymbol(HeroCannotDie)

///
newmem:
  cmp byte ptr [rsi+54],FF
  je EnemyHit
HeroHit:
  cmp edx,0
  jl HeroDamageHit
  jg HeroHealingHit
  jmp originalcode
HeroDamageHit:
  cmp [HeroDamageMultiplier],(float)0.0
  je CheckGodMode
  neg rdx
  push rdx
  fild dword ptr [rsp]
  fmul dword ptr [HeroDamageMultiplier]
  fistp dword ptr [rsp]
  pop rdx
  neg rdx
CheckGodMode:
  cmp [GodMode],1
  jne CheckHeroCannotDie
  xor rdx,rdx
  jmp originalcode
CheckHeroCannotDie:
  cmp [HeroCannotDie],1
  jne originalcode
  push rax
  movzx eax,[rsi+48]
  neg rdx
  cmp edx,eax
  jl @F
  xor rdx,rdx
@@:
  neg rdx
  pop rax
  jmp originalcode
HeroHealingHit:
  cmp [HeroHealingMultiplier],(float)0.0
  je originalcode
  push rdx
  fild dword ptr [rsp]
  fmul dword ptr [HeroHealingMultiplier]
  fistp dword ptr [rsp]
  pop rdx
  jmp originalcode
EnemyHit:
  cmp edx,0
  jl EnemyDamageHit
  jg EnemyHealingHit
  jmp CheckOneHitKill
EnemyDamageHit:
  cmp [EnemyDamageMultiplier],(float)0.0
  je CheckOneHitKill
  neg rdx
  push rdx
  fild dword ptr [rsp]
  fmul dword ptr [EnemyDamageMultiplier]
  fistp dword ptr [rsp]
  pop rdx
  neg rdx
CheckOneHitKill:
  cmp [OneHitKill],1
  jne originalcode
  mov rdx,-999999
  jmp originalcode
EnemyHealingHit:
  cmp [EnemyHealingMultiplier],(float)0.0
  je originalcode
  push rdx
  fild dword ptr [rsp]
  fmul dword ptr [EnemyHealingMultiplier]
  fistp dword ptr [rsp]
  pop rdx
  
originalcode:
  mov [rsp+10],edx
  mov rcx,r8
  mov r14d,edx
  jmp return

GodMode:
dq 1
OneHitKill:
dq 0
EnemyDamageMultiplier:
dq (float)0.0
HeroDamageMultiplier:
dq (float)0.5
EnemyHealingMultiplier:
dq (float)0.0
HeroHealingMultiplier:
dq (float)2.0
HeroCannotDie:
dq 1

DamageModAOB:
  jmp newmem
  nop
  return:
  
[DISABLE]

DamageModAOB:
  db 49 8B C8 44 8B F2

unregistersymbol(GodMode)
unregistersymbol(OneHitKill)
unregistersymbol(EnemyDamageMultiplier)
unregistersymbol(HeroDamageMultiplier)
unregistersymbol(HeroCannotDie)
unregistersymbol(DamageModAOB)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>201</ID>
                      <Description>"Enemy Damage Multiplier (Set to Zero = Off; Otherwise multiplier)"</Description>
                      <VariableType>Float</VariableType>
                      <Address>EnemyDamageMultiplier</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>202</ID>
                      <Description>"One Hit Kill"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>OneHitKill</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>203</ID>
                      <Description>"Enemy Healing Multiplier (Set to Zero = Off; Otherwise multiplier, e.g. 0.5 is half healing)"</Description>
                      <VariableType>Float</VariableType>
                      <Address>EnemyHealingMultiplier</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>204</ID>
                      <Description>"God Mode"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>GodMode</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>205</ID>
                      <Description>"Hero Cannot Die (Lose HP Unless The Hit Will Kill You If On)"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>HeroCannotDie</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>206</ID>
                      <Description>"Hero Damage Multiplier (Set to Zero = Off; Otherwise multiplier, e.g. 0.5 is half damage)"</Description>
                      <VariableType>Float</VariableType>
                      <Address>HeroDamageMultiplier</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>207</ID>
                      <Description>"Hero Healing Multiplier (Set to Zero = Off; Otherwise multiplier)"</Description>
                      <VariableType>Float</VariableType>
                      <Address>HeroHealingMultiplier</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>225</ID>
                  <Description>"Infinite MP"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(InfMPAOB,0F BF 5E 4C 42 8D 04 23 85 C0 78 2C) // should be unique
registersymbol(InfMPAOB)
alloc(newmem,1024,InfMPAOB)


newmem:
  cmp byte ptr [rsi+54],FF
  je originalcode
  test r12d,r12d
  jge originalcode  
  xor r12,r12
  
originalcode:
  movsx ebx,word ptr [rsi+4C]
  lea eax,[rbx+r12]
  jmp return
 
InfMPAOB:
  jmp newmem
  nop
  nop
  nop
  return:
  
[DISABLE]

InfMPAOB:
  db 0F BF 5E 4C 42 8D 04 23

unregistersymbol(InfMPAOB)

dealloc(newmem)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>250</ID>
                  <Description>"Always CT = 0 (For Allies)"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(CTZeroAOB,F6 40 7E 20 74 6E 4D 85 C0) // should be unique
registersymbol(CTZeroAOB)
alloc(newmem,1024,CTZeroAOB)

aobscan(CTZeroReturnAOB,48 8B 87 98 06 00 00 F6 40 6E 40) // should be unique
registersymbol(CTZeroReturnAOB)

newmem:
  cmp byte ptr [rax+54],FF
  je CTZeroReturnAOB
  jmp return  
 
CTZeroAOB:
  jmp newmem
  nop
  return:
  
[DISABLE]

CTZeroAOB:
  db F6 40 7E 20 74 6E

unregistersymbol(CTZeroAOB)
unregistersymbol(CTZeroReturnAOB)

dealloc(newmem)
</AssemblerScript>
                </CheatEntry>				
                <CheatEntry>
                  <ID>210</ID>
                  <Description>"Infinite Item Usage/Set Minimum Amt On Use/Obtain"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(InfItemUsageAOB,66 41 33 C8 66 23 CD 66 41 33 C9) // should be unique
registersymbol(InfItemUsageAOB)
alloc(newmem,1024,InfItemUsageAOB)

label(MinItemAmt)
registersymbol(MinItemAmt)

newmem:
  cmp r8w,[MinItemAmt]
  jge @F
  mov r8w,[MinItemAmt]
@@:
  cmp r8w,r9w
  jg originalcode
  mov r8w,r9w
  jmp originalcode
  
originalcode:
  xor cx,r8w
  and cx,bp
  jmp return

MinItemAmt:
dq #10
  
InfItemUsageAOB:
  jmp newmem
  nop
  nop
  return:
  
[DISABLE]

InfItemUsageAOB:
  db 66 41 33 C8 66 23 CD

unregistersymbol(InfItemUsageAOB)
unregistersymbol(MinItemAmt)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>211</ID>
                      <Description>"Minimum Item Amount (Set To Zero For No Effect)"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>MinItemAmt</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>215</ID>
                  <Description>"Infinite License Points/Set Minimum Amount When Using LP"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(InfLicenseAOB,8B 97 90 01 00 00 F7 D9 03 D1 79 04) // should be unique
registersymbol(InfLicenseAOB)
alloc(newmem,1024,InfLicenseAOB)

label(MinLicensePoints)
registersymbol(MinLicensePoints)

newmem:
  xor ecx,ecx
  mov edx,[rdi+00000190]
  cmp edx,[MinLicensePoints]
  jge return
  mov edx,[MinLicensePoints]
  jmp return

MinLicensePoints:
dq #100
  
InfLicenseAOB:
  jmp newmem
  nop
  nop
  nop
  return:
  
[DISABLE]

InfLicenseAOB:
  db 8B 97 90 01 00 00 F7 D9

unregistersymbol(InfLicenseAOB)
unregistersymbol(MinLicensePoints)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>216</ID>
                      <Description>"Minimum License Points (Set To Zero For No Effect)"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>MinLicensePoints</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>240</ID>
                  <Description>"EXP Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscanmodule(EXPMultAOB,FFXII_TZA.exe,8B 8F 8C 01 00 00 B8 ?? ?? ?? ?? 03 CB 3B C8) // should be unique
alloc(newmem,1024,EXPMultAOB)
registersymbol(EXPMultAOB)

///
label(return)
label(originalcode)
label(EXPMult)
registersymbol(EXPMult)

newmem:
  imul ebx,[EXPMult]
  
originalcode:
  mov ecx,[rdi+0000018C]
  jmp return
 
EXPMult:
dd #5
    
EXPMultAOB:
  jmp newmem
  nop
  return:
  
[DISABLE]

EXPMultAOB:
  db 8B 8F 8C 01 00 00
  
unregistersymbol(EXPMult)
unregistersymbol(EXPMultAOB)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>241</ID>
                      <Description>"EXP Multiplier"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>EXPMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>245</ID>
                  <Description>"LP Multiplier"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
aobscanmodule(LPMultAOB,FFXII_TZA.exe,44 8B 87 90 01 00 00 B8 9F 86 01 00 44 03 C6 8B D6) // should be unique
alloc(newmem,1024,LPMultAOB)
registersymbol(LPMultAOB)

///
label(return)
label(originalcode)
label(LPMult)
registersymbol(LPMult)

newmem:
  imul esi,[LPMult]
  
originalcode:
  mov r8d,[rdi+00000190]
  jmp return
 
LPMult:
dd #5
    
LPMultAOB:
  jmp newmem
  nop
  nop
  return:
  
[DISABLE]

LPMultAOB:
  db 44 8B 87 90 01 00 00
  
unregistersymbol(LPMult)
unregistersymbol(LPMultAOB)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>246</ID>
                      <Description>"LP Multiplier"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>LPMult</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>220</ID>
                  <Description>"Minimum Chain Count"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscanmodule(ChainCountAOB,FFXII_TZA.exe,8B D3 8B 0D ?? ?? ?? ?? 85 C0 74 02 FF C1)
registersymbol(ChainCountAOB)
alloc(newmem,1024,ChainCountAOB)		  
		  
///
label(MinimumChainCount)
registersymbol(MinimumChainCount)

///
newmem:
  cmp ecx,[MinimumChainCount]
  jge originalcode
  mov ecx,[MinimumChainCount]
  mov [ChainCountPtr],ecx
  
originalcode:
  test eax,eax
  je return
  inc ecx
  jmp return
  
MinimumChainCount:
dd #100

ChainCountAOB+8:
  jmp newmem
  nop
  return:
  
[DISABLE]

ChainCountAOB+8:
  db 85 C0 74 02 FF C1

unregistersymbol(MinimumChainCount)
unregistersymbol(ChainCountAOB)
  
dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>221</ID>
                      <Description>"Minimum Chain Count"</Description>
                      <VariableType>4 Bytes</VariableType>
                      <Address>MinimumChainCount</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>222</ID>
                  <Description>"Set Chain Level To 3"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(SetChainLevelAOB,4C 63 1D 6B 3F FA 01 41 83 FB 03) // should be unique
registersymbol(SetChainLevelAOB)
alloc(newmem,1024,SetChainLevelAOB)

newmem:
  movsxd r11,dword ptr [ChainLevelPtr]
  mov r11d,03
  mov [ChainLevelPtr],r11d
  jmp return
  jmp return
 
SetChainLevelAOB:
  jmp newmem
  nop
  nop
  return:
  
[DISABLE]

SetChainLevelAOB:
  db 4C 63 1D 6B 3F FA 01

unregistersymbol(SetChainLevelAOB)

dealloc(newmem)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>223</ID>
                  <Description>"Monsters Drop All Items"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(MonsterDropAOB,85 C0 75 09 E8 ?? ?? ?? ?? 3B C7 75 16) // should be unique
registersymbol(MonsterDropAOB)

MonsterDropAOB+2:
  db EB
  
[DISABLE]

MonsterDropAOB+2:
  db 75

unregistersymbol(MonsterDropAOB)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>224</ID>
                  <Description>"Steal All Items When You Successfully Steal"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(StealItemsAOB,BA FF FF 00 00 44 8D 60 31 45 38 2F 74 4A) // should be unique
registersymbol(StealItemsAOB)
alloc(newmem,1024,StealItemsAOB)

newmem:
  cmp [r15],r13d
  je originalcode
StolenItem:
  mov byte ptr [r15],01
  mov byte ptr [r15+1],01
  mov byte ptr [r15+2],01
  
originalcode:
  mov edx,0000FFFF
  jmp return
   
StealItemsAOB:
  jmp newmem
  return:
  
[DISABLE]

StealItemsAOB:
  db BA FF FF 00 00

unregistersymbol(StealItemsAOB)

dealloc(newmem)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>270</ID>
                  <Description>"Treasure Chest Always Yield Certain Item (You Choose Rarity)"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscanmodule(TreasureChestAOB,FFXII_TZA.exe,C7 07 00 00 00 00 66 89 47 04) // should be unique
registersymbol(TreasureChestAOB)
alloc(newmem,2048,TreasureChestAOB)

aobscan(TreasureChestAOB2,0F B6 4B 0B 44 3B C1 73 6E E8) // should be unique
registersymbol(TreasureChestAOB2)

aobscan(TreasureChestAOB3,C7 07 02 00 00 00 48 8B 5C 24 30 48 8B 74 24 38) // should be unique
registersymbol(TreasureChestAOB3)

label(ItemRarity)
registersymbol(ItemRarity)
label(TreasureChestPtr)
registersymbol(TreasureChestPtr)
label(OverrideTCItemID)
registersymbol(OverrideTCItemID)

newmem:
  mov [TreasureChestPtr],rbx
  cmp word ptr [OverrideTCItemID],FFFF
  je DoItemRarity
  movzx eax,word ptr [OverrideTCItemID]
  jmp originalcode
DoItemRarity:
  cmp [ItemRarity],0
  je CommonItem
  cmp [ItemRarity],1
  je RareItem
  cmp [ItemRarity],2
  je DiamondArmletCommon
  cmp [ItemRarity],3
  je DiamondArmletRare
  jmp originalcode
CommonItem:
  movzx eax,word ptr [rbx+0C]
  jmp originalcode
RareItem:
  movzx eax,word ptr [rbx+0E]
  jmp originalcode
DiamondArmletCommon:
  movzx eax,word ptr [rbx+10]
  jmp originalcode
DiamondArmletRare:
  movzx eax,word ptr [rbx+12]
  jmp originalcode
  
originalcode:
  db C7 07 00 00 00 00 66 89 47 04
  jmp return

ItemRarity:
dq 3
TreasureChestPtr:
dq 0
OverrideTCItemID:
dq FFFF
  
TreasureChestAOB:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
  return:

TreasureChestAOB2+7:
  db EB
  
[DISABLE]

TreasureChestAOB:
  db C7 07 00 00 00 00 66 89 47 04

TreasureChestAOB2+7:
  db 73

unregistersymbol(TreasureChestAOB)
unregistersymbol(TreasureChestAOB2)
unregistersymbol(TreasureChestAOB3)
unregistersymbol(ItemRarity)
unregistersymbol(TreasureChestPtr)
unregistersymbol(OverrideTCItemID)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>271</ID>
                      <Description>"Item Rarity (Item Type To Drop)"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:No Diamond Armlet Common Item
1:No Diamond Armlet Rare Item
2:Diamond Armlet Common Item
3:Diamond Armlet Rare Item
</DropDownList>
                      <VariableType>4 Bytes</VariableType>
                      <Address>ItemRarity</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>272</ID>
                      <Description>"Override Treasure Chest Item ID"</Description>
					  <ShowAsHex>1</ShowAsHex>
                      <VariableType>2 Bytes</VariableType>
                      <Address>OverrideTCItemID</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>273</ID>
                  <Description>"Treasure Chest Always Appear"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscanmodule(TCAppearAOB,FFXII_TZA.exe,85 C0 75 07 C7 46 04 FF FF FF FF 8B 4E 04 85 C9) // should be unique
registersymbol(TCAppearAOB)
 
TCAppearAOB+2:
  db EB
  
[DISABLE]

TCAppearAOB+2:
  db 75

unregistersymbol(TCAppearAOB)
</AssemblerScript>
                </CheatEntry>				
                <CheatEntry>
                  <ID>700</ID>
                  <Description>"Override Shop Item (Buy Item You Want)"</Description>
                  <Options moHideChildren="1"/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(ShopItemAOB,8B 58 10 0F B7 48 08 0F BA F3 1F) // should be unique
registersymbol(ShopItemAOB)
alloc(newmem,1024,ShopItemAOB)

label(OverrideItemID)
registersymbol(OverrideItemID)

newmem:
  mov ebx,[rax+10]
  movzx ecx,word ptr [rax+08]
  mov cx,[OverrideItemID]
  cmp cx,-1
  jne return
  movzx ecx,word ptr [rax+08]
  jmp return

OverrideItemID:
dw -1
  
ShopItemAOB:
  jmp newmem
  nop
  nop
  return:
  
[DISABLE]

ShopItemAOB:
  db 8B 58 10 0F B7 48 08

unregistersymbol(ShopItemAOB)
unregistersymbol(OverrideItemID)

dealloc(newmem)
</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>701</ID>
                      <Description>"Override Item ID"</Description>
					  <ShowAsHex>1</ShowAsHex>
                      <VariableType>2 Bytes</VariableType>
                      <Address>OverrideItemID</Address>
                    </CheatEntry>
				  </CheatEntries>
                </CheatEntry>				
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>300</ID>
              <Description>"Pointers"</Description>
              <Options moHideChildren="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>301</ID>
                  <Description>"Gil"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>GilPtr</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>302</ID>
                  <Description>"Chain Level"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>ChainLevelPtr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>303</ID>
                  <Description>"Chain Count"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>ChainCountPtr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>304</ID>
                  <Description>"PRNG Number (Values Go Up to 624 decimal)"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>PRNGPtr</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>550</ID>
                  <Description>"Selected Char Jobs (View License Board)"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
					<CheatEntry>
					  <ID>551</ID>
					  <Description>"Job 1"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:White Mage
1:Uhlan
2:Machinist
3:Red Battlemage
4:Knight
5:Monk
6:Time Battlemage
7:Foebreaker
8:Archer
9:Blackmage
10:Bushi
11:Shikari
255:Not Selected
</DropDownList>
					  <VariableType>Byte</VariableType>
					  <Address>SelectedCharPtr</Address>
					  <Offsets>
					    <Offset>1C3</Offset>
					  </Offsets>
					</CheatEntry>
					<CheatEntry>
					  <ID>552</ID>
					  <Description>"Current Job Selected"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:White Mage
1:Uhlan
2:Machinist
3:Red Battlemage
4:Knight
5:Monk
6:Time Battlemage
7:Foebreaker
8:Archer
9:Blackmage
10:Bushi
11:Shikari
255:Not Selected
</DropDownList>
					  <VariableType>Byte</VariableType>
					  <Address>SelectedCharPtr</Address>
					  <Offsets>
					    <Offset>1C5</Offset>
					  </Offsets>
					</CheatEntry>
					<CheatEntry>
					  <ID>553</ID>
					  <Description>"Job 2"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:White Mage
1:Uhlan
2:Machinist
3:Red Battlemage
4:Knight
5:Monk
6:Time Battlemage
7:Foebreaker
8:Archer
9:Blackmage
10:Bushi
11:Shikari
255:Not Selected
</DropDownList>
					  <VariableType>Byte</VariableType>
					  <Address>SelectedCharPtr</Address>
					  <Offsets>
					    <Offset>1C4</Offset>
					  </Offsets>
					</CheatEntry>
				  </CheatEntries>
				</CheatEntry>
                <CheatEntry>
                  <ID>575</ID>
                  <Description>"Add Inventory Options (View Inventory Menu (POTIONS Only) Before Using)"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
					<CheatEntry>
					  <ID>576</ID>
					  <Description>"Add All Usable Items"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0
local TtlIDLoop = 0xE
local IDLoopStart = 0x00010000
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x001C)
WriteSmallInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x0032)
-- Second Part of Usable Items (Motes)
local ItemPtrOffset2 = 0x3C
local ItemQtyOffset2 = 0x3C + 0x18
local TtlIDLoop2 = 0xB
local IDLoopStart2 = 0x002B002A
local index2 = 0
while (index2 &lt; TtlIDLoop2) do
      WriteInteger(ItemIDPtr+ItemPtrOffset2+(index2*AddAddressMultiplier*4),IDLoopStart2)
      WriteInteger(ItemQtyPtr+ItemQtyOffset2+(index2*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart2 = IDLoopStart2 + IDLoopAdd
      index2 = index2 + 1
end
WriteInteger(ItemTotalsPtr,((TtlIDLoop*2)+1)+((TtlIDLoop2*2)+1))
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>577</ID>
					  <Description>"Add All Accessories"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x328
local ItemTotalsPtrOffset = 0x3
local TtlIDLoop = 0x18
local IDLoopStart = 0x11551154
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),TtlIDLoop*2)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>578</ID>
					  <Description>"Add All Armor"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x210
local ItemTotalsPtrOffset = 0x2
local TtlIDLoop = 0x46
local IDLoopStart = 0x10C910C8
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),TtlIDLoop*2)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>579</ID>
					  <Description>"Add All Weapons"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x80
local ItemTotalsPtrOffset = 0x1
local TtlIDLoop = 0x63
local IDLoopStart = 0x10021001
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x10C7)
WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x0032)
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),(TtlIDLoop*2)+1)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>580</ID>
					  <Description>"Add All Arrows and Bullets"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x388
local ItemTotalsPtrOffset = 0x4
local TtlIDLoop = 0x10
local IDLoopStart = 0x11851184
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),TtlIDLoop*2)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>581</ID>
					  <Description>"Add All Loot (Except Pinewood and Sandalwood Chop)"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0xAEC
local ItemQtyPtrOffset = 0x408
local ItemTotalsPtrOffset = 0xB
local TtlIDLoop = 0x6B
local IDLoopStart = 0x20212020
local TtlIDLoop2 = 0x7
local IDLoopStart2 = 0x21012100
local TtlIDLoop3 = 0x2
local IDLoopStart3 = 0x21152114
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
local index2 = 0
local index3 = 0
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)-2,0x2000)
WriteSmallInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)-(2*0x20),0x0032)
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
while (index2 &lt; TtlIDLoop2) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4),IDLoopStart2)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14,QtyLoopStart)
      IDLoopStart2 = IDLoopStart2 + IDLoopAdd
      index2 = index2 + 1
end
-- Remove Pinewood and Sandalwood Chops
WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14+(index3*AddAddressMultiplier*4)+0xC-0x4,0x00000000)
while (index3 &lt; TtlIDLoop3) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+(index3*AddAddressMultiplier*4),IDLoopStart3)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14+(index3*AddAddressMultiplier*4)+0xC,QtyLoopStart)
      IDLoopStart3 = IDLoopStart3 + IDLoopAdd
      index3 = index3 + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),((TtlIDLoop*2)+1)+(TtlIDLoop2*2)+(TtlIDLoop3*2))
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>582</ID>
					  <Description>"Add All Techniques"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x618
local ItemTotalsPtrOffset = 0x8
local TtlIDLoop = 0xC
local IDLoopStart = 0x40014000
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),(TtlIDLoop*2))
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>					
					<CheatEntry>
					  <ID>583</ID>
					  <Description>"Add All Magic"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x648
local ItemTotalsPtrOffset = 0x9
local TtlIDLoop = 0x28
local IDLoopStart = 0x30013000
local IDLoopAdd = 0x00020002
local QtyLoopStart = 0x00320032
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),(TtlIDLoop*2))
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>584</ID>
					  <Description>"Remove All Loot (Attempting to Fix Issue When Adding All Loot)"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0xAEC
local ItemQtyPtrOffset = 0x408
local ItemTotalsPtrOffset = 0xB
local TtlIDLoop = 0x6B
local IDLoopStart = 0xFFFFFFFF
local TtlIDLoop2 = 0x7
local IDLoopStart2 = 0xFFFFFFFF
local TtlIDLoop3 = 0x2
local IDLoopStart3 = 0xFFFFFFFF
local IDLoopAdd = 0x00000000
local QtyLoopStart = 0x00000000
local AddAddressMultiplier = 0x1
local index = 0
local index2 = 0
local index3 = 0
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)-2,0xFFFF)
WriteSmallInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)-(2*0x20),0x0000)
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
while (index2 &lt; TtlIDLoop2) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4),IDLoopStart2)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14,QtyLoopStart)
      IDLoopStart2 = IDLoopStart2 + IDLoopAdd
      index2 = index2 + 1
end
WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14+(index3*AddAddressMultiplier*4)+0xC-0x4,0x00000000)
while (index3 &lt; TtlIDLoop3) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+(index3*AddAddressMultiplier*4),IDLoopStart3)
      WriteInteger(ItemQtyPtr+ItemQtyPtrOffset+(index*AddAddressMultiplier*4)+(index2*AddAddressMultiplier*4)+0x14+(index3*AddAddressMultiplier*4)+0xC,QtyLoopStart)
      IDLoopStart3 = IDLoopStart3 + IDLoopAdd
      index3 = index3 + 1
end
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),0)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
					<CheatEntry>
					  <ID>585</ID>
					  <Description>"Remove All Usable Items"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0
local TtlIDLoop = 0xE
local IDLoopStart = 0xFFFFFFFF
local IDLoopAdd = 0x00000000
local QtyLoopStart = 0x00000000
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0xFFFF)
WriteSmallInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x0000)
-- Second Part of Usable Items (Motes)
local ItemPtrOffset2 = 0x3C
local ItemQtyOffset2 = 0x3C + 0x18
local TtlIDLoop2 = 0xB
local IDLoopStart2 = 0xFFFFFFFF
local index2 = 0
while (index2 &lt; TtlIDLoop2) do
      WriteInteger(ItemIDPtr+ItemPtrOffset2+(index2*AddAddressMultiplier*4),IDLoopStart2)
      WriteInteger(ItemQtyPtr+ItemQtyOffset2+(index2*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart2 = IDLoopStart2 + IDLoopAdd
      index2 = index2 + 1
end
WriteInteger(ItemTotalsPtr,0)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>					
					<CheatEntry>
					  <ID>586</ID>
					  <Description>"Remove All Weapons"</Description>
					  <VariableType>Auto Assembler Script</VariableType>
					  <AssemblerScript>[ENABLE]
{$lua}
local ItemIDPtr = ReadPointer(getAddress("ItemIDPtr"))
local ItemQtyPtr = ReadPointer(getAddress("ItemQtyPtr"))
local ItemTotalsPtr = ReadPointer(getAddress("ItemTotalsPtr"))
local ItemPtrOffset = 0x80
local ItemTotalsPtrOffset = 0x1
local TtlIDLoop = 0x63
local IDLoopStart = 0xFFFFFFFF
local IDLoopAdd = 0x00000000
local QtyLoopStart = 0x00000000
local AddAddressMultiplier = 0x1
local index = 0
while (index &lt; TtlIDLoop) do
      WriteInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),IDLoopStart)
      WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),QtyLoopStart)
      IDLoopStart = IDLoopStart + IDLoopAdd
      index = index + 1
end
WriteSmallInteger(ItemIDPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0xFFFF)
WriteInteger(ItemQtyPtr+ItemPtrOffset+(index*AddAddressMultiplier*4),0x0000)
WriteInteger(ItemTotalsPtr+(ItemTotalsPtrOffset*4),0)
{$asm}
[DISABLE]
</AssemblerScript>
					</CheatEntry>
				  </CheatEntries>
				</CheatEntry>				
                <CheatEntry>
                  <ID>500</ID>
                  <Description>"Permanent Status Effects To Set"</Description>
                  <Options moHideChildren="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
					<CheatEntry>
					  <ID>501</ID>
					  <Description>"Damage Resist"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>0</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>502</ID>
					  <Description>"Attack Plus"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>1</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>503</ID>
					  <Description>"HP Devour"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>2</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>504</ID>
					  <Description>"Mana Spring"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>3</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>505</ID>
					  <Description>"Shift"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>4</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>506</ID>
					  <Description>"Attack CT 0"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>5</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>507</ID>
					  <Description>"Magic CT 0"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>6</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
					<CheatEntry>
					  <ID>508</ID>
					  <Description>"Immune: Attack"</Description>
                      <DropDownList DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
					  <VariableType>Binary</VariableType>
					  <BitStart>7</BitStart>
					  <BitLength>1</BitLength>
					  <ShowAsBinary>0</ShowAsBinary>
					  <Address>PermStatusBitsByte6</Address>
					</CheatEntry>
				  </CheatEntries>
				</CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
