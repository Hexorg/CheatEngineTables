<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="20">
  <CheatEntries>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Character Select Stats all 99 (DISABLE AFTER GAME LOADS) (failure to disable will crash game) (No longer useful with Max Stats Script)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Overfall.exe
  Version: 
  Date   : 2016-05-24
  Author : kh

  This script does blah blah blah
}

[ENABLE]

aobscan(LoadStats,48 63 08 33 D2) // should be unique
alloc(newmem,$1000,0587896F)

label(code)
label(return)

newmem:

code:
  mov [rax], 63
  movsxd  rcx,dword ptr [rax]
  xor edx,edx
  jmp return

LoadStats:
  jmp code
return:
registersymbol(LoadStats)

[DISABLE]

LoadStats:
  db 48 63 08 33 D2

unregistersymbol(LoadStats)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0587896F

05878951: 00 00                          -  add [rax],al
05878953: 00 01                          -  add [rcx],al
05878955: 04 03                          -  add al,03
05878957: 05 00 00 04 53                 -  add eax,53040000
0587895C: 01 50 00                       -  add [rax+00],edx
0587895F: 00 55 48                       -  add [rbp+48],dl
05878962: 8B EC                          -  mov ebp,esp
05878964: 48 83 EC 10                    -  sub rsp,10
05878968: 48 89 4D F8                    -  mov [rbp-08],rcx
0587896C: 48 8B C1                       -  mov rax,rcx
// ---------- INJECTING HERE ----------
0587896F: 48 63 08                       -  movsxd  rcx,dword ptr [rax]
05878972: 33 D2                          -  xor edx,edx
// ---------- DONE INJECTING  ----------
05878974: 48 83 EC 20                    -  sub rsp,20
05878978: 49 BB 70 74 83 05 00 00 00 00  -  mov r11,System:NumberFormatter:NumberToString
05878982: 41 FF D3                       -  call r11d
05878985: 48 83 C4 20                    -  add rsp,20
05878989: C9                             -  leave 
0587898A: C3                             -  ret 
0587898B: 00 00                          -  add [rax],al
0587898D: 00 00                          -  add [rax],al
0587898F: 00 00                          -  add [rax],al
05878991: 00 00                          -  add [rax],al
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>29</ID>
      <Description>"Set Frag Dust Runes Food to 9999 [Must have received one of each from any source to work]"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(ReplaceFragDustRunes,48 8B CD 48 83 C1 F0 48 63 55 E0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movsxd  rdx,dword ptr [rbp-20]
  mov edx, (int)9999
  sub rsp,20
  jmp return

ReplaceFragDustRunes+8:
  jmp code
  nop
  nop
return:
registersymbol(ReplaceFragDustRunes)

[DISABLE]

ReplaceFragDustRunes+8:
  db 48 63 55 E0 48 83 EC 20

unregistersymbol(ReplaceFragDustRunes)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>40</ID>
          <Description>"-- Ignore Me -- If not activated, you did not receive something, try again later"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscan(ReplaceFragDustRunes,48 8B CD 48 83 C1 F0 48 63 55 E0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movsxd  rdx,dword ptr [rbp-20]
  mov edx, (int)9999
  sub rsp,20
  jmp return

ReplaceFragDustRunes+8:
  jmp code
  nop
  nop
return:
registersymbol(ReplaceFragDustRunes)

[DISABLE]

ReplaceFragDustRunes+8:
  db 48 63 55 E0 48 83 EC 20

unregistersymbol(ReplaceFragDustRunes)
dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>41</ID>
              <Description>"-- Ignore Me -- If not activated, you did not receive something, try again later"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscan(ReplaceFragDustRunes,48 8B CD 48 83 C1 F0 48 63 55 E0) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  movsxd  rdx,dword ptr [rbp-20]
  mov edx, (int)9999
  sub rsp,20
  jmp return

ReplaceFragDustRunes+8:
  jmp code
  nop
  nop
return:
registersymbol(ReplaceFragDustRunes)

[DISABLE]

ReplaceFragDustRunes+8:
  db 48 63 55 E0 48 83 EC 20

unregistersymbol(ReplaceFragDustRunes)
dealloc(newmem)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>42</ID>
                  <Description>"-- Ignore Me -- If not activated, you did not receive something, try again later"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

aobscan(Food,48 63 55 C0 48 83 EC 20 49 BB E0) // should be unique
alloc(newmem,$1000,0E954E57)

label(code)
label(return)

newmem:

code:
  movsxd  rdx,dword ptr [rbp-40]
  mov edx, (int)9999
  sub rsp,20
  jmp return

Food:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Food)

[DISABLE]

Food:
  db 48 63 55 C0 48 83 EC 20

unregistersymbol(Food)
dealloc(newmem)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>36</ID>
      <Description>"Trade for 9999 Frags, Add 9999 to current Dust &amp; Food (Works on merchants)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(TradeFrags,20 48 63 96 C0 00 00 00) // should be unique
alloc(newmem,$1000,108E8651)

label(code)
label(return)

newmem:

code:
  movsxd  rdx,dword ptr [rsi+000000C0]
  mov edx, (int)9999
  jmp return

TradeFrags+01:
  jmp code
  nop
  nop
return:
registersymbol(TradeFrags)

aobscan(TradeDust,48 63 96 C4 00 00 00 48) // should be unique
alloc(newmem2,$1000,108E868E)

label(code2)
label(return2)

newmem2:

code2:
  movsxd  rdx,dword ptr [rsi+000000C4]
  mov edx, (int)9999
  jmp return2

TradeDust:
  jmp code2
  nop
  nop
return2:
registersymbol(TradeDust)

aobscan(TradeFood,48 63 96 C8 00 00 00 48 63) // should be unique
alloc(newmem5,$1000,108E86D4)

label(code5)
label(return5)

newmem5:

code5:
  movsxd  rdx,dword ptr [rsi+000000C8]
  mov edx, (int)9999
  jmp return5

TradeFood:
  jmp code5
  nop
  nop
return5:
registersymbol(TradeFood)

[DISABLE]

TradeFrags+01:
  db 48 63 96 C0 00 00 00

unregistersymbol(TradeFrags)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 108E8651

108E8623: 48 8D 44 88 20                 -  lea rax,[rax+rcx*4+20]
108E8628: 48 63 08                       -  movsxd  rcx,dword ptr [rax]
108E862B: 48 63 96 C8 00 00 00           -  movsxd  rdx,dword ptr [rsi+000000C8]
108E8632: 03 CA                          -  add ecx,edx
108E8634: 89 08                          -  mov [rax],ecx
108E8636: 41 BA 00 99 5A 3F              -  mov r10d,3F5A9900
108E863C: 48 83 EC 20                    -  sub rsp,20
108E8640: 49 BB 40 FF 3E 44 00 00 00 00  -  mov r11,SingletonWithFullInspector`1:get_Instance
108E864A: 41 FF D3                       -  call r11d
108E864D: 48 83 C4 20                    -  add rsp,20
// ---------- INJECTING HERE ----------
108E8651: 48 63 96 C0 00 00 00           -  movsxd  rdx,dword ptr [rsi+000000C0]
// ---------- DONE INJECTING  ----------
108E8658: 48 8B C8                       -  mov rcx,rax
108E865B: 48 83 EC 20                    -  sub rsp,20
108E865F: 83 38 00                       -  cmp dword ptr [rax],00
108E8662: 49 BB F0 87 8E 10 00 00 00 00  -  mov r11,PartyManager:set_Frag
108E866C: 41 FF D3                       -  call r11d
108E866F: 48 83 C4 20                    -  add rsp,20
108E8673: 41 BA 00 99 5A 3F              -  mov r10d,3F5A9900
108E8679: 48 83 EC 20                    -  sub rsp,20
108E867D: 49 BB 40 FF 3E 44 00 00 00 00  -  mov r11,SingletonWithFullInspector`1:get_Instance
108E8687: 41 FF D3                       -  call r11d
}
TradeDust:
  db 48 63 96 C4 00 00 00

unregistersymbol(TradeDust)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 108E868E

108E865B: 48 83 EC 20                    -  sub rsp,20
108E865F: 83 38 00                       -  cmp dword ptr [rax],00
108E8662: 49 BB F0 87 8E 10 00 00 00 00  -  mov r11,PartyManager:set_Frag
108E866C: 41 FF D3                       -  call r11d
108E866F: 48 83 C4 20                    -  add rsp,20
108E8673: 41 BA 00 99 5A 3F              -  mov r10d,3F5A9900
108E8679: 48 83 EC 20                    -  sub rsp,20
108E867D: 49 BB 40 FF 3E 44 00 00 00 00  -  mov r11,SingletonWithFullInspector`1:get_Instance
108E8687: 41 FF D3                       -  call r11d
108E868A: 48 83 C4 20                    -  add rsp,20
// ---------- INJECTING HERE ----------
108E868E: 48 63 96 C4 00 00 00           -  movsxd  rdx,dword ptr [rsi+000000C4]
// ---------- DONE INJECTING  ----------
108E8695: 48 63 8E B0 00 00 00           -  movsxd  rcx,dword ptr [rsi+000000B0]
108E869C: 03 D1                          -  add edx,ecx
108E869E: 48 8B C8                       -  mov rcx,rax
108E86A1: 48 83 EC 20                    -  sub rsp,20
108E86A5: 83 38 00                       -  cmp dword ptr [rax],00
108E86A8: 49 BB C0 EC 89 10 00 00 00 00  -  mov r11,PartyManager:set_Dust
108E86B2: 41 FF D3                       -  call r11d
108E86B5: 48 83 C4 20                    -  add rsp,20
108E86B9: 41 BA 00 99 5A 3F              -  mov r10d,3F5A9900
108E86BF: 48 83 EC 20                    -  sub rsp,20
}
TradeFood:
  db 48 63 96 C8 00 00 00

unregistersymbol(TradeFood)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 108E86D4

108E86A1: 48 83 EC 20                    -  sub rsp,20
108E86A5: 83 38 00                       -  cmp dword ptr [rax],00
108E86A8: 49 BB C0 EC 89 10 00 00 00 00  -  mov r11,PartyManager:set_Dust
108E86B2: 41 FF D3                       -  call r11d
108E86B5: 48 83 C4 20                    -  add rsp,20
108E86B9: 41 BA 00 99 5A 3F              -  mov r10d,3F5A9900
108E86BF: 48 83 EC 20                    -  sub rsp,20
108E86C3: 49 BB 40 FF 3E 44 00 00 00 00  -  mov r11,SingletonWithFullInspector`1:get_Instance
108E86CD: 41 FF D3                       -  call r11d
108E86D0: 48 83 C4 20                    -  add rsp,20
// ---------- INJECTING HERE ----------
108E86D4: 48 63 96 C8 00 00 00           -  movsxd  rdx,dword ptr [rsi+000000C8]
// ---------- DONE INJECTING  ----------
108E86DB: 48 63 8E B4 00 00 00           -  movsxd  rcx,dword ptr [rsi+000000B4]
108E86E2: 03 D1                          -  add edx,ecx
108E86E4: 48 8B C8                       -  mov rcx,rax
108E86E7: 48 83 EC 20                    -  sub rsp,20
108E86EB: 83 38 00                       -  cmp dword ptr [rax],00
108E86EE: 49 BB 90 88 8E 10 00 00 00 00  -  mov r11,PartyManager:set_Food
108E86F8: 41 FF D3                       -  call r11d
108E86FB: 48 83 C4 20                    -  add rsp,20
108E86FF: 48 63 86 B4 00 00 00           -  movsxd  rax,dword ptr [rsi+000000B4]
108E8706: 85 C0                          -  test eax,eax
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"MaxStats for Me, Min Stats for You, No Cooldowns (Activate once in battle, use mouse to highlight all portraits a few times, maybe even play a round or two, then deactivate) [If left activated, will crash game eventually]"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(WeAreGods,48 63 86 20 01 00 00 83) // should be unique
alloc(newmem,$1000,115A230C)

label(code)
label(return)
label(MakeGods)
label(MakeHeathens)

newmem:

code:
  push eax
  mov eax, [rsi+48]
  mov eax, [eax+20]
  cmp [eax+30], 3
  je MakeGods
  mov eax, [rsi+48] //Stats Container
  cmp byte ptr [eax+75], 1
  je MakeGods
  jmp MakeHeathens

MakeGods:
  mov eax, [rsi+48] //Stats Container
  //Set all Stats to 99
  mov [eax+78],(int)99
  mov [eax+7C],(int)99
  mov [eax+80],(int)99
  mov [eax+84],(int)99
  mov [eax+88],(int)99
  mov [eax+8C],(int)99
  //Set all Cooldowns to 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+48] //MovePowers
  mov eax, [eax+20]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+50] //MiscPowers Container
  push eax //added to stack
  mov eax, [eax+20]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+50] //MiscPowers Container
  mov eax, [eax+28]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+50] //MiscPowers Container
  mov eax, [eax+30]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+58] //AttackPowers container
  mov eax, [eax+20]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+58] //AttackPowers container
  mov eax, [eax+28]
  mov [eax+68], 0
  mov eax, [rsi+48] //Stats Container
  mov eax, [eax+58] //AttackPowers container
  mov eax, [eax+30]
  mov [eax+68], 0
  //Edit Saved Current Health
  mov eax, [rsi+70]
  mov [eax+48],(int)99
  //Edit Calculated Max Health
  pop eax //return to original stack
  movsxd  rax,dword ptr [rsi+00000120]
  mov eax, (int)99
  jmp return

MakeHeathens:
  //Set all Stats to 1
  mov [eax+78],(int)1
  mov [eax+7C],(int)1
  mov [eax+80],(int)1
  mov [eax+84],(int)1
  mov [eax+88],(int)1
  mov [eax+8C],(int)1
  //Edit Calculated Max Health
  pop eax //return to original stack
  movsxd  rax,dword ptr [rsi+00000120]
  mov eax, (int)10
  jmp return

WeAreGods:
  jmp code
  nop
  nop
return:
registersymbol(WeAreGods)

[DISABLE]

WeAreGods:
  db 48 63 86 20 01 00 00

unregistersymbol(WeAreGods)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 115A230C

115A22F4: 01 50 00                       -  add [rax+00],edx
115A22F7: 00 00                          -  add [rax],al
115A22F9: 00 00                          -  add [rax],al
115A22FB: 00 00                          -  add [rax],al
115A22FD: 00 00                          -  add [rax],al
115A22FF: 00 55 48                       -  add [rbp+48],dl
115A2302: 8B EC                          -  mov ebp,esp
115A2304: 56                             -  push rsi
115A2305: 48 83 EC 08                    -  sub rsp,08
115A2309: 48 8B F1                       -  mov rsi,rcx
// ---------- INJECTING HERE ----------
115A230C: 48 63 86 20 01 00 00           -  movsxd  rax,dword ptr [rsi+00000120]
// ---------- DONE INJECTING  ----------
115A2313: 83 F8 FF                       -  cmp eax,-01
115A2316: 75 18                          -  jne CharMainHandle:get_MaxHealth+30
115A2318: 48 8B CE                       -  mov rcx,rsi
115A231B: 48 83 EC 20                    -  sub rsp,20
115A231F: 49 BB 20 8F 57 11 00 00 00 00  -  mov r11,CharMainHandle:CalculateMaxHealth
115A2329: 41 FF D3                       -  call r11d
115A232C: 48 83 C4 20                    -  add rsp,20
115A2330: 48 63 86 20 01 00 00           -  movsxd  rax,dword ptr [rsi+00000120]
115A2337: 48 8B 75 F8                    -  mov rsi,[rbp-08]
115A233B: C9                             -  leave 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Set character HP to 99 and Enemy HP to 1 in Battle (Activate after HP changed once)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Overfall.exe
  Version: 
  Date   : 2016-03-02
  Author : kh

  This script does blah blah blah
}

[ENABLE]

aobscan(INJECT,48 63 4D F0 89 48 48) // should be unique
alloc(newmem,$1000,10F5B298)

label(code)
label(return)
label(NotMe)
label(Ouch)

newmem:

code:
//Rax 48+8 is 1 for me and 0 for everyone else
  cmp [rax+50],(int)1
  je NotMe
  movsxd  rcx,dword ptr [rbp-10]
  mov ecx,(int)99
  mov [rax+48],ecx
  jmp return

NotMe:
  cmp ecx,(int)1
  jg Ouch
  movsxd  rcx,dword ptr [rbp-10]
  mov [rax+48],ecx
  jmp return

Ouch:
  movsxd  rcx,dword ptr [rbp-10]
  mov ecx,(int)1
  mov [rax+48],ecx
  jmp return

INJECT:
  jmp code
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 48 63 4D F0 89 48 48

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 10F5B298

10F5B27B: 00 00                          -  add [rax],al
10F5B27D: 00 00                          -  add [rax],al
10F5B27F: 00 55 48                       -  add [rbp+48],dl
10F5B282: 8B EC                          -  mov ebp,esp
10F5B284: 57                             -  push rdi
10F5B285: 48 83 EC 08                    -  sub rsp,08
10F5B289: 48 8B F9                       -  mov rdi,rcx
10F5B28C: 48 89 55 F0                    -  mov [rbp-10],rdx
10F5B290: 48 8B 47 78                    -  mov rax,[rdi+78]
10F5B294: 48 63 4D F0                    -  movsxd  rcx,dword ptr [rbp-10]
// ---------- INJECTING HERE ----------
10F5B298: 89 48 48                       -  mov [rax+48],ecx
10F5B29B: 48 8B 87 00 01 00 00           -  mov rax,[rdi+00000100]
// ---------- DONE INJECTING  ----------
10F5B2A2: 48 85 C0                       -  test rax,rax
10F5B2A5: 74 2C                          -  je 10F5B2D3
10F5B2A7: 48 8B 87 00 01 00 00           -  mov rax,[rdi+00000100]
10F5B2AE: 48 8B 4F 78                    -  mov rcx,[rdi+78]
10F5B2B2: 48 63 49 48                    -  movsxd  rcx,dword ptr [rcx+48]
10F5B2B6: F2 0F 2A C1                    -  cvtsi2sd xmm0,ecx
10F5B2BA: 48 8B C8                       -  mov rcx,rax
10F5B2BD: F2 0F 10 C8                    -  movsd xmm1,xmm0
10F5B2C1: F2 0F 5A C9                    -  cvtsd2ss xmm1,xmm1
10F5B2C5: 48 83 EC 20                    -  sub rsp,20
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>66</ID>
      <Description>"Establish Game Setttings Pointer (Activate in Main Menu for starting resources to work, anywhere for others)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscan(GameStartEdit,04 00 00 00 02 00 00 00 02 00 00 00 05 00 00 00) // should be unique
registersymbol(GameStartEdit)

[DISABLE]

unregistersymbol(GameStartEdit)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>75</ID>
          <Description>"Easy Game Mode Toggle (Activate in Main Menu)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

GameStartEdit:
db 0F 27 00 00

GameStartEdit+4:
db 0F 27 00 00

GameStartEdit+8:
db 0F 27 00 00

GameStartEdit+C:
db 0F 27 00 00

GameStartEdit+14:
dd (float)5

GameStartEdit+18:
dd (float)10

GameStartEdit+1C:
dd (float)20

GameStartEdit+34:
db 9F 86 01 00

GameStartEdit+40:
db 63 00 00 00

[DISABLE]

GameStartEdit:
db 04 00 00 00

GameStartEdit+4:
db 02 00 00 00

GameStartEdit+8:
db 02 00 00 00

GameStartEdit+C:
db 05 00 00 00

GameStartEdit+14:
dd (float)1

GameStartEdit+18:
dd (float)2

GameStartEdit+1C:
dd (float)3

GameStartEdit+34:
db 12 00 00 00

GameStartEdit+40:
db 02 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"Starting Frags"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"Starting Dust"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>69</ID>
          <Description>"Starting Runes"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit+8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"Starting Food"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit+c</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"Small Reputation Rewards (Set to 20 for One Quest to Exalted)"</Description>
          <VariableType>Float</VariableType>
          <Address>GameStartEdit+14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"Medium Reputation Rewards"</Description>
          <VariableType>Float</VariableType>
          <Address>GameStartEdit+18</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"Large Reputation Rewards"</Description>
          <VariableType>Float</VariableType>
          <Address>GameStartEdit+1c</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>74</ID>
          <Description>"Legal Dust Limit"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit+34</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>77</ID>
          <Description>"Health Cured Per Food"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>GameStartEdit+40</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>SetFrags</Name>
      <Address>0C429400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TradeFrags</Name>
      <Address>108E8650</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TradeDust</Name>
      <Address>108E868E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TradeFood</Name>
      <Address>108E86D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Food</Name>
      <Address>0E954E57</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ReplaceFragDustRunes</Name>
      <Address>123521D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GameStartEdit</Name>
      <Address>43046058</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT</Name>
      <Address>112C61E4</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>108E85E8</Address>
      <Comment>SELECTS CURRENT DUST AND ADDS TO IT
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>108E862B</Address>
      <Comment>SELECTS CURRENT FOOD AND ADDS TO IT
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>108E8651</Address>
      <Comment>SETS FRAGS
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>108E868E</Address>
      <Comment>DUST + CURRENT DUST
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>108E86D4</Address>
      <Comment>FOOD + CURRENT FOOD
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
