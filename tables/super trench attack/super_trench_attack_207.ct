<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Globals"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(globals,$100000)
[DISABLE]

{ Globals:

  1000: Skill Points
  1004: Shooting gallery ammo pointer (int)
  1008: Shooting gallery health
  100C: Gold Quantity
  1010: Inventory quantity base (16 ints for quantity)
  1014: Health-&gt;ECX (index into memory for an entity?)
  1018: Health-&gt;EAX (index into array of structure size 0x324)
  101C: Health-&gt;EDI (base of structure array)
  1020: Health-&gt;Base (ECX+EDI, health at +60)
  1024: Health-&gt;Health
  1028: Inventory Base

  2000: bShootingGalleryHealth
  2004: bInfiniteAmmo
  2008: bFullHealth

}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>37</ID>
      <Description>"SCRIPT: Shooting Gallery Health"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-27
  Author : Jason

  This seems to be executed every frame in the shooting gallery to check health
}

[ENABLE]

aobscanmodule(INJECT_SHOOTING_GALLERY_HEALTH,Super Trench Attack.exe,85 F6 0F 8E 01 02 00 00) // should be unique

assert(INJECT_SHOOTING_GALLERY_HEALTH-14,8B 35 * * * * 8B 0D * * * * D8 C9 D9 99 * * * *) // validate instructions back to the one with the static address we're looking for

globalalloc(globals,$100000)

globals+1008:
  readmem(INJECT_SHOOTING_GALLERY_HEALTH-12,4)

alloc(newmem,$1000)

label(code)
label(foundGreaterHealth)
label(continue)
label(return)

newmem:
  dd 0

code:
  push eax
  mov eax, [globals+1008] // eax is now address where shooting gallery health is stored

  // esi now has health value
  cmp esi, [newmem]
  jg foundGreaterHealth

  // health is less than we've seen, update to max value we've seen
  mov esi, [newmem]
  mov [eax], esi
  jmp continue

foundGreaterHealth:
  // only update if cheat flag is set
  cmp dword ptr [globals+2000], 1
  jne continue
  mov [newmem], esi

continue:
  pop eax
  test esi,esi // original
  // original:  jng   "Super Trench Attack.exe"+A21A1
  // original return: "Super Trench Attack.exe"+A1FA0
  jng return+201
  jmp return

INJECT_SHOOTING_GALLERY_HEALTH:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_SHOOTING_GALLERY_HEALTH)

[DISABLE]

INJECT_SHOOTING_GALLERY_HEALTH:
  db 85 F6 0F 8E 01 02 00 00

unregistersymbol(INJECT_SHOOTING_GALLERY_HEALTH)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+A1F98

"Super Trench Attack.exe"+A1F6B: 74 11                 -  je "Super Trench Attack.exe"+A1F7E
"Super Trench Attack.exe"+A1F6D: DD D8                 -  fstp st(0)
"Super Trench Attack.exe"+A1F6F: DB 05 A4 3B 9D 01     -  fild dword ptr ["Super Trench Attack.exe"+E03BA4]
"Super Trench Attack.exe"+A1F75: D8 3D 5C 46 9D 01     -  fdivr dword ptr ["Super Trench Attack.exe"+E0465C]
"Super Trench Attack.exe"+A1F7B: D9 55 FC              -  fst dword ptr [ebp-04]
"Super Trench Attack.exe"+A1F7E: DB 05 A8 41 9D 01     -  fild dword ptr ["Super Trench Attack.exe"+E041A8]
"Super Trench Attack.exe"+A1F84: 8B 35 A8 41 9D 01     -  mov esi,["Super Trench Attack.exe"+E041A8]
"Super Trench Attack.exe"+A1F8A: 8B 0D 6C 83 CC 00     -  mov ecx,["Super Trench Attack.exe"+F836C]
"Super Trench Attack.exe"+A1F90: D8 C9                 -  fmul st(0),st(1)
"Super Trench Attack.exe"+A1F92: D9 99 FC 41 00 00     -  fstp dword ptr [ecx+000041FC]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+A1F98: 85 F6                 -  test esi,esi
"Super Trench Attack.exe"+A1F9A: 0F 8E 01 02 00 00     -  jng "Super Trench Attack.exe"+A21A1
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+A1FA0: 99                    -  cdq 
"Super Trench Attack.exe"+A1FA1: F7 FE                 -  idiv esi
"Super Trench Attack.exe"+A1FA3: 83 F8 03              -  cmp eax,03
"Super Trench Attack.exe"+A1FA6: 0F 8E D5 00 00 00     -  jng "Super Trench Attack.exe"+A2081
"Super Trench Attack.exe"+A1FAC: 80 3D A7 3D 9D 01 00  -  cmp byte ptr ["Super Trench Attack.exe"+E03DA7],00
"Super Trench Attack.exe"+A1FB3: 0F 85 DF 01 00 00     -  jne "Super Trench Attack.exe"+A2198
"Super Trench Attack.exe"+A1FB9: 83 B9 3C 42 00 00 00  -  cmp dword ptr [ecx+0000423C],00
"Super Trench Attack.exe"+A1FC0: 0F 8C D2 01 00 00     -  jl "Super Trench Attack.exe"+A2198
"Super Trench Attack.exe"+A1FC6: 8B 91 44 42 00 00     -  mov edx,[ecx+00004244]
"Super Trench Attack.exe"+A1FCC: 85 D2                 -  test edx,edx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>43</ID>
      <Description>"SCRIPT: Ammo Use"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This is where EDI is set to -1 to be added to current clip ammo when shooting
  a gun.
}

[ENABLE]

aobscanmodule(INJECT_AMMO_USE,Super Trench Attack.exe,56 57 83 CF FF) // should be unique

globalalloc(globals,$100000)

alloc(newmem,$1000)

label(code)
label(skipCheat)
label(continue)
label(return)

newmem:

code:
{ original code:
  push esi
  push edi
  or edi,-01 // edi will be -1, to be removed from ammo.  change to xor edi,edi
}
  push esi
  push edi
  cmp dword ptr [globals+2004], 1
  jne skipCheat
  xor edi,edi
  jmp continue

skipCheat:
  or edi,-01
continue:
  xor edi,edi
  jmp return

INJECT_AMMO_USE:
  jmp code
return:
registersymbol(INJECT_AMMO_USE)

[DISABLE]

INJECT_AMMO_USE:
  db 56 57 83 CF FF

unregistersymbol(INJECT_AMMO_USE)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+4D94A

"Super Trench Attack.exe"+4D92E: C3                             -  ret 
"Super Trench Attack.exe"+4D92F: CC                             -  int 3 
"Super Trench Attack.exe"+4D930: 55                             -  push ebp
"Super Trench Attack.exe"+4D931: 8B EC                          -  mov ebp,esp
"Super Trench Attack.exe"+4D933: 83 E4 F8                       -  and esp,-08
"Super Trench Attack.exe"+4D936: 83 EC 34                       -  sub esp,34
"Super Trench Attack.exe"+4D939: 8B 0D D4 52 CC 00              -  mov ecx,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+4D93F: D9 05 B8 33 CC 00              -  fld dword ptr ["Super Trench Attack.exe"+F33B8]
"Super Trench Attack.exe"+4D945: 53                             -  push ebx
"Super Trench Attack.exe"+4D946: D9 54 24 08                    -  fst dword ptr [esp+08]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+4D94A: 56                             -  push esi
"Super Trench Attack.exe"+4D94B: 57                             -  push edi
"Super Trench Attack.exe"+4D94C: 83 CF FF                       -  or edi,-01
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+4D94F: 83 7D 1C 00                    -  cmp dword ptr [ebp+1C],00
"Super Trench Attack.exe"+4D953: 8B F1                          -  mov esi,ecx
"Super Trench Attack.exe"+4D955: 89 74 24 14                    -  mov [esp+14],esi
"Super Trench Attack.exe"+4D959: C6 44 24 0E 00                 -  mov byte ptr [esp+0E],00
"Super Trench Attack.exe"+4D95E: C7 44 24 20 00 00 00 00        -  mov [esp+20],00000000
"Super Trench Attack.exe"+4D966: C6 44 24 0F 01                 -  mov byte ptr [esp+0F],01
"Super Trench Attack.exe"+4D96B: 89 7C 24 28                    -  mov [esp+28],edi
"Super Trench Attack.exe"+4D96F: 7F 07                          -  jg "Super Trench Attack.exe"+4D978
"Super Trench Attack.exe"+4D971: C7 45 1C 01 00 00 00           -  mov [ebp+1C],00000001
"Super Trench Attack.exe"+4D978: 80 7D 18 00                    -  cmp byte ptr [ebp+18],00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"SCRIPT: Gold/Inventory"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  Here we compare the amount of gold in inventory with 250 to display a
  different icon if higher.  This happens every frame.

  "Super Trench Attack.exe"+DFC200 is start, last place is 19CC23C or +3C, so
  16 inventory slots, top-left is 0, bottom-right is 15.  No quantity for
  items like weapons, but gold and ammo have them.  Grenades have '1'.

  Immediately after those 0x40 bytes is another 0x40 bytes with type (decimal)

  1:  Gold
  2:  Rifle Ammo
  3:  Health Kit
  4:  Ampule
  5:  ?Ampule Unknown, no tooltip?
  6:  Rifle (shotgun 16*, need 7 to the right and this qty 1)
  7:  Rifle22
  8:
  9:
  10: Training (pistol 5*)
  12: Weber (pistol 7*)
  13: Pistol Ammo
  14:
  15: Tin Hat (A+1) (QTY IS ARMOR
  18: Shoes (A+1)
  21: Medal (Misc.)
  23: Apple (H+1)
  25: Book (XP+1)
  26: Fish (H+1)
  27: Watch
  29: Grenades
  31: Spare Parts B
  33,34: Combat Shotgun 50* (says "Hunter", no ammo)
  35: Shotgun Shells
  41: Bullets
  42: Card Mona
  43: Gold Apple
  44: Gun Parts (for gold?)
  45: Bread
  48: Ammo Crate?
  51: Bayonet?
  55: Trap (0=Decoy, health special)
           (1=Mine, FFFFFFFF special)


Ok, inventory Items are AT LEAST 4 things, probably 5 more at least
"Super Trench Attack.exe"+DFC200 is the start of what I think is "Type"
They seem to be arrays of 16 integer values. 0000: A, 0040: b, 0080: C, 00C0: D,
0100: E, 0140: F, 0180: G, 01C0: H, 0200: I, 0240: J

0140: Special:
      200 for decoy trap (55) CURRENT health
      -1 (FFFFFFFF) for grenades
0180: ?? - 1 for decoy trap (55), 12 for grenades (29) and pistol (10)
      Clip for weapons
01C0: 6 for Grenades (29)
      Type for Medals (21)
            0: Armor
            1: Health
            2: Grenade
            3: Pistol
            4: Rifle
            5: ?ammo? - percent*3 instead of + (i.e. 9% instead of +3)
            6: Gold %
            7: Boots + (speed?  Even +999 isn't much, but seem to help backpedalling)
            8: Health Pickup %
            9: XP %
            10, 11: NOTHING?

0200: Quantity/Bonus for medals and armor/Ammo quantity/Gold
      amount of health healed for apples, health kits, etc
      quantity for ammo
      Type for weapons:
          6/7 weapon (rifle) (set type of both slots)
              0: ?
              1: Hunter (16*)
              2: Enfield (18*)
              3: Enfield-K (21*)
              4: Mauser (23*)
              5: Mauser-K (25*)
              6: Carbine (29*)
              7: Carbine-K (32*)
              8: Gewehr (34*)
              9: Gewehr-K (39*)
              10: Heinrich (42*)
              11: Heinrich-K (44*)
              12: Winchester (80*)
          10 weapon (pistol)
              0: Training (5*)
              1: Webley (7*)
              2: Luger (9*)
              3: Luger-K (12*)
              4: Weston (14*)
              5: Weston-K (16*)
              6: Mauser (20*)
              7: Mauser-K (23*)
              8: Colt (25*)
              9: Colt-K (30*)
              10: Savage (32*)
              11: Savage-K (34*)
              12: Navy Colt (60*)
          33/34 weapon (shotgun) (set type for both slots)
              0: Farmers (24*)
              1: Hunter (50*) - might not be great



0240: Type




}

[ENABLE]

aobscanmodule(INJECT_GOLD_COMPARE1,Super Trench Attack.exe,81 3B FA 00 00 00 A3) // should be unique

globalalloc(globals,$100000)

globals+1010:
  readmem(INJECT_GOLD_COMPARE1-8,4)

alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [globals+100c],ebx
  cmp [ebx],000000FA
  jmp return

INJECT_GOLD_COMPARE1:
  jmp code
  nop
return:
registersymbol(INJECT_GOLD_COMPARE1)

[DISABLE]

INJECT_GOLD_COMPARE1:
  db 81 3B FA 00 00 00

unregistersymbol(INJECT_GOLD_COMPARE1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+C907E

"Super Trench Attack.exe"+C9054: 83 C4 0C                 -  add esp,0C
"Super Trench Attack.exe"+C9057: 8B 45 FC                 -  mov eax,[ebp-04]
"Super Trench Attack.exe"+C905A: 39 3C 85 40 C2 9C 01     -  cmp [eax*4+"Super Trench Attack.exe"+DFC240],edi
"Super Trench Attack.exe"+C9061: 75 6A                    -  jne "Super Trench Attack.exe"+C90CD
"Super Trench Attack.exe"+C9063: D9 E8                    -  fld1 
"Super Trench Attack.exe"+C9065: 8B 0D 0C 81 CC 00        -  mov ecx,["Super Trench Attack.exe"+F810C]
"Super Trench Attack.exe"+C906B: 8B D6                    -  mov edx,esi
"Super Trench Attack.exe"+C906D: 69 D2 24 03 00 00        -  imul edx,edx,00000324
"Super Trench Attack.exe"+C9073: 8D 1C 85 00 C2 9C 01     -  lea ebx,[eax*4+"Super Trench Attack.exe"+DFC200]
"Super Trench Attack.exe"+C907A: D9 5C 0A 68              -  fstp dword ptr [edx+ecx+68]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+C907E: 81 3B FA 00 00 00        -  cmp [ebx],000000FA // compare gold with 250
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+C9084: A3 4C 53 CC 00           -  mov ["Super Trench Attack.exe"+F534C],eax
"Super Trench Attack.exe"+C9089: 7D 18                    -  jnl "Super Trench Attack.exe"+C90A3
"Super Trench Attack.exe"+C908B: 57                       -  push edi
"Super Trench Attack.exe"+C908C: 6A 02                    -  push 02
"Super Trench Attack.exe"+C908E: 57                       -  push edi
"Super Trench Attack.exe"+C908F: 8B CF                    -  mov ecx,edi
"Super Trench Attack.exe"+C9091: 8B C6                    -  mov eax,esi
"Super Trench Attack.exe"+C9093: E8 F8 EC F8 FF           -  call "Super Trench Attack.exe"+57D90
"Super Trench Attack.exe"+C9098: 83 C4 0C                 -  add esp,0C
"Super Trench Attack.exe"+C909B: 81 3B FA 00 00 00        -  cmp [ebx],000000FA
Super Trench Attack.exe+C90A1 - 7C 11                 - jnge "Super Trench Attack.exe"+C90B4
Super Trench Attack.exe+C90A3 - 57                    - push edi
Super Trench Attack.exe+C90A4 - 6A 02                 - push 02
Super Trench Attack.exe+C90A6 - 6A 02                 - push 02
Super Trench Attack.exe+C90A8 - 8B CF                 - mov ecx,edi
Super Trench Attack.exe+C90AA - 8B C6                 - mov eax,esi
Super Trench Attack.exe+C90AC - E8 DFECF8FF           - call "Super Trench Attack.exe"+57D90
Super Trench Attack.exe+C90B1 - 83 C4 0C              - add esp,0C
Super Trench Attack.exe+C90B4 - 81 3B E8030000        - cmp [ebx],000003E8 // compare gold with 1000
Super Trench Attack.exe+C90BA - 7C 11                 - jnge "Super Trench Attack.exe"+C90CD
Super Trench Attack.exe+C90BC - 57                    - push edi
Super Trench Attack.exe+C90BD - 6A 02                 - push 02
Super Trench Attack.exe+C90BF - 6A 03                 - push 03
Super Trench Attack.exe+C90C1 - 8B CF                 - mov ecx,edi
Super Trench Attack.exe+C90C3 - 8B C6                 - mov eax,esi
Super Trench Attack.exe+C90C5 - E8 C6ECF8FF           - call "Super Trench Attack.exe"+57D90
Super Trench Attack.exe+C90CA - 83 C4 0C              - add esp,0C
Super Trench Attack.exe+C90CD - 8B 45 FC              - mov eax,[ebp-04]
Super Trench Attack.exe+C90D0 - 83 3C 85 40C29C01 2C  - cmp dword ptr [eax*4+"Super Trench Attack.exe"+DFC240],2C
Super Trench Attack.exe+C90D8 - 75 65                 - jne "Super Trench Attack.exe"+C913F
Super Trench Attack.exe+C90DA - D9E8                  - fld1
Super Trench Attack.exe+C90DC - 8B 0D 0C81CC00        - mov ecx,["Super Trench Attack.exe"+F810C]
Super Trench Attack.exe+C90E2 - 8B D6                 - mov edx,esi
Super Trench Attack.exe+C90E4 - 69 D2 24030000        - imul edx,edx,00000324
Super Trench Attack.exe+C90EA - 8D 1C 85 00C29C01     - lea ebx,[eax*4+"Super Trench Attack.exe"+DFC200]
Super Trench Attack.exe+C90F1 - D9 5C 0A 68           - fstp dword ptr [edx+ecx+68]
Super Trench Attack.exe+C90F5 - 81 3B FA000000        - cmp [ebx],000000FA
Super Trench Attack.exe+C90FB - 7D 18                 - jnl "Super Trench Attack.exe"+C9115
Super Trench Attack.exe+C90FD - 57                    - push edi
Super Trench Attack.exe+C90FE - 6A 02                 - push 02
Super Trench Attack.exe+C9100 - 57                    - push edi
Super Trench Attack.exe+C9101 - 8B CF                 - mov ecx,edi
Super Trench Attack.exe+C9103 - 8B C6                 - mov eax,esi
Super Trench Attack.exe+C9105 - E8 86ECF8FF           - call "Super Trench Attack.exe"+57D90
Super Trench Attack.exe+C910A - 83 C4 0C              - add esp,0C
Super Trench Attack.exe+C910D - 81 3B FA000000        - cmp [ebx],000000FA
Super Trench Attack.exe+C9113 - 7C 11                 - jnge "Super Trench Attack.exe"+C9126
Super Trench Attack.exe+C9115 - 57                    - push edi
Super Trench Attack.exe+C9116 - 6A 02                 - push 02
Super Trench Attack.exe+C9118 - 6A 02                 - push 02
Super Trench Attack.exe+C911A - 8B CF                 - mov ecx,edi
Super Trench Attack.exe+C911C - 8B C6                 - mov eax,esi
Super Trench Attack.exe+C911E - E8 6DECF8FF           - call "Super Trench Attack.exe"+57D90
Super Trench Attack.exe+C9123 - 83 C4 0C              - add esp,0C
Super Trench Attack.exe+C9126 - 81 3B E8030000        - cmp [ebx],000003E8
Super Trench Attack.exe+C912C - 7C 11                 - jnge "Super Trench Attack.exe"+C913F

}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"SCRIPT: Health"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-27
  Author : Jason

  Compares health with max health each frame.
}

[ENABLE]

aobscanmodule(INJECT_HEALTH,Super Trench Attack.exe,39 54 39 60 8D 4C 39 60) // should be unique

globalalloc(globals,$100000)

alloc(newmem,$1000)

label(code)
label(skip)
label(return)

newmem:

code:
  mov [globals+1014],ecx
  mov [globals+1018],eax
  mov [globals+101C],edi
  lea ecx,[ecx+edi]
  mov [globals+1020],ecx
  lea ecx,[ecx+60] // ecx is final address
  mov [globals+1024],ecx
  // should we cheat?
  cmp dword ptr [globals+2008],1
  jne skip

  mov [ecx],edx // store full health in current health

skip:
  cmp [ecx],edx
  jmp return

  { old cheat - always cheat, works fine
  mov [ecx+edi+60],edx
  cmp [ecx+edi+60],edx
  lea ecx,[ecx+edi+60] // done earlier
  jmp return
  }

INJECT_HEALTH:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT_HEALTH)

[DISABLE]

INJECT_HEALTH:
  db 39 54 39 60 8D 4C 39 60

unregistersymbol(INJECT_HEALTH)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+C7877

"Super Trench Attack.exe"+C7846: D9 55 FC           -  fst dword ptr [ebp-04]
"Super Trench Attack.exe"+C7849: 8B 3D 6C 83 CC 00  -  mov edi,["Super Trench Attack.exe"+F836C]
"Super Trench Attack.exe"+C784F: 8B 35 0C 81 CC 00  -  mov esi,["Super Trench Attack.exe"+F810C]
"Super Trench Attack.exe"+C7855: 39 1D 8C 52 CC 00  -  cmp ["Super Trench Attack.exe"+F528C],ebx
"Super Trench Attack.exe"+C785B: 0F 85 8C 01 00 00  -  jne "Super Trench Attack.exe"+C79ED
"Super Trench Attack.exe"+C7861: A1 D4 52 CC 00     -  mov eax,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+C7866: 83 F8 FF           -  cmp eax,-01
"Super Trench Attack.exe"+C7869: 0F 84 7E 01 00 00  -  je "Super Trench Attack.exe"+C79ED
"Super Trench Attack.exe"+C786F: 8B C8              -  mov ecx,eax
"Super Trench Attack.exe"+C7871: 69 C9 24 03 00 00  -  imul ecx,ecx,00000324
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+C7877: 39 54 39 60        -  cmp [ecx+edi+60],edx
"Super Trench Attack.exe"+C787B: 8D 4C 39 60        -  lea ecx,[ecx+edi+60]
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+C787F: 7E 07              -  jle "Super Trench Attack.exe"+C7888
"Super Trench Attack.exe"+C7881: 89 11              -  mov [ecx],edx
"Super Trench Attack.exe"+C7883: A1 D4 52 CC 00     -  mov eax,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+C7888: 69 C0 24 03 00 00  -  imul eax,eax,00000324
"Super Trench Attack.exe"+C788E: DA 4C 38 60        -  fimul [eax+edi+60]
"Super Trench Attack.exe"+C7892: D9 9E BC 0F 00 00  -  fstp dword ptr [esi+00000FBC]
"Super Trench Attack.exe"+C7898: A1 D4 52 CC 00     -  mov eax,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+C789D: 8B D0              -  mov edx,eax
"Super Trench Attack.exe"+C789F: 69 D2 24 03 00 00  -  imul edx,edx,00000324
"Super Trench Attack.exe"+C78A5: 39 5C 3A 60        -  cmp [edx+edi+60],ebx
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"SCRIPT: Find Skill Point Pointer"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This is near where available skill point static pointer is
}

[ENABLE]

aobscanmodule(STATIC_SkillPoints,Super Trench Attack.exe,0F 85 C6 00 00 00 A1) // should be unique

globalalloc(globals,$100000)

globals+1000:
  readmem(STATIC_SkillPoints+15,4)

[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+B7D37

"Super Trench Attack.exe"+B7D07: D9 90 C4 61 00 00     -  fst dword ptr [eax+000061C4]
"Super Trench Attack.exe"+B7D0D: D9 90 30 6B 00 00     -  fst dword ptr [eax+00006B30]
"Super Trench Attack.exe"+B7D13: D9 90 54 6E 00 00     -  fst dword ptr [eax+00006E54]
"Super Trench Attack.exe"+B7D19: D9 98 9C 74 00 00     -  fstp dword ptr [eax+0000749C]
"Super Trench Attack.exe"+B7D1F: FF D6                 -  call esi
"Super Trench Attack.exe"+B7D21: 68 BB 2A CA 00        -  push "Super Trench Attack.exe"+D2ABB
"Super Trench Attack.exe"+B7D26: 68 84 03 CD 00        -  push "Super Trench Attack.exe"+100384
"Super Trench Attack.exe"+B7D2B: FF D6                 -  call esi
"Super Trench Attack.exe"+B7D2D: 83 C4 10              -  add esp,10
"Super Trench Attack.exe"+B7D30: 80 3D 2F 3D 9D 01 01  -  cmp byte ptr ["Super Trench Attack.exe"+E03D2F],01
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+B7D37: 0F 85 C6 00 00 00     -  jne "Super Trench Attack.exe"+B7E03
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+B7D3D: A1 0C 81 CC 00        -  mov eax,["Super Trench Attack.exe"+F810C]
"Super Trench Attack.exe"+B7D42: D9 E8                 -  fld1 
"Super Trench Attack.exe"+B7D44: D9 90 D4 09 00 00     -  fst dword ptr [eax+000009D4]
"Super Trench Attack.exe"+B7D4A: 83 3D A8 3D 9D 01 00  -  cmp dword ptr ["Super Trench Attack.exe"+E03DA8],00 // COMPARE available skill points with 0
"Super Trench Attack.exe"+B7D51: D9 80 6C 09 00 00     -  fld dword ptr [eax+0000096C]
"Super Trench Attack.exe"+B7D57: D8 05 C8 36 CC 00     -  fadd dword ptr ["Super Trench Attack.exe"+F36C8]
"Super Trench Attack.exe"+B7D5D: D9 1D 54 FF CC 00     -  fstp dword ptr ["Super Trench Attack.exe"+FFF54]
"Super Trench Attack.exe"+B7D63: D9 80 78 09 00 00     -  fld dword ptr [eax+00000978]
"Super Trench Attack.exe"+B7D69: D9 05 FC 3B CC 00     -  fld dword ptr ["Super Trench Attack.exe"+F3BFC]
"Super Trench Attack.exe"+B7D6F: DC E9                 -  fsub st(1),st(0)
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"SCRIPT: Find Shooting Gallery Ammo Pointer"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This is some code just after decreasing shooting gallery ammunition
}

[ENABLE]

aobscanmodule(INJECT_SHOOTING_GALLERY,Super Trench Attack.exe,05 FA 00 00 00 80 7D) // should be unique

globalalloc(globals,$100000)

globals+1004:
  readmem(INJECT_SHOOTING_GALLERY-24,4)

[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+9BC70

"Super Trench Attack.exe"+9BC30: 80 3D 50 46 9D 01 00           -  cmp byte ptr ["Super Trench Attack.exe"+E04650],00
"Super Trench Attack.exe"+9BC37: 0F 85 E2 FE FF FF              -  jne "Super Trench Attack.exe"+9BB1F
"Super Trench Attack.exe"+9BC3D: 80 3D 58 D4 9C 01 00           -  cmp byte ptr ["Super Trench Attack.exe"+DFD458],00
"Super Trench Attack.exe"+9BC44: 0F 85 D5 FE FF FF              -  jne "Super Trench Attack.exe"+9BB1F
"Super Trench Attack.exe"+9BC4A: FF 0D B8 7A CC 00              -  dec ["Super Trench Attack.exe"+F7AB8]  // DECREASE AMMO IN SHOOTING GALLERY
"Super Trench Attack.exe"+9BC50: 0F 88 C2 FE FF FF              -  js "Super Trench Attack.exe"+9BB18
"Super Trench Attack.exe"+9BC56: C7 81 28 41 00 00 1D 00 00 00  -  mov [ecx+00004128],0000001D
"Super Trench Attack.exe"+9BC60: E8 DB 69 F6 FF                 -  call "Super Trench Attack.exe"+2640
"Super Trench Attack.exe"+9BC65: E8 56 5E 03 00                 -  call "Super Trench Attack.exe"+D1AC0
"Super Trench Attack.exe"+9BC6A: 8B 0D 6C 83 CC 00              -  mov ecx,["Super Trench Attack.exe"+F836C]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+9BC70: 05 FA 00 00 00                 -  add eax,000000FA
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+9BC75: 80 7D FE 00                    -  cmp byte ptr [ebp-02],00
"Super Trench Attack.exe"+9BC79: 89 81 2C 41 00 00              -  mov [ecx+0000412C],eax
"Super Trench Attack.exe"+9BC7F: C6 05 4C 43 9D 01 01           -  mov byte ptr ["Super Trench Attack.exe"+E0434C],01
"Super Trench Attack.exe"+9BC86: 0F 85 93 FE FF FF              -  jne "Super Trench Attack.exe"+9BB1F
"Super Trench Attack.exe"+9BC8C: D9 05 F8 41 9D 01              -  fld dword ptr ["Super Trench Attack.exe"+E041F8]
"Super Trench Attack.exe"+9BC92: 6A FF                          -  push -01
"Super Trench Attack.exe"+9BC94: D9 05 E0 33 CC 00              -  fld dword ptr ["Super Trench Attack.exe"+F33E0]
"Super Trench Attack.exe"+9BC9A: 6A 00                          -  push 00
"Super Trench Attack.exe"+9BC9C: 6A 00                          -  push 00
"Super Trench Attack.exe"+9BC9E: DC E9                          -  fsub st(1),st(0)
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"SCRIPT: Find Inventory Pointer"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-28
  Author : Jason

  Finds inventory base pointer
}

[ENABLE]

aobscanmodule(INJECT_INVENTORY,Super Trench Attack.exe,DD DD D9 CB D9 CC) // should be unique

globalalloc(globals,$100000)

globals+1028:
  readmem(INJECT_INVENTORY+19,4)

[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+2E30

"Super Trench Attack.exe"+2E12: DD DD                    -  fstp st(5)
"Super Trench Attack.exe"+2E14: D9 05 E4 35 CC 00        -  fld dword ptr ["Super Trench Attack.exe"+F35E4]
"Super Trench Attack.exe"+2E1A: D9 CD                    -  fxch st(5)
"Super Trench Attack.exe"+2E1C: 83 F8 0B                 -  cmp eax,0B
"Super Trench Attack.exe"+2E1F: 75 0A                    -  jne "Super Trench Attack.exe"+2E2B
"Super Trench Attack.exe"+2E21: DD DD                    -  fstp st(5)
"Super Trench Attack.exe"+2E23: D9 05 E0 35 CC 00        -  fld dword ptr ["Super Trench Attack.exe"+F35E0]
"Super Trench Attack.exe"+2E29: D9 CD                    -  fxch st(5)
"Super Trench Attack.exe"+2E2B: 83 F8 0C                 -  cmp eax,0C
"Super Trench Attack.exe"+2E2E: 75 47                    -  jne "Super Trench Attack.exe"+2E77
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+2E30: DD DD                    -  fstp st(5)
"Super Trench Attack.exe"+2E32: D9 CB                    -  fxch st(3)
"Super Trench Attack.exe"+2E34: D9 CC                    -  fxch st(4)
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+2E36: D9 CB                    -  fxch st(3)
"Super Trench Attack.exe"+2E38: 85 DB                    -  test ebx,ebx
"Super Trench Attack.exe"+2E3A: 75 3F                    -  jne "Super Trench Attack.exe"+2E7B
"Super Trench Attack.exe"+2E3C: 83 3C 8D C0 C1 9C 01 01  -  cmp dword ptr [ecx*4+"Super Trench Attack.exe"+DFC1C0],01
"Super Trench Attack.exe"+2E44: 75 09                    -  jne "Super Trench Attack.exe"+2E4F
"Super Trench Attack.exe"+2E46: DB 04 8D 40 C1 9C 01     -  fild dword ptr [ecx*4+"Super Trench Attack.exe"+DFC140]
"Super Trench Attack.exe"+2E4D: DE C5                    -  faddp st(5),st(0)
"Super Trench Attack.exe"+2E4F: D9 CC                    -  fxch st(4)
"Super Trench Attack.exe"+2E51: E8 6A EC 0C 00           -  call "Super Trench Attack.exe"+D1AC0
"Super Trench Attack.exe"+2E56: 8B 4D 08                 -  mov ecx,[ebp+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>39</ID>
      <Description>"+ Cheats (enable all scripts first)"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>40</ID>
          <Description>"CHEAT: Shooting Gallery Health"</Description>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Simple script that sets a value in global memory to 1 when enabled and 0
  when disabled that can be checked by a script. }

globalalloc(globals,$100000)

[ENABLE]
globals+2000:
  dd 1

[DISABLE]
globals+2000:
  dd 0


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"CHEAT: No Ammo Use"</Description>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Simple script that sets a value in global memory to 1 when enabled and 0
  when disabled that can be checked by a script. }

globalalloc(globals,$100000)

[ENABLE]
globals+2004:
  dd 1

[DISABLE]
globals+2004:
  dd 0


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>45</ID>
          <Description>"CHEAT: Full Health"</Description>
          <LastState Activated="1"/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Simple script that sets a value in global memory to 1 when enabled and 0
  when disabled that can be checked by a script. }

globalalloc(globals,$100000)

[ENABLE]
globals+2008:
  dd 1

[DISABLE]
globals+2008:
  dd 0


</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>41</ID>
      <Description>"+ Values (enable all scripts first)"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Skill Points"</Description>
          <LastState Value="0" Activated="0" RealAddress="019D3DA8"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1000</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Shooting Gallery Ammo"</Description>
          <LastState Value="5" Activated="0" RealAddress="00CC7AB8"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1004</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Shooting Gallery Health"</Description>
          <LastState Value="502" Activated="0" RealAddress="019D41A8"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+1008</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>47</ID>
          <Description>"Gold"</Description>
          <LastState Value="55128" Activated="0" RealAddress="019CC23C"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>globals+100C</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"&lt;----- INVENTORY README -----&gt; (double-click &lt;script&gt; to read)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
[DISABLE]

{ Inventory README:

Inventory seems to be an array of 16 integer arrays.  Type seems to be the main
driver, other values can change depending on type.  For instance "Quantity/
Bonus/Weapon Type" is quantity for gold and ammo clips, it's the pistol or
rifle type for those, and it's the bonus amount for + items like medals, armor
and health kits.  Rifles and Shotguns need to have the type set for both
inventory slots, i.e. 6 on the left slot and 7 on the right slot for rifles
and 33 on the left slot and 34 on the right slot for shotguns.  Other values
should be the same for both.


Type:
  1:  Gold
  2:  Rifle Ammo
  3:  Health Kit
  4:  Ampule
  6:  Rifle (shotgun 16*, need 7 to the right and this qty 1)
  10: Pistol
  12: Rifle?
  13: Pistol Ammo
  15: Tin Hat
  18: Shoes
  21: Medal
  23: Apple
  25: Book
  26: Fish
  27: Watch
  29: Grenades
  31: Spare Parts B
  33,34: Combat Shotgun 50*
  35: Shotgun Shells
  41: Bullets
  42: Card Mona
  43: Gold Apple
  44: Gun Parts (for gold?)
  45: Bread
  48: Ammo Crate?
  51: Bayonet?
  55: Trap (subtype 0=Decoy, special is decoy health (200 max))
           (subtype 1=Mine, FFFFFFFF special)

Quantity/Bonus/Weapon Type
  * Bonus for medals
  * Added health for health kits, apple
  * Ammo for ammo clip
  * Quantity for gold
  * Grenade Type (29)
      0: Stick Grenades
      1: Hand Grenades
      2: Molotovs
  * Pistol type (10):
      0: Training (5*)
      1: Webley (7*)
      2: Luger (9*)
      3: Luger-K (12*)
      4: Weston (14*)
      5: Weston-K (16*)
      6: Mauser (20*)
      7: Mauser-K (23*)
      8: Colt (25*)
      9: Colt-K (30*)
      10: Savage (32*)
      11: Savage-K (34*)
      12: Navy Colt (60*)
  * Rifle Type (6/7):
      1: Hunter (16*)
      2: Enfield (18*)
      3: Enfield-K (21*)
      4: Mauser (23*)
      5: Mauser-K (25*)
      6: Carbine (29*)
      7: Carbine-K (32*)
      8: Gewehr (34*)
      9: Gewehr-K (39*)
      10: Heinrich (42*)
      11: Heinrich-K (44*)
      12: Winchester (80*)
  * Shotgun Type (33/34):
      0: Farmers (24*)
      1: Hunter (50*) - might not be great


Medal Type (Quantity is bonus)
  0: Armor
  1: Health
  2: Grenade
  3: Pistol
  4: Rifle
  5: ?ammo? - percent*3 instead of + (i.e. 9% instead of +3)
  6: Gold %
  7: Boots + (speed?  Even +999 isn't much, but seem to help backpedalling)
  8: Health Pickup %
  9: XP %











The static start on my version seems to be 019CC140.  I would think 19CC000,
but values less than 140 don't seem to change based on inventory.  Example:

struct INVENTORY_STRUCT {
  int special[16];
  int clipBullets[16];
  int medalType[16];
  int quantity[16];
  int itemType[16];
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"+ Inventory 1"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>55</ID>
              <Description>"Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC240"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>100</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>54</ID>
              <Description>"Quantity/Bonus/Weapon Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC200"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>C0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Medal Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC1C0"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>80</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Clip Bullets"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC180"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>51</ID>
              <Description>"Special"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC140"/>
              <ShowAsSigned>1</ShowAsSigned>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"+ Inventory 2"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>57</ID>
              <Description>"Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC244"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>104</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>58</ID>
              <Description>"Quantity/Bonus/Weapon Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC204"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>C4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>59</ID>
              <Description>"Medal Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC1C4"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>84</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>60</ID>
              <Description>"Clip Bullets"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC184"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>44</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"Special"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC144"/>
              <ShowAsSigned>1</ShowAsSigned>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1028</Address>
              <Offsets>
                <Offset>4</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>38</ID>
      <Description>"-------------------- Test --------------------"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Old Script: Shooting Gallery Health"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-27
  Author : Jason

  Code shortly after this injection point compares the current health in the
  shooting game with 0.  This code is run every frame, so what the cheat does
  is compare the value at that address with the maximum value we've seen so
  far.  If greater, it sets the max value.  If the cheat is enabled and it
  is lesser, it sets it to the max value we've seen.
}

[ENABLE]

aobscanmodule(INJECT_SHOOTER_HEALTH,Super Trench Attack.exe,C1 E6 08 03 D6 03 10 8B 04 95 * * * * C7 81 4C) // should be unique
assert(INJECT_SHOOTER_HEALTH+1E,83 3d * * * * 0) // make sure the cmp instruction is in the right place
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  dd 0 // store max health we've seen

code:
  shl esi,08  // original code
  add edx,esi // original code

  jmp return

INJECT_SHOOTER_HEALTH:
  jmp code
return:
registersymbol(INJECT_SHOOTER_HEALTH)

[DISABLE]

INJECT_SHOOTER_HEALTH:
  db C1 E6 08 03 D6

unregistersymbol(INJECT_SHOOTER_HEALTH)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+A217A

"Super Trench Attack.exe"+A214F: 03 CE                          -  add ecx,esi
"Super Trench Attack.exe"+A2151: 8B 0C 8D E8 92 D2 00           -  mov ecx,[ecx*4+"Super Trench Attack.exe"+1592E8]
"Super Trench Attack.exe"+A2158: D9 45 FC                       -  fld dword ptr [ebp-04]
"Super Trench Attack.exe"+A215B: 03 CE                          -  add ecx,esi
"Super Trench Attack.exe"+A215D: 03 14 8D E8 92 D6 00           -  add edx,[ecx*4+"Super Trench Attack.exe"+1992E8]
"Super Trench Attack.exe"+A2164: 8B 0D 6C 83 CC 00              -  mov ecx,["Super Trench Attack.exe"+F836C]
"Super Trench Attack.exe"+A216A: 89 91 48 42 00 00              -  mov [ecx+00004248],edx
"Super Trench Attack.exe"+A2170: 8B 17                          -  mov edx,[edi]
"Super Trench Attack.exe"+A2172: 8B 33                          -  mov esi,[ebx]
"Super Trench Attack.exe"+A2174: 69 D2 08 02 01 00              -  imul edx,edx,00010208
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+A217A: C1 E6 08                       -  shl esi,08
"Super Trench Attack.exe"+A217D: 03 D6                          -  add edx,esi
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+A217F: 03 10                          -  add edx,[eax]
"Super Trench Attack.exe"+A2181: 8B 04 95 E8 92 D2 00           -  mov eax,[edx*4+"Super Trench Attack.exe"+1592E8]
"Super Trench Attack.exe"+A2188: C7 81 4C 42 00 00 02 00 00 00  -  mov [ecx+0000424C],00000002
"Super Trench Attack.exe"+A2192: 89 81 40 42 00 00              -  mov [ecx+00004240],eax
"Super Trench Attack.exe"+A2198: 83 3D A8 41 9D 01 00           -  cmp dword ptr ["Super Trench Attack.exe"+E041A8],00 // compare health to 0
"Super Trench Attack.exe"+A219F: 7F 08                          -  jg "Super Trench Attack.exe"+A21A9
"Super Trench Attack.exe"+A21A1: D9 EE                          -  fldz 
"Super Trench Attack.exe"+A21A3: D9 99 5C 42 00 00              -  fstp dword ptr [ecx+0000425C]
"Super Trench Attack.exe"+A21A9: A1 B0 7A CC 00                 -  mov eax,["Super Trench Attack.exe"+F7AB0]
"Super Trench Attack.exe"+A21AE: 83 F8 03                       -  cmp eax,03
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"TEST: Infinite Ammo"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_AMMO,Super Trench Attack.exe,56 57 83 CF FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
{ original code:
  push esi
  push edi
  or edi,-01 // edi will be -1, to be removed from ammo.  change to xor edi,edi
}
  push esi
  push edi
  xor edi,edi
  jmp return

TEST_AMMO:
  jmp code
return:
registersymbol(TEST_AMMO)

[DISABLE]

TEST_AMMO:
  db 56 57 83 CF FF

unregistersymbol(TEST_AMMO)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+4D94A

"Super Trench Attack.exe"+4D92E: C3                             -  ret 
"Super Trench Attack.exe"+4D92F: CC                             -  int 3 
"Super Trench Attack.exe"+4D930: 55                             -  push ebp
"Super Trench Attack.exe"+4D931: 8B EC                          -  mov ebp,esp
"Super Trench Attack.exe"+4D933: 83 E4 F8                       -  and esp,-08
"Super Trench Attack.exe"+4D936: 83 EC 34                       -  sub esp,34
"Super Trench Attack.exe"+4D939: 8B 0D D4 52 CC 00              -  mov ecx,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+4D93F: D9 05 B8 33 CC 00              -  fld dword ptr ["Super Trench Attack.exe"+F33B8]
"Super Trench Attack.exe"+4D945: 53                             -  push ebx
"Super Trench Attack.exe"+4D946: D9 54 24 08                    -  fst dword ptr [esp+08]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+4D94A: 56                             -  push esi
"Super Trench Attack.exe"+4D94B: 57                             -  push edi
"Super Trench Attack.exe"+4D94C: 83 CF FF                       -  or edi,-01
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+4D94F: 83 7D 1C 00                    -  cmp dword ptr [ebp+1C],00
"Super Trench Attack.exe"+4D953: 8B F1                          -  mov esi,ecx
"Super Trench Attack.exe"+4D955: 89 74 24 14                    -  mov [esp+14],esi
"Super Trench Attack.exe"+4D959: C6 44 24 0E 00                 -  mov byte ptr [esp+0E],00
"Super Trench Attack.exe"+4D95E: C7 44 24 20 00 00 00 00        -  mov [esp+20],00000000
"Super Trench Attack.exe"+4D966: C6 44 24 0F 01                 -  mov byte ptr [esp+0F],01
"Super Trench Attack.exe"+4D96B: 89 7C 24 28                    -  mov [esp+28],edi
"Super Trench Attack.exe"+4D96F: 7F 07                          -  jg "Super Trench Attack.exe"+4D978
"Super Trench Attack.exe"+4D971: C7 45 1C 01 00 00 00           -  mov [ebp+1C],00000001
"Super Trench Attack.exe"+4D978: 80 7D 18 00                    -  cmp byte ptr [ebp+18],00
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"TEST: Flame Damage"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-27
  Author : Jason

  Decreases health when walking over flames getting out of lab.
}

[ENABLE]

aobscanmodule(TEST_HEALTH_FLAMES,Super Trench Attack.exe,29 4C 38 60 8D 44 38 60) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  sub [eax+edi+60],ecx
  lea eax,[eax+edi+60]
  jmp return

TEST_HEALTH_FLAMES:
  jmp code
  nop
  nop
  nop
return:
registersymbol(TEST_HEALTH_FLAMES)

[DISABLE]

TEST_HEALTH_FLAMES:
  db 29 4C 38 60 8D 44 38 60

unregistersymbol(TEST_HEALTH_FLAMES)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+4F9BB

"Super Trench Attack.exe"+4F998: C7 45 F0 01 00 00 00     -  mov [ebp-10],00000001
"Super Trench Attack.exe"+4F99F: 8B 5D F0                 -  mov ebx,[ebp-10]
"Super Trench Attack.exe"+4F9A2: 8B CB                    -  mov ecx,ebx
"Super Trench Attack.exe"+4F9A4: 85 DB                    -  test ebx,ebx
"Super Trench Attack.exe"+4F9A6: 7F 05                    -  jg "Super Trench Attack.exe"+4F9AD
"Super Trench Attack.exe"+4F9A8: B9 01 00 00 00           -  mov ecx,00000001
"Super Trench Attack.exe"+4F9AD: 8B 45 0C                 -  mov eax,[ebp+0C]
"Super Trench Attack.exe"+4F9B0: 83 F8 FF                 -  cmp eax,-01
"Super Trench Attack.exe"+4F9B3: 74 0E                    -  je "Super Trench Attack.exe"+4F9C3
"Super Trench Attack.exe"+4F9B5: 69 C0 24 03 00 00        -  imul eax,eax,00000324
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+4F9BB: 29 4C 38 60              -  sub [eax+edi+60],ecx
"Super Trench Attack.exe"+4F9BF: 8D 44 38 60              -  lea eax,[eax+edi+60]
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+4F9C3: 83 3D D4 52 CC 00 FF     -  cmp dword ptr ["Super Trench Attack.exe"+F52D4],-01
"Super Trench Attack.exe"+4F9CA: 74 23                    -  je "Super Trench Attack.exe"+4F9EF
"Super Trench Attack.exe"+4F9CC: 83 7D 0C FF              -  cmp dword ptr [ebp+0C],-01
"Super Trench Attack.exe"+4F9D0: 74 1D                    -  je "Super Trench Attack.exe"+4F9EF
"Super Trench Attack.exe"+4F9D2: 8B 0D D4 52 CC 00        -  mov ecx,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+4F9D8: 39 4D 0C                 -  cmp [ebp+0C],ecx
"Super Trench Attack.exe"+4F9DB: 75 12                    -  jne "Super Trench Attack.exe"+4F9EF
"Super Trench Attack.exe"+4F9DD: 8B 55 0C                 -  mov edx,[ebp+0C]
"Super Trench Attack.exe"+4F9E0: 69 D2 24 03 00 00        -  imul edx,edx,00000324
"Super Trench Attack.exe"+4F9E6: 8B 44 3A 60              -  mov eax,[edx+edi+60]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"TEST: Damage"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  The following instruction removes damage from player (only?) health, looks
  like this instruction makes sure it is a minimum of 2, maybe after taking
  armor into account?  Should inject on jg before instead and zero eax to
  make damage zero?
}

[ENABLE]

aobscanmodule(TEST_Damage,Super Trench Attack.exe,B8 02 00 00 00 29) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,00000002
  jmp return

TEST_Damage:
  jmp code
return:
registersymbol(TEST_Damage)

[DISABLE]

TEST_Damage:
  db B8 02 00 00 00

unregistersymbol(TEST_Damage)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+4FABF

"Super Trench Attack.exe"+4FAA9: F7 E9              -  imul ecx
"Super Trench Attack.exe"+4FAAB: 03 D1              -  add edx,ecx
"Super Trench Attack.exe"+4FAAD: C1 FA 02           -  sar edx,02
"Super Trench Attack.exe"+4FAB0: 8B CA              -  mov ecx,edx
"Super Trench Attack.exe"+4FAB2: C1 E9 1F           -  shr ecx,1F
"Super Trench Attack.exe"+4FAB5: 03 CA              -  add ecx,edx
"Super Trench Attack.exe"+4FAB7: 8B C3              -  mov eax,ebx
"Super Trench Attack.exe"+4FAB9: 2B C1              -  sub eax,ecx
"Super Trench Attack.exe"+4FABB: 85 C0              -  test eax,eax
"Super Trench Attack.exe"+4FABD: 7F 05              -  jg "Super Trench Attack.exe"+4FAC4
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+4FABF: B8 02 00 00 00     -  mov eax,00000002
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+4FAC4: 29 46 60           -  sub [esi+60],eax
"Super Trench Attack.exe"+4FAC7: 8B 0D D4 52 CC 00  -  mov ecx,["Super Trench Attack.exe"+F52D4]
"Super Trench Attack.exe"+4FACD: 8B 46 60           -  mov eax,[esi+60]
"Super Trench Attack.exe"+4FAD0: 83 F9 FF           -  cmp ecx,-01
"Super Trench Attack.exe"+4FAD3: 74 0A              -  je "Super Trench Attack.exe"+4FADF
"Super Trench Attack.exe"+4FAD5: 39 4D 0C           -  cmp [ebp+0C],ecx
"Super Trench Attack.exe"+4FAD8: 75 05              -  jne "Super Trench Attack.exe"+4FADF
"Super Trench Attack.exe"+4FADA: A3 B8 3D 9D 01     -  mov ["Super Trench Attack.exe"+E03DB8],eax
"Super Trench Attack.exe"+4FADF: 8B 15 8C 52 CC 00  -  mov edx,["Super Trench Attack.exe"+F528C]
"Super Trench Attack.exe"+4FAE5: 39 55 D0           -  cmp [ebp-30],edx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"TEST: observe inventory total amo"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  The first many instructions sets the "total ammo" counter to 0 for various
  weapons, I'm guessing the total for all inventory is added up later in the
  procedure and the correct values are set.  For instance if I have 12 ammo
  in my clip and a block of 73, the value at +E03C6C is 85.  When I pick up
  the ammo block from my inventory, it changes to 12.  That is when the pistol
  is the selected weapon, when not the selected weapon, the memory has just the
  73 from the ammo block.
}

[ENABLE]

aobscanmodule(TEST_TOTAL_AMMO,Super Trench Attack.exe,BE 0B 00 00 00 89) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov esi,0000000B
  jmp return

TEST_TOTAL_AMMO:
  jmp code
return:
registersymbol(TEST_TOTAL_AMMO)

[DISABLE]

TEST_TOTAL_AMMO:
  db BE 0B 00 00 00

unregistersymbol(TEST_TOTAL_AMMO)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+C7D99

"Super Trench Attack.exe"+C7D8D: C3                             -  ret 
"Super Trench Attack.exe"+C7D8E: CC                             -  int 3 
"Super Trench Attack.exe"+C7D8F: CC                             -  int 3 
"Super Trench Attack.exe"+C7D90: 55                             -  push ebp
"Super Trench Attack.exe"+C7D91: 8B EC                          -  mov ebp,esp
"Super Trench Attack.exe"+C7D93: 51                             -  push ecx
"Super Trench Attack.exe"+C7D94: 33 C9                          -  xor ecx,ecx
"Super Trench Attack.exe"+C7D96: 53                             -  push ebx
"Super Trench Attack.exe"+C7D97: 56                             -  push esi
"Super Trench Attack.exe"+C7D98: 57                             -  push edi
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+C7D99: BE 0B 00 00 00                 -  mov esi,0000000B
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+C7D9E: 89 0D 6C 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C6C],ecx // pistol
"Super Trench Attack.exe"+C7DA4: 89 0D 74 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C74],ecx // rifle
"Super Trench Attack.exe"+C7DAA: 89 0D 78 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C78],ecx
"Super Trench Attack.exe"+C7DB0: 89 0D 80 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C80],ecx
"Super Trench Attack.exe"+C7DB6: 89 0D 7C 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C7C],ecx
"Super Trench Attack.exe"+C7DBC: 89 0D 70 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03C70],ecx
"Super Trench Attack.exe"+C7DC2: 89 0D B0 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03CB0],ecx
"Super Trench Attack.exe"+C7DC8: 89 0D B4 3C 9D 01              -  mov ["Super Trench Attack.exe"+E03CB4],ecx
"Super Trench Attack.exe"+C7DCE: 89 0D 64 3B 9D 01              -  mov ["Super Trench Attack.exe"+E03B64],ecx
"Super Trench Attack.exe"+C7DD4: 89 0D 68 3B 9D 01              -  mov ["Super Trench Attack.exe"+E03B68],ecx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"TEST: Shooting Gallery Health"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-27
  Author : Jason

  Just before this is a static pointer to health in the shooting gallery.
}

[ENABLE]

aobscanmodule(TEST_SHOOTING_GALLERY_HEALTH,Super Trench Attack.exe,D8 C9 D9 99 * * * * 85 F6) // should be unique

globalalloc(globals,$100000)

globals+1008:
  readmem(TEST_SHOOTING_GALLERY_HEALTH-0A,4)

[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+A1F90

"Super Trench Attack.exe"+A1F64: A1 A4 3B 9D 01        -  mov eax,["Super Trench Attack.exe"+E03BA4]
"Super Trench Attack.exe"+A1F69: 85 C0                 -  test eax,eax
"Super Trench Attack.exe"+A1F6B: 74 11                 -  je "Super Trench Attack.exe"+A1F7E
"Super Trench Attack.exe"+A1F6D: DD D8                 -  fstp st(0)
"Super Trench Attack.exe"+A1F6F: DB 05 A4 3B 9D 01     -  fild dword ptr ["Super Trench Attack.exe"+E03BA4]
"Super Trench Attack.exe"+A1F75: D8 3D 5C 46 9D 01     -  fdivr dword ptr ["Super Trench Attack.exe"+E0465C]
"Super Trench Attack.exe"+A1F7B: D9 55 FC              -  fst dword ptr [ebp-04]
"Super Trench Attack.exe"+A1F7E: DB 05 A8 41 9D 01     -  fild dword ptr ["Super Trench Attack.exe"+E041A8] // load health from shooting gallery
"Super Trench Attack.exe"+A1F84: 8B 35 A8 41 9D 01     -  mov esi,["Super Trench Attack.exe"+E041A8] // again, move to ESI
"Super Trench Attack.exe"+A1F8A: 8B 0D 6C 83 CC 00     -  mov ecx,["Super Trench Attack.exe"+F836C]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+A1F90: D8 C9                 -  fmul st(0),st(1)
"Super Trench Attack.exe"+A1F92: D9 99 FC 41 00 00     -  fstp dword ptr [ecx+000041FC]
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+A1F98: 85 F6                 -  test esi,esi
"Super Trench Attack.exe"+A1F9A: 0F 8E 01 02 00 00     -  jng "Super Trench Attack.exe"+A21A1
"Super Trench Attack.exe"+A1FA0: 99                    -  cdq 
"Super Trench Attack.exe"+A1FA1: F7 FE                 -  idiv esi
"Super Trench Attack.exe"+A1FA3: 83 F8 03              -  cmp eax,03
"Super Trench Attack.exe"+A1FA6: 0F 8E D5 00 00 00     -  jng "Super Trench Attack.exe"+A2081
"Super Trench Attack.exe"+A1FAC: 80 3D A7 3D 9D 01 00  -  cmp byte ptr ["Super Trench Attack.exe"+E03DA7],00
"Super Trench Attack.exe"+A1FB3: 0F 85 DF 01 00 00     -  jne "Super Trench Attack.exe"+A2198
"Super Trench Attack.exe"+A1FB9: 83 B9 3C 42 00 00 00  -  cmp dword ptr [ecx+0000423C],00
"Super Trench Attack.exe"+A1FC0: 0F 8C D2 01 00 00     -  jl "Super Trench Attack.exe"+A2198
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"TEST: God Mode"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This seems to subtract damage from player, and only player, but only from
  getting shot.  It doesn't seem to affect grenade, self-grenate or fire damage,
  and of course not in the shooting gallery.
}

[ENABLE]

aobscanmodule(INJECT_DAMAGE_PLAYER,Super Trench Attack.exe,29 46 60 8B 0D) // should be unique

INJECT_DAMAGE_PLAYER:
  nop
  nop
  nop

registersymbol(INJECT_DAMAGE_PLAYER)

[DISABLE]

INJECT_DAMAGE_PLAYER:
  db 29 46 60

unregistersymbol(INJECT_DAMAGE_PLAYER)


{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+4FAC4

"Super Trench Attack.exe"+4FAAB: 03 D1              -  add edx,ecx
"Super Trench Attack.exe"+4FAAD: C1 FA 02           -  sar edx,02
"Super Trench Attack.exe"+4FAB0: 8B CA              -  mov ecx,edx
"Super Trench Attack.exe"+4FAB2: C1 E9 1F           -  shr ecx,1F
"Super Trench Attack.exe"+4FAB5: 03 CA              -  add ecx,edx
"Super Trench Attack.exe"+4FAB7: 8B C3              -  mov eax,ebx
"Super Trench Attack.exe"+4FAB9: 2B C1              -  sub eax,ecx
"Super Trench Attack.exe"+4FABB: 85 C0              -  test eax,eax
"Super Trench Attack.exe"+4FABD: 7F 05              -  jg "Super Trench Attack.exe"+4FAC4
"Super Trench Attack.exe"+4FABF: B8 02 00 00 00     -  mov eax,00000002
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+4FAC4: 29 46 60           -  sub [esi+60],eax
"Super Trench Attack.exe"+4FAC7: 8B 0D D4 52 CC 00  -  mov ecx,["Super Trench Attack.exe"+F52D4]
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+4FACD: 8B 46 60           -  mov eax,[esi+60]
"Super Trench Attack.exe"+4FAD0: 83 F9 FF           -  cmp ecx,-01
"Super Trench Attack.exe"+4FAD3: 74 0A              -  je "Super Trench Attack.exe"+4FADF
"Super Trench Attack.exe"+4FAD5: 39 4D 0C           -  cmp [ebp+0C],ecx
"Super Trench Attack.exe"+4FAD8: 75 05              -  jne "Super Trench Attack.exe"+4FADF
"Super Trench Attack.exe"+4FADA: A3 B8 3D 9D 01     -  mov ["Super Trench Attack.exe"+E03DB8],eax
"Super Trench Attack.exe"+4FADF: 8B 15 8C 52 CC 00  -  mov edx,["Super Trench Attack.exe"+F528C]
"Super Trench Attack.exe"+4FAE5: 39 55 D0           -  cmp [ebp-30],edx
"Super Trench Attack.exe"+4FAE8: 74 23              -  je "Super Trench Attack.exe"+4FB0D
"Super Trench Attack.exe"+4FAEA: 8B 45 10           -  mov eax,[ebp+10]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"TEST: Mine Damage"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-26
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(INJECT_DAMAGE_MINE,Super Trench Attack.exe,01 31 EB 70 83 7D 08 01) // should be unique

INJECT_DAMAGE_MINE:
  nop
  nop

registersymbol(INJECT_DAMAGE_MINE)

[DISABLE]

INJECT_DAMAGE_MINE:
  db 01 31 EB 70 83 7D 08 01

unregistersymbol(INJECT_DAMAGE_MINE)

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+505A0

"Super Trench Attack.exe"+50581: 69 C0 24 03 00 00     -  imul eax,eax,00000324
"Super Trench Attack.exe"+50587: 8D 4C 38 60           -  lea ecx,[eax+edi+60]
"Super Trench Attack.exe"+5058B: B8 1E 00 00 00        -  mov eax,0000001E
"Super Trench Attack.exe"+50590: 99                    -  cdq 
"Super Trench Attack.exe"+50591: F7 FE                 -  idiv esi
"Super Trench Attack.exe"+50593: 8B F0                 -  mov esi,eax
"Super Trench Attack.exe"+50595: B8 1E 00 00 00        -  mov eax,0000001E
"Super Trench Attack.exe"+5059A: 99                    -  cdq 
"Super Trench Attack.exe"+5059B: F7 7D F4              -  idiv [ebp-0C]
"Super Trench Attack.exe"+5059E: 2B F0                 -  sub esi,eax
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+505A0: 01 31                 -  add [ecx],esi
"Super Trench Attack.exe"+505A2: EB 70                 -  jmp "Super Trench Attack.exe"+50614
"Super Trench Attack.exe"+505A4: 83 7D 08 01           -  cmp dword ptr [ebp+08],01
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+505A8: 75 6A                 -  jne "Super Trench Attack.exe"+50614
"Super Trench Attack.exe"+505AA: 80 3D 47 3C 9D 01 00  -  cmp byte ptr ["Super Trench Attack.exe"+E03C47],00
"Super Trench Attack.exe"+505B1: 75 61                 -  jne "Super Trench Attack.exe"+50614
"Super Trench Attack.exe"+505B3: 83 7D 0C FF           -  cmp dword ptr [ebp+0C],-01
"Super Trench Attack.exe"+505B7: 0F 84 1D 31 00 00     -  je "Super Trench Attack.exe"+536DA
"Super Trench Attack.exe"+505BD: 8B 55 0C              -  mov edx,[ebp+0C]
"Super Trench Attack.exe"+505C0: 8B CA                 -  mov ecx,edx
"Super Trench Attack.exe"+505C2: 69 C9 24 03 00 00     -  imul ecx,ecx,00000324
"Super Trench Attack.exe"+505C8: 8B 84 39 58 02 00 00  -  mov eax,[ecx+edi+00000258]
"Super Trench Attack.exe"+505CF: 03 CF                 -  add ecx,edi
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"TEST: Find Inventory Pointer"</Description>
          <LastState Activated="0"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Super Trench Attack.exe
  Version: 
  Date   : 2014-07-28
  Author : Jason

  Code near where inventory static is located
}

[ENABLE]

aobscanmodule(SCRIPT_FIND_INVENTORY,Super Trench Attack.exe,83 F8 22 74 0A 83 F8 21 74 05 83 F8 23 75 44) // should be unique

globalalloc(globals,$100000)

globals+1028:
  readmem(SCRIPT_FIND_INVENTORY+12,4)

[DISABLE]

{
// ORIGINAL CODE - INJECTION POINT: "Super Trench Attack.exe"+35FA

"Super Trench Attack.exe"+35C8: 03 05 54 3B 9D 01     -  add eax,["Super Trench Attack.exe"+E03B54]
"Super Trench Attack.exe"+35CE: EB 0F                 -  jmp "Super Trench Attack.exe"+35DF
"Super Trench Attack.exe"+35D0: E8 6B F0 FF FF        -  call "Super Trench Attack.exe"+2640
"Super Trench Attack.exe"+35D5: E8 E6 E4 0C 00        -  call "Super Trench Attack.exe"+D1AC0
"Super Trench Attack.exe"+35DA: 05 C8 00 00 00        -  add eax,000000C8
"Super Trench Attack.exe"+35DF: 8B 3D 30 53 CC 00     -  mov edi,["Super Trench Attack.exe"+F5330]
"Super Trench Attack.exe"+35E5: A3 E8 3C 9D 01        -  mov ["Super Trench Attack.exe"+E03CE8],eax
"Super Trench Attack.exe"+35EA: 83 FF FF              -  cmp edi,-01
"Super Trench Attack.exe"+35ED: 0F 84 11 01 00 00     -  je "Super Trench Attack.exe"+3704
"Super Trench Attack.exe"+35F3: 8B 04 BD 40 C2 9C 01  -  mov eax,[edi*4+"Super Trench Attack.exe"+DFC240]
// ---------- INJECTING HERE ----------
"Super Trench Attack.exe"+35FA: 83 F8 22              -  cmp eax,22
"Super Trench Attack.exe"+35FD: 74 0A                 -  je "Super Trench Attack.exe"+3609
// ---------- DONE INJECTING  ----------
"Super Trench Attack.exe"+35FF: 83 F8 21              -  cmp eax,21
"Super Trench Attack.exe"+3602: 74 05                 -  je "Super Trench Attack.exe"+3609
"Super Trench Attack.exe"+3604: 83 F8 23              -  cmp eax,23
"Super Trench Attack.exe"+3607: 75 44                 -  jne "Super Trench Attack.exe"+364D
"Super Trench Attack.exe"+3609: 8B 14 BD 80 C1 9C 01  -  mov edx,[edi*4+"Super Trench Attack.exe"+DFC180] // base of inventory
"Super Trench Attack.exe"+3610: 3B 15 60 3B 9D 01     -  cmp edx,["Super Trench Attack.exe"+E03B60]
"Super Trench Attack.exe"+3616: 7D 1B                 -  jnl "Super Trench Attack.exe"+3633
"Super Trench Attack.exe"+3618: 80 3D 03 42 9D 01 01  -  cmp byte ptr ["Super Trench Attack.exe"+E04203],01
"Super Trench Attack.exe"+361F: 74 12                 -  je "Super Trench Attack.exe"+3633
"Super Trench Attack.exe"+3621: E8 1A F0 FF FF        -  call "Super Trench Attack.exe"+2640
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"+ Values"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>3</ID>
              <Description>"No description"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC188"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>"Super Trench Attack.exe"+DFC188</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2</ID>
              <Description>"2.0 gun"</Description>
              <LastState Value="2" Activated="0" RealAddress="00CC531C"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>Super Trench Attack.exe+f531c</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"Statics"</Description>
              <LastState Value="" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>0</ID>
                  <Description>"Pistol Clip"</Description>
                  <LastState Value="0" Activated="0" RealAddress="019CC180"/>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>"Super Trench Attack.exe"+DFC180</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>4</ID>
                  <Description>"Rifle Clip"</Description>
                  <LastState Value="0" Activated="0" RealAddress="019CC18C"/>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>"Super Trench Attack.exe"+DFC18C</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1</ID>
              <Description>"No description"</Description>
              <LastState Value="12" Activated="0" RealAddress="019D421C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>"Super Trench Attack.exe"+E0421C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Gold"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC204"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>"Super Trench Attack.exe"+DFC204</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"Inventory 1 Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC240"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>19CC240</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>122</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>120</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"Inventory 2 Type"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC244"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>19CC244</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Increase Value</Action>
                  <Keys>
                    <Key>122</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>120</Key>
                  </Keys>
                  <Value>0</Value>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"Inventory 1 Quantity"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC200"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>19CC200</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>122</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"Inventory 2 Quantity"</Description>
              <LastState Value="0" Activated="0" RealAddress="019CC204"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>19CC204</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>122</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Skill Points"</Description>
              <LastState Value="0" Activated="0" RealAddress="019D3DA8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>"Super Trench Attack.exe"+E03DA8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>17</ID>
              <Description>""Super Trench Attack.exe"+E041A8 (Shooting Gallery Health)"</Description>
              <LastState Value="502" Activated="0" RealAddress="019D41A8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>"Super Trench Attack.exe"+E041A8</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>07870000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HEALTH</Name>
      <Address> 00C97877</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_GOLD_COMPARE1</Name>
      <Address> 00C9907E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_AMMO_USE</Name>
      <Address> 00C1D94A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SHOOTING_GALLERY_HEALTH</Name>
      <Address> 00C71F98</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Structures StructVersion="2">
    <Structure Name="Inventory" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="0" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="4" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="8" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="12" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="16" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="20" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="24" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="28" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="32" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="36" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="40" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="44" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="80000005"/>
        <Element Offset="48" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="52" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="56" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
        <Element Offset="60" Vartype="4 Bytes" Bytesize="4" DisplayMethod="Unsigned Integer" BackgroundColor="C0C0C0"/>
      </Elements>
    </Structure>
  </Structures>
</CheatTable>
