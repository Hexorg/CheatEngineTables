<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Always Max PP"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(unlmanamap,1024)
label(returnhere)
//label(originalcode)
label(manamap_aob)
registersymbol(manamap_aob)
aobscan(aob_manamap,33 C0 89 46 48 5E 5F 5D C3)


unlmanamap:
mov eax,[esi+58] //+58 is current max PP
//
mov [esi+48],eax
pop esi
pop edi
jmp returnhere

/*
originalcode:
mov [esi+48],eax
pop esi
pop edi
*/


aob_manamap+2:
manamap_aob:
jmp unlmanamap
returnhere:


 
 
[DISABLE]
manamap_aob:
db 89 46 48 5E 5F
unregistersymbol(manamap_aob)
dealloc(unlmanamap)
//mov [esi+48],eax
//pop esi
//pop edi
//Alt: db 89 46 48 5E 5F
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Unlimited Fungi Use - Herbal Recipe"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(unlitm,1024)
label(returnhere)
//label(originalcode)
label(unlitm_aob)
registersymbol(unlitm_aob)
aobscan(aob_umlitm,2B D8 8B C3 89 46 74)


unlitm:
sub ebx,0 //eax  // Sub Items
mov eax,ebx  // Change Registry
mov [esi+74],eax  // Set New Items Value
jmp returnhere

/*
originalcode:
sub ebx,eax
mov eax,ebx
mov [esi+74],eax
*/


aob_umlitm:
unlitm_aob:
jmp unlitm
nop
nop
returnhere:


 
 
[DISABLE]
unlitm_aob:
db 2B D8 8B C3 89 46 74
unregistersymbol(unlitm_aob)
dealloc(unlitm)
//sub ebx,eax
//mov eax,ebx
//mov [esi+74],eax
//Alt: db 2B D8 8B C3 89 46 74
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Unlimited Items Use, Combat And Map"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Define
define(UCMBITM,"Lox.exe")

[ENABLE]
alloc(Ptshr,2048,UCMBITM)
label(unlcmbitm)
label(returnhere)
label(originalcode)
label(hommuch)
label(aCnsitm)
registersymbol(Ptshr)
label(unlcmtm_aob)
registersymbol(unlcmtm_aob)
registersymbol(aCnsitm)
aobscan(aob_unlcmtm,48 89 47 74 8B D7 B9 ?? ?? ?? ?? E8)

Ptshr:

// Variable
aCnsitm:
dd 1


unlcmbitm:
cmp [aCnsitm],0
je originalcode
cmp [aCnsitm],2
jge hommuch
mov [edi+74],eax
mov edx,edi
jmp returnhere

hommuch:
mov eax,[aCnsitm]
mov [edi+74],eax
mov edx,edi
mov [aCnsitm],1
jmp returnhere

originalcode:
dec eax
mov [edi+74],eax
mov edx,edi
jmp returnhere



//JX.JXParty::RemoveOneItem+65:
aob_unlcmtm:
unlcmtm_aob:
jmp unlcmbitm
nop
returnhere:


 
 
[DISABLE]
//JX.JXParty::RemoveOneItem+65:
unlcmtm_aob:
db 48 89 47 74 8B D7
unregistersymbol(unlcmtm_aob)
unregistersymbol(aCnsitm)
unregistersymbol(Ptshr)
dealloc(unlcmbitm)
//dec eax
//mov [edi+74],eax
//mov edx,edi
//Alt: db 48 89 47 74 8B D7
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>100</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>34</ID>
          <Description>"1-Unlimited Items -2 or more, Set Value To"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>aCnsitm</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Add 20 Herb Every Gather"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(extraherb,1024)
label(returnhere)
//label(originalcode)
label(extragather_aob)
registersymbol(extragather_aob)
aobscan(aob_extragather,03 C2 89 43 74)


extraherb:
add eax,(int)20 //edx // How Many To Add
mov [ebx+74],eax // Set The Value
jmp returnhere

/*
originalcode:
add eax,edx
mov [ebx+74],eax
*/


aob_extragather:
extragather_aob:
jmp extraherb
returnhere:


 
 
[DISABLE]
extragather_aob:
db 03 C2 89 43 74
unregistersymbol(extragather_aob)
dealloc(extraherb)
//add eax,edx
//mov [ebx+74],eax
//Alt: db 03 C2 89 43 74
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Unlimited Skill Points - On Levl Up"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(unlsklpnt,1024)
label(returnhere)
label(unlsklpnt_aob)
registersymbol(unlsklpnt_aob)
aobscan(aob_unlsklpnt,2B 5D F0 8B C3 89 86 54 01 00 00)


unlsklpnt:
sub ebx,0 //[ebp-10]  // Subtract Skill Cost
mov eax,ebx // Change Registry, Compiling Choice?
mov [esi+00000154],(int)99 //eax // Sent New Avaible Skills
jmp returnhere






aob_unlsklpnt:
unlsklpnt_aob:
jmp unlsklpnt
//
nop
nop
nop
nop
nop
nop
//
returnhere:


 
 
[DISABLE]
unlsklpnt_aob:
db 2B 5D F0 8B C3 89 86 54 01 00 00
unregistersymbol(unlsklpnt_aob)
dealloc(unlsklpnt)
//sub ebx,[ebp-10]
//mov eax,ebx
//mov [esi+00000154],eax
//Alt: db 2B 5D F0 8B C3 89 86 54 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Leveller Up Stat Changer"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Define
define(STATCHANGE,"Lox.exe")

[ENABLE]
alloc(Setitat,2048,STATCHANGE)
label(addup)
label(removeup)
label(determineinc)
label(determinedec)
label(onlyadd)
label(adddouble)
label(setstato)
label(returnhere)
label(returnhere2)
label(selector)
label(statinc_aob)
label(statdec_aob)
registersymbol(Setitat)
registersymbol(selector)
registersymbol(statinc_aob)
registersymbol(statdec_aob)
// Increase
aobscan(aob_statinc,8B 56 18 42 89 56 18)
// Decrease
aobscan(aob_statdec,8B 56 18 4A 89 56 18)

Setitat:

// Define The Default Values
selector:
dd 0


// Determination Section, inc
determineinc:
cmp [selector],0
je addup
// With 1 do nothing here
cmp [selector],2
je adddouble
cmp [selector],3
jge setstato
jmp addup // ?? Just In Case, Plus 1 Only Right Now

// Determination Section, dec
determinedec:
cmp [selector],0
je removeup
cmp [selector],1
jge onlyadd
jmp removeup // ?? Just In Case


// Original Increasing Section
addup:
mov edx,[esi+18] // Move Actual Stat In Registry
inc edx  // Increment When Selected
mov [esi+18],edx // Set The New Stat Value
jmp returnhere

// No Reduce Stat, Double Increase, Inc Version
adddouble:
mov edx,[esi+18]  // Move Actual Stat In Registry
inc edx
inc edx
mov [esi+18],edx
jmp returnhere

// Directly Set Stat To, Inc Version
setstato:
mov edx,[esi+18] // Kept To Allow Seamless Transfer
mov edx,[selector] // Set Value To Selector Value
mov [esi+18],edx // Register It Back
mov [selector],1
jmp returnhere

//-----------------------------------//

// Original Decreasing Section
removeup:
mov edx,[esi+18] // Move Actual Stat In Registry
dec edx // Decrement When Unselected
mov [esi+18],edx // Set The New Stat Value
jmp returnhere2

// For No Reduce Stat, Only Increase, Dec Version
onlyadd:
mov edx,[esi+18]
//dec edx
mov [esi+18],edx
jmp returnhere2


// Increasing
aob_statinc:
statinc_aob:
//jmp addup
jmp determineinc
nop
nop
returnhere:

// Decreasing
aob_statdec:
statdec_aob:
//jmp removeup
jmp determinedec
nop
nop
returnhere2:
 
 
[DISABLE]
// Increase
statinc_aob:
db 8B 56 18 42 89 56 18
// Decrease
statdec_aob:
db 8B 56 18 4A 89 56 18
unregistersymbol(statinc_aob)
unregistersymbol(statdec_aob)
unregistersymbol(selector)
unregistersymbol(Setitat)
dealloc(Setitat)
//mov edx,[esi+18]
//inc edx
//mov [esi+18],edx
//Alt: db 8B 56 18 42 89 56 18
//
//mov edx,[esi+18]
//dec edx
//mov [esi+18],edx
//Alt: db 8B 56 18 4A 89 56 18
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Selector -1 Only Increase -2 Double Increase"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>selector</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>29</ID>
      <Description>"Change Skill Level To"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Define
define(SKILLCHANGER,"Lox.exe")
[ENABLE]
alloc(Setskillto,2048,SKILLCHANGER)
label(chngskill)
label(returnhere)
label(originalcode)
label(aSklval)
registersymbol(Setskillto)
label(modat_aob)
registersymbol(modat_aob)
registersymbol(aSklval)
aobscan(aob_modat,8B 40 04 5E 5F 5D C3)
//To Change A Value Over The MOuse Over It, When The
//Tooltip Appear The VAlue Will Be Changed.
//Close And Reopen The Skill Tree To Visually
//Update The Values

Setskillto:

aSklval:
dd 0


chngskill:
cmp [aSklval],0
je originalcode
push ebx
mov ebx,[aSklval]
mov [eax+04],ebx
mov eax,[eax+04]
pop ebx // Only One Here
pop esi
pop edi
mov [aSklval],0
jmp returnhere



originalcode:
mov eax,[eax+04]
pop esi
pop edi
jmp returnhere


aob_modat:
modat_aob:
jmp chngskill
returnhere:


 
 
[DISABLE]
modat_aob:
db 8B 40 04 5E 5F
unregistersymbol(modat_aob)
unregistersymbol(aSklval)
unregistersymbol(Setskillto)
dealloc(chngskill)
//mov eax,[eax+04]
//pop esi
//pop edi
//Alt: db 8B 40 04 5E 5F - 5D C3
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Skill Value"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>aSklval</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>112</Key>
              </Keys>
              <Value>10</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>113</Key>
              </Keys>
              <Value>20</Value>
              <ID>1</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>114</Key>
              </Keys>
              <Value>30</Value>
              <ID>2</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>115</Key>
              </Keys>
              <Value>40</Value>
              <ID>3</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Amulet Unlimited Charge"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(unlamulet,1024)
label(returnhere)
label(amulet_aob)
registersymbol(amulet_aob)
alloc(amulet,4) //So It Has Memory
aobscan(aob_amulet,DD 40 04 C3 00 00 00 00 00)

amulet:
dd (int)1 //1 double is 100% Charged


unlamulet:
// If It Was fstp, I Would Need Another Here
// So To Get The Value Out Of The Stack
fild qword ptr [amulet] //Load It In Memory
fstp qword ptr [eax+04] //Write It In Memory
fld qword ptr [eax+04] //Original
ret
add [eax],al
jmp returnhere


//This Unique Id May Still Work
//SOL.TalismanOfGolot::get_Power+5:
aob_amulet:
amulet_aob:
jmp unlamulet
nop
returnhere:


 
 
[DISABLE]
//SOL.TalismanOfGolot::get_Power+5:
amulet_aob:
db DD 40 04 C3 00 00
unregistersymbol(amulet_aob)
dealloc(unlamulet)
//fld qword ptr [eax+04]
//ret 
//add [eax],al
//Alt: db DD 40 04 C3 00 00 - 00 00 00
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>97</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Undying - Disable Outside Of Combat!"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)

newmem:
cmp [esi+64],0 // Only Opponent Have Max Health There
jne originalcode
call mscorlib.ni.dll+310558
push edx
mov edx,[esi+54]
mov edi,edx
pop edx
mov [esi+44],edi
jmp returnhere


originalcode:
call mscorlib.ni.dll+310558
mov [esi+44],edi
jmp returnhere




JX.JXCombatant::set_HP+94:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
JX.JXCombatant::set_HP+94:
call mscorlib.ni.dll+310558
mov [esi+44],edi
dealloc(newmem)
//call mscorlib.ni.dll+310558
//mov [esi+44],edi
//Alt: db  39 09 - E8 ?? ?? ?? ?? 89 7E 44
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>107</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Amulet Charge (double)0-1, exact
----Read Amulet Power------
DD 40 04 C3 00 00 00 00 00
</Comments>
</CheatTable>
