<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>2030</ID>
      <Description>"----&gt; Teleport (Last Tested With V_1.5.0)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(teleport,1024,engine_x64_rwdi.dll)
//--------------------------------------------------//
aobscanmodule(teleport_aob1,engine_x64_rwdi.dll,F3 0F 11 83 BC 00 00 00 F3 0F 11 8B C0 00 00 00 F3 0F 11 93 C4 00 00 00)
registersymbol(teleport_aob1)
//--------------------------------------------------//
aobscanmodule(waypoint_aob1,gamedll_x64_rwdi.dll,F3 0F 11 45 A8 F3 0F 10 83 48 08 00 00)
registersymbol(waypoint_aob1)
//--------------------------------------------------//
label(saved_X)
registersymbol(saved_X)
label(saved_Y)
registersymbol(saved_Y)
label(saved_Z)
registersymbol(saved_Z)
label(savelocation_status)
registersymbol(savelocation_status)
label(gotosaved_status)
registersymbol(gotosaved_status)
//--------------------------------------------------//
label(getWayPoint)
label(returnhere_getWayPoint)
label(waypoint_X)
registersymbol(waypoint_X)
label(waypoint_Y)
registersymbol(waypoint_Y)
label(waypoint_Z)
registersymbol(waypoint_Z)

label(gotowaypoint_status)
registersymbol(gotowaypoint_status)
//--------------------------------------------------//
label(savelocation)
label(gotosaved)
label(gotowaypoint)
label(returnhere_teleport)
//--------------------------------------------------//
label(goTo)
label(goTo_X)
registersymbol(goTo_X)
label(goTo_Y)
registersymbol(goTo_Y)
label(goTo_Z)
registersymbol(goTo_Z)
label(goTo_status)
registersymbol(goTo_status)
//--------------------------------------------------//
label(isZombie)
//--------------------------------------------------//
teleport:
cmp [rbx+114],64
jne isZombie
cmp [savelocation_status],1
je savelocation
cmp [gotosaved_status],1
je gotosaved
cmp [gotowaypoint_status],1
je gotowaypoint
cmp [goTo_status],1
je goTo
movss [rbx+000000C4],xmm2
jmp returnhere_teleport

savelocation_status:
dd 0

gotosaved_status:
dd 0

gotowaypoint_status:
dd 0
//--------------------------------------------------//
savelocation:
movss [rbx+000000C4],xmm2
fld [rbx+BC]
fstp [saved_X]
fld [rbx+C0]
fstp [saved_Z]
fld [rbx+C4]
fstp [saved_Y]
mov [savelocation_status],0
jmp returnhere_teleport
//--------------------------------------------------//
gotosaved:
fld [saved_X]
fstp [rbx+BC]
fld [saved_Z]
fstp [rbx+C0]
fld [saved_Y]
fstp [rbx+C4]
mov [gotosaved_status],0
jmp returnhere_teleport

saved_X:
dd 0

saved_Y:
dd 0

saved_Z:
dd 0
//--------------------------------------------------//
gotowaypoint:
fld [waypoint_X]
fstp [rbx+BC]
fld [waypoint_Z]
fstp [rbx+C0]
fld [waypoint_Y]
fstp [rbx+C4]
mov [gotowaypoint_status],0
jmp returnhere_teleport
//--------------------------------------------------//
getWayPoint:
movss xmm0,[rbx+00000848]
fld [rbx+840]
fstp [waypoint_X]
fld [rbx+848]
fstp [waypoint_Y]
jmp returnhere_getWayPoint

waypoint_X:
dd 0

waypoint_Z:
dd 43480000

waypoint_Y:
dd 0
//--------------------------------------------------//
goTo:
fld [goTo_X]
fstp [rbx+BC]
fld [goTo_Z]
fstp [rbx+C0]
fld [goTo_Y]
fstp [rbx+C4]
mov [goTo_status],0
jmp returnhere_teleport

goTo_X:
dd 0

goTo_Z:
dd 0

goTo_Y:
dd 0

goTo_status:
dd 0
//--------------------------------------------------//
isZombie:
movss [rbx+000000C4],xmm2
jmp returnhere_teleport
//--------------------------------------------------//

teleport_aob1+10:
jmp teleport
nop
nop
nop
returnhere_teleport:

waypoint_aob1+5:
jmp getWayPoint
nop
nop
nop
returnhere_getWayPoint:

[Disable]

teleport_aob1+10:
db F3 0F 11 93 C4 00 00 00
unregistersymbol(teleport_aob1)

waypoint_aob1+5:
db F3 0F 10 83 48 08 00 00
unregistersymbol(waypoint_aob1)

unregistersymbol(saved_X)
unregistersymbol(saved_Z)
unregistersymbol(saved_Y)
unregistersymbol(savelocation_status)
unregistersymbol(gotosaved_status)

unregistersymbol(waypoint_X)
unregistersymbol(waypoint_Z)
unregistersymbol(waypoint_Y)
unregistersymbol(gotowaypoint_status)

unregistersymbol(goTo_X)
unregistersymbol(goTo_Y)
unregistersymbol(goTo_Z)
unregistersymbol(goTo_status)

dealloc(teleport)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2031</ID>
          <Description>"Save Location"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>saveLocation_status</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2032</ID>
          <Description>"Go To Saved"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>goToSaved_status</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2033</ID>
          <Description>"Go To Waypoint"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>goToWayPoint_status</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2115</ID>
          <Description>"Go To"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2117</ID>
              <Description>"Dr. Zere Lab"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[Enable]

goTo_status:
dd 1

goTo_X:
dd (float)290

goTo_Y:
dd (float)17

goTo_Z:
dd (float)127

[Disable]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2118</ID>
              <Description>"Tower Entrance"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[Enable]

goTo_status:
dd 1

goTo_X:
dd (float)260

goTo_Y:
dd (float)87

goTo_Z:
dd (float)135

[Disable]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>2119</ID>
              <Description>"Convenience Store"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[Enable]

goTo_status:
dd 1

goTo_X:
dd (float)297

goTo_Y:
dd (float)56

goTo_Z:
dd (float)128

[Disable]
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2108</ID>
          <Description>"See Coordinates"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2109</ID>
              <Description>"Saved X"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>saved_X</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2110</ID>
              <Description>"Saved Y"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>saved_Y</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2111</ID>
              <Description>"Saved Z"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>saved_Z</Address>
              <CheatEntries>
                <CheatEntry>
                  <ID>2112</ID>
                  <Description>"Waypoint X"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>waypoint_X</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2113</ID>
                  <Description>"Waypoint Y"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>waypoint_Y</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>2114</ID>
                  <Description>"Waypoint Z"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>waypoint_Z</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>00 00 03 03 10 0F 03 - potion
31 2E 00 10 00 00 0B - axe
</Comments>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
  for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
  end
end

function LBItemListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Item = ItemTable[sender.ItemIndex+1]
  local Quant = readInteger(Item.Address+0x40)
  PackEdit_EItemQuant.text = Quant
  local ItemTypeIndex = 0
  for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
  end
  PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
end

function BItemApplyClick(sender)
  if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
  if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
  local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
  local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
  local Quant = tonumber(PackEdit_EItemQuant.text)
  writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
  writeInteger(Item.Address+0x40,Quant)
  BItemUpdateClick()
end

function EditorShow()
  ItemTable = {}
  WeaponTable = {}
  BaseItemTable = {}
  PackEdit.show()
end

function EditorHide()
  PackEdit.close()
end
</LuaScript>
</CheatTable>
