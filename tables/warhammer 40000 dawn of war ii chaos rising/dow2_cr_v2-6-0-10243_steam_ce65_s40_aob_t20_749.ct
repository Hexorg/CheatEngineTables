<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"[X] &lt;== WH 40K DoW2 Chaos Rising v2.6.0.10243 Steam Script 4.0 AOB"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Warhammer 40K - Dawn Of War II - Chaos Rising
 Game Version  : 2.6.0.10243
 Game Sponsor  : Myself
 Proces Name   : DOW2.exe
 Script Version: 4.0
 CE Version    : 6.5
 Release date  : 19-Sep-2016
 Author        : Recifense
 History:
 03-Oct-13: First Release (steam)
 08-Jul-14: Release for version 2.6.0.10119 (steam)
 09-Jul-14: Release for version 2.6.0.10137 (steam)
 15-Jul-14: Release for version 2.6.0.10153 (steam)
 08-Aug-14: Release for version 2.6.0.10184 (steam)
 12-Aug-14: Release for version 2.6.0.10198 (steam) (AOB)
 19-Sep-16: Release for version 2.6.0.10243 (steam) + UI + SKIRMISH (AOB)
 Features:
 - God Mode
 - Quick Kill
 - Minimum Resource
 - Energy
 - Unlimited Items (new)
 - Quick Production (skirmish)
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "dow2.exe") then
    ShowMessage('Error. Expected Process = DOW2.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"DOW2.exe")

//=========================================
// Constants used in the script (that can be changed)
define(ctCE65,(float)6.5)

//=========================================
[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(GDMD,DOW2.exe,f3 0f 11 4b 40 e8 ?? ?? ?? ?? 8b 43 10 85 c0 ?? ?? 50 ff 15 ??)
AOBScanModule(MPRE,DOW2.exe,d9 80 00 01 00 00 56 d9 1f 50 d9 80 04 01 00 00 d9 5f 04 d9 80)
AOBScanModule(MOEY,DOW2.exe,8b 46 10 d9 46 14 6a 09 50 51 d9 1c 24 e8 ?? ?? ?? ?? 0f 57 c9 0f 2f c8 ?? ?? f3 0f 11 4c 24 14 ?? ?? f3 0f 11 44 24 14 56)
AOBScanModule(MOHI,DOW2.exe,83 c1 ff 89 4b 04 ?? ?? 80 b8 74 03 00 00 00 ?? ?? 8b 44 24 1c 55)
AOBScanModule(MOPI,DOW2.exe,8b 88 f4 00 00 00 3b 4c 24 08 ?? ?? 05 00 01 00 00 3b c2 ?? ?? 3b c2)
AOBScanModule(MOGS,DOW2.exe,89 88 f4 00 00 00 e8 ?? ?? ?? ?? 8b 80 f4 00 00 00 8b 0d ?? ?? ?? ??)
AOBScanModule(MOUP,DOW2.exe,f3 0f 10 4f 20 f3 0f 5c c8 f3 0f 11 4f 20 0f 57 c9 0f 2e c1 9f)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_GodMode)
label(_GodMD00)
label(_BackGMD)
label(_ExitGMD)
label(_MonPlayerResource)
label(_MonPR00)
label(_BackMPR)
label(_ExitMPR)
label(_MonEnergy)
label(_BackMEY)
label(_ExitMEY)
label(_MonHeroItem)
label(_BackMHI)
label(_ExitMHI)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)
label(_MonGameStart)
label(_BackMGS)
label(_ExitMGS)
label(_MonUnitProd)
label(_BackMUP)
label(_ExitMUP)
label(iEnableGMD)
label(iEnableMPR)
label(iEnableQKL)
label(iEnableMEY)
label(iEnableMHI)
label(iEnableMUP)
label(iPlayerID)
label(fMinRes)
label(fFoeHP)
label(pPlayer)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMPR)
registersymbol(iEnableQKL)
registersymbol(iEnableMEY)
registersymbol(iEnableMHI)
registersymbol(iEnableMUP)
registersymbol(iPlayerID)
registersymbol(fMinRes)
registersymbol(pPlayer)

registersymbol(GDMD)
registersymbol(MPRE)
registersymbol(MOEY)
registersymbol(MOHI)
registersymbol(MOPI)
registersymbol(MOGS)
registersymbol(MOUP)

//=========================================
MyCode:
//=========================================
// During Combat
_GodMode:
 push eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                 // Jump if feature is disabled

 mov eax,[ebx+10]            // Get 1st level pointer
 or eax,eax
 jz _ExitGMD                 // Jump if Null pointer

 mov eax,[eax+34]            // Get 2nd level pointer
 or eax,eax
 jz _ExitGMD                 // Jump if Null pointer

 mov eax,[eax+08]
 cmp eax,[iPlayerID]
 jne _GodMD00                // Jump if it is not a playerÂ´s unit

 movss xmm1,[ebx+0000008c]   // Get Maximum HP
 jmp _ExitGMD

_GodMD00:
 cmp dword ptr [iEnableQKL],0
 je _ExitGMD                 // Jump if feature is disabled

 comiss xmm1,[fFoeHP]
 jc _ExitGMD                 // Jump if new value &lt; minimum

 movss xmm1,[fFoeHP]         // Make new HP = 2.0

_ExitGMD:
 pop eax

 movss [ebx+40],xmm1         // Original code
 jmp _BackGMD                // Back to main code

//=========================================
_MonPlayerResource:
 push ebx

 mov ebx,[eax+08]
 cmp ebx,[iPlayerID]
 jne _ExitMPR

 mov [pPlayer],eax

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                 // Jump if feature is disabled

 mov ebx,[fMinRes]           // Get minimum value
 cmp ebx,[eax+00000100]
 jle _MonPR00                // Jump if current Requisition is greater

 mov [eax+00000100],ebx      // Make current Requisition value = minimum value

_MonPR00:
 cmp ebx,[eax+00000104]
 jle _ExitMPR                // Jump if current Power is greater

 mov [eax+00000104],ebx      // Make current Power value = minimum value

_ExitMPR:
 pop ebx

 fld dword ptr [eax+00000100] // Original code
 jmp _BackMPR                 // Back to main code

//=========================================
_MonEnergy:
 cmp dword ptr [iEnableMEY],0
 je _ExitMEY                 // Jump if feature is disabled

 mov eax,[esi+10]            // Get 1st level pointer
 or eax,eax
 jz _ExitMEY                 // Jump if Null pointer

 mov eax,[eax+4c]            // Get 2nd level pointer
 or eax,eax
 jz _ExitMEY                 // Jump if Null pointer

 mov eax,[eax+08]
 cmp eax,[iPlayerID]
 jne _ExitMEY                // Jump if it is not a playerÂ´s unit

 mov eax,(float)10000
 cmp eax,[esi+14]
 jle _ExitMEY                // Jump if current Energy is greater

 mov [esi+14],eax            // Update current Energy value

_ExitMEY:
 mov eax,[esi+10]            // Original code
 fld dword ptr [esi+14]      // Original code
 jmp _BackMEY                // Back to main code

//========================================= new
// When Using Countable Items
// EDI = free
_MonHeroItem:
 cmp dword ptr [iEnableMHI],0
 je _ExitMHI                 // Jump if feature is disabled

 test ebp,ebp
 jz _ExitMHI

 mov edi,[ebp+08]            // Get 1st level pointer
 test edi,edi
 jz _ExitMHI                 // Jump if Null pointer

 mov edi,[edi+4c]            // Get 2nd level pointer
 test edi,edi
 jz _ExitMHI                 // Jump if Null pointer

 mov edi,[edi+08]
 cmp edi,[iPlayerID]
 jne _ExitMHI                // Jump if it is not a playerÂ´s unit

 inc ecx

_ExitMHI:
 add ecx,-01                 // Original code
 mov [ebx+04],ecx            // Original code (set #)
 jmp _BackMHI                // Back to main code

//========================================= new
// During a match (scenario)
_MonPlayerID:
 mov ecx,[eax+000000f4]      // Original code (Get ID)

 cmp dword ptr [eax],00
 jne _ExitMPI

 mov [iPlayerID],ecx

_ExitMPI:
 jmp _BackMPI                // Back to main code

//========================================= new
// When starting/Loading a match (scenario)
_MonGameStart:
 mov [eax+000000F4],ecx      // Original code (Set ID)

 mov dword ptr [iPlayerID],#9999
 mov dword ptr [pPlayer],00

_ExitMGS:
 jmp _BackMGS                // Back to main code

//=========================================
_MonUnitProd:
 cmp dword ptr [iEnableMUP],0
 je _ExitMUP                 // Jump if feature is disabled

 cmp ebp,[pPlayer]
 jne _ExitMUP

 mov eax,(float)10.0
 cmp eax,[edi+24]
 jns _ExitMUP

 cmp eax,[edi+20]
 jns _ExitMUP

 mov [edi+20],eax

_ExitMUP:
 movss xmm1,[edi+20]         // Original code
 jmp _BackMUP                // Back to main code

//=========================================
 db '===============================&gt;'
 db 'CE6.5 Script by Recifense 091916'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableQKL:
 dd 0
iEnableMPR:
 dd 0
iEnableMEY:
 dd 0
iEnableMHI:
 dd 0
iEnableMUP:
 dd 0
iPlayerID:
 dd #9999
fMinRes:
 dd (float)6500.0
fFoeHP:
 dd (float)2.0
pPlayer:
 dd 00

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
_BackGMD:

MPRE:
 jmp _MonPlayerResource
 nop
_BackMPR:

MOEY:
 jmp _MonEnergy
 nop
_BackMEY:

MOHI:
 jmp _MonHeroItem
 nop
_BackMHI:

MOPI:
 jmp _MonPlayerID
 nop
_BackMPI:

MOGS:
 jmp _MonGameStart
 nop
_BackMGS:

MOUP:
 jmp _MonUnitProd
_BackMUP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// movss [ebx+40],xmm1
 db f3 0f 11 4b 40

MPRE:
// fld dword ptr [eax+00000100]
 db d9 80 00 01 00 00

MOEY:
// mov eax,[esi+10]
// fld dword ptr [esi+14]
 db 8b 46 10 d9 46 14

MOHI:
// add ecx,-01
// mov [ebx+04],ecx
 db 83 c1 ff 89 4b 04

MOPI:
// mov ecx,[eax+000000F4]
 db 8b 88 f4 00 00 00

MOGS:
// mov [eax+000000F4],ecx
 db 89 88 f4 00 00 00

MOUP:
// movss xmm1,[edi+20]
 db f3 0f 10 4f 20

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableQKL)
unregistersymbol(iEnableMEY)
unregistersymbol(iEnableMHI)
unregistersymbol(iEnableMUP)
unregistersymbol(iPlayerID)
unregistersymbol(fMinRes)
unregistersymbol(pPlayer)

unregistersymbol(GDMD)
unregistersymbol(MPRE)
unregistersymbol(MOEY)
unregistersymbol(MOHI)
unregistersymbol(MOPI)
unregistersymbol(MOGS)
unregistersymbol(MOUP)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Minimum Resource ------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>5</ID>
              <Description>"Minimum Resource Value ==&gt;"</Description>
              <Color>0080FF</Color>
              <VariableType>Float</VariableType>
              <Address>fMinRes</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Quick Energy Recovery  ---------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMEY",1)
getAddressList().getMemoryRecordByID(101).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMEY",0)
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Unlimited Items ------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMHI",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMHI",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"[X] &lt;== Weak Foe -------------------------------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableQKL",1)
getAddressList().getMemoryRecordByID(230).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableQKL",0)
getAddressList().getMemoryRecordByID(230).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>232</ID>
          <Description>"[X] &lt;== Quick Production --------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
getAddressList().getMemoryRecordByID(232).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
getAddressList().getMemoryRecordByID(232).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20160919</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Warhammer 40K - Dawn Of War II - Chaos Rising
 Game Version  : 2.6.0.10243
 Game Sponsor  : Myself
 Proces Name   : DOW2.exe
 Script Version: 4.0
 CE Version    : 6.5
 Release date  : 19-Sep-2016
 Author        : Recifense
 History:
 03-Oct-13: First Release (steam)
 08-Jul-14: Release for version 2.6.0.10119 (steam)
 09-Jul-14: Release for version 2.6.0.10137 (steam)
 15-Jul-14: Release for version 2.6.0.10153 (steam)
 08-Aug-14: Release for version 2.6.0.10184 (steam)
 12-Aug-14: Release for version 2.6.0.10198 (steam) (AOB)
 19-Sep-16: Release for version 2.6.0.10243 (steam) + UI + SKIRMISH (AOB)
 Features:
 - God Mode         [1]
 - Quick Kill       [2]
 - Minimum Resource [3]
 - Energy Recovery  [4]
 - Unlimited Items (new)      [5]
 - Quick Production (skirmish)[6]
===========================================
[1] That's it;
[2] The enemy will be easy to kill;
[3] Resource will not go under minimum (6500);
[4] It will recover very quickly;
[5] Items like grenade, bombs, etc will not decrease
[6] Units will be produced very quickly.
===========================================
[USAGE]
 - Run CE 6.5;
 - Run the GAME;
 - Load game process "DOW2.exe" via CE6.5;
 - Load this Table;
 - Activate the main script  by clicking on its box [X];
 - Now Activate the script of each cheat you want to use;
 - Go back to the game and have fun.
===========================================
HOTKEYS:
- See each cheat entry;
===========================================
[WARNING]
- This table is meant to be used in single player games.
===========================================
[INFO]
Tested on Win10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
