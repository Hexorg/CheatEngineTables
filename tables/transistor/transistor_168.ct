<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>111</ID>
      <Description>"Undead (attack once)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthWriteOnTakeDamageAOB,F3 0F 11 43 14 48 8B CB)
registersymbol(healthWriteOnTakeDamageAOB)

label(pHero)
registersymbol(pHero)

alloc(newmem,2048,healthWriteOnTakeDamageAOB) //GSGE.Code.Things.LifeComponent::TakeDamage+3A2)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [rbx+13],0 //&lt;IsPlayerControlled&gt;, 1: player
je originalcode

mov [pHero],rbx
movss [rbx+14],xmm0
mov ecx,(float)1
movd xmm0,ecx
comiss xmm0,[rbx+14]
jbe exit

originalcode:
movss [rbx+14],xmm0

exit:
jmp returnhere

///
pHero:
///

healthWriteOnTakeDamageAOB: //GSGE.Code.Things.LifeComponent::TakeDamage+3A2:
jmp newmem
returnhere:



 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthWriteOnTakeDamageAOB: //GSGE.Code.Things.LifeComponent::TakeDamage+3A2:
db F3 0F 11 43 14
//Alt: movss [rbx+14],xmm0
unregistersymbol(healthWriteOnTakeDamageAOB)

unregistersymbol(pHero)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>113</ID>
          <Description>""</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>131</ID>
              <Description>"//in action (LifeComponent)"</Description>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"&lt;IsInvulnerable&gt;k__BackingField"</Description>
              <VariableType>Byte</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>11</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"&lt;Targetable&gt;k__BackingField"</Description>
              <VariableType>Byte</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>12</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>117</ID>
              <Description>"&lt;IsPlayerControlled&gt;k__BackingField"</Description>
              <VariableType>Byte</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>13</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>118</ID>
              <Description>"&lt;Health&gt;k__BackingField"</Description>
              <VariableType>Float</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>14</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>122</ID>
              <Description>"&lt;Stamina&gt;k__BackingField"</Description>
              <VariableType>Float</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>55C</Offset>
                <Offset>8</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>133</ID>
                  <Description>"&lt;MaxStamina&gt;k__BackingField"</Description>
                  <VariableType>Float</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>32C</Offset>
                    <Offset>430</Offset>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>137</ID>
                  <Description>"&lt;ReloadStaminaRegenDelay&gt;k__BackingField"</Description>
                  <VariableType>Float</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>338</Offset>
                    <Offset>430</Offset>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"&lt;Magnetism&gt;k__BackingField"</Description>
              <VariableType>Float</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>310</Offset>
                <Offset>430</Offset>
                <Offset>8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>132</ID>
      <Description>"Reduced Stamina Usage (use stamina in turn once)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminaReadOnUseInPlanningAOB,F3 0F 5A 8E 5C 05 00 00 F3 0F 5A C6)
registersymbol(staminaReadOnUseInPlanningAOB)

label(fCusStaminaUsage)

alloc(newmem,2048,staminaReadOnUseInPlanningAOB) //7FE89DA598D)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cvtss2sd xmm0,[fCusStaminaUsage]

originalcode:
cvtss2sd xmm1,[rsi+0000055C]

exit:
jmp returnhere

///
fCusStaminaUsage:
dd (float)0.01
///

staminaReadOnUseInPlanningAOB: //7FE89DA598D:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminaReadOnUseInPlanningAOB: //7FE89DA598D:
db F3 0F 5A 8E 5C 05 00 00 F3 0F 5A C6
//Alt: cvtss2sd xmm1,[rsi+0000055C]
//Alt: cvtss2sd xmm0,xmm6
unregistersymbol(staminaReadOnUseInPlanningAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>144</ID>
      <Description>"Ignore Enemies' Invulnerability (attack once)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(get_IsInvulnerableAOB,48 8B 41 38 48 85 C0 75 07 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 11)
registersymbol(get_IsInvulnerableAOB)

alloc(newmem,2048,get_IsInvulnerableAOB) //GSGE.Code.Things.LivingThing::get_IsInvulnerable)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[rcx+10]
test rax,rax
jz originalcode
mov rax,[rax+10]
test rax,rax
jz originalcode
cmp dword ptr [rax+8],#11
jne @f
cmp dword ptr [rax+c],'_Pla'
jne @f
cmp dword ptr [eax+10],'yerU'
jne @f
jmp originalcode

@@:
xor eax,eax
repe ret

originalcode:
mov rax,[rcx+38]
test rax,rax

exit:
jmp returnhere

///

get_IsInvulnerableAOB: //GSGE.Code.Things.LivingThing::get_IsInvulnerable:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
get_IsInvulnerableAOB: //GSGE.Code.Things.LivingThing::get_IsInvulnerable:
db 48 8B 41 38 48 85 C0
//Alt: mov rax,[rcx+38]
//Alt: test rax,rax

unregistersymbol(get_IsInvulnerableAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>167</ID>
      <Description>"Instant Function Cooldown .2 (attack once)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(GUIWeaponUIcanFireBD,0F B6 80 EE 02 00 00 85 C0 74 20 ** ** ** ** ** ** ** ** ** ** ** ** ** ** 2E)
registersymbol(GUIWeaponUIcanFireBD)

alloc(newmem,2048,GUIWeaponUIcanFireBD) //GSGE.Code.GUI.WeaponUI::canFire+BD)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov dword ptr [rbx+c8],0

originalcode:
movzx eax,byte ptr [rax+000002EE]

exit:
jmp returnhere

///

GUIWeaponUIcanFireBD: //GSGE.Code.GUI.WeaponUI::canFire+BD:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
GUIWeaponUIcanFireBD: //GSGE.Code.GUI.WeaponUI::canFire+BD:
db 0F B6 80 EE 02 00 00
//Alt: movzx eax,byte ptr [rax+000002EE]
unregistersymbol(GUIWeaponUIcanFireBD)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>136</ID>
      <Description>"Instant Turn Recovery (execute a turn once)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminaWriteOnRegenAOB,F3 0F 11 81 5C 05 00 00 F3 0F 5A 89 5C 05 00 00)
registersymbol(staminaWriteOnRegenAOB)

alloc(newmem,2048,staminaWriteOnRegenAOB) //GSGE.Code.Things.Unit::grantStamina+24)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov rax,[rcx+430]
movss xmm0,[rax+32c]

originalcode:
movss [rcx+0000055C],xmm0

exit:
jmp returnhere

///

staminaWriteOnRegenAOB: //GSGE.Code.Things.Unit::grantStamina+24:
jmp newmem
nop
nop
nop
returnhere:

///**************************************************///

aobscan(reloadStaminaRegenDelayReadOnPlanningExecutedAOB,F3 0F 5A 80 38 03 00 00 F2 0F 5A D1 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 8B)
registersymbol(reloadStaminaRegenDelayReadOnPlanningExecutedAOB)

alloc(newmem1,2048,reloadStaminaRegenDelayReadOnPlanningExecutedAOB) //7FE89E1571F)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov dword ptr [rax+338],0

originalcode1:
cvtss2sd xmm0,[rax+00000338]

exit1:
jmp returnhere1

///

reloadStaminaRegenDelayReadOnPlanningExecutedAOB: //7FE89E1571F:
jmp newmem1
nop
nop
nop
returnhere1:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminaWriteOnRegenAOB: //GSGE.Code.Things.Unit::grantStamina+24:
db F3 0F 11 81 5C 05 00 00
//Alt: movss [rcx+0000055C],xmm0
unregistersymbol(staminaWriteOnRegenAOB)

///**************************************************///

dealloc(newmem1)
reloadStaminaRegenDelayReadOnPlanningExecutedAOB: //7FE89E1571F:
db F3 0F 5A 80 38 03 00 00
//Alt: cvtss2sd xmm0,[rax+00000338]
unregistersymbol(reloadStaminaRegenDelayReadOnPlanningExecutedAOB)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>162</ID>
      <Description>"Custom MEM Size (access "assess point" once)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(playersProgressHelperCalcSupply83AOB,8B 5C 24 30 EB 07 33 DB)
registersymbol(playersProgressHelperCalcSupply83AOB)
//GSGE.Code.Players.ProgressHelper::CalcSupply+83:

aobscan(deckSizeRelatedReadAOB,48 8B 44 0A 20 48 89 44 24 20 ** ** ** ** ** ** ** ** ** ** 48 8D 4C 24 20 48)
registersymbol(deckSizeRelatedReadAOB)

label(iCustomDeckSize)
registersymbol(iCustomDeckSize)

alloc(newmem,2048,deckSizeRelatedReadAOB) //7FE88F41EDB)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//mov rax,[rsp+58]
//cmp rax,playersProgressHelperCalcSupply83AOB
mov rax,playersProgressHelperCalcSupply83AOB
cmp [rsp+58],rax
jne originalcode
mov eax,[iCustomDeckSize]
mov [rdx+rcx+20],eax

originalcode:
mov rax,[rdx+rcx+20]

exit:
jmp returnhere

///
iCustomDeckSize:
dd #50
///

deckSizeRelatedReadAOB: //7FE88F41EDB:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
deckSizeRelatedReadAOB: //7FE88F41EDB:
db 48 8B 44 0A 20
//Alt: mov rax,[rdx+rcx+20]
unregistersymbol(deckSizeRelatedReadAOB)

unregistersymbol(iCustomDeckSize)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>163</ID>
          <Description>"Custom MEM Size"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>iCustomDeckSize</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>123</ID>
      <Description>"PlayerUnit Fetch (in game)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminaReadOnCalcDestinationAOB,F3 0F 5A 8E 5C 05 00 00 66 0F 57 C0 ** ** ** ** ** ** 0F)
registersymbol(staminaReadOnCalcDestinationAOB)

label(pPlayerUnit)
registersymbol(pPlayerUnit)

alloc(newmem,2048,staminaReadOnCalcDestinationAOB) //GSGE.Code.Things.Unit::calcDestination+93)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pPlayerUnit],rsi
//mov dword ptr [rsi+55c],(float)100

originalcode:
cvtss2sd xmm1,[rsi+0000055C]

exit:
jmp returnhere

///
pPlayerUnit:
///

staminaReadOnCalcDestinationAOB: //GSGE.Code.Things.Unit::calcDestination+93:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminaReadOnCalcDestinationAOB: //GSGE.Code.Things.Unit::calcDestination+93:
db F3 0F 5A 8E 5C 05 00 00
//Alt: cvtss2sd xmm1,[rsi+0000055C]
unregistersymbol(staminaReadOnCalcDestinationAOB)

unregistersymbol(pPlayerUnit)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>140</ID>
          <Description>"//a copy of player for planning in a turn"</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>126</ID>
          <Description>"&lt;IsInvulnerable&gt;k__BackingField"</Description>
          <VariableType>Byte</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>11</Offset>
            <Offset>418</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>127</ID>
          <Description>"&lt;Targetable&gt;k__BackingField"</Description>
          <VariableType>Byte</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>12</Offset>
            <Offset>418</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>128</ID>
          <Description>"&lt;IsPlayerControlled&gt;k__BackingField"</Description>
          <VariableType>Byte</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>13</Offset>
            <Offset>418</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>129</ID>
          <Description>"&lt;Health&gt;k__BackingField"</Description>
          <VariableType>Float</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>14</Offset>
            <Offset>418</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>124</ID>
          <Description>"&lt;Stamina&gt;k__BackingField"</Description>
          <VariableType>Float</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>55C</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>135</ID>
              <Description>"&lt;MaxStamina&gt;k__BackingField"</Description>
              <VariableType>Float</VariableType>
              <Address>pPlayerUnit</Address>
              <Offsets>
                <Offset>32C</Offset>
                <Offset>430</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>138</ID>
              <Description>"&lt;ReloadStaminaRegenDelay&gt;k__BackingField"</Description>
              <VariableType>Float</VariableType>
              <Address>pPlayerUnit</Address>
              <Offsets>
                <Offset>338</Offset>
                <Offset>430</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"&lt;Magnetism&gt;k__BackingField"</Description>
          <VariableType>Float</VariableType>
          <Address>pPlayerUnit</Address>
          <Offsets>
            <Offset>310</Offset>
            <Offset>430</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>143</ID>
      <Description>"Massive Magnetism (?)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(magnetismRead1AOB,F3 0F 5A 88 10 03 00 00 66 0F 57 C0)
registersymbol(magnetismRead1AOB)

alloc(newmem,2048,GSGE.Code.Things.MagnetismComponent::CanTarget+21) 
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rcx
mov rcx,[rbp+418]
test rcx,rcx
jz originalcode
cmp byte ptr [rcx+13],1 //&lt;IsPlayerControlled&gt;
mov ecx,(float)300000
je @f
xor ecx,ecx
@@:
mov [rax+310],ecx

originalcode:
pop rcx
cvtss2sd xmm1,[rax+00000310]

exit:
jmp returnhere

///

magnetismRead1AOB: //GSGE.Code.Things.MagnetismComponent::CanTarget+21:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
magnetismRead1AOB: //GSGE.Code.Things.MagnetismComponent::CanTarget+21:
db F3 0F 5A 88 10 03 00 00
//Alt: cvtss2sd xmm1,[rax+00000310]
unregistersymbol(magnetismRead1AOB)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5533792#5533792
</Comments>
</CheatTable>
