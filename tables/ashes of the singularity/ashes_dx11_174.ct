<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Unlimited Metal"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(metal,Ashes_DX11.exe,F3 0F 10 06 F3 0F 5E 46 08)
alloc(newmem,$1000,metal)

label(code)
label(return)

newmem:

code:
  movss xmm0,[rsi+08]
  movss [rsi],xmm0
  divss xmm0,[rsi+08]
  jmp return

metal:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(metal)

[DISABLE]
metal:
  db F3 0F 10 06 F3 0F 5E 46 08
unregistersymbol(metal)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Ashes_DX11.exe"+185759

"Ashes_DX11.exe"+185724: E8 77 B5 EA FF           -  call Ashes_DX11.exe+30CA0
"Ashes_DX11.exe"+185729: 8B 05 41 D9 CE 03        -  mov eax,[Ashes_DX11.exe+3E73070]
"Ashes_DX11.exe"+18572F: 48 8B 4F 30              -  mov rcx,[rdi+30]
"Ashes_DX11.exe"+185733: 89 44 24 38              -  mov [rsp+38],eax
"Ashes_DX11.exe"+185737: 48 89 5C 24 30           -  mov [rsp+30],rbx
"Ashes_DX11.exe"+18573C: 0F 28 44 24 30           -  movaps xmm0,[rsp+30]
"Ashes_DX11.exe"+185741: 66 0F 7F 85 C0 00 00 00  -  movdqa [rbp+000000C0],xmm0
"Ashes_DX11.exe"+185749: 48 8D 95 C0 00 00 00     -  lea rdx,[rbp+000000C0]
"Ashes_DX11.exe"+185750: E8 CB E6 0A 00           -  call Ashes_DX11.exe+233E20
"Ashes_DX11.exe"+185755: 48 8B 47 38              -  mov rax,[rdi+38]
// ---------- INJECTING HERE ----------
"Ashes_DX11.exe"+185759: F3 0F 10 06              -  movss xmm0,[rsi]
"Ashes_DX11.exe"+18575D: F3 0F 5E 46 08           -  divss xmm0,[rsi+08]
// ---------- DONE INJECTING  ----------
"Ashes_DX11.exe"+185762: 0F 2F C7                 -  comiss xmm0,xmm7
"Ashes_DX11.exe"+185765: 76 0C                    -  jna Ashes_DX11.exe+185773
"Ashes_DX11.exe"+185767: 41 0F 2F C0              -  comiss xmm0,xmm8
"Ashes_DX11.exe"+18576B: 72 09                    -  jb Ashes_DX11.exe+185776
"Ashes_DX11.exe"+18576D: 41 0F 28 C0              -  movaps xmm0,xmm8
"Ashes_DX11.exe"+185771: EB 03                    -  jmp Ashes_DX11.exe+185776
"Ashes_DX11.exe"+185773: 0F 28 C7                 -  movaps xmm0,xmm7
"Ashes_DX11.exe"+185776: F3 0F 11 80 9C 00 00 00  -  movss [rax+0000009C],xmm0
"Ashes_DX11.exe"+18577E: 81 48 60 00 01 00 00     -  or [rax+60],00000100
"Ashes_DX11.exe"+185785: F3 4C 0F 2C 46 08        -  cvttss2si r8,[rsi+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Unlimited Radioactives"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(radioactives,Ashes_DX11.exe,F3 0F 10 46 04 F3 0F 5E)
alloc(newmem,$1000,radioactives)

label(code)
label(return)

newmem:

code:
  movss xmm0,[rsi+0C]
  movss [rsi+04],xmm0
  jmp return

radioactives:
  jmp code
return:
registersymbol(radioactives)

[DISABLE]
radioactives:
  db F3 0F 10 46 04
unregistersymbol(radioactives)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Ashes_DX11.exe"+185B36

"Ashes_DX11.exe"+185B05: E8 96 B1 EA FF           -  call Ashes_DX11.exe+30CA0
"Ashes_DX11.exe"+185B0A: 8B 05 60 D5 CE 03        -  mov eax,[Ashes_DX11.exe+3E73070]
"Ashes_DX11.exe"+185B10: 48 8B 4F 50              -  mov rcx,[rdi+50]
"Ashes_DX11.exe"+185B14: 89 44 24 38              -  mov [rsp+38],eax
"Ashes_DX11.exe"+185B18: 48 89 5C 24 30           -  mov [rsp+30],rbx
"Ashes_DX11.exe"+185B1D: 48 8D 54 24 50           -  lea rdx,[rsp+50]
"Ashes_DX11.exe"+185B22: 0F 28 44 24 30           -  movaps xmm0,[rsp+30]
"Ashes_DX11.exe"+185B27: 66 0F 7F 44 24 50        -  movdqa [rsp+50],xmm0
"Ashes_DX11.exe"+185B2D: E8 EE E2 0A 00           -  call Ashes_DX11.exe+233E20
"Ashes_DX11.exe"+185B32: 48 8B 47 58              -  mov rax,[rdi+58]
// ---------- INJECTING HERE ----------
"Ashes_DX11.exe"+185B36: F3 0F 10 46 04           -  movss xmm0,[rsi+04]
// ---------- DONE INJECTING  ----------
"Ashes_DX11.exe"+185B3B: F3 0F 5E 46 0C           -  divss xmm0,[rsi+0C]
"Ashes_DX11.exe"+185B40: 0F 2F C7                 -  comiss xmm0,xmm7
"Ashes_DX11.exe"+185B43: 76 0C                    -  jna Ashes_DX11.exe+185B51
"Ashes_DX11.exe"+185B45: 41 0F 2F C0              -  comiss xmm0,xmm8
"Ashes_DX11.exe"+185B49: 72 09                    -  jb Ashes_DX11.exe+185B54
"Ashes_DX11.exe"+185B4B: 41 0F 28 C0              -  movaps xmm0,xmm8
"Ashes_DX11.exe"+185B4F: EB 03                    -  jmp Ashes_DX11.exe+185B54
"Ashes_DX11.exe"+185B51: 0F 28 C7                 -  movaps xmm0,xmm7
"Ashes_DX11.exe"+185B54: F3 0F 11 80 9C 00 00 00  -  movss [rax+0000009C],xmm0
"Ashes_DX11.exe"+185B5C: 81 48 60 00 01 00 00     -  or [rax+60],00000100
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Unlimited Quanta"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(quanta,Ashes_DX11.exe,F3 0F 10 5E 34 4C)
alloc(newmem,$1000,quanta)

label(code)
label(return)

newmem:

code:
  mov [rsi+34],(float)10000
  movss xmm3,[rsi+34]
  jmp return

quanta:
  jmp code
return:
registersymbol(quanta)

[DISABLE]
quanta:
  db F3 0F 10 5E 34
unregistersymbol(quanta)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Ashes_DX11.exe"+185EFD

"Ashes_DX11.exe"+185ED1: 89 44 24 20              -  mov [rsp+20],eax
"Ashes_DX11.exe"+185ED5: E8 96 10 FE FF           -  call Ashes_DX11.exe+166F70
"Ashes_DX11.exe"+185EDA: 48 8B 4F 70              -  mov rcx,[rdi+70]
"Ashes_DX11.exe"+185EDE: 48 8D 55 60              -  lea rdx,[rbp+60]
"Ashes_DX11.exe"+185EE2: 48 89 44 24 30           -  mov [rsp+30],rax
"Ashes_DX11.exe"+185EE7: 8B 40 40                 -  mov eax,[rax+40]
"Ashes_DX11.exe"+185EEA: 89 44 24 38              -  mov [rsp+38],eax
"Ashes_DX11.exe"+185EEE: 0F 28 44 24 30           -  movaps xmm0,[rsp+30]
"Ashes_DX11.exe"+185EF3: 66 0F 7F 45 60           -  movdqa [rbp+60],xmm0
"Ashes_DX11.exe"+185EF8: E8 23 DF 0A 00           -  call Ashes_DX11.exe+233E20
// ---------- INJECTING HERE ----------
"Ashes_DX11.exe"+185EFD: F3 0F 10 5E 34           -  movss xmm3,[rsi+34]
// ---------- DONE INJECTING  ----------
"Ashes_DX11.exe"+185F02: 4C 8D 05 8B 1C 64 00     -  lea r8,[Ashes_DX11.exe+7C7B94]
"Ashes_DX11.exe"+185F09: 0F 5A DB                 -  cvtps2pd xmm3,xmm3
"Ashes_DX11.exe"+185F0C: 48 8D 8D 20 01 00 00     -  lea rcx,[rbp+00000120]
"Ashes_DX11.exe"+185F13: 33 D2                    -  xor edx,edx
"Ashes_DX11.exe"+185F15: 66 49 0F 7E D9           -  movq r9,xmm3
"Ashes_DX11.exe"+185F1A: E8 51 10 FE FF           -  call Ashes_DX11.exe+166F70
"Ashes_DX11.exe"+185F1F: 48 8B 8F 88 00 00 00     -  mov rcx,[rdi+00000088]
"Ashes_DX11.exe"+185F26: 48 89 44 24 30           -  mov [rsp+30],rax
"Ashes_DX11.exe"+185F2B: 8B 40 40                 -  mov eax,[rax+40]
"Ashes_DX11.exe"+185F2E: 48 8D 95 80 00 00 00     -  lea rdx,[rbp+00000080]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Set Logistics Limit"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(logistics,Ashes_DX11.exe,8B 81 84 00 00 00 F3 48 0F 2A C0)
alloc(newmem,$1000,logistics)

label(code)
label(return)
label(logistics_val)

newmem:

code:
  mov rax,logistics_val
  mov eax,[rax]
  mov [rcx+00000084],eax
  jmp return

logistics_val:
  dd #1000

logistics:
  jmp code
  nop
return:
registersymbol(logistics)
registersymbol(logistics_val)

[DISABLE]
logistics:
  db 8B 81 84 00 00 00
unregistersymbol(logistics)
unregistersymbol(logistics_val)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Ashes_DX11.exe"+F502A

"Ashes_DX11.exe"+F5005: 83 E0 FB                 -  and eax,-05
"Ashes_DX11.exe"+F5008: 89 43 34                 -  mov [rbx+34],eax
"Ashes_DX11.exe"+F500B: 48 8B 0D 96 B6 D4 03     -  mov rcx,[Ashes_DX11.exe+3E406A8]
"Ashes_DX11.exe"+F5012: 8B 43 34                 -  mov eax,[rbx+34]
"Ashes_DX11.exe"+F5015: A8 08                    -  test al,08
"Ashes_DX11.exe"+F5017: 75 43                    -  jne Ashes_DX11.exe+F505C
"Ashes_DX11.exe"+F5019: 8B 81 80 00 00 00        -  mov eax,[rcx+00000080]
"Ashes_DX11.exe"+F501F: 0F 57 C0                 -  xorps xmm0,xmm0
"Ashes_DX11.exe"+F5022: 0F 57 C9                 -  xorps xmm1,xmm1
"Ashes_DX11.exe"+F5025: F3 48 0F 2A C8           -  cvtsi2ss xmm1,rax
// ---------- INJECTING HERE ----------
"Ashes_DX11.exe"+F502A: 8B 81 84 00 00 00        -  mov eax,[rcx+00000084]
// ---------- DONE INJECTING  ----------
"Ashes_DX11.exe"+F5030: F3 48 0F 2A C0           -  cvtsi2ss xmm0,rax
"Ashes_DX11.exe"+F5035: F3 0F 59 05 2B D2 6C 00  -  mulss xmm0,[Ashes_DX11.exe+7C2268]
"Ashes_DX11.exe"+F503D: 0F 2F C8                 -  comiss xmm1,xmm0
"Ashes_DX11.exe"+F5040: 76 33                    -  jna Ashes_DX11.exe+F5075
"Ashes_DX11.exe"+F5042: BA BF 12 6C ED           -  mov edx,ED6C12BF
"Ashes_DX11.exe"+F5047: 48 8B CB                 -  mov rcx,rbx
"Ashes_DX11.exe"+F504A: E8 E1 06 00 00           -  call Ashes_DX11.exe+F5730
"Ashes_DX11.exe"+F504F: 83 4B 34 08              -  or dword ptr [rbx+34],08
"Ashes_DX11.exe"+F5053: C7 43 3C 00 00 00 00     -  mov [rbx+3C],00000000
"Ashes_DX11.exe"+F505A: EB 19                    -  jmp Ashes_DX11.exe+F5075
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Logistics Limit"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>logistics_val</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Instant Build"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(build,Ashes_DX11.exe,45 0F 2F 65 74)
alloc(newmem,$1000,build)

label(code)
label(return)

newmem:
  cmp [r13+50],0
  jne code
  mov [r13+74],(float)1
code:
  comiss xmm12,[r13+74]
  jmp return

build:
  jmp newmem
return:
registersymbol(build)

[DISABLE]
build:
  db 45 0F 2F 65 74
unregistersymbol(build)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Ashes_DX11.exe"+595FF

"Ashes_DX11.exe"+595C9: 44 8B 2C 88              -  mov r13d,[rax+rcx*4]
"Ashes_DX11.exe"+595CD: 41 81 E5 FF FF FF 00     -  and r13d,00FFFFFF
"Ashes_DX11.exe"+595D4: 4D 69 ED E0 00 00 00     -  imul r13,r13,000000E0
"Ashes_DX11.exe"+595DB: 4C 03 2D 7E A1 C4 03     -  add r13,[Ashes_DX11.exe+3CA3760]
"Ashes_DX11.exe"+595E2: 45 8B 75 5C              -  mov r14d,[r13+5C]
"Ashes_DX11.exe"+595E6: 44 89 75 10              -  mov [rbp+10],r14d
"Ashes_DX11.exe"+595EA: 41 83 FE FF              -  cmp r14d,-01
"Ashes_DX11.exe"+595EE: 0F 84 8A 08 00 00        -  je Ashes_DX11.exe+59E7E
"Ashes_DX11.exe"+595F4: 41 F6 45 64 24           -  test byte ptr [r13+64],24
"Ashes_DX11.exe"+595F9: 0F 85 7F 08 00 00        -  jne Ashes_DX11.exe+59E7E
// ---------- INJECTING HERE ----------
"Ashes_DX11.exe"+595FF: 45 0F 2F 65 74           -  comiss xmm12,[r13+74]
// ---------- DONE INJECTING  ----------
"Ashes_DX11.exe"+59604: 0F 83 74 08 00 00        -  jae Ashes_DX11.exe+59E7E
"Ashes_DX11.exe"+5960A: 45 8B 7D 58              -  mov r15d,[r13+58]
"Ashes_DX11.exe"+5960E: F3 41 0F 10 7D 30        -  movss xmm7,[r13+30]
"Ashes_DX11.exe"+59614: F3 41 0F 10 75 34        -  movss xmm6,[r13+34]
"Ashes_DX11.exe"+5961A: 48 8D 15 DF 69 FA FF     -  lea rdx,[Ashes_DX11.exe]
"Ashes_DX11.exe"+59621: 41 0F B7 C7              -  movzx eax,r15w
"Ashes_DX11.exe"+59625: 45 8B E7                 -  mov r12d,r15d
"Ashes_DX11.exe"+59628: F3 45 0F 10 45 38        -  movss xmm8,[r13+38]
"Ashes_DX11.exe"+5962E: 41 C1 EC 08              -  shr r12d,08
"Ashes_DX11.exe"+59632: 0F 28 C7                 -  movaps xmm0,xmm7
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>metal</Name>
      <Address> 7FF746F65759</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>radioactives</Name>
      <Address> 7FF746F65B36</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>build</Name>
      <Address> 7FF746E395FF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>quanta</Name>
      <Address> 7FF746F65EFD</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
