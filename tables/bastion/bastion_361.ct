<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Inf. Health - Undead"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(start_undead)
registersymbol(start_undead)
aobscan(aob_undead,89 83 80 02 00 00 8B 45 F0 29 83 58 02 00 00 8B 83 54 02 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

cmp [ebx+00000288],0    //check player
je originalcode         //do the subtracting code if it's not player

cmp [ebx+00000258],eax  //check the health after damage
jle exit                //skip the subtracting code if health is lower than the damage

originalcode:
sub [ebx+00000258],eax

exit:
jmp returnhere

aob_undead+9:
start_undead:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
start_undead:
sub [ebx+00000258],eax
//Alt: db 29 83 58 02 00 00
unregistersymbol(start_undead)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Inf. Health - Lock always"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(start_inf_health)
registersymbol(start_inf_health)
aobscan(aob_inf_health,89 83 80 02 00 00 8B 45 F0 29 83 58 02 00 00 8B 83 54 02 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebx+00000288],0        //check player
jg exit                     //skip the subtracting code if it's the player

originalcode:
sub [ebx+00000258],eax

exit:
jmp returnhere

aob_inf_health+9:
start_inf_health:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
start_inf_health:
sub [ebx+00000258],eax
//Alt: db 29 83 58 02 00 00
unregistersymbol(start_inf_health)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Inf. Ammo V1 - Lock when wpn not fully loaded"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(FAmmo_start1)
label(FAmmo_start2)
label(FAmmo_returnhere)
label(FAmmo_originalcode)
label(FAmmo_exit)
label(pFAmmo)
label(pRAmmo)
label(RAmmo_start1)
label(RAmmo_start2)
label(RAmmo_returnhere)
label(RAmmo_originalcode)
label(RAmmo_exit)
registersymbol(FAmmo_start1)
registersymbol(pFAmmo)
registersymbol(pRAmmo)
registersymbol(RAmmo_start1)
aobscan(aob_FAmmo,89 81 3C 01 00 00 8B CA)
aobscan(aob_RAmmo,89 86 80 00 00 00 8B 46 14) //aob scan the game code that write the actual ammo

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//=========================================//
//add lines to the game code that store the pointers of ammo whenever the game
// is writing the current ammo of the wpn using to the screen
FAmmo_start2:
mov [pFAmmo],eax          //store the pointer for the ammo on screen
mov [pRAmmo],esi          //store the pointer for the real ammo

FAmmo_originalcode:
mov [ecx+0000013C],eax    //original game code that write the ammo on screen

FAmmo_exit:
jmp FAmmo_returnhere

//=========================================//
//add codes that stop writing the value of ammo if the ammo of the player's
//weapon isn't fully loaded
RAmmo_start2:
cmp esi,[pRAmmo]          //check if it's one of the player's weapon,
jne RAmmo_originalcode    //continue the game code if it's not a player weapon

cmp [esi+00000080],1      //check if the value of real ammo is 1 (fully loaded)
jne RAmmo_exit            //skip the game code if not.

RAmmo_originalcode:
mov [esi+00000080],eax    //original game code that write the ammo

RAmmo_exit:
jmp RAmmo_returnhere

//=========================================//
//decalre the variable
pFAmmo:
dd 0

pRAmmo:
dd 0

//=========================================//
//code injection
aob_FAmmo:
FAmmo_start1:
jmp FAmmo_start2
nop
FAmmo_returnhere:

aob_RAmmo:
RAmmo_start1:
jmp RAmmo_start2
nop
RAmmo_returnhere:
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
FAmmo_start1:
mov [ecx+0000013C],eax
//Alt: db 89 81 3C 01 00 00
RAmmo_start1:
mov [esi+00000080],eax
//Alt: db 89 86 80 00 00 00
unregistersymbol(FAmmo_start1)
unregistersymbol(pFAmmo)
unregistersymbol(pRAmmo)
unregistersymbol(RAmmo_start1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Inf. Ammo V2 - Lock always"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(FAmmo_start1)
label(FAmmo_start2)
label(FAmmo_returnhere)
label(FAmmo_originalcode)
label(FAmmo_exit)
label(pFAmmo)
label(pRAmmo)
label(RAmmo_start1)
label(RAmmo_start2)
label(RAmmo_returnhere)
label(RAmmo_originalcode)
label(RAmmo_exit)
registersymbol(FAmmo_start1)
registersymbol(pFAmmo)
registersymbol(pRAmmo)
registersymbol(RAmmo_start1)
aobscan(aob_FAmmo,89 81 3C 01 00 00 8B CA)    //aob scan the game code that write the ammo on screen
aobscan(aob_RAmmo,89 86 80 00 00 00 8B 46 14) //aob scan the game code that write the actual ammo

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//=========================================//
//add lines to the game code that store the pointers of ammo whenever the game
// is writing the current ammo of the wpn using to the screen
FAmmo_start2:
mov [pFAmmo],eax          //store the pointer for the ammo on screen
mov [pRAmmo],esi          //store the pointer for the real ammo

FAmmo_originalcode:
mov [ecx+0000013C],eax    //original game code that write the ammo on screen

FAmmo_exit:
jmp FAmmo_returnhere

//=========================================//
//add codes that stop writing the value of real ammo if it's a player weapon
RAmmo_start2:
cmp esi,[pRAmmo]          //check if it's one of the player's weapon,
je RAmmo_exit             //skip the game code if it's a player weapon

RAmmo_originalcode:
mov [esi+00000080],eax    //original game code that write the real ammo

RAmmo_exit:
jmp RAmmo_returnhere

//=========================================//
//decalre the variable
pFAmmo:
dd 0

pRAmmo:
dd 0

//=========================================//
//code injection
aob_FAmmo:
FAmmo_start1:
jmp FAmmo_start2
nop
FAmmo_returnhere:

aob_RAmmo:
RAmmo_start1:
jmp RAmmo_start2
nop
RAmmo_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
FAmmo_start1:
mov [ecx+0000013C],eax
//Alt: db 89 81 3C 01 00 00
RAmmo_start1:
mov [esi+00000080],eax
//Alt: db 89 86 80 00 00 00
unregistersymbol(FAmmo_start1)
unregistersymbol(pFAmmo)
unregistersymbol(pRAmmo)
unregistersymbol(RAmmo_start1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Inf. Ammo V3 - Lock when 1 bullet left"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(FAmmo_start1)
label(FAmmo_start2)
label(FAmmo_returnhere)
label(FAmmo_originalcode)
label(FAmmo_exit)
label(pFAmmo)
label(pRAmmo)
label(RAmmo_start1)
label(RAmmo_start2)
label(RAmmo_returnhere)
label(RAmmo_originalcode)
label(RAmmo_exit)
registersymbol(FAmmo_start1)
registersymbol(pFAmmo)
registersymbol(pRAmmo)
registersymbol(RAmmo_start1)
aobscan(aob_FAmmo,89 81 3C 01 00 00 8B CA)    //aob scan the game code that write the ammo on screen
aobscan(aob_RAmmo,89 86 80 00 00 00 8B 46 14) //aob scan the game code that write the actual ammo

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//=========================================//
//add lines to the game code that store the pointers of ammo whenever the game
// is writing the current ammo of the wpn using to the screen
FAmmo_start2:
mov [pFAmmo],eax          //store the pointer for the ammo on screen
mov [pRAmmo],esi          //store the pointer for the real ammo

FAmmo_originalcode:
mov [ecx+0000013C],eax    //original game code that write the ammo on screen

FAmmo_exit:
jmp FAmmo_returnhere

//=========================================//
//add codes that stop writing the value of real ammo if there's only
//one fake ammo (i.e. ammo on screen) left
RAmmo_start2:
cmp esi,[pRAmmo]          //check if it's one of the player's weapon,
jne RAmmo_originalcode    //continue the game code if it's not a player weapon

cmp [pFAmmo],1            //check if the current ammo on screen is 1 or lesser,
jle RAmmo_exit            //skip the game code if true

RAmmo_originalcode:
mov [esi+00000080],eax    //original game code that write the real ammo

RAmmo_exit:
jmp RAmmo_returnhere

//=========================================//
//decalre the variable
pFAmmo:
dd 0

pRAmmo:
dd 0

//=========================================//
//code injection
aob_FAmmo:
FAmmo_start1:
jmp FAmmo_start2
nop
FAmmo_returnhere:

aob_RAmmo:
RAmmo_start1:
jmp RAmmo_start2
nop
RAmmo_returnhere:
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
FAmmo_start1:
mov [ecx+0000013C],eax
//Alt: db 89 81 3C 01 00 00
RAmmo_start1:
mov [esi+00000080],eax
//Alt: db 89 86 80 00 00 00
unregistersymbol(FAmmo_start1)
unregistersymbol(pFAmmo)
unregistersymbol(pRAmmo)
unregistersymbol(RAmmo_start1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Inf. Health Tonic &amp; Black Tonic"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(start_inf_tonic)
registersymbol(start_inf_tonic)
aobscan(aob_inf_tonic,29 56 40 8B 4E 40 8B 46 14)

aob_inf_tonic:
start_inf_tonic:
nop
nop
nop

 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
start_inf_tonic:
sub [esi+40],edx
//Alt: db 29 56 40
unregistersymbol(start_inf_tonic)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Search Tonic's Pointer"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(HT_returnhere)
label(HT_originalcode)
label(HT_exit)
label(BT_returnhere)
label(BT_originalcode)
label(BT_exit)
label(sHT1)
label(sHT2)
label(sBT1)
label(sBT2)
label(pHT)
label(pBT)
registersymbol(sHT1)
registersymbol(sBT1)
registersymbol(pHT)
registersymbol(pBT)
aobscan(aob_sHT,8B 42 40 89 45 E8 8B 4E 44) //aob scan the game code that access the health tonic address
aobscan(aob_sBT,8B 42 40 89 45 E4 8B 4E 48) //aob scan the game code that access the black tonic address

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//=======================================//
//add a line to the game code to store the pointer for health tonic
//every time the game code reading the health tonic value
sHT2:
mov [pHT],edx     //store the pointer for health tonic

HT_originalcode:
mov eax,[edx+40]  //that's when the game code read the health tonic originally
mov [ebp-18],eax

HT_exit:
jmp HT_returnhere

//=======================================//
//add a line to the game code to store the pointer for black tonic
//every time the game code reading the black tonic value
sBT2:
mov [pBT],edx     //store the pointer for black tonic

BT_originalcode:
mov eax,[edx+40]  //that's when the game code read the black tonic originally
mov [ebp-1C],eax

BT_exit:
jmp BT_returnhere

//=======================================//
//decalre the variables
pHT:
dd 0

pBT:
dd 0

//=======================================//
//code injection
aob_sHT:
sHT1:
jmp sHT2
nop
HT_returnhere:

aob_sBT:
sBT1:
jmp sBT2
nop
BT_returnhere:



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
sHT1:
mov eax,[edx+40]
mov [ebp-18],eax
//Alt: db 8B 42 40 89 45 E8
sBT1:
mov eax,[edx+40]
mov [ebp-1C],eax
//Alt: db 8B 42 40 89 45 E4
unregistersymbol(sHT1)
unregistersymbol(sBT1)
unregistersymbol(pHT)
unregistersymbol(pBT)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Health Tonic"</Description>
      <Color>000000</Color>
      <VariableType>2 Bytes</VariableType>
      <Address>pHT</Address>
      <Offsets>
        <Offset>40</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Black Tonic"</Description>
      <Color>000000</Color>
      <VariableType>2 Bytes</VariableType>
      <Address>pBT</Address>
      <Offsets>
        <Offset>40</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Special Skill (Reference only)"</Description>
      <Color>000000</Color>
      <VariableType>2 Bytes</VariableType>
      <Address>pBT</Address>
      <Offsets>
        <Offset>80</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Inf. Ammo - OLD VERSION"</Description>
      <Color>000000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,1024) //2kb should be enough
label(FAmmo_start1)
label(FAmmo_start2)
label(FAmmo_returnhere)
label(FAmmo_originalcode)
label(FAmmo_exit)
label(pFAmmo)
label(RAmmo_start1)
label(RAmmo_start2)
label(RAmmo_returnhere)
label(RAmmo_originalcode)
label(RAmmo_exit)
registersymbol(FAmmo_start1)
registersymbol(pFAmmo)
registersymbol(RAmmo_start1)
aobscan(aob_FAmmo,89 81 3C 01 00 00 8B CA)    //aob scan the game code that write the ammo on screen
aobscan(aob_RAmmo,89 86 80 00 00 00 8B 46 14) //aob scan the game code that write the actual ammo

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

//=========================================//
//add a line to the game code that store the value of the ammo on screen
//whenever the game is writing the current ammo of the wpn using to the screen
FAmmo_start2:
mov [pFAmmo],eax          //store the pointer for the ammo on screen

FAmmo_originalcode:
mov [ecx+0000013C],eax    //original game code that write the ammo on screen

FAmmo_exit:
jmp FAmmo_returnhere

//=========================================//
//add codes that stop writing the value of real ammo if there's only
//one fake ammo (i.e. ammo on screen) left
RAmmo_start2:
cmp ebp,0013ED60          //check if it's one of the player's weapon,
jne RAmmo_originalcode    //continue the game code if it's not a player weapon

cmp [pFAmmo],1            //check if the current ammo on screen is 1 or lesser,
jle RAmmo_exit            //skip the game code if true

RAmmo_originalcode:
mov [esi+00000080],eax    //original game code that write the real ammo

RAmmo_exit:
jmp RAmmo_returnhere

//=========================================//
//decalre the variable
pFAmmo:
dd 0

//=========================================//
//code injection
aob_FAmmo:
FAmmo_start1:
jmp FAmmo_start2
nop
FAmmo_returnhere:

aob_RAmmo:
RAmmo_start1:
jmp RAmmo_start2
nop
RAmmo_returnhere:
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
FAmmo_start1:
mov [ecx+0000013C],eax
//Alt: db 89 81 3C 01 00 00
RAmmo_start1:
mov [esi+00000080],eax
//Alt: db 89 86 80 00 00 00
unregistersymbol(FAmmo_start1)
unregistersymbol(pFAmmo)
unregistersymbol(RAmmo_start1)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>special - Code :sub [esi+40],edx</Description>
      <Address>0483FD1D</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>7E</Byte>
        <Byte>40</Byte>
        <Byte>00</Byte>
        <Byte>7E</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>56</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>40</Byte>
        <Byte>8B</Byte>
        <Byte>46</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>HP - Code :sub [ebx+00000258],eax</Description>
      <Address>0DE9A104</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>83</Byte>
        <Byte>58</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>83</Byte>
        <Byte>54</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>$ - Code :mov [ecx],eax</Description>
      <Address>00F4F4F9</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>C1</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>14</Byte>
        <Byte>8B</Byte>
        <Byte>55</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>ammo cmp Code :cmp dword ptr [esi+00000080],01</Description>
      <Address>0705F54E</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>D4</Byte>
        <Byte>48</Byte>
        <Byte>DD</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>BE</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>75</Byte>
        <Byte>54</Byte>
        <Byte>8B</Byte>
        <Byte>CE</Byte>
        <Byte>BA</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pHero1</Name>
      <Address>0217018D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MyCode</Name>
      <Address>03740000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHero</Name>
      <Address>0374014B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>0374014F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSel</Name>
      <Address>03740153</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMoney</Name>
      <Address>03740157</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>0374015B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMM</Name>
      <Address>0374015F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMI</Name>
      <Address>03740163</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMC</Name>
      <Address>03740167</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinMoney</Name>
      <Address>03740173</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGodMode</Name>
      <Address>005BC049</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonSel</Name>
      <Address>0055FD16</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonMoney</Name>
      <Address>00490890</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonCoolDown</Name>
      <Address>0055F9DA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGodMode1</Name>
      <Address>005A9180</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>start_inf_potion</Name>
      <Address>0483FD1D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>start_undead</Name>
      <Address>06D7D7C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>start_inf_tonic</Name>
      <Address>06D8F25D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sHT1</Name>
      <Address>06D51D9B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>sBT1</Name>
      <Address>06D51E36</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHT</Name>
      <Address>067A0022</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBT</Name>
      <Address>067A0026</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
