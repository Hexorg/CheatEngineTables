<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"[X] &lt;== SoTS 2 32bits UP63 Savings Script"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32bits)
 Game Version  : 1.0.21440.1 (Update 48)
 Script Version: 1.2
 CE Version    : 6.2
 Release date  : 12-Jun-2012
 Author        : Recifense
 Features:
 - Minimum Savings
 - Fast Research
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(sqlite3.dll+00006f69,c7 47 04 00 00 00 00 b0 01 c3) //ok
assert(sqlite3.dll+00013615,0f b7 73 08 3b c6 ?? ?? 0f b7) //ok

//=========================================
alloc(MyCodeR,1024,sqlite3.dll)
//=========================================
// Declaration section
label(_MonPlayer)
label(_MonP0)
label(_MonP1)
label(_MonP2)
label(_MonP20)
label(_MonP3)
label(_MonP30)
label(_MonP31)
label(_MonP4)
label(_MonP4a)
label(_MonP40)
label(_MonResearch)
label(_MonResearch1)
label(_BackMP)
label(_ExitMP)
label(_MonResearchR)
label(_BackMRR)
label(_ExitMRR)
label(pAll)
label(pOne)
label(pRes)
label(pPlayer)
label(iEnableMR)
label(iEnableMRe)
label(iEnableMRR)
label(iSavings)
label(qSavings)
label(iMinRes)
label(qMinRes)
label(iSize)
label(qXMM0)
label(aobSignature0)
label(aobSignature1)
label(pResearch)
label(pStatus)
label(pNeedValue)
label(iNeedSize)
label(pCurFeas)
label(iCurFeas)
label(pMaxFeas)
label(iMaxFeas)
label(iFlagCR)

//=========================================
// Registering Symbols
registersymbol(MyCodeR)
registersymbol(pAll)
registersymbol(pOne)
registersymbol(pPlayer)
registersymbol(iEnableMR)
registersymbol(iEnableMRe)
registersymbol(iEnableMRR)
registersymbol(iSavings)
registersymbol(qSavings)
registersymbol(pResearch)

//=========================================
MyCodeR:
//========================================= ok **
// EAX = pbID (base + 2 or + 3)
// EDX = iID
// EBX = ECX = Base

_MonPlayer:
 push ecx
 push edx
 push edi
 push esi

 movsd [qXMM0],xmm0

 mov [pAll],ebx

 cmp edx,1
 jne _ExitMP

 mov [pOne],ebx

 inc eax

 movzx edx,byte ptr [eax]          // Get size in bytes
 cmp edx,#43                       // Is it Savings? **
 jle _MonResearch                  // Jump if false

 cmp edx,#50                       // Is it Savings? **
 jge _ExitMP                       // Jump if false

 mov dl,[eax+06]
 cmp dl,03
 jge _ExitMP                       // Jump if false

//==&gt; Savings

 mov [pPlayer],ebx

 push ecx
 push ebx
 push eax

 mov ecx,#09
 xor ebx,ebx

_MonP0:
 inc eax

 mov dl,[eax]
 cmp dl,0C
 jle _MonP1

 sub dl,0d                         // Adjust in case of string
 shr dl,1                          // the ",1" is forced because of CE

_MonP1:
 movzx edx,dl
 add ebx,edx
 loop _MonP0

 pop eax
 push eax

 movzx edx, byte ptr [eax]

 add edx,ebx
 add edx,eax                       // EDX = pCurrentSavings

 mov [pRes],edx

 movzx ecx,byte ptr [eax+0a]       // Get Info Size

 mov ebx,iSavings+2
 cmp ecx,3
 je _MonP2

 mov ebx,qSavings+7
 cmp ecx,7
 jne _MonP4

 mov ecx,8

_MonP2:                            // Copy value to local variable
 mov [pRes],edx
 mov [iSize],ecx

_MonP20:
 mov al,[edx]
 mov [ebx],al
 inc edx
 dec ebx
 loop _MonP20

 cmp dword ptr [iEnableMR],0
 je _MonP4                         // Jump if feature is disabled

 mov ecx,[pPlayer]
 mov cl,[ecx]

 mov ecx,[iSize]
 cmp ecx,8
 je _MonP3

 mov edx,[iMinRes]
 cmp edx,[iSavings]
 jle _MonP4

 mov [iSavings],edx
 jmp _MonP30

_MonP3:
 movsd xmm0,[qMinRes]

 mov edx,[qMinRes+04]
 cmp edx,[qSavings+04]
 jle _MonP4

 movsd [qSavings],xmm0

_MonP30:
 mov edx,[pRes]
 mov ecx,[iSize]

 mov ebx,qSavings+7
 cmp ecx,8
 je _MonP31

 mov ebx,iSavings+2

_MonP31:
 mov al,[ebx]
 mov [edx],al
 inc edx
 dec ebx
 loop _MonP31

//==============================
//RESEARCH: Doing the magic (Mixing the ingredients)
_MonP4:
 cmp dword ptr [iEnableMRR],0
 je _MonP40                        // Jump if feature is disabled

 cmp dword ptr [iFlagCR],0
 je _MonP40                        // Jump if no research magic

 xor eax,eax
 mov [iFlagCR],eax

 mov ecx,[pNeedValue]
 mov eax,[iNeedSize]

 mov byte ptr [ecx+00],03
 mov byte ptr [ecx+01],e8

 cmp eax,2
 je _MonP4a

 mov byte ptr [ecx+00],00
 mov byte ptr [ecx+01],03
 mov byte ptr [ecx+02],e8

_MonP4a:
 mov eax,[iMaxFeas]

 cmp eax,1
 je _MonP40

 cmp eax,7
 jne _MonP40

 mov ecx,[pMaxFeas]

 mov byte ptr [ecx+00],3f           // Maximum Feasability = 99%
 mov byte ptr [ecx+01],ef

 mov eax,[iCurFeas]

 cmp eax,1
 je _MonP40

 cmp eax,7
 jne _MonP40

 mov ebx,[pCurFeas]

 mov eax,[ecx+04]
 mov [ebx+04],eax
 mov eax,[ecx]
 mov [ebx],eax                      // Current Feasability = 99%
// Magic Done :)
//===============================
_MonP40:
 pop eax
 pop ebx
 pop ecx
 jmp _ExitMP
// ==&gt; Research
_MonResearch:
 cmp dword ptr [iEnableMRe],0
 je _ExitMP                         // Jump if feature is disabled

 cmp edx,#24 //**
 jne _MonResearch1

 mov ecx,#16
 mov esi,eax
 mov edi,aobSignature0

 repe cmpsb
 jne _ExitMP

 mov cl,[eax]

 mov byte ptr [eax+1b],7f
 mov byte ptr [eax+2d],ec
 jmp _ExitMP

_MonResearch1:
 cmp edx,#07 //**
 jne _ExitMP

 mov ecx,#07
 mov esi,eax
 mov edi,aobSignature1

 repe cmpsb
 jne _ExitMP

 mov cl,[eax]

 mov byte ptr [eax+0a],7f

_ExitMP:
 pop esi
 pop edi
 pop edx
 pop ecx
 movsd xmm0,[qXMM0]

 mov [edi+04],00000000             // Original code
 jmp _BackMP                       // Back to main code

//=========================================
// When setting/unsetting a research
// EDI = pInfoSize
_MonResearchR:
 pushad

 mov ebx,edi
 lea esi,[ebx+09]

// Validating Format
 movzx eax,byte ptr [ebx]
 cmp eax,9
 jne _ExitMRR

 movzx eax,byte ptr [ebx+01]
 cmp eax,1
 jne _ExitMRR

 add esi,eax  //01

 movzx eax,byte ptr [ebx+02]
 add esi,eax  //03

 movzx eax,byte ptr [ebx+03]
 cmp eax,1
 jne _ExitMRR

 mov [pStatus],esi
 add esi,eax

 movzx eax,byte ptr [ebx+04]
 test eax,eax
 jz _ExitMRR

 cmp eax,4
 jge _ExitMRR

 add esi,eax

 movzx eax,byte ptr [ebx+05]       // Get size of needed value
 test eax,eax
 jz _ExitMRR

 cmp eax,4
 jge _ExitMRR

 mov [iNeedSize],eax
 mov [pNeedValue],esi
 add esi,eax

 movzx ecx,byte ptr [ebx+06]
 test ecx,ecx
 jz _ExitMRR

 cmp ecx,8
 jge _ExitMRR

 mov [iCurFeas],ecx
 mov [pCurFeas],esi
 add esi,ecx

 movzx eax,byte ptr [ebx+07]
 test eax,eax
 jz _ExitMRR

 cmp eax,8
 jge _ExitMRR

 mov [iMaxFeas],eax
 mov [pMaxFeas],esi

 mov [pResearch],ebx

 cmp dword ptr [iEnableMRR],0
 je _ExitMRR                       // Jump if feature is disabled

//Preparing the magic (Choosing the ingredients)

 mov dword ptr [iFlagCR],1

 cmp ecx,7
 jne _ExitMRR

 inc dword ptr [pMaxFeas]

_ExitMRR:
 popad

 movzx esi,word ptr [ebx+08]       // Original code
 cmp eax,esi                       // Original code
 jmp _BackMRR                      // Back to main code

//=========================================
 db '=================================&gt;'
 db 'CE6.1 Script by Recifense 061212'
//=========================================
// Variables
iEnableMR:
 dd 1
iEnableMRe:
 dd 0
iEnableMRR:
 dd 0
pPlayer:
 dd 0
pAll:
 dd 0
pOne:
 dd 0
pRes:
 dd 0
iSize:
 dd 0
qXMM0:
 dq 0
iMinRes:
 dd #2000000
qMinRes:
 dq (double)2000000,0
iSavings:
 dd 0
qSavings:
 dq 0
aobSignature0:
// db 18 00 02 01 04 07 01 01 01 01 01 07 01 01 01 07
 db 18 aa bb cc dd 07 01 01 01 01 01 07 01 01 01 07
aobSignature1:
// db 07 02 01 04 01 01 01
 db 07 aa bb cc dd 01 01
pResearch:
 dd 0
pStatus:
 dd 0
pNeedValue:
 dd 0
iNeedSize:
 dd 0
pCurFeas:
 dd 0
iCurFeas:
 dd 0
pMaxFeas:
 dd 0
iMaxFeas:
 dd 0
iFlagCR:
 dd 0

//=========================================
// Hacking Points
sqlite3.dll+00006f69: //up48
 jmp _MonPlayer
 nop
 nop
_BackMP:

sqlite3.dll+00013615: //new
 jmp _MonResearchR
 nop
_BackMRR:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
sqlite3.dll+006f69: //up31
// mov [edi+04],00000000
 db c7 47 04 00 00 00 00

sqlite3.dll+00013615: //new
// movzx esi,word ptr [ebx+08]
// cmp eax,esi
 db 0f b7 73 08 3b c6

//=========================================
// Unregistering Symbols
unregistersymbol(MyCodeR)
unregistersymbol(pAll)
unregistersymbol(pOne)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMRe)
unregistersymbol(iEnableMRR)
unregistersymbol(pPlayer)
unregistersymbol(iSavings)
unregistersymbol(qSavings)
unregistersymbol(pResearch)

//=========================================
dealloc(MyCodeR)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable Minimum Savings =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable Fast Research =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"[X] &lt;== SoTS 2 32bits UP63 GM Script"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32bits)
 Game Version  : 1.0.22437.3 (Update 63)
 Script Version: 1.0
 CE Version    : 6.2
 Release date  : 19-Jul-2012
 Author        : Recifense
 Feature(s):
 - God Mode
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(mars.exe+000e3713,8b 8e 90 00 00 00 8b b6 94 00 00 00 33 c0 33 db) //_MS
assert(mars.exe+002a6544,d9 00 d9 44 24 28 8b 4c 24 50 8b 54 24 2c dc e9) //_GM
assert(mars.exe+001b5251,b0 01 d2 e0 08 06 8b 44 24 4c 40 45 89 44 24 4c) //_GM2
assert(mars.exe+0015bc92,8b 89 94 08 00 00 85 c9 ?? ?? 39 41 38)          //_MSP
assert(mars.exe+002a1570,83 ec 08 53 55 8b 6c 24 14 bb 01 00 00 00 89 5c) //_MD1

//=========================================
alloc(MyCode,2048,mars.exe)
//=========================================
// Declaration section
label(_MonSel)
label(_BackMS)
label(_ExitMS)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_FindShip)
label(_MonShipParts)
label(_MonSP0)
label(_BackMSP)
label(_ExitMSP)
label(_ClearArmor)
label(_ClearA0)
label(_ExitCA)
label(_MonDamage1)
label(_BackMD1)
label(_ExitMD1)
label(pUnit)
label(pCommon)
label(pSel)
label(pRes)
label(iEnableGM)
label(iEnableWF)
label(iEAX)
label(iECX)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pSel)
registersymbol(pCommon)
registersymbol(iEnableGM)
registersymbol(iEnableWF)

//=========================================
MyCode:
//========================================= 63
// Activated during combat when a unit is selected
_MonSel:
 mov [pSel],esi

 mov ecx,[esi+00000170]
 mov [pCommon],ecx

_ExitMS:
 mov ecx,[esi+00000090]            // Original code
 jmp _BackMS                       // Back to main code

//========================================= 63 pending
// Activated during combat
// ESI = pParts
_GodMode:
 mov [iECX],ecx

 mov ecx,[esi+30]
 cmp ecx,[esp+1c] //u53
 jne _ExitGM

 mov ecx,[ecx+00000170]
 cmp ecx,[pCommon]
 jne _ExitGM

 cmp dword ptr [iEnableGM],0
 je _ExitGM                         // Jump if feature is disabled

 push esi
 push edi

 mov esi,[esi+00000898] //**88c
 push esi

 mov edi,eax
 mov ecx,#13
 rep movsd

 pop esi
 lea edi,[eax+00dc]
 mov ecx,#13
 rep movsd

 pop edi
 pop esi

 xor ecx,ecx
 mov [esp+28],ecx

_ExitGM:
 mov ecx,[iECX]

 fld dword ptr [eax]               // Original code
 fld dword ptr [esp+28]            // Original code
 jmp _BackGM                       // Back to main code

//========================================= 63
// Activated during combat (ARMOR)
// EDX = Armor Base
_GodMode2:
 mov al,01
 shl al,cl
 or [esi],al

 cmp dword ptr [iEnableGM],0
 je _ExitGM2                        // Jump if feature is disabled

 call _FindShip
 jne _ExitGM2

 mov eax,[eax+04]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+00000170]
 cmp eax,[pCommon]
 jne _ExitGM2

 xor al,al
 mov [esi],al

_ExitGM2:
 jmp _BackGM2                        // Back to main code

//========================================= 63
// Find Part Owner
// RDX = Starting Point
// return = E =&gt; found
_FindShip:
 push ecx
 push edx
 push edi

 pushf
 std

 mov ecx,00000700
 mov eax,mars.exe+003e1444 // up63
 mov edi,edx
 repne scasd

 popf

 lea edi,[edi+04]

 mov edx,[edi]
 cmp eax,edx
 mov eax,edi

 pop rdi
 pop edx
 pop rcx
 ret

//========================================= 63
// Activated during combat
_MonShipParts:
 push eax
 push ecx

 mov eax,ecx

 mov ecx,[eax+30]
 test ecx,ecx
 jz _ExitMSP

 mov ecx,[ecx+00000170]
 cmp ecx,[pCommon]
 jne _MonSP0                       // Jump if it is not a player's ship

 mov ecx,[eax+00000894] //**888
 test ecx,ecx
 jz _ExitMSP

 mov ecx,[eax+00000898] //**88c
 test ecx,ecx
 jz _ExitMSP

 cmp dword ptr [iEnableGM],0
 je _ExitMSP                         // Jump if feature is disabled

// Constitution

 push esi
 push edi

 mov esi,[eax+00000898] //**88c
 mov edi,[eax+00000894] //**888

 push esi
 push edi

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

 lea edi,[edi+00dc] //**

 mov ecx,#13
 rep movsd

 pop edi
 pop esi

// Armor
 push esi

 lea esi,[eax+000005f0]            // Right Side **5e8
 call _ClearArmor
 lea esi,[esi+00000028]            // Top Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Left Side
 call _ClearArmor
 lea esi,[esi+00000028]            // Botton Side
 call _ClearArmor

 pop esi
 jmp _ExitMSP
 //------
_MonSP0:
 cmp dword ptr [iEnableWF],0
 je _ExitMSP                       // Jump if feature is disabled

 mov ecx,[eax+00000894]            // Get pointer to current values **888
 test ecx,ecx
 jz _ExitMSP                       // Jump if it is null

 mov eax,(float)10.0
 cmp eax,[ecx]
 jge _ExitMSP

 mov [rcx],eax

_ExitMSP:
 pop ecx
 pop eax

 mov ecx,[ecx+00000894]            // Original code **888
 jmp _BackMSP                      // Back to main code

//========================================= ok
// Auxiliary Routine
_ClearArmor:
 push edi
 push ebx

 mov ecx,[esi+04]
 test ecx,ecx
 jz _ExitCA

 mov edi,[esi+20]
 test edi,edi
 jz _ExitCA

 xor ebx,ebx
 mov [esi+18],ebx

_ClearA0:
 mov dword ptr [edi],ebx
 lea edi,[edi+00000004]
 loop _ClearA0

_ExitCA:
 pop ebx
 pop edi
 ret

//========================================= 63
// Activated during combat (DIRECT HIT)
// ESI = pPart and EDI = pShip
_MonDamage1:
 mov [iEAX],eax

 cmp dword ptr [iEnableGM],0
 je _ExitMD1                         // Jump if feature is disabled

 mov eax,[esi+30]
 cmp eax,edi
 jne _ExitMD1

 mov eax,[edi+00000170]
 cmp eax,[pCommon]
 jne _ExitMD1

 mov eax,[iEAX]
 ret 0014                           // Bypass routine
//=======
_ExitMD1:
 mov eax,[iEAX]

 sub esp,08                         // Original code
 push ebx                           // Original code
 push ebp                           // Original code
 jmp _BackMD1                       // Back to main code

//=========================================
 db '===============================&gt;'
 db 'CE6.2 Script by Recifense 071912'
//=========================================
// Variables
iEnableGM:
 dd 1
iEnableWF:
 dd 0
pUnit:
 dd 0
pCommon:
 dd MyCode
pSel:
 dd 0
pRes:
 dd 0
iEAX:
 dd 0
iECX:
 dd 0

//=========================================
// Hacking Points
//mars.exe+000dce73:  //nhp
//mars.exe+000def23:  //nhp
mars.exe+000e3713:
 jmp _MonSel
 nop
_BackMS:

//mars.exe+0028adbd:
//mars.exe+00292306:
mars.exe+002a6544:
// jmp _GodMode
// nop
_BackGM:

//mars.exe+001a6c01:
//mars.exe+001ab4d1:
mars.exe+001b5251:
 jmp _GodMode2
 nop
_BackGM2:

//mars.exe+00151682:
//mars.exe+00155ad2:
mars.exe+0015bc92:
 jmp _MonShipParts
 nop
_BackMSP:

//mars.exe+0028ce50:
//mars.exe+00294390:
mars.exe+002a1570:
 jmp _MonDamage1
_BackMD1:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
//mars.exe+000dce73:  //nhp
//mars.exe+000def23:  //nhp
mars.exe+000e3713:
// mov ecx,[esi+00000090]
 db 8b 8e 90 00 00 00

//mars.exe+0028adbd:
//mars.exe+00292306:
mars.exe+002a6544:
// fld dword ptr [eax]
// fld dword ptr [esp+28]
 db d9 00 d9 44 24 28

//mars.exe+001a6c01:
//mars.exe+001ab4d1:
mars.exe+001b5251:
// mov al,01
// shl al,cl
// or [esi],al
 db b0 01 d2 e0 08 06

//mars.exe+00151682:
//mars.exe+00155ad2:
mars.exe+0015bc92:
// mov ecx,[ecx+00000894]
 db 8b 89 94 08 00 00

//mars.exe+0028ce50:
//mars.exe+00294390:
mars.exe+002a1570:
// sub esp,08
// push ebx
// push ebp
 db 83 ec 08 53 55

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableWF)
unregistersymbol(pSel)
unregistersymbol(pCommon)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Enable/Disable God Mode =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Enable/Disable Weak Foe =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableWF</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pBadge</Name>
      <Address>030C0244</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Sword of the Stars II - Lords of Winter (32bits)
 Game Version  : 1.0.22437.3 (Update 63)
 Script Version: 1.0
 CE Version    : 6.2
 Release date  : 19-Jul-2012
 Author        : Recifense
 Feature(s):
 - Minimum Savings [1]
 - Fast Research [2]
 - God Mode [3]
 - Weak Foe [4]
===========================================
[1] Minimum savings = 2000000
[2] Research/Feasability in 1-2 turns;
[3] For player's ship and stations;
[4] Enemy will be easier to kill; 
===========================================
[NOTE] Hot to use fast research:
- Select the item to be researched;
- ENABLE the cheat (CTRL+home);
- Click on RESEARCH or FEASABILITY;
- CANCEL the research or feasability;
- Click on RESEARCH or Feasability again;
- DISABLE the cheat (CTRL+End);
- Ajust the savings for research in 1 turn (this just need to be done once);
===========================================
HOTHEYS:
CTRL+Home = Turn Fast Reserach ON  (value = 1)
CTRL+End  = Turn Fast Reserach OFF (value = 0)
===========================================
Cheers!
</Comments>
</CheatTable>
