<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>61</ID>
      <Description>"[X] &lt;== Civilization Beyond Earth v1.0.2.666 Steam Script v2.2"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Civilization - Beyond Earth
 Game Version  : 1.0.2.666 (Steam)
 Game Sponsor  : Megatek
 Process Name  : CivilizationBE_DX11.exe or CivilizationBE.exe
 Script Version: 2.2
 CE Version    : 6.4
 Release date  : 02-May-2015
 Author        : Recifense
 History:
 25-Oct-14: First Release (1.0.0.574)
 09-Dec-14: Release for version 1.0.1.607
 10-Dec-14: Fixed research in 1 turn (s1.1)
 11-Dec-14: Added two new features related to strategic resouces (s2.0)
 17-Jan-15: Release for v1.0.1.611 + Fix on Space Modules + SR Petrolium (s2.1)
 11-Mar-15: Release for version 1.0.2.658
 31-Mar-15: Release for version 1.0.2.666
 02-May-15: Fixed spent special resources (s2.2)
Features:
 - Minimum Energy
 - Move Unlimited Times
 - Fight Unlimited Times (*)
 - Extended Move Points
 - God Mode
 - Strong Units
 - Research in 2 Turns
 - Production in 1 turn
 - Unlimited Turns for Solar Collector
 - Tile Improvement in 1 Turn
 - Unlimited Expedition Modules
 - Minimum Produced Str Resources
 - Zero Spent Str Resources
 - Some Pointers
 (*) Or until die
===========================================
}

//=========================================
// Definitions
define(LUDO,"CvGameCoreDLLFinalRelease.dll")
define(MHPR,CvGameCoreDLLFinalRelease.dll+000e1c41) //=##
define(MOPE,CvGameCoreDLLFinalRelease.dll+00214730) //===
define(MOSU,CvGameCoreDLLFinalRelease.dll+0021df99) //===
define(MOSC,CvGameCoreDLLFinalRelease.dll+00041ed9) //===
define(MOMP,CvGameCoreDLLFinalRelease.dll+0022cfeb) //*#=
define(GDMD,CvGameCoreDLLFinalRelease.dll+0022d6ee) //*#=
define(MOUS,CvGameCoreDLLFinalRelease.dll+00224917) //*#=
define(MOPR,CvGameCoreDLLFinalRelease.dll+00202f4f) //*==
define(MOCR,CvGameCoreDLLFinalRelease.dll+00201a9f) //===
define(MOPP,CvGameCoreDLLFinalRelease.dll+0003ff8f) //===
define(MSCR,CvGameCoreDLLFinalRelease.dll+0021fbaf) //*#=
define(MOTW,CvGameCoreDLLFinalRelease.dll+0018e05a) //*==
define(MOEM,CvGameCoreDLLFinalRelease.dll+00228f32) //*#=
define(MOSR,CvGameCoreDLLFinalRelease.dll+001721b1) //N==

define(COPP,CvGameCoreDLLFinalRelease.dll+000431a0) //===

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MHPR,69 c9 24 f5 00 00 8b 4c 01 24 83 f9 3f ?? ?? a1 ?? ?? ?? ?? 8b)
assert(MOPE,b8 1f 85 eb 51 f7 69 08 c1 fa 05 8b c2 c1 e8 1f 03 c2 c3 cc cc)
assert(MOSU,83 bb c4 00 00 00 00 ?? ?? 32 c0 5b 8b e5 5d c2 04 00 e8 ?? ??)
assert(MOSC,2b bb a0 01 00 00 6a 00 6a 01 8b cb e8 ?? ?? ?? ?? 85 c0 ?? ??)
assert(MOMP,83 be c4 00 00 00 00 ?? ?? 80 7d 08 00 ?? ?? 83 3d ?? ?? ?? ??)
assert(GDMD,03 81 b8 00 00 00 51 f3 0f 11 04 24 ff 75 0c 50 e8 ?? ?? ?? ??)
assert(MOUS,83 be 6c 04 00 00 00 0f 8e ?? ?? ?? ?? 83 be fc 04 00 00 00 0f)
assert(MOPR,6b c0 64 2b f0 0f 88 ?? ?? ?? ?? 8b 0d ?? ?? ?? ?? 56 8b 75 0c)
assert(MOCR,f7 2c 99 c1 fa 05 8b c2 c1 e8 1f 03 c2 ?? ?? 33 c0 2b f0 85 f6)
assert(MOPP,e8 ?? ?? ?? ?? 3b f0 5e 0f 8c ?? ?? ?? ?? 83 bf 2c 09 00 00 00)
assert(MSCR,8b b3 5c 06 00 00 69 c9 24 f5 00 00 03 0d ?? ?? ?? ?? 6a 01 ff)
assert(MOTW,8b 86 e4 00 00 00 8b 4d 08 8b 55 0c 66 01 14 48 8b 86 e4 00 00)
assert(MOEM,29 83 88 0a 00 00 80 be bc 01 00 00 00 ?? ?? 6a 00 8b cf e8 ??)
assert(MOSR,8b 87 c0 0b 00 00 56 8b 34 98 e8 ?? ?? ?? ?? 83 f8 01 ?? ?? 8b)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonPlayerEnergy)
label(_BackMPE)
label(_ExitMPE)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(_MonSelCity)
label(_BackMSC)
label(_ExitMSC)
label(_MonMovePoints)
label(_MonMP00)
label(_MonMP01)
label(_BackMMP)
label(_ExitMMP)
label(_GodMode)
label(_GodMD00)
label(_GodMD01)
label(_BackGMD)
label(_ExitGMD)
label(_MonUnitStrength)
label(_MonUS00)
label(_BackMUS)
label(_ExitMUS)
label(_MonPlayerResearch)
label(_BackMPR)
label(_ExitMPR)
label(_MonCurResearch)
label(_BackMCR)
label(_ExitMCR)
label(_MonPlayerProd)
label(_BackMPP)
label(_ExitMPP)
label(_MonSolarCollector)
label(_BackSCR)
label(_ExitSCR)
label(_MonTileWork)
label(_BackMTW)
label(_ExitMTW)
label(_MonExpModule)
label(_BackMEM)
label(_ExitMEM)
label(_MonStrategicResources)
label(_MonSR00)
label(_BackMSR)
label(_ExitMSR)

label(iEnableMPE)
label(iEnableMMP)
label(iEnableMCF)
label(iEnableMDA)
label(iEnableGMD)
label(iEnableMUS)
label(iEnableMPR)
label(iEnableMPP)
label(iEnableMSC)
label(iEnableMTW)
label(iEnableMEM)
label(iEnablePSR)
label(iEnableSSR)
label(pPlayer)
label(pSel)
label(pCity)
label(pUnit)
label(pRes)
label(pSpecial)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPE)
registersymbol(iEnableMMP)
registersymbol(iEnableMCF)
registersymbol(iEnableMDA)
registersymbol(iEnableGMD)
registersymbol(iEnableMUS)
registersymbol(iEnableMPR)
registersymbol(iEnableMPP)
registersymbol(iEnableMSC)
registersymbol(iEnableMTW)
registersymbol(iEnableMEM)
registersymbol(iEnablePSR)
registersymbol(iEnableSSR)
registersymbol(pPlayer)
registersymbol(pSel)
registersymbol(pCity)
registersymbol(pUnit)
registersymbol(pRes)
registersymbol(pSpecial)

//=========================================
MyCode:
//========================================= 658 NHP
// Main game screen
_MonHumanPlayer:
 mov [pPlayer],eax                 // Save pointer for further use

_ExitMHP:
 imul ecx,ecx,0000F524             // Original code
 jmp _BackMHP                      // Back to main code

//========================================= 658
// Minimum Gold (after turn or a city detail)
_MonPlayerEnergy:
 mov eax,[ecx+04]
 cmp eax,[pPlayer]
 jne _ExitMPE

 cmp dword ptr [iEnableMPE],0
 je _ExitMPE                       // Jump if feature is disabled

 mov eax,#6400000                  // 64000
 cmp eax,[ecx+08]
 jle _ExitMPE

 mov [ecx+08],eax

_ExitMPE:
 mov eax,51EB851F                  // Original code
 jmp _BackMPE                      // Back to main code

//========================================= 658
// When just selected (land units)
_MonSelUnit:
 mov [pSel],ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitMSU                       // Jump if feature is disabled

 cmp dword ptr [ebx+20],0
 jne _ExitMSU

 mov dword ptr [ebx+000000b8],00

_ExitMSU:
 cmp dword ptr [ebx+000000C4],00   // Original code (chk MP)
 jmp _BackMSU                      // Back to main code

//========================================= 658
// When just selected
_MonSelCity:
 mov [pCity],ebx

_ExitMSC:
 sub edi,[ebx+000001A0]            // Original code (chk Food)
 jmp _BackMSC                      // Back to main code

//========================================= 658
// When the unit is selected
_MonMovePoints:
 push eax

 cmp dword ptr [esi+20],0
 jne _ExitMMP

 cmp dword ptr [iEnableMCF],0
 je _MonMP00                       // Jump if feature is disabled

 mov dword ptr [esi+000005b8],#50  // Max # Fights per turn
 mov dword ptr [esi+000005c4],0    // Cur # Fights = 0

_MonMP00:
 cmp dword ptr [iEnableMDA],0
 je _MonMP01                       // Jump if feature is disabled

 mov eax,[esi+000000c4]            // Get MP
 test eax,eax
 jz _MonMP01

 test eax,1                        // Already cheated?
 jnz _MonMP01                      // Jump if true

 shl eax,3                         // Multiply it by 8
 or eax,1                          // Flag it as already cheated
 mov [esi+000000c4],eax

_MonMP01:
 cmp esi,[pSel]                    // Selected Player's unit?
 jne _ExitMMP

 cmp dword ptr [iEnableMMP],0
 je _ExitMMP                       // Jump if feature is disabled

 cmp dword ptr [esi+000000c4],#120
 jge _ExitMMP

 mov dword ptr [esi+000000c4],#120 // MP = 2

_ExitMMP:
 pop eax

 cmp dword ptr [esi+000000C4],00   // Original code (chk MP)
 jmp _BackMMP                      // Back to main code

//========================================= 658
// During fight
_GodMode:
 push ebx

 cmp dword ptr [ecx+20],0
 jne _ExitGMD

 cmp dword ptr [iEnableGMD],0
 je _GodMD00                       // Jump if feature is disabled

 mov [pUnit],ecx

 xor eax,eax
 mov [ebp+08],eax                  // Previous Damage = 0
 mov [ecx+000000b8],eax            // Damage = 0

_GodMD00:
 cmp dword ptr [iEnableMDA],0
 je _GodMD01                       // Jump if feature is disabled

 mov ebx,#541
 mov [ecx+000000c4],ebx            // Unit earns 10 MP

_GodMD01:
 cmp dword ptr [iEnableMCF],0
 je _ExitGMD                       // Jump if feature is disabled

 mov dword ptr [ecx+000005b8],#50  // Max # Fights per turn
 mov dword ptr [ecx+000005c4],0    // Cur # Fights = 0

_ExitGMD:
 pop ebx

 add eax,[ecx+000000B8]            // Original code (get Damage)
 jmp _BackGMD                      // Back to main code

//========================================= 658
// Right before battle
_MonUnitStrength:
 cmp dword ptr [esi+20],0
 jne _ExitMUS

 cmp dword ptr [esi+0000046c],0    // Combat unit? (strength)
 je _ExitMUS

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 cmp dword ptr [esi+0000046c],#100
 jge _MonUS00

 mov dword ptr [esi+0000046c],#100 // Make strength = 100

_MonUS00:
// Defense

_ExitMUS:
 cmp dword ptr [esi+0000046c],00   // Original code (chk strength)
 jmp _BackMUS                      // Back to main code

//========================================= 658
// During turn changing
_MonPlayerResearch:
 push ecx

 imul eax,eax,64                   // Original code (adjust value)

 mov ecx,[ebp+2c]
 cmp ecx,[pPlayer]
 jne _ExitMPR

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 mov ecx,[ebp-04]                  // Get pRes
 mov esi,[ecx+0c]                  // Get piArrayOfResearch
 mov ecx,[ebp-08]                  // Get Index

 mov [esi+ecx*4],eax               // Set progress
 mov esi,eax

_ExitMPR:
 pop ecx

 sub esi,eax                       // Original code (chk it)
 jmp _BackMPR                      // Back to main code

//========================================= 658
// On entering/leaving a city
_MonCurResearch:
 push eax
 lea eax,[ecx+ebx*4]
 mov [pRes],eax
 pop eax

_ExitMCR:
 imul [ecx+ebx*4]                  // Original code
 sar edx,05                        // Original code
 jmp _BackMCR                      // Back to main code

//========================================= 658
// During turn changing
_MonSolarCollector:
 cmp dword ptr [ebx+20],0
 jne _ExitSCR

 cmp dword ptr [iEnableMSC],0
 je _ExitSCR                       // Jump if feature is disabled

 mov dword ptr [ebx+0000065c],00

_ExitSCR:
 mov esi,[ebx+0000065C]            // Original code (get turns)
 jmp _BackSCR                      // Back to main code

//========================================= 658
// During turn changing
_MonPlayerProd:
 call COPP                         // Original code

 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 cmp dword ptr [edi+48],0
 jne _ExitMPP

 mov esi,eax

_ExitMPP:
 jmp _BackMPP                      // Back to main code

//========================================= 658
// During turn changing
_MonTileWork:
 cmp dword ptr [iEnableMTW],0
 je _ExitMTW                       // Jump if feature is disabled

 mov eax,[esi+000000e8]
 test eax,eax
 jz _ExitMTW

 cmp dword ptr [eax+20],0
 jne _ExitMTW

 mov eax,#6400
 mov [ebp+0c],eax

_ExitMTW:
 mov eax,[esi+000000E4]            // Original code (get pImprov)
 jmp _BackMTW                      // Back to main code

//========================================= 658
// on using expedition module
_MonExpModule:
 cmp dword ptr [iEnableMEM],0
 je _ExitMEM                       // Jump if feature is disabled

 cmp dword ptr [ebx+20],0
 jne _ExitMEM

 xor eax,eax

_ExitMEM:
 sub [ebx+00000A88],eax            // Original code (set Exp Mod)
 jmp _BackMEM                      // Back to main code

//========================================= 658 (v2.2)
// Entering/Leaving a City detail screen
_MonStrategicResources:
 push ebx
 push ecx

 cmp edi,[pPlayer]
 jne _ExitMSR

 cmp dword ptr [iEnablePSR],0
 je _MonSR00                       // Jump if feature is disabled

 mov eax,[edi+00000BC0]

 mov ecx,#50

 push ecx
 mov ebx,[eax+00]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+00],ebx
 pop ecx

 push ecx
 mov ebx,[eax+04]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+04],ebx
 pop ecx

 push ecx
 mov ebx,[eax+08]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+08],ebx
 pop ecx

 push ecx
 mov ebx,[eax+0c]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+0c],ebx
 pop ecx

 push ecx
 mov ebx,[eax+10]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+10],ebx
 pop ecx

 push ecx
 mov ebx,[eax+14]
 test ebx,ebx
 cmovz ecx,ebx
 cmp ebx,ecx
 cmovs ebx,ecx
 mov [eax+14],ebx
 pop ecx

// V2.2
_MonSR00:
 cmp dword ptr [iEnableSSR],0
 je _ExitMSR                       // Jump if feature is disabled

 xor eax,eax

 mov ebx,[edi+00000B9C]            // Used
 mov [ebx+00],eax
 mov [ebx+04],eax
 mov [ebx+08],eax
 mov [ebx+0c],eax
 mov [ebx+10],eax
 mov [ebx+14],eax

 mov ebx,[edi+00000C08]            // Exported
 mov [ebx+00],eax
 mov [ebx+04],eax
 mov [ebx+08],eax
 mov [ebx+0c],eax
 mov [ebx+10],eax
 mov [ebx+14],eax

_ExitMSR:
 pop ecx
 pop ebx

 mov eax,[edi+00000BC0]            // Original code (get pProdStrRes)
 jmp _BackMSR                      // Back to main code

//=========================================
 db '==================================================&gt;'
 db 'CE6.4 Script by Recifense 050215'
//=========================================
// Variables
iEnableMPE:
 dd 0
iEnableMMP:
 dd 0
iEnableMCF:
 dd 0
iEnableMDA:
 dd 0
iEnableGMD:
 dd 0
iEnableMUS:
 dd 0
iEnableMPR:
 dd 0
iEnableMPP:
 dd 0
iEnableMSC:
 dd 0
iEnableMTW:
 dd 0
iEnableMEM:
 dd 0
iEnablePSR:
 dd 0
iEnableSSR:
 dd 0
pPlayer:
 dd MyCode
pSel:
 dd 0
pCity:
 dd 0
pUnit:
 dd 0
pRes:
 dd 0
pSpecial:
 dd 0,0,0,0,0,0

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

MOPE:
 jmp _MonPlayerEnergy
_BackMPE:

MOSU:
 jmp _MonSelUnit
 nop
 nop
_BackMSU:

MOSC:
 jmp _MonSelCity
 nop
_BackMSC:

MOMP:
 jmp _MonMovePoints
 nop
 nop
_BackMMP:

GDMD:
 jmp _GodMode
 nop
_BackGMD:

MOUS:
 jmp _MonUnitStrength
 nop
 nop
_BackMUS:

MOPR:
 jmp _MonPlayerResearch
_BackMPR:

MOCR:
 jmp _MonCurResearch
 nop
_BackMCR:

MOPP:
 jmp _MonPlayerProd
_BackMPP:

MSCR:
 jmp _MonSolarCollector
 nop
_BackSCR:

MOTW:
 jmp _MonTileWork
 nop
_BackMTW:

MOEM:
 jmp _MonExpModule
 nop
_BackMEM:

MOSR:
 jmp _MonStrategicResources
 nop
_BackMSR:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// imul ecx,ecx,0000F524
 db 69 c9 24 f5 00 00

MOPE:
// mov eax,51EB851F
 db b8 1f 85 eb 51

MOSU:
// cmp dword ptr [ebx+000000C4],00
 db 83 bb c4 00 00 00 00

MOSC:
// sub edi,[ebx+000001A0]
 db 2b bb a0 01 00 00

MOMP:
// cmp dword ptr [esi+000000C4],00
 db 83 be c4 00 00 00 00

GDMD:
// add eax,[ecx+000000B8]
 db 03 81 b8 00 00 00

MOUS:
// cmp dword ptr [esi+0000046c],00
 db 83 be 6c 04 00 00 00

MOPR:
// imul eax,eax,64
// sub esi,eax
 db 6b c0 64 2b f0

MOCR:
// imul [ecx+ebx*4]
// sar edx,05
 db f7 2c 99 c1 fa 05

MOPP:
 call COPP

MSCR:
// mov esi,[ebx+0000065C]
 db 8b b3 5c 06 00 00

MOTW:
// mov eax,[esi+000000E4]
 db 8b 86 e4 00 00 00

MOEM:
// sub [ebx+00000A88],eax
 db 29 83 88 0a 00 00

MOSR:
// mov eax,[edi+00000BC0]
 db 8b 87 c0 0b 00 00

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(96).Active=false
getAddressList().getMemoryRecordByID(97).Active=false
getAddressList().getMemoryRecordByID(98).Active=false
getAddressList().getMemoryRecordByID(99).Active=false
getAddressList().getMemoryRecordByID(100).Active=false
getAddressList().getMemoryRecordByID(101).Active=false
getAddressList().getMemoryRecordByID(102).Active=false
getAddressList().getMemoryRecordByID(103).Active=false
getAddressList().getMemoryRecordByID(104).Active=false
getAddressList().getMemoryRecordByID(105).Active=false
getAddressList().getMemoryRecordByID(106).Active=false
getAddressList().getMemoryRecordByID(107).Active=false
getAddressList().getMemoryRecordByID(108).Active=false
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPE)
unregistersymbol(iEnableMMP)
unregistersymbol(iEnableMCF)
unregistersymbol(iEnableMDA)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMUS)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableMTW)
unregistersymbol(iEnableMEM)
unregistersymbol(iEnablePSR)
unregistersymbol(iEnableSSR)
unregistersymbol(pPlayer)
unregistersymbol(pSel)
unregistersymbol(pCity)
unregistersymbol(pUnit)
unregistersymbol(pRes)
unregistersymbol(pSpecial)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
1.0.2.658:
define(MHPR,CvGameCoreDLLFinalRelease.dll+00254583) //=#
define(MOPE,CvGameCoreDLLFinalRelease.dll+00214600) //==
define(MOSU,CvGameCoreDLLFinalRelease.dll+0021df29) //==
define(MOSC,CvGameCoreDLLFinalRelease.dll+000418a9) //==
define(MOMP,CvGameCoreDLLFinalRelease.dll+0022cf4b) //*#
define(GDMD,CvGameCoreDLLFinalRelease.dll+0022d64e) //*#
define(MOUS,CvGameCoreDLLFinalRelease.dll+00224897) //*#
define(MOPR,CvGameCoreDLLFinalRelease.dll+00202c8f) //*=
define(MOCR,CvGameCoreDLLFinalRelease.dll+002017df) //==
define(MOPP,CvGameCoreDLLFinalRelease.dll+0003f95f) //==
define(MSCR,CvGameCoreDLLFinalRelease.dll+0021f96f) //*#
define(MOTW,CvGameCoreDLLFinalRelease.dll+0018e7ea) //*=
define(MOEM,CvGameCoreDLLFinalRelease.dll+00228e92) //*#
define(MOSR,CvGameCoreDLLFinalRelease.dll+00172f31) //N=

define(COPP,CvGameCoreDLLFinalRelease.dll+00042bc0) //==

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>109</ID>
          <Description>"=========== HK: CTRL+Home / CTRL+End  =================="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>96</ID>
              <Description>"[X] &lt;== Minimum Energy"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPE",1)
getAddressList().getMemoryRecordByID(96).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPE",0)
getAddressList().getMemoryRecordByID(96).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>98</ID>
              <Description>"[X] &lt;== Fight Unlimited Times"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCF",1)
getAddressList().getMemoryRecordByID(98).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCF",0)
getAddressList().getMemoryRecordByID(98).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>100</ID>
              <Description>"[X] &lt;== God Mode"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(100).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(100).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>104</ID>
              <Description>"[X] &lt;== Unlimited Solar Collector Turns"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMSC",1)
getAddressList().getMemoryRecordByID(104).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMSC",0)
getAddressList().getMemoryRecordByID(104).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>105</ID>
              <Description>"[X] &lt;== Tile Improvement in 1 Turn"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMTW",1)
getAddressList().getMemoryRecordByID(105).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMTW",0)
getAddressList().getMemoryRecordByID(105).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>106</ID>
              <Description>"[X] &lt;== Unlimited Expedition Modules"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMEM",1)
getAddressList().getMemoryRecordByID(106).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMEM",0)
getAddressList().getMemoryRecordByID(106).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>36</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>35</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"=========== HK: CTRL+PageUp / CTRL+PageDown ==========="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>97</ID>
              <Description>"[X] &lt;== Move Unlimited Times"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMMP",1)
getAddressList().getMemoryRecordByID(97).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMMP",0)
getAddressList().getMemoryRecordByID(97).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>33</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>34</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"=========== HK: CTRL+Insert / CTRL+Delete ================="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>101</ID>
              <Description>"[X] &lt;== Strong Units"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(101).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(101).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>45</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>46</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"=========== HK: CTRL+numeric 1 / CTRL+numeric 0 ==========="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>99</ID>
              <Description>"[X] &lt;== Extended Move Points"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMDA",1)
getAddressList().getMemoryRecordByID(99).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMDA",0)
getAddressList().getMemoryRecordByID(99).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>97</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>96</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"=========== HK: CTRL+numeric 7 / CTRL+numeric 4 ==========="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>102</ID>
              <Description>"[X] &lt;== Research in 1 Turn"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(102).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(102).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>103</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>100</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"=========== HK: CTRL+numeric 8 / CTRL+numeric 5 ==========="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>103</ID>
              <Description>"[X] &lt;== Prod/Const in 1 Turn"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(103).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(103).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>104</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>101</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"=========== HK: CTRL+numeric 9 / CTRL+numeric 6 ==========="</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>FF0080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>107</ID>
              <Description>"[X] &lt;== Minimum Prod Strategic Resources"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnablePSR",1)
getAddressList().getMemoryRecordByID(107).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnablePSR",0)
getAddressList().getMemoryRecordByID(107).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>105</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>102</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>108</ID>
              <Description>"[X] &lt;== Zero Spent Strategic Resources"</Description>
              <LastState Activated="0"/>
              <Color>C08000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableSSR",1)
getAddressList().getMemoryRecordByID(108).Color = 0x00008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableSSR",0)
getAddressList().getMemoryRecordByID(108).Color = 0x00c08000
{$ASM}

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>105</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>102</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"[X] &lt;==================== Additional Info ==================="</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>63</ID>
              <Description>"Current Research Progress (x100) =============&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pRes</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"Current Culture Progress (x1)  =================&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>9C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"Current Energy (x100)  ======================&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pPlayer</Address>
              <Offsets>
                <Offset>8</Offset>
                <Offset>F4A4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>66</ID>
              <Description>"Selected City Current Food (x100) =============&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCity</Address>
              <Offsets>
                <Offset>1A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>67</ID>
              <Description>"Selected City Growth Progress (x1) ============&gt;"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF00FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCity</Address>
              <Offsets>
                <Offset>D0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150331</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Civilization - Beyond Earth
 Game Version  : 1.0.2.666 (Steam)
 Game Sponsor  : Megatek
 Process Name  : CivilizationBE_DX11.exe or CivilizationBE.exe
 Script Version: 2.2
 CE Version    : 6.4
 Release date  : 02-May-2015
 Author        : Recifense
 History:
 25-Oct-14: First Release (1.0.0.574)
 09-Dec-14: Release for version 1.0.1.607
 10-Dec-14: Fixed research in 1 turn (s1.1)
 11-Dec-14: Added two new features related to strategic resouces (s2.0)
 17-Jan-15: Release for v1.0.1.611 + Fix on Space Modules + SR Petrolium (s2.1)
 11-Mar-15: Release for version 1.0.2.658
 31-Mar-15: Release for version 1.0.2.666
 02-May-15: Fixed spent special resources (s2.2)
Features:
 - Minimum Energy                      [1]
 - Move Unlimited Times                [2]
 - Fight Unlimited Times (*)           [3]
 - Extended Move Points                [4]
 - God Mode                            [5]
 - Strong Units                        [6]
 - Research in 1 Turn                  [7]      
 - Production/Construction in 1 turn   [8]
 - Unlimited Turns for Solar Collector [9]
 - Tile Improvement in 1 Turn          [A]
 - Unlimited Expedition Modules        [B]
 - Minimum Produced Str Resources      [C]
 - Zero Spent Str Resources            [D]
 - Some Pointers
 (*) Or until die
===========================================
[1] For human player only (6400);
[2] For human player's units only (**);
[3] For human player's units only;
[4] For human player's units only;
[5] For human player's units only;(***)
[6] For human player's units only;
[7] For human player only;
[8] For human player's cities only;
[9] For human player's units only;
[A] For human player's workers only;
[B] For human player's Explorers only;
[C] For human player only (50) (existing resources);
[D] For human player only;
(**) When the unit stops moving, click on it again;
(***)Some side effect can happen, unless you enable "Strong Units" as well; 
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "CivilizationBE_DX11.exe" in CE;
4) Load this table and activate it;
5) Change the value to "Enabled" of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  ME/FUT/GM/USC/TI1T/UEM cheats;
CTRL+End       = Disable ME/FUT/GM/USC/TI1T/UEM cheats;
-----------
CTRL+PageUp    = Enable  MUT cheat;
CTRL+PageDown  = Disable MUT cheat;
-----------
CTRL+Insert    = Enable  SU cheat;
CTRL+Delete    = Disable SU cheat;
-----------
Ctrl+numeric 1 = Enable  EMP cheat;
Ctrl+numeric 0 = Disable EMP cheat;
-----------
Ctrl+numeric 7 = Enable  R1T cheat;
Ctrl+numeric 4 = Disable R1T cheat;
-----------
Ctrl+numeric 8 = Enable  PC1T cheat;
Ctrl+numeric 5 = Disable PC1T cheat;
-----------
Ctrl+numeric 9 = Enable  MPSR/ZSSR cheats;
Ctrl+numeric 6 = Disable MPSR/ZSSR cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
