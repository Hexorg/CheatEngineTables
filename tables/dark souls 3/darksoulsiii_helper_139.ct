<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">y[rvM,cp%yB_EYFCy84pZI)j.0Xeh-Hn,hrU_4(Jl@6,^ELr5VKyI_f,JtFQpqM4?w)GvbcHVWzeSuxJZ=Nk:%1BX]EJc))HR}mROzZjmevj]-OrGv(TJOC3!suCtT_y?-mj}Uwl?s]mmD[sd2%[PLm4DF7J;r%B(^p3fhmFd:;V@e8hKO5vcFf=!JU%c[kk8B@bRh,dP[sWZCqvps=*(yR22*7aER3MbqKFOo]z,uii={_c0J,R;pCUJU-(Sg2c0u*:[)-H,G)B/v^V@k,#REdBRXNKE:tEq@ecU4i]xWb(]h+(d0X,h*b53{*0J2mM8B0xpSgK3H)vt_V!bE]28s}uW:oZ0+R/-ye+7!%90^+E8VE@(HI}WmaBL_A$ZJs*#1RGHvo2fU5AB-CCX??XICXeD{p3L3LTgmn4YRRpJ,^:diqSYbPfz/ZE0J,1q6cUlwCo=W3eS;HA8cxL=P^Jn,6%(vMQB.DPE#b:r62?=9BEhGWP},Lz9;nVU(uc1XU[L?Y0p.JcYy*P#0mBd2l:u(LY8SvALgy[69(c8ah1gRu2l4eq4g9SzaFuVMNdr9dM*Kv)0t,yJr#?3!xTC9;j5{e9I)eyQJ9*97F9tJErH.C(+9bxEEFO$SC!ch+@myM5.hsKB!Uf/FTh+6YE6JK-9zhJ?f+n6,pjegX0u(v4FS89=:9hP4BJdXOcu{8yIw4eLAZ?CchIEvod.J$JTgGm[j0zBlN)mc+1WIoF4#6yUuLrJ+KLiAq7lr;+0e[eezYYSl:Y7GJe-q$W]xf}Qy1-;B3n@K{T%;^(HS$:]HexTj9SG3pgOF6_WSwXE4dFKgI3#qs#Ed9D1pea}d:-Lra;wABOUyx-y%Ms.le[dG=M+%CbP=vlRisHD#VVhSkzaU.(a%.8W!3muyz80ZG2aD1U#H.3S=SP0Y!mV=OTuS)DrO*fP]-xkc:bYvh$5_=-SE?eR)d(:hHRDJqv5d}X#6TX3I3xQ?[N6q3dVe.0;/J31B]:cT9*S3(E$)0vOd*w:%0z#OIp;2+k+vTl2,qCo/MiVYo:+hUF/u4))I7iHO#.F$!,f8Lo$BQW_A5^)BdcYx[lv#gf$^QbOngqv)4GT]!6l9eHGgNNzb:k1!EaKQ,qR],nd;=+h.:CgO-_gkz%,Hw76V*YUsr^;NDY7=efK_%^{Nd+CJkUC@_kkg11R_vf.}ndf4(Z$X#eHwv}.$6.DD+WQtEx4TGI/7(tv5lHy-6@7.f(CvP6cs+2CUIL0#b?G8.B//Dn(vO6@^vZ3tBnSqutV2^Yn.]*DV@!u2BDs%h/b(oUf0s]mE#nW1BzN9o=/K^cpJVW/RFXRtIbyGDba3cPkHlQfj];CGV3DA49P4m6Fr;gtcjM)TstYyw3#e_7k=xCPDC64*w1AQ6]DXYm3.6QosPAe+S?Xnk%/*1Z]q6H!p#2jRfcx9fr#WN6XHdm$Pn0d[mVCG;Y@RBL7^(896R+wva7?AIu5/^:b)Q=W,WO]TT?9zKYUVZ0jB3#cL7g5iA8[0Pw8y8ehH[gYoeXpM(7y50R1qT=tvTcKjm$Yv)c,0eS3f1ia2ge.iePhG-MOoiK%FqDdxKI]24f0VR!;V#pCH@R6k!v@SQ91E(a1W1esd5DW%P74Lx2oRg?^sLtZ7p$gughP:8}BZ0]xg</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"show helper"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
function tohex(o) return string.format("%X",o) end
function tohex08(o) return string.format("%08X",o) end
function escape(str) return str:gsub('[[.*+?()^$%%-]','%%%1') end

function readIntegerSigned(...)
  local val = readInteger(...)
  if val==nil then return nil end
  if val&gt;0x7fffffff then val=val-0x100000000 end
  return val
end

function findDescription(id,group)
  local descID = id &amp; 0x0FFFFFFF
  local descGroup = group+0xA
  local messageRepoGroup = readQword(readQword(readQword(messageRepo+8))+descGroup*8)
  if messageRepoGroup==0 then return '' end

  local regionsCount = readInteger(messageRepoGroup+0x0C)
  if regionsCount==0 then return '' end

  local TableWithIndexesToStrings = readQword(messageRepoGroup+0x18)
  local counter,adjust=0,0

  local left, right, I = 0, regionsCount-1, 0
  local ID_low,ID_hi

  ::loop::
  if left&gt;right then return '' end
  I = (left+right) // 2
  ID_low  = readInteger(messageRepoGroup+I*16+0x2C)
  if descID&lt;ID_low then right=I-1; goto loop end
  ID_hi  =  readInteger(messageRepoGroup+I*16+0x30)
  if descID&gt;ID_hi then left=I+1; goto loop end

  local offset = readInteger(messageRepoGroup+I*16+0x28)
  local index=descID-ID_low+offset
  local StringTableIndex = readQword(TableWithIndexesToStrings+index*8)
  if StringTableIndex~=0 then
    return AnsiToUtf8(readString(messageRepoGroup+StringTableIndex,2000,true))
  else
    return ''
  end
end

function showDescription()
  local id=selectedItemDetails.id
  local group=globalList[id].group
  local desc = findDescription(id,group)
  desc = (desc=='' and '' or desc..'\r\n')..findDescription(id,group+4)
  UDF1.memoDescription.Lines.Text = desc
end

function toggleDescription(sender)
  local isBold = (sender.Font.Style == '[fsBold]')

  if isBold then
    sender.Font.Style = '[]'
    UDF1.Height=UDF1.Height-96
    UDF1.memoDescription.Visible=false
  else
    sender.Font.Style = '[fsBold]'
    UDF1.Height=UDF1.Height+96
    UDF1.memoDescription.Visible=true
    if selectedItemDetails~=nil then showDescription() end
  end
end

function copyItemIDToClipboard(sender)
  if selectedItemDetails~=nil then
    local id=selectedItemDetails.id
    if sender==(UDF1.btnCopyItemIDHex) then id=tohex08(id)
                                       else id=tostring(id) end
    UDF1.editUsedToCopyToClipboard.Text = id
    UDF1.editUsedToCopyToClipboard.selectAll()
    UDF1.editUsedToCopyToClipboard.cutToClipboard()
    local text=sender.Caption
    sender.Caption='Copied!'
    local t=createTimer(nil,true)
    t.OnTimer=function(t) t.destroy(); sender.Caption=text end
  end
end

function userChoseItem(sender)
  if sender.ItemIndex==-1 then return end
  selectedItemDetails = listToShow[sender.ItemIndex+1]
  local id=selectedItemDetails.id
  local name=selectedItemDetails.name
  UDF1.editShowChosenItem.Text = 'ID: '..tohex08(id)..' ,  name: '..name

  if (UDF1.btnShowDescription.Font.Style == '[fsBold]') then
    showDescription()
  end
end

function listItemsFromGroup(group)
  local messageRepoGroup = readQword(readQword(readQword(messageRepo+8))+group*8)
  if messageRepoGroup==0 then print('blah 1') return end

  local regionsCount = readInteger(messageRepoGroup+0x0C)
  if regionsCount==0 then print('blah 2') return end

  local TableWithIndexesToStrings = readQword(messageRepoGroup+0x18)
  local counter,adjust=0,0

  if group==0xA then adjust = 0x40000000 end --goods
  if group==0xB then adjust = 0x00000000 end --weapons
  if group==0xC then adjust = 0x10000000 end --protectors
  if group==0xD then adjust = 0x20000000 end --accessory
  if group==0xE then adjust = 0x40000000 end --magic


  for i=0,regionsCount-1 do repeat
    local ID_low  = readInteger(messageRepoGroup+i*16+0x2C)
    local ID_hi   = readInteger(messageRepoGroup+i*16+0x30)
    local offset  = readInteger(messageRepoGroup+i*16+0x28)

    if group==0xB and (ID_low&lt;=0x1ADB0 ) then break end --skip bogus weapon items
    if group==0xC and (ID_low&lt;=0xF4DF8 ) then break end --skip bogus protector items
    if group==0xE and (ID_low&lt;=0x1716 )  then break end --skip bogus magic items

    for subID=ID_low,ID_hi do
      local index=subID-ID_low+offset
      local StringTableIndex = readQword(TableWithIndexesToStrings+index*8)

      if StringTableIndex~=0 then
        local name=AnsiToUtf8(readString(messageRepoGroup+StringTableIndex,200,true))
        local ID=subID | adjust
        if not globalList[ID] then
          --print(tohex08(ID),name)
          globalList[ID]={name=name,group=group}
        end
        counter=counter+1
      end
    end -- subID loop

  until true end -- regions loop
  globalCounter=globalCounter+counter
end

function gatherAllItems()
  --signatureUsedToFindPointerToMessageRepo
  local sig=([[
40 53 48 83 EC 20 48 8B D9 48 8B 0D xx xx xx xx 48 85 C9 75 26
4C 8D 0D xx xx xx xx 4C 8D 05 xx xx xx xx 48 8D 0D xx xx xx xx
BA AA 00 00 00 E8 xx xx xx xx 48 8B 0D xx xx xx xx 8B 13 48 83
C4 20 5B E9]]):gsub('\n',' ')

  if not
  autoAssemble("aobscanmodule(spotAOB,DarkSoulsIII.exe,"..sig..")\n"..
               "label(messageRepoP)\n"..
               "registersymbol(messageRepoP)\n"..
               "spotAOB+C:\n"..
               "messageRepoP:\n")
  then return end

  local messageRepoP = readIntegerSigned('messageRepoP')+getAddress('messageRepoP')+4
  local tmpMessageRepo = readQword(messageRepoP)
  if tmpMessageRepo==nil then print('blah 0') return end
  messageRepo=tmpMessageRepo

  globalList={}
  globalListSorted={}
  globalCounter=0

  tools={}; materials={}; keyItems={}; spells={}
  rangedWeapons={}; catalysts={}; shields={}
  meleeWeapons={}; armor={}; arrowsAndBolts={}
  ringsAndCovenant={}; noCategory={}

  listItemsFromGroup(0xE)
  listItemsFromGroup(0xA)
  listItemsFromGroup(0xB)
  listItemsFromGroup(0xC)
  listItemsFromGroup(0xD)

  for k,v in pairs(globalList) do
    globalListSorted[#globalListSorted+1]={id=k,name=v.name}
  end
  table.sort(globalListSorted,function (a,b) return a.id&lt;b.id end)

  for i,v in ipairs(globalListSorted) do
    local id = v.id
    local firstDigit = id // 0x10000000
    local t = {id=v.id, name=v.name}
    if     firstDigit==1                   then table.insert(armor,t)
    elseif firstDigit==2                   then table.insert(ringsAndCovenant,t)
    elseif id&gt;0x40000063 and id&lt;0x400002E8 then table.insert(tools,t)
    elseif id&gt;0x400003E7 and id&lt;0x400004E3 then table.insert(materials,t)
    elseif id&gt;0x400007D0 and id&lt;0x40000869 then table.insert(keyItems,t)
    elseif id&gt;0x40124F7F and id&lt;0x4039ADA1 then table.insert(spells,t)
    elseif id&gt;0x00CF84FF and id&lt;0x00D83D6D then table.insert(rangedWeapons,t)
    elseif id&gt;0x00C7208F and id&lt;0x00CE2571 then table.insert(catalysts,t)
    elseif id&gt;0x01312CFF and id&lt;0x015EF3C1 then table.insert(shields,t)
    elseif id&gt;0x00061A7F and id&lt;0x00062C79 then table.insert(arrowsAndBolts,t)
    elseif firstDigit==0                   then table.insert(meleeWeapons,t)
    else                                        table.insert(noCategory,t)
    end
  end
  return true
end

function bindLabelsWithTables_andSetEvents()
  local function bindingHelper(C,T)
    binds_LabelsTables[userDataToInteger(C)]={tab=T,comp=C}
    C.OnClick = thisGroupOnly
  end

  binds_LabelsTables={}
  bindingHelper(UDF1.lblTools,tools)
  bindingHelper(UDF1.lblKeyItems,keyItems)
  bindingHelper(UDF1.lblMaterials,materials)
  bindingHelper(UDF1.lblSpells,spells)
  bindingHelper(UDF1.lblRangedWeapons,rangedWeapons)
  bindingHelper(UDF1.lblCatalysts,catalysts)
  bindingHelper(UDF1.lblShields,shields)
  bindingHelper(UDF1.lblMeleeWeapons,meleeWeapons)
  bindingHelper(UDF1.lblArmor,armor)
  bindingHelper(UDF1.lblArrowsBolts,arrowsAndBolts)
  bindingHelper(UDF1.lblRingsCovenant,ringsAndCovenant)
  bindingHelper(UDF1.lblNoCategory,noCategory)
  UDF1.editUserTypedFilter.OnChange=filterAndUpdate
  UDF1.btnCopyItemIDHex.OnClick=copyItemIDToClipboard
  UDF1.btnCopyItemIDDec.OnClick=copyItemIDToClipboard
  UDF1.btnShowDescription.OnClick=toggleDescription
  UDF1.listboxItems.OnSelectionChange=userChoseItem
end

function thisGroupOnly(sender)
  local isBold = (sender.Font.Style == '[fsBold]')

  for _,v in pairs(binds_LabelsTables) do
    if v.comp~=sender then v.comp.Font.Style='[]' end
  end

  if isBold then
    sender.Font.Style = '[]'
    chosenList=globalListSorted
  else
    sender.Font.Style = '[fsBold]'
    chosenList=binds_LabelsTables[userDataToInteger(sender)].tab
  end

  filterAndUpdate(UDF1.editUserTypedFilter)
end

if delayedUpdateTheList==nil then delayedUpdateTheList=createTimer(nil,false) end
delayedUpdateTheList.OnTimer = function (t) t.Enabled=false; updateTheList() end
delayedUpdateTheList.Interval=500

function filterAndUpdate(sender)
  local filter = escape(sender.Text)

  if chosenList==nil then return end

  listToShow={}
  for i,v in ipairs(chosenList) do
   if v.name:upper():match( filter:upper() ) then
    listToShow[1+#listToShow]=v
   end
  end

  delayedUpdateTheList.Enabled=false
  delayedUpdateTheList.Enabled=true
end

function updateTheList()
  UDF1.listboxItems.Items.clear()
  local str=createStringlist()
  for _,v in ipairs(listToShow) do
    str.add( v.name )
  end
  UDF1.listboxItems.Items=str
  UDF1.lblCounter.Caption='counter: '..#listToShow
end

function showHelper()
  if (globalList==nil) or (#globalListSorted==0) then
    if gatherAllItems() then
      bindLabelsWithTables_andSetEvents()
      chosenList=globalListSorted
      filterAndUpdate(UDF1.editUserTypedFilter)
    end
  end

  UDF1.show()
end
{$asm}

aobscanmodule(module,DarkSoulsIII.exe,00 00)
luacall(showHelper())

[DISABLE]
luacall(UDF1.hide())
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
