<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>30</ID>
      <Description>"[Enable]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( GetPlayerBase_AOB, Dishonored2.exe, 4863D1488B0D????????488B9CD1????????4885DB0F )
label( dqPtr )
registersymbol( dqPtr )
label( dwOffset )
registersymbol( dwOffset )

GetPlayerBase_AOB+3:
dqPtr:

GetPlayerBase_AOB+E:
dwOffset:

alloc( PtrThread, 64, Dishonored2.exe )
CreateThread( PtrThread )
alloc( dqPlayerBase, 8, Dishonored2.exe )
registersymbol( dqPlayerBase )

PtrThread:
sub rsp,28
mov rsi,dqPtr
xor rdi,rdi
cmp dword ptr [rsi+3],80000000
jb short @f
  mov rdi,FFFFFFFF00000000
@@:
mov ecx,[rsi+3]
add rdi,rcx
add rsi,edi
add rsi,7
mov rax,[rsi]
mov ecx,[dwOffset]
add rax,ecx
mov rax,[rax]
mov [dqPlayerBase],rax
add rsp,28
ret

[DISABLE]

unregistersymbol( dqPlayerBase )
dealloc( dqPlayerBase )
dealloc( PtrThread )
unregistersymbol( dwOffset )
unregistersymbol( dqPtr )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Unlimited Health"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedHealth, Dishonored2.exe, 48895C240848896C2410488974241848897C242041564883EC204989D64889CE4C854110 )
registersymbol( UnlimitedHealth )
label( UnlimitedHealth_o )
registersymbol( UnlimitedHealth_o )
alloc( UnlimitedHealthHook, 256, Dishonored2.exe )
label( UpdateHealth )
label( back )

UnlimitedHealthHook:
mov rax,[dqPlayerBase]
cmp [rbx+10],rax
jne short UnlimitedHealth_o
  mov rax,[rbx+8]		// get pointer to Base Health
  movss xmm0,[rax+68]	// retrieve Base Health
  mov r9,[rbx+68]       // process Health Upgrades as well
  test r9,r9
  je short UpdateHealth
    movsxd rax,dword ptr [rbx+B0]
	cmp eax,-1
	jle short @f
	  lea r8,[rax+rax*4]
	  mov rax,[r9+48]
	  movss xmm1,[rax+r8*8+24]
	  addss xmm0,xmm1
	  jmp short UpdateHealth
	@@:
	xorps xmm1,xmm1
	addss xmm0,xmm1
  UpdateHealth:
  movss [rbx+20],xmm0	// write Max Health to Current Health, to refresh it
  mov al,1              // set BOOL flag to 1 so no damage is subtracted
  ret
UnlimitedHealth_o:
readmem( UnlimitedHealth, 5 )
jmp back

UnlimitedHealth:
jmp UnlimitedHealthHook
back:

[DISABLE]

UnlimitedHealth:
readmem( UnlimitedHealth_o, 5 )

dealloc( UnlimitedHealthHook )
unregistersymbol( UnlimitedHealth_o )
unregistersymbol( UnlimitedHealth )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Unlimited Mana"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedMana, Dishonored2.exe, 534883EC60F64130010F29742450 )
registersymbol( UnlimitedMana )
label( UnlimitedMana_o )
registersymbol( UnlimitedMana_o )
alloc( UnlimitedManaHook, 256, Dishonored2.exe )
label( back )

UnlimitedManaHook:
xor r8d,r8d
mov r8,[dqPlayerBase]
cmp [rcx+10],r8
jne short UnlimitedMana_o
  mov r8,[rcx+8]		   // get pointer to Max Mana
  movss xmm0,[r8+68]	   // retrieve Max Mana
  movss [rcx+20],xmm0	   // write it to Current Mana, to refresh it
  mov byte ptr [rcx+30],1  // set BOOL in Mana Subsystem so it never depletes on use, just to be safe
  ret
UnlimitedMana_o:
readmem( UnlimitedMana, 5 )
jmp back

UnlimitedMana:
jmp UnlimitedManaHook
back:

[DISABLE]

UnlimitedMana:
readmem( UnlimitedMana_o, 5 )

dealloc( UnlimitedManaHook )
unregistersymbol( UnlimitedMana_o )
unregistersymbol( UnlimitedMana )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Unlimited Ammo"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UpdateAmmo_AOB, Dishonored2.exe, 4189F889C24889D9E8 )
label( UpdateAmmo )
registersymbol( UpdateAmmo )
label( UpdateAmmo_o )
registersymbol( UpdateAmmo_o )
alloc( AmmoHook, 256, Dishonored2.exe )
label( back )

AmmoHook:
mov r9,[dqPlayerBase]
cmp [rcx+10],r9
jne short UpdateAmmo_o
  mov r8d,[rbx+A4]      // get Max Clip
  mov [rbx+A0],r8d      // update Current Clip
  xor r8d,r8d			// setting parameter to 0 for function that updates inventory amount
UpdateAmmo_o:
readmem( UpdateAmmo_AOB-6F, 8 )
jmp back

UpdateAmmo_AOB-6F:
UpdateAmmo:
jmp AmmoHook
db 90 90 90
back:

[DISABLE]

UpdateAmmo:
readmem( UpdateAmmo_o, 8 )

dealloc( AmmoHook )
unregistersymbol( UpdateAmmo_o )
unregistersymbol( UpdateAmmo )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Unlimited Dark Vision"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedDarkVision_AOB, Dishonored2.exe, 4883EC28488B05????????4989C94C8B90????????4D85D275??B0014883C428C3 )
label( UnlimitedDarkVision )
registersymbol( UnlimitedDarkVision )
label( UnlimitedDarkVision_o )
registersymbol( UnlimitedDarkVision_o )
alloc( UnlimitedDarkVisionHook, 256, Dishonored2.exe )

UnlimitedDarkVisionHook:
mov rax,[dqPlayerBase]
cmp [r9+10],rax
jne short UnlimitedDarkVision_o

// method 1: reset the incremental timer

  mov [r9+E8],(float)0.0
  xor al,al
  add rsp,28
  ret

// method 2: patch the base timer for Dark Vision and reset incremental timer

{
  mov rax,[r9+8]             // get Dark Vision timer base
  mov [rax+6C],(float)3600.0 // change to whatever high value you want
  mov [r9+E8],(float)0.0     // reset the incremental timer
  xor al,al                  // we don't want to disable Dark Vision
  add rsp,28                 // original code
  ret                        // original code
}

// method 3: patch the return of the function (timers don't really matter at this point)

{
  xor al,al
  add rsp,28
  ret
}

UnlimitedDarkVision_o:
readmem( UnlimitedDarkVision_AOB+1A, 7 )

UnlimitedDarkVision_AOB+1A:
UnlimitedDarkVision:
jmp UnlimitedDarkVisionHook
db 90 90

[DISABLE]

UnlimitedDarkVision:
readmem( UnlimitedDarkVision_o, 7 )

dealloc( UnlimitedDarkVisionHook )
unregistersymbol( UnlimitedDarkVision_o )
unregistersymbol( UnlimitedDarkVision )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Unlimited Possession"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedPossession, Dishonored2.exe, 89542410574883EC20F30F104424384889CFF30F5881????????F30F1181????????F30F1089????????F30F5CC8F30F1081????????0F2FC1 )
registersymbol( UnlimitedPossession )
label( UnlimitedPossession_o )
registersymbol( UnlimitedPossession_o )
alloc( UnlimitedPossessionHook, 256, Dishonored2.exe )
label( back )

UnlimitedPossessionHook:
mov r9,[dqPlayerBase]
mov r8,[rcx+1D8]
cmp [r8+10],r9
jne short UnlimitedPossession_o
  xor edx,edx
UnlimitedPossession_o:
readmem( UnlimitedPossession, 5 )
jmp back

UnlimitedPossession:
jmp UnlimitedPossessionHook
back:

[DISABLE]

UnlimitedPossession:
readmem( UnlimitedPossession_o, 5 )

dealloc( UnlimitedPossessionHook )
unregistersymbol( UnlimitedPossession_o )
unregistersymbol( UnlimitedPossession )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Unlimited Bend Time"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( UnlimitedBendTime, Dishonored2.exe, 534883EC2080B9D0000000004889CB741E833D????????007515E8 )
registersymbol( UnlimitedBendTime )
label( UnlimitedBendTime_o )
registersymbol( UnlimitedBendTime_o )
alloc( UnlimitedBendTimeHook, 256, Dishonored2.exe )
label( back )

UnlimitedBendTimeHook:
mov r9,[dqPlayerBase]
mov r8,[rcx+B0]
cmp [r8+10],r9
jne short UnlimitedBendTime_o
  // [r8+20] here is the pointer to the timer for Bend Time (upgraded value is 14.70)
  ret
UnlimitedBendTime_o:
readmem( UnlimitedBendTime, 5 )
jmp back

UnlimitedBendTime:
jmp UnlimitedBendTimeHook
back:

[DISABLE]

UnlimitedBendTime:
readmem( UnlimitedBendTime_o, 5 )

dealloc( UnlimitedBendTimeHook )
unregistersymbol( UnlimitedBendTime_o )
unregistersymbol( UnlimitedBendTime )
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"[Debug]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"No Damage / Refresh Health"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( IsHealthComponentDamageable, Dishonored2.exe, 48895C240848896C2410488974241848897C242041564883EC204989D64889CE4C854110 )
registersymbol( IsHealthComponentDamageable )
label( IsHealthComponentDamageable_o )
registersymbol( IsHealthComponentDamageable_o )
alloc( IsHealthComponentDamageableHook, 256, Dishonored2.exe )
label( back )

IsHealthComponentDamageableHook:
push r8
push rcx
mov r8,[Dishonored2.exe+2556A50]
test [r8+001F7330],FFFFFF
jle @f
  mov ecx,[r8+001F7330]
  mov rax,[r8+001F7328]
  and ecx,00FFFFFF
  dec ecx
  movsxd rcx,dword ptr [rax+rcx*4]
  mov rax,[r8+rcx*8+001F6EA8]
  test rax,rax
  je @f
    cmp qword ptr [rax+20],0
	je @f
      mov rcx,[rax+60]			// get pointer to the structure where Health and Mana Subsystems addresses are located
								// check +0x70 as well, what/where it leads to
	  test rcx,rcx
	  je @f
        cmp [rcx+38],rbx		// is our player's Health Subsystem?
        jne @f
		  mov rcx,[rbx+8]		// get pointer to Max Health
		  movss xmm0,[rcx+68]	// retrieve Max Health
		  movss [rbx+20],xmm0	// write it to Current Health, to refresh it
	      mov al,1
		  pop rcx
		  pop r8
		  ret
@@:
pop rcx
pop r8
IsHealthComponentDamageable_o:
readmem( IsHealthComponentDamageable, 5 )
jmp back

IsHealthComponentDamageable:
jmp IsHealthComponentDamageableHook
back:

[DISABLE]

IsHealthComponentDamageable:
readmem( IsHealthComponentDamageable_o, 5 )

dealloc( IsHealthComponentDamageableHook )
unregistersymbol( IsHealthComponentDamageable_o )
unregistersymbol( IsHealthComponentDamageable )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Money (must be in Black Market screen to populate)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>Dishonored2.exe+2556A50</Address>
          <Offsets>
            <Offset>16C</Offset>
            <Offset>68</Offset>
            <Offset>5B8</Offset>
            <Offset>1F6EF8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Cost (must be in Black Market screen to populate)"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>Dishonored2.exe+2556A50</Address>
          <Offsets>
            <Offset>170</Offset>
            <Offset>68</Offset>
            <Offset>5B8</Offset>
            <Offset>1F6EF8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"dqPtr"</Description>
          <LastState Value="48 8B 0D F0 F1 18 FE" RealAddress="1443D7AB1"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>Array of byte</VariableType>
          <ByteLength>7</ByteLength>
          <Address>dqPtr</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>32</ID>
          <Description>"dwOffset"</Description>
          <LastState Value="0030EF58" RealAddress="1443D7ABC"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>dwOffset</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"dqPlayerBase"</Description>
          <LastState Value="0000000128D94210" RealAddress="13FFF0040"/>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>8 Bytes</VariableType>
          <Address>dqPlayerBase</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
