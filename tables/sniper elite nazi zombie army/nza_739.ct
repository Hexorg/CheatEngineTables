<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>23</ID>
      <Description>"Never Die"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[ecx+esi-00000398]
mov [ecx+esi-0000039C], eax
pop eax
originalcode:
comiss xmm0,[ecx+esi-0000039C]

exit:
jmp returnhere

"NZA.exe"+21D479:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+21D479:
comiss xmm0,[ecx+esi-0000039C]
//Alt: db 0F 2F 84 31 64 FC FF FF
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>114</Key>
          </Keys>
          <Description>Never Die</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Infinite Ammo"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax, ecx
add eax, 38
xor eax, 1f4
mov [ecx+3C], eax
mov eax,[ecx+3C]
add ecx,38

exit:
jmp returnhere

"NZA.exe"+37DC8F:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+37DC8F:
mov eax,[ecx+3C]
add ecx,38
//Alt: db 8B 41 3C 83 C1 38
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>115</Key>
          </Keys>
          <Description>Infinite Ammo</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"Infinite Explosives"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax, ecx
add eax, 34
xor eax, 9
mov [ecx+38], eax
mov eax,[ecx+38]
add ecx,34

exit:
jmp returnhere

"NZA.exe"+1807FA:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+1807FA:
mov eax,[ecx+38]
add ecx,34
//Alt: db 8B 41 38 83 C1 34
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>116</Key>
          </Keys>
          <Description>Infinite Explosives</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"No Reload"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov eax, ecx
add eax, 178
xor eax, 63
mov [ecx+0000017C], eax
mov eax,[ecx+0000017C]

exit:
jmp returnhere

"NZA.exe"+3D01A0:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+3D01A0:
mov eax,[ecx+0000017C]
//Alt: db 8B 81 7C 01 00 00
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>117</Key>
          </Keys>
          <Description>No Reload</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Super Fire"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+00000198], (float)0
originalcode:
movss xmm0,[esi+00000198]

exit:
jmp returnhere

"NZA.exe"+37BC2C:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+37BC2C:
movss xmm0,[esi+00000198]
//Alt: db F3 0F 10 86 98 01 00 00
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>118</Key>
          </Keys>
          <Description>Super Fire</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Super Focus"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+0c], (float)60
originalcode:
movss xmm0,[esi+0C]

exit:
jmp returnhere

"NZA.exe"+AB35E:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"NZA.exe"+AB35E:
movss xmm0,[esi+0C]
//Alt: db F3 0F 10 46 0C
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>119</Key>
          </Keys>
          <Description>Super Focus</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Made by"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>STN</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Visit http://deviatedhacking.com"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>For MORE!</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Cheat Table made by STN of dEViATED
Find more trainers and cheat tables at
http://deviatedhacking.com
</Comments>
  <LuaScript>--TRAINERGENERATORSTART--
--This is autogenerated code. Changing code in this block will
--get erased and rewritten if you regenerate the trainer code

--Uncomment the following line if this is a Cheat Table format trainer and you don't want CE to show (Tip, save as .CETRAINER alternatively)
--hideAllCEWindows()

RequiredCEVersion=6.2
if (getCEVersion==nil) or (getCEVersion()&lt;RequiredCEVersion) then
  messageDialog('Please install Cheat Engine '..RequiredCEVersion, mtError, mbOK)
  closeCE()
end
addresslist=getAddressList()
memrec23=addresslist_getMemoryRecordByID(addresslist,23)
memrec19=addresslist_getMemoryRecordByID(addresslist,19)
memrec21=addresslist_getMemoryRecordByID(addresslist,21)
memrec20=addresslist_getMemoryRecordByID(addresslist,20)
memrec17=addresslist_getMemoryRecordByID(addresslist,17)
memrec15=addresslist_getMemoryRecordByID(addresslist,15)

memrec23_hotkey0=memoryrecord_getHotkeyByID(memrec23,0)
memrec19_hotkey0=memoryrecord_getHotkeyByID(memrec19,0)
memrec21_hotkey0=memoryrecord_getHotkeyByID(memrec21,0)
memrec20_hotkey0=memoryrecord_getHotkeyByID(memrec20,0)
memrec17_hotkey0=memoryrecord_getHotkeyByID(memrec17,0)
memrec15_hotkey0=memoryrecord_getHotkeyByID(memrec15,0)

function onPostHotkey0(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT0, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec23_hotkey0,onPostHotkey0)

function onPostHotkey1(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT1, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec19_hotkey0,onPostHotkey1)

function onPostHotkey2(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT2, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec21_hotkey0,onPostHotkey2)

function onPostHotkey3(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT3, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec20_hotkey0,onPostHotkey3)

function onPostHotkey4(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT4, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec17_hotkey0,onPostHotkey4)

function onPostHotkey5(Hotkey)
  --Executed after the "toggle*" cheat got executed
  local memrec=memoryrecordhotkey_getOwner(Hotkey)
  local isActive=memoryrecord_isActive(memrec) --get the state after the hotkey got triggered
  cheatcomponent_setActive(CETrainer_CHEAT5, isActive)
  if gBeepOnAction then
    beep()
  end
end

memoryrecordhotkey_onPostHotkey(memrec15_hotkey0,onPostHotkey5)

control_setVisible(CETrainer_SEPERATOR, false)

strings_add(getAutoAttachList(), "NZA.exe")
gBeepOnAction=true
form_show(CETrainer)
function AboutClick()
  showMessage(gAboutText)
end
gAboutText=[[Sniper Elite Nazi Zombie Army PLUS 6 
TRAiNER by STN/Kavvman.

This trainer is quickly tossed together 
and is NOT an official dEViATED release 
so no support will be provided. You 
may ask for any support from the 
trainer author himself (STN).

Get our trainers at:
http://deviatedhacking.com]]

function CloseClick()
  closeCE()
  return caFree --onClick doesn't care, but onClose would like a result
end

--TRAINERGENERATORSTOP--
</LuaScript>
</CheatTable>
