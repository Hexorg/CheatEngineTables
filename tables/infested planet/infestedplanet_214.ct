<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>69</ID>
      <Description>"&lt;---------- R E A D M E ----------&gt; (double-click &lt;script&gt;)"</Description>
      <LastState Activated="0" />
      <Color>FF00FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
[DISABLE]
{$lua}
--[[

Scripts:
  Shop - Code runs when entering the shop, used for money pointer and cheats
  BP - Runs each frame while playing, used to get BP and Ammo pointers and for those cheats
  Health - Runs each frame for friendly units you have selected or that are under the mouse cursor, used for health cheat

Cheats:
  Health - keeps units you have selected or hover over at full health
  BP - Makes sure you have 100 BP
  Ammo - Makes sure you have full ammo
  Money - Makes sure you have at least 1,000,000 money

Values:
  Directly edit the Money, BP and Ammo.  It's probably best not to freeze these
  values as it may crash the game.


Test:
  Some pointers found by the cheats, use for structure dissecting if you want to look for other things.
  Also some scripts with injection points that don't do anything.
--]]
{$asm}



</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"+ SCRIPT: (globals)"</Description>
      <LastState Activated="0" />
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>globalalloc(globals,$100000)
define(pMoney,globals+1000)
define(pBP,globals+1004)
define(pBPBase,globals+1008)
define(pHealthHover,globals+100c)

define(cheatHealth,globals+2000)
define(cheatBP,globals+2004)
define(cheatAmmo,globals+2008)
define(cheatMoney,globals+200C)


[ENABLE]

globals+1000:


[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>36</ID>
          <Description>"SCRIPT: Shop"</Description>
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-25
  Author : Jason

  This script does blah blah blah
}

globalalloc(globals,$100000)
define(pMoney,globals+1000)
define(cheatMoney,globals+200C)

[ENABLE]

aobscanmodule(shop_inject,InfestedPlanet.exe,8B 97 78 01 00 00 52) // should be unique
alloc(newmem,$1000)

label(shop_code)
label(shop_skip)
label(shop_return)

newmem:

shop_code:
  cmp dword ptr [cheatMoney],1
  jne shop_skip
  mov edx,#1000000
  cmp edx,[edi+0178]
  jl shop_skip
  mov [edi+0178],edx
shop_skip:
  mov [pMoney],edi
  mov edx,[edi+00000178]
  jmp shop_return

shop_inject:
  jmp shop_code
  nop
shop_return:
registersymbol(shop_inject)

[DISABLE]

shop_inject:
  db 8B 97 78 01 00 00

unregistersymbol(shop_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+5A751

"InfestedPlanet.exe"+5A726: E8 05 B3 3E 00        -  call InfestedPlanet.exe+445A30
"InfestedPlanet.exe"+5A72B: 83 C4 04              -  add esp,04
"InfestedPlanet.exe"+5A72E: C7 45 E8 0F 00 00 00  -  mov [ebp-18],0000000F
"InfestedPlanet.exe"+5A735: 89 75 E4              -  mov [ebp-1C],esi
"InfestedPlanet.exe"+5A738: C6 45 D4 00           -  mov byte ptr [ebp-2C],00
"InfestedPlanet.exe"+5A73C: 3B DE                 -  cmp ebx,esi
"InfestedPlanet.exe"+5A73E: 0F 84 61 02 00 00     -  je InfestedPlanet.exe+5A9A5
"InfestedPlanet.exe"+5A744: 8B CB                 -  mov ecx,ebx
"InfestedPlanet.exe"+5A746: 89 B5 44 FF FF FF     -  mov [ebp-000000BC],esi
"InfestedPlanet.exe"+5A74C: E8 22 A9 FB FF        -  call InfestedPlanet.exe+15073
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+5A751: 8B 97 78 01 00 00     -  mov edx,[edi+00000178]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+5A757: 52                    -  push edx
"InfestedPlanet.exe"+5A758: 8B CB                 -  mov ecx,ebx
"InfestedPlanet.exe"+5A75A: E8 53 5A FC FF        -  call InfestedPlanet.exe+201B2
"InfestedPlanet.exe"+5A75F: 8B CF                 -  mov ecx,edi
"InfestedPlanet.exe"+5A761: E8 0F D4 FB FF        -  call InfestedPlanet.exe+17B75
"InfestedPlanet.exe"+5A766: 8B 8F 58 01 00 00     -  mov ecx,[edi+00000158]
"InfestedPlanet.exe"+5A76C: 89 85 34 FF FF FF     -  mov [ebp-000000CC],eax
"InfestedPlanet.exe"+5A772: 8B 87 54 01 00 00     -  mov eax,[edi+00000154]
"InfestedPlanet.exe"+5A778: 2B C8                 -  sub ecx,eax
"InfestedPlanet.exe"+5A77A: C1 F9 02              -  sar ecx,02
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"SCRIPT: BP"</Description>
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-25
  Author : jgoemat

  Code NEAR where BP is accessed every frame.  The problem is that the offset is
  huge, so if there is a game update it will likely change.  To account for this
  I inject in code just before that offset is used, and read the offset from
  memory.

  // mov eax,[esi+00017EE8] // this is the offset to BP in some global structure
  The offset to ammo is at -0030, i.e. [esi+00017EB8].
}

globalalloc(globals,$100000)
define(pBP,globals+1004)
define(pBPBase,globals+1008)
define(cheatBP,globals+2004)
define(cheatAmmo,globals+2008)

[ENABLE]

aobscanmodule(bp_inject,InfestedPlanet.exe,8B 48 04 6A 30) // should be unique

// assert that the following instructions up to the one after the instruction
// that uses the offset are basically the same
assert(bp_inject+5,8d 8c 0d * * * * FF 15 * * * * 8b 86 * * * * 50)

alloc(newmem,$1000)

label(bp_code)
label(bp_skip_bp)
label(bp_skip_ammo)
label(bp_return)

newmem:

bp_code:
  mov [pBPBase],esi
  mov ecx,[bp_return+0f]
  add ecx,esi
  mov [pBP],ecx
  cmp dword ptr [cheatBP],1
  jne bp_skip_bp
  mov dword ptr [ecx],#100
bp_skip_bp:
  cmp dword ptr [cheatAmmo],1
  jne bp_skip_ammo
  push eax
  mov eax,[ecx-0034] // load max ammo
  mov [ecx-0030],eax // store in current ammo
  pop eax
bp_skip_ammo:
  mov ecx,[eax+04] // original code
  push 30          // original code
  jmp bp_return

bp_inject:
  jmp bp_code
bp_return:
registersymbol(bp_inject)

[DISABLE]

bp_inject:
  db 8B 48 04 6A 30

unregistersymbol(bp_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+13B7E0

"InfestedPlanet.exe"+13B7AE: 89 9D 9C FE FF FF                 -  mov [ebp-00000164],ebx
"InfestedPlanet.exe"+13B7B4: 89 9D A0 FE FF FF                 -  mov [ebp-00000160],ebx
"InfestedPlanet.exe"+13B7BA: 8B 95 48 FE FF FF                 -  mov edx,[ebp-000001B8]
"InfestedPlanet.exe"+13B7C0: 8B 4A 04                          -  mov ecx,[edx+04]
"InfestedPlanet.exe"+13B7C3: 53                                -  push ebx
"InfestedPlanet.exe"+13B7C4: 6A 02                             -  push 02
"InfestedPlanet.exe"+13B7C6: 8D 8C 0D 48 FE FF FF              -  lea ecx,[ebp+ecx-000001B8]
"InfestedPlanet.exe"+13B7CD: C7 45 FC 1A 00 00 00              -  mov [ebp-04],0000001A
"InfestedPlanet.exe"+13B7D4: FF 15 50 5F 35 01                 -  call dword ptr [InfestedPlanet.exe+5D5F50]
"InfestedPlanet.exe"+13B7DA: 8B 85 48 FE FF FF                 -  mov eax,[ebp-000001B8]
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+13B7E0: 8B 48 04                          -  mov ecx,[eax+04]
"InfestedPlanet.exe"+13B7E3: 6A 30                             -  push 30
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+13B7E5: 8D 8C 0D 48 FE FF FF              -  lea ecx,[ebp+ecx-000001B8]
"InfestedPlanet.exe"+13B7EC: FF 15 54 5F 35 01                 -  call dword ptr [InfestedPlanet.exe+5D5F54]
"InfestedPlanet.exe"+13B7F2: 8B 86 E8 7E 01 00                 -  mov eax,[esi+00017EE8] // this is BP
"InfestedPlanet.exe"+13B7F8: 50                                -  push eax
"InfestedPlanet.exe"+13B7F9: 8D 8D 58 FE FF FF                 -  lea ecx,[ebp-000001A8]
"InfestedPlanet.exe"+13B7FF: FF 15 CC 5F 35 01                 -  call dword ptr [InfestedPlanet.exe+5D5FCC]
"InfestedPlanet.exe"+13B805: 8D 8D 48 FF FF FF                 -  lea ecx,[ebp-000000B8]
"InfestedPlanet.exe"+13B80B: 51                                -  push ecx
"InfestedPlanet.exe"+13B80C: 8D 8D 48 FE FF FF                 -  lea ecx,[ebp-000001B8]
"InfestedPlanet.exe"+13B812: E8 FB 39 EE FF                    -  call InfestedPlanet.exe+1F212
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"SCRIPT: Health (select or hover)"</Description>
          <LastState Activated="0" />
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-25
  Author : Jason

  Seems to read a unit's health, but only if it is selected, or
  when hovering the mouse.  Also only for friendly units, including marines,
  mobile health packs and turrets.
}

globalalloc(globals,$100000)
define(cheatHealth,globals+2000)
define(pHealthHover,globals+100c)

[ENABLE]

aobscanmodule(healthhover_inject,InfestedPlanet.exe,8B 81 24 01 00 00 8B) // should be unique
alloc(newmem,$1000)

label(healthhover_code)
label(healthhover_skip)
label(healthhover_return)

newmem:

healthhover_code:
  mov [pHealthHover],ecx
  cmp dword ptr [cheatHealth],1
  jne healthhover_skip
  mov eax,[ecx+00000120]
  mov [ecx+00000124],eax
healthhover_skip:
  mov eax,[ecx+00000124]
  jmp healthhover_return

healthhover_inject:
  jmp healthhover_code
  nop
healthhover_return:
registersymbol(healthhover_inject)

[DISABLE]

healthhover_inject:
  db 8B 81 24 01 00 00

unregistersymbol(healthhover_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+1E1C73

"InfestedPlanet.exe"+1E1C55: DE E1                 -  fsubrp st(1),st(0)
"InfestedPlanet.exe"+1E1C57: D8 4D 90              -  fmul dword ptr [ebp-70]
"InfestedPlanet.exe"+1E1C5A: D9 45 8C              -  fld dword ptr [ebp-74]
"InfestedPlanet.exe"+1E1C5D: DE CA                 -  fmulp st(2),st(0)
"InfestedPlanet.exe"+1E1C5F: DE C1                 -  faddp 
"InfestedPlanet.exe"+1E1C61: D9 5D 90              -  fstp dword ptr [ebp-70]
"InfestedPlanet.exe"+1E1C64: E8 BD 45 E2 FF        -  call InfestedPlanet.exe+6226
"InfestedPlanet.exe"+1E1C69: 8B 0E                 -  mov ecx,[esi]
"InfestedPlanet.exe"+1E1C6B: 85 C0                 -  test eax,eax
"InfestedPlanet.exe"+1E1C6D: 0F 85 97 00 00 00     -  jne InfestedPlanet.exe+1E1D0A
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+1E1C73: 8B 81 24 01 00 00     -  mov eax,[ecx+00000124]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+1E1C79: 8B 91 20 01 00 00     -  mov edx,[ecx+00000120]
"InfestedPlanet.exe"+1E1C7F: 89 45 8C              -  mov [ebp-74],eax
"InfestedPlanet.exe"+1E1C82: DB 45 8C              -  fild dword ptr [ebp-74]
"InfestedPlanet.exe"+1E1C85: 89 55 98              -  mov [ebp-68],edx
"InfestedPlanet.exe"+1E1C88: 8B 15 FC 1E 35 01     -  mov edx,[InfestedPlanet.exe+5D1EFC]
"InfestedPlanet.exe"+1E1C8E: DA 75 98              -  fidiv [ebp-68]
"InfestedPlanet.exe"+1E1C91: A1 00 1F 35 01        -  mov eax,[InfestedPlanet.exe+5D1F00]
"InfestedPlanet.exe"+1E1C96: 52                    -  push edx
"InfestedPlanet.exe"+1E1C97: 8B 15 0C 1F 35 01     -  mov edx,[InfestedPlanet.exe+5D1F0C]
"InfestedPlanet.exe"+1E1C9D: 50                    -  push eax
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"+ CHEATS"</Description>
          <Options moHideChildren="1" />
          <LastState Value="" Activated="0" RealAddress="00000000" />
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>53</ID>
              <Description>"CHEAT: Health (selected or hovered units)"</Description>
              <LastState Activated="1" />
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)
define(cheat,globals+2000)

[ENABLE]
cheat:
  dd 1

[DISABLE]
cheat:
  dd 0


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"CHEAT: BP"</Description>
              <LastState Activated="1" />
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)
define(cheat,globals+2004)

[ENABLE]
cheat:
  dd 1

[DISABLE]
cheat:
  dd 0


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>67</ID>
              <Description>"CHEAT: Ammo"</Description>
              <LastState Activated="1" />
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)
define(cheat,globals+2008)

[ENABLE]
cheat:
  dd 1

[DISABLE]
cheat:
  dd 0


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>66</ID>
              <Description>"CHEAT: Money"</Description>
              <LastState Activated="1" />
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>globalalloc(globals,$100000)
define(cheat,globals+200c)

[ENABLE]
cheat:
  dd 1

[DISABLE]
cheat:
  dd 0


</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"+ VALUES"</Description>
          <Options moHideChildren="1" />
          <LastState Value="" Activated="0" RealAddress="00000000" />
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>38</ID>
              <Description>"pMoney-&gt;Money"</Description>
              <LastState Value="876000" Activated="0" RealAddress="0F8B84D8" />
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1000</Address>
              <Offsets>
                <Offset>178</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>47</ID>
              <Description>"pBP-&gt;BP"</Description>
              <LastState Value="100" Activated="0" RealAddress="17588238" />
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1004</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>49</ID>
              <Description>"pBP-&gt;Ammo"</Description>
              <LastState Value="10" Activated="0" RealAddress="17588208" />
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1004</Address>
              <Offsets>
                <Offset>FFFFFFD0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"+ TEST"</Description>
          <Options moHideChildren="1" />
          <LastState Value="" Activated="0" RealAddress="00000000" />
          <Color>808080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>37</ID>
              <Description>"pMoney"</Description>
              <LastState Value="0F8B8360" Activated="0" RealAddress="08EC1000" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1000</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>46</ID>
              <Description>"pBPBase"</Description>
              <LastState Value="17570350" Activated="0" RealAddress="08EC1008" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1008</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>45</ID>
              <Description>"pBP"</Description>
              <LastState Value="17588238" Activated="0" RealAddress="08EC1004" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+1004</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>54</ID>
              <Description>"pHealthHover"</Description>
              <LastState Value="11785D60" Activated="0" RealAddress="08EC100C" />
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>globals+100C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>25</ID>
              <Description>"TEST: Money"</Description>
              <LastState Activated="0" />
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-24
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_Money1,InfestedPlanet.exe,8B 8E 78 01 00 00 51 8B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov ecx,[esi+00000178]
  jmp return

TEST_Money1:
  jmp code
  nop
return:
registersymbol(TEST_Money1)

[DISABLE]

TEST_Money1:
  db 8B 8E 78 01 00 00

unregistersymbol(TEST_Money1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+5D179

"InfestedPlanet.exe"+5D153: 50                    -  push eax
"InfestedPlanet.exe"+5D154: C7 45 FC 03 00 00 00  -  mov [ebp-04],00000003
"InfestedPlanet.exe"+5D15B: E8 B9 F7 FA FF        -  call InfestedPlanet.exe+C919
"InfestedPlanet.exe"+5D160: 83 7D CC 10           -  cmp dword ptr [ebp-34],10
"InfestedPlanet.exe"+5D164: C7 45 FC FF FF FF FF  -  mov [ebp-04],FFFFFFFF
"InfestedPlanet.exe"+5D16B: 72 0C                 -  jb InfestedPlanet.exe+5D179
"InfestedPlanet.exe"+5D16D: 8B 45 B8              -  mov eax,[ebp-48]
"InfestedPlanet.exe"+5D170: 50                    -  push eax
"InfestedPlanet.exe"+5D171: E8 BA 88 3E 00        -  call InfestedPlanet.exe+445A30
"InfestedPlanet.exe"+5D176: 83 C4 04              -  add esp,04
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+5D179: 8B 8E 78 01 00 00     -  mov ecx,[esi+00000178]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+5D17F: 51                    -  push ecx
"InfestedPlanet.exe"+5D180: 8B 4D B4              -  mov ecx,[ebp-4C]
"InfestedPlanet.exe"+5D183: E8 2A 30 FC FF        -  call InfestedPlanet.exe+201B2
"InfestedPlanet.exe"+5D188: 38 5D 0C              -  cmp [ebp+0C],bl
"InfestedPlanet.exe"+5D18B: 74 45                 -  je InfestedPlanet.exe+5D1D2
"InfestedPlanet.exe"+5D18D: 83 EC 1C              -  sub esp,1C
"InfestedPlanet.exe"+5D190: 8B D4                 -  mov edx,esp
"InfestedPlanet.exe"+5D192: 89 65 B4              -  mov [ebp-4C],esp
"InfestedPlanet.exe"+5D195: 52                    -  push edx
"InfestedPlanet.exe"+5D196: 8B CF                 -  mov ecx,edi
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"TEST: Damage"</Description>
              <LastState Activated="0" />
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-24
  Author : Jason

  Damage - including enemy
}

[ENABLE]

aobscanmodule(damage_inject,InfestedPlanet.exe,01 71 04 8B 41 04) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  add [ecx+04],esi
  mov eax,[ecx+04]
  jmp return

damage_inject:
  jmp code
  nop
return:
registersymbol(damage_inject)

[DISABLE]

damage_inject:
  db 01 71 04 8B 41 04

unregistersymbol(damage_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+303C7

"InfestedPlanet.exe"+303BA: CC                    -  int 3 
"InfestedPlanet.exe"+303BB: CC                    -  int 3 
"InfestedPlanet.exe"+303BC: CC                    -  int 3 
"InfestedPlanet.exe"+303BD: CC                    -  int 3 
"InfestedPlanet.exe"+303BE: CC                    -  int 3 
"InfestedPlanet.exe"+303BF: CC                    -  int 3 
"InfestedPlanet.exe"+303C0: 55                    -  push ebp
"InfestedPlanet.exe"+303C1: 8B EC                 -  mov ebp,esp
"InfestedPlanet.exe"+303C3: 56                    -  push esi
"InfestedPlanet.exe"+303C4: 8B 75 08              -  mov esi,[ebp+08]
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+303C7: 01 71 04              -  add [ecx+04],esi
"InfestedPlanet.exe"+303CA: 8B 41 04              -  mov eax,[ecx+04]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+303CD: 85 C0                 -  test eax,eax
"InfestedPlanet.exe"+303CF: 7F 12                 -  jg InfestedPlanet.exe+303E3
"InfestedPlanet.exe"+303D1: 85 F6                 -  test esi,esi
"InfestedPlanet.exe"+303D3: 79 0E                 -  jns InfestedPlanet.exe+303E3
"InfestedPlanet.exe"+303D5: C7 41 04 00 00 00 00  -  mov [ecx+04],00000000
"InfestedPlanet.exe"+303DC: B0 01                 -  mov al,01
"InfestedPlanet.exe"+303DE: 5E                    -  pop esi
"InfestedPlanet.exe"+303DF: 5D                    -  pop ebp
"InfestedPlanet.exe"+303E0: C2 04 00              -  ret 0004
"InfestedPlanet.exe"+303E3: 8B 11                 -  mov edx,[ecx]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>32</ID>
              <Description>"TEST: Health"</Description>
              <LastState Activated="0" />
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-24
  Author : Jason

  Looks like health (at least of player soldier) is loaded every turn
}

[ENABLE]

aobscanmodule(health_inject,InfestedPlanet.exe,FC DB 81 24 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  fild dword ptr [ecx+00000124]
  jmp return

health_inject+01:
  jmp code
  nop
return:
registersymbol(health_inject)

[DISABLE]

health_inject+01:
  db DB 81 24 01 00 00

unregistersymbol(health_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+ABC4F

"InfestedPlanet.exe"+ABC31: 8B EC              -  mov ebp,esp
"InfestedPlanet.exe"+ABC33: 83 EC 10           -  sub esp,10
"InfestedPlanet.exe"+ABC36: E8 ED 4D F6 FF     -  call InfestedPlanet.exe+10A28
"InfestedPlanet.exe"+ABC3B: D9 E8              -  fld1 
"InfestedPlanet.exe"+ABC3D: 84 C0              -  test al,al
"InfestedPlanet.exe"+ABC3F: 74 0B              -  je InfestedPlanet.exe+ABC4C
"InfestedPlanet.exe"+ABC41: D9 05 94 D9 27 01  -  fld dword ptr [InfestedPlanet.exe+4FD994]
"InfestedPlanet.exe"+ABC47: D9 5D FC           -  fstp dword ptr [ebp-04]
"InfestedPlanet.exe"+ABC4A: EB 03              -  jmp InfestedPlanet.exe+ABC4F
"InfestedPlanet.exe"+ABC4C: D9 55 FC           -  fst dword ptr [ebp-04]
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+ABC4F: DB 81 24 01 00 00  -  fild dword ptr [ecx+00000124]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+ABC55: DA B1 20 01 00 00  -  fidiv [ecx+00000120]
"InfestedPlanet.exe"+ABC5B: D9 5D F8           -  fstp dword ptr [ebp-08]
"InfestedPlanet.exe"+ABC5E: D9 45 F8           -  fld dword ptr [ebp-08]
"InfestedPlanet.exe"+ABC61: DC 1D 30 D5 27 01  -  fcomp qword ptr [InfestedPlanet.exe+4FD530]
"InfestedPlanet.exe"+ABC67: DF E0              -  fnstsw ax
"InfestedPlanet.exe"+ABC69: F6 C4 05           -  test ah,05
"InfestedPlanet.exe"+ABC6C: 7A 08              -  jp InfestedPlanet.exe+ABC76
"InfestedPlanet.exe"+ABC6E: DD D8              -  fstp st(0)
"InfestedPlanet.exe"+ABC70: D9 05 D4 CD 27 01  -  fld dword ptr [InfestedPlanet.exe+4FCDD4]
"InfestedPlanet.exe"+ABC76: D9 5D F8           -  fstp dword ptr [ebp-08]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>33</ID>
              <Description>"TEST: Health2"</Description>
              <LastState Activated="0" />
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-24
  Author : Jason

  Loads soldier health, but not very often
}

[ENABLE]

aobscanmodule(health2_inject,InfestedPlanet.exe,70 8B 86 24 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[esi+00000124]
  jmp return

health2_inject+01:
  jmp code
  nop
return:
registersymbol(health2_inject)

[DISABLE]

health2_inject+01:
  db 8B 86 24 01 00 00

unregistersymbol(health2_inject)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+144B6D

"InfestedPlanet.exe"+144B4F: 0F 84 88 00 00 00  -  je InfestedPlanet.exe+144BDD
"InfestedPlanet.exe"+144B55: 8B CE              -  mov ecx,esi
"InfestedPlanet.exe"+144B57: E8 E8 3E EC FF     -  call InfestedPlanet.exe+8A44
"InfestedPlanet.exe"+144B5C: 84 C0              -  test al,al
"InfestedPlanet.exe"+144B5E: 75 7D              -  jne InfestedPlanet.exe+144BDD
"InfestedPlanet.exe"+144B60: 6A 40              -  push 40
"InfestedPlanet.exe"+144B62: 8B CE              -  mov ecx,esi
"InfestedPlanet.exe"+144B64: E8 E8 6D EC FF     -  call InfestedPlanet.exe+B951
"InfestedPlanet.exe"+144B69: 84 C0              -  test al,al
"InfestedPlanet.exe"+144B6B: 75 70              -  jne InfestedPlanet.exe+144BDD
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+144B6D: 8B 86 24 01 00 00  -  mov eax,[esi+00000124]
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+144B73: 3B 86 20 01 00 00  -  cmp eax,[esi+00000120]
"InfestedPlanet.exe"+144B79: 74 62              -  je InfestedPlanet.exe+144BDD
"InfestedPlanet.exe"+144B7B: 8B CE              -  mov ecx,esi
"InfestedPlanet.exe"+144B7D: E8 26 A8 EC FF     -  call InfestedPlanet.exe+F3A8
"InfestedPlanet.exe"+144B82: 3B 45 08           -  cmp eax,[ebp+08]
"InfestedPlanet.exe"+144B85: 7D 56              -  jnl InfestedPlanet.exe+144BDD
"InfestedPlanet.exe"+144B87: 56                 -  push esi
"InfestedPlanet.exe"+144B88: 8B CF              -  mov ecx,edi
"InfestedPlanet.exe"+144B8A: E8 C7 0E EC FF     -  call InfestedPlanet.exe+5A56
"InfestedPlanet.exe"+144B8F: 84 C0              -  test al,al
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>68</ID>
              <Description>"TEST: Ammo"</Description>
              <LastState Activated="0" />
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : InfestedPlanet.exe
  Version: 
  Date   : 2015-04-24
  Author : Jason

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(TEST_Ammo1,InfestedPlanet.exe,C7 45 CC 0F 00 00 00 89 5D C8 88 5D B8 3B FB 74 67) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [ebp-34],0000000F
  jmp return

TEST_Ammo1:
  jmp code
  nop
  nop
return:
registersymbol(TEST_Ammo1)

[DISABLE]

TEST_Ammo1:
  db C7 45 CC 0F 00 00 00

unregistersymbol(TEST_Ammo1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "InfestedPlanet.exe"+13B50C

"InfestedPlanet.exe"+13B4EC: 8B 42 64              -  mov eax,[edx+64]
"InfestedPlanet.exe"+13B4EF: FF D0                 -  call eax
"InfestedPlanet.exe"+13B4F1: 83 7D CC 10           -  cmp dword ptr [ebp-34],10
"InfestedPlanet.exe"+13B4F5: 8B F8                 -  mov edi,eax
"InfestedPlanet.exe"+13B4F7: C7 45 FC FF FF FF FF  -  mov [ebp-04],FFFFFFFF
"InfestedPlanet.exe"+13B4FE: 72 0C                 -  jb InfestedPlanet.exe+13B50C
"InfestedPlanet.exe"+13B500: 8B 4D B8              -  mov ecx,[ebp-48]
"InfestedPlanet.exe"+13B503: 51                    -  push ecx
"InfestedPlanet.exe"+13B504: E8 27 A5 30 00        -  call InfestedPlanet.exe+445A30
"InfestedPlanet.exe"+13B509: 83 C4 04              -  add esp,04
// ---------- INJECTING HERE ----------
"InfestedPlanet.exe"+13B50C: C7 45 CC 0F 00 00 00  -  mov [ebp-34],0000000F
// ---------- DONE INJECTING  ----------
"InfestedPlanet.exe"+13B513: 89 5D C8              -  mov [ebp-38],ebx
"InfestedPlanet.exe"+13B516: 88 5D B8              -  mov [ebp-48],bl
"InfestedPlanet.exe"+13B519: 3B FB                 -  cmp edi,ebx
"InfestedPlanet.exe"+13B51B: 74 67                 -  je InfestedPlanet.exe+13B584
"InfestedPlanet.exe"+13B51D: 8B 86 B4 7E 01 00     -  mov eax,[esi+00017EB4] // also ammo?  max?
"InfestedPlanet.exe"+13B523: 50                    -  push eax
"InfestedPlanet.exe"+13B524: 8B CF                 -  mov ecx,edi
"InfestedPlanet.exe"+13B526: E8 A7 40 EE FF        -  call InfestedPlanet.exe+1F5D2
"InfestedPlanet.exe"+13B52B: 8B 86 B8 7E 01 00     -  mov eax,[esi+00017EB8] // current ammo
"InfestedPlanet.exe"+13B531: 50                    -  push eax
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>08EC0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Structures StructVersion="2">
    <Structure Name="HealthBar" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="172" Vartype="4 Bytes" Bytesize="4" Description="Health Bar 1" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="176" Vartype="4 Bytes" Bytesize="4" Description="Health Bar 2" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="Ammo+17e00" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="180" Vartype="4 Bytes" Bytesize="4" Description="Ammo1" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="184" Vartype="4 Bytes" Bytesize="4" Description="Ammo2" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="224" Vartype="4 Bytes" Bytesize="4" Description="Ammo Compare" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="232" Vartype="4 Bytes" Bytesize="4" Description="BP" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="236" Vartype="4 Bytes" Bytesize="4" Description="BP in use?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
    <Structure Name="Health" AutoFill="0" AutoCreate="1" DefaultHex="0" AutoDestroy="0" DoNotSaveLocal="0" AutoCreateStructsize="4096">
      <Elements>
        <Element Offset="80" Vartype="4 Bytes" Bytesize="4" Description="Poison Damage?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="84" Vartype="4 Bytes" Bytesize="4" Description="Poison Damage?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="96" Vartype="Float" Bytesize="4" Description="Slowed?" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="288" Vartype="4 Bytes" Bytesize="4" Description="Max Health" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
        <Element Offset="292" Vartype="4 Bytes" Bytesize="4" Description="Current Health" DisplayMethod="Unsigned Integer" BackgroundColor="80000005" />
      </Elements>
    </Structure>
  </Structures>
  <Comments>Scripts:
  Shop - Code runs when entering the shop, used for money pointer and cheats
  BP - Runs each frame while playing, used to get BP and Ammo pointers and for those cheats
  Health - Runs each frame for friendly units you have selected or that are under the mouse cursor, used for health cheat

Cheats:
  Health - keeps units you have selected or hover over at full health
  BP - Makes sure you have 100 BP
  Ammo - Makes sure you have full ammo
  Money - Makes sure you have at least 1,000,000 money

Values:
  Directly edit the Money, BP and Ammo.  It's probably best not to freeze these
  values as it may crash the game.


Test:
  Some pointers found by the cheats, use for structure dissecting if you want to look for other things.
  Also some scripts with injection points that don't do anything.</Comments>
</CheatTable>