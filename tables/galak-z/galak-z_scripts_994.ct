<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Missile Write On Use/Get (Simple Write)"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(unlmissiles,1024)
label(returnhere)
label(originalcode)
// AOB
label(aob_missile)
registersymbol(aob_missile)
aobscan(missile_aob,89 46 64 8B 46 10)

unlmissiles:
mov eax,(int)28


originalcode:
mov [esi+64],eax
mov eax,[esi+10]
jmp returnhere


missile_aob:
aob_missile:
jmp unlmissiles
nop
returnhere:


 
 
[DISABLE]
aob_missile:
db 89 46 64 8B 46 10
unregistersymbol(aob_missile)
dealloc(unlmissiles)
//mov [esi+64],eax
//mov eax,[esi+10]
//Alt: db 89 46 64 8B 46 10
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"Missile Write On Use/Get (Set How Much Dynamically)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(MUNITION,Galak-Z.exe)// Define a more Complete Code

[ENABLE]
// Definition for the code
alloc(Ammo,$1000,MUNITION)
registersymbol(Ammo) // Register the allocated memory
label(unlmissiles)
label(returnhere)
label(originalcode)
// AOB
label(aob_missile)
registersymbol(aob_missile)
aobscan(missile_aob,89 46 64 8B 46 10)
// Variables Preparation
label(howmany)
registersymbol(howmany)

// Real Code Begin Here
Ammo:

// Define The Variables
howmany:
dd 14 // Default Value For The Variable (In Hex), 14=20

unlmissiles:
mov eax,[howmany]


originalcode:
mov [esi+64],eax
mov eax,[esi+10]
jmp returnhere


missile_aob:
aob_missile:
jmp unlmissiles
nop
returnhere:


 
 
[DISABLE]
aob_missile:
db 89 46 64 8B 46 10
unregistersymbol(howmany)
unregistersymbol(aob_missile)
unregistersymbol(Ammo)
dealloc(Ammo)
//mov [esi+64],eax
//mov eax,[esi+10]
//Alt: db 89 46 64 8B 46 10
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>22</ID>
          <Description>"How Many"</Description>
          <LastState Value="68" Activated="0" RealAddress="04CA0000"/>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>howmany</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"Missile Write On Use/Get (Get Real Address)"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(MUNITION,Galak-Z.exe)// Define a more Complete Code

[ENABLE]
// Definition for the code
alloc(Ammo,$1000,MUNITION)
registersymbol(Ammo) // Register the allocated memory
label(unlmissiles)
label(returnhere)
label(originalcode)
// AOB
label(aob_missile)
registersymbol(aob_missile)
aobscan(missile_aob,89 46 64 8B 46 10)
// Variables Preparation
label(howmany)
registersymbol(howmany)

// Real Code Begin Here
Ammo:

// Define The Variables
howmany:
dd 0 // For Default Value Just Use 0, It Merely Need To Exist

unlmissiles:
mov [howmany],esi
add [howmany],64


originalcode:
mov [esi+64],eax
mov eax,[esi+10]
jmp returnhere


missile_aob:
aob_missile:
jmp unlmissiles
nop
returnhere:


 
 
[DISABLE]
aob_missile:
db 89 46 64 8B 46 10
unregistersymbol(howmany)
unregistersymbol(aob_missile)
unregistersymbol(Ammo)
dealloc(Ammo)
//mov [esi+64],eax
//mov eax,[esi+10]
//Alt: db 89 46 64 8B 46 10
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>25</ID>
          <Description>"How Many"</Description>
          <LastState Value="16" Activated="0" RealAddress="6C56C244"/>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>howmany</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Shield Write Test (Shields Yours/Enemy Need To Be Damaged First)"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(aob_shields)
registersymbol(aob_shields)
aobscan(shields_aob,D9 9E 98 00 00 00 E8)


newmem:
cmp [esi+0000007C],1
je returnhere
fstp dword ptr [esi+00000098]
jmp returnhere



shields_aob:
aob_shields:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
aob_shields:
db D9 9E 98 00 00 00
unregistersymbol(aob_shields)
dealloc(newmem)
//fstp dword ptr [esi+00000098]
//Alt: db D9 9E 98 00 00 00 - E8 DD C5 CD BF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Thruster"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
label(aob_rocket)
registersymbol(aob_rocket)
aobscan(rocket_aob,D9 58 44 C9 C3 00 00 81)


rocket_aob:
aob_rocket:
db 90 90 90

 
[DISABLE]
aob_rocket:
db D9 58 44
unregistersymbol(aob_rocket)
//fstp dword ptr [eax+44]
//Alt: db D9 58 44 - C9 C3 00 00 81
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Thruster"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(aob_rocket,Galak-Z.exe,D9 58 44 C9 C3 00 00 81)
registersymbol(aob_rocket)

aob_rocket:
db 90 90 90
 
[DISABLE]
aob_rocket:
db D9 58 44
unregistersymbol(aob_rocket)
//fstp dword ptr [eax+44]
//Alt: db D9 58 44 - C9 C3 00 00 81
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of sub esp,04</Description>
      <Address>1290B2C4</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>55</Byte>
        <Byte>8B</Byte>
        <Byte>EC</Byte>
        <Byte>56</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>75</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of fstp dword ptr [eax+44]</Description>
      <Address>5493A0B1</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>C4</Byte>
        <Byte>10</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>58</Byte>
        <Byte>44</Byte>
      </Actual>
      <After>
        <Byte>C9</Byte>
        <Byte>C3</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>81</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>aob_shields</Name>
      <Address>0DB707F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>aob_missile</Name>
      <Address>0DAD63DD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>howmany</Name>
      <Address>04CA0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
