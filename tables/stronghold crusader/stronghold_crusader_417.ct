<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>36</ID>
      <Description>"[X] &lt;== Stronghold Crusader v1.1 Script"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Stronghold Crusader
 Game Version  : 1.1
 Proces Name   : Stronghold Crusader.exe
 Script Version: 1.0
 CE Version    : 6.2
 Release date  : 12-Jun-2012
 Author        : Recifense
 History:
 03-May-12: First Release
 Features:
 - Minimum Gold
 - Minimum Reputation
 - Minimum Items,
 - pointers to Zoomed Card and player
===========================================
}

//=========================================
// Definitions
define(GOLD,"Stronghold Crusader".exe+00960e3c)
define(REPU,"Stronghold Crusader".exe+00960990)
define(HEAL,"Stronghold Crusader".exe+01649bf8)
define(WPON,0x00000178)
define(FOOD,0x0000015c)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert("Stronghold Crusader".exe+00037DCF,8b b1 3c 0e d6 00)
assert("Stronghold Crusader".exe+00037DBC,8b 91 90 09 d6 00)
assert("Stronghold Crusader".exe+0000eb32,0f bf 81 e6 00 00 00)
assert("Stronghold Crusader".exe+000f19d0,66 89 86 f8 9b a4 01)
assert("Stronghold Crusader".exe+0016b243,89 8c 37 88 06 00 00)
assert("Stronghold Crusader".exe+0016c027,8b 94 3e 88 06 00 00)
assert("Stronghold Crusader".exe+0000f88f,89 0f 8d 04 40)

//=========================================
alloc(MyCode,2048,"Stronghold Crusader".exe)
//=========================================
// Declaration section
label(_MonGold)
label(_BackMG)
label(_ExitMG)
label(_MonReputation)
label(_BackMR)
label(_ExitMR)
label(_MonItems)
label(_MonI00)
label(_MonI10)
label(_MonI20)
label(_BackMI)
label(_ExitMI)
label(_MonHP)
label(_MonH00)
label(_BackMH)
label(_ExitMH)
label(_MonHP2)
label(_MonH20)
label(_BackMH2)
label(_ExitMH2)
label(_MonHP3)
label(_MonH30)
label(_BackMH3)
label(_ExitMH3)
label(_MonItems2)
label(_MonI02)
label(_MonI12)
label(_MonI22)
label(_BackMI2)
label(_ExitMI2)
label(pUnit)
label(pPlayer)
label(iEnableMG)
label(iEnableMR)
label(iEnableMI)
label(iEnableGM)
label(iMinGold)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pPlayer)
registersymbol(iEnableMG)
registersymbol(iEnableMR)
registersymbol(iEnableMI)
registersymbol(iEnableGM)
registersymbol(iMinGold)

//=========================================
MyCode:
//=========================================
_MonGold:
 mov esi,[ecx+GOLD]                // Original code

 cmp dword ptr [iEnableMG],0
 je _ExitMG                        // Jump if feature is disabled

 cmp esi,[iMinGold]
 jge _ExitMG

 mov esi,[iMinGold]
 mov [ecx+GOLD],esi

_ExitMG:
 jmp _BackMG                       // Back to main code

//=========================================
_MonReputation:
 mov edx,[ecx+REPU]                // Original code

 cmp dword ptr [iEnableMR],0
 je _ExitMR                        // Jump if feature is disabled

 cmp edx,#6200
 jge _ExitMR

 mov edx,#6200
 mov [ecx+REPU],edx

_ExitMR:
 jmp _BackMR                       // Back to main code

//=========================================
// EDX = pItem#
_MonItems:
 push ebx

 cmp dword ptr [iEnableMI],0
 je _ExitMI                        // Jump if feature is disabled

 cmp word ptr [ecx+000000ea],1
 jne _ExitMI

 movsx eax,word ptr [ecx+000000E6] // Get storage type
 cmp eax,#11
 je _MonI10

 cmp eax,#19
 je _MonI20

 cmp eax,#10
 jne _ExitMI

 cmp dword ptr [ecx+000001a4],0    // Not Tile ?
 je _ExitMI                        // Jump if true

// Items stored in Tiles
 mov eax,#11
 cmp eax,[edx]
 jge _MonI00

 mov eax,[ecx+0000019c]            // Get max value
 lea eax,[eax-05]

 cmp eax,[edx]
 jge _ExitMI

_MonI00:
 mov [edx],eax
 mov [ecx+00000198],eax
 jmp _ExitMI
// Items stored in Armory
_MonI10:
 mov eax,#05
 mov [ecx+WPON+00],eax
 mov [ecx+WPON+04],eax
 mov [ecx+WPON+08],eax
 mov [ecx+WPON+0c],eax
 mov [ecx+WPON+10],eax
 mov [ecx+WPON+14],eax
 mov [ecx+WPON+18],eax
 mov [ecx+WPON+1C],eax

 mov eax,#40
 mov [ecx+00000198],eax
 jmp _ExitMI
// Items stored in Granary
_MonI20:
 mov eax,#50
 mov [ecx+FOOD+00],eax
 mov [ecx+FOOD+04],eax
 mov [ecx+FOOD+08],eax
 mov [ecx+FOOD+0c],eax

 mov eax,#200
 mov [ecx+00000198],eax

_ExitMI:
 pop ebx

 movsx eax,word ptr [ecx+000000E6] // Original code (rds storage type)
 jmp _BackMI                       // Back to main code

//=========================================
// Buildings
_MonHP:
 push ebx
 push ecx

 cmp dword ptr [iEnableGM],0
 je _ExitMH                        // Jump if feature is disabled

 lea ebx,[esi+HEAL]
 lea ebx,[ebx-0120]

 cmp word ptr [ebx+000000ea],1
 jne _ExitMH

 mov cx,#5000
 cmp cx,[ebx+00000122]
 jle _MonH00

 mov [ebx+00000122],cx

_MonH00:
 mov ax,[ebx+00000122]

_ExitMH:
 pop ecx
 pop ebx

 mov [esi+HEAL],ax                 // Original code
 jmp _BackMH                       // Back to main code

//=========================================
// Humans
_MonHP2:
 push ebx
 push edx

 cmp dword ptr [iEnableGM],0
 je _ExitMH2                       // Jump if feature is disabled

 cmp dword ptr [edi+esi+00000340],1
 jne _ExitMH2

 mov ebx,#620000
 cmp ebx,[edi+esi+0000068c]
 jle _MonH20

 mov [edi+esi+0000068c],ebx

_MonH20:
 mov eax,[edi+esi+0000068c]
 mov ecx,eax

_ExitMH2:
 pop edx
 pop ebx

 mov [edi+esi+00000688],ecx        // Original code
 jmp _BackMH2                      // Back to main code

//=========================================
// Humans
_MonHP3:
 cmp dword ptr [iEnableGM],0
 je _ExitMH3                       // Jump if feature is disabled

 cmp dword ptr [edi+esi+00000340],1
 jne _ExitMH3

 mov edx,#620000
 cmp edx,[edi+esi+0000068c]
 jle _MonH30

 mov [edi+esi+0000068c],edx

_MonH30:
 xor ecx,ecx

 mov edx,[edi+esi+0000068c]
 mov [edi+esi+00000688],edx

_ExitMH3:
 mov edx,[esi+edi+00000688]        // Original code
 jmp _BackMH3                      // Back to main code

//=========================================
_MonItems2:
 push eax
 push ebx
 push ecx

 mov [edi],ecx                     // Original code (update item)

 cmp dword ptr [iEnableMI],0
 je _ExitMI2                       // Jump if feature is disabled

 mov ecx,[esp+2c]
 mov eax,edi
 and ecx,fffff000
 and eax,fffff000
 cmp eax,ecx
 jne _ExitMI2

 mov ecx,[esp+2c]
 lea ecx,[ecx-000000b0]

 cmp word ptr [ecx+000000ea],1
 jne _ExitMI2

 movsx eax,word ptr [ecx+000000E6] // Get storage type
 cmp eax,#11
 je _MonI12

 cmp eax,#19
 je _MonI22

 cmp eax,#10
 jne _ExitMI2

 cmp dword ptr [ecx+000001a4],0    // Not Tile ?
 je _ExitMI2                       // Jump if true

// Items stored in Tiles
 mov eax,#11
 cmp eax,[edi]
 jge _MonI02

 mov eax,[ecx+0000019c]            // Get max value
 lea eax,[eax-05]

 cmp eax,[edi]
 jge _ExitMI2

_MonI02:
 mov [edi],eax
 mov [ecx+00000198],eax
 jmp _ExitMI2
// Items stored in Armory
_MonI12:
 mov eax,#05
 mov [ecx+WPON+00],eax
 mov [ecx+WPON+04],eax
 mov [ecx+WPON+08],eax
 mov [ecx+WPON+0c],eax
 mov [ecx+WPON+10],eax
 mov [ecx+WPON+14],eax
 mov [ecx+WPON+18],eax
 mov [ecx+WPON+1C],eax

 mov eax,#40
 mov [ecx+00000198],eax
 jmp _ExitMI2
// Items stored in Granary
_MonI22:
 mov eax,#50
 mov [ecx+FOOD+00],eax
 mov [ecx+FOOD+04],eax
 mov [ecx+FOOD+08],eax
 mov [ecx+FOOD+0c],eax

 mov eax,#200
 mov [ecx+00000198],eax

_ExitMI2:
 pop ecx
 pop ebx
 pop eax

 lea eax,[eax+eax*2]               // Original code (rds storage type)
 jmp _BackMI2                      // Back to main code

//=========================================
 db '========================================&gt;'
 db 'CE6.2 Script by Recifense 061212'
//=========================================
// Variables
iEnableMG:
 dd 1
iEnableMR:
 dd 1
iEnableMI:
 dd 1
iEnableGM:
 dd 1
pUnit:
 dd 0
pPlayer:
 dd 0
iMinGold:
 dd #6200

//=========================================
// Hacking Points
"Stronghold Crusader".exe+00037DCF:
 jmp _MonGold
 nop
_BackMG:

"Stronghold Crusader".exe+00037DBC:
 jmp _MonReputation
 nop
_BackMR:

"Stronghold Crusader".exe+0000eb32:
 jmp _MonItems
 nop
 nop
_BackMI:

"Stronghold Crusader".exe+000f19d0:
 jmp _MonHP
 nop
 nop
_BackMH:

"Stronghold Crusader".exe+0016b243:
 jmp _MonHP2
 nop
 nop
_BackMH2:

"Stronghold Crusader".exe+0016c027:
 jmp _MonHP3
 nop
 nop
_BackMH3:

"Stronghold Crusader".exe+0000f88f:
 jmp _MonItems2
_BackMI2:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
"Stronghold Crusader".exe+00037DCF:
// mov esi,[ecx+00D60E3C]
 db 8b b1 3c 0e d6 00

"Stronghold Crusader".exe+00037DBC:
// mov edx,[ecx+00D60990]
 db 8b 91 90 09 d6 00

"Stronghold Crusader".exe+0000eb32:
// movsx eax,word ptr [ecx+000000E6]
 db 0f bf 81 e6 00 00 00

"Stronghold Crusader".exe+000f19d0:
// mov [esi+01A49BF8],ax
 db 66 89 86 f8 9b a4 01

"Stronghold Crusader".exe+0016b243:
// mov [edi+esi+00000688],ecx
 db 89 8c 37 88 06 00 00

"Stronghold Crusader".exe+0016c027:
// mov edx,[esi+edi+00000688]
 db 8b 94 3e 88 06 00 00

"Stronghold Crusader".exe+0000f88f:
// mov [edi],ecx
// lea eax,[eax+eax*2]
 db 89 0f 8d 04 40

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pPlayer)
unregistersymbol(iEnableMG)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMI)
unregistersymbol(iEnableGM)
unregistersymbol(iMinGold)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Enable/Disable Minimum Gold =&gt;(1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMG</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Enable/Disable Minimum Reputation =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMR</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Enable/Disable Items Control =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMI</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Game Title    : Stronghold Crusader
 Game Version  : 1.1
 Proces Name   : Stronghold Crusader.exe
 Script Version: 1.0
 CE Version    : 6.2
 Release date  : 12-Jun-2012
 Author        : Recifense
 History:
 10-Jun-12: First Release
 Features:
 - Minimum Gold
 - Minimum Reputation
 - Minimum Items
 - God Mode
===========================================
</Comments>
</CheatTable>
