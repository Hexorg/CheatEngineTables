<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>41</ID>
      <Description>"TICK, DRINK JUMP POTION, UNTICK"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
registersymbol(jp_address)
alloc(newmem,2048)
alloc(jp_address, 4)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
sub [esi+08],eax
sbb [esi+0C],edx
mov [jp_address], esi

exit:
jmp returnhere

"TowerClimb_V1_Steam4.exe"+4D8C3:
jmp newmem
nop
returnhere:

aobscan(takejump, 29 46 08 19 56 0C 8B C6 C3)
label(_takejump)
registersymbol(_takejump)

takejump:
_takejump:

[DISABLE]
dealloc(newmem)
"TowerClimb_V1_Steam4.exe"+4D8C3:
sub [esi+08],eax
sbb [esi+0C],edx
//Alt: db 29 46 08 19 56 0C

unregistersymbol(_takejump)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"jump pots"</Description>
      <LastState Value="3" RealAddress="06775468"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>43</ID>
      <Description>"corrosion pots"</Description>
      <LastState Value="3" RealAddress="06775478"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+18</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"revive pots"</Description>
      <LastState Value="1" RealAddress="06775488"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+28</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>46</ID>
      <Description>"teleportation pots"</Description>
      <LastState Value="1" RealAddress="06775498"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+38</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>48</ID>
      <Description>"golden berries"</Description>
      <LastState Value="0" RealAddress="06775418"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]-48</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"ch1 floor (0-20), 2000 for ch2"</Description>
      <LastState Value="0" RealAddress="06775538"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+d8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"ch2 floor (0-25)"</Description>
      <LastState Value="0" RealAddress="06775758"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[jp_address]+2f8</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"Get Item Address (keep ticked and press inventory left/right on each level to update the address)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : TowerClimb_V1_Steam2.exe
  Version: 
  Date   : 2016-01-29
  Author : danbe

  This script does blah blah blah
}

[enable]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
registersymbol(item_address)
alloc(item_address, 4)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
//08746087
//1.Ordinal2+6078
originalcode:
mov [item_address], ecx
mov ecx,[ecx]
xor edx,edx
cmp ecx,[eax]

exit:
jmp returnhere

"1.csx"+6087:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"1.csx"+6087:
mov ecx,[ecx]
xor edx,edx
cmp ecx,[eax]
//Alt: db 8B 09 33 D2 3B 08
unregistersymbol(item_address)

{
// ORIGINAL CODE - INJECTION POINT: "1.csx"+6092

"1.csx"+607D: 33 D2                 -  xor edx,edx
"1.csx"+607F: 3B 08                 -  cmp ecx,[eax]
"1.csx"+6081: 0F 9E C2              -  setle dl
"1.csx"+6084: 8B C2                 -  mov eax,edx
"1.csx"+6086: C3                    -  ret 
"1.csx"+6087: 8B 09                 -  mov ecx,[ecx]
"1.csx"+6089: 33 D2                 -  xor edx,edx
"1.csx"+608B: 3B 08                 -  cmp ecx,[eax]
"1.csx"+608D: 0F 9F C2              -  setg dl
"1.csx"+6090: 8B C2                 -  mov eax,edx
// ---------- INJECTING HERE ----------
"1.csx"+6092: C3                    -  ret 
"1.csx"+6093: 8B 09                 -  mov ecx,[ecx]
"1.csx"+6095: 33 D2                 -  xor edx,edx
// ---------- DONE INJECTING  ----------
"1.csx"+6097: 3B 08                 -  cmp ecx,[eax]
"1.csx"+6099: 0F 9D C2              -  setge dl
"1.csx"+609C: 8B C2                 -  mov eax,edx
"1.csx"+609E: C3                    -  ret 
"1.csx"+609F: 90                    -  nop 
"1.csx"+60A0: 57                    -  push edi
"1.csx"+60A1: 60                    -  pushad 
"1.csx"+60A2: 74 08                 -  je 1.csx+60AC
"1.csx"+60A4: 63 60 74              -  arpl [eax+74],sp
"1.csx"+60A7: 08 6F 60              -  or [edi+60],ch
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>56</ID>
      <Description>"Item (0-60)"</Description>
      <LastState Value="1" RealAddress="0F1F8A44"/>
      <VariableType>4 Bytes</VariableType>
      <Address>[item_address]</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_ch1lvl</Name>
      <Address>0044DA91</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_check_add</Name>
      <Address>02F76087</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
