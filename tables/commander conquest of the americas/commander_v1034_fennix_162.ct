<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="11">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Commander_Conquest_Americas_V1034_fennix_Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Commander - Conquest of the Americas
 Game Version  : 1.034
 Script Version: 1.0
 CE Version    : 6.1
 Money, Warehouse, Colonists, Soldiers, Colony Morale, Building Construction,
 Ship construction, Ship hull, Ship Sail, Ship Crew, Ship Ammo and Marines
 29-Jan-2011 Release for V1.034
 18-Mar-2012 Adapted to fennix version (a CE forumer)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert("Commander.exe"+1c3d02,8b 88 b0 00 00 00)
assert("Commander.exe"+1313d3,83 bd 80 01 00 00)
assert("Commander.exe"+12d2da,8b 82 e4 01 00 00)
assert("Commander.exe"+12d356,8b 88 f8 01 00 00)
assert("Commander.exe"+228e23,8b 32 80 7e 20 00)
assert("Commander.exe"+2c1c37,8b 80 78 01 00 00)
assert("Commander.exe"+2c1ca8,8d 8c 24 5c 02 00 00)
assert("Commander.exe"+0c519b,8b 82 14 01 00 00)
assert("Commander.exe"+0c5495,29 98 18 01 00 00)
assert("Commander.exe"+0c54d2,8b aa 3c 01 00 00)
assert("Commander.exe"+0bacf8,8b 82 3c 01 00 00)
assert("Commander.exe"+1bb24f,89 81 c8 00 00 00)
assert("Commander.exe"+244e2a,29 90 48 01 00 00)
assert("Commander.exe"+0c53ef,8b a9 90 00 00 00)
assert("Commander.exe"+0ae1a6,8b 90 90 00 00 00)
assert("Commander.exe"+1cabd4,8b 82 90 00 00 00)
assert("Commander.exe"+0bc194,80 7c 16 38 00)
assert("Commander.exe"+080e5c,80 7d 38 00 0f 57 c0)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_MonMoney)
label(_BackMM)
label(_ExitMM)
label(_MonWarehouse)
label(_BackMW)
label(_ExitMW)
label(_MonColonists)
label(_BackMC)
label(_ExitMC)
label(_MonC0)
label(_MonColonyMorale)
label(_BackMCM)
label(_ExitMCM)
label(_MonBuildingConstruction)
label(_BackMBC)
label(_ExitMBC)
label(_MonShipConstruction1)
label(_BackMSC1)
label(_MonShipConstruction2)
label(_BackMSC2)
label(_ExitMSC2)
label(_MonSC20)
label(_MonSC21)
label(_MonShipHull)
label(_BackMSH)
label(_ExitMSH)
label(_MonShipSail)
label(_BackMSS)
label(_ExitMSS)
label(_MonShipCrew)
label(_BackMSCw)
label(_ExitMSCw)
label(_MonShipAmmo)
label(_BackMSA)
label(_ExitMSA)
label(_MonShip)
label(_BackMS)
label(_MonShipMarines)
label(_BackMSM)
label(_ExitMSM)
label(_MonShipMarines1)
label(_BackMSM1)
label(_ExitMSM1)
label(_MonShipMarines2)
label(_BackMSM2)
label(_ExitMSM2)
label(_MonShipInCombat)
label(_BackMSI)
label(_ExitMSI)
label(_MonCannons)
label(_BackMCa)
label(_ExitMCa)
label(_MonCannons1)
label(_BackMCa1)
label(_ExitMCa1)
label(pMoney)
label(pItem)
label(pColonists)
label(pCurDate)
label(pShipyard)
label(pShip)
label(iEnableMM)
label(iEnableMW)
label(iEnableMC)
label(iEnableMCM)
label(iEnableMBC)
label(iEnableMSC)
label(iEnableGM)
label(iEnableMA)
label(iOwnerID)

registersymbol(MyCode)
registersymbol(pMoney)
registersymbol(pItem)
registersymbol(pColonists)
registersymbol(pShip)
registersymbol(iEnableMM)
registersymbol(iEnableMW)
registersymbol(iEnableMC)
registersymbol(iEnableMCM)
registersymbol(iEnableMBC)
registersymbol(iEnableMSC)
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iOwnerID)

//=========================================
MyCode:
//========================================= ok fennix
_MonMoney:
 mov [pMoney],eax                  // Save ptr for debugging

 cmp dword ptr [iEnableMM],0
 je _ExitMM                        // Jump if feature is disabled

 mov ecx,#500000                   // Get minimum money value
 cmp ecx,[eax+000000B0]            // Current money &gt;= minimum?
 jle _ExitMM                       // Jump if true

 mov [eax+000000B0],ecx            // Update money

_ExitMM:
 mov ecx,[eax+000000B0]            // Original code (rds money)
 jmp _BackMM                       // Back to main code

//========================================= ok fennix
_MonWarehouse:
 mov [pItem],ebp                   // Save ptr for debugging

 cmp dword ptr [iEnableMW],0
 je _ExitMW                        // Jump if feature is disabled

 mov eax,#101                      // Get minimum item value
 cmp eax,[ebp+00000180]            // Current value &gt;= minimum?
 jle _ExitMW                       // Jump if true

 mov [ebp+00000180],eax            // Update item value

_ExitMW:
 cmp dword ptr [ebp+00000180],00   // Original code (rds item value)
 jmp _BackMW                       // Back to main code

//========================================= ok fennix
_MonColonists:
 mov [pColonists],edx              // Save ptr for debugging

 cmp dword ptr [iEnableMC],0
 je _ExitMC                        // Jump if feature is disabled

 mov eax,#2500                     // Get minimum Colonists
 cmp eax,[edx+000001E4]            // Current value &gt;= minimum?
 jle _MonC0                        // Jump if true

 mov [edx+000001E4],eax            // Update Colonists

_MonC0:
 mov eax,#250                      // Get minimum Soldiers
 cmp eax,[edx+000001E8]            // Current value &gt;= minimum?
 jle _ExitMC                       // Jump if true

 mov [edx+000001E8],eax            // Update Soldiers

_ExitMC:
 mov eax,[edx+000001E4]            // Original code (rds colonists)
 jmp _BackMC                       // Back to main code

//========================================= ok fennix
_MonColonyMorale:
 mov ecx,[eax+000001F8]            // Original code (rds pMorale)

 cmp dword ptr [iEnableMCM],0
 je _ExitMCM                       // Jump if feature is disabled

 cmp dword ptr [ecx+08],(float)80.0 // Current value &gt;= minimum?
 jge _ExitMCM                      // Jump if true

 mov dword ptr [ecx+08],(float)80.0 // Update Morale
 mov dword ptr [ecx+0c],(float)80.0 // Update Morale

_ExitMCM:
 jmp _BackMCM                      // Back to main code

//========================================= ok fennix
_MonBuildingConstruction:
 mov esi,[edx]                     // Original code (rds pBuilding)

 cmp dword ptr [iEnableMBC],0
 je _ExitMBC                       // Jump if feature is disabled

 cmp dword ptr [esi+24],0          // Is it complete?
 je _ExitMBC                       // Jump if true

 mov dword ptr [esi+24],1          // Just one more month

_ExitMBC:
 cmp byte ptr [esi+20],00          // Original code (checks underconstruction)
 jmp _BackMBC                      // Back to main code

//========================================= ok fennix
_MonShipConstruction1:
 mov [pShipyard],ebx

 mov eax,[eax+00000178]            // Original code
 jmp _BackMSC1                     // Back to main code

//========================================= ok fennix
// EBX = #Months
_MonShipConstruction2:
 push eax
 push ebx
 push edi
 push esi

 cmp dword ptr [iEnableMSC],0
 je _ExitMSC2                      // Jump if feature is disabled

 mov esi,[pShipyard]

 dec ebx                           // # of months - 1

 mov ecx,[esi+34]                  // Get currrent year
 mov eax,[esi+30]                  // Get current month

_MonSC20:
 cmp ebx,eax                       // Could it be this year?
 jl _MonSC21                       // Jump if true

 dec ecx                           // Decrease year by 1
 lea eax,[eax+0c]                  // Add 12 months
 jmp _MonSC20

_MonSC21:
 sub eax,ebx                       // Month = Current Month - Remaining Months
 mov [esi+30],eax                  // Update Month of Const Start
 mov [esi+34],ecx                  // Update Year  of Const Start

_ExitMSC2:
 pop esi
 pop edi
 pop ebx
 pop eax

 lea ecx,[esp+0000025C]           // Original code
 jmp _BackMSC2                    // Back to main code

//========================================= ok fennix
_MonShipHull:
 cmp dword ptr [iEnableGM],0
 je _ExitMSH                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSH                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSH                      // Jump if false

 xor ebp,ebp                       // Make value2decrease = 0
 mov [esp+00000080],ebp            // Damage = 0

_ExitMSH:
 mov eax,[edx+00000114]            // Original code (rds HULL HP)
 jmp _BackMSH                      // Back to main code

//========================================= ok fennix
_MonShipSail:
 cmp dword ptr [iEnableGM],0
 je _ExitMSS                       // Jump if feature is disabled

 mov ecx,[edx+0000008c]            // Get pointer to Fleet
 test ecx,ecx
 jz _ExitMSS                       // Jump if invalid pointer

 mov ecx,[ecx+1c]                  // Get ship's owner ID

 cmp ecx,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSS                      // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 mov [esp+18],ebx                  // Sail Damage = 0
 mov [esp+1C],ebx                  // Crew Damage = 0

_ExitMSS:
 sub [eax+00000118],ebx            // Original code (decs SAIL HP)
 jmp _BackMSS                      // Back to main code

//========================================= ok fennix
_MonShipCrew:
 cmp dword ptr [iEnableGM],0
 je _ExitMSCw                      // Jump if feature is disabled

 mov ebp,[ecx+0000008c]            // Get pointer to Fleet
 test ebp,ebp
 jz _ExitMSCw                      // Jump if invalid pointer

 mov ebp,[ebp+1c]                  // Get ship's owner ID

 cmp ebp,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSCw                     // Jump if false

 mov ebp,[edx+00000134]            // Get maximum CREW

 cmp ebp,[edx+0000013C]
 jle _ExitMSCw

 mov [edx+0000013C],ebp            // Update current CREW

_ExitMSCw:
 mov ebp,[edx+0000013C]            // Original code (rds CREW)
 jmp _BackMSCw                     // Back to main code

//========================================= ok fennix
_MonShipAmmo:
 cmp dword ptr [iEnableMA],0
 je _ExitMSA                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSA                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSA                      // Jump if false

 mov eax,[edx+0000019c]            // Get maximum Solid Shot
 mov [edx+000001Ac],eax            // Update current Solid Shot
 mov eax,[edx+000001a0]            // Get maximum Grape Shot
 mov [edx+000001b0],eax            // Update current Grape Shot
 mov eax,[edx+000001a4]            // Get maximum Chain Shot
 mov [edx+000001b4],eax            // Update current Chain Shot

 cmp dword ptr [iEnableGM],0
 je _ExitMSA                       // Jump if feature is disabled

 mov eax,[edx+00000150]            // Get maximum Morale
 mov [edx+0000014c],eax            // Update Morale

 mov dword ptr [ecx+000000b4],0    // Status = OK
 mov dword ptr [ecx+000000b8],0    // Status = OK

 mov eax,[edx+00000134]            // Get Base Crew
 cmp eax,[edx+0000013c]            // Current Crew
 jle _ExitMSA

 mov [edx+0000013c],eax            // Update current crew

_ExitMSA:
 mov eax,[edx+0000013C]            // Original code (rds CREW)
 jmp _BackMSA                      // Back to main code

//========================================= ok fennix
// Selected Ship on Ship Info Screen
_MonShip:
 mov [pShip],eax

 mov [ecx+000000C8],eax            // Original code
 jmp _BackMS                       // Back to main code

//========================================= ok fennix
_MonShipMarines:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSM                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM                      // Jump if false

 xor edx,edx                       // Make value2decrease = 0

_ExitMSM:
 mov eax,[ecx+00000090]            // Gets ptr to shipinfo
 sub [eax+00000148],edx            // Original code (decs Marines)
 jmp _BackMSM                      // Back to main code

//========================================= ok fennix
_MonShipMarines1:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM1                      // Jump if feature is disabled

 mov ebp,[ecx+0000008c]            // Get pointer to Fleet
 test ebp,ebp
 jz _ExitMSM1                      // Jump if invalid pointer

 mov ebp,[ebp+1c]                  // Get ship's owner ID

 cmp ebp,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM1                     // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 mov [esp+00000080],ebx            // Damage = 0
 mov [esp+00000018],ebx            // Damage = 0
 mov [esp+0000001c],ebx            // Damage = 0
 mov [esi+000014d8],ebx            // Status = ok
 mov [esi+000014dc],ebx            // Status = ok

_ExitMSM1:
 mov ebp,[ecx+00000090]            // Gets ptr to shipinfo
 jmp _BackMSM1                     // Back to main code

//========================================= ok fennix
_MonShipMarines2:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM2                      // Jump if feature is disabled

 mov edx,[eax+0000008c]            // Get pointer to Fleet
 test edx,edx
 jz _ExitMSM2                      // Jump if invalid pointer

 mov edx,[edx+1c]                  // Get ship's owner ID

 cmp edx,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM2                     // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 xor edi,edi                       // Make value2decrease = 0
 xor ecx,ecx                       // Make value2decrease = 0

_ExitMSM2:
 mov edx,[eax+00000090]            // Gets ptr to shipinfo
 jmp _BackMSM2                     // Back to main code

//========================================= ok fennix
// Selected Ship in Combat
_MonShipInCombat:
 mov [pShip],edx

 mov eax,[edx+0000008c]            // Get pointer to OwnerID
 test eax,eax
 jz _ExitMSI                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ID
 mov [iOwnerID],eax                // Save ID for further use

_ExitMSI:
 mov eax,[edx+00000090]            // Original code (rds pShipInfo)
 jmp _BackMSI                      // Back to main code

//========================================= ok fennix
_MonCannons:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa                       // Jump if feature is disabled

 mov eax,[ebp+000014a0]            // Get pointer to Ship
 test eax,eax
 jz _ExitMCa                       // Jump if invalid pointer

 mov eax,[eax+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMCa                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMCa                      // Jump if false

 mov al,#100
 mov [edx+esi+38],al               // HP = 100%

_ExitMCa:
 cmp byte ptr [edx+esi+38],00      // Original code (Cannon HP)
 jmp _BackMCa                      // Back to main code

//========================================= ok fennix
_MonCannons1:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa1                      // Jump if feature is disabled

 mov eax,[edi+000014a0]            // Get pointer to Ship
 test eax,eax
 jz _ExitMCa1                      // Jump if invalid pointer

 mov eax,[eax+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMCa1                      // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMCa1                     // Jump if false

 mov al,#100
 mov [ebp+38],al                   // HP = 100%

_ExitMCa1:
 cmp byte ptr [ebp+38],00          // Original code (Cannon HP)
 xorps xmm0,xmm0                   // Original code
 jmp _BackMCa1                     // Back to main code

//=========================================
// Variables
iEnableMM:
 dd 1
iEnableMW:
 dd 1
iEnableMC:
 dd 1
iEnableMCM:
 dd 1
iEnableMBC:
 dd 1
iEnableMSC:
 dd 1
iEnableGM:
 dd 1
iEnableMA:
 dd 1
pMoney:
 dd 0
pItem:
 dd 0
pColonists:
 dd 0
pCurDate:
 dd 0
pShipyard:
 dd 0
pShip:
 dd 0
iOwnerID:
 dd 0

//=========================================
// Hacking Points
//"Commander.exe"+1cba8d:
"Commander.exe"+1c3d02:
 jmp _MonMoney
 nop
_BackMM:

//"Commander.exe"+136a3b:
"Commander.exe"+1313d3:
 jmp _MonWarehouse
 nop
 nop
_BackMW:

//"Commander.exe"+1328c8:
"Commander.exe"+12d2da:
 jmp _MonColonists
 nop
_BackMC:

//"Commander.exe"+132944:
"Commander.exe"+12d356:
 jmp _MonColonyMorale
 nop
_BackMCM:

//"Commander.exe"+231f83:
"Commander.exe"+228e23:
 jmp _MonBuildingConstruction
 nop
_BackMBC:

//"Commander.exe"+2cf6b2:
"Commander.exe"+2c1c37:
 jmp _MonShipConstruction1
 nop
_BackMSC1:

//"Commander.exe"+2cf71f:
"Commander.exe"+2c1ca8:
 jmp _MonShipConstruction2
 nop
 nop
_BackMSC2:

//"Commander.exe"+0c87db:
"Commander.exe"+0c519b:
 jmp _MonShipHull
 nop
_BackMSH:

//"Commander.exe"+0c8af6:
"Commander.exe"+0c5495:
 jmp _MonShipSail
 nop
_BackMSS:

//"Commander.exe"+0c8b33:
"Commander.exe"+0c54d2:
 jmp _MonShipCrew
 nop
_BackMSCw:

//"Commander.exe"+0be098:
"Commander.exe"+0bacf8:
 jmp _MonShipAmmo
 nop
_BackMSA:

//"Commander.exe"+1c2dfb:
"Commander.exe"+1bb24f:
 jmp _MonShip
 nop
_BackMS:

//"Commander.exe"+24ed2a:
"Commander.exe"+244e2a:
 jmp _MonShipMarines
 nop
_BackMSM:

//"Commander.exe"+0c8a4d:
"Commander.exe"+0c53ef:
 jmp _MonShipMarines1
 nop
_BackMSM1:

//"Commander.exe"+0b14bc:
"Commander.exe"+0ae1a6:
 jmp _MonShipMarines2
 nop
_BackMSM2:

//"Commander.exe"+1d2ac1:
"Commander.exe"+1cabd4:
 jmp _MonShipInCombat
 nop
_BackMSI:

//"Commander.exe"+0bf5c4:
"Commander.exe"+0bc194:
 jmp _MonCannons
_BackMCa:

//"Commander.exe"+082ec7:
"Commander.exe"+080e5c:
 jmp _MonCannons1
 nop
 nop
_BackMCa1:

//=========================================
// Original Codes
[DISABLE]
//"Commander.exe"+1cba8d:
"Commander.exe"+1c3d02:
 mov ecx,[eax+000000B0]

//"Commander.exe"+136a3b:
// cmp dword ptr [eax+00000180],00
"Commander.exe"+1313d3:
 cmp dword ptr [ebp+00000180],00

//"Commander.exe"+1328c8:
"Commander.exe"+12d2da:
 mov eax,[edx+000001E4]

//"Commander.exe"+132944:
"Commander.exe"+12d356:
 mov ecx,[eax+000001F8]

//"Commander.exe"+231f83:
"Commander.exe"+228e23:
 mov esi,[edx]
 cmp byte ptr [esi+20],00

//"Commander.exe"+2cf6b2:
"Commander.exe"+2c1c37:
 mov eax,[eax+00000178]

//"Commander.exe"+2cf71f:
// lea ecx,[esp+00000260]
"Commander.exe"+2c1ca8:
 lea ecx,[esp+0000025c]

//"Commander.exe"+0c87db:
"Commander.exe"+0c519b:
 mov eax,[edx+00000114]

//"Commander.exe"+0c8af6:
"Commander.exe"+0c5495:
 sub [eax+00000118],ebx

//"Commander.exe"+0c8b33:
"Commander.exe"+0c54d2:
 mov ebp,[edx+0000013C]

//"Commander.exe"+0be098:
"Commander.exe"+0bacf8:
 mov eax,[edx+0000013C]

//"Commander.exe"+1c2dfb:
"Commander.exe"+1bb24f:
 mov [ecx+000000C8],eax

//"Commander.exe"+24ed2a:
"Commander.exe"+244e2a:
 sub [eax+00000148],edx

//"Commander.exe"+0c8a4d:
"Commander.exe"+0c53ef:
 mov ebp,[ecx+00000090]

//"Commander.exe"+0b14bc:
"Commander.exe"+0ae1a6:
 mov edx,[eax+00000090]

//"Commander.exe"+1d2ac1:
"Commander.exe"+1cabd4:
 mov eax,[edx+00000090]

//"Commander.exe"+0bf5c4:
"Commander.exe"+0bc194:
// cmp byte ptr [esi+edx+38],00
 db 80 7c 16 38 00

//"Commander.exe"+082ec7:
"Commander.exe"+080e5c:
 cmp byte ptr [ebp+38],00
 xorps xmm0,xmm0

unregistersymbol(MyCode)
unregistersymbol(pMoney)
unregistersymbol(pItem)
unregistersymbol(pColonists)
unregistersymbol(pShip)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMW)
unregistersymbol(iEnableMC)
unregistersymbol(iEnableMCM)
unregistersymbol(iEnableMBC)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iOwnerID)

dealloc(MyCode)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable Minimum Money"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable Minimum Items in Warehouse"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMW</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Enable/Disable Minimum Colonists in Colony"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Enable/Disable Minimum Colony Morale"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMCM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Enable/Disable Quick Building Construction"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMBC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Enable/Disable Quick Ship Construction"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMSC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Enable/Disable God Mode"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGM</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Enable/Disable Ship Ammunition"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMA</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Selected Colony Colonists"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pColonists</Address>
          <Offsets>
            <Offset>1E4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Selected Colony Soldiers"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pColonists</Address>
          <Offsets>
            <Offset>1E8</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iYear</Name>
      <Address>04B40186</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMonth</Name>
      <Address>04B4018A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonMoney</Name>
      <Address>005CBA8D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonWarehouse</Name>
      <Address>00536A3B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonColonists</Name>
      <Address>005328C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonColonyMorale</Name>
      <Address>00532944</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonBuildingConstruction</Name>
      <Address>00631F83</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipConstruction1</Name>
      <Address>006CF6B2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipConstruction2</Name>
      <Address>006CF71F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipHull</Name>
      <Address>004C87DB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipSail</Name>
      <Address>004C8AF6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipCrew</Name>
      <Address>004C8B33</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipAmmo</Name>
      <Address>004BE098</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShip</Name>
      <Address>005C2DFB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines</Name>
      <Address>0064ED2A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines1</Name>
      <Address>004C8A4D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines2</Name>
      <Address>004B14BC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipInCombat</Name>
      <Address>005D2AC1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonCannons</Name>
      <Address>004BF5C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonCannons1</Name>
      <Address>00482EC7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMoney</Name>
      <Address>04F00484</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pItem</Name>
      <Address>04F00488</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pColonists</Name>
      <Address>04F0048C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pShip</Name>
      <Address>04F00498</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMM</Name>
      <Address>04F00464</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMW</Name>
      <Address>04F00468</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMC</Name>
      <Address>04F0046C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMCM</Name>
      <Address>04F00470</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMBC</Name>
      <Address>04F00474</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMSC</Name>
      <Address>04F00478</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>04F0047C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMA</Name>
      <Address>04F00480</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOwnerID</Name>
      <Address>04F0049C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Commander - Conquest of the Americas
 Game Version  : 1.034 (fennix)
 Script Version: 1.0
 CE Version    : 6.1
 Money, Warehouse, Colonists, Soldiers, Colony Morale, Building Construction,
 Ship construction, Ship hull, Ship Sail, Ship Crew, Ship Ammo and Marines
 29-Jan-2011 Release for V1.034
 18-Mar-2012 Adapted to fennix version (a CE forumer)
 By Recifense
===========================================
</Comments>
</CheatTable>
