<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>42</ID>
      <Description>"[X] &lt;== Men of War Assault Squad II v3.205.0 Steam Script AOB v4.1"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Men of War: Assault Squad II
 Game Version  : 3.205.0
 Game Sponsor  : Myself
 Process Name  : mowas_2.exe
 Script Version: 4.1 (AOB)
 CE Version    : 6.4
 Release date  : 28-Nov-2015
 Author        : Recifense
 History:
 15-May-14: First Release
 16-May-14: Release for version 3.032.0 (Patch by RLD)
 22-May-14: Fixed Command Points (s2.1)
 26-May-14: Release for version 3.033.0 (Patch by RLD)
 06-Jun-14: Release for version 3.035.0 (Patch by 3DM)
 14-Jun-14: Release for version 3.036.0 (Patch by 3DM)
 23-Jul-14: Release for version 3.037.0 (Patch by 3DM)
 21-Dec-14: Release for version 3.040.0 (Patch by CODEX)
 26-Feb-15: Release for version 3.114.0 (Steam)
 01-Mar-15: Release for version 3.115.0 (Steam)
 06-Mar-15: Release for version 3.116.0 (Steam)
 15-Mar-15: Release for version 3.117.0 (Steam)
 22-Mar-15: Release for version 3.118.0 (Steam)
 24-Mar-15: Release for version 3.119.0 (Steam)
 27-Mar-15: Release for version 3.121.2 (Steam)
 28-Mar-15: Release for version 3.121.3 (Steam) (v3.0)(AOB)
 04-Jun-15: Release for version 3.126.0 (Steam)
 14-Aug-15: Release for version 3.127.5 (Steam)
 19-Sep-15: Release for version 3.201.1 (Steam) (s4.0) (GM was Improved)
 13-Nov-15: Release for version 3.205.0 (Steam)
 28-Nov-15: Added more scripts for helping with MODs (Steam) (4.1)
 Features:
 - God Mode
 - Full Stamina
 - Unlimited Ammo
   - Soldiers (loaded ammo)
   - Tanks (Missiles in Inv)
 - Unlimited Fuel
 - Unlimited Command Points
===========================================
}

//=========================================
// Definitions
define(LUDO,"mowas_2.exe")

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

AOBScanModule(GDMD,mowas_2.exe,f3 0f 11 8e bc 00 00 00 f3 0f 5e 86 b8 00 00 00 f3 0f 11 45 08 ??)
AOBScanModule(MUSA,mowas_2.exe,8b 00 89 47 44 0f 54 05 ?? ?? ?? ?? 0f 2f c8 ?? ?? 8b 47 10 6a 00)
AOBScanModule(MPAO,mowas_2.exe,55 8b ec 8b 45 08 89 41 2c 5d c2 04 00 cc cc cc 57 8b f9 83 7f 30 00)
AOBScanModule(MUFL,mowas_2.exe,89 86 ac 00 00 00 8b 86 bc 00 00 00 6a 00 68 0e 04 00 00 ff 70 0c e8 ?? ?? ?? ?? 83 c4 0c 6a 00)
AOBScanModule(MOCP,mowas_2.exe,c1 e9 02 f6 c1 01 0f 84 ?? ?? ?? ?? a1 ?? ?? ?? ?? 89 45 f4 a1 ?? ?? ?? ?? 68)
AOBScanModule(MTAO,mowas_2.exe,8B 55 08 89 50 24 29 56 24 5e 5d C2 04 00 cc cc cc cc cc ?? ?? ??)
AOBScanModule(GMD2,mowas_2.exe,f6 82 98 00 00 00 02 ?? ?? 8b 01 52 56 ff 50 10 5e 5d c2 04 00 cc)
AOBScanModule(MOSV,mowas_2.exe,f3 0f 10 47 04 83 ec 08 8b cb f3 0f 11 44 24 04 f3 0f 10 47 08 f3)
AOBScanModule(GMD4,mowas_2.exe,88 87 99 00 00 00 8B 01 57 FF 50 04 5f 5e 5b 5d c2 0c 00 cc cc cc cc ??)
AOBScanModule(MUUC,mowas_2.exe,8d 45 c8 50 8d 45 b0 57 50 e8 ?? ?? ?? ?? 8b 75 08 83 c4 08)
AOBScanModule(MOPI,mowas_2.exe,8a 45 ff 83 c4 04 3c 12 ?? ?? 0f b6 d0 c1 e2 07 81 c2 ?? ?? ?? ??)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonUnitStamina)
label(_BackMUS)
label(_ExitMUS)
label(_MonPlayerAmmo)
label(_BackMPA)
label(_ExitMPA)
label(_MonUnitFuel)
label(_BackMUF)
label(_ExitMUF)
label(_MonCommandPoints)
label(_BackMCP)
label(_ExitMCP)
label(_MonTankAmmo)
label(_BackMTA)
label(_ExitMTA)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_MonSelVehicle)
label(_BackMSV)
label(_ExitMSV)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_MonUnitUndercursor)
label(_BackMUU)
label(_ExitMUU)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)

label(iEnableGMD)
label(iEnableMUS)
label(iEnableMPA)
label(iEnableMUF)
label(iEnableMCP)
label(iEnableGMV)
label(iOwnerID)
label(pHero)
label(pPoints)
label(pUnit)
label(pHero2)
label(pHero3)
label(pVehicle)
label(pTest0)
label(pTest1)
label(pCurVal)
label(pMaxVal)
label(pUnitUC)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMUS)
registersymbol(iEnableMPA)
registersymbol(iEnableMUF)
registersymbol(iEnableMCP)
registersymbol(iEnableGMV)
registersymbol(iOwnerID)
registersymbol(pHero)
registersymbol(pPoints)
registersymbol(pUnit)
registersymbol(pHero2)
registersymbol(pHero3)
registersymbol(pVehicle)
registersymbol(pTest0)
registersymbol(pTest1)
registersymbol(pUnitUC)
// AOB
registersymbol(GDMD)
registersymbol(MUSA)
registersymbol(MPAO)
registersymbol(MUFL)
registersymbol(MOCP)
registersymbol(MTAO)
registersymbol(GMD2)
registersymbol(MOSV)
registersymbol(GMD4)
registersymbol(MUUC)
registersymbol(MOPI)

//=========================================
MyCode:
//========================================= 3.205.0
// During Combat
_GodMode:
 pushfd                            // Save EFLAGS
 push eax

 mov [pHero],esi                   // Save pointer for debugging

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[esi+10]
 test eax,eax
 jz _ExitGMD

 movzx eax,byte ptr [eax+000002fc]
 cmp eax,[iOwnerID]
 jne _ExitGMD

 movss xmm1,[esi+000000b8]

_ExitGMD:
 pop eax
 popfd                             // Restore EFLAGS

 movss [esi+000000BC],xmm1         // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 3.205.0
// When updating
_MonUnitStamina:
 push ebx

 mov eax,[eax]                     // Original code

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 mov ebx,[edi+10]
 test ebx,ebx
 jz _ExitMUS

 movzx ebx,byte ptr [ebx+000002fc]
 cmp ebx,[iOwnerID]
 jne _ExitMUS

 mov eax,(float)100.0

_ExitMUS:
 pop ebx

 mov [edi+44],eax                  // Original code
 jmp _BackMUS                      // Back to main code

//========================================= 3.205.0
// When updating
_MonPlayerAmmo:
 push ebp                          // Original code
 mov ebp,esp                       // Original code

 mov eax,[ebp+08]
 test eax,eax
 jz _ExitMPA

 cmp dword ptr [iEnableMPA],0
 je _ExitMPA                       // Jump if feature is disabled

 mov eax,[ecx+18]
 test eax,eax
 jz _ExitMPA

 mov eax,[eax+24]
 test eax,eax
 jz _ExitMPA

 cmp eax,[eax+00000114]
 jne _ExitMPA

 movzx eax,byte ptr [eax+000002fc]
 cmp eax,[iOwnerID]
 jne _ExitMPA

 mov eax,[ecx+20]
 test eax,eax
 jz _ExitMPA

 mov eax,[eax+0000009c]
 dec eax
 cmp eax,[ebp+08]
 js _ExitMPA

 mov [ebp+08],eax

_ExitMPA:
 mov eax,[ebp+08]                  // Original code
 mov [ecx+2C],eax                  // Original code (upd Ammo)
 jmp _BackMPA                      // Back to main code

//========================================= 3.205.0
// When updating
_MonUnitFuel:
 push ebx

 cmp dword ptr [iEnableMUF],0
 je _ExitMUF                       // Jump if feature is disabled

 mov ebx,[esi+0c]                  // Get pMoreInfo
 test ebx,ebx
 jz _ExitMUF

 movzx ebx,byte ptr [ebx+000002fc]
 cmp ebx,[iOwnerID]
 jne _ExitMUF

 mov eax,[esi+000000A8]

 mov [pUnit],esi

_ExitMUF:
 pop ebx

 mov [esi+000000AC],eax            // Original code (upd fuel)
 jmp _BackMUF                      // Back to main code

//========================================= 3.205.0
// Game Screen
_MonCommandPoints:
 push ebx
 push ecx
 push edx

 mov ebx,[pCurVal]
 mov [pTest0],ebx

 mov ecx,[pMaxVal]
 mov [pTest1],ecx

 cmp dword ptr [iEnableMCP],0
 je _ExitMCP                       // Jump if feature is disabled

 lea edx,[ebx+04]
 cmp edx,ecx
 jne _ExitMCP

 mov eax,[ecx]
 mov [ebx],eax

_ExitMCP:
 pop edx
 pop ecx
 pop ebx

 shr ecx,02                        // Original code
 test cl,01                        // Original code
 jmp _BackMCP                      // Back to main code

//========================================= 3.205.0
// When decreasing ammo in Inv
// ESI = Ammo Structure
_MonTankAmmo:
 mov edx,[ebp+08]
 cmp edx,[esi+24]
 je _ExitMTA

 cmp dword ptr [iEnableMPA],0
 je _ExitMTA                       // Jump if feature is disabled

 mov edx,[esi+18]
 test edx,edx
 jz _ExitMTA

 mov edx,[edx+24]
 test edx,edx
 jz _ExitMTA

 movzx edx,byte ptr [edx+000002fc]
 cmp edx,[iOwnerID]
 jne _ExitMTA

 mov edx,[ebp+08]
 add [esi+24],edx

_ExitMTA:
 mov edx,[ebp+08]                  // Original code
 mov [eax+24],edx                  // Original code
 jmp _BackMTA                      // Back to main code

//========================================= 3.205.0
// During Combat
_GodMode2:
 push eax

 mov [pHero2],edx                  // Save pointer for debugging

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 movzx eax,byte ptr [edx+000002fc]
 cmp eax,[iOwnerID]
 jne _ExitGM2

 pop eax

 pop esi
 pop ebp
 ret 0004
//====
_ExitGM2:
 pop eax

 test byte ptr [edx+00000098],02   // Original code
 jmp _BackGM2                      // Back to main code

//========================================= 3.201.0 (changed)
// On Selecting a player's vehicle (For debugging)
_MonSelVehicle:
 mov [pVehicle],eax                // pFuel

_ExitMSV:
 movss xmm0,[edi+04]               // Original code (Get mFuel)
 jmp _BackMSV                      // Back to main code

//========================================= 3.205.0
// During Combat (vehicles)
_GodMode4:
 mov [edi+00000099],al             // Original code
 mov eax,[edi]

 mov [pHero3],eax                  // Save pointer for debugging
 test eax,eax
 jz _ExitGM4

 cmp dword ptr [iEnableGMV],0
 je _ExitGM4                       // Jump if feature is disabled

 cmp eax,[eax+00000120]
 jne _ExitGM4

 test byte ptr [eax+00000098],02
 jz _ExitGM4

 cmp byte ptr [eax+00000098],07
 je _ExitGM4

 movzx eax,byte ptr [eax+000002fc]
 cmp eax,[iOwnerID]
 jne _ExitGM4

 mov eax,[ecx]                     // Original code
 jmp _BackGM4                      // Back to main code
//===
_ExitGM4:
 mov eax,[ecx]                     // Original code
 push edi                          // Original code
 call dword ptr [eax+04]           // Original code
 jmp _BackGM4                      // Back to main code

//========================================= 3.205.0 (new)
// On passing the cursor over the unit (for debugging)
_MonUnitUndercursor:
 mov [pUnitUC],edi                 // pUnitInfo

_ExitMUU:
 lea eax,[ebp-38]                  // Original code
 push eax                          // Original code
 lea eax,[ebp-50]                  // Original code
 jmp _BackMUU                      // Back to main code

//========================================= 3.205.0 (new)
// During match (in order to work with MODs)
_MonPlayerID:
 mov al,[ebp-01]                   // Original code
 add esp,04                        // Original code

 movzx eax,al
 mov [iOwnerID],eax

_ExitMPI:
 jmp _BackMPI                      // Back to main code

//=========================================
 db '======================================&gt;'
 db 'CE6.4 Script by Recifense 112815'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMUS:
 dd 0
iEnableMPA:
 dd 0
iEnableMUF:
 dd 0
iEnableMCP:
 dd 0
iEnableGMV:
 dd 0
iOwnerID:
 dd 0
pHero:
 dd 0
pPoints:
 dd 0
pUnit:
 dd 0
pHero2:
 dd 0
pHero3:
 dd 0
pVehicle:
 dd 0
pTest0:
 dd 0
pTest1:
 dd 0
pUnitUC:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 nop
 nop
 nop
_BackGMD:

MUSA:
 jmp _MonUnitStamina
_BackMUS:

MPAO:
 jmp _MonPlayerAmmo
 nop
 nop
 nop
 nop
_BackMPA:

MUFL:
 jmp _MonUnitFuel
 nop
_BackMUF:

MOCP:
 jmp _MonCommandPoints
 nop
_BackMCP:

MOCP+0d:
pMaxVal:
MOCP+15:
pCurVal:

MTAO:
 jmp _MonTankAmmo
 nop
_BackMTA:

GMD2:
 jmp _GodMode2
 nop
 nop
_BackGM2:

MOSV:
 jmp _MonSelVehicle
_BackMSV:

GMD4:
 jmp _GodMode4
 db 90 90 90 90 90 90 90
_BackGM4:

MUUC:
 jmp _MonUnitUndercursor
 nop
 nop
_BackMUU:

MOPI:
 jmp _MonPlayerID
 nop
_BackMPI:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// movss [esi+000000BC],xmm1
 db f3 0f 11 8e bc 00 00 00

MUSA:
// mov eax,[eax]
// mov [edi+44],eax
 db 8b 00 89 47 44

MPAO:
// push ebp
// mov ebp,esp
// mov eax,[ebp+08]
// mov [ecx+2C],eax
 db 55 8b ec 8b 45 08 89 41 2C

MUFL:
// mov [esi+000000AC],eax
 db 89 86 ac 00 00 00

MOCP:
// shr ecx,02
// test cl,01
 db c1 e9 02 f6 c1 01

MTAO:
// mov edx,[ebp+08]
// mov [eax+24],edx
 db 8b 55 08 89 50 24

GMD2:
// test byte ptr [edx+00000098],02
 db f6 82 98 00 00 00 02

MOSV:
// movss xmm0,[edi+04]
 db f3 0f 10 47 04

GMD4:
// mov [edi+00000099],al
// mov eax,[ecx]
// push edi
// call dword ptr [eax+04]
 db 88 87 99 00 00 00 8b 01 57 ff 50 04

MUUC:
// lea eax,[ebp-38]
// push eax
// lea eax,[ebp-50]
 db 8d 45 c8 50 8d 45 b0

MOPI:
// mov al,[ebp-01]
// add esp,04
 db 8a 45 ff 83 c4 04

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(98).Active=false
getAddressList().getMemoryRecordByID(99).Active=false
getAddressList().getMemoryRecordByID(100).Active=false
getAddressList().getMemoryRecordByID(101).Active=false
getAddressList().getMemoryRecordByID(102).Active=false
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMUS)
unregistersymbol(iEnableMPA)
unregistersymbol(iEnableMUF)
unregistersymbol(iEnableMCP)
unregistersymbol(iEnableGMV)
unregistersymbol(iOwnerID)
unregistersymbol(pHero)
unregistersymbol(pPoints)
unregistersymbol(pUnit)
unregistersymbol(pHero2)
unregistersymbol(pHero3)
unregistersymbol(pVehicle)
unregistersymbol(pTest0)
unregistersymbol(pTest1)
unregistersymbol(pUnitUC)
//AOB
unregistersymbol(GDMD)
unregistersymbol(MUSA)
unregistersymbol(MPAO)
unregistersymbol(MUFL)
unregistersymbol(MOCP)
unregistersymbol(MTAO)
unregistersymbol(GMD2)
unregistersymbol(MOSV)
unregistersymbol(GMD4)
unregistersymbol(MUUC)
unregistersymbol(MOPI)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"[X] &lt;== Unlimited Stamina ---------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(100).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(100).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>101</ID>
          <Description>"[X] &lt;== Unlimited Ammo ------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPA",1)
getAddressList().getMemoryRecordByID(101).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPA",0)
getAddressList().getMemoryRecordByID(101).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"[X] &lt;== Unlimited Fuel ---------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUF",1)
getAddressList().getMemoryRecordByID(102).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUF",0)
getAddressList().getMemoryRecordByID(102).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"[X] &lt;== Unlimited Command Points -------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCP",1)
getAddressList().getMemoryRecordByID(99).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCP",0)
getAddressList().getMemoryRecordByID(99).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Stronger Vehicles ---------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMV",1)
getAddressList().getMemoryRecordByID(229).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMV",0)
getAddressList().getMemoryRecordByID(229).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20151128</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Men of War: Assault Squad II
 Game Version  : 3.205.0
 Game Sponsor  : Myself
 Process Name  : mowas_2.exe
 Script Version: 4.1 (AOB)
 CE Version    : 6.4
 Release date  : 28-Nov-2015
 Author        : Recifense
 History:
 15-May-14: First Release
 16-May-14: Release for version 3.032.0 (Patch by RLD)
 22-May-14: Fixed Command Points (s2.1)
 26-May-14: Release for version 3.033.0 (Patch by RLD)
 06-Jun-14: Release for version 3.035.0 (Patch by 3DM)
 14-Jun-14: Release for version 3.036.0 (Patch by 3DM)
 23-Jul-14: Release for version 3.037.0 (Patch by 3DM)
 21-Dec-14: Release for version 3.040.0 (Patch by CODEX)
 26-Feb-15: Release for version 3.114.0 (Steam)
 01-Mar-15: Release for version 3.115.0 (Steam)
 06-Mar-15: Release for version 3.116.0 (Steam)
 15-Mar-15: Release for version 3.117.0 (Steam)
 22-Mar-15: Release for version 3.118.0 (Steam)
 24-Mar-15: Release for version 3.119.0 (Steam)
 27-Mar-15: Release for version 3.121.2 (Steam)
 28-Mar-15: Release for version 3.121.3 (Steam) (v3.0)(AOB)
 04-Jun-15: Release for version 3.126.0 (Steam)
 14-Aug-15: Release for version 3.127.5 (Steam)
 19-Sep-15: Release for version 3.201.1 (Steam) (s4.0) (GM was Improved)
 13-Nov-15: Release for version 3.205.0 (Steam)
 28-Nov-15: Added more scripts for helping with MODs (Steam) (4.1)
 Features:
 - God Mode                 [1]
 - Full Stamina             [2]
 - Unlimited Ammo           [3]
   - Soldiers (loaded ammo) 
   - Tanks (Missiles in Inv)
 - Unlimited Fuel           [4]
 - Unlimited Command Points [5]
===========================================
[1] For human player's soldiers only;
[2] For human player's soldiers only;
[3] For human player's soldiers and vehicles only;
[4] For human player's vehicles only;
[5] For human player only;
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "mowas_2.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home  = Enable  GM/US/UA/UF cheats;
CTRL+End   = Disable GM/US/UA/UF cheats;
-----------
CTRL+PageUp   = Enable  UCP cheat;
CTRL+PageDown = Disable UCP cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
