<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>74</ID>
      <Description>"No Shadows"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//starbound.Star::MaterialDatabase::radiantLight+E3
aobscanmodule(no_shadow,starbound.exe,F2 0F 11 02 89 42 08 48 8B C2 48)
alloc(newmem,$1000,no_shadow)

label(code)
label(return)

newmem:

code:
  //movsd [rdx],xmm0
  //mov [rdx+08],eax
  mov [rdx+0],(float)1
  mov [rdx+4],(float)1
  mov [rdx+8],(float)1
  jmp return

no_shadow:
  jmp code
  nop
  nop
return:
registersymbol(no_shadow)

[DISABLE]
no_shadow:
  db F2 0F 11 02 89 42 08
unregistersymbol(no_shadow)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "starbound.exe"+5881A3

"starbound.exe"+58816D: F3 0F 10 81 50 01 00 00     -  movss xmm0,[rcx+00000150]
"starbound.exe"+588175: F3 0F 58 42 08              -  addss xmm0,[rdx+08]
"starbound.exe"+58817A: F3 0F 10 91 48 01 00 00     -  movss xmm2,[rcx+00000148]
"starbound.exe"+588182: F3 0F 58 12                 -  addss xmm2,[rdx]
"starbound.exe"+588186: F3 0F 10 89 4C 01 00 00     -  movss xmm1,[rcx+0000014C]
"starbound.exe"+58818E: F3 0F 58 4A 04              -  addss xmm1,[rdx+04]
"starbound.exe"+588193: F3 0F 11 44 24 08           -  movss [rsp+08],xmm0
"starbound.exe"+588199: 8B 44 24 08                 -  mov eax,[rsp+08]
"starbound.exe"+58819D: 0F 28 C2                    -  movaps xmm0,xmm2
"starbound.exe"+5881A0: 0F 14 C1                    -  unpcklps xmm0,xmm1
// ---------- INJECTING HERE ----------
"starbound.exe"+5881A3: F2 0F 11 02                 -  movsd [rdx],xmm0
"starbound.exe"+5881A7: 89 42 08                    -  mov [rdx+08],eax
// ---------- DONE INJECTING  ----------
"starbound.exe"+5881AA: 48 8B C2                    -  mov rax,rdx
"starbound.exe"+5881AD: 48 83 C4 18                 -  add rsp,18
"starbound.exe"+5881B1: C3                          -  ret 
"starbound.exe"+5881B2: CC                          -  int 3 
"starbound.exe"+5881B3: CC                          -  int 3 
"starbound.exe"+5881B4: CC                          -  int 3 
"starbound.exe"+5881B5: CC                          -  int 3 
"starbound.exe"+5881B6: CC                          -  int 3 
"starbound.exe"+5881B7: CC                          -  int 3 
"starbound.exe"+5881B8: CC                          -  int 3 
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>85</ID>
      <Description>"Always Allow Crafting"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//starbound.Star::ItemDatabase::canMakeRecipe+D8
aobscanmodule(always_craft1,starbound.exe,48 3B D8 41 0F 92 C6)
always_craft1:
  db 48 39 C0
registersymbol(always_craft1)

//starbound.Star::CraftingPane::craft+86
aobscanmodule(always_craft2,starbound.exe,75 * 48 8B 8F * * * * 48 85 C9 74 * 0F 57)
always_craft2:
  db EB
registersymbol(always_craft2)

[DISABLE]
always_craft1:
  db 48 3B D8
unregistersymbol(always_craft1)
always_craft2:
  db 75
unregistersymbol(always_craft2)

{
// ORIGINAL CODE - INJECTION POINT: "starbound.exe"+81FEE6

"starbound.exe"+81FEC4: 48 03 CA                          -  add rcx,rdx
"starbound.exe"+81FEC7: 48 8B 01                          -  mov rax,[rcx]
"starbound.exe"+81FECA: FF 50 18                          -  call qword ptr [rax+18]
"starbound.exe"+81FECD: 84 C0                             -  test al,al
"starbound.exe"+81FECF: 0F 85 8B 00 00 00                 -  jne starbound.exe+81FF60
"starbound.exe"+81FED5: 45 8B C7                          -  mov r8d,r15d
"starbound.exe"+81FED8: 48 8D 55 B0                       -  lea rdx,[rbp-50]
"starbound.exe"+81FEDC: 48 8B CF                          -  mov rcx,rdi
"starbound.exe"+81FEDF: E8 DC F6 FF FF                    -  call starbound.exe+81F5C0
"starbound.exe"+81FEE4: 84 C0                             -  test al,al
// ---------- INJECTING HERE ----------
"starbound.exe"+81FEE6: 75 78                             -  jne starbound.exe+81FF60
"starbound.exe"+81FEE8: 48 8B 8F 98 02 00 00              -  mov rcx,[rdi+00000298]
// ---------- DONE INJECTING  ----------
"starbound.exe"+81FEEF: 48 85 C9                          -  test rcx,rcx
"starbound.exe"+81FEF2: 74 08                             -  je starbound.exe+81FEFC
"starbound.exe"+81FEF4: 0F 57 C9                          -  xorps xmm1,xmm1
"starbound.exe"+81FEF7: E8 B4 F1 8D FF                    -  call starbound.exe+FF0B0
"starbound.exe"+81FEFC: C6 87 88 02 00 00 00              -  mov byte ptr [rdi+00000288],00
"starbound.exe"+81FF03: 48 8D 4D 68                       -  lea rcx,[rbp+68]
"starbound.exe"+81FF07: E8 E4 16 7F FF                    -  call starbound.exe+115F0
"starbound.exe"+81FF0C: 48 8B 55 38                       -  mov rdx,[rbp+38]
"starbound.exe"+81FF10: 48 85 D2                          -  test rdx,rdx
"starbound.exe"+81FF13: 74 22                             -  je starbound.exe+81FF37
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>98</ID>
      <Description>"--- h3x1c scripts ---"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>92</ID>
      <Description>"Invincibility"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(playerChecks,starbound.exe,89 43 54 F3 0F 10 43 54 48 83)
alloc(checkMemory,$1000,"starbound.exe"+491CF2)

registersymbol(playerChecks)

label(checkOne)
label(checkTwo)
label(originalCode)
label(return)

checkMemory:

checkOne:
  pushf
  push eax
  mov eax,[rbx+58]
  cmp eax,(float)100
  jne checkTwo
  mov [rbx+54],eax
  pop eax
  popf
  movss xmm0,[rbx+54]
  jmp return

checkTwo:
  cmp eax,(float)70
  jne originalCode
  mov [rbx+54],eax
  pop eax
  popf
  movss xmm0,[rbx+54]
  jmp return

originalCode:
  pop eax
  popf
  mov [rbx+54],eax
  movss xmm0,[rbx+54]
  jmp return

playerChecks:
  jmp checkOne
  nop
  nop
  nop

return:

[DISABLE]

playerChecks:
  db 89 43 54 F3 0F 10 43 54

unregistersymbol(playerChecks)
dealloc(checkMemory)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>93</ID>
      <Description>"fastBreakBlocks"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(fastBreak,starbound.Star::MaterialDatabase::materialDamageParameters+1A)

[ENABLE]
assert(fastBreak,72 11 48 8B CA)
fastBreak:
  db 90 90

[DISABLE]
fastBreak:
  db 72 11
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>94</ID>
      <Description>"infiniteResources"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(itemConsume,starbound.Star::Item::consume)

[ENABLE]
assert(itemConsume,48 8B 41 60)
itemConsume:
  db C3 90 90 90

[DISABLE]
itemConsume:
  db 48 8B 41 60
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>95</ID>
      <Description>"maxItems"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(maxItems,starbound.Star::Item::stackWith+110)

[ENABLE]
assert(maxItems,49 01 76 60 B0 01)
maxItems+2:
  db 56

[DISABLE]
maxItems+2:
  db 76
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>96</ID>
      <Description>"maxMoney"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(maxMoney,starbound.Star::CoinItem::totalValue+9)

[ENABLE]
assert(maxMoney,E8 42 BA BC FF 48 0F AF 83 C8 01 00 00)
maxMoney:
  db 48 B8 7F 96 98 00 00 00 00 00 90 90 90

[DISABLE]
maxMoney:
  db E8 42 BA BC FF 48 0F AF 83 C8 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>97</ID>
      <Description>"keepMoneyOnDeath"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(keepMoney,starbound.Star::PlayerInventory::consumeMoney)

[ENABLE]
assert(keepMoney,48 8B 81 C0 00 00 00)
keepMoney:
  db C3 90 90 90 90 90 90

[DISABLE]
keepMoney:
  db 48 8B 81 C0 00 00 00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>always_craft1</Name>
      <Address> 7FF6A5FBF2D8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>always_craft2</Name>
      <Address> 7FF6A65AFEE6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>no_shadow</Name>
      <Address> 7FF6A63181A3</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
