<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>180</ID>
      <Description>"README (double-click '&lt;script&gt;') ----------------&gt;"</Description>
      <Color>FF00FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
  Cargo Commander (steam 2012-11-04)
  Author: jgoemat

  * Check "SCRIPT: MAIN" to enable editing values and other cheats
  * Check the Ammo box to expand and edit ammo values
  * Double-click values for Caps, Sector Passes and ammos to change them
  * Change values to '1' for EnableAir, EnableGod, EnableInfiniteClip, EnableOneHitKill and EnableFastDrilling to enable individual cheats
  * Enabled cheats depend on checking the box by the following script boxes:
    * 'SCRIPT: Air': For air supply only
    * 'SCRIPT: Clip': For infinite clip/ammo for clip-based guns only
    * 'SCRIPT: Damage':  For God, OneHitKill and FastDrilling

  NOTE: You may need to perform an action before enabling the cheat scripts.
  For example you cannot enable the Damage script until something has taken
  damage, just start drilling through your home container first.  For Clip
  you may need to fire your nailgun.  For Air you may need to actually step
  outside.
}

[ENABLE]
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>151</ID>
      <Description>"SCRIPT: MAIN"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// old one works only after visiting upgrade station:
// define(STATICBYTES,89 85 54 FF FF FF 8b 05 * * * * 8b 80 28 02 00 00)
define(STATICBYTES,83 c4 10 8b 05 * * * * 83 ec 0c 50 e8 * * * * 83 c4 10 85 c0 0f 84)

{------------------------------------------------------------------------------
 - ENABLE section is assembled when cheat table entry is checked
 ------------------------------------------------------------------------------}
[ENABLE]
// find where caps are accessed every frame in upgrade screen
aobscan(aobStatic,STATICBYTES)

// allocate memory
alloc(newmem,$1000)

{------------------------------------------------------------------------------
 - Variables
 ------------------------------------------------------------------------------}
// static set to code address containing static pointer, so first offset is 0
label(EnableAir)
label(EnableGod)
label(EnableInfiniteClip)
label(EnableOneHitKill)
label(EnableFastDrilling)
label(pStaticCode)

registersymbol(EnableAir)
registersymbol(EnableGod)
registersymbol(EnableInfiniteClip)
registersymbol(EnableOneHitKill)
registersymbol(EnableFastDrilling)
registersymbol(pStaticCode)

aobStatic+5:
pStaticCode:

newmem:
// flags for enabling/disabling individual cheats
EnableAir:
  dd 0
EnableGod:
  dd 0
EnableInfiniteClip:
  dd 0
EnableOneHitKill:
  dd 0
EnableFastDrilling:
  dd 0

{------------------------------------------------------------------------------
 - DISABLE section is assembled when cheat table entry is unchecked
 ------------------------------------------------------------------------------}
[DISABLE]

{------------------------------------------------------------------------------
 - Unregister variables and deallocate memory
 ------------------------------------------------------------------------------}
unregistersymbol(EnableAir)
unregistersymbol(EnableGod)
unregistersymbol(EnableInfiniteClip)
unregistersymbol(EnableOneHitKill)
unregistersymbol(EnableFastDrilling)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>138</ID>
          <Description>"Caps"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pStaticCode</Address>
          <Offsets>
            <Offset>228</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>161</ID>
          <Description>"Sector Passes"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pStaticCode</Address>
          <Offsets>
            <Offset>210</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>174</ID>
          <Description>"Ammo"</Description>
          <Options moHideChildren="1"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>175</ID>
              <Description>"Six Shooter"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>14</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>179</ID>
              <Description>"Blastgun"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>178</ID>
              <Description>"Megabomb"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>1C</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>177</ID>
              <Description>"Nailgun"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>20</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>130</ID>
          <Description>"EnableAir"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>EnableAir</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>136</ID>
          <Description>"EnableGod"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>EnableGod</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>135</ID>
          <Description>"EnableInfiniteClip"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>EnableInfiniteClip</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>134</ID>
          <Description>"EnableOneHitKill"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>EnableOneHitKill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>133</ID>
          <Description>"EnableFastDrilling"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>EnableFastDrilling</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>152</ID>
          <Description>"SCRIPT: Air"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(AIRBYTES,d9 5e 64 d9 ee d9 5e 68)

{------------------------------------------------------------------------------
 - ENABLE section is assembled when cheat table entry is checked
 ------------------------------------------------------------------------------}
[ENABLE]
// allocate memory
alloc(newmem,$1000)

{------------------------------------------------------------------------------
 - Variables
 ------------------------------------------------------------------------------}
// static set to code address containing static pointer, so first offset is 0
label(pAir)

registersymbol(pAir)

newmem:
pAir:
  dd 0

{------------------------------------------------------------------------------
 - Code - air
 ------------------------------------------------------------------------------}
aobscan(aobAir,AIRBYTES)
label(C_Air)
label(returnAir)
label(skipAir)
label(I_Air)
registersymbol(I_Air)
C_Air:
  fstp dword ptr [esi+64]
  fldz
  mov [pAir],esi
  cmp [EnableAir],00000000
  je skipAir
  mov [esi+64],7F7FFFFF // very large float, 3.???E38, time that we left the ship

skipAir:
  jmp returnAir

{------------------------------------------------------------------------------
 - Injection - change game code to call our code
 ------------------------------------------------------------------------------}
aobAir:
I_Air:
  jmp C_Air
returnAir:

{------------------------------------------------------------------------------
 - DISABLE section is assembled when cheat table entry is unchecked
 ------------------------------------------------------------------------------}
[DISABLE]

{------------------------------------------------------------------------------
 - Replace jumps with original game code
 ------------------------------------------------------------------------------}
I_Air:
  // fstp dword ptr [esi+64]
  // fldz
  db D9 5E 64 D9 EE
unregistersymbol(I_Air)

{------------------------------------------------------------------------------
 - Unregister variables and deallocate memory
 ------------------------------------------------------------------------------}
unregistersymbol(pAir)

dealloc(newmem)


{ Original code:
078FE7AA - 0FB6 46 60            - movzx eax,byte ptr [esi+60]
078FE7AE - 0FB6 4D 0C            - movzx ecx,byte ptr [ebp+0C]
078FE7B2 - 3B C1                 - cmp eax,ecx
078FE7B4 - 0F84 49000000         - je 078FE803
078FE7BA - 0FB6 45 0C            - movzx eax,byte ptr [ebp+0C]
078FE7BE - 88 46 60              - mov [esi+60],al
078FE7C1 - 0FB6 C0               - movzx eax,al
078FE7C4 - 85 C0                 - test eax,eax
078FE7C6 - 74 0B                 - je 078FE7D3
078FE7C8 - D9 05 D0C66013        - fld dword ptr [1360C6D0] : [7F7FFFFF]
078FE7CE - D9 5E 64              - fstp dword ptr [esi+64]
078FE7D1 - EB 30                 - jmp 078FE803
078FE7D3 - E8 A014FEFF           - call 078DFC78
078FE7D8 - DD 5D F0              - fstp qword ptr [ebp-10]
078FE7DB - D9 46 5C              - fld dword ptr [esi+5C]
078FE7DE - DD 5D E8              - fstp qword ptr [ebp-18]
078FE7E1 - 83 EC 0C              - sub esp,0C
078FE7E4 - 56                    - push esi
078FE7E5 - E8 CEC80300           - call 0793B0B8
078FE7EA - 83 C4 10              - add esp,10
078FE7ED - DD 45 F0              - fld qword ptr [ebp-10]
078FE7F0 - DD 45 E8              - fld qword ptr [ebp-18]
078FE7F3 - D9C9                  - fxch st(1)
078FE7F5 - D9CA                  - fxch st(2)
078FE7F7 - DEC9                  - fmulp st(1),st(0)
078FE7F9 - DEC1                  - faddp
078FE7FB - D9 5E 64              - fstp dword ptr [esi+64] // ------------------ INJECTION
078FE7FE - D9EE                  - fldz
078FE800 - D9 5E 68              - fstp dword ptr [esi+68]
078FE803 - 8D 65 FC              - lea esp,[ebp-04]
078FE806 - 5E                    - pop esi
078FE807 - C9                    - leave
078FE808 - C3                    - ret
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>154</ID>
          <Description>"SCRIPT: Clip"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(CLIPBYTES,89 87 90 00 00 00 EB)

{------------------------------------------------------------------------------
 - ENABLE section is assembled when cheat table entry is checked
 ------------------------------------------------------------------------------}
[ENABLE]
// allocate memory
alloc(newmem,$1000)

{------------------------------------------------------------------------------
 - Variables
 ------------------------------------------------------------------------------}
// static set to code address containing static pointer, so first offset is 0
label(pClip)

registersymbol(pClip)

newmem:
// pointers mostly for debugging
pClip:
  dd 0

{------------------------------------------------------------------------------
 - Code - clip
 ------------------------------------------------------------------------------}
aobscan(aobClip,CLIPBYTES)
label(C_Clip)
label(returnClip)
label(skipClip)
label(I_Clip)
registersymbol(I_Clip)
C_Clip:
  mov [pClip],edi
  cmp [EnableInfiniteClip],00000000
  je skipClip
  inc eax
skipClip:
  mov [edi+00000090],eax
  jmp returnClip

{------------------------------------------------------------------------------
 - Injection - change game code to call our code
 ------------------------------------------------------------------------------}
aobClip:
I_Clip:
  jmp C_Clip
  nop
returnClip:

{------------------------------------------------------------------------------
 - DISABLE section is assembled when cheat table entry is unchecked
 ------------------------------------------------------------------------------}
[DISABLE]

{------------------------------------------------------------------------------
 - Replace jumps with original game code
 ------------------------------------------------------------------------------}
I_Clip:
  mov [edi+00000090],eax
unregistersymbol(I_Clip)

{------------------------------------------------------------------------------
 - Unregister variables and deallocate memory
 ------------------------------------------------------------------------------}
unregistersymbol(pClip)

dealloc(newmem)

{ Original Code:

079324F8 - DDD8                  - fstp st(0)
079324FA - 76 0F                 - jna 0793250B
079324FC - 83 EC 0C              - sub esp,0C
079324FF - 6A 51                 - push 51
07932501 - E8 6A70FFFF           - call 07929570
07932506 - 83 C4 10              - add esp,10
07932509 - EB 17                 - jmp 07932522
0793250B - 8B 47 70              - mov eax,[edi+70]
0793250E - 3D 72010000           - cmp eax,00000172
07932513 - 75 0D                 - jne 07932522
07932515 - 83 EC 0C              - sub esp,0C
07932518 - 6A 54                 - push 54
0793251A - E8 5170FFFF           - call 07929570
0793251F - 83 C4 10              - add esp,10
07932522 - 8B 47 58              - mov eax,[edi+58]
07932525 - 85 C0                 - test eax,eax
07932527 - 7E 0F                 - jle 07932538
07932529 - 8B 87 90000000        - mov eax,[edi+00000090]
0793252F - 48                    - dec eax
07932530 - 89 87 90000000        - mov [edi+00000090],eax //-------------------- INJECTION POINT
07932536 - EB 17                 - jmp 0793254F
07932538 - 8B 47 4C              - mov eax,[edi+4C]
0793253B - 8B 4F 6C              - mov ecx,[edi+6C]
0793253E - 83 EC 04              - sub esp,04
07932541 - 6A 01                 - push 01
07932543 - 51                    - push ecx
07932544 - 50                    - push eax
07932545 - 39 00                 - cmp [eax],eax
07932547 - E8 E4930000           - call 0793B930
0793254C - 83 C4 10              - add esp,10
0793254F - E8 24D7FAFF           - call 078DFC78
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>156</ID>
          <Description>"SCRIPT: Damage"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(DAMAGEBYTES,D9 87 98 00 00 00 DE E9 D9 5F 38)

{------------------------------------------------------------------------------
 - ENABLE section is assembled when cheat table entry is checked
 ------------------------------------------------------------------------------}
[ENABLE]

// allocate memory
alloc(newmem,$1000)

{------------------------------------------------------------------------------
 - Variables
 ------------------------------------------------------------------------------}
// static set to code address containing static pointer, so first offset is 0
label(pDamaged)

registersymbol(pDamaged)

newmem:
pDamaged:
  dd 0

{------------------------------------------------------------------------------
 - Code - damage
 ------------------------------------------------------------------------------}
aobscan(aobDamage,DAMAGEBYTES)
label(C_Damage)
label(returnDamage)
label(skipDamage)
label(I_Damage)
registersymbol(I_Damage)
C_Damage:
  pushad
  pushfd

  mov [pDamaged],edi
  label(isActor)
  cmp [edi+4c],00000000 // flag for inanimate objects
  je isActor

  // ok, it's a wall, see if we are fast drilling
  cmp [EnableFastDrilling],00000001
  jne skipDamage
  mov eax,[edi+30]
  mov [edi+98],eax // will take full damage
  jmp skipDamage

isActor:
  label(isEnemy)
  cmp [edi+48],00000000 // health per apple, seems to be 0000000 for enemies
  je isEnemy

  // ok, it's the player, check for god mode and zero damage taken
  cmp [EnableGod],00000001
  jne skipDamage
  xor eax,eax
  mov [edi+98],eax // zero damage
  mov eax,[edi+30] // load max health
  mov [edi+38],eax // store in current health
  jmp skipDamage

isEnemy:
  // we have an enemy, check for one-hit kill
  cmp [EnableOneHitKill],00000001
  jne skipDamage
  mov eax,[edi+30]
  mov [edi+98],eax // will take full remaining damage
  jmp skipDamage

skipDamage:
  popfd
  popad
  fld dword ptr [edi+00000098]
  jmp returnDamage

{------------------------------------------------------------------------------
 - Injection - change game code to call our code
 ------------------------------------------------------------------------------}
aobDamage:
I_Damage:
  jmp C_Damage
  nop
returnDamage:

{------------------------------------------------------------------------------
 - DISABLE section is assembled when cheat table entry is unchecked
 ------------------------------------------------------------------------------}
[DISABLE]

{------------------------------------------------------------------------------
 - Replace jumps with original game code
 ------------------------------------------------------------------------------}
I_Damage:
  fld dword ptr [edi+00000098]
unregistersymbol(I_Damage)

{------------------------------------------------------------------------------
 - Unregister variables and deallocate memory
 ------------------------------------------------------------------------------}
unregistersymbol(pDamaged)

dealloc(newmem)

{ Original Code:
07938A86 - 89 4C 24 08           - mov [esp+08],ecx
07938A8A - 83 EC 0C              - sub esp,0C
07938A8D - 8B 4D 90              - mov ecx,[ebp-70]
07938A90 - 89 0C 24              - mov [esp],ecx
07938A93 - 8B 4D 94              - mov ecx,[ebp-6C]
07938A96 - 89 4C 24 04           - mov [esp+04],ecx
07938A9A - 8B 4D 98              - mov ecx,[ebp-68]
07938A9D - 89 4C 24 08           - mov [esp+08],ecx
07938AA1 - 50                    - push eax
07938AA2 - E8 C977FCFF           - call 07900270
07938AA7 - 83 C4 1C              - add esp,1C
07938AAA - 8D 86 90000000        - lea eax,[esi+00000090]
07938AB0 - 8B 4D B4              - mov ecx,[ebp-4C]
07938AB3 - 89 08                 - mov [eax],ecx
07938AB5 - 8B 4D B8              - mov ecx,[ebp-48]
07938AB8 - 89 48 04              - mov [eax+04],ecx
07938ABB - 8B 4D BC              - mov ecx,[ebp-44]
07938ABE - 89 48 08              - mov [eax+08],ecx
07938AC1 - D9 47 38              - fld dword ptr [edi+38]
07938AC4 - D9 87 98000000        - fld dword ptr [edi+00000098] //-------------- INJECTION POINT
07938ACA - DEE9                  - fsubp st(1),st(0)
07938ACC - D9 5F 38              - fstp dword ptr [edi+38]
07938ACF - E8 A471FAFF           - call 078DFC78
07938AD4 - D9 47 34              - fld dword ptr [edi+34]
07938AD7 - DEC1                  - faddp
07938AD9 - D9 5F 3C              - fstp dword ptr [edi+3C]
07938ADC - D9 47 50              - fld dword ptr [edi+50]
07938ADF - D9 87 98000000        - fld dword ptr [edi+00000098]
07938AE5 - D9 47 30              - fld dword ptr [edi+30]
07938AE8 - DEF9                  - fdivp st(1),st(0)
07938AEA - D9 45 28              - fld dword ptr [ebp+28]
07938AED - DEC9                  - fmulp st(1),st(0)
07938AEF - DEC1                  - faddp
07938AF1 - D9 5F 50              - fstp dword ptr [edi+50]
07938AF4 - C6 85 33FFFFFF 00     - mov byte ptr [ebp-000000CD],00
07938AFB - D9 47 38              - fld dword ptr [edi+38]
07938AFE - D9EE                  - fldz
07938B00 - DFF1                  - fcomip st(0),st(1)
07938B02 - DDD8                  - fstp st(0)
07938B04 - 0F82 5D000000         - jb 07938B67 : [CargoCommander.exe+5887D9]
07938B0A - BA 38C66013           - mov edx,1360C638 : [130CCB78]
07938B0F - 83 EC 0C              - sub esp,0C
07938B12 - 57                    - push edi
07938B13 - E8 781EF6FF           - call 0789A990
07938B18 - 83 C4 10              - add esp,10
07938B1B - 83 EC 0C              - sub esp,0C
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>155</ID>
          <Description>"(debug)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>153</ID>
              <Description>"pAir"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pAir</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>157</ID>
              <Description>"pClip"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pClip</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>158</ID>
              <Description>"pDamaged"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pDamaged</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>164</ID>
              <Description>"pStaticCode (static pointer in code)"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>165</ID>
              <Description>"pStaticCode"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>168</ID>
              <Description>"pStaticCode - Ammo Struct"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>169</ID>
              <Description>"pStaticCode - Health Struct"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>1A0</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>167</ID>
              <Description>"pStaticCode"</Description>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pStaticCode</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>UtilCopyData</Name>
      <Address>0B260000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UCD_Struct</Name>
      <Address>0B270000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UCD_Addresses</Name>
      <Address>0B271000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UCD_Data</Name>
      <Address>0B280000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UtilCopyData_Enabled</Name>
      <Address>0B26FFFC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UtilCopyData_Count</Name>
      <Address>0B26FFF8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EnableClip</Name>
      <Address>085A0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmoBase</Name>
      <Address>08640000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAmmo</Name>
      <Address>08640004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>I_AmmoBase</Name>
      <Address>079D5831</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pAir</Name>
      <Address>02C10000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>I_Air</Name>
      <Address>078FE7FB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pClip</Name>
      <Address>073E0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>I_Clip</Name>
      <Address>07932530</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDamaged</Name>
      <Address>02BB0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>I_Damage</Name>
      <Address>07938AC4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pStaticCode</Name>
      <Address>078DD706</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
