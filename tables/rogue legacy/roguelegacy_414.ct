<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Enable (can be activated when the level is loaded)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(enableheroAOB,8B 83 18 01 00 00 8B 55 DC 89 42 04)
registersymbol(enableheroAOB)
aobscan(enablecoinAOB,8B 42 28 89 45 EC 83 7D EC 00)
registersymbol(enablecoinAOB)
aobscan(runesequippedreadAOB,0F BE 44 0F 08)
registersymbol(runesequippedreadAOB)

label(pHero)
registersymbol(pHero)
label(pCoin)
registersymbol(pCoin)
label(pRunesEquipped)
registersymbol(pRunesEquipped)
label(fFakeMP)
registersymbol(fFakeMP)
label(iCustomVampireLevel)
registersymbol(iCustomVampireLevel)
label(iCustomCurseLevel)
registersymbol(iCustomCurseLevel)
label(bInfDashActivated)
registersymbol(bInfDashActivated)
label(bVampireLevelActivated)
registersymbol(bVampireLevelActivated)
label(bCurseLevelActivated)
registersymbol(bCurseLevelActivated)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(returnhere6)
label(originalcode6)
label(exit6)

label(newmem11)
label(returnhere11)
label(originalcode11)
label(exit11)
label(checkBVampireLevelActivated11)
label(checkBCurseLevelActivated11)
label(infDashActivated11)
label(vampireLevelActivated11)
label(curseLevelActivated11)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebx+10],0
jne originalcode
mov [pHero],ebx

originalcode:
mov eax,[ebx+00000118]

exit:
jmp returnhere

/*===============================================================*/

newmem2:
mov [pCoin],edx

originalcode2:
mov eax,[edx+28]
mov [ebp-14],eax

exit2:
jmp returnhere2

/*===============================================================*/

newmem6:
mov [pRunesEquipped],edi

originalcode6:
movsx eax,byte ptr [edi+ecx+08]

exit6:
jmp returnhere6

/*===============================================================*/

newmem11:
cmp byte ptr [bInfDashActivated],01
je infDashActivated11

checkBVampireLevelActivated11:
cmp byte ptr [bVampireLevelActivated],01
je vampireLevelActivated11

checkBCurseLevelActivated11:
cmp byte ptr [bCurseLevelActivated],01
je curseLevelActivated11

jmp originalcode11

infDashActivated11:
cmp eax,edx
je originalcode11
cmp edx,01
jne checkBVampireLevelActivated11
cmp esi,0
jne originalcode11
inc esi
jmp originalcode11

vampireLevelActivated11:
cmp eax,edx
je originalcode11
cmp ecx,4
jl checkBCurseLevelActivated11
cmp edx,02
jne checkBCurseLevelActivated11
cmp [iCustomVampireLevel],esi
jl originalcode11
mov esi,[iCustomVampireLevel]
jmp originalcode11

curseLevelActivated11:
cmp eax,edx
je originalcode11
cmp ecx,4
jl originalcode11
cmp edx,08
jne originalcode11
cmp [iCustomCurseLevel],esi
jl originalcode11
mov esi,[iCustomCurseLevel]
jmp originalcode11

originalcode11:
cmp eax,edx
//jne 02D6C077
jne runesequippedreadAOB+10
inc esi

exit11:
jmp returnhere11

///
pHero:
dd 0
pCoin:
dd 0
pRunesEquipped:
dd 0
fFakeMP:
dd (float)100.0
iCustomVampireLevel:
dd 05
iCustomCurseLevel:
dd 05
bInfDashActivated:
db 00
bVampireLevelActivated:
db 00
bCurseLevelActivated:
db 00
///

enableheroAOB: //07D2B9C5:
jmp newmem
nop
returnhere:

enablecoinAOB: //07D2B96A:
jmp newmem2
nop
returnhere2:

runesequippedreadAOB: //08A2C147:
jmp newmem6
returnhere6:

runesequippedreadAOB+5: //02D6C06C:
jmp newmem11
returnhere11:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
enableheroAOB: //07D2B9C5:
db 8B 83 18 01 00 00
//Alt: mov eax,[ebx+00000118]
enablecoinAOB: //07D2B96A:
db 8B 42 28 89 45 EC
//Alt: mov eax,[edx+28]
//Alt: mov [ebp-14],eax
runesequippedreadAOB: //08A2C147:
db 0F BE 44 0F 08
//Alt: movsx eax,byte ptr [edi+ecx+08]
runesequippedreadAOB+5: //02D6C06C:
db 3B C2 75 07 46
//Alt: cmp eax,edx
//Alt: jne 02D6C077
//Alt: inc esi
unregistersymbol(pHero)
unregistersymbol(pCoin)
unregistersymbol(fFakeMP)
unregistersymbol(enableheroAOB)
unregistersymbol(enablecoinAOB)
unregistersymbol(runesequippedreadAOB)
unregistersymbol(pRunesEquipped)
unregistersymbol(iCustomVampireLevel)
unregistersymbol(iCustomCurseLevel)
unregistersymbol(bInfDashActivated)
unregistersymbol(bVampireLevelActivated)
unregistersymbol(bCurseLevelActivated)
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>121</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"Undead (hold P to temp disable)"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(undeadAOB,89 96 18 01 00 00 8b 9e 18 01 00 00)
registersymbol(undeadAOB)

label(pNotHero)
registersymbol(pNotHero)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isPlayer)
label(notPlayer)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [esi+10],0
je isPlayer
jne notPlayer

isPlayer:
cmp edx,1
jge originalcode
pushad
push 'P'      //key P
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je originalcode
mov edx,1
jmp originalcode

notPlayer:
mov [pNotHero],esi
jmp originalcode

originalcode:
mov [esi+00000118],edx

exit:
jmp returnhere

///
pNotHero:
dd 0
///

undeadAOB: //02D14817:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
undeadAOB: //02D14817:
db 89 96 18 01 00 00
//Alt: mov [esi+00000118],edx
unregistersymbol(undeadAOB)
unregistersymbol(pNotHero)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>26</ID>
              <Description>"pNotHero"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pNotHero</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>27</ID>
                  <Description>"HP"</Description>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pNotHero</Address>
                  <Offsets>
                    <Offset>118</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>51</ID>
          <Description>"Invulnerability script"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(invulnerabilityscriptAOB,83 B8 CC 01 00 00 00 7E)
registersymbol(invulnerabilityscriptAOB)

label(bInvulnerabilitySwitch)
registersymbol(bInvulnerabilitySwitch)
label(bInvulnerabilityFlag)
registersymbol(bInvulnerabilityFlag)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(invulnerabilityOn)
label(invulnerabilityOff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],eax
jne originalcode

cmp byte ptr [bInvulnerabilitySwitch],01
je invulnerabilityOn
jne invulnerabilityOff

invulnerabilityOn:
mov byte ptr [bInvulnerabilityFlag],01
mov [eax+000001CC],#1000
jmp originalcode

invulnerabilityOff:
cmp byte ptr [bInvulnerabilityFlag],00
je originalcode
mov byte ptr [bInvulnerabilityFlag],00
mov [eax+000001CC],0
jmp originalcode

originalcode:
cmp dword ptr [eax+000001CC],00

exit:
jmp returnhere

///
bInvulnerabilitySwitch:
db 00
bInvulnerabilityFlag:
db 00
///

invulnerabilityscriptAOB: //08BB8879:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
invulnerabilityscriptAOB: //08BB8879:
db 83 B8 CC 01 00 00 00
//Alt: cmp dword ptr [eax+000001CC],00
unregistersymbol(invulnerabilityscriptAOB)
unregistersymbol(bInvulnerabilitySwitch)
unregistersymbol(bInvulnerabilityFlag)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>52</ID>
              <Description>"Invulnerability Switch (Alt+:ON, Alt-:OFF)"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInvulnerabilitySwitch:
db 01

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInvulnerabilitySwitch:
db 00
</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Activate</Action>
                  <Keys>
                    <Key>18</Key>
                    <Key>107</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Deactivate</Action>
                  <Keys>
                    <Key>18</Key>
                    <Key>109</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>56</ID>
          <Description>"No Stun (can be activated after you get hit by something once)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,C7 83 28 01 00 00 03 00 00 00 8B CB)
registersymbol(nostunAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],ebx
jne exit
fld dword ptr [ebx+244]
mov dword ptr [ebx+000001CC],(float)1000.00
fmul dword ptr [ebx+000001CC]
mov dword ptr [ebx+000001CC],(float)100.00
fadd dword ptr [ebx+000001CC]
fistp dword ptr [ebx+000001CC]
jmp exit

originalcode:
mov [ebx+00000128],00000003

exit:
jmp returnhere

nostunAOB: //14650567:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB: //14650567:
db C7 83 28 01 00 00 03 00 00 00
//Alt: mov [ebx+00000128],00000003
unregistersymbol(nostunAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Inf. MP"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infmpAOB,D9 45 08 D9 9E A0 01 00 00 D9 86 A0 01 00 00)
registersymbol(infmpAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],ecx
jne originalcode

mov esi,[ebp+8]
cmp dword ptr [ecx+000001A0],esi
jle originalcode
mov esi,[ecx+000001A0]
mov [ebp+8],esi

originalcode:
mov esi,ecx //
fld dword ptr [ebp+08]
fstp dword ptr [esi+000001A0]

exit:
jmp returnhere

infmpAOB: //02D14C47:
jmp newmem
nop
nop
nop
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infmpAOB: //02D14C47:
db D9 45 08 D9 9E A0 01 00 00
//Alt: fld dword ptr [ebp+08]
//Alt: fstp dword ptr [esi+000001A0]
unregistersymbol(infmpAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Instant Spell Cooldown (can be activated after using spell once)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(instantspellcooldownAOB,C7 80 28 02 00 00 00 00 00 3F)
registersymbol(instantspellcooldownAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],eax
jne originalcode
mov [eax+00000228],0
jmp exit

originalcode:
mov [eax+00000228],3F000000

exit:
jmp returnhere

instantspellcooldownAOB: //0FC04243:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
instantspellcooldownAOB: //0FC04243:
db C7 80 28 02 00 00 00 00 00 3F
//Alt: mov [eax+00000228],3F000000
unregistersymbol(instantspellcooldownAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"Instant Replacement Cool Down (can be activated after using Replacement once)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(instantspecialcooldownAOB,C7 86 24 02 00 00 00 00 00 3F 8B 86 F8 00 00 00)
registersymbol(instantspecialcooldownAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],esi
jne originalcode
mov [esi+00000224],0
jmp exit

originalcode:
mov [esi+00000224],3F000000

exit:
jmp returnhere

instantspecialcooldownAOB: //07B8E867:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
instantspecialcooldownAOB: //07B8E867:
db C7 86 24 02 00 00 00 00 00 3F
//Alt: mov [esi+00000224],3F000000
unregistersymbol(instantspecialcooldownAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Inf. Dash"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infdashAOB,0F B6 83 8B 02 00 00 89 85 ** ** ** ** 8B CB)
registersymbol(infdashAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,#30000
jmp originalcode

originalcode:
cmp eax,[ebp-00000088]

exit:
jmp returnhere

infdashAOB+15: //0D55127D:
jmp newmem
nop
returnhere:

bInfDashActivated:
db 01




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infdashAOB+15: //0D55127D:
db 3B 85 78 FF FF FF
//Alt: cmp eax,[ebp-00000088]
bInfDashActivated:
db 00
unregistersymbol(infdashAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Continuous Dash"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(dashingtimecheckAOB,83 BE E8 01 00 00 00)
registersymbol(dashingtimecheckAOB)

label(bAlternateDashSwitch)
registersymbol(bAlternateDashSwitch)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(checkL)
label(checkR)
label(doDash)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [bAlternateDashSwitch],01
je checkL
cmp dword ptr [esi+000001E8],00
jg originalcode

checkL:
pushad
push 'Q'      //key Q
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je doDash

checkR:
pushad
push 'E'      //key E
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je doDash
cmp byte ptr [bAlternateDashSwitch],01
jne originalcode
mov dword ptr [esi+000001E8],00
mov dword ptr [esi+000001EC],00
jmp originalcode

doDash:
mov dword ptr [esi+000001E8],0A
mov dword ptr [esi+000001EC],0A

originalcode:
cmp dword ptr [esi+000001E8],00

exit:
jmp returnhere

///
bAlternateDashSwitch:
dd 00
///

dashingtimecheckAOB: //07D2B02D:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dashingtimecheckAOB: //07D2B02D:
db 83 BE E8 01 00 00 00
//Alt: cmp dword ptr [esi+000001E8],00
unregistersymbol(dashingtimecheckAOB)
unregistersymbol(bAlternateDashSwitch)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>101</ID>
              <Description>"Alternate Dash (Dash stop immediately when you release the Dash button)"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bAlternateDashSwitch:
db 01

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bAlternateDashSwitch:
db 00
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>46</ID>
          <Description>"Inf. Double Jump (hold Down Arrow to temp disable Double Jump)"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infdoublejumpAOB,0F B6 83 8A 02 00 00 89 85 74 FF FF FF)
registersymbol(infdoublejumpAOB)

label(bAlternateDoubleJumpSwitch)
registersymbol(bAlternateDoubleJumpSwitch)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(doAltDoubleJump)
label(setZeroMaxJump)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [bAlternateDoubleJumpSwitch],01
je doAltDoubleJump

pushad
push 28      //key Arrow Down
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je setZeroMaxJump
mov eax,#30000
jmp originalcode

doAltDoubleJump:
pushad
push 26      //key Arrow Up
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne setZeroMaxJump
mov eax,#30000
jmp originalcode

setZeroMaxJump:
mov eax,0
jmp originalcode

originalcode:
cmp eax,[ebp-0000008C]

exit:
jmp returnhere

///
bAlternateDoubleJumpSwitch:
db 00
///

infdoublejumpAOB+15: //07960BF2:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infdoublejumpAOB+15: //07960BF2:
db 3B 85 74 FF FF FF
//Alt: cmp eax,[ebp-0000008C]
unregistersymbol(infdoublejumpAOB)
unregistersymbol(bAlternateDoubleJumpSwitch)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>97</ID>
              <Description>"Alternate Double Jump (hold Up Arrow + Jump to double jump)"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bAlternateDoubleJumpSwitch:
db 01

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bAlternateDoubleJumpSwitch:
db 00
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"Inf. Fly (press R to fly)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(setlandAOB,88 90 88 02 00 00 88 90 DF 00 00 00)
registersymbol(setlandAOB)
aobscan(flyreadycheckAOB,80 BB 88 02 00 00 00)
registersymbol(flyreadycheckAOB)
aobscan(infflyAOB,D8 A8 BC 01 00 00 D9 98 BC 01 00 00)
registersymbol(infflyAOB)

label(voidFlyTimer)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 'R'      //key R
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
mov dl,01
cmp dword ptr [eax+000001BC],(float)0.0
jl originalcode
mov dword ptr [eax+000001BC],(float)0.6

originalcode:
mov [eax+00000288],dl

exit:
jmp returnhere

/*==========================================*/

newmem2:
pushad
push 'R'      //key R
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode2
mov byte ptr [ebx+00000288],01
mov byte ptr [ebx+000000DF],01
cmp dword ptr [ebx+000001BC],(float)0.0
jl originalcode
mov dword ptr [ebx+000001BC],(float)0.6

originalcode2:
cmp byte ptr [ebx+00000288],00

exit2:
jmp returnhere2

newmem6:
cmp [pHero],eax
jne originalcode6
fstp dword ptr [voidFlyTimer]
jmp exit6

originalcode6:
fstp dword ptr [eax+000001BC]

exit6:
jmp returnhere6

///
voidFlyTimer:
dd 0
///

setlandAOB: //08CAD6AF:
jmp newmem
nop
returnhere:

flyreadycheckAOB: //0D560271:
jmp newmem2
nop
nop
returnhere2:

infflyAOB+6: //07D2AC8F:
jmp newmem6
nop
returnhere6:

/*==========================================*/


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
setlandAOB: //08CAD6AF:
db 88 90 88 02 00 00
//Alt: mov [eax+00000288],dl
flyreadycheckAOB: //0D560271:
db 80 BB 88 02 00 00 00
//Alt: cmp byte ptr [ebx+00000288],00
infflyAOB+6: //07D2AC8F:
db D9 98 BC 01 00 00
//Alt: fstp dword ptr [eax+000001BC]
unregistersymbol(setlandAOB)
unregistersymbol(flyreadycheckAOB)
unregistersymbol(infflyAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Enemy Invulnerable Timer script (can be activated after hiting something once)"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(invtimerAOB,D9 9B CC 01 00 00 80 BE 4B 01 00 00 00)
registersymbol(invtimerAOB)

label(bSetEnemyVulnerable)
registersymbol(bSetEnemyVulnerable)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isPlayer)
label(isNotPlayer)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+000001CC]
cmp [pHero],ebx
je isPlayer
jne isNotPlayer

isPlayer:
jmp originalcode

isNotPlayer:
cmp byte ptr [bSetEnemyVulnerable],01
jne originalcode
mov [ebx+000001CC],0
jmp originalcode

originalcode:
//fstp dword ptr [ebx+000001CC]

exit:
jmp returnhere

///
bSetEnemyVulnerable:
db 01
///

invtimerAOB: //0FBD619C:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
invtimerAOB: //0FBD619C:
db D9 9B CC 01 00 00
//Alt: fstp dword ptr [ebx+000001CC]
unregistersymbol(invtimerAOB)
unregistersymbol(bSetEnemyVulnerable)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>30</ID>
              <Description>"bSetEnemyVulnerable"</Description>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>bSetEnemyVulnerable</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>137</ID>
          <Description>"Vampire Rune Level Customization"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bVampireLevelActivated:
db 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bVampireLevelActivated:
db 00
iCustomVampireLevel:
dd 05
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>138</ID>
              <Description>"Custom Vampire Rune Level"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iCustomVampireLevel</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>139</ID>
          <Description>"Curse Rune Level Customization"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bCurseLevelActivated:
db 01


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bCurseLevelActivated:
db 00
iCustomCurseLevel:
dd 05
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Custom Curse Rune Level"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iCustomCurseLevel</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"[Pointers]"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1</ID>
              <Description>"HP"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>118</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>32</ID>
                  <Description>"max (Base)"</Description>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>238</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"MP"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>pHero</Address>
              <Offsets>
                <Offset>1A0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>31</ID>
                  <Description>"max (Base)"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>234</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"$"</Description>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCoin</Address>
              <Offsets>
                <Offset>28</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>25</ID>
                  <Description>"enable if $ showing wrong value in Manor"</Description>
                  <Color>80000008</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(enablecoinmanorAOB,8B 7A 28 8B CE E8)
registersymbol(enablecoinmanorAOB)

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

/*===============================================================*/

newmem6:
mov [pCoin],edx

originalcode6:
mov edi,[edx+28]
mov ecx,esi

exit6:
jmp returnhere6

enablecoinmanorAOB: //0FDD4091:
jmp newmem6
returnhere6:

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
enablecoinmanorAOB: //0FDD4091:
db 8B 7A 28 8B CE
//Alt: mov edi,[edx+28]
//Alt: mov ecx,esi
unregistersymbol(enablecoinmanorAOB)
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>124</ID>
              <Description>"[Equipment]"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(eqipmentequippedreadAOB,0F BE 44 33 08)
registersymbol(eqipmentequippedreadAOB)

label(pEquipmentEquipped)
registersymbol(pEquipmentEquipped)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pEquipmentEquipped],ebx

originalcode:
movsx eax,byte ptr [ebx+esi+08]

exit:
jmp returnhere

///
pEquipmentEquipped:
dd 0
///

eqipmentequippedreadAOB: //085F3C32:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
eqipmentequippedreadAOB: //085F3C32:
db 0F BE 44 33 08
//Alt: movsx eax,byte ptr [ebx+esi+08]
unregistersymbol(pEquipmentEquipped)
unregistersymbol(eqipmentequippedreadAOB)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>125</ID>
                  <Description>"Sword"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pEquipmentEquipped</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>126</ID>
                  <Description>"Helm"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pEquipmentEquipped</Address>
                  <Offsets>
                    <Offset>9</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"Chest"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pEquipmentEquipped</Address>
                  <Offsets>
                    <Offset>A</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>128</ID>
                  <Description>"Leg"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pEquipmentEquipped</Address>
                  <Offsets>
                    <Offset>B</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>129</ID>
                  <Description>"Cape"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pEquipmentEquipped</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>136</ID>
              <Description>"[Runes]"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"Sword"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pRunesEquipped</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>119</ID>
                  <Description>"Helm"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pRunesEquipped</Address>
                  <Offsets>
                    <Offset>9</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>120</ID>
                  <Description>"Chest"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pRunesEquipped</Address>
                  <Offsets>
                    <Offset>A</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>121</ID>
                  <Description>"Leg"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pRunesEquipped</Address>
                  <Offsets>
                    <Offset>B</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>122</ID>
                  <Description>"Cape"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pRunesEquipped</Address>
                  <Offsets>
                    <Offset>C</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"[Spell] (can be activated after using spell once)"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(spelltypereadoncastAOB,0F B6 50 6F 89 55 D8 33 D2)
registersymbol(spelltypereadoncastAOB)

label(pSpellType)
registersymbol(pSpellType)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSpellType],eax

originalcode:
movzx edx,byte ptr [eax+6F]
mov [ebp-28],edx

exit:
jmp returnhere

///
pSpellType:
dd 0
///

spelltypereadoncastAOB: //07C500A8:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
spelltypereadoncastAOB: //07C500A8:
db 0F B6 50 6F 89 55 D8
//Alt: movzx edx,byte ptr [eax+6F]
//Alt: mov [ebp-28],edx
unregistersymbol(spelltypereadoncastAOB)
unregistersymbol(pSpellType)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>84</ID>
                  <Description>"Spell Type (cast a spell once to grab the address)"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pSpellType</Address>
                  <Offsets>
                    <Offset>6F</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>143</ID>
              <Description>"[Special Item]"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(specialitemcheckAOB,80 78 71 06)
registersymbol(specialitemcheckAOB)

label(pSpecialItem)
registersymbol(pSpecialItem)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pSpecialItem],eax

originalcode:
cmp byte ptr [eax+71],06
jne specialitemcheckAOB+a5 //08C4080C

exit:
jmp returnhere

///
pSpecialItem:
dd 0
///

specialitemcheckAOB: //08C40767:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
specialitemcheckAOB: //08C40767:
db 80 78 71 06 0F 85 9B 00 00 00
//Alt: cmp byte ptr [eax+71],06
//Alt: jne 08C4080C
unregistersymbol(specialitemcheckAOB)
unregistersymbol(pSpecialItem)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>144</ID>
                  <Description>"Special Item Type"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pSpecialItem</Address>
                  <Offsets>
                    <Offset>71</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>115</ID>
              <Description>"[Misc.]"</Description>
              <Options moHideChildren="1"/>
              <Color>80000008</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>64</ID>
                  <Description>"Invulerable time level ?"</Description>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>244</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>113</ID>
                  <Description>"+89"</Description>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>89</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>85</ID>
                  <Description>"+12d"</Description>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>12D</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>106</ID>
                  <Description>"+1cc"</Description>
                  <Color>80000008</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>1CC</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>96</ID>
                  <Description>"+ac (attack speed?)"</Description>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>pHero</Address>
                  <Offsets>
                    <Offset>AC</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"[old / testing]"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>00209C2C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>01CDB4D0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>00EA0698</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>00EA06C4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>00EA06C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>16</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00EA0767</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00EA0768</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>00EA0704</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Inf. Magic"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infmagicAOB,0F 84 ** ** ** ** E9 ** ** ** ** 8B 85 ** ** ** ** D9 80 A0 01 00 00)
registersymbol(infmagicAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fld dword ptr [fFakeMP]
jmp exit

originalcode:
fld dword ptr [eax+000001A0]

exit:
jmp returnhere

infmagicAOB+11: //0FC0468C:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infmagicAOB+11: //0FC0468C:
db D9 80 A0 01 00 00
//Alt: fld dword ptr [eax+000001A0]
unregistersymbol(infmagicAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Inf. Special Magic"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(specialmagiccheckzeroAOB,D9 83 A0 01 00 00 D9 EE)
registersymbol(specialmagiccheckzeroAOB)
aobscan(specialmagiccheckusageAOB,D9 86 A0 01 00 00 D9 05 ** ** ** ** DF F1)
registersymbol(specialmagiccheckusageAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fld dword ptr [fFakeMP]
jmp exit

originalcode:
fld dword ptr [ebx+000001A0]

exit:
jmp returnhere

/*============================================*/

newmem2:
fld dword ptr [fFakeMP]
jmp exit2

originalcode2:
fld dword ptr [esi+000001A0]

exit2:
jmp returnhere2

specialmagiccheckzeroAOB: //07D0B13D:
jmp newmem
nop
returnhere:

specialmagiccheckusageAOB: //0FFDDDDB:
jmp newmem2
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
specialmagiccheckzeroAOB: //07D0B13D:
db D9 83 A0 01 00 00
//Alt: fld dword ptr [ebx+000001A0]
specialmagiccheckusageAOB: //0FFDDDDB:
db D9 86 A0 01 00 00
//Alt: fld dword ptr [esi+000001A0]
unregistersymbol(specialmagiccheckzeroAOB)
unregistersymbol(specialmagiccheckusageAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>13C5538C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>146B4D14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E511</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E478</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E506</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E514</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E518</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E51C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>00E9E644</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>42</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isPlayer)
label(isNotPlayer)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+000001E0]
cmp [pHero],ebx
je isPlayer
jne isNotPlayer

isPlayer:
mov [ebx+000001E0],0
jmp originalcode

isNotPlayer:
jmp originalcode

originalcode:
//fstp dword ptr [ebx+000001E0]

exit:
jmp returnhere

02D789AC:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
02D789AC:
db D9 98 E0 01 00 00
//Alt: fstp dword ptr [eax+000001E0]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(isPlayer)
label(isNotPlayer)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+000001E0]
cmp [pHero],ebx
je isPlayer
jne isNotPlayer

isPlayer:
mov [ebx+000001E0],0
jmp originalcode

isNotPlayer:
jmp originalcode

originalcode:
//fstp dword ptr [ebx+000001E0]

exit:
jmp returnhere

07B6109A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
07B6109A:
db D9 9B E0 01 00 00
//Alt: fstp dword ptr [ebx+000001E0]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>43</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>00E9E688</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>45</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E6EE</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>47</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E6F3</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [edx+0000028F],00
jmp exit

originalcode:
mov [edx+0000028F],al

exit:
jmp returnhere

08BBDC3D:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08BBDC3D:
db 88 82 8F 02 00 00
//Alt: mov [edx+0000028F],al
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E6EF</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>00E9E630</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>53</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E591</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E58C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
0FD443EB:
db 90 90 90 90 90 90 90 90 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
0FD443EB:
db C7 83 28 01 00 00 03 00 00 00
//Alt: mov [ebx+00000128],00000003
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>57</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
08BBE53B:
db 90 90

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
08BBE53B:
db EB 16
//Alt: jmp 08BBE553
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>58</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pHero</Address>
          <Offsets>
            <Offset>128</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
jmp 08BBE553

originalcode:
je 08BBE553
mov eax,[ebp-00000248]

exit:
jmp returnhere

08BBE4E7:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08BBE4E7:
db 74 6A 8B 85 B8 FD FF FF
//Alt: je 08BBE553
//Alt: mov eax,[ebp-00000248]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>60</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
08BBE52C:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
08BBE52C:
db 74 18
//Alt: je 08BBE546
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
08BBE51C:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
08BBE51C:
db 75 28
//Alt: jne 08BBE546
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
08BBE50C:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
08BBE50C:
db 73 38
//Alt: jae 08BBE546
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
08BBE50A:
db 90 90


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
08BBE50A:
db 7A 3A
//Alt: jp 08BBE546
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>65</ID>
          <Description>"No Stun (prevent small jump)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,C6 82 2D 01 00 00 00)
registersymbol(nostunAOB)

nostunAOB+6: //08BBDC49:
db 01



[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB+6: //08BBDC49:
db 00
//Alt: 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>82</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>136660CB</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>66</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>13899A14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>67</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19A4C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>68</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19A84</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>69</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19ABC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19AF4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19B2C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19B64</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>73</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>01D19B9C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>74</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>136660C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>75</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>13899994</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>76</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>138999B8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>77</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>138999C8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>78</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>138999CC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>79</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>13899A08</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>80</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>13899A0C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>13899A14</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>86</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E478</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>87</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E506</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E514</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E518</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E51C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E511</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E510</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [eax+000000AC],01
jmp exit

originalcode:
mov byte ptr [eax+000000AC],00

exit:
jmp returnhere

02D05888:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
02D05888:
db C6 80 AC 00 00 00 00
//Alt: mov byte ptr [eax+000000AC],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>94</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [ecx+000000AC],01
jmp exit

originalcode:
mov byte ptr [ecx+000000AC],00

exit:
jmp returnhere

07A2C7D5:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
07A2C7D5:
db C6 81 AC 00 00 00 00
//Alt: mov byte ptr [ecx+000000AC],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>95</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [eax+000000AC],00

originalcode:
cmp byte ptr [eax+000000AC],00

exit:
jmp returnhere

07975164:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
07975164:
db 80 B8 AC 00 00 00 00
//Alt: cmp byte ptr [eax+000000AC],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E6EC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>100</ID>
          <Description>"Inf. Fly (old1)"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infflyAOB,D8 A8 BC 01 00 00 D9 98 BC 01 00 00)
registersymbol(infflyAOB)

label(voidFlyTimer)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],eax
jne originalcode
fstp dword ptr [voidFlyTimer]
jmp exit

originalcode:
fstp dword ptr [eax+000001BC]

exit:
jmp returnhere

///
voidFlyTimer:
dd 0
///

infflyAOB+6: //07D2AC8F:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infflyAOB+6: //07D2AC8F:
db D9 98 BC 01 00 00
//Alt: fstp dword ptr [eax+000001BC]
unregistersymbol(infflyAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>102</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>00E9E620</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>103</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E9E58C</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>104</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,C7 83 28 01 00 00 03 00 00 00 8B CB)
registersymbol(nostunAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],ebx
jne exit
fld dword ptr [ebx+244]
mov dword ptr [ebx+000001CC],(float)1000.00
fmul dword ptr [ebx+000001CC]
mov dword ptr [ebx+000001CC],(float)100.00
fadd dword ptr [ebx+000001CC]
fistp dword ptr [ebx+000001CC]
jmp exit

originalcode:
mov [ebx+00000128],00000003

exit:
jmp returnhere

nostunAOB: //14650567:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB: //14650567:
db C7 83 28 01 00 00 03 00 00 00
//Alt: mov [ebx+00000128],00000003
unregistersymbol(nostunAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>105</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr [eax+00000128],FF

originalcode:
//cmp dword ptr [eax+00000128],03

exit:
jmp returnhere

08CCB61B:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08CCB61B:
db 83 B8 28 01 00 00 03
//Alt: cmp dword ptr [eax+00000128],03
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp dword ptr [eax+00000128],FF

exit:
jmp returnhere

08CCD606:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08CCD606:
db 83 B8 28 01 00 00 03
//Alt: cmp dword ptr [eax+00000128],03
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>108</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp dword ptr [eax+00000128],FF

exit:
jmp returnhere

08CC7420:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08CC7420:
db 83 B8 28 01 00 00 03
//Alt: cmp dword ptr [eax+00000128],03
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"No Stun"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,C6 82 2D 01 00 00 00)
registersymbol(nostunAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(cancelStun)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],edx
jne originalcode

pushad
push 28      //key Arrow Down
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je originalcode

cmp [edx+df],1
je originalcode
/*pushad
push 10      //key Shift
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun*/
pushad
push 26      //key Arrow Up
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
/*pushad
push 25      //key Arrow Left
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
pushad
push 27      //key Arrow Right
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
pushad
push 'D'      //key D
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
pushad
push 'A'      //key A
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
pushad
push 'W'      //key W
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun*/
pushad
push 'Q'      //key Q
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
pushad
push 'E'      //key E
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je cancelStun
jmp originalcode

cancelStun:
mov byte ptr [edx+0000012D],01
jmp exit

originalcode:
mov byte ptr [edx+0000012D],00

exit:
jmp returnhere

nostunAOB: //08BA72B3:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB: //08BA72B3:
db C6 82 2D 01 00 00 00
//Alt: mov byte ptr [edx+0000012D],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>110</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,83 B8 28 01 00 00 03 ** ** ** ** ** ** 8B 0D)
registersymbol(nostunAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+00000128],FF

originalcode:
//cmp dword ptr [eax+00000128],03

exit:
jmp returnhere

nostunAOB: //08CC7420:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB: //08CC7420:
db 83 B8 28 01 00 00 03
//Alt: cmp dword ptr [eax+00000128],03
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nostunAOB,83 BE 28 01 00 00 03 74)
registersymbol(nostunAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pHero],esi
jne originalcode
cmp dword ptr [esi+00000128],FF

originalcode:
//cmp dword ptr [esi+00000128],03

exit:
jmp returnhere

nostunAOB: //08CC98D2:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
nostunAOB: //08CC98D2:
db 83 BE 28 01 00 00 03
//Alt: cmp dword ptr [esi+00000128],03
unregistersymbol(nostunAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [esi+00000128],03
jne originalcode
mov dword ptr [esi+00000128],03

originalcode:
cmp dword ptr [esi+00000128],03

exit:
jmp returnhere

08CC98D2:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
08CC98D2:
db 83 BE 28 01 00 00 03
//Alt: cmp dword ptr [esi+00000128],03
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>135</ID>
          <Description>"Inf. Dash (old1)"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infdashAOB,0F B6 83 8B 02 00 00 89 85 ** ** ** ** 8B CB)
registersymbol(infdashAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [ebx+0000028B],00

originalcode:
movzx eax,byte ptr [ebx+0000028B]

exit:
jmp returnhere

infdashAOB: //07D0B388:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
infdashAOB: //07D0B388:
db 0F B6 83 8B 02 00 00
//Alt: movzx eax,byte ptr [ebx+0000028B]
unregistersymbol(infdashAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>117</ID>
          <Description>"Runes"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(pRunesEquipped)
registersymbol(pRunesEquipped)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pRunesEquipped],edi

originalcode:
movsx eax,byte ptr [edi+ecx+08]

exit:
jmp returnhere

///
pRunesEquipped:
dd 0
///

runesequippedreadAOB: //08A2C147:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
runesequippedreadAOB: //08A2C147:
db 0F BE 44 0F 08
//Alt: movsx eax,byte ptr [edi+ecx+08]
unregistersymbol(pRunesEquipped)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>00E94A01</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>enablecoinmanorAOB</Name>
      <Address>0FDD4091</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>instantspecialcooldownAOB</Name>
      <Address>07B8E867</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>invtimerAOB</Name>
      <Address> 08ED27EA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bSetEnemyVulnerable</Name>
      <Address>0F72003E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>enableheroAOB</Name>
      <Address> 08C42EE5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>enablecoinAOB</Name>
      <Address> 08C42E8A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>runesequippedreadAOB</Name>
      <Address> 088CC7F7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHero</Name>
      <Address>08C500EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCoin</Name>
      <Address>08C500F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pRunesEquipped</Name>
      <Address>08C500F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fFakeMP</Name>
      <Address>08C500F8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCustomVampireLevel</Name>
      <Address>08C500FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCustomCurseLevel</Name>
      <Address>08C50100</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInfDashActivated</Name>
      <Address>08C50104</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bVampireLevelActivated</Name>
      <Address>08C50105</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bCurseLevelActivated</Name>
      <Address>08C50106</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>invulnerabilityscriptAOB</Name>
      <Address> 08C4257F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInvulnerabilitySwitch</Name>
      <Address>087C0064</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInvulnerabilityFlag</Name>
      <Address>087C0065</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>infmpAOB</Name>
      <Address> 085F41C7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>instantspellcooldownAOB</Name>
      <Address> 08C4BC84</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>infdashAOB</Name>
      <Address> 08C4AD48</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>dashingtimecheckAOB</Name>
      <Address> 08C4254D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bAlternateDashSwitch</Name>
      <Address>0885008E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>infdoublejumpAOB</Name>
      <Address> 08C4A48D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bAlternateDoubleJumpSwitch</Name>
      <Address>08860064</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>setlandAOB</Name>
      <Address> 08C486BF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>flyreadycheckAOB</Name>
      <Address> 08C49D51</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>infflyAOB</Name>
      <Address> 08C421A9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>eqipmentequippedreadAOB</Name>
      <Address> 085F3C32</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pEquipmentEquipped</Name>
      <Address>08880010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>spelltypereadoncastAOB</Name>
      <Address> 08C4BB78</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSpellType</Name>
      <Address>08890012</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nostunAOB</Name>
      <Address> 08CC850B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>specialitemcheckAOB</Name>
      <Address> 08C40767</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSpecialItem</Name>
      <Address>08AB0015</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>undeadAOB</Name>
      <Address> 085F3D97</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pNotHero</Name>
      <Address>08B30050</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Spell Type:
01 - Daggers
02 - Axe
03 - Bomb (no sound)
04 - Time Stop
05 - EMPTY
06 - ?
07 - ?
08 - Chakram
09 - scyth
0A - Blade Wall
0B - circle fire
0C - Conflux (wall bouncing)
0D - fireball
0E - ?
0F - ?
10 - ?
/*================================*/
Special Item Type:
01 - Charon's Obol
02 - Hedgehog's Curse
03 - Hyperion's Ring
04 - Hermes' Boots
05 - Helios' Blessing
06 - Calypso's Compass
/*================================*/
http://forum.cheatengine.org/viewtopic.php?t=566771
</Comments>
</CheatTable>
