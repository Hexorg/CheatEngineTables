<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Battle Worlds Kronos 1.0.0 Method 1"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Battle Worlds Kronos
 Game Version  : 1.0.0
 Game Sponsor  : RELOADED
 Proces Name   : BattleWorldsKronos.exe
 Script Version: 1.0 (JIT)
 CE Version    : 6.3
 Release date  : 24-Nov-2013
 Author        : Recifense
 History:
 24-Nov-13: First Release
 Features:
 - Unlimited Actions per turn
 - God Mode
 - Some Pointers
 - Mono JIT system
===========================================
}

//=========================================
// Definitions
define(APPN,"Mono.dll")
define(MOMD,Mono.dll+00026951)

define(LUDO,"BattleWorldsKronos.exe")

//=========================================
define(ctSMTD,50)     // MTD Structure Size (#80)
//=========================================
// Structures
struct HMD            // Hacked Method Info
 iHMStat: dd ?        // 0 = Not Installed, 1 = Installed
 iOMSize: dd ?        // Size of the Original Method
 aOMName: resb 32     // Name of the Method
 iOMAddr: dd ?        // Original Method Current Code Address
 iHMDelt: dd ?        // Delta for Hacking Point
 iHMSize: dd ?        // Size of the array for hacking
 aobOMTD: resb 8      // Original HP AOB (for asserting and restore)
 aobHMTD: resb 8      // AOB of Hacking Code (for replacing original)
 iHMEntr: dd ?        // Hacking Entry Point Address
 iHMBack: dd ?        // Hacking Return Address
 pOMStru: dd ?        // Pointer to Method Structure (for debugging)
ends

struct MMD            // Mono Method Structure
 pMDInfo: dd ?        // Pointer to more info
 dd ?
 iMDAddr: dd ?        // Current Memory Address
 dd ?
 iMDSize: dd ?        // Method code size
ends

struct MDI            // More Info of Mono Method
 iIDValu: dd ?        // Method ID Number (&lt;&gt;0)
 dd ?
 dd ?
 dd ?
 pMDName: dd ?        // Pointer to Method ASCII name
ends

//=========================================
[ENABLE]
//=========================================
assert(MOMD,8b 01 83 38 00)
//=========================================
alloc(MyMono,8192,APPN)
//=========================================
// Mono Declaration section
label(_MonMethods)
label(_BackMMD)
label(_ExitMMD)
label(_CheckMethodByName)
label(_ChkMN00)
label(_ChkMN01)
label(_ChkMN02)
label(_ChkMN03)
label(_ChkMN04)
label(_ChkMN05)
label(_ChkMN06)
label(_ExitCMD)
label(Methods)
label(Method00)
label(Method01)
label(Method02)
label(pMonoLast)
label(iNumMethods)
// General Declaration section
label(_SelUnitHP)
label(_ExitSUH)
label(_SelUnitActions)
label(_SelUA00)
label(_ExitSUA)
label(_GodMode)
label(_ExitGMD)
label(iEnableUMA)
label(iEnableGMD)
label(pCommon)
label(pSel)
label(pActions)
label(pHP)

//=========================================
// Mono Registering Symbols
registersymbol(MyMono)
registersymbol(Methods)
registersymbol(pMonoLast)
registersymbol(Method00)
registersymbol(Method01)
registersymbol(Method02)
registersymbol(iNumMethods)
//=========================================
// General Registering Symbols
registersymbol(iEnableUMA)
registersymbol(iEnableGMD)
registersymbol(pCommon)
registersymbol(pSel)
registersymbol(pActions)
registersymbol(pHP)
registersymbol(_SelUnitHP)
registersymbol(_SelUnitActions)
registersymbol(_GodMode)

//=========================================
MyMono:
//=========================================
// Find out a particular method code address by its name
_MonMethods:
 push ecx
 push edx

 mov ecx,[ecx]                     // Get pMethod
 cmp dword ptr [ecx],00
 je _ExitMMD

 mov [pMonoLast],ecx               // Last Method
 mov edx,[ecx]                     // Get pMoreInfo

 cmp dword ptr [iNumMethods],00
 je _ExitMMD

 cmp dword ptr [edx+MDI.iIDValu],0 // iID == 0?
 je _ExitMMD                       // Jump if true

 mov eax,[edx+MDI.pMDName]         // Get paMethodName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 call _CheckMethodByName

_ExitMMD:
 pop edx
 pop ecx

 mov eax,[ecx]                     // Original code
 cmp dword ptr [eax],00            // Original code
 jmp _BackMMD                      // Back to main code

//=========================================
// Entry : ECX = Method / EDX = MethodInfo
_CheckMethodByName:
 pushad

 mov esi,[edx+MDI.pMDName]          // Get paMethodName
 mov ebp,Methods                    // Point to First Method
 xor ebx,ebx                        // Index = 0

// Verify if any method used in the Script
// Check Size
_ChkMN00:
 mov eax,[ebp+HMD.iOMSize]         // Method2Bfound  Size
 cmp eax,[ecx+MMD.iMDSize]         // Current Method Size
 je _ChkMN02                       // jump if a match

_ChkMN01:
 lea ebp,[ebp+ctSMTD]              // Point to next method info
 inc ebx
 cmp ebx,[iNumMethods]             // Finished?
 js _ChkMN00                       // If false, continue ...
 jmp _ExitCMD                      // ... Else, exit.
// Check Name
_ChkMN02:
 lea edi,[ebp+HMD.aOMName]         // Point EDI to the first char of the name
 xor edx,edx                       // Index = 0

_ChkMN03:
 mov al,[esi+edx]
 cmp al,[edi+edx]
 jne _ChkMN01                      // Jump if name does not match

 inc edx                           // Increase Index
 cmp al,0                          // Found ?
 jne _ChkMN03                      // Continue if false

// One of the Methods was found

 cmp dword ptr [ebp+HMD.iHMStat],0 // Method already hacked?
 je _ChkMN04                       // Jump if false

 mov eax,[ecx+MMD.iMDAddr]
 cmp eax,[ebp+HMD.iOMAddr]
 je _ExitCMD                       // Jump if same address

// Assert and hack the Method
_ChkMN04:
 xor eax,eax
 mov [ebp+HMD.iHMStat],eax         // Status = Not hacked yet
 mov eax,[ecx+MMD.iMDAddr]         // Get method address
 mov [ebp+HMD.iOMAddr],eax         // Update Original Method Current Address
 add eax,[ebp+HMD.iHMDelt]         // Point to Hacking Point
 mov esi,eax                       // Save address for assertion
 mov [ebp+HMD.iHMEntr],eax         // Update Code Entry Point
 add eax,[ebp+HMD.iHMSize]         // Point to Return Point
 mov [ebp+HMD.iHMBack],eax         // Update Code Return Point

// Asserting
 xor ebx,ebx                       // Index = 0
 lea edi,[ebp+HMD.aobOMTD]         // Point expected AOB

_ChkMN05:
 mov al,[esi+ebx]
 cmp al,[edi+ebx]
 jne _ExitCMD

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN05                       // Continue if false

// Hacking
 xor ebx,ebx
 mov edi,[ebp+HMD.iHMEntr]
 lea esi,[ebp+HMD.aobHMTD]

_ChkMN06:
 mov al,[esi+ebx]
 mov [edi+ebx],al

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN06                       // Continue if false

 mov eax,1
 mov [ebp+HMD.iHMStat],eax         // Status = Hacked

_ExitCMD:
 popad
 ret

//=========================================
// SCRIPTS FOR CHEATING
//=========================================
// Upon selecting a unit (Method00)
_SelUnitHP:
 push [ebp-60]                     // Original code
 mov eax,[ebp-60]                  // Original code

 test eax,eax
 jz _ExitSUH

 mov [pSel],eax
 mov eax,[eax+08]
 mov [pCommon],eax

_ExitSUH:
 mov eax,[ebp-60]                  // Original code
 jmp [Method00+HMD.iHMBack]        // Back to main code

//=========================================
// Upon selecting a unit (Method01)
_SelUnitActions:
 mov eax,[edi+6C]                  // Original code
 sub esp,0C                        // Original code

 mov [pActions],eax

 push ebx
 push ecx
 push edx

 test eax,eax
 jz _ExitSUA

 cmp dword ptr [iEnableUMA],0
 je _ExitSUA                       // Jump if feature is disabled

 mov ebx,[eax+08]
 cmp ebx,[pCommon]
 jne _ExitSUA

 mov ebx,[eax+1c]                  // pActionList
 test ebx,ebx
 jz _ExitSUA

 mov ecx,[ebx+0c]
 test ecx,ecx                      // Is there at least one action?
 jz _ExitSUA                       // Jump if false

 cmp ecx,#04
 jns _ExitSUA

 lea ebx,[ebx+10]                  // Point to 1st action pointer

_SelUA00:
 mov edx,[ebx]                     // Get pAction

 mov dword ptr [edx+10],00         // Reset UsedAction
 lea ebx,[ebx+04]                  // Point to next
 loop _SelUA00                     // Loop until ecx = 0

_ExitSUA:
 pop edx
 pop ecx
 pop ebx

 mov eax,[edi+6C]                  // Original code
 jmp [Method01+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method02)
_GodMode:
 mov ebx,[ebp+08]                  // Original code (pUNIT)

 mov [pHP],ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov edi,[ebx+08]
 cmp edi,[pCommon]
 jne _ExitGMD

 xor edi,edi

 mov [ebp+10],edi                  // Make DAMAGE = 0

_ExitGMD:
 mov edi,[ebp+10]                  // Original code (DAMAGE)
 jmp [Method02+HMD.iHMBack]        // Back to main code

//=========================================
 db '==================================&gt;'
 db 'CE6.3 Script by Recifense 112413'
//=========================================
// Mono Variables
iNumMethods:
 dd 3
pMonoLast:
 dd 0
 db 'Method-&gt;'
Methods:
Method00:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 00000aa8                         // iOMSize ( 4)
 db 'UpdateUnitStats'                // aOMName (32)
 db 0
 db 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 0000019c                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db ff,75,a0,8b,45,a0                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _SelUnitHP
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method01:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000114b                         // iOMSize ( 4)
 db 'UpdatePosition'                 // aOMName (32)
 db 0,0
 db 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 0000082b                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 8b,47,6c,83,ec,0c                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _SelUnitActions
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method02:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 000000ef                         // iOMSize ( 4)
 db 'ApplyDamage'                    // aOMName (32)
 db 0,0,0,0,0
 db 1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 00000008                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 8b,5d,08,8b,7d,10                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _GodMode
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

//=========================================
 db '===============&gt;'
//=========================================
// General Variables
iEnableUMA:
 dd 0
iEnableGMD:
 dd 0
pCommon:
 dd 55555555
pSel:
 dd 0
pActions:
 dd 0
pHP:
 dd 0

//=========================================
// Hacking Points
// MONO
MOMD:
 jmp _MonMethods
_BackMMD:
// GENERAL
//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOMD:
// mov eax,[ecx]
// cmp dword ptr [eax],00
 db 8b 01 83 38 00
// GENERAL
//=========================================
// Unregistering Symbols
//=========================================
// Mono Registering Symbols
unregistersymbol(MyMono)
unregistersymbol(Methods)
unregistersymbol(pMonoLast)
unregistersymbol(Method00)
unregistersymbol(Method01)
unregistersymbol(Method02)
//=========================================
// General Registering Symbols
unregistersymbol(iEnableUMA)
unregistersymbol(pCommon)
unregistersymbol(pSel)
unregistersymbol(pActions)
unregistersymbol(pHP)
unregistersymbol(_SelUnitHP)
unregistersymbol(_SelUnitActions)
unregistersymbol(_GodMode)

//=========================================
//dealloc(MyMono)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
  First script using the Mono.dll Approach.
  Method00:
  KingArt.BW.Game.Unity.Viewmodels.IngameHUD:
  UpdateUnitStats () + 0x19c (1D72F480 1D72FF28)
  [003E4E70 - Unity Root Domain]

  Method01
  KingArt.BW.Game.Unity.Behaviours.IngameUI:
  UpdatePosition () + 0x82b (1D7548E8 1D755A33)
  [003E4E70 - Unity Root Domain]

  Method02
  KingArt.BW.Game.Core.Units.Modules.HealthModule:
  ApplyDamage (KingArt.BW.Game.Core.Units.IDamageSource,int) + 0x8 (48CC3680 48CC376F)
  [009A4E70 - Unity Root Domain]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Enable/Disable Unlimited Move Actions =&gt; (1/0)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableUMA</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Methods</Name>
      <Address>0FFC0200</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonoLast</Name>
      <Address>0FFC01F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method00</Name>
      <Address>0FFC0200</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method01</Name>
      <Address>0FFC0250</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method02</Name>
      <Address>0FFC02A0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iNumMethods</Name>
      <Address>0FFC01F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableUMA</Name>
      <Address>0FFC0300</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMD</Name>
      <Address>0FFC0304</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommon</Name>
      <Address>0FFC0308</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSel</Name>
      <Address>0FFC030C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pActions</Name>
      <Address>0FFC0310</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHP</Name>
      <Address>0FFC0314</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_SelUnitHP</Name>
      <Address>0FFC00E5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_SelUnitActions</Name>
      <Address>0FFC010B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_GodMode</Name>
      <Address>0FFC017A</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>The Script was made by Recifense, all I did was creating/converting(?) it to table.</Comments>
</CheatTable>
