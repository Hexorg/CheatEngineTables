<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"test custom assembler"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
function testasm(addr,inst)
  print(string.format("%X:(%s) &lt;%s&gt;",addr,addr&lt;0 and '-' or addr&gt;0 and '+' or ' ',inst))
end
if AssmID~=nil then unregisterAssembler(AssmID)end
if AssmID==nil then
  AssmID = registerAssembler(testasm)
  print('-- regiseterAssembler ID =  &lt;',tostring(AssmID),'&gt;')
else
  AssmID = registerAssembler(testasm)
end

{$asm}

[ENABLE]

alloc(_X,$4000,90000000)
alloc(_Y,$4000,800000)
registersymbol(_X)
registersymbol(_Y)

_X+1100:
mov  eax,1111
call _Y
jmp  _X

_Y+2200:
mov  eax,2222
call _X
jmp  _Y


[DISABLE]

dealloc(_X)
dealloc(_Y)
unregistersymbol(_X)
unregistersymbol(_Y)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"test custom assembler &lt;64bit 4G+/2G+?&gt;"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc(_Z,$4000,7f00000000)
registersymbol(_Z)


_Z+3300:
mov  eax,3333
jmp  _Z


Sleep:
{$lua}
return disassemble('Sleep'):match('^%x+%s*%-%s*[%x ]+%s*%-%s*(.-)$')
{$asm}


[DISABLE]

dealloc(_Z)
unregistersymbol(_Z)

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>
</LuaScript>
</CheatTable>
