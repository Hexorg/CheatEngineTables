<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>92</ID>
      <Description>"Spells Don't Use Mana"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>/**
 * Script created by Zanzer; AoBs found and created by ParkourPenguin
 * http://forum.cheatengine.org/viewtopic.php?p=5620925#5620925
 *
 * Note that this might not work for all spells. I dunno.
 */
{$lua}
cheat_name = "NoManaUse"
[ENABLE]
local pattern = "85 ?? 74 16 F3 0F 7E ?? ?? F2 0F 10 ?? ?? ?? ?? ?? F2 0F 59 ?? 66 0F D6 ?? ?? DD"
local replace = "90 90 90 90 F3 0F 7E ?? ?? F2 0F 10 ?? ?? ?? ?? ?? 66 0F 57 C0 66 0F D6 ?? ?? DD"
local scans = AOBScan(pattern)
if scans == nil then
  showMessage("Unable to find pattern:\n"..pattern)
else
  local saved = {}
  local length = (#replace + 1) / 3
  for i = 0, scans.Count - 1 do
	local backup = readBytes(scans[i], length, true)
	local bytes = {}
	for hex in string.gmatch(replace, "%S+") do
	  local size = #bytes + 1
	  if hex == "??" then
		bytes[size] = backup[size]
	  else
		bytes[size] = tonumber(hex, 16)
	  end
	end
	saved[i] = backup
	writeBytes(scans[i], bytes)
  end
  _G[cheat_name] = {
	["scans"] = scans,
	["saved"] = saved
  }
end
[DISABLE]
local vars = _G[cheat_name]
if vars ~= nil then
  local scans = vars.scans
  local saved = vars.saved
  for i = 0, scans.Count - 1 do
	writeBytes(scans[i], saved[i])
  end
  scans.Destroy()
  vars.scans = nil
  vars.saved = nil
  vars = nil
  _G[cheat_name] = nil
end
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Coins Per Second Multiplier"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Realm Grinder
  Version: 1.4.41.3
  Date   : 2015-12-06
  Author : ParkourPenguin

  This script multiplies the amount of coins you get every second
  by some value you provide.

  Note that this can take up to 5 seconds to take effect in game.
}

[ENABLE]
aobscan(CoinsPerSecond,F2 0F 58 ?? 66 0F D6 ?? ?? F3 0F 7E ?? ?? 66 0F D6 ?? ?? ?? ?? ?? 8B ?? ?? F3 0F 7E 83 C8 00 00 00)
alloc(newmem,1024)

label(CPSMultiplier)
label(return)

registersymbol(CoinsPerSecond)
registersymbol(CPSMultiplier)

newmem:
  movq xmm0,[ebx+000000C8]
  mulsd xmm0,[CPSMultiplier]
  jmp return
  db CC CC CC CC
CPSMultiplier:
  dq (double)10

CoinsPerSecond+19:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]
CoinsPerSecond+19:
  db F3 0F 7E 83 C8 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 075CFDB6

075CFD81: DD 9D 18 FF FF FF        -  fstp qword ptr [ebp-000000E8]
075CFD87: F3 0F 7E 8D 18 FF FF FF  -  movq xmm1,[ebp-000000E8]
075CFD8F: F2 0F 59 CA              -  mulsd xmm1,xmm2
075CFD93: 66 0F D6 4D C0           -  movq [ebp-40],xmm1
075CFD98: F3 0F 7E 4D C0           -  movq xmm1,[ebp-40]
075CFD9D: F2 0F 58 C1              -  addsd xmm0,xmm1
075CFDA1: 66 0F D6 45 B8           -  movq [ebp-48],xmm0
075CFDA6: F3 0F 7E 45 B8           -  movq xmm0,[ebp-48]
075CFDAB: 66 0F D6 83 B8 00 00 00  -  movq [ebx+000000B8],xmm0
075CFDB3: 8B 5D A8                 -  mov ebx,[ebp-58]
// ---------- INJECTING HERE ----------
075CFDB6: F3 0F 7E 83 B8 00 00 00  -  movq xmm0,[ebx+000000B8]
// ---------- DONE INJECTING  ----------
075CFDBE: 66 0F D6 85 28 FF FF FF  -  movq [ebp-000000D8],xmm0
075CFDC6: 8B 5D A0                 -  mov ebx,[ebp-60]
075CFDC9: 89 9D 50 FF FF FF        -  mov [ebp-000000B0],ebx
075CFDCF: 83 EC 0C                 -  sub esp,0C
075CFDD2: FF B5 50 FF FF FF        -  push [ebp-000000B0]
075CFDD8: E8 06 68 B1 5B           -  call pepflashplayer.dll+665E3
075CFDDD: 83 C4 10                 -  add esp,10
075CFDE0: F3 0F 7E 85 28 FF FF FF  -  movq xmm0,[ebp-000000D8]
075CFDE8: 8B 8D 5C FF FF FF        -  mov ecx,[ebp-000000A4]
075CFDEE: 85 C0                    -  test eax,eax
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Multiplier Value"</Description>
          <LastState Value="0" Activated="0" RealAddress="00700019"/>
          <Color>80000008</Color>
          <VariableType>Double</VariableType>
          <Address>CPSMultiplier</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Decrypt Constant Values"</Description>
      <Options moManualExpandCollapse="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : Realm Grinder
  Version: 1.4.41.2
  Date   : 2015-11-29
  Author : ParkourPenguin

  This script adds some constant values the game had encrypted to your table
  as decrypted values.
  Play around in the game a bit before activating this script to get the most
  possible results. Disable and re-enable it later if you think you might be
  missing something.
}
{$lua}
if syntaxcheck then return end
[ENABLE]
------ Utility Functions ------
--BitXOR function: credits to "Donald Reynolds", stack overflow
--stackoverflow.com/questions/5977654/lua-bitwise-logical-operations
local function BitXOR(a,b)
    local p,c=1,0
    while a&gt;0 and b&gt;0 do
        local ra,rb=a%2,b%2
        if ra~=rb then c=c+p end
        a,b,p=(a-ra)/2,(b-rb)/2,p*2
    end
    if a&lt;b then a=b end
    while a&gt;0 do
        local ra=a%2
        if ra&gt;0 then c=c+p end
        a,p=(a-ra)/2,p*2
    end
    return c
end

------ Script Enable ------
encValAOBs = AOBScan("BB ?? ?? ?? ?? 81 F3 ?? ?? ?? ?? 66 ?? ?? ?? F2","+X",0)
encValAsmBackups = {}

if encValAOBs == nil then
  showMessage("Sorry, I couldn't find any encrypted values.")
  return
end


--set parent record of the decrypted values in the table
local al = getAddressList()
local parentName = "Decrypt Constant Values"
local parentRec

parentRec = al.getMemoryRecordByDescription(parentName)

if parentRec == nil then
  parentName = inputQuery("Error",string.format("Could not find the script \"%s\".\nWhat record would you like to put the decoded values under?",parentName),"Found Encrypted Values")
  if parentName == nil or parentName == "" then
    parentName = "Found Encrypted Values"
  end
  parentRec = al.getMemoryRecordByDescription(parentName)
  if parentRec == nil then
    parentRec = al.createMemoryRecord()
    parentRec.Description = parentName
    parentRec.Type = vtString
    parentRec.String.Size = 0
  end
end

encValParentName = parentRec.Description

--override memory, add unencrypted values
for i=0,encValAOBs.Count-1,1 do
  local errorHasHappened = false
  local addy = tonumber(encValAOBs[i],16)
  local val = readInteger(addy+1)
  local encryp = readInteger(addy+7)
  local newVal = BitXOR(val,encryp)

  --backup old machine code
  encValAsmBackups[i] = readBytes(addy,11,true)

  --override encrypted num w/ decrypted num
  if not errorHasHappened then
    if not writeInteger(addy+1,newVal) then
      fullAccess(addy+1,4)
      if not writeInteger(addy+1,newVal) then
        messageDialog("Could not write to address " .. getNameFromAddress(addy+1),mtError,mbOK)
        errorHasHappened = true
      end
    end
  end

  --override XOR decryption w/ nops
  if not errorHasHappened then
    if not writeBytes(addy+5,0x90,0x90,0x90,0x90,0x90,0x90) then
      fullAccess(addy+5,6)
      if not writeBytes(addy+5,0x90,0x90,0x90,0x90,0x90,0x90) then
        messageDialog("Could not write to address " .. getNameFromAddress(addy+5),mtError,mbOK)
        writeInteger(addy+1,val)
        errorHasHappened = true
      end
    end
  end

  --add to cheat table
  if not errorHasHappened then
    local rec = al.createMemoryRecord()
    rec.Description = "Decrypted Value " .. tostring(i+1)
    rec.Type = vtDword
    rec.Address = getNameFromAddress(addy+1)
    rec.appendToEntry(parentRec)
  end
end


[DISABLE]
--remove cheat table
if encValParentName ~= nil and type(encValParentName) == "string" then
  local al = getAddressList()
  local parentRec = al.getMemoryRecordByDescription(encValParentName)
  if parentRec ~= nil then
    if parentRec.Type == vtString and parentRec.String.Size == 0 then
      parentRec.destroy()
    else
      for i = 0, parentRec.Count-1, 1 do
        parentRec.Child[0].destroy()
      end
    end
  end
end

--restore old addresses
if encValAOBs ~= nil then
  for i=0,encValAOBs.Count-1,1 do
    local addy = tonumber(encValAOBs[i],16)

    if not writeBytes(addy,encValAsmBackups[i]) then
    fullAccess(addy,11)
      if not writeBytes(addy,encValAsmBackups[i]) then
        messageDialog("Could not restore backup to address " .. tostring(addy),mtError,mbOK)
      end
    end
  end
end


--cleanup
if encValAOBs and encValAOBs.destroy then encValAOBs.destroy() end
encValAOBs = nil
encValAsmBackups = nil
encValParentName = nil

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>manaMultiplier</Name>
      <Address>01EA0026</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>playground</Name>
      <Address>00D60000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CoinsPerSecond</Name>
      <Address> 08AD0303</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CPSMultiplier</Name>
      <Address>00700019</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ManaPointer</Name>
      <Address> 08AED223</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>manaBaseP</Name>
      <Address>00700015</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
