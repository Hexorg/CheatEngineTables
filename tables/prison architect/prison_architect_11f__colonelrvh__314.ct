<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Get Base Bank Balance Address [Spend money to update]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(GetCash,Prison Architect.exe,89 47 1C 8B 86 10 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BCash,4)

newmem:

code:
  mov [edi+1C],eax
  mov [BCash],edi
  mov eax,[esi+00000110]
  jmp return

GetCash:
  jmp newmem
  nop
  nop
  nop
  nop
return:
registersymbol(GetCash)

[DISABLE]

GetCash:
  db 89 47 1C 8B 86 10 01 00 00

unregistersymbol(GetCash)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Prison Architect.exe"+259769

"Prison Architect.exe"+25972F: 0F 57 C0                 -  xorps xmm0,xmm0
"Prison Architect.exe"+259732: C7 45 D8 00 00 00 00     -  mov [ebp-28],00000000
"Prison Architect.exe"+259739: F2 0F 11 45 E0           -  movsd [ebp-20],xmm0
"Prison Architect.exe"+25973E: C7 45 E8 00 00 00 00     -  mov [ebp-18],00000000
"Prison Architect.exe"+259745: 8B 86 10 01 00 00        -  mov eax,[esi+00000110]
"Prison Architect.exe"+25974B: C7 45 EC 00 00 00 00     -  mov [ebp-14],00000000
"Prison Architect.exe"+259752: 8B 80 D8 15 00 00        -  mov eax,[eax+000015D8]
"Prison Architect.exe"+259758: 89 47 18                 -  mov [edi+18],eax
"Prison Architect.exe"+25975B: 8B 86 10 01 00 00        -  mov eax,[esi+00000110]
"Prison Architect.exe"+259761: F3 0F 2C 80 0C 03 00 00  -  cvttss2si eax,[eax+0000030C]
// ---------- INJECTING HERE ----------
"Prison Architect.exe"+259769: 89 47 1C                 -  mov [edi+1C],eax
"Prison Architect.exe"+25976C: 8B 86 10 01 00 00        -  mov eax,[esi+00000110]
// ---------- DONE INJECTING  ----------
"Prison Architect.exe"+259772: 8B 80 48 03 00 00        -  mov eax,[eax+00000348]
"Prison Architect.exe"+259778: F7 D8                    -  neg eax
"Prison Architect.exe"+25977A: C7 47 24 B0 3C FF FF     -  mov [edi+24],FFFF3CB0
"Prison Architect.exe"+259781: 89 47 20                 -  mov [edi+20],eax
"Prison Architect.exe"+259784: 8D 45 D8                 -  lea eax,[ebp-28]
"Prison Architect.exe"+259787: 8B 8E 10 01 00 00        -  mov ecx,[esi+00000110]
"Prison Architect.exe"+25978D: 50                       -  push eax
"Prison Architect.exe"+25978E: 6A 01                    -  push 01
"Prison Architect.exe"+259790: 81 C1 A4 05 00 00        -  add ecx,000005A4
"Prison Architect.exe"+259796: E8 05 30 03 00           -  call "Prison Architect.exe"+28C7A0
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Bank Balance"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BCash]+1C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Get Base Reputations Base Address"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(GetRep,Prison Architect.exe,8B 88 E0 14 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BaseRep,4)

newmem:

code:
  mov ecx,[eax+000014E0]
  mov [BaseRep],eax
  jmp return

GetRep:
  jmp code
  nop
return:
registersymbol(GetRep)

[DISABLE]

GetRep:
  db 8B 88 E0 14 00 00

unregistersymbol(GetRep)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Prison Architect.exe"+12F594

"Prison Architect.exe"+12F566: E8 C5 EC F2 FF           -  call "Prison Architect.exe"+5E230
"Prison Architect.exe"+12F56B: C7 45 FC FF FF FF FF     -  mov [ebp-04],FFFFFFFF
"Prison Architect.exe"+12F572: F6 C3 01                 -  test bl,01
"Prison Architect.exe"+12F575: 74 08                    -  je "Prison Architect.exe"+12F57F
"Prison Architect.exe"+12F577: 8D 4D 8C                 -  lea ecx,[ebp-74]
"Prison Architect.exe"+12F57A: E8 51 9E F2 FF           -  call "Prison Architect.exe"+593D0
"Prison Architect.exe"+12F57F: A1 D4 7C 8E 00           -  mov eax,["Prison Architect.exe"+4E7CD4]
"Prison Architect.exe"+12F584: 8B 5D DC                 -  mov ebx,[ebp-24]
"Prison Architect.exe"+12F587: 8B 80 10 01 00 00        -  mov eax,[eax+00000110]
"Prison Architect.exe"+12F58D: 83 B8 B8 14 00 00 00     -  cmp dword ptr [eax+000014B8],00
// ---------- INJECTING HERE ----------
"Prison Architect.exe"+12F594: 8B 88 C0 14 00 00        -  mov ecx,[eax+000014C0]
// ---------- DONE INJECTING  ----------
"Prison Architect.exe"+12F59A: 89 4D 08                 -  mov [ebp+08],ecx
"Prison Architect.exe"+12F59D: 75 09                    -  jne "Prison Architect.exe"+12F5A8
"Prison Architect.exe"+12F59F: 2B 8B B0 00 00 00        -  sub ecx,[ebx+000000B0]
"Prison Architect.exe"+12F5A5: 89 4D 08                 -  mov [ebp+08],ecx
"Prison Architect.exe"+12F5A8: 85 C9                    -  test ecx,ecx
"Prison Architect.exe"+12F5AA: C7 45 D4 00 00 00 00     -  mov [ebp-2C],00000000
"Prison Architect.exe"+12F5B1: 8D 55 08                 -  lea edx,[ebp+08]
"Prison Architect.exe"+12F5B4: 8D 45 D4                 -  lea eax,[ebp-2C]
"Prison Architect.exe"+12F5B7: 0F 49 C2                 -  cmovns eax,edx
"Prison Architect.exe"+12F5BA: FF 30                    -  push [eax]
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Reputations"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>[BaseRep]+000014E0</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Get Base Weapon Base Address [Grab item to update][WIP]"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(GetWeapon,Prison Architect.exe,8B 0E 89 88 74 01 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
globalalloc(BaseWeapon,4)

newmem:

code:
  mov ecx,[esi]
  mov [BaseWeapon],esi
  mov [eax+00000174],ecx
  jmp return

GetWeapon:
  jmp code
  nop
  nop
  nop
return:
registersymbol(GetWeapon)

[DISABLE]

GetWeapon:
  db 8B 0E 89 88 74 01 00 00

unregistersymbol(GetWeapon)
dealloc(newmem)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Weapon Slot 1"</Description>
          <DropDownList>2:Baton
5:Knife
7:Handgun
16:Key
18:Lighter
32:Shotgun
37:Tazer
42:Sniper Rifle
45:M4A1
46:Uzi
</DropDownList>
          <VariableType>4 Bytes</VariableType>
          <Address>[BaseWeapon]</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Weapon Slot 2"</Description>
          <DropDownList>2:Baton
5:Knife
7:Handgun
16:Key
18:Lighter
32:Shotgun
37:Tazer
42:Sniper Rifle
45:M4A1
46:Uzi
</DropDownList>
          <VariableType>4 Bytes</VariableType>
          <Address>[BaseWeapon]+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Weapon ?"</Description>
          <DropDownList>2:Baton
5:Knife
7:Handgun
16:Key
18:Lighter
32:Shotgun
37:Tazer
42:Sniper Rifle
45:M4A1
46:Uzi
</DropDownList>
          <VariableType>4 Bytes</VariableType>
          <Address>[BaseWeapon]-4</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>globals</Name>
      <Address>38930000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_MONEY</Name>
      <Address>0073B2B5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_BUILD</Name>
      <Address>0068F7F5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_PRISONER_NEEDS</Name>
      <Address>006AC118</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_RESEARCH</Name>
      <Address>005EAE90</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_INTAKE</Name>
      <Address>005CD007</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_ENERGY</Name>
      <Address>0065B967</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_REP</Name>
      <Address>00622AEA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BaseRep</Name>
      <Address>00A90000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BaseWeapon</Name>
      <Address>00A90010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BCash</Name>
      <Address>00A90020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>GetCash</Name>
      <Address> 00659769</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
