<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>319</ID>
      <Description>"READ ME FOR MAX WEIGHT"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{

ACTIVATE BEFORE YOU READY UP INTO MAP THEN YOU CAN SET IT TO WHAT YOU WANT
IN THE ADDRESS UNDER THE SCRIPT

OR

You need to play as support to begin with and you need to be at leaset lv 20
so the endurance enchancement is unlocked. Activate the script and change the
enhancment so your max weight changes then the address will populate.

Activate this read me script to start with.


BUG: WHEN YOU ARE BUYING AND SELLING IN THE TRADER DO NOT DOUBLE CLICK WHAT
YOU WANT TO BUY/SELL, USE THE SELL OR BUY BUTTON

}




[ENABLE]
[DISABLE]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>317</ID>
          <Description>"Activate and change support enhancement endurance"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(weight_aob,KFGame.exe,41 88 01 C3 4C 8B C2) // should be unique
alloc(newmem,$1000,"KFGame.exe"+E7693)

label(code)
label(return)
globalalloc(weight,4)

newmem:
  cmp r9,9000000
  jng code
  cmp [r9+1],0
  jne code
  cmp [r9+2],0
  jne code
  cmp [r9+3],0
  jne code
  cmp [r9+4],0
  jne code
  cmp [r9+5],0
  jne code
  cmp [r9+8f1],0D000C00
  jne code
  mov [weight],r9
  mov [r9],al
  ret
  mov r8,rdx
  jmp return


code:
  mov [r9],al
  ret 
  mov r8,rdx
  jmp return

weight_aob:
  jmp newmem
  nop
  nop
return:
registersymbol(weight_aob)

[DISABLE]

weight_aob:
  db 41 88 01 C3 4C 8B C2

unregistersymbol(weight_aob)
dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>318</ID>
              <Description>"max weight"</Description>
              <VariableType>Byte</VariableType>
              <Address>weight</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>312</ID>
      <Description>"Level 25 on current perk"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(exp_AOB,KFGame.exe,89 7B 04 48 8B 5C 24 30 48 83 C4 20 5F C3 CC CC CC CC CC CC CC CC)
alloc(newmem,$1000,"KFGame.exe"+9EEEE7)

label(code)
label(return)

newmem:
  mov [rbx+04],632ea0
  mov rbx,[rsp+30]
  jmp return

code:
  mov [rbx+04],edi
  mov rbx,[rsp+30]
  jmp return

exp_AOB:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(exp_AOB)

[DISABLE]

exp_AOB:
  db 89 7B 04 48 8B 5C 24 30

unregistersymbol(exp_AOB)
dealloc(newmem)


</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>314</ID>
      <Description>"Inf Health"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT2,KFGame.exe,29 07 8B 07 89 06) // should be unique
alloc(infHP,$1000,"KFGame.exe"+556EE)

label(code)
label(return)
label(1hitkill)

globalalloc(1hk,4)

1hk:
db 00

infHP:
  cmp [rdi+1E0],0
  jne 1hitkill
  //sub [rdi],eax
  mov eax,[rdi]
  mov [rsi],eax
  jmp return

1hitkill:
  cmp [1hk],1
  jne code
  push eax
  mov eax,[rdi]
  sub [rdi],eax
  pop eax
  mov eax,[rdi]
  mov [rsi],eax
  jmp return

code:
  sub [rdi],eax
  mov eax,[rdi]
  mov [rsi],eax
  jmp return

INJECT2:
  jmp infHP
  nop
return:
registersymbol(INJECT2)

[DISABLE]

INJECT2:
  db 29 07 8B 07 89 06

unregistersymbol(INJECT2)
dealloc(infHP)

1hk:
db 00
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>315</ID>
          <Description>"1 hit kill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

1hk:
db 01

[DISABLE]

1hk:
db 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>316</ID>
      <Description>"Inf Dosh"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(dosh_aob,KFGame.exe,38 0F 5B C0 F3 0F 11 03 48 83 C4 20) // should be unique
alloc(newmem,$1000,"KFGame.exe"+6500E)

label(code)
label(return)

newmem:
cmp rbx,10000000
jng code
cmp [rbx],1
jng code
mov [rbx],(float)50000
add rsp,20
jmp return

code:
  movss [rbx],xmm0
  add rsp,20
  jmp return

dosh_aob+04:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(dosh_aob)

[DISABLE]

dosh_aob+04:
  db F3 0F 11 03 48 83 C4 20

unregistersymbol(dosh_aob)
dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"Inf Ammo"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(Ammo1,KFGame.exe,FE 0B 48 8B 5C 24 30)
alloc(newmem,$1000,"KFGame.exe"+54821)
label(code)
label(return)
newmem:
  //dec [rbx]
  mov rbx,[rsp+30]
  jmp return
code:
  dec [rbx]
  mov rbx,[rsp+30]
  jmp return
Ammo1:
  jmp newmem
  nop
  nop
return:
registersymbol(Ammo1)
///////////////////////alt fire////////////////////////////////////////////
aobscanmodule(Ammo2,KFGame.exe,28 07 0F B6 07)
alloc(newmem1,$1000,"KFGame.exe"+54528)
label(code1)
label(return1)
newmem1:
  //sub [rdi],al
  movzx eax,byte ptr [rdi]
  jmp return1
code1:
  sub [rdi],al
  movzx eax,byte ptr [rdi]
  jmp return1
Ammo2:
  jmp newmem1
return1:
registersymbol(Ammo2)
//////////////////////////////grenade///////////////////////////////////////
aobscanmodule(ammo3,KFGame.exe,38 88 03 48 83 C4 20) // should be unique
alloc(newmem3,$1000,"KFGame.exe"+64F6A)
label(code3)
label(return3)
newmem3:
  cmp rbx,1000000
  jng code3
 // mov [rbx],al
  add rsp,20
  jmp return3
code3:
  mov [rbx],al
  add rsp,20
  jmp return3
ammo3+01:
  jmp newmem3
  nop
return3:
registersymbol(ammo3)
[DISABLE]
//KFGame.exe+54821
Ammo1:
  db FE 0B 48 8B 5C 24 30
unregistersymbol(Ammo1)
dealloc(newmem)
//////////////////////////////alt fire///////////////////////////////////////
Ammo2:
  db 28 07 0F B6 07
unregistersymbol(Ammo2)
dealloc(newmem1)
//////////////////////////////grenade///////////////////////////////////////
ammo3+01:
  db 88 03 48 83 C4 20
unregistersymbol(ammo3)
dealloc(newmem3)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>347</ID>
      <Description>"No recoil"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(no_recoil,2048)
CREATETHREAD(no_recoil)
registersymbol(end)
label(skip)
label(end)

no_recoil:
mov eax,["KFGame.exe"+02184280]
test eax,eax
je skip
mov eax,[eax+70]
test eax,eax
je skip
mov eax,[eax+40]
test eax,eax
je skip
mov eax,[eax+7f4]
test eax,eax
je skip
mov eax,[eax+4a4]
test eax,eax
je skip
mov [eax+7B8],0
mov [eax+7BC],0
mov [eax+7C0],0
mov [eax+7C4],0

skip:
sub rsp,20
mov rcx,#500
call sleep
add RSP,20
cmp [end],01
jne no_recoil
ret

end:
dd 0

[DISABLE]
end:
dd 01

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>345</ID>
      <Description>"No spread"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(no_spread,2048)
createthread(no_spread)
registersymbol(end_spread)
label(skip)
label(end_spread)

no_spread:
mov eax,["KFGame.exe"+02189BD0]
test eax,eax
je skip
mov eax,[eax+68]
test eax,eax
je skip
mov eax,[eax+18]
test eax,eax
je skip
mov eax,[eax+4a4]
test eax,eax
je skip
mov eax,[eax+2fc]
test eax,eax
je skip
mov [eax+0],(float)0

skip:
sub rsp,20
mov rcx,#500
call sleep
add rsp,20
cmp [end_spread],01
jne no_spread
ret
end_spread:
dd 0

[DISABLE]
end_spread:
dd 01

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>weight</Name>
      <Address>03720000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo1</Name>
      <Address>13F7A4821</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo2</Name>
      <Address>13F7A4528</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ammo3</Name>
      <Address>13F7B4F69</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>1hk</Name>
      <Address>03720010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT2</Name>
      <Address>13F7A588E</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
