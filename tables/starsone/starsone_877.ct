<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Open"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Inf. Health"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscan(Health,5C C1 F2 0F 5A E8 F3 0F 11 AE C4 00 00 00 F3 0F 10 86 C4) // should be unique
alloc(newmem,$1000,1BC3E477)

label(code)
label(return)

newmem:

code:
  //movss [rsi+000000C4],xmm5
  mov [rsi+000000C4],(float)100
  jmp return

Health+06:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Health)

[DISABLE]

Health+06:
  db F3 0F 11 AE C4 00 00 00

unregistersymbol(Health)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1BC3E477

""+1BC3E448: 48 83 EC 20                    -  sub rsp,20
""+1BC3E44C: 49 BB 70 F1 32 04 00 00 00 00  -  mov r11,000000000432F170
""+1BC3E456: 41 FF D3                       -  call r11d
""+1BC3E459: 48 83 C4 20                    -  add rsp,20
""+1BC3E45D: F3 0F 5A D0                    -  cvtss2sd xmm2,xmm0
""+1BC3E461: F2 0F 10 45 D8                 -  movsd xmm0,[rbp-28]
""+1BC3E466: F2 0F 10 4D D0                 -  movsd xmm1,[rbp-30]
""+1BC3E46B: F2 0F 59 CA                    -  mulsd xmm1,xmm2
""+1BC3E46F: F2 0F 5C C1                    -  subsd xmm0,xmm1
""+1BC3E473: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
""+1BC3E477: F3 0F 11 AE C4 00 00 00        -  movss [rsi+000000C4],xmm5
// ---------- DONE INJECTING  ----------
""+1BC3E47F: F3 0F 10 86 C4 00 00 00        -  movss xmm0,[rsi+000000C4]
""+1BC3E487: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
""+1BC3E48B: 66 0F 57 C9                    -  xorpd xmm1,xmm1
""+1BC3E48F: 66 0F 2F C8                    -  comisd xmm1,xmm0
""+1BC3E493: 0F 8A 85 00 00 00              -  jp 1BC3E51E
""+1BC3E499: 0F 83 7F 00 00 00              -  jae 1BC3E51E
""+1BC3E49F: F3 0F 10 86 D0 00 00 00        -  movss xmm0,[rsi+000000D0]
""+1BC3E4A7: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
""+1BC3E4AB: 66 0F 57 C9                    -  xorpd xmm1,xmm1
""+1BC3E4AF: 66 0F 2F C8                    -  comisd xmm1,xmm0
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Inf. Food"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscan(Food,F3 0F 11 AE D0 00 00 00 48 8B 8E) // should be unique
alloc(newmem,$1000,1BC3E608)

label(code)
label(return)

newmem:

code:
  //movss [rsi+000000D0],xmm5
  mov [rsi+000000D0],(float)100
  jmp return

Food:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Food)

[DISABLE]

Food:
  db F3 0F 11 AE D0 00 00 00

unregistersymbol(Food)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1BC3E608

""+1BC3E5D9: 48 83 EC 20                    -  sub rsp,20
""+1BC3E5DD: 49 BB 70 F1 32 04 00 00 00 00  -  mov r11,000000000432F170
""+1BC3E5E7: 41 FF D3                       -  call r11d
""+1BC3E5EA: 48 83 C4 20                    -  add rsp,20
""+1BC3E5EE: F3 0F 5A D0                    -  cvtss2sd xmm2,xmm0
""+1BC3E5F2: F2 0F 10 45 D8                 -  movsd xmm0,[rbp-28]
""+1BC3E5F7: F2 0F 10 4D D0                 -  movsd xmm1,[rbp-30]
""+1BC3E5FC: F2 0F 59 CA                    -  mulsd xmm1,xmm2
""+1BC3E600: F2 0F 5C C1                    -  subsd xmm0,xmm1
""+1BC3E604: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
""+1BC3E608: F3 0F 11 AE D0 00 00 00        -  movss [rsi+000000D0],xmm5
// ---------- DONE INJECTING  ----------
""+1BC3E610: 48 8B 8E A0 00 00 00           -  mov rcx,[rsi+000000A0]
""+1BC3E617: 33 D2                          -  xor edx,edx
""+1BC3E619: 48 83 EC 20                    -  sub rsp,20
""+1BC3E61D: 49 BB A0 A8 28 04 00 00 00 00  -  mov r11,000000000428A8A0
""+1BC3E627: 41 FF D3                       -  call r11d
""+1BC3E62A: 48 83 C4 20                    -  add rsp,20
""+1BC3E62E: 85 C0                          -  test eax,eax
""+1BC3E630: 0F 84 5B 02 00 00              -  je 1BC3E891
""+1BC3E636: 48 8B 86 A0 00 00 00           -  mov rax,[rsi+000000A0]
""+1BC3E63D: 0F B6 80 B6 00 00 00           -  movzx eax,byte ptr [rax+000000B6]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Inf. Water"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscan(Water,C1 F2 0F 5A E8 F3 0F 11 AE CC 00 00 00 F3) // should be unique
alloc(newmem,$1000,1BC3E58F)

label(code)
label(return)

newmem:

code:
  //movss [rsi+000000CC],xmm5
  mov [rsi+000000CC],(float)100
  jmp return

Water+05:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Water)

[DISABLE]

Water+05:
  db F3 0F 11 AE CC 00 00 00

unregistersymbol(Water)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1BC3E58F

""+1BC3E560: 48 83 EC 20                    -  sub rsp,20
""+1BC3E564: 49 BB 70 F1 32 04 00 00 00 00  -  mov r11,000000000432F170
""+1BC3E56E: 41 FF D3                       -  call r11d
""+1BC3E571: 48 83 C4 20                    -  add rsp,20
""+1BC3E575: F3 0F 5A D0                    -  cvtss2sd xmm2,xmm0
""+1BC3E579: F2 0F 10 45 D8                 -  movsd xmm0,[rbp-28]
""+1BC3E57E: F2 0F 10 4D D0                 -  movsd xmm1,[rbp-30]
""+1BC3E583: F2 0F 59 CA                    -  mulsd xmm1,xmm2
""+1BC3E587: F2 0F 5C C1                    -  subsd xmm0,xmm1
""+1BC3E58B: F2 0F 5A E8                    -  cvtsd2ss xmm5,xmm0
// ---------- INJECTING HERE ----------
""+1BC3E58F: F3 0F 11 AE CC 00 00 00        -  movss [rsi+000000CC],xmm5
// ---------- DONE INJECTING  ----------
""+1BC3E597: F3 0F 10 86 D0 00 00 00        -  movss xmm0,[rsi+000000D0]
""+1BC3E59F: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
""+1BC3E5A3: 66 0F 57 C9                    -  xorpd xmm1,xmm1
""+1BC3E5A7: 66 0F 2F C8                    -  comisd xmm1,xmm0
""+1BC3E5AB: 0F 8A 5F 00 00 00              -  jp 1BC3E610
""+1BC3E5B1: 0F 83 59 00 00 00              -  jae 1BC3E610
""+1BC3E5B7: F3 0F 10 86 D0 00 00 00        -  movss xmm0,[rsi+000000D0]
""+1BC3E5BF: F3 0F 5A C0                    -  cvtss2sd xmm0,xmm0
""+1BC3E5C3: F2 0F 11 45 D8                 -  movsd [rbp-28],xmm0
""+1BC3E5C8: F3 0F 10 86 DC 00 00 00        -  movss xmm0,[rsi+000000DC]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Inf. Items"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscan(Item2,89 88 A8 00 00 00 48 8B 46 28 48 63 8E 00 01 00 00 48 63 C9 39 48 18 0F 86 E5) // should be unique
alloc(newmem,$1000,1BC770B7)

label(code)
label(return)

newmem:

code:
  //mov [rax+000000A8],ecx
  mov [rax+000000A8],3E7
  jmp return

Item2:
  jmp code
  nop
return:
registersymbol(Item2)

[DISABLE]

Item2:
  db 89 88 A8 00 00 00

unregistersymbol(Item2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 1BC770B7

""+1BC77082: 41 BA D0 64 07 17              -  mov r10d,170764D0
""+1BC77088: 48 83 EC 20                    -  sub rsp,20
""+1BC7708C: 49 BB 30 12 2E 04 00 00 00 00  -  mov r11,00000000042E1230
""+1BC77096: 41 FF D3                       -  call r11d
""+1BC77099: 48 83 C4 20                    -  add rsp,20
""+1BC7709D: 48 8B D0                       -  mov rdx,rax
""+1BC770A0: 48 8B 85 08 F6 FF FF           -  mov rax,[rbp-000009F8]
""+1BC770A7: 48 8B 8D 00 F6 FF FF           -  mov rcx,[rbp-00000A00]
""+1BC770AE: 48 63 92 A8 00 00 00           -  movsxd  rdx,dword ptr [rdx+000000A8]
""+1BC770B5: 03 CA                          -  add ecx,edx
// ---------- INJECTING HERE ----------
""+1BC770B7: 89 88 A8 00 00 00              -  mov [rax+000000A8],ecx
// ---------- DONE INJECTING  ----------
""+1BC770BD: 48 8B 46 28                    -  mov rax,[rsi+28]
""+1BC770C1: 48 63 8E 00 01 00 00           -  movsxd  rcx,dword ptr [rsi+00000100]
""+1BC770C8: 48 63 C9                       -  movsxd  rcx,ecx
""+1BC770CB: 39 48 18                       -  cmp [rax+18],ecx
""+1BC770CE: 0F 86 E5 52 01 00              -  jbe 1BC8C3B9
""+1BC770D4: 48 8D 44 C8 20                 -  lea rax,[rax+rcx*8+20]
""+1BC770D9: 48 8B 08                       -  mov rcx,[rax]
""+1BC770DC: 83 39 00                       -  cmp dword ptr [rcx],00
""+1BC770DF: 41 BA D0 64 07 17              -  mov r10d,170764D0
""+1BC770E5: 48 83 EC 20                    -  sub rsp,20
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Health</Name>
      <Address> 1BC3E471</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Food</Name>
      <Address> 1BC3E608</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Water</Name>
      <Address> 1BC3E58A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Item2</Name>
      <Address> 1BC770B7</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
