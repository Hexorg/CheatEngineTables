<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>294</ID>
      <Description>"universal item testing"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
"re7.exe"+91FD29A:
db 90 B0 01

///**************************************///

"re7.exe"+8D604B4:
db C0
//Alt: eax


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
"re7.exe"+91FD29A:
db 0F 95 D0
//Alt: setne al

///**************************************///

"re7.exe"+8D604B4:
db C9
//Alt: ecx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>319</ID>
      <Description>"universal item testing .3 (alt)"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048,"re7.exe"+91FD29D)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push rbx
push rcx
push rdx
push rsi
push rdi
push rbp
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
sub rsp,10
movdqu dqword [rsp],xmm0
sub rsp,10
movdqu dqword [rsp],xmm1
sub rsp,10
movdqu dqword [rsp],xmm2
sub rsp,10
movdqu dqword [rsp],xmm3
sub rsp,10
movdqu dqword [rsp],xmm4
sub rsp,10
movdqu dqword [rsp],xmm5
sub rsp,10
movdqu dqword [rsp],xmm6
sub rsp,10
movdqu dqword [rsp],xmm7
sub rsp,10
movdqu dqword [rsp],xmm8
sub rsp,10
movdqu dqword [rsp],xmm9
sub rsp,10
movdqu dqword [rsp],xmm10
sub rsp,10
movdqu dqword [rsp],xmm11
sub rsp,10
movdqu dqword [rsp],xmm12
sub rsp,10
movdqu dqword [rsp],xmm13
sub rsp,10
movdqu dqword [rsp],xmm14
sub rsp,10
movdqu dqword [rsp],xmm15
push rax

mov rcx,12    //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov [rsp],al

@@:
pop rax
movdqu xmm15,dqword [rsp]
add rsp,10
movdqu xmm14,dqword [rsp]
add rsp,10
movdqu xmm13,dqword [rsp]
add rsp,10
movdqu xmm12,dqword [rsp]
add rsp,10
movdqu xmm11,dqword [rsp]
add rsp,10
movdqu xmm10,dqword [rsp]
add rsp,10
movdqu xmm9,dqword [rsp]
add rsp,10
movdqu xmm8,dqword [rsp]
add rsp,10
movdqu xmm7,dqword [rsp]
add rsp,10
movdqu xmm6,dqword [rsp]
add rsp,10
movdqu xmm5,dqword [rsp]
add rsp,10
movdqu xmm4,dqword [rsp]
add rsp,10
movdqu xmm3,dqword [rsp]
add rsp,10
movdqu xmm2,dqword [rsp]
add rsp,10
movdqu xmm1,dqword [rsp]
add rsp,10
movdqu xmm0,dqword [rsp]
add rsp,10
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rbp
pop rdi
pop rsi
pop rdx
pop rcx
pop rbx

originalcode:
add rsp,20
pop rbx

exit:
jmp returnhere

///

"re7.exe"+91FD29D:
jmp newmem
returnhere:

///**************************************///

alloc(newmem2,2048,"re7.exe"+8D604A5)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
push rax
push rbx
push rdx
push rsi
push rdi
push rbp
push r8
push r9
push r10
push r11
push r12
push r13
push r14
push r15
sub rsp,10
movdqu dqword [rsp],xmm0
sub rsp,10
movdqu dqword [rsp],xmm1
sub rsp,10
movdqu dqword [rsp],xmm2
sub rsp,10
movdqu dqword [rsp],xmm3
sub rsp,10
movdqu dqword [rsp],xmm4
sub rsp,10
movdqu dqword [rsp],xmm5
sub rsp,10
movdqu dqword [rsp],xmm6
sub rsp,10
movdqu dqword [rsp],xmm7
sub rsp,10
movdqu dqword [rsp],xmm8
sub rsp,10
movdqu dqword [rsp],xmm9
sub rsp,10
movdqu dqword [rsp],xmm10
sub rsp,10
movdqu dqword [rsp],xmm11
sub rsp,10
movdqu dqword [rsp],xmm12
sub rsp,10
movdqu dqword [rsp],xmm13
sub rsp,10
movdqu dqword [rsp],xmm14
sub rsp,10
movdqu dqword [rsp],xmm15
push rcx

mov rcx,12    //ALT key
push rcx
call GetAsyncKeyState
add rsp,08
shr ax,#15
cmp ax,1
jne @f
mov [rsp],al

@@:
pop rcx
movdqu xmm15,dqword [rsp]
add rsp,10
movdqu xmm14,dqword [rsp]
add rsp,10
movdqu xmm13,dqword [rsp]
add rsp,10
movdqu xmm12,dqword [rsp]
add rsp,10
movdqu xmm11,dqword [rsp]
add rsp,10
movdqu xmm10,dqword [rsp]
add rsp,10
movdqu xmm9,dqword [rsp]
add rsp,10
movdqu xmm8,dqword [rsp]
add rsp,10
movdqu xmm7,dqword [rsp]
add rsp,10
movdqu xmm6,dqword [rsp]
add rsp,10
movdqu xmm5,dqword [rsp]
add rsp,10
movdqu xmm4,dqword [rsp]
add rsp,10
movdqu xmm3,dqword [rsp]
add rsp,10
movdqu xmm2,dqword [rsp]
add rsp,10
movdqu xmm1,dqword [rsp]
add rsp,10
movdqu xmm0,dqword [rsp]
add rsp,10
pop r15
pop r14
pop r13
pop r12
pop r11
pop r10
pop r9
pop r8
pop rbp
pop rdi
pop rsi
pop rdx
pop rbx
pop rax

originalcode2:
mov rax,[rbx+50]
cmp [rax+18],rsi

exit2:
jmp returnhere2

///

"re7.exe"+8D604A5:
jmp newmem2
nop
nop
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"re7.exe"+91FD29D:
db 48 83 C4 20 5B
//Alt: add rsp,20
//Alt: pop rbx

///**************************************///

dealloc(newmem2)
"re7.exe"+8D604A5:
db 48 8B 43 50 48 39 70 18
//Alt: mov rax,[rbx+50]
//Alt: cmp [rax+18],rsi
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
