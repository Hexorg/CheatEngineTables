<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="10">
  <CheatEntries>
    <CheatEntry>
      <Description>"Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(health,8b 40 58 2b 45 08 8b 75 0c 89 06 8b 57 0c 8b 4a 5c 2b 4a 60)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov dword ptr [eax+58], #500

originalcode:
mov eax,[eax+58]
sub eax,[ebp+08]

exit:
jmp returnhere

health:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(health,E9 xx xx xx xx 90 8b 75 0c 89 06 8b 57 0c 8b 4a 5c 2b 4a 60)
dealloc(newmem)
health:
db 8B 40 58 2B 45 08
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>97</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Ally Health"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(ally,F3 0F 2A 40 08 8B 40 10 F3 0F 11 45 0C 74 0D E8 xx xx xx xx 8b c8)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov dword ptr [eax+08],1000
originalcode:
cvtsi2ss xmm0,[eax+08]

exit:
jmp returnhere

ally:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(ally,E9 xx xx xx xx 8B 40 10 F3 0F 11 45 0C 74 0D E8 xx xx xx xx 8b c8)
dealloc(newmem)
ally:
db F3 0F 2A 40 08
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>98</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Stealth"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]
label(Stealth)
registersymbol(Stealth)
aobscan(OurAddress,5EB0015B8BE55DC2040057 );//Byte Pattern

OurAddress-6://Found address subtract 0x16. Thats the location
Stealth:
db 80 7D FF EF//Bytes we wanna write

[Disable]
Stealth:
db 80 7D FF 00//Default bytes
unregistersymbol(Stealth)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Weapons/Florins 1"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(weapons,2b C2 89 41 0C B0 XX 5D C2 XX XX 32 C0 5D C2 XX XX CC CC 55 8B EC 56 8B F1 )
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

weapons:
jmp newmem
returnhere:

newmem:
sub edx, edx
mov [ecx+0C],#99999999

originalcode:
//sub eax,edx
//mov [ecx+0C],eax

exit:
jmp returnhere

[DISABLE]
aobscan(_ohk,E9 XX XX XX XX B0 XX 5D C2 XX XX 32 C0 5D C2 XX XX CC CC 55 8B EC 56 8B F1 )
dealloc(newmem)
_ohk:
sub eax, edx
mov [ecx+0C], eax

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>98</Key>
          </Keys>
        </Hotkey>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>99</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Weapons/Florins 2"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(weapons,29 d0 89 41 0C B0 XX 5D C2 XX XX 32 C0 5D C2 XX XX CC CC 55 8B EC 56 8B F1 )
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

weapons:
jmp newmem
returnhere:

newmem:
sub edx, edx
mov [ecx+0C],#99999999

originalcode:
//sub eax,edx
//mov [ecx+0C],eax

exit:
jmp returnhere

[DISABLE]
aobscan(_ohk,E9 XX XX XX XX B0 XX 5D C2 XX XX 32 C0 5D C2 XX XX CC CC 55 8B EC 56 8B F1 )
dealloc(newmem)
_ohk:
sub eax, edx
mov [ecx+0C], eax

</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>98</Key>
          </Keys>
        </Hotkey>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>99</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"One Hit Kill"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(_ohk,8B 42 08 8B 4D E8 3B C1 0F 8F XX XX XX XX 80 7D F2 00 74 22 )
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov dword ptr [edx+08],0
originalcode:
mov eax,[edx+08]
mov ecx,[ebp-18]

exit:
jmp returnhere

_ohk:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(_ohk,E9 xx xx xx xx 90 3B C1 0F 8F XX XX XX XX 80 7D F2 00 74 22 )
dealloc(newmem)
_ohk:
db 8B 42 08 8B 4D E8
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>100</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Knives"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(MyScript,128)
label(MyScript_part2)
label(returnhere1)
label(returnhere2)
label(exit1)
label(exit2)
aobscan(RetCheck, 85 C0 74 15 8B 10 8B C8 8B 42 38 56)                          //searching knives retcheck
aobscan(code1   , 0F B7 51 0A xx xx xx xx xx xx xx xx xx 8B C8 8D 14 91 56)     //searching knives address

aobscan(code2   ,74 0D xx xx xx xx xx xx 48 FF D0 5D C2 04 00 33 C0 5D C2 04 00)//Knives quantity hack
label(KniveAddress)

MyScript:
cmp [ebp+04],RetCheck
jne short exit1
test ebx,ebx
je short exit1
mov eax,[ecx+04]
mov eax,[eax+20]
mov [KniveAddress],eax
exit1:
mov eax,[ecx+04]        //original
and edx,00003FFF        //original
jmp returnhere1

MyScript_part2:
mov edx,[eax]           //original
mov ecx,eax             //original
mov eax,[edx+48]        //original
cmp ecx,[KniveAddress]  //dealing with knives ??
jne short exit2
//"call eax" replacement
mov eax,999
pop ebp
ret 004
exit2:
jmp returnhere2

KniveAddress:
dd 00

code1+4://searching knives address
jmp MyScript
db 90 90 90 90
returnhere1:

code2+2://Knives quantity hack
jmp MyScript_part2
nop
db 48
returnhere2:

[DISABLE]
dealloc(MyScript)

aobscan(code1, 0F B7 51 0A xx xx xx xx xx xx xx xx xx 8B C8 8D 14 91 56)
code1+4:
mov eax,[ecx+04]
and edx,00003FFF

aobscan(code2, 74 0D xx xx xx xx xx xx 48 FF D0 5D C2 04 00 33 C0 5D C2 04 00)
code2+2:
mov edx,[eax]
mov ecx,eax
mov eax,[edx+48]
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>101</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"No Notoriety"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(nonoto,F3 0F 10 41 0C f3 0f 11 45 fc d9 45 fc 8b e5 5d c3 cc cc cc cc)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [ecx+0C],0

originalcode:
movsd xmm0,[ecx+0C]

exit:
jmp returnhere

nonoto:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(nonoto,E9 xx xx xx xx f3 0f 11 45 fc d9 45 fc 8b e5 5d c3 cc cc cc cc)
dealloc(newmem)
nonoto:
db F3 0F 10 41 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Fast Assassin Level Up"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(fastassassin,89 46 0C 8B 8F DC 00 00 00 3B C1 76 03 89 4E 0C 8B CE)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

fastassassin:
jmp newmem
nop
nop
nop
nop
returnhere:

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+0c],#999999
mov ecx,[edi+000000dc]

originalcode:
//mov [esi+0c],eax
//mov ecx,[edi+000000dc]

exit:
jmp returnhere

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(fastassassin,E9 xx xx xx xx 90 90 90 90 )
dealloc(newmem)
fastassassin:
db 89 46 0C 8B 8F DC 00 00 00
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>103</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Skill Points"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(skill,29 46 10 8B 3F 8B 47 08 8B 0F C1 F8 1F 56 23 C8)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

skill:
jmp newmem
returnhere:

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+10],#10
mov edi,[edi]

originalcode:
//sub [esi+10],eax
//mov edi,[edi]

exit:
jmp returnhere

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(skill,E9 xx xx xx xx 8B 47 08 8B 0F C1 F8 1F 56 23 C8)
dealloc(newmem)
skill:
db 29 46 10 8B 3F
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>102</Key>
          </Keys>
        </Hotkey>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>104</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Freeze Running Timer"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(time,2B 01 1B 51 04 89 45 F8 8B C2 81 E2 FF FF FF 7F 89 55 FC)
alloc(newmem,512)
label(Reduce)
label(exitReduction)
label(retnReduction)

newmem: //this is allocated memory, you have read,write,execute access

Reduce:
sub eax,[ecx]              // eax receives timer value, while [ecx] is constant
sbb edx,[ecx+04]

pushad                     // Save registers
pushfd                     // Save flags
mov edi,[ebp+04]           // Because of call structure, it contains the caller return address
lea edx,["ACBSP.exe"+08EBA60]      // Caller return address
cmp edi,edx                // Check if true
jne exitReduction          // else do nothing


cmp eax,0DBC00             // when eax equals it, we reach 30sec because of DBC00(=900096)/7530(=30000)
jb exitReduction

add [ecx],092800           // moving up the reference to decrease 20sec to the timer

exitReduction:
popfd                      // Restore flags
popad                      // Restore registers
jmp retnReduction

time:
jmp Reduce
retnReduction:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(time,E9 xx xx xx xx 89 45 F8 8B C2 81 E2 FF FF FF 7F 89 55 FC)
dealloc(newmem)
time:
db 2B 01 1B 51 04
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>111</Key>
          </Keys>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Civilians"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]
label(Civilian)
registersymbol(Civilian)
aobscan(OurAddress,B8020000005E5DC20400558BEC56);//Byte Pattern

OurAddress-16://Found address subtract 0x16. Thats the location
Civilian:
db 83 7E 58 EF//Bytes we wanna write

[Disable]
Civilian:
db 83 7E 58 00//Default bytes
unregistersymbol(Civilian)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Teleport"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(teleport,0F 28 58 30 8B 4F 08 0F 57 C0 0F 28 D0 0F 28 05 XX XX XX XX 0f 28 c8 0f 55 cb 0f 54 c2 0f 56 c1 0f 28 d8 0F 29 55 B0 0F 29 5D D0 85 C9)
alloc(newmem,9999)
label(returnhere)
label(skip)
label(undo)
label(s_enable)
label(l_enable)
label(u_enable)
label(originalcode)
label(exit)

registersymbol(s_enable)
registersymbol(l_enable)
registersymbol(u_enable)

teleport:
jmp newmem
nop
nop
returnhere:

newmem:
pushfd
cmp dword ptr [eax+30],00
jz originalcode
cmp byte ptr [s_enable],01
jne skip
mov byte ptr [s_enable],00
pushad
mov ecx,3
lea esi,[eax+30]
lea edi,[newmem+1C0]
repe movsd
popad
jmp originalcode

skip:
cmp dword ptr [newmem+1C0],00
jz originalcode
cmp byte ptr [l_enable],01
jne undo
mov byte ptr [l_enable],00
pushad
mov ecx,3
lea esi,[eax+30]
lea edi,[newmem+1E0]
repe movsd
popad
pushad
mov ecx,3
lea esi,[newmem+1C0]
lea edi,[eax+30]
repe movsd
popad

undo:
cmp dword ptr [newmem+1E0],00
jz originalcode
cmp byte ptr [u_enable],01
jne originalcode
mov byte ptr [u_enable],00
pushad
mov ecx,3
lea esi,[newmem+1E0]
lea edi,[eax+30]
repe movsd
popad

originalcode:
popfd
movaps xmm3,[eax+30]
mov ecx,[edi+08]

exit:
jmp returnhere

s_enable:
dd 0
l_enable:
dd 0
u_enable:
dd 0

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
aobscan(teleport,E9 xx xx xx xx 90 90 0F 57 C0 0F 28 D0 0F 28 05 XX XX XX XX 0f 28 c8 0f 55 cb 0f 54 c2 0f 56 c1 0f 28 d8 0F 29 55 B0 0F 29 5D D0 85 C9)
dealloc(newmem)
teleport:
db 0F 28 58 30 8B 4F 08

unregistersymbol(s_enable)
unregistersymbol(l_enable)
unregistersymbol(u_enable)
//Alt: db 0F 28 58 30 8B 4F 08
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <Description>"Save Position"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>s_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>112</Key>
          </Keys>
          <Value>1</Value>
        </Hotkey>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>112</Key>
          </Keys>
          <Value>1</Value>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Load Position"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>l_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>113</Key>
          </Keys>
          <Value>1</Value>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <Description>"Undo Position"</Description>
      <Color>80000008</Color>
      <VariableType>Byte</VariableType>
      <Address>u_enable</Address>
      <Hotkeys>
        <Hotkey>
          <Action>Set Value</Action>
          <Keys>
            <Key>114</Key>
          </Keys>
          <Value>1</Value>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Update Health</Description>
      <Address>023C7540</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>1057540</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>C1</Byte>
        <Byte>49</Byte>
        <Byte>23</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>58</Byte>
      </Actual>
      <After>
        <Byte>56</Byte>
        <Byte>E8</Byte>
        <Byte>D7</Byte>
        <Byte>3E</Byte>
        <Byte>53</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Uodate Items 1</Description>
      <Address>01B04F8F</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>BB4F8F</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>72</Byte>
        <Byte>0B</Byte>
        <Byte>2B</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>B0</Byte>
        <Byte>01</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Notoriety</Description>
      <Address>01A7E264</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>7AE264</ModuleNameOffset>
      <Before>
        <Byte>F6</Byte>
        <Byte>C4</Byte>
        <Byte>44</Byte>
        <Byte>7B</Byte>
        <Byte>25</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>32</Byte>
        <Byte>F6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Throwing Knives?</Description>
      <Address>01BBE0F0</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>7EE0F0</ModuleNameOffset>
      <Before>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>41</Byte>
        <Byte>1A</Byte>
      </Actual>
      <After>
        <Byte>25</Byte>
        <Byte>FF</Byte>
        <Byte>3F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Assassin exp?</Description>
      <Address>008BF01C</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>81F01C</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>DC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Skill Points</Description>
      <Address>008BE2C7</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>81E2C7</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>46</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>3F</Byte>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Health</Description>
      <Address>023C7540</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>1057540</ModuleNameOffset>
      <Before>
        <Byte>9E</Byte>
        <Byte>C1</Byte>
        <Byte>49</Byte>
        <Byte>23</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>58</Byte>
      </Actual>
      <After>
        <Byte>56</Byte>
        <Byte>E8</Byte>
        <Byte>D7</Byte>
        <Byte>3E</Byte>
        <Byte>53</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Uodate Items 1</Description>
      <Address>01B04F8F</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>BB4F8F</ModuleNameOffset>
      <Before>
        <Byte>C2</Byte>
        <Byte>72</Byte>
        <Byte>0B</Byte>
        <Byte>2B</Byte>
        <Byte>C2</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>B0</Byte>
        <Byte>01</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Notoriety</Description>
      <Address>01A7E264</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>7AE264</ModuleNameOffset>
      <Before>
        <Byte>F6</Byte>
        <Byte>C4</Byte>
        <Byte>44</Byte>
        <Byte>7B</Byte>
        <Byte>25</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>E8</Byte>
        <Byte>32</Byte>
        <Byte>F6</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Throwing Knives?</Description>
      <Address>01BBE0F0</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>7EE0F0</ModuleNameOffset>
      <Before>
        <Byte>5F</Byte>
        <Byte>5E</Byte>
        <Byte>C3</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>41</Byte>
        <Byte>1A</Byte>
      </Actual>
      <After>
        <Byte>25</Byte>
        <Byte>FF</Byte>
        <Byte>3F</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Assassin exp?</Description>
      <Address>008BF01C</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>81F01C</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
        <Byte>C1</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>46</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>DC</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Update Skill Points</Description>
      <Address>008BE2C7</Address>
      <ModuleName>ACBSP.exe</ModuleName>
      <ModuleNameOffset>81E2C7</ModuleNameOffset>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>46</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>3F</Byte>
        <Byte>8B</Byte>
        <Byte>47</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>s1_enable</Name>
      <Address>031100C6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>l1_enable</Name>
      <Address>031100CA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>one</Name>
      <Address>06CB00C7</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>two</Name>
      <Address>06CB00CB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Stealth</Name>
      <Address>00B33F0B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Civilian</Name>
      <Address>011B05F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>s_enable</Name>
      <Address>055F00BB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>l_enable</Name>
      <Address>055F00BF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>u_enable</Name>
      <Address>055F00C3</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
