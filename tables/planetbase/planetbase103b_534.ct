<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Files>
    <junk_150828.lua Encoding="Ascii85">=HX%u,eWfqW5EAm!9+ZwuT.zN/+rJY+0qu%xVSMA7YN_00!6MYCKO4KRAOH*^[Quj?1-OszAFy;5Vw)+yYt$a+=BA#@{qXWcc/Scm#kfuMcK6VDrw0*yV}8EuZpD2%7Wm,?$vMRXXmG^etq?k^Pk{q:Rp/M?shQyZYXK4i#EPW7A$#R7Ws9!yF+C7pTv32Qu1-Z3ig53BrZt2YD+F}4O]A}m{!zat6IW{q,At9inI$xTs_Smvx4pJ2%3iLh$J}sD(UcnwRxcU)NuB5Mh1Wc4u}Fwif,5Ai-u$cibtdpQa0C_@AdJL66(HGUIHqK05vNv2Y^H]8uF.em6FW=CMvQVH)KBfGJm(fP}{AmvsokL,{+i^#3MrlW.A1WT1yf6K0Jb!K!]T+o_pA9ZpjdNn@{)U4F,:mX2DR0Ra-=auHYmI?CT[ymN!goiEjk^kI7b;6lEKud!hT=b0t3XI7y*asnTXOb9]/^NzxypbY@xNY[bo}[stBaj^4kcuaU49w@*$epvgkZW]r0]Y=V*l2W+IOy+o(VT#QO;j:ul6L*CT%j#s3d@Z(u/f_C$0!jBPHFj*{qk6yDE4EiB[J?EMH)5(:mE3DyZTxT/@bvlu1gu!Zx[B[GIK%-M*=?k)*V=,nGX:^eDfPlfNcMj2r!w]Gtg8^gQr7U/R5Ww.jU7E{onL^+7Jx4o2!g/E;REo(ar;s}lpYvHEj22CT3de*s72H:d,oZi!zD3-CbW#9YG$UL(pEs.,qEDaAT!zCru,Jj(Pk}O-QlAYmbCFF30^tdBaE@(2deMcOL{mtMwA@-0YfV_VECq_QD:8dGlt8p5Rh-pLAen=)ur]MDGRTUC*ooy+gAat7fda#I8z^7S+Q^CPZRE,6Al)2o]g]GZ=V9}drUB5*eT)2zTO{GavLG(olm5YDflL%n?dd0ta5,afKSK#DZkDdPSX?A^WDIEW*XK80=,BGm1ObQz0+0SmWl=EISnP0=3K_jMe-BjQklY[mZmj%wZ/_68urF8uln8[OcmW[^68LsY%7XFKW*m3#j9NrY83=:DSy!g5vd.PFBEwQ6VNs-JQGPsSO%q=TK*^3wj}]Akx4XkBu8NvnW)_buW2l9WRVj2+E_*RnAkQg(aCdhBryEN)E^!hcW=5T,uz=OW5K[GJXK(6uZWAT6?2gV,AW$5;s-TKX(,0M)/QL.0d=HV{6?nCooN4145MMNpj)+NssN,Cj.-?q6:+Y+2hQo*4zSPU@4*BSsJqDhV6om@t5%tKI@e2%3oRj?JU?8ZpGXLg,+wUg%/D.g@VQUSmXmJ]{)b-uZXN6L1dtEVD%je-u/O;A8ahw_EtO(xWqr+=1l=s6+i4:tj05t+BBCetasn2sIu$HhmL{17(Ggb;:oI}jT5P@k:KwAv{vtBVP.=aU.u;R;Y9nzthkLe6%x$L{J!cAxPjz2E4oRL??Z@an%feJMBMKO@Su;8qr%nKx5,W[f.=31BPEGVCO^32[i1Ec_8VxP)tfhVz/hW5eKzUSB$d7QF#QKrXfTK_0gCc7,RKwwreVOoGChvdUX0dgkT:0Ii/Hq/M_lGMwJ4^?G;In{BtI]w1Z^Q)h5KaMVO2i^^)w-Z+}1Do7h]K%Q[TqaR),!$w3EmE{oWDAC3%WHLv(^=OD.jAPAGUK[7@SUo+pA5HgQ,Z24,J%QvJG!t0P{PJ{g2+BQw5W6;pr;%cjcF_kVi?u$!2d,f?p+qc?(@OM8/N4lZ4,T.]M_41oC:i*7-ivERIrvaIC5(Y6lyJ)6]Ut2;qhYelGK%3Jn._h)2J^{2o-hJ?$gP7?OuY]Z,%,GaH(y5=.AANOB%x:aIDEEtRTa!hm#R/..WrZ.7f9#JD?liK.Rk-5D/o.$pD(r98XaR:W(+w#2=th!:Rx{VkImebAkw[i3)vG)-*c$Q94jC(8^k[H@?AG(j/*LD_2OVNkYjyZ9$A[0(?8D.Og,..6S;Db0%u]VoYl]X26Mf+rHtgK[}mzrNC+$:UytFkhuVu[TowJ.}t,CGY9:2.^N:(_6F1UMzZGNO/ptdXk#7zs-S43MUGKUIv5WdTo(,0%EvFpdMKtJc%eg[XELDOmcl]TstC.ku(_yMd1yztsxUDh0L^Z97mc(1hAKRNZ7IA4$*h54/4X7y5P2-KuNI42#,FNn!h/S_oMN3ttgg%YRq=Vc-;/6YU@hJ4@BBrUOJ)SIAPO9RjPJY[0!sYsY)m#jQ^Y8JmGi/_3@kK83[*E(A:pzF@KM%-N@#)19DpGRVW+t#DMf/[Aw)snj.bpS]jX9gtr:TZt7bu$RauD_0UI)qR*dw?#@PO66?4h?#T-Y6D2CqZ1fq*z70^OD2aIM:PF:8BwcmR=aaYtV1rV[@nb4#CqrHs6zfkchD[_4-xlH!n.lKSO,qQg1u$](@@P+x!SDBPW0vv[9u)RM?y#IUQ3nb9rEl9Asj-)EJbhK9$]$xP}.AUUn/oDm[?r;nxiCrKv7nH!poT1djtfEjY:#=hZ!/bjT.42dBNaKL@ewwQ%*R/J4Ty8R/,:C/DNcI}1=5Y/T0V]C8U=qoK05L:/YZj,VwhVd:=P2)Pw{ho$vyVi7]e]JEH5,pGW40rABVd$)-1=4yN@WZ8Fv3Zhxl0K9;L4t;t@ytAFjV3*n$!unDnh8Ne7*S;2z7Gdo%$gc[v[lC4h}(Q$8JYiRnD?=*y8E^PRG-.Gm2lw$Mp30@+@UCf0KjbH;dRE*#;T8U)cs,(W}T8;!*YGj:^Hw@pHNJNAz#;k#m!#na6d+USguoX_hZqtFxqKsywm-Vs6+ozQ!BzvW^QfiN!wDCOX9Cp{7anWqS4T2D105[aI-zz0Y[J;4#47p;{9$vrX7;v*qmiYPl7A9nDeVEx4a:!9_s8Oxav4Q[7Px;I(=U;l(k5!t^b+0E5uFIoF6cop(At:;j$Q9OdOlI4E_l46^+W8B;95E_.ZuIf8C0jx]dm2^5OwiUs)5uI_!sYTdWgMUd0dp+yYMIgQ(]w(jBpEMgqr(x$D,n(LN/@h+XcjwnPa7s0u_E;mbH%QTy3EQP2)IA;R[ykg,Vz?V5oav!lmr)43AP7:oI5U2T[o=}3xi[smnk?ku5?nB.PN%+//JJmvFY8FW/bY]q4LEbt_5(.V.eO@$BLSf/p0nVhQH^1FWDk4%P;Sf6W!g!P^YIh.7ZbmlIcF*[LBzGO+OAPQ)cF2DX;01;eLh(7;2CL*hHD1SVCwX;uH/I_Wn27U77OZC7mfPEte^eJ+Td_bLXQ-CFC!Q6j)b:G?dFpNQI3S9CJT6y_:1$?}e_YFd8x;%p$a5Xu;x3Lxf=:t;*{ji2BKN6n:#4yqKP;Sva#UexD5_E}x#M%0VofT7g5xnVj+3%[:hjT=Xy+)!=lt8}Nw]wJxLaF.fA#(@uTGsfuVj[MoSzfwHw+g;UI]M[CK9TwG4frP.{I]hzkabASlG(smQ$+og^rC4TQxf1?jG%]0-hUq5_I5KPY#:*oP.4UoDPp.hVE67[z%RH^xUc[o4y#6n}0c^ZS9BGn[yWD$SG}9LeJ[lFE3XtP_zG$qjDBf0(DViQk]lu,.nl_]02N,qi/J7-;#1SDpyB%YqaT7rdiFPv94)Et=aB1uKxayKHhYM_IH24aQ^9ZY]/vY!lWO_Iwe)G6ZaYj[y;Y$xOem=-1itIERy#+LwD{p65Mv3*4lyrcNLhn30{eQ,Zj_JYHh;q$Zgjruvd9]A%y1-TuN)++GJa9#s6{X.RNS9-){d=Uw?n7V9@a)B3ye52td%=jmu?66?mDnqMb/igcZE[v)7GC-:uHJIi6=1yo@DH#VJY%t;sCXLw)kkwe]Aq^g,BfT:-aNXDu(v2^xq:7bU7@]LA$8]EDM6YvJt3REPdNtD9DC#R89pME%%r6BhpVVgpit6P8Rly@CT0hsguw1vZ+KAp#?RO#:pl22Key4rz7=yB2T,D7imHw5Y,,;f[HtFg=fo7a1L.u)5hWh[5q,;6@fL[r:DYmzZoU-)RlTgh-=CA9lvYHAF2W:)*k2Q=-QbypXlUe=o=xsi)l,Vvgi2/*P9ocj?W@ao0.[X9MM]CFPumx70#;!hfF:4Es/J00k%qLNc.DF=%oTl]#=eZCHD/s%z-#/N.(j3kz^#2Nd78iqy4.V$SHDLWxHEx*??;sT})U%;Mu</junk_150828.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Planet Base v1.0.3b 32-bit (click 1st)"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck==true then return '' end
--

-- common function
function loadTableFile(n,mode)
  local hdr = 'loadTableFile: '
  assert(type(n)=='string',hdr.."input should be a string -"..tostring(n).." of "..type(n))
  local m = assert(findTableFile(n),hdr.."can't find table file -"..n).Stream
  m = assert(readStringLocal(m.Memory,m.Size),hdr.."can't read content -"..n)
  if type(mode)~='boolean' then return m end
  m = assert(loadstring(m,n),hdr.."lua script load fail -"..n)
  return mode and m() or m
end


loadTableFile("junk_150828.lua",true)


{$asm}
[ENABLE]
usemono()
globalalloc(__,$4000)
__:
dq __
__+08:
BitNess()

__+2c:
dd 1

[DISABLE]
{$lua}
if monopipe then
  monopipe.Destroy()
  monopipe = nil
end
{$asm}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>119</ID>
          <Description>"set trade commission (Merchant Ship)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(commission,"PlanetBase:MerchantShip:getCommission")
define(commission,"PlanetBase:GuiMerchantWindow:updateUi")
getmonostruct(MerchantShip,PlanetBase:MerchantShip)
define(mcomm,"MerchantShip.mCommission")

getmonostruct(GuiMerchantWindow,PlanetBase:GuiMerchantWindow)
define(mship,"GuiMerchantWindow.mMerchantShip")
[ENABLE]
assert(commission,55 8b ec)
alloc(_commission,$100,commission)
_commission:
dq _commission,commission

_commission+10:
dd #-80
_commission+20:
readmem(commission,8)
_commission+40:
readmem(commission,5)
push  edi
mov   edi,[ebp+08]
mov   edi,[edi+mship]
test  edi,edi
je    @f

mov   eax,[_commission+10]
mov   [edi+mcomm],eax

@@:
pop   edi
jmp  commission+05

commission:
jmp _commission+40


registersymbol(_commission)

[DISABLE]
commission:
readmem(_commission+20,5)

dealloc(_commission)
unregistersymbol(_commission)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>120</ID>
              <Description>"%rate (no less than -99)"</Description>
              <LastState Value="0" RealAddress="01000110"/>
              <ShowAsSigned>1</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>_commission</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"char Update TimeScale"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(upda,"PlanetBase:Character:updateAll")
[ENABLE]
assert(upda,55 8b ec)
alloc(_charupd,$400,upda)
_charupd:
dq _charupd,upda

_charupd+10: // return save
dd 0
_charupd+20:
readmem(upda,8)
_charupd+40:
readmem(upda,5)

cmp dword ptr [__+1c],(float)1
jge @f
mov dword ptr [__+1c],(float)4
@@:

fld  dword ptr [__+1c]
fadd dword ptr [__+1c]
fstp dword ptr [__+18]
fld  dword ptr [__+18]
fadd dword ptr [__+18]
fstp dword ptr [__+14]

fld  dword ptr [ebp+08]
fmul dword ptr [__+1c]
fstp dword ptr [ebp+08]

jmp   upda+05

upda:
jmp _charupd+40

registersymbol(_charupd)

[DISABLE]
upda:
readmem(_charupd+20,5)

dealloc(_charupd)
unregistersymbol(_charupd)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>116</ID>
              <Description>"mul"</Description>
              <DropDownList DisplayValueAsItem="1">1:Normal
2:fast
3:faster
4:fastest
8:too fast
</DropDownList>
              <LastState Value="1.875934112E28" RealAddress="03192035"/>
              <VariableType>Float</VariableType>
              <Address>__</Address>
              <Offsets>
                <Offset>1C</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>117</ID>
              <Description>"decay slow/stop"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(decay,"PlanetBase:Indicator:decrease")
[ENABLE]
assert(decay,55 8b ec 57 83 ec)
alloc(_decay,$400,decay)
_decay:
dq _decay,decay

_decay+10: // return save
dd 0
_decay+20:
readmem(decay,8)
_decay+40:
readmem(decay,7)

cmp  dword ptr [__+10],0
jne  @f
cmp  dword ptr [__+14],(float)1
jl   @f
fld  dword ptr [ebp+0c]
fdiv dword ptr [__+14]
fstp dword ptr [ebp+0c]
jmp  decay+07
@@:
mov  [ebp+0c],(float)0
jmp  decay+07

decay:
jmp _decay+40
nop
nop

registersymbol(_decay)

[DISABLE]
decay:
readmem(_decay+20,7)

dealloc(_decay)
unregistersymbol(_decay)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"mode"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">1:STOP
0:SLOW
</DropDownList>
                  <LastState Value="175972384" RealAddress="03192029"/>
                  <VariableType>4 Bytes</VariableType>
                  <Address>__</Address>
                  <Offsets>
                    <Offset>10</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>123</ID>
          <Description>"module limit"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(mcnt,"PlanetBase:Module:getModuleCount")
//define(menu,"PlanetBase:GuiMenuSystem:UpdateBuidItem")
{$lua}
local symbol = "PlanetBase:GuiMenuSystem:updateBuidItem"
local range  = 0x100
AOBFrom = getAddress(symbol)
AOBTo   = getAddress(symbol)+range
{$asm}

[ENABLE]
globalalloc(module_limit,$100)
AOBScanRegion(aob,$AOBFrom,$AOBTo,3? = = 00 00 7?)



module_limit:
dq module_limit

module_limit+08:            // save hack point address to be modified, for recovery
dq aob

module_limit+10:
readmem(aob,5)              // original limit @ module_limit+10 + 1
jmp aob+05

// module_limit+30:         // our custom hardcoded limit

module_limit+40:
cmp  eax,[ecx+0c]
jne  module_limit+10
mov  [module_limit+20],ecx  // static address of mModules
cmp  eax,[module_limit+28]
jl   @f
mov  [module_limit+28],eax  // maximum reached
push eax
mov  eax,[module_limit+30]
cmp  eax,#1000
jl   @f
mov  eax,#1000
mov  [module_limit+30],eax
@@:
cmp  eax,#1
jg   @f
mov  eax,#200
mov  [module_limit+30],eax
@@:
pop  eax
cmp  eax,[module_limit+30]  // our hardcoded limit
jmp aob+05

aob:
jmp module_limit+40

[DISABLE]
[module_limit+08]:
readmem(module_limit+10,5)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>124</ID>
              <Description>"original limit (don't change)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>module_limit</Address>
              <Offsets>
                <Offset>11</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>125</ID>
              <Description>"custom limit"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>module_limit</Address>
              <Offsets>
                <Offset>30</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>126</ID>
              <Description>"current module pool length (risky modify)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>module_limit</Address>
              <Offsets>
                <Offset>C</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>127</ID>
              <Description>"length max reached (don't change)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>module_limit</Address>
              <Offsets>
                <Offset>28</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore"</Description>
      <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>50</ID>
          <Description>"test"</Description>
          <Options moHideChildren="1" moAllowManualCollapseAndExpand="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
__+100:
sub   esp,10
movdqu dqword [esp],xmm0

movdqu dqword [__+0e0],xmm0
movdqu xmm0,dqword [__+0c0]
movdqu dqword [__+0d0],xmm0
mov    eax,[__+f0]
and    eax,-10
mov    [__+f4],eax
movdqu xmm0,dqword [esp]
add   esp,10
ret
createthread(__+100)
[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>121</ID>
          <Description>"generation x4 (O2/H2O/Pwr)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(water, "PlanetBase:ModuleType:getWaterGeneration")
define(oxygen,"PlanetBase:ModuleType:getOxygenGeneration")
define(power, "PlanetBase:ModuleType:getPowerGeneration")
[ENABLE]
assert(water, 55 8b ec 83 ec)
assert(oxygen,55 8b ec 83 ec)
assert(power, 55 8b ec 57 83 ec)
alloc(_gen,$400,water)

_gen:
dq _gen,water,oxygen,power

_gen+300:
cmp  dword ptr [ebp+0c],0
jle  @f
fld  dword ptr [ebp+0c]
fadd dword ptr [ebp+0c]
fadd dword ptr [ebp+0c]
fadd dword ptr [ebp+0c]
fstp dword ptr [ebp+0c]
@@:
ret

_gen+40:
readmem(water,6)
call  _gen+300
jmp  water+6

_gen+80:
readmem(oxygen,6)
call  _gen+300
jmp  oxygen+6


_gen+0c0:
readmem(power,7)
call  _gen+300
jmp  power+7

water:
jmp _gen+40
nop

oxygen:
jmp _gen+80
nop

power:
jmp _gen+0c0
nop
nop

registersymbol(_gen)

[DISABLE]
water:
readmem(_gen+40,6)
oxygen:
readmem(_gen+80,6)
power:
readmem(_gen+0c0,7)

dealloc(_gen)
unregistersymbol(_gen)

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>__</Name>
      <Address>004E0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>module_limit</Name>
      <Address>004E4000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>
</LuaScript>
</CheatTable>
