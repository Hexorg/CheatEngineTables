<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Rise of the Tomb Raider - UWP"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Teleport &amp; Movement "</Description>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Bow Aim Teleport"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ROTTR_UAP.exe
  Version:
  Date   : 2016-02-07
  Author : mgr.inz.Player
}

[ENABLE]
aobscanmodule(aob_BowAimPosition,ROTTR_UAP.exe,0F 29 BF A0 0B 00 00) // should be unique
registersymbol(aob_BowAimPosition)
alloc(newmem_BowAimPosition,$1000,ROTTR_UAP.exe)
label(code_BowAimPosition)
label(return_BowAimPosition)

aobscanmodule(aob_LaraPositionWrite,ROTTR_UAP.exe,49 63 F8 0F 28 79 10) // should be unique
registersymbol(aob_LaraPositionWrite)
label(code_LaraPositionWrite)
label(return_LaraPositionWrite)

label(LaraPositionAddress)
label(plus100)
label(BowAimTeleport)
registersymbol(BowAimTeleport)


newmem_BowAimPosition:
plus100:
dd (float)0 (float)0 (float)100 (float)0

code_BowAimPosition:
  movaps [rdi+00000BA0],xmm7
  cmp [BowAimTeleport],1
  jne @f
  cmp [LaraPositionAddress],0
  je  @f

  push rax
  mov rax,[LaraPositionAddress]
  addps xmm7,[plus100]
  movaps [rax+10],xmm7
  pop rax
  mov [BowAimTeleport],0

  @@:
  jmp return_BowAimPosition

code_LaraPositionWrite:
  mov [LaraPositionAddress],rcx
  movsxd  rdi,r8d
  movaps xmm7,[rcx+10]
  jmp return_LaraPositionWrite

LaraPositionAddress:
dq 0
BowAimTeleport:
dd 0


aob_BowAimPosition:
  jmp code_BowAimPosition
  nop
  nop
return_BowAimPosition:

aob_LaraPositionWrite:
  jmp code_LaraPositionWrite
  nop
  nop
return_LaraPositionWrite:

[DISABLE]

aob_BowAimPosition:
  db 0F 29 BF A0 0B 00 00

unregistersymbol(aob_BowAimPosition)
unregistersymbol(BowAimTeleport)

dealloc(newmem_BowAimPosition)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3BA7099

"ROTTR_UAP.exe"+3BA7064: 48 89 8F C0 0C 00 00           -  mov [rdi+00000CC0],rcx
"ROTTR_UAP.exe"+3BA706B: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR_UAP.exe"+3BA706E: 89 87 C8 0C 00 00              -  mov [rdi+00000CC8],eax
"ROTTR_UAP.exe"+3BA7074: EB 23                          -  jmp ROTTR_UAP.exe+3BA7099
"ROTTR_UAP.exe"+3BA7076: 48 89 9F C0 0C 00 00           -  mov [rdi+00000CC0],rbx
"ROTTR_UAP.exe"+3BA707D: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR_UAP.exe"+3BA7080: 89 87 C8 0C 00 00              -  mov [rdi+00000CC8],eax
"ROTTR_UAP.exe"+3BA7086: EB 11                          -  jmp ROTTR_UAP.exe+3BA7099
"ROTTR_UAP.exe"+3BA7088: 48 89 9F C0 0C 00 00           -  mov [rdi+00000CC0],rbx
"ROTTR_UAP.exe"+3BA708F: C7 87 C8 0C 00 00 FF FF FF FF  -  mov [rdi+00000CC8],FFFFFFFF
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3BA7099: 0F 29 BF A0 0B 00 00           -  movaps [rdi+00000BA0],xmm7
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3BA70A0: 48 8B 97 98 0C 00 00           -  mov rdx,[rdi+00000C98]
"ROTTR_UAP.exe"+3BA70A7: 0F 28 BC 24 50 02 00 00        -  movaps xmm7,[rsp+00000250]
"ROTTR_UAP.exe"+3BA70AF: 48 85 D2                       -  test rdx,rdx
"ROTTR_UAP.exe"+3BA70B2: 74 23                          -  je ROTTR_UAP.exe+3BA70D7
"ROTTR_UAP.exe"+3BA70B4: 81 FA 20 4E 00 00              -  cmp edx,00004E20
"ROTTR_UAP.exe"+3BA70BA: 73 1B                          -  jae ROTTR_UAP.exe+3BA70D7
"ROTTR_UAP.exe"+3BA70BC: 89 D0                          -  mov eax,edx
"ROTTR_UAP.exe"+3BA70BE: 48 8D 0C C0                    -  lea rcx,[rax+rax*8]
"ROTTR_UAP.exe"+3BA70C2: 48 C1 E1 05                    -  shl rcx,05
"ROTTR_UAP.exe"+3BA70C6: 4C 01 E1                       -  add rcx,r12
}


aob_LaraPositionWrite:
  db 49 63 F8 0F 28 79 10

unregistersymbol(aob_LaraPositionWrite)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3B8B403

"ROTTR_UAP.exe"+3B8B3D3: CC                                   -  int 3
"ROTTR_UAP.exe"+3B8B3D4: 66 66 66 2E 0F 1F 84 00 00 00 00 00  -  nop cs:[rax+rax+00000000]
"ROTTR_UAP.exe"+3B8B3E0: 48 89 5C 24 08                       -  mov [rsp+08],rbx
"ROTTR_UAP.exe"+3B8B3E5: 57                                   -  push rdi
"ROTTR_UAP.exe"+3B8B3E6: 48 83 EC 50                          -  sub rsp,50
"ROTTR_UAP.exe"+3B8B3EA: 48 89 CB                             -  mov rbx,rcx
"ROTTR_UAP.exe"+3B8B3ED: 0F 29 7C 24 30                       -  movaps [rsp+30],xmm7
"ROTTR_UAP.exe"+3B8B3F2: 48 8B 89 38 31 00 00                 -  mov rcx,[rcx+00003138]
"ROTTR_UAP.exe"+3B8B3F9: 44 0F 29 44 24 20                    -  movaps [rsp+20],xmm8
"ROTTR_UAP.exe"+3B8B3FF: 44 0F 28 02                          -  movaps xmm8,[rdx]
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3B8B403: 49 63 F8                             -  movsxd  rdi,r8d
"ROTTR_UAP.exe"+3B8B406: 0F 28 79 10                          -  movaps xmm7,[rcx+10]
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3B8B40A: E8 71 5D A1 FF                       -  call ROTTR_UAP.exe+35A1180
"ROTTR_UAP.exe"+3B8B40F: 48 8B 8B 38 31 00 00                 -  mov rcx,[rbx+00003138]
"ROTTR_UAP.exe"+3B8B416: 49 89 C0                             -  mov r8,rax
"ROTTR_UAP.exe"+3B8B419: 48 B8 00 00 00 00 FF FF FF FF        -  mov rax,FFFFFFFF00000000
"ROTTR_UAP.exe"+3B8B423: 48 8B 51 68                          -  mov rdx,[rcx+68]
"ROTTR_UAP.exe"+3B8B427: 48 85 D0                             -  test rax,rdx
"ROTTR_UAP.exe"+3B8B42A: 74 45                                -  je ROTTR_UAP.exe+3B8B471
"ROTTR_UAP.exe"+3B8B42C: 48 85 D2                             -  test rdx,rdx
"ROTTR_UAP.exe"+3B8B42F: 74 40                                -  je ROTTR_UAP.exe+3B8B471
"ROTTR_UAP.exe"+3B8B431: 81 FA 20 4E 00 00                    -  cmp edx,00004E20
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>3</ID>
                  <Description>"enable - hotkey F6"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>BowAimTeleport</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>117</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Skew Camera Cheat"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ROTTR_UAP.exe (paused)
  Version:
  Date   : 2016-02-07
  Author : mgr.inz.Player
  Idea: SunBeam
}

[ENABLE]

aobscanmodule(aob_skewCheatBeginning,ROTTR_UAP.exe,81 FB 4B 9B EE 79) // should be unique
registersymbol(aob_skewCheatBeginning)

alloc(newmem_skewCheat,$1000,ROTTR_UAP.exe)
label(code_skewCheat)
label(return_skewCheat)

label(skewCheat_Toggle)
registersymbol(skewCheat_Toggle)
label(skewCheat_LastState)

newmem_skewCheat:

skewCheat_Toggle:
dd 0
skewCheat_LastState:
dd 0

code_skewCheat:
  cmp [skewCheat_Toggle],0
  je @f

  mov [skewCheat_Toggle],0
  xor [skewCheat_LastState],1
  mov r8d,[skewCheat_LastState]
  mov ebx,A09458BC

@@:
  cmp ebx,79EE9B4B
  jmp return_skewCheat

aob_skewCheatBeginning:
  jmp code_skewCheat
  nop
return_skewCheat:

[DISABLE]
aob_skewCheatBeginning:
  db 81 FB 4B 9B EE 79

unregistersymbol(aob_skewCheatBeginning)
unregistersymbol(skewCheat_Toggle)
dealloc(newmem_skewCheat)
{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3B8C03C

"ROTTR_UAP.exe"+3B8C003: E8 18 CA C6 FF           -  call ROTTR_UAP.exe+37F8A20
"ROTTR_UAP.exe"+3B8C008: 48 8B 8F 40 31 00 00     -  mov rcx,[rdi+00003140]
"ROTTR_UAP.exe"+3B8C00F: 48 85 C9                 -  test rcx,rcx
"ROTTR_UAP.exe"+3B8C012: 0F 84 15 07 00 00        -  je ROTTR_UAP.exe+3B8C72D
"ROTTR_UAP.exe"+3B8C018: 0F B6 86 E2 01 00 00     -  movzx eax,byte ptr [rsi+000001E2]
"ROTTR_UAP.exe"+3B8C01F: 88 81 D0 04 00 00        -  mov [rcx+000004D0],al
"ROTTR_UAP.exe"+3B8C025: E9 03 07 00 00           -  jmp ROTTR_UAP.exe+3B8C72D
"ROTTR_UAP.exe"+3B8C02A: 81 FB 09 53 25 AD        -  cmp ebx,AD255309
"ROTTR_UAP.exe"+3B8C030: 0F 87 0B 04 00 00        -  ja ROTTR_UAP.exe+3B8C441
"ROTTR_UAP.exe"+3B8C036: 0F 84 6D 06 00 00        -  je ROTTR_UAP.exe+3B8C6A9
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3B8C03C: 81 FB BC 58 94 A0        -  cmp ebx,A09458BC
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3B8C042: 74 5B                    -  je ROTTR_UAP.exe+3B8C09F
"ROTTR_UAP.exe"+3B8C044: 81 FB 09 5F C6 A7        -  cmp ebx,A7C65F09
"ROTTR_UAP.exe"+3B8C04A: 0F 84 9A 04 00 00        -  je ROTTR_UAP.exe+3B8C4EA
"ROTTR_UAP.exe"+3B8C050: 81 FB CA FB 7F A8        -  cmp ebx,A87FFBCA
"ROTTR_UAP.exe"+3B8C056: 0F 85 37 06 00 00        -  jne ROTTR_UAP.exe+3B8C693
"ROTTR_UAP.exe"+3B8C05C: 8B 0D 46 76 77 FD        -  mov ecx,[ROTTR_UAP.exe+13036A8]
"ROTTR_UAP.exe"+3B8C062: 44 89 C0                 -  mov eax,r8d
"ROTTR_UAP.exe"+3B8C065: F7 D8                    -  neg eax
"ROTTR_UAP.exe"+3B8C067: C6 44 24 20 00           -  mov byte ptr [rsp+20],00
"ROTTR_UAP.exe"+3B8C06C: 45 31 C9                 -  xor r9d,r9d
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>5</ID>
                  <Description>"toggle - hotkey F7"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>skewCheat_Toggle</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>118</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"No Drag - hotkey F8"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(noDrag,ROTTR_UAP.exe,48 8B 88 D8 00 00 00 48 8B 0C D1 48 8D 54 24 30)
registersymbol(noDrag)

noDrag+10:
db EB 07

[DISABLE]
noDrag+10:
db 48 8B

unregistersymbol(noDrag)

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys>
                    <Key>119</Key>
                  </Keys>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Inventory"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_inventory_pointerbase,ROTTR_UAP.exe,4C 8B 81 48 01 00 00 49 83 78 38 00 74) // should be unique
registersymbol(aob_inventory_pointerbase)
alloc(newmem_inventory_pointerbase,$1000,ROTTR_UAP.exe)
label(return_inventory_pointerbase)

label(inventory_pointerbase)
registersymbol(inventory_pointerbase)

newmem_inventory_pointerbase:
  mov r8,[rcx+00000148]
  mov [inventory_pointerbase],r8
  jmp return_inventory_pointerbase

inventory_pointerbase:
dq 0

aob_inventory_pointerbase:
  jmp newmem_inventory_pointerbase
  nop
  nop
return_inventory_pointerbase:

[DISABLE]
aob_inventory_pointerbase:
  db 4C 8B 81 48 01 00 00

unregistersymbol(aob_inventory_pointerbase)
unregistersymbol(inventory_pointerbase)
dealloc(newmem_inventory_pointerbase)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Compact View Mode"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
function cycleFullCompact(sender,force)
  local state = not(compactmenuitem.Caption == 'Compact View Mode')
  if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
  getMainForm().Splitter1.Visible = state
  getMainForm().Panel4.Visible    = state
  getMainForm().Panel5.Visible    = state
end
function addCompactMenu()
  if compactmenualreadyexists then return end
  local parent = getMainForm().Menu.Items
  compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem)
  compactmenuitem.Caption = 'Compact View Mode'
  compactmenuitem.OnClick = cycleFullCompact
  compactmenualreadyexists = 'yes'
end
addCompactMenu()
cycleFullCompact(nil,true)
{$asm}

[DISABLE]
{$lua}
cycleFullCompact(nil,false)
{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"inventory_pointerbase"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>inventory_pointerbase</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>10</ID>
              <Description>"Prepare Inventory Map"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

ItemList_ID_Name = [[
1300392505:Cloth
1596491239:Herbs
1596518693:Hide
73319806:Salvage
1860591193:Mushrooms
516527174:Hardwood
2432172444:Feather
4200658040:Oil
3305195250:Boar Fat
4011968730:Deer Antler
1353721286:Exotic Hide
1358162264:Magnesite Ore
273513695:Bear Hide
1439296855:Technical Parts
3827729073:Byzantine Coins
2546518011:Chromite Ore
54359098:Cluster Arrow
911311014:Bear Trap
1014797730:Explosive Arrow
1410284630:Fire Arrow
1548887417:SMG Bullets
1563807238:Bandage
1764654631:Flashbang
1941840742:Sapling
2288237209:Arrows
2363594663:Handgun Bullet Hollow Point
2631568530:Poison Arrow
2721112983:Shotgun Bullets
2862006737:Grenade
3056299628:Pistol Bullets
3094493228:Endurance Food
3459366600:Spike Trap
4021324121:Fire Shotgun Bullets]]

  if syntaxcheck then return end
  if readQword('inventory_pointerbase')==nil or readQword('inventory_pointerbase')==0
  then
    showMessage("inventory_pointerbase not initialized.\nDo something in game: aim, open inventory, etc.")
    error()
  end

  ArrayOfPointers = readQword('[inventory_pointerbase]+28')
  totalCount = readInteger('[inventory_pointerbase]+38')
  if ArrayOfPointers==nil or ArrayOfPointers==0
  then
    showMessage("Couldn't get the list of items. Script needs update or you are in main menu.")
    error()
  end

  local al=getAddressList()
  mrPrepareInventory=al.getMemoryRecordByDescription('Prepare Inventory Map')
  while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end

  local function addmemrec(name,parent,address)
    local newmrID=al.createMemoryRecord()
    local newmrCount=al.createMemoryRecord()
    newmrID.Address = string.format('%X',address+0x8)
    newmrID.Description = name
    newmrID.ShowAsSigned = false
    newmrID.DropDownList.Text = ItemList_ID_Name
    newmrID.DropDownReadOnly = true
    newmrID.DropDownDescriptionOnly = true
    newmrID.DisplayAsDropDownListItem = true
    newmrID.appendToEntry(parent)
    newmrCount.Address = string.format('%X',address+0xC)
    newmrCount.Description = 'count:'
    newmrCount.appendToEntry(newmrID)
    return newmrID
  end

  local counter=0
  local counter2=0
  for i=ArrayOfPointers,ArrayOfPointers+800,8 do repeat
    local innerArray = readQword(i)
    counter=counter+1
    if innerArray==0 or readInteger(innerArray)==nil then break end
    counter2=counter2+1
    local newmrID=addmemrec('item'..counter..'  ID/Name:',mrPrepareInventory,innerArray)

    for j=1,10 do -- max deep: 10
      local innerInnerArray = readQword(innerArray)
      if innerInnerArray==0 or innerInnerArray==nil then break end
      counter2=counter2+1
      addmemrec('subitem'..j..'  ID/Name:',newmrID,innerInnerArray)
      innerArray = innerInnerArray
    end
  until true
  if counter2==totalCount then break end
  end


  if timerPrepareInventory==nil then timerPrepareInventory=createTimer(nil,false) end
  timerPrepareInventory.OnTimer =
    function (t)
      local tmp=readQword('[inventory_pointerbase]+28')
      if (tmp == 0) or (tmp == nil) then return end

      if (ArrayOfPointers == tmp ) and
         (totalCount == readQword('[inventory_pointerbase]+38'))
      then return end

      t.Enabled=false
      mrPrepareInventory.Active=false
      mrPrepareInventory.Active=true
    end
  timerPrepareInventory.Interval=2000
  timerPrepareInventory.Enabled=true

{$asm}


[DISABLE]
{$lua}
  if syntaxcheck then return end
  timerPrepareInventory.Enabled=false
  while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end
{$asm}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
