<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>91</ID>
      <Description>"[X] &lt;== COH2 v4.0.0.21603 Steam Script (ACTIVATE ME FIRST)"</Description>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Company Of Heroes 2
 Game Version  : 4.0.0.21603(steam)
 Game Sponsor  : Fennix102
 Proces Name   : RelicCoH2.exe
 Script Version: 2.0 (LUA/AOB)
 CE Version    : 6.5
 Release date  : 04-Oct-2016
 Author        : Recifense
 History:
 04-Oct-16: First Release
 Features:
 - Prepare environment for bypassing CRC-Check
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "RelicCoH2.exe") then
    ShowMessage('Error. Expected Process = RelicCoH2.exe')
  end
{$asm}

//=========================================
// Definitions
define(CODESIZE,0x01999200)
define(LUDO,RelicCoH2.exe)

//=========================================
[ENABLE]
//=========================================
alloc(CodeCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,$process)
//=========================================
label(iFlagOK)
label(pCodeCopy)
label(_ExitIM)
label(pJogador)

//=========================================
registersymbol(CodeCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pCodeCopy)
registersymbol(pJogador)
//=========================================
_IniMem:
 pushad
 pushfd

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 cld
 rep movsd

 push #500
 call kernel32.sleep

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 repe cmpsd

 test ecx,ecx
 jnz _ExitIM

 mov dword ptr [iFlagOK],55555555

_ExitIM:
 popfd
 popad
 ret
//=========================================
 db '=====================================&gt;'
 db 'CE6.5 Script by Recifense 100416'
//=========================================
// Variables
pCodeCopy:
 dd CodeCopy
iFlagOK:
 dd 0
pJogador:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(CodeCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pCodeCopy)
unregistersymbol(pJogador)
//=========================================
dealloc(CodeCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>24</ID>
      <Description>"[X] &lt;== Company Of Heroes 2 v4.0.0.21603 Steam Script 4.0"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Company Of Heroes 2
 Game Version  : 4.0.0.21603 (steam)
 Game Sponsor  : Fennix102
 Proces Name   : RelicCoH2.exe
 Script Version: 4.0
 CE Version    : 6.5
 Release date  : 05-Oct-2016
 Author        : Recifense
 History:
 27-Jun-13: First Release
 28-Jun-13: Release for version 3.0.0.9704  (RLD)
 01-Jul-13: Release for version 3.0.0.9720  (STEAM)
 11-Jul-13: Release for version 3.0.0.9804  (STEAM)
 30-Jul-13: Changed approach of player identification
 30-Jul-13: Release for version 3.0.0.9945  (STEAM)
 21-Aug-13: Release for version 3.0.0.10242 (STEAM)
 22-Aug-13: Release for version 3.0.0.10317 (STEAM)
 29-Aug-13: Release for version 3.0.0.10416 (STEAM) (Improved GM)
 01-Sep-13: Release for version 3.0.0.10416 (STEAM) (AOB)
 01-Mar-14: Release for version 3.0.0.12598 (STEAM)
 26-Mar-14: Release for version 3.0.0.13006 (STEAM)
 23-Jun-14: Release for version 3.0.0.14243 (STEAM) (AOB)(CE64)
 24-Jul-14: Release for version 3.0.0.14641 (STEAM)
 30-Oct-14: Release for version 3.0.0.16104 (STEAM)
 30-Oct-14: Release for version 3.0.0.16116 (STEAM)
 18-Nov-14: Release for version 3.0.0.16337 (STEAM) (AOB) +(prot bypass)
 19-Nov-14: Release for version 3.0.0.16337 (STEAM) +(prot bypass  )(s1.4)
 30-Nov-14: Release for version 3.0.0.16337 (STEAM) +(prot bypass 2)(s2.0)
 09-Dec-14: Release for version 3.0.0.16549 (STEAM)
 09-Dec-14: Release for version 3.0.0.16569 (STEAM)
 15-Dec-14: Release for version 3.0.0.16598 (STEAM) + CMD Cooldown (s3.0)
 05-Feb-15: Release for version 3.0.0.17120 (STEAM)
 31-Mar-15: Release for version 3.0.0.17580 (STEAM)
 18-Apr-15: Release for version 3.0.0.17779 (STEAM)
 24-Jun-15: Release for version 3.0.0.18664 (STEAM)
 26-Jun-15: Release for version 3.0.0.18705 (STEAM)
 02-Jul-15: Release for version 3.0.0.18741 (STEAM)
 02-Jul-15: Release for version 3.0.0.18778 (STEAM)
 21-Jul-15: Release for version 3.0.0.18993 (STEAM)
 01-Aug-15: Release for version 3.0.0.19100 (STEAM)
 03-Sep-15: Release for version 4.0.0.19533 (STEAM)
 05-Sep-15: Release for version 4.0.0.19545 (STEAM)
 06-Sep-15: Fix due to some crashes (s3.1)
 18-Sep-15: Release for version 4.0.0.19654 (STEAM)
 24-Sep-15: Release for version 4.0.0.19696 (STEAM)
 17-Oct-15: Release for version 4.0.0.20042 (STEAM) (s3.2)
 31-Oct-15: Release for version 4.0.0.20266 (STEAM) (s3.3)
 05-Dec-15: Release for version 4.0.0.20489 (STEAM)
 10-Dec-15: Release for version 4.0.0.20546 (STEAM)
 17-Dec-15: Release for version 4.0.0.20589 (STEAM)
 15-Jan-16: Release for version 4.0.0.20637 (STEAM)
 28-Jan-16: Added Fast Reinforcement/Improvement/Construction (S4.0)
 27-Feb-16: Release for version 4.0.0.20954 (STEAM)
 09-Mar-16: Release for version 4.0.0.20998 (STEAM)
 11-Mar-16: Release for version 4.0.0.21025 (STEAM) (no change at all)
 07-Apr-16: Release for version 4.0.0.21132 (STEAM)
 20-Apr-16: Release for version 4.0.0.21244 (STEAM)
 17-May-16: Release for version 4.0.0.21375 (STEAM)
 18-May-16: Release for version 4.0.0.21400 (STEAM)
 28-May-16: Release for version 4.0.0.21412 (STEAM)
 10-Jun-16: Release for version 4.0.0.21466 (STEAM)
 21-Jun-16: Release for version 4.0.0.21512 (STEAM)
 05-Jul-16: Release for version 4.0.0.21543 (STEAM)
 29-Jul-16: Release for version 4.0.0.21563 (STEAM)
 19-Aug-16: Release for version 4.0.0.21567 (STEAM)
 05-Oct-16: Release for version 4.0.0.21603 (STEAM)
Features:
 - Minimum Resources:
   - Manpower
   - Munition
   - Fuel
 - Maximum Pop Used
 - Quick Command Points
 - God Mode
 - Fast Cooldown
 - Fast Reinforcement/Improvement
 - Fast Construction
 - Protection Bypass
 - Protection Bypass 2
===========================================
}

//=========================================
// Checking CE version
{$lua}
  if(getCEVersion() &lt; 6.5) then
    ShowMessage('Sorry. CE version should be 6.5 or above')
  end
{$asm}

//=========================================
// Checking Selected Process
{$lua}
  if(process == nil) then
    ShowMessage('No process was selected')
  elseif (process ~= "RelicCoH2.exe") then
    ShowMessage('Error. Expected Process = RelicCoH2.exe')
  end
{$asm}

//=========================================
// Definitions
define(LUDO,"RelicCoH2.exe")
define(LUDOSTA,RelicCoH2.exe+0000e000)
define(LUDOEND,RelicCoH2.exe+016320d0)

define(MHPR,RelicCoH2.exe+00be37c0) //30=====
define(GDMD,RelicCoH2.exe+00e7b810) //30=====
define(GMD1,RelicCoH2.exe+00e7a048) //30=====
define(MPID,RelicCoH2.exe+0017dfda) //30=====
define(MGST,RelicCoH2.exe+0000e577) //30=====
define(GMD2,RelicCoH2.exe+00e7ce00) //30=====
define(GMD4,RelicCoH2.exe+00e7ce90) //30=====
define(MSUN,RelicCoH2.exe+00f23a6f) //30=====
define(MOCC,RelicCoH2.exe+00da3b10) //30=====
define(MORI,RelicCoH2.exe+00f52281) //30=====
define(MOPC,RelicCoH2.exe+00e5f48b) //30=====

define(BCCK,RelicCoH2.exe+016320c2) //30=====
define(BCK1,RelicCoH2.exe+0082b431) //30=====
define(BCK2,RelicCoH2.exe+0082b390) //30=====

define(JBCC,RelicCoH2.exe+0199bb88) //30===== (MSVCR100.dll+1E80)(memcpy)
define(BGM2,RelicCoH2.exe+00de14eb) //30===== Repair
define(RMHP,RelicCoH2.exe+00145a05) //30=====

//=========================================
define(ctCE65,(float)6.5)
//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MHPR,8b 81 b4 00 00 00 83 ec 08 85 c0 ?? ?? 8b 50 08 8d 48 08 8b 44 24)
assert(GDMD,83 ec 08 0f 57 db 56 8b f1 f3 0f 10 86 80 00 00 00 0f 2f c3 f3 0f)
assert(GMD1,f3 0f 11 41 3c ?? ?? f3 0f 11 49 3c f3 0f 10 81 80 00 00 00 f3 0f)
assert(MPID,89 17 89 47 04 e8 ?? ?? ?? ?? 8b 56 04 88 46 14 8b 0d ?? ?? ?? ??)
assert(MGST,8b 8e 8c 02 00 00 8b f8 e8 ?? ?? ?? ?? 33 db 84 c0 ?? ?? 3b fb ??)
assert(GMD2,f3 0f 10 54 24 04 56 8b f1 f3 0f 10 46 40 f3 0f 10 4e 3c 0f 28 d8)
assert(GMD4,83 ec 18 56 8b f1 80 7e 7d 00 0f 85 ?? ?? ?? ?? 8b 4e 0c 6a 0b e8)
assert(MSUN,8b 86 cc 00 00 00 8b c8 c1 e9 04 f6 c1 01 ?? ?? c1 e8 03 a8 01 ??)
assert(MOCC,8b 47 08 85 c0 ?? ?? 48 89 47 08 83 7f 08 00 0f 85 ?? ?? ?? ?? 8d)
assert(MORI,d9 5e 28 d9 ee d9 c9 df e9 dd d8 9f f6 c4 44 ?? ?? c6 44 24 12 01)
assert(MOPC,29 6e 14 8b 46 14 89 5e 18 ?? ?? 85 db ?? ?? 3b c3 ?? ?? 0f 57 c0)

assert(BCCK,ff 25 ?? ?? ?? ?? ff 25 ?? ?? ?? ?? ff 25 ?? ?? ?? ?? cc cc cc)
assert(BCK1,0f b6 07 03 c6 33 d2 be f1 ff 00 00 f7 f6 8b f2 8d 04 2e 33 d2)
assert(BCK2,8b 1f 2b 5c 24 30 33 d2 0f b6 c3 03 c6 be f1 ff 00 00 f7 f6 83)

//=========================================
alloc(MyCode,4096,$process)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_MonHP01)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonPlayerID)
label(_BackMPI)
label(_ExitMPI)
label(_MonGameStart)
label(_BackMGS)
label(_ExitMGS)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_GodMode4)
label(_BackGM4)
label(_ExitGM4)
label(_MonSelUnit)
label(_BackMSU)
label(_ExitMSU)
label(_MonCommandCooldown)
label(_BackMCC)
label(_ExitMCC)
label(_MonReinfImprov)
label(_BackMRI)
label(_ExitMRI)
label(_MonPlayerConst)
label(_BackMPC)
label(_ExitMPC)

label(_BypassCrcCheck)
label(_BackBCC)
label(_ExitBCC)
label(_BypassCrcCheck1)
label(_BackBC1)
label(_ExitBC1)
label(_BypassCrcCheck2)
label(_BackBC2)
label(_ExitBC2)

label(pUnit)
label(pSel)
label(pPlayer)
label(iPlayerID)
label(iEnableMPR)
label(iEnableGMD)
label(iEnableCPP)
label(iEnableMUP)
label(iEnableMCC)
label(iEnableMRI)
label(iEnableMPC)
label(iEnableCRC)
label(fValue)
label(pLast)

label(iEAX_Reg)
label(iECX_Reg)
label(iEDI_Reg)
label(iCount)
label(iCount1)
label(iCount2)
label(iCount3)
label(iCount4)
label(iCount5)
label(iCount6)
label(iCount7)
label(iLastAdd)
label(pCaller)
label(pCaller1)
label(pCaller2)
label(pCaller3)
label(pCaller4)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pUnit)
registersymbol(pSel)
registersymbol(pPlayer)
registersymbol(iPlayerID)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableCPP)
registersymbol(iEnableMUP)
registersymbol(iEnableMCC)
registersymbol(iEnableMRI)
registersymbol(iEnableMPC)
registersymbol(iCount)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount3)
registersymbol(iCount4)
registersymbol(iCount5)
registersymbol(iCount6)
registersymbol(iCount7)
registersymbol(iLastAdd)
registersymbol(fValue)
registersymbol(pLast)
registersymbol(pCaller)
registersymbol(pCaller1)
registersymbol(pCaller2)
registersymbol(pCaller3)
registersymbol(pCaller4)

//=========================================
MyCode:
//========================================= 300.16104
_MonHumanPlayer:
// mov dword ptr [pLast],'_MHP'

 inc dword ptr [iCount]

 mov edx,[esp+00]
 mov [pCaller],edx

 mov eax,[ecx+000000B4]            // Original code
 test eax,eax
 jz _ExitMHP

 cmp rdx,RMHP
 jne _ExitMHP

 mov ecx,[eax+08]
 cmp ecx,[iPlayerID]
 jne _ExitMHP

 mov [pPlayer],eax

 cmp dword ptr [iEnableMPR],0
 je _MonHP00                       // Jump if feature is disabled

 mov ecx,(float)2650.0

 mov edx,[eax+0000007c]            // Manpower
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+0000007c],edx

 mov edx,[eax+00000084]            // Munition
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000084],edx

 mov edx,[eax+00000080]            // Fuel
 cmp ecx,edx
 cmovg edx,ecx
 mov [eax+00000080],edx

_MonHP00:
 cmp dword ptr [iEnableMUP],0
 je _MonHP01                       // Jump if feature is disabled

 mov ecx,(float)50.0
 cmp ecx,[eax+000004a8]
 jns _MonHP01

 mov [eax+000004a8],ecx

_MonHP01:
 cmp dword ptr [iEnableCPP],0
 je _ExitMHP                       // Jump if feature is disabled

 mov ecx,(float)15.0
 cmp ecx,[eax+0000008c]
 js _ExitMHP

 mov ecx,(float)1990.0
 cmp ecx,[eax+00000088]            // Command Point Progress
 jle _ExitMHP

 mov [eax+00000088],ecx

_ExitMHP:
 jmp _BackMHP                      // Back to main code

//========================================= 300.14243
_GodMode:
 mov dword ptr [pLast],'_GDM'

 inc dword ptr [iCount1]

 push eax

 mov eax,[esp+04]
 mov [pCaller1],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGMD

 fld1

 pop eax
 ret 0008
//==
_ExitGMD:
 pop eax

 sub esp,08                        // Original code
 xorps xmm3,xmm3                   // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 300.14243
_GodMode1:
 mov dword ptr [pLast],'_GM1'

 inc dword ptr [iCount2]

 push eax

 mov eax,[esp+08]
 mov [pCaller2],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 mov [pUnit],ecx                   // Save ptr for debugging

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM1

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM1

 movss xmm0,[ecx+40]

_ExitGM1:
 pop eax

 comiss xmm0,xmm1                  // Original code
 movss [ecx+3C],xmm0               // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 300.12598
_MonPlayerID:
 mov [iPlayerID],edx

_ExitMPI:
 mov [edi],edx                     // Original code
 mov [edi+04],eax                  // Original code
 jmp _BackMPI                      // Back to main code

//========================================= 300.18664
_MonGameStart:
 inc dword ptr [iCount7]

 mov dword ptr [iPlayerID],#9999

_ExitMGS:
 mov ecx,[esi+0000028C]            // Original code
 jmp _BackMGS                      // Back to main code

//========================================= 300.13006
_GodMode2:
 mov dword ptr [pLast],'_GM2'

 inc dword ptr [iCount3]

 push eax

 mov eax,[esp+04]
 mov [pCaller3],eax

 cmp eax,BGM2
 je _ExitGM2

 mov eax,[esp+08]
 mov [fValue],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 mov eax,[ecx+0c]
 test eax,eax
 jz _ExitGM2

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitGM2

 pop eax

 ret 0008
//==
_ExitGM2:
 pop eax

 movss xmm2,[esp+04]               // Original code
 jmp _BackGM2                      // Back to main code

//========================================= 400.16545
_GodMode4:
 mov dword ptr [pLast],'_GM4'

 inc dword ptr [iCount4]

 push eax

 mov eax,[esp+04]
 mov [pCaller4],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGM4                       // Jump if feature is disabled

 mov [pUnit],ecx                   // Save ptr for debugging

 mov eax,[ecx+0c]                  // pUnit
 test eax,eax
 jz _ExitGM4

 mov eax,[eax+000000b4]            // pPlayer
 cmp eax,[pPlayer]
 jne _ExitGM4

 pop eax

 ret 0020
//==
_ExitGM4:
 pop eax

 sub esp,18                        // Original code
 push esi                          // Original code
 mov esi,ecx                       // Original code
 jmp _BackGM4                      // Back to main code

//========================================= 300.16337 (NHP)
// Game paused
_MonSelUnit:
 mov [pSel],esi

_ExitMSU:
 mov eax,[esi+000000CC]            // Original code (Unit+CC)
 jmp _BackMSU                      // Back to main code

//========================================= 400.19533
// When cooling down
_MonCommandCooldown:
 mov dword ptr [pLast],'_MCC'

 cmp dword ptr [iEnableMCC],0
 je _ExitMCC                       // Jump if feature is disabled

 mov eax,[esp+04]
 cmp eax,[pPlayer]
 jne _ExitMCC

 mov eax,#100
 cmp eax,[edi+08]
 jns _ExitMCC

 mov [edi+08],eax

_ExitMCC:
 mov eax,[edi+08]                  // Original code (get cooldown)
 test eax,eax                      // Original code
 jmp _BackMCC                      // Back to main code

//========================================= 400.20637 (NEW)
// When Improving/Reinforcing
_MonReinfImprov:
 mov dword ptr [pLast],'_MRI'

 fstp dword ptr [esi+28]           // Original code (set progress)

 cmp dword ptr [iEnableMRI],0
 je _ExitMRI                       // Jump if feature is disabled

 cmp ebp,[pPlayer]
 jne _ExitMRI

 mov eax,(float)32.0
 cmp eax,[esi+28]
 jns _ExitMRI

 mov [esi+28],eax

_ExitMRI:
 fldz                              // Original code
 jmp _BackMRI                      // Back to main code

//========================================= 400.20637 (NEW)
// When Constructing
_MonPlayerConst:
 pushfd

 mov dword ptr [pLast],'_MPC'

 sub [esi+14],ebp                  // Original code (set progress)

 cmp dword ptr [iEnableMPC],0
 je _ExitMPC                       // Jump if feature is disabled

 mov eax,[esi+0c]
 test eax,eax
 jz _ExitMPC

 mov eax,[eax+000000b4]
 cmp eax,[pPlayer]
 jne _ExitMPC

 mov eax,#32
 cmp eax,[esi+14]
 jns _ExitMPC

 mov [esi+14],eax

_ExitMPC:
 popfd

 mov eax,[esi+14]                  // Original code
 jmp _BackMPC                      // Back to main code

//========================================= 300.16337
_BypassCrcCheck:
 mov [iEAX_Reg],eax
 mov [iECX_Reg],ecx

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBCC

 cmp dword ptr [iEnableCRC],0
 je _ExitBCC                       // Jump if feature is disabled

 mov ecx,[esp+08]

 cmp ecx,LUDOSTA
 jl _ExitBCC

 cmp ecx,LUDOEND
 jge _ExitBCC

 mov [iLastAdd],ecx

 mov eax,LUDO
 sub ecx,eax
 mov eax,CodeCopy
 add ecx,eax

 inc dword ptr [iCount5]

 mov [esp+08],ecx

_ExitBCC:
 mov eax,[iEAX_Reg]
 mov ecx,[iECX_Reg]

 jmp dword ptr [JBCC]              // Original code
 jmp _BackBCC                      // Back to main code (keeping the template)

//========================================= 300.16337
_BypassCrcCheck1:
 movzx eax,byte ptr [edi]          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC1

 cmp dword ptr [iEnableCRC],0
 je _ExitBC1                       // Jump if feature is disabled

 cmp edi,LUDOSTA
 jl _ExitBC1

 cmp edi,LUDOEND
 jge _ExitBC1

 inc dword ptr [iCount6]

 mov [iEDI_Reg],edi

 mov eax,LUDO
 sub edi,eax
 mov eax,CodeCopy
 add edi,eax

 movzx eax,byte ptr [edi]          // Read from copy

 mov edi,[iEDI_Reg]

_ExitBC1:
 add eax,esi                       // Original code
 jmp _BackBC1                      // Back to main code (keeping the template)

//========================================= new
_BypassCrcCheck2:
 mov ebx,[edi]                     // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBC2

 cmp dword ptr [iEnableCRC],0
 je _ExitBC2                       // Jump if feature is disabled

 cmp edi,LUDOSTA
 jl _ExitBC2

 cmp edi,LUDOEND
 jge _ExitBC2

 inc dword ptr [iCount7]

 mov [iEDI_Reg],edi

 mov ebx,LUDO
 sub edi,ebx
 mov ebx,CodeCopy
 add edi,ebx

 mov ebx,[edi]                     // Read from copy

 mov edi,[iEDI_Reg]

_ExitBC2:
 sub ebx,[esp+30]                  // Original code
 jmp _BackBC2                      // Back to main code (keeping the template)

//=========================================
 db '===============================&gt;'
 db 'CE6.5 Script by Recifense 100516'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableCPP:
 dd 0
iEnableMUP:
 dd 0
iEnableMCC:
 dd 0
iEnableMRI:
 dd 0
iEnableMPC:
 dd 0
iEnableCRC:
 dd 1
pUnit:
 dd 0
pSel:
 dd 0
pPlayer:
 dd MyCode
iPlayerID:
 dd #9999
iEAX_Reg:
 dd 0
iECX_Reg:
 dd 0
iEDI_Reg:
 dd 0
iCount:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0
iCount3:
 dd 0
iCount4:
 dd 0
iCount5:
 dd 0
iCount6:
 dd 0
iCount7:
 dd 0
iLastAdd:
 dd 0
pCaller:
 dd 0
pCaller1:
 dd 0
pCaller2:
 dd 0
pCaller3:
 dd 0
pCaller4:
 dd 0
fValue:
 dd 0
pLast:
 db 'CE65'

//=========================================
// Hacking Points
MHPR:
 jmp _MonHumanPlayer
 nop
_BackMHP:

GDMD:
 jmp _GodMode
 nop
_BackGMD:

GMD1:
 jmp _GodMode1
_BackGM1:

MPID:
 jmp _MonPlayerID
_BackMPI:

MGST:
 jmp _MonGameStart
 nop
_BackMGS:

GMD2:
 jmp _GodMode2
 nop
_BackGM2:

GMD4:
 jmp _GodMode4
 nop
_BackGM4:

MSUN:
 jmp _MonSelUnit
 nop
_BackMSU:

MOCC:
 jmp _MonCommandCooldown
_BackMCC:

MORI:
 jmp _MonReinfImprov
_BackMRI:

MOPC:
 jmp _MonPlayerConst
 nop
_BackMPC:

BCCK:
 jmp _BypassCrcCheck
 nop
_BackBCC:

BCK1:
 jmp _BypassCrcCheck1
_BackBC1:

BCK2:
 jmp _BypassCrcCheck2
 nop
_BackBC2:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MHPR:
// mov eax,[ecx+000000B4]
 db 8b 81 b4 00 00 00

GDMD:
// sub esp,08
// xorps xmm3,xmm3
 db 83 ec 08 0f 57 db

GMD1:
// movss [ecx+3C],xmm0
 db f3 0f 11 41 3c

MPID:
// mov [edi],edx
// mov [edi+04],eax
 db 89 17 89 47 04

MGST:
// mov ecx,[esi+0000028C]
 db 8b 8e 8c 02 00 00

GMD2:
// movss xmm2,[esp+04]
 db f3 0f 10 54 24 04

GMD4:
// sub esp,18
// push esi
// mov esi,ecx
 db 83 ec 18 56 8b f1

MSUN:
// mov eax,[esi+000000CC]
 db 8b 86 cc 00 00 00

MOCC:
// mov eax,[edi+08]
// test eax,eax
 db 8b 47 08 85 c0

MORI:
// fstp dword ptr [esi+28]
// fldz
 db d9 5e 28 d9 ee

MOPC:
// sub [esi+14],ebp
// mov eax,[esi+14]
 db 29 6e 14 8b 46 14

BCCK:
 jmp dword ptr [JBCC]

BCK1:
// movzx eax,byte ptr [edi]
// add eax,esi
 db 0f b6 07 03 c6

BCK2:
// mov ebx,[edi]
// sub ebx,[esp+30]
 db 8b 1f 2b 5c 24 30

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pUnit)
unregistersymbol(pSel)
unregistersymbol(pPlayer)
unregistersymbol(iPlayerID)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableCPP)
unregistersymbol(iEnableMUP)
unregistersymbol(iEnableMCC)
unregistersymbol(iEnableMRI)
unregistersymbol(iEnableMPC)
unregistersymbol(iCount)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount3)
unregistersymbol(iCount4)
unregistersymbol(iCount5)
unregistersymbol(iCount6)
unregistersymbol(iCount7)
unregistersymbol(iLastAdd)
unregistersymbol(fValue)
unregistersymbol(pLast)
unregistersymbol(pCaller)
unregistersymbol(pCaller1)
unregistersymbol(pCaller2)
unregistersymbol(pCaller3)
unregistersymbol(pCaller4)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{

}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(98).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(98).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"[X] &lt;== Minimum Resources -----------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
getAddressList().getMemoryRecordByID(229).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
getAddressList().getMemoryRecordByID(229).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"[X] &lt;== Command Points Progress  -------------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableCPP",1)
getAddressList().getMemoryRecordByID(230).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableCPP",0)
getAddressList().getMemoryRecordByID(230).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>232</ID>
          <Description>"[X] &lt;== Unilimited Population  ---------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUP",1)
getAddressList().getMemoryRecordByID(232).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUP",0)
getAddressList().getMemoryRecordByID(232).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>255</ID>
          <Description>"[X] &lt;== Fast Cooldown  ------------------------------------------&gt; (HK: CTRL+numeric 1 / CTRL+numeric 0)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMCC",1)
getAddressList().getMemoryRecordByID(255).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMCC",0)
getAddressList().getMemoryRecordByID(255).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>256</ID>
          <Description>"[X] &lt;== Fast Reinforcement/Improvement  -------------&gt; (HK: CTRL+numeric 2 / CTRL+numeric 0)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMRI",1)
getAddressList().getMemoryRecordByID(256).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMRI",0)
getAddressList().getMemoryRecordByID(256).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>98</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>257</ID>
          <Description>"[X] &lt;== Fast Construction ---------------------------------------&gt; (HK: CTRL+numeric 3 / CTRL+numeric 0)"</Description>
          <LastState/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPC",1)
getAddressList().getMemoryRecordByID(257).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPC",0)
getAddressList().getMemoryRecordByID(257).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>99</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20161005</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Company Of Heroes 2
 Game Version  : 4.0.0.21603 (steam)
 Game Sponsor  : Fennix102
 Proces Name   : RelicCoH2.exe
 Script Version: 4.0
 CE Version    : 6.5
 Release date  : 05-Oct-2016
 Author        : Recifense
 History:
 27-Jun-13: First Release
 28-Jun-13: Release for version 3.0.0.9704  (RLD)
 01-Jul-13: Release for version 3.0.0.9720  (STEAM)
 11-Jul-13: Release for version 3.0.0.9804  (STEAM)
 30-Jul-13: Changed approach of player identification
 30-Jul-13: Release for version 3.0.0.9945  (STEAM)
 21-Aug-13: Release for version 3.0.0.10242 (STEAM)
 22-Aug-13: Release for version 3.0.0.10317 (STEAM)
 29-Aug-13: Release for version 3.0.0.10416 (STEAM) (Improved GM)
 01-Sep-13: Release for version 3.0.0.10416 (STEAM) (AOB)
 01-Mar-14: Release for version 3.0.0.12598 (STEAM)
 26-Mar-14: Release for version 3.0.0.13006 (STEAM)
 23-Jun-14: Release for version 3.0.0.14243 (STEAM) (AOB)(CE64)
 24-Jul-14: Release for version 3.0.0.14641 (STEAM)
 30-Oct-14: Release for version 3.0.0.16104 (STEAM)
 30-Oct-14: Release for version 3.0.0.16116 (STEAM)
 18-Nov-14: Release for version 3.0.0.16337 (STEAM) (AOB) +(prot bypass)
 19-Nov-14: Release for version 3.0.0.16337 (STEAM) +(prot bypass  )(s1.4)
 30-Nov-14: Release for version 3.0.0.16337 (STEAM) +(prot bypass 2)(s2.0)
 09-Dec-14: Release for version 3.0.0.16549 (STEAM)
 09-Dec-14: Release for version 3.0.0.16569 (STEAM)
 15-Dec-14: Release for version 3.0.0.16598 (STEAM) + CMD Cooldown (s3.0)
 05-Feb-15: Release for version 3.0.0.17120 (STEAM)
 31-Mar-15: Release for version 3.0.0.17580 (STEAM)
 18-Apr-15: Release for version 3.0.0.17779 (STEAM)
 24-Jun-15: Release for version 3.0.0.18664 (STEAM)
 26-Jun-15: Release for version 3.0.0.18705 (STEAM)
 02-Jul-15: Release for version 3.0.0.18741 (STEAM)
 02-Jul-15: Release for version 3.0.0.18778 (STEAM)
 21-Jul-15: Release for version 3.0.0.18993 (STEAM)
 01-Aug-15: Release for version 3.0.0.19100 (STEAM)
 03-Sep-15: Release for version 4.0.0.19533 (STEAM)
 05-Sep-15: Release for version 4.0.0.19545 (STEAM)
 06-Sep-15: Fix due to some crashes (s3.1)
 18-Sep-15: Release for version 4.0.0.19654 (STEAM)
 24-Sep-15: Release for version 4.0.0.19696 (STEAM)
 17-Oct-15: Release for version 4.0.0.20042 (STEAM) (s3.2)
 31-Oct-15: Release for version 4.0.0.20266 (STEAM) (s3.3)
 05-Dec-15: Release for version 4.0.0.20489 (STEAM)
 10-Dec-15: Release for version 4.0.0.20546 (STEAM)
 17-Dec-15: Release for version 4.0.0.20589 (STEAM)
 15-Jan-16: Release for version 4.0.0.20637 (STEAM)
 28-Jan-16: Added Fast Reinforcement/Improvement/Construction (S4.0)
 27-Feb-16: Release for version 4.0.0.20954 (STEAM)
 09-Mar-16: Release for version 4.0.0.20998 (STEAM)
 11-Mar-16: Release for version 4.0.0.21025 (STEAM) (no change at all)
 07-Apr-16: Release for version 4.0.0.21132 (STEAM)
 20-Apr-16: Release for version 4.0.0.21244 (STEAM)
 17-May-16: Release for version 4.0.0.21375 (STEAM)
 18-May-16: Release for version 4.0.0.21400 (STEAM)
 28-May-16: Release for version 4.0.0.21412 (STEAM)
 10-Jun-16: Release for version 4.0.0.21466 (STEAM)
 21-Jun-16: Release for version 4.0.0.21512 (STEAM)
 05-Jul-16: Release for version 4.0.0.21543 (STEAM)
 29-Jul-16: Release for version 4.0.0.21563 (STEAM)
 19-Aug-16: Release for version 4.0.0.21567 (STEAM)
 05-Oct-16: Release for version 4.0.0.21603 (STEAM)
Features:
 - Minimum Resources:             [1]
   - Manpower
   - Munition
   - Fuel
 - Quick Command Points           [2]
 - God Mode                       [3]
 - Maximum Pop Used               [4]
 - Fast Cooldown                  [5]
 - Fast Reinforcement/Improvement [6]
 - Fast Construction              [7]
 - Protection Bypass   (new)
 - Protection Bypass 2 (new)
===========================================
[1] Resources will not go under minimum value (2650);
[2] Quick CP acquisition;
[3] That's it.
[4] Used Pop will not go over 50;
[5] Cooldown will start on 100;
[6] Time is reduced;
[7] Time is reduced;
===========================================
[USAGE] 
1) Run CE65; 
2) Run Game; 
3) Load the game process "RelicCoH2.exe" in CE; 
4) Load this table; 
5) Activate the first script (in blue) by checking/clicking its box [X]; 
6) Activate the second script (in blue) by checking/clicking its box [X]; 
7) Now Activate the script of each cheat you want to use;
8) Go back to the game and have fun.
===========================================
HOTKEYS:
CTRL+Home     = Enable  Resource/GM cheats;
CTRL+End      = Disable Resource/GM cheats;
----------
CTRL+PageUp   = Enable  CP cheat;
CTRL+PageDown = Disable CP cheat;
----------
CTRL+Inserte  = Enable  MPU(UP) cheat;
CTRL+Delete   = Disable MPU(UP) cheat;
----------
CTRL+Numeric 1 = Enable  FCD   cheat;
CTRL+Numeric 2 = Enable  FR/FI cheats;
CTRL+Numeric 3 = Enable  FC    cheat;
CTRL+Numeric 0 = Disable FCD/FR/FI/FC cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
