<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Ascension to the Throne V1.1.0.127 Russian Script"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Ascension to the Throne
 Game Version  : 1.1.0.127 (Russian)
 Script Version: 1.0
 CE Version    : 6.2
 God Mode, Value Searcher
 22-Jun-2007 Version in TSearchB
 26-Dec-2010 Adapted to CE56 and added _ValueSearcher
 06-Jul-2012 Adapted to a Russian version of the game (NOT EASY)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Game.exe+0000aa05,8b 17 8b 44 24 24) //_VS
assert(Game.exe+00113680,64 a1 00 00 00 00) //_MC
assert(Game.exe+001136C0,89 86 ec 01 00 00) //_GM

//=========================================
alloc(MyCode,2048,"Game.exe")
//=========================================
// Declaration section
label(_ValueSearcher)
label(_BackVS)
label(_ExitVS)
label(_MonCaller)
label(_BackMC)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_GodM0)
label(iEnableGM)
label(pLast)
label(iCaller)
label(fValue2Search)
label(iAddress)

registersymbol(MyCode)
registersymbol(iEnableGM)
registersymbol(pLast)
registersymbol(fValue2Search)
registersymbol(iAddress)

//=========================================
MyCode:
//=========================================
// Find the address of float value in the game
_ValueSearcher:
 mov edx,[edi]                  // Original code

 cmp edx,[fValue2Search]        // Is it the Value to be found?
 jne _ExitVS                    // Jump if false

 mov [iAddress],edi             // Save value address

_ExitVS:
 mov eax,[esp+24]               // Original code
 jmp _BackVS                    // Back to main code

//=========================================
// This identifies the caller for updating hp
_MonCaller:
 mov eax,[esp]                  // Get the address to return to
 mov [iCaller],eax              // Save it for further use

 mov eax,fs:[00000000]          // Original code
 jmp _BackMC                    // Back to main code

//=========================================
_GodMode:
 push ecx                       // Save Register context
 pushfd                         // Save EFLAGS context

 mov [pLast],esi                // Save pointer for debugging

// This is for avoiding crashes
 mov ecx,[iCaller]              // Get caller address
 cmp ecx,Game.exe+001165b6      // Is it the caller from battle ?
 jne _ExitGM                    // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                     // Jump if feature is disabled

 mov ecx,[esi+000002c8]         // Get ptr to unit info
 or ecx,ecx
 jz _ExitGM                     // Jump if null pointer

 cmp dword ptr [ecx+00000094],0 // Player Unit?
 jne _ExitGM                    // Jump if false

_GodM0:
 mov eax,#5000
 mov [esi+000001e0],eax         // Make Maximum HP = 5000

_ExitGM:
 popfd                          // Restore EFLAGS context
 pop ecx                        // Restore Register context

 mov [esi+000001ec],eax         // Original code
 jmp _BackGM                    // Back to main code

//=========================================
// Variables
iEnableGM:
 dd 1
pLast:
 dd 0
iCaller:
 dd 0
fValue2Search:
 dd (float)999999.0
iAddress:
 dd 0

//=========================================
// Hacking Points
Game.exe+0000aa05:
 jmp _ValueSearcher
 nop
_BackVS:

Game.exe+00113680:
 jmp _MonCaller
 nop
_BackMC:

Game.exe+001136C0:
 jmp _GodMode
 nop
_BackGM:

//=========================================
// Original Codes
[DISABLE]
Game.exe+0000aa05:
 mov edx,[edi]
 mov eax,[esp+24]

Game.exe+00113680:
 mov eax,fs:[00000000]

Game.exe+001136C0:
 mov [esi+000001ec],eax

unregistersymbol(MyCode)
unregistersymbol(iEnableGM)
unregistersymbol(pLast)
unregistersymbol(fValue2Search)
unregistersymbol(iAddress)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"ATT Valkyrie V1.0.163.0 Russian Script"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Ascension to the Throne - Valkyrie
 Game Version  : 1.0.163.0 (Russian)
 Script Version: 1.0
 CE Version    : 6.2
 God Mode, Value Searcher
 22-Jun-2007 Version in TSearchB
 26-Dec-2010 Adapted to CE56 and added _ValueSearcher
 27-Dec-2010 Adapted to Valkyrie
 06-Jul-2012 Adapted to a Russian version of the game (NOT EASY)
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(Game.exe+0000a677,8b 4d 00 8b 44 24 24)
assert(Game.exe+0024ba30,64 a1 00 00 00 00)
assert(Game.exe+0024ba70,89 86 ec 01 00 00)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section

label(_ValueSearcher)
label(_BackVS)
label(_ExitVS)
label(_MonCaller)
label(_BackMC)
label(_GodMode)
label(_BackGM)
label(_ExitGM)
label(_GodM0)
label(iEnableGM)
label(pLast)
label(iCaller)
label(fValue2Search)
label(iAddress)

registersymbol(MyCode)
registersymbol(iEnableGM)
registersymbol(pLast)
registersymbol(fValue2Search)
registersymbol(iAddress)

//=========================================
MyCode:

//=========================================
// Find the address of float value in the game
_ValueSearcher:
 mov ecx,[ebp+00]               // Original code

 cmp ecx,[fValue2Search]        // Is it the Value to be found?
 jne _ExitVS                    // Jump if false

 mov [iAddress],ebp             // Save value address

_ExitVS:
 mov eax,[esp+24]               // Original code
 jmp _BackVS                    // Back to main code

//=========================================
// This identifies the caller for updating hp
_MonCaller:
 mov eax,[esp]                  // Get the address to return to
 mov [iCaller],eax              // Save it for further use

 mov eax,fs:[00000000]          // Original code
 jmp _BackMC                    // Back to main code

//=========================================
_GodMode:
 push ecx                       // Save Register context
 pushfd                         // Save EFLAGS context

 mov [pLast],esi                // Save pointer for debugging

// This is for avoiding crashes
 mov ecx,[iCaller]              // Get caller address
 cmp ecx,Game.exe+0024e996      // Is it the caller from battle ?
 jne _ExitGM                    // Jump if false

 cmp dword ptr [iEnableGM],0
 je _ExitGM                     // Jump if feature is disabled

 mov ecx,[esi+000002c8]         // Get ptr to unit info
 or ecx,ecx
 jz _ExitGM                     // Jump if null pointer

 cmp dword ptr [ecx+00000094],0 // Player Unit?
 jne _ExitGM                    // Jump if false

_GodM0:
 mov eax,#5000
 mov [esi+000001e0],eax         // Make Maximum HP = 5000

_ExitGM:
 popfd                          // Restore EFLAGS context
 pop ecx                        // Restore Register context

 mov [esi+000001ec],eax         // Original code
 jmp _BackGM                    // Back to main code

//=========================================
// Variables
iEnableGM:
 dd 1
pLast:
 dd 0
iCaller:
 dd 0
fValue2Search:
 dd (float)999999.0
iAddress:
 dd 0

//=========================================
// Hacking Points

Game.exe+0000a677:
 jmp _ValueSearcher
 nop
 nop
_BackVS:

Game.exe+0024ba30:
 jmp _MonCaller
 nop
_BackMC:

Game.exe+0024ba70:
 jmp _GodMode
 nop
_BackGM:

//=========================================
// Original Codes
[DISABLE]

Game.exe+0000a677:
 mov ecx,[ebp+00]
 mov eax,[esp+24]

Game.exe+0024ba30:
 mov eax,fs:[00000000]

Game.exe+0024ba70:
 mov [esi+000001ec],eax

unregistersymbol(MyCode)
unregistersymbol(iEnableGM)
unregistersymbol(pLast)
unregistersymbol(fValue2Search)
unregistersymbol(iAddress)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable/Disable God Mode"</Description>
      <Color>008000</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enter Value to be searched"</Description>
      <Color>0000FF</Color>
      <VariableType>Float</VariableType>
      <Address>fValue2Search</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Found, if this value is the same as the searched one "</Description>
      <Color>0000FF</Color>
      <VariableType>Float</VariableType>
      <Address>iAddress</Address>
      <Offsets>
        <Offset>0</Offset>
      </Offsets>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>024C008B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pLast</Name>
      <Address>024C008F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fValue2Search</Name>
      <Address>024C0097</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iAddress</Name>
      <Address>024C009B</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Ascension to the Throne
 Game Version  : 1.1.0.127 (Russian)
 Script Version: 1.0
 CE Version    : 6.2
 God Mode, Value Searcher
 22-Jun-2007 Version in TSearchB
 26-Dec-2010 Adapted to CE56 and added _ValueSearcher
 06-Jul-2012 Adapted to a Russian version of the game (NOT EASY)
===========================================
===========================================
 Ascension to the Throne - Valkyrie
 Game Version  : 1.0.163.0 (Russian)
 Script Version: 1.0
 CE Version    : 6.2
 God Mode, Value Searcher
 22-Jun-2007 Version in TSearchB
 26-Dec-2010 Adapted to CE56 and added _ValueSearcher
 27-Dec-2010 Adapted to Valkyrie
 06-Jul-2012 Adapted to a Russian version of the game (NOT EASY)
===========================================
</Comments>
</CheatTable>
