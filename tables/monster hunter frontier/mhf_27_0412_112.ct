<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>1064</ID>
      <Description>"戦闘"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1065</ID>
          <Description>"敵即死or(HP固定)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_faddr+3b)
define(bytes,0F BF D1 33 C2)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)
label(mob_hp)
registersymbol(mob_hp)

address:
jmp newmem
returnhere:

newmem:
movsx edx,cx
xor eax,edx
mov eax,[mob_hp]
jmp returnhere

mob_hp:
db 00 00 00 00
[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1066</ID>
              <Description>"敵HP"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>mob_hp</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1067</ID>
          <Description>"敵即死(即死タイマー)"</Description>
          <LastState Activated="0"/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_faddr+3b)
define(bytes,0F BF D1 33 C2)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)
alloc(newmem1,2048)
label(returnhere1)
alloc(q_time,4)
registersymbol(q_time)
label(_taddr)
registersymbol(_taddr)
alloc(quest_time,4)
registersymbol(quest_time)

[mhfo.dll+_f1addr+8]:
_taddr:

newmem1:
push ecx
mov ecx,[eax+10]
mov [quest_time],ecx
pop ecx
mov eax,[_taddr]
jmp returnhere1

mhfo.dll+_f1addr+7:
jmp newmem1
returnhere1:

address:
jmp newmem
returnhere:

newmem:
movsx edx,cx
xor eax,edx
cmp [quest_time],0
je returnhere
mov edx,[quest_time]
push eax
xor eax,eax
mov eax,708
push edx
mul [q_time]
pop edx
cmp edx,eax
pop eax
ja returnhere
cmp edx,64
jb returnhere
xor eax,eax
jmp returnhere

q_time:
db 32

quest_time:
db 00 00 00 00
[disable]
mhfo.dll+_f1addr+7:
mov eax,[_taddr]

address:
db bytes

dealloc(newmem)
dealloc(newmem1)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1068</ID>
              <Description>"タイマー(指定分以下で即死)"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>q_time</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1069</ID>
          <Description>"敵操作色々"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_faddr)
define(bytes,0F B7 8A 24 06 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
alloc(damage_down,256)
alloc(damage_up,256)
alloc(destruction,256)
alloc(speed_down,256)
alloc(mob,256)
alloc(mob_addr,4)
registersymbol(damage_down)
registersymbol(damage_up)
registersymbol(destruction)
registersymbol(mob)
registersymbol(mob_addr)
registersymbol(speed_down)
label(returnhere)


address:
jmp newmem
nop
nop
returnhere:

newmem:
movzx ecx,word ptr [edx+00000624]
cmp byte ptr[edx+3],0a//jijiji
je returnhere
cmp byte ptr[edx+3],12//niguruma
je returnhere
cmp byte ptr[edx+3],1d//iwa
je returnhere
cmp byte ptr[edx+3],56//saboten
je returnhere
cmp byte ptr[edx+3],57//mokekepiropiro
je returnhere
cmp byte ptr[edx+3],58//syounyuuseki
je returnhere
mov [mob_addr],edx
call damage_down
call damage_up
call mob
call destruction
call speed_down
jmp returnhere

damage_down:
db 90 90 90 90 90 90 90 90 90 90
ret

destruction:
db 90 90 90 90 90 90 90
ret

mob:
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90
ret

speed_down:
db 90 90 90 90 90 90 90 90 90 90
ret

damage_up:
db 90 90 90 90 90 90 90 90 90 90
ret

[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1070</ID>
              <Description>"部位破壊メイン"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,mhfo.dll+_f47addr+12)
define(bytes,66 83 BC 5E 88 06 00 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

newmem:
mov word ptr[esi+ebx*2+00000688],ff
cmp word ptr [esi+ebx*2+00000688],00
jmp returnhere

address:
jmp newmem
nop
nop
nop
nop
returnhere:
[disable]
dealloc(newmem)
address:
db bytes

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1071</ID>
              <Description>"部位破壊同期"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
destruction:
mov byte ptr[edx+00000cc8],ff
ret


[disable]
destruction:
db 90 90 90 90 90 90 90
ret

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1072</ID>
              <Description>"与ダメアップ(全体防御率100)"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
damage_up:
mov dword ptr[edx+8ac],(float)100
ret


[disable]
damage_up:
db 90 90 90 90 90 90 90 90 90 90
ret

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1073</ID>
              <Description>"被ダメ0(攻撃力倍率0)"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
damage_down:
mov dword ptr[edx+8A8],(float)0
ret


[disable]
damage_down:
db 90 90 90 90 90 90 90 90 90 90
ret

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1074</ID>
              <Description>"敵停止(俊敏性0)"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
speed_down:
mov dword ptr[edx+b40],(float)0
ret


[disable]
speed_down:
db 90 90 90 90 90 90 90 90 90 90
ret

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1075</ID>
              <Description>"敵呼び寄せ"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[enable]
label(distance)
registersymbol(distance)

mob:
push eax
mov eax,[mhfo.dll+_f37addr+a]
movss xmm0,[eax+ac]
addss xmm0,[distance]
movss [edx+ac],xmm0
push [eax+b0]
pop [edx+b0]
push [eax+b4]
pop [edx+b4]
push [eax+808]
pop [edx+808]
pop eax
ret

distance:
dd (float)800
[disable]
mob:
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90 90 90 90
db 90 90 90 90 90 90 90
ret

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1076</ID>
                  <Description>"敵との距離"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>Float</VariableType>
                  <Address>distance</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>1261</ID>
              <Description>"罠以外即死"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,mhfo.dll+_faddr+3b)
define(bytes,0F BF D1 33 C2)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)
label(mob_hp)
registersymbol(mob_hp)
label(jump)

address:
jmp newmem
returnhere:

newmem:
movsx edx,cx
xor eax,edx
push ebx
mov ebx,[mob_addr]
cmp byte ptr[ebx+3],#133
je jump
mov eax,[mob_hp]
jump:
pop ebx
jmp returnhere

mob_hp:
db 00 00 00 00
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1077</ID>
          <Description>"敵HP1or0"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_faddr+3b)
define(bytes,0F BF D1 33 C2)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

address:
jmp newmem
returnhere:

newmem:
xor,eax,eax
push 70
call GetKeyState
movsx edx,cx
xor,eax,1
jmp returnhere

[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1212</ID>
          <Description>"クエスト時間加速"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f1addr)
define(bytes,8B 4C 24 24 29 48 10)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(speed,4)
registersymbol(speed)

newmem:
mov ecx,[speed]
sub [eax+10],ecx
jmp return

address:
jmp newmem
nop
nop
return:

speed:
db #160

[DISABLE]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1213</ID>
              <Description>"速度"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>speed</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1244</ID>
          <Description>"クエスト時間停止"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f1addr)
define(bytes,8B 4C 24 24 29 48 10)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov ecx,0
sub [eax+10],ecx
jmp return

address:
jmp newmem
nop
nop
return:


[DISABLE]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1018</ID>
          <Description>"敵よろめき値0"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f3addr)
define(bytes,0F BF 04 6a)

[ENABLE]
assert(address,bytes)
address:
xor eax,eax
nop
nop

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1019</ID>
          <Description>"肉質変化"</Description>
          <LastState Activated="0"/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f15addr)
define(bytes,66 89 84 24 D2 00 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

newmem:
mov [esp+000000D2],ax
mov byte ptr[esp+C2],64//zan
mov byte ptr[esp+C4],64//dageki
mov byte ptr[esp+C6],64//dan
mov byte ptr[esp+C8],64//hi
mov byte ptr[esp+CA],64//mizu
mov byte ptr[esp+CC],64//koori
mov byte ptr[esp+CE],64//kaminari
mov byte ptr[esp+D0],64//ryuu
mov byte ptr[esp+D2],64//kizetu
jmp returnhere

address:
jmp newmem
nop
nop
nop
returnhere:
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1020</ID>
          <Description>"ポーチ固定"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f2addr+7)
define(bytes,66 01 84 F5 3A 0A 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

address:
jmp newmem
nop
nop
nop
returnhere:

newmem:
cmp ax,0
js returnhere
db bytes
jmp returnhere

[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1124</ID>
          <Description>"剥ぎ取り＆採取+99(ポーチ固定)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f51addr)
define(address1,mhfo.dll+_f52addr+7)
define(bytes,66 89 84 F5 3A 0A 00 00)
define(bytes1,66 01 84 F5 3A 0A 00 00)

[ENABLE]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,$1000)
alloc(newmem1,$1000)
label(return)
label(return1)
alloc(hagi_number,2)
registersymbol(hagi_number)

newmem:
mov al,[hagi_number]
mov [ebp+esi*8+00000A3A],ax
jmp return

address:
jmp newmem
nop
nop
nop
return:

newmem1:
cmp ax,0
js return1
mov al,[hagi_number]
add [ebp+esi*8+00000A3A],ax
jmp return1

address1:
jmp newmem1
nop
nop
nop
return1:

hagi_number:
db 63
[DISABLE]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1176</ID>
              <Description>"個数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>hagi_number</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1231</ID>
          <Description>"討伐数加算(+100)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f34addr)
define(bytes,66 89 84 71 28 02 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
add [ecx+esi*2+00000228],#100
jmp return

address:
jmp newmem
nop
nop
nop
return:

[DISABLE]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1183</ID>
          <Description>"全討伐数加算(+100)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f34addr)
define(bytes,66 89 84 71 28 02 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
label(jump)

newmem:
push esi
mov esi,1
jump:
add word ptr [ecx+esi*2+00000228],#100
add esi,1
cmp esi,#132
jl jump
pop esi
jmp return

address:
jmp newmem
nop
nop
nop
return:

[DISABLE]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1304</ID>
          <Description>"討伐数直接変更"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f76addr)
define(bytes,0F B7 01 03 C2)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(toubatu_number,4)
registersymbol(toubatu_number)

newmem:
mov eax,[toubatu_number]
jmp return

address:
jmp newmem
return:

toubatu_number:
db 01
[DISABLE]

address:
db bytes


dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1305</ID>
              <Description>"討伐数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>toubatu_number</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1079</ID>
          <Description>"クリア条件変更1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f8addr)
define(address1,mhfo.dll+_f9addr)
define(bytes,8B 55 00 85 D2)
define(bytes1,0F B7 4D 04 66 8B 7D 06)

[enable]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,2048)
alloc(newmem1,2048)
label(returnhere)
label(returnhere1)

address:
jmp newmem
returnhere:

newmem:
mov edx,0002
test edx,edx
jmp returnhere

address1:
jmp newmem1
nop
nop
nop
returnhere1:

newmem1:
mov ecx, 0007
mov di,01
jmp returnhere1


[disable]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1080</ID>
          <Description>"クリア条件変更2"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f8addr)
define(address1,mhfo.dll+_f9addr)
define(bytes,8B 55 00 85 D2)
define(bytes1,0F B7 4D 04 66 8B 7D 06)

[enable]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,2048)
alloc(newmem1,2048)
alloc(newmem2,2048)
alloc(newmem3,2048)
alloc(newmem4,2048)
alloc(count,4)
label(returnhere)
label(returnhere1)

address:
jmp newmem
returnhere:

newmem:
mov edx,0002
test edx,edx
jmp returnhere

address1:
jmp newmem1
db 90 90 90
returnhere1:

newmem1:
mov di,01
add [count],1
cmp [count],1
je newmem2
cmp [count],2
je newmem3
cmp [count],3
je newmem4
jmp returnhere1

newmem2:
mov ecx,0007
jmp returnhere1

newmem3:
mov ecx,0008
jmp returnhere1

newmem4:
mov ecx,0009
mov [count],0
jmp returnhere1

[disable]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)
dealloc(newmem2)
dealloc(newmem3)
dealloc(newmem4)
dealloc(count)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1175</ID>
          <Description>"クリア条件変更3"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f8addr)
define(address1,mhfo.dll+_f9addr)
define(bytes,8B 55 00 85 D2)
define(bytes1,0F B7 4D 04 66 8B 7D 06)

[enable]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,2048)
alloc(newmem1,2048)
label(returnhere)
label(returnhere1)

address:
jmp newmem
returnhere:

newmem:
mov edx,0002
test edx,edx
jmp returnhere

address1:
jmp newmem1
nop
nop
nop
returnhere1:

newmem1:
mov ecx, 0007
mov di,00
jmp returnhere1


[disable]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1081</ID>
          <Description>"スタミナMAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f54addr+1)
define(bytes,66 01 be 0c 08 00 00)

[ENABLE]
assert(address,bytes)
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

address:
jmp newmem
nop
nop
returnhere:

newmem:
add [esi+0000080C],1f4
jmp returnhere

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1082</ID>
          <Description>"斬れ味MAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f53addr+e)
define(bytes,7f 11)

[ENABLE]
assert(address,bytes)
address:
nop
nop

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1083</ID>
          <Description>"超速射"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f14addr-a)
define(bytes,74 08 88 4d 07)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
alloc(dan,4)
registersymbol(dan)

newmem: //this is allocated memory, you have read,write,execute access
db 75 05
jmp mhfo.dll+_f14addr
push eax
mov al,[dan]
mov byte ptr [ebp+07],al
pop eax
jmp returnhere

address:
jmp newmem
returnhere:
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1084</ID>
              <Description>"発射数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>dan</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1085</ID>
      <Description>"ショップ"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1238</ID>
          <Description>"装飾品生産時変換"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f65addr)
define(bytes,0F B7 11 C1 E2 05)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(item_id,4)
registersymbol(item_id)

newmem:
push ebx
mov ebx,[item_id]
mov [ecx],ebx
pop ebx
movzx edx,word ptr [ecx]
shl edx,05
jmp return

address:
jmp newmem
nop
return:

item_id:
db 07
[DISABLE]

address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1239</ID>
              <Description>"アイテムID"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>item_id</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1299</ID>
          <Description>"装飾品生産費用1"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f70addr)
define(bytes,8B 44 11 0C D1 F8)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov eax,1
sar eax,1
jmp return

address:
jmp newmem
nop
return:

[DISABLE]

address:
db bytes

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1300</ID>
          <Description>"装飾品生産個数"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f73addr)
define(bytes,C7 47 74 01 00 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
alloc(soushoku_kosuu,4)
registersymbol(soushoku_kosuu)
label(return)

newmem:
push ebx
xor ebx,ebx
mov ebx,[soushoku_kosuu]
mov [edi+74],ebx
pop ebx
jmp return

address:
jmp newmem
nop
nop
return:

soushoku_kosuu:
db #99
[DISABLE]
address:
db bytes


dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1301</ID>
              <Description>"個数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>soushoku_kosuu</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1089</ID>
          <Description>"武器生産費用0"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f42addr)
define(bytes,8B 44 D1 04)
define(address1,mhfo.dll+_f43addr)
define(bytes1,8B 44 0A 0C)

[enable]
assert(address,bytes)
assert(address1,bytes1)

address:
xor eax,eax
nop
nop

address1:
xor eax,eax
nop
nop

[disable]
address:
db bytes

address1:
db bytes1
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1090</ID>
          <Description>"武具全出し"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f16addr+7)
define(bytes,84 C0)

[ENABLE]
assert(address,bytes)
address:
cmp al,al


[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1091</ID>
          <Description>"G武器等生産強化Lv50"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f38addr+1)
define(address1,mhfo.dll+_f38addr+f)
define(bytes,66 89 46 04 5B)
define(bytes1,66 89 4E 04 C3)

[enable]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,2048)
alloc(newmem1,2048)
label(returnhere)
label(returnhere1)

newmem:
mov ax,32
mov [esi+04],ax
pop ebx
jmp returnhere

address:
jmp newmem
returnhere:

newmem1:
mov cx,3200
mov [esi+04],cx
ret

address1:
jmp newmem1
returnhere1:

[disable]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1092</ID>
          <Description>"防具強化Lv7"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f39addr+1)
define(bytes,89 57 04 8B 46 08)

[enable]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)
alloc(wear_level,4)
registersymbol(wear_level)


newmem:
mov edx,[wear_level]
DEC edx
db bytes
jmp returnhere

address:
jmp newmem
nop
returnhere:

wear_level:
db 07 00 00 00
[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1093</ID>
              <Description>"防具レベル"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>wear_level</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1096</ID>
          <Description>"装飾品、カフ全出し"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f17addr+12)
define(bytes,84 C0)

[enable]
assert(address,bytes)
address:
cmp al,al

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1182</ID>
          <Description>"シジル全出し"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f19addr)
define(bytes,66 F7 00 00 80 0F B7 78 FE)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

newmem:
test word ptr [eax],8000
mov edi,7
jmp returnhere

address:
jmp newmem
nop
nop
nop
nop
returnhere:
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1100</ID>
          <Description>"シジル変換"</Description>
          <Options moManualExpandCollapse="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>000000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1104</ID>
              <Description>"数値1"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A06366"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]+6</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1105</ID>
              <Description>"数値2"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A06368"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1106</ID>
              <Description>"数値3"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A0636A"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]+a</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1101</ID>
              <Description>"特殊効果1"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A06360"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1102</ID>
              <Description>"特殊効果2"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A06362"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]+2</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1103</ID>
              <Description>"特殊効果3"</Description>
              <LastState Value="0" Activated="0" RealAddress="15A06364"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[mhfo.dll+_f36addr+10]+4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1107</ID>
          <Description>"武具強化費用0"</Description>
          <Options moManualExpandCollapse="1"/>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1108</ID>
              <Description>"武器強化費用1"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F640"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+D4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1109</ID>
              <Description>"武具強化費用2"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F644"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+D8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1110</ID>
              <Description>"武具強化費用3"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F648"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+Dc</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1111</ID>
              <Description>"武具強化費用4"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F64C"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+e0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1112</ID>
              <Description>"防具強化費用1"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F6BC"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+150</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1113</ID>
              <Description>"防具強化費用2"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F6C0"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+154</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1114</ID>
              <Description>"防具強化費用3"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F6C4"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+158</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>1115</ID>
              <Description>"防具強化費用4"</Description>
              <LastState Value="0" Activated="0" RealAddress="1628F6C8"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>[mhfo.dll+_f35addr+12]+15c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1116</ID>
      <Description>"便利"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1119</ID>
          <Description>"クエストPT人数変更"</Description>
          <LastState Value="0" Activated="0" RealAddress="163A01E0"/>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>[mhfo.dll+_f41addr-4]</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1122</ID>
          <Description>"クエ受注時カーソル位置(マクロ用)"</Description>
          <LastState Value="0" Activated="0" RealAddress="1628F594"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>[mhfo.dll+_f46addr-4]+34</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1271</ID>
          <Description>"条件決定固定"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f71addr)
define(bytes,0F BF 86 88 38 00 00)
[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
  mov word ptr[esi+00003888],0007
  movsx eax,word ptr [esi+00003888]
  jmp return

address:
  jmp newmem
  nop
  nop
return:
[DISABLE]

address:
  db bytes


dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1273</ID>
          <Description>"報酬画面キャンセル"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f72addr+4)
define(bytes,66 83 05)
[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
label(_t2addr)
registersymbol(_t2addr)

[mhfo.dll+_f72addr+7]:
_t2addr:

newmem:
add word ptr [_t2addr],8000
jmp return

address:
  jmp newmem
  nop
  nop
  nop
return:

[DISABLE]

address:
add word ptr [_t2addr],ff

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1121</ID>
          <Description>"クエストHC化"</Description>
          <LastState Value="0" Activated="0" RealAddress="15B6AE2D"/>
          <Color>80000008</Color>
          <VariableType>Byte</VariableType>
          <Address>[mhfo.dll+_f40addr+4]</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1117</ID>
          <Description>"リザルト画面キャンセル"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f29addr)
define(bytes,89 46 24 39 6C 24 1C)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

newmem: //this is allocated memory, you have read,write,execute access
mov [esi+24],0
cmp [esp+1C],ebp
jmp returnhere

address:
jmp newmem
nop
nop
returnhere:
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1118</ID>
          <Description>"各種アイテム条件無効"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f32addr+3)
define(address1,mhfo.dll+_f55addr)
define(address2,mhfo.dll+_f56addr)
define(bytes,74 0f)
define(bytes1,66 83 78 02 00)
define(bytes2,66 83 39 00)

[enable]
assert(address,bytes)
assert(address1,bytes1)
assert(address2,bytes2)

address:
db eb 0f

address1:
db 66 83 78 02 63

address2:
db 66 83 39 63
[disable]
address:
db bytes

address1:
db bytes1

address2:
db bytes2
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1120</ID>
          <Description>"ランク制限解除(クエスト変換)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f10addr)
define(bytes,0F B7 6B 4E 66 85 ED)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)
alloc(quest_addr,4)
registersymbol(quest_addr)

address:
jmp newmem
nop
nop
returnhere:

newmem:
movzx ebp,word ptr [ebx+4E]
push ebp
lea ebp,[ebx+2e]
mov [quest_addr],ebp
pop ebp
mov [ebx+4a],00
mov [ebx+4e],00
test bp,bp
jmp returnhere


[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1200</ID>
              <Description>"クエストID"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>[quest_addr]</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1166</ID>
          <Description>"受付嬢座標変換(求人部屋)"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f58addr+6)
define(bytes,8B 88 AC 00 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(jump)
label(return)
alloc(npc_id,1)
registersymbol(npc_id)

newmem:
pushad
mov bl,[npc_id]
cmp byte ptr[eax+c],bl
jne jump
mov [eax+ac],(float)10168
mov [eax+b4],(float)8587
jump:
mov ecx,[eax+000000AC]
popad
jmp return

address:
  jmp newmem
  nop
return:

npc_id:
db 03
[DISABLE]
address:
  db bytes

dealloc(newmem)


</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1173</ID>
              <Description>"NPC"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>npc_id</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1125</ID>
          <Description>"クエスト報酬×99"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f48addr+9)
define(address1,mhfo.dll+_f49addr+d)
define(address2,mhfo.dll+_f50addr+d)
define(bytes,66 8B 42 04 66 89 03)
define(bytes1,66 8B 42 04 66 89 01)
define(bytes2,66 8B 42 04 66 89 01)

[ENABLE]
assert(address,bytes)
assert(address1,bytes1)
assert(address2,bytes2)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)
label(return)
label(return1)
label(return2)
alloc(item_number,2)
registersymbol(item_number)

newmem:
mov ax,[item_number]
mov [ebx],ax
jmp return

address:
  jmp newmem
  nop
  nop
return:

newmem1:
mov ax,[item_number]
mov [ecx],ax
jmp return1

address1:
  jmp newmem1
  nop
  nop
return1:

newmem2:
mov ax,[item_number]
mov [ecx],ax
jmp return2

address2:
  jmp newmem2
  nop
  nop
return2:

item_number:
db #99

[DISABLE]

address:
db bytes

address1:
db bytes1

address2:
db bytes2

dealloc(newmem)
dealloc(newmem1)
dealloc(newmem2)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1171</ID>
              <Description>"個数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>item_number</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1234</ID>
          <Description>"報酬枠MAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f57addr)
define(bytes,8A 04 1E 84 C0)
[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov al,#32
test al,al
jmp return

address:
jmp newmem
return:

[DISABLE]
address:
db bytes


dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1172</ID>
          <Description>"報酬枠1のみ"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f57addr)
define(bytes,8A 04 1E 84 C0)
[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov al,#0
test al,al
jmp return

address:
jmp newmem
return:

[DISABLE]
address:
db bytes


dealloc(newmem)


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1126</ID>
          <Description>"クエストHRP変更"</Description>
          <LastState Activated="0"/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f30addr-3)
define(address1,mhfo.dll+_f31addr)
define(bytes,8B 40 4C 89 87 98 0C 00 00)
define(bytes1,8B 48 4C 89 8F 3c 0D 00 00)

[enable]
assert(address,bytes)
assert(address1,bytes1)
alloc(newmem,2048) //2kb should be enough
alloc(newmem1,2048)
label(returnhere)
label(returnhere1)
alloc(quest_hrp,4)
registersymbol(quest_hrp)

newmem:
push ebx
mov ebx,[quest_hrp]
mov [eax+4C],ebx
mov [edi+000000C98],ebx
pop ebx
jmp returnhere

newmem1:
push ebx
mov ebx,[quest_hrp]
mov [eax+4C],ebx
mov [edi+000000d3c],ebx
pop ebx
jmp returnhere1

address:
jmp newmem
nop
nop
nop
nop
returnhere:

address1:
jmp newmem1
nop
nop
nop
nop
returnhere1:

quest_hrp:

[disable]
address:
db bytes

address1:
db bytes1

dealloc(newmem)
dealloc(newmem1)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1127</ID>
              <Description>"HRP"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>quest_hrp</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1128</ID>
          <Description>"クエストギルド貢献P"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f44addr)
define(bytes,89 86 a4 15 00 00)

[enable]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)
alloc(girudo_point,4)
registersymbol(girudo_point)

newmem:
mov eax,[girudo_point]
mov [esi+000015a4],eax
jmp returnhere

address:
jmp newmem
nop
returnhere:

girudo_point:
dd #100000
[disable]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1177</ID>
              <Description>"ギルドP"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>girudo_point</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1189</ID>
          <Description>"ギルド貢献P交換0"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f60addr)
define(bytes,8B 4E 04 0F BF DB)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
xor ecx,ecx
mov [esi+04],ecx
movsx ebx,bx
jmp return

address:
jmp newmem
nop
return:

[DISABLE]
address:
db bytes

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1259</ID>
          <Description>"移動"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>1249</ID>
              <Description>"移動速度2倍"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"mhfo.dll"+_f66addr)
define(bytes,F3 0F 10 86 AC 00 00 00)
define(bytes1,F3 0F 10 86 B0 00 00 00)
define(bytes2,F3 0F 10 86 B4 00 00 00)

[ENABLE]
assert(address,bytes)
assert(address+16,bytes1)
assert(address+2c,bytes2)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)
label(return)
label(return1)
label(return2)


newmem:
movss xmm0,[esi+000000AC]
addss xmm0,[esp+04]
jmp return

newmem1:
movss xmm0,[esi+000000B0]
addss xmm0,[esp+08]
jmp return1

newmem2:
movss xmm0,[esi+000000B4]
addss xmm0,[esp+0C]
jmp return2

address:
  jmp newmem
  nop
  nop
  nop
return:

address+16:
  jmp newmem1
  nop
  nop
  nop
return1:

address+2c:
  jmp newmem2
  nop
  nop
  nop
return2:
[DISABLE]

address:
db bytes

address+16:
db bytes1

address+2c:
db bytes2

dealloc(newmem)
dealloc(newmem1)
dealloc(newmem2)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1250</ID>
              <Description>"移動速度3倍"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"mhfo.dll"+_f66addr)
define(bytes,F3 0F 10 86 AC 00 00 00)
define(bytes1,F3 0F 10 86 B0 00 00 00)
define(bytes2,F3 0F 10 86 B4 00 00 00)

[ENABLE]
assert(address,bytes)
assert(address+16,bytes1)
assert(address+2c,bytes2)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)
label(return)
label(return1)
label(return2)


newmem:
movss xmm0,[esi+000000AC]
addss xmm0,[esp+04]
addss xmm0,[esp+04]
jmp return

newmem1:
movss xmm0,[esi+000000B0]
addss xmm0,[esp+08]
addss xmm0,[esp+08]
jmp return1

newmem2:
movss xmm0,[esi+000000B4]
addss xmm0,[esp+0C]
addss xmm0,[esp+0C]
jmp return2

address:
  jmp newmem
  nop
  nop
  nop
return:

address+16:
  jmp newmem1
  nop
  nop
  nop
return1:

address+2c:
  jmp newmem2
  nop
  nop
  nop
return2:
[DISABLE]

address:
db bytes

address+16:
db bytes1

address+2c:
db bytes2

dealloc(newmem)
dealloc(newmem1)
dealloc(newmem2)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1260</ID>
              <Description>"移動速度5倍"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"mhfo.dll"+_f66addr)
define(bytes,F3 0F 10 86 AC 00 00 00)
define(bytes1,F3 0F 10 86 B0 00 00 00)
define(bytes2,F3 0F 10 86 B4 00 00 00)

[ENABLE]
assert(address,bytes)
assert(address+16,bytes1)
assert(address+2c,bytes2)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)
label(return)
label(return1)
label(return2)

newmem:
movss xmm0,[esi+000000AC]
addss xmm0,[esp+04]
addss xmm0,[esp+04]
addss xmm0,[esp+04]
addss xmm0,[esp+04]
jmp return

newmem1:
movss xmm0,[esi+000000B0]
addss xmm0,[esp+08]
addss xmm0,[esp+08]
addss xmm0,[esp+08]
addss xmm0,[esp+08]
jmp return1

newmem2:
movss xmm0,[esi+000000B4]
addss xmm0,[esp+0C]
addss xmm0,[esp+0C]
addss xmm0,[esp+0C]
addss xmm0,[esp+0C]
jmp return2

address:
  jmp newmem
  nop
  nop
  nop
return:

address+16:
  jmp newmem1
  nop
  nop
  nop
return1:

address+2c:
  jmp newmem2
  nop
  nop
  nop
return2:


[DISABLE]

address:
db bytes

address+16:
db bytes1

address+2c:
db bytes2

dealloc(newmem)
dealloc(newmem1)
dealloc(newmem2)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1262</ID>
              <Description>"ジャンプ(Shift+F)"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,"mhfo.dll"+_f66addr)
define(bytes,F3 0F 58 44 24 08)

[ENABLE]
assert(address+1e,bytes)
alloc(count,4)
alloc(newmem,$1000)
label(return)
label(jump)
alloc(distance2,4)

address+1e:
jmp newmem
nop
return:

newmem:
addss xmm0,[esp+08]
cmp byte ptr[count],0
jne jump
addss xmm0,[distance2]
inc [count]
jump:
jmp return

count:
db 00

distance2:
dd (float)3000
[DISABLE]
address+1e:
db bytes

dealloc(newmem)

</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys>
                    <Key>16</Key>
                    <Key>70</Key>
                  </Keys>
                  <ID>1</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1223</ID>
          <Description>"アイテム増殖"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f63addr)
define(bytes,0F B7 50 2C 66 01 11)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(zoushoku_number,2)
registersymbol(zoushoku_number)


newmem:
mov edx,[zoushoku_number]
add [ecx],dx
jmp return

address:
jmp newmem
nop
nop
return:

zoushoku_number:
db #99
[DISABLE]

address:
db bytes

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1224</ID>
              <Description>"個数"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>zoushoku_number</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1264</ID>
          <Description>"TRP"</Description>
          <LastState Value="0" Activated="0" RealAddress="15BF9D04"/>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>[mhfo.dll+_f68addr+3]</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1265</ID>
          <Description>"モンスターサイズ変換"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f69addr)
define(bytes,66 89 95 A6 0C 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(mob_size,4)
registersymbol(mob_size)

newmem:
  mov dx,[mob_size]
  mov [ebp+00000CA6],dx
  jmp return

address:
  jmp newmem
  nop
  nop
return:

mob_size:
db #100
[DISABLE]

address:
  db bytes

dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1266</ID>
              <Description>"サイズ倍率"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>mob_size</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1129</ID>
      <Description>"キャラバンなど"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1130</ID>
          <Description>"狩人珠色変更"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f21addr)
define(bytes,88 81 DC 70 01 00)

[enable]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

newmem:
mov [ecx+000170DC],9
jmp returnhere

address:
jmp newmem
nop
returnhere:

[disable]
address:
db bytes

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1131</ID>
          <Description>"知名度MAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f22addr)
define(bytes,01 8E 40 15 00 00)

[enable]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

newmem:
mov [esi+00001540],98967f
jmp returnhere

address:
jmp newmem
nop
returnhere:
[disable]
address:
db bytes

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1132</ID>
          <Description>"CPMAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f23addr)
define(bytes,03 87 F4 85 01 00)

[enable]
assert(address,bytes)
alloc(newmem,2048)
label(returnhere)

newmem:
mov eax,98967e
jmp returnhere

address:
jmp newmem
nop
returnhere:
[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1133</ID>
          <Description>"珠強化"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f24addr)
define(bytes,80 47 7C 01 B8 02 00 00 00)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

newmem: //this is allocated memory, you have read,write,execute access
add byte ptr [edi+7c],07
mov eax,00000002
jmp returnhere

address:
jmp newmem
nop
nop
nop
nop
returnhere:
[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1134</ID>
          <Description>"色加算+255"</Description>
          <LastState Activated="0"/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f25addr+1)
define(bytes,81 EC CC 00 00 00)

[enable]
assert(address,bytes)
alloc(newmem,2048) //2kb should be enough
label(returnhere)

newmem: //this is allocated memory, you have read,write,execute access
add esp,c
push ff
sub esp 8
sub esp,000000CC
jmp returnhere

address:
jmp newmem
nop
returnhere:

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1135</ID>
          <Description>"ホルク書物全出し"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f26addr+9)
define(bytes,74 5C)

[enable]
assert(address,bytes)
address:
nop
nop

[disable]
address:
db bytes
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1136</ID>
          <Description>"マイミッションMAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f27addr)
define(address1,mhfo.dll+_f27addr-11)
define(address2,mhfo.dll+_f28addr)
define(bytes,8A 84 08 7A 72 01 00)
define(bytes1,8A 84 11 79 72 01 00)
define(bytes2,8A 80 85 72 01 00)

[ENABLE]
assert(address,bytes)
assert(address1,bytes1)
assert(address2,bytes2)

address:
mov al,a9
nop
nop
nop
nop
nop

address1:
mov al,a9
nop
nop
nop
nop
nop

address2:
mov al,a9
nop
nop
nop
nop

[disable]
address:
db bytes

address1:
db bytes1

address2:
db bytes2
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1187</ID>
          <Description>"歌姫短縮"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f59addr)
define(bytes,8B 4D 14 83 C3 0C)
[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(number,1)
registersymbol(number)

newmem:
mov ecx,[number]
mov [ebp+14],ecx
add ebx,0C
jmp return

address:
jmp newmem
nop
return:

number:
db 09

[DISABLE]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1199</ID>
          <Description>"ハンターキャリアMAX"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,mhfo.dll+_f2addr+7)
define(bytes,66 01 84 F5 3A 0A 00 00)

[ENABLE]
assert(address,bytes)

alloc(newmem,2048) //2kb should be enough
label(returnhere)
alloc(count,4)
label(jump)

address:
jmp newmem
nop
nop
nop
returnhere:

newmem:
pushad
jump:
call mhfo.dll+_f61addr
dec [count]
jnz jump
mov [count],#3000
popad
cmp bx,0
js returnhere
db bytes
jmp returnhere

count:
db #3000
[disable]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>1197</ID>
              <Description>"ハンターキャリア全項目"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,mhfo.dll+_f61addr+1)
define(bytes,8B 5C 24 08 56)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
label(jump)
alloc(count,4)

newmem:
mov ebx,[count]
dec ebx
mov [esp+08],ebx
dec [count]
jnz jump
mov [count],#31
jump:
push esi
jmp return

address:
jmp newmem
return:

count:
db #31
[DISABLE]
address:
db bytes


dealloc(newmem)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>1225</ID>
              <Description>"ハンターキャリア項目別"</Description>
              <LastState Activated="0"/>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>define(address,mhfo.dll+_f61addr+1)
define(bytes,8B 5C 24 08 56)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
alloc(carrier_number,1)
registersymbol(carrier_number)

newmem:
mov ebx,[carrier_number]
mov [esp+08],ebx
push esi
jmp return

address:
jmp newmem
return:

carrier_number:
db #1
[DISABLE]
address:
db bytes


dealloc(newmem)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>1226</ID>
                  <Description>"項目"</Description>
                  <LastState Value="??" Activated="0" RealAddress="00000000"/>
                  <Color>80000008</Color>
                  <VariableType>Byte</VariableType>
                  <Address>carrier_number</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1243</ID>
          <Description>"天廊武器強化コスト0"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f64addr)
define(bytes,03 84 9D 14 02 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov [ebp+ebx*4+214],0
jmp return

address:
jmp newmem
nop
nop
return:

[DISABLE]

address:
db bytes

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1257</ID>
          <Description>"マイトレP常時max"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f67addr)
define(bytes,0F B6 82 27 14 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
mov byte ptr[edx+00001427],#99
mov eax,#99
jmp return

address:
jmp newmem
nop
nop
return:

[DISABLE]
address:
db bytes


dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1302</ID>
          <Description>"ボックスアイテム全900"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f74addr)
define(bytes,66 29 8C C7 56 BC 00 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)
label(jump)

newmem:
push eax
mov eax,0
jump:
mov [edi+eax*8+0000BC56],#900
add eax,1
cmp eax,#4100
jl jump
pop eax
jmp return


address:
jmp newmem
nop
nop
nop
return:

[DISABLE]
address:
db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1303</ID>
          <Description>"即GSR999"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>define(address,"mhfo.dll"+_f75addr)
define(bytes,8B 84 81 24 A3 01 00)

[ENABLE]
assert(address,bytes)
alloc(newmem,$1000)
label(return)

newmem:
  mov [ecx+eax*4+0001A324],80D14DD6
  mov eax,[ecx+eax*4+0001A324]
  jmp return

address:
  jmp newmem
  nop
  nop
return:

[DISABLE]

address:
  db bytes

dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1137</ID>
      <Description>"自動サーチ"</Description>
      <LastState Activated="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
luacall(MyAobScan('0fb78a240600000fb7********c1c1e10b','_faddr'))//hp
luacall(MyAobScan('8B4C2424294810','_f1addr'))//kasoku
luacall(MyAobScan('8B4424280FBFF7','_f2addr'))//po-chi_kotei***+7
luacall(MyAobScan('0fbf046af30f2ac8','_f3addr'))//yoromekiti0
luacall(MyAobScan('0fbf4d0203f88b442414','_f4addr'))//buki_bougu_seisansozai0
luacall(MyAobScan('0fbf53028954241c','_f5addr'))//buki_kyoukasozai0
luacall(MyAobScan('0fbf6b020fb7f8','_f6addr'))//bougu_kyoukasozai0
luacall(MyAobScan('895734c7474413000000','_f7addr'))//sinkabuki_kyoukageki0
luacall(MyAobScan('8b550085d27411','_f8addr'))//kuriajouken_henkou
luacall(MyAobScan('0fb74d04668b7d06','_f9addr'))//kuriajouken_henkou
luacall(MyAobScan('0FB76B4E6685ed','_f10addr'))//rankseigen_kaijo
luacall(MyAobScan('0fbf4d02668b45','_f11addr'))//gbuki_kyoukahiyou0
luacall(MyAobScan('8b5c87','_f12addr'))//zeny_max
luacall(MyAobScan('0fb7450050668946fe','_f13addr'))//shop_henkan
luacall(MyAobScan('f6****080000048b','_f14addr'))//chousokusha
luacall(MyAobScan('66898424D2000000','_f15addr'))//nikusitu_henka
luacall(MyAobScan('85c08a06','_f16addr'))//bugu_zendasi ***+7
luacall(MyAobScan('33ff8da424000000000fbfc7','_f17addr'))//soushokuhin_zendasi ***+12
luacall(MyAobScan('8bff0fb74500','_f18addr'))//soushokuhin_sozai0***+b
luacall(MyAobScan('66f70000800fb778fe','_f19addr'))//sijiru zendasshi
luacall(MyAobScan('0FB7D083C101','_f20addr'))//soushokuhin_souchaku_zendashi
luacall(MyAobScan('8881DC700100','_f21addr'))//irohenkou
luacall(MyAobScan('018E40150000','_f22addr'))//chimeidomax  offset:1380
luacall(MyAobScan('0387******003d7f969800','_f23addr'))//cpmax  offset:135c
luacall(MyAobScan('80477c01b8020000005e5b83c408','_f24addr'))//tamakyouka
luacall(MyAobScan('CC81ECCC000000','_f25addr'))//irokasan ***+1
luacall(MyAobScan('8a8c198c860100','_f26addr'))//horukushomotu ***+9
luacall(MyAobScan('8a84087a720100','_f27addr'))//misshon_max
luacall(MyAobScan('8a8085720100','_f28addr'))//misshon_max
luacall(MyAobScan('894624396c241c','_f29addr'))//result_cancel
luacall(MyAobScan('8987980C0000F6','_f30addr'))//quest_hrp
luacall(MyAobScan('8b484c898f','_f31addr'))//quest_hrp_g
luacall(MyAobScan('663939740f','_f32addr'))//item_jouken_1
luacall(MyAobScan('c645290266','_f33addr'))//sijiru_sozainasi
luacall(MyAobScan('6689847128020000','_f34addr'))//toubatusuu
luacall(MyAobScan('83c40483f801751b0fbf','_f35addr'))//buki_bougu_kyoukahiyou0縲***+12
luacall(MyAobScan('0fb745288b54','_f36addr'))//sijiru_henkan ***+c
luacall(MyAobScan('8BD069D2D00F0000','_f37addr'))//character_address ***+a
luacall(MyAobScan('c3668946045b','_f38addr'))//gbuki_lv50 ***+1
luacall(MyAobScan('008957048b46','_f39addr'))//bougu_kyouka_lv7 ***+1
luacall(MyAobScan('88453ca0','_f40addr'))//quest_hc ***+4
luacall(MyAobScan('0fbe7c240e','_f41addr'))//pt_ninzuu ***-4
luacall(MyAobScan('8b44d104c3','_f42addr'))//buki_seisan_hiyou0_kinsetu
luacall(MyAobScan('8b440a0cc3b8','_f43addr'))//buki_seisan_hiyou0_enkyori
luacall(MyAobScan('8986a4150000','_f44addr'))//girudo_point_max
luacall(MyAobScan('330fb65d020fb7f8','_f45addr'))//kahu_sozai0
luacall(MyAobScan('83F830740883C0CA83F801','_f46addr'))//macro_kotei
luacall(MyAobScan('8B5424080FB702530FBFD856','_f47addr'))//bui_hakai_main
luacall(MyAobScan('837C241000668943FE','_f48addr'))//quest_main
luacall(MyAobScan('837C2410008B4C2420','_f49addr'))//quest_sub_a
luacall(MyAobScan('837C2410008B4C2414','_f50addr'))//quest_sub_b
luacall(MyAobScan('668984F5****000075','_f51addr'))//item_get
luacall(MyAobScan('8B4424280FBFF7660184F5****0000','_f52addr'))//item_add
luacall(MyAobScan('0FB786F40A0000','_f53addr'))//kireaji
luacall(MyAobScan('006601BE0C0800000f','_f54addr'))//stamina
luacall(MyAobScan('66837802007E16','_f55addr'))//item_jouken_2
luacall(MyAobScan('668339000F8FF7000000','_f56addr'))//item_jouken_3
luacall(MyAobScan('8A041E84C07E040244241B0FBEC00FB7CA3BC10F8F30FEFFFF ','_f57addr'))//houshuu_max
luacall(MyAobScan('8888****00008b88ac0000008b90b0','_f58addr'))//uketukejou
luacall(MyAobScan('8B4D1483C30C','_f59addr'))//utahime
luacall(MyAobScan('8B4E040FBFDB','_f60addr'))//girudoP_koukan
luacall(MyAobScan('538B5C2408560FB6F3c1E60457','_f61addr'))//carrier_max
luacall(MyAobScan('0FB7502C660111','_f63addr'))//item_zoushoku
luacall(MyAobScan('03849D14020000','_f64addr'))//tenrou
luacall(MyAobScan('0FB711C1E205','_f65addr'))//item_soushoku
luacall(MyAobScan('F30F1086AC000000F30F58442404f30f11','_f66addr'))//move_speed
luacall(MyAobScan('0FB6822714000051','_f67addr'))//maitore
luacall(MyAobScan('0FAF15********F30F2AC2','_f68addr'))//gem_max
luacall(MyAobScan('668995A60C0000','_f69addr'))//monster_size
luacall(MyAobScan('8B44110C D1F87505b8','_f70addr'))//soushoku_seisan_hiyou
luacall(MyAobScan('0FBF8688380000','_f71addr'))//jouken_kettei_kotei
luacall(MyAobScan('85c07508668305********ff','_f72addr'))//houshuu_cancel
luacall(MyAobScan('C7477401000000','_f73addr'))//soushoku_seisan_kosuu
luacall(MyAobScan('66298CC756BC0000','_f74addr'))//box999
luacall(MyAobScan('8B848124A3010085c07905','_f75addr'))//gsr999
luacall(MyAobScan('0FB70103C2','_f76addr'))//toubatu
[disable]


</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of call mhfo.dll+DB9858</Description>
      <Address>10E0992C</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB992C</ModuleNameOffset>
      <Before>
        <Byte>2B</Byte>
        <Byte>F1</Byte>
        <Byte>56</Byte>
        <Byte>53</Byte>
        <Byte>50</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>27</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>C4</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>45</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+70],xmm7</Description>
      <Address>10E098C1</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98C1</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>77</Byte>
        <Byte>60</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>7F</Byte>
        <Byte>70</Byte>
      </Actual>
      <After>
        <Byte>8D</Byte>
        <Byte>B6</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+60],xmm6</Description>
      <Address>10E098BC</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98BC</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>6F</Byte>
        <Byte>50</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>77</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+50],xmm5</Description>
      <Address>10E098B7</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98B7</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>67</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>6F</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+40],xmm4</Description>
      <Address>10E098B2</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98B2</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6F</Byte>
        <Byte>7E</Byte>
        <Byte>70</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>67</Byte>
        <Byte>40</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+50],xmm5</Description>
      <Address>10E098B7</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98B7</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>67</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>6F</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>77</Byte>
        <Byte>60</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+10],xmm1</Description>
      <Address>10E0988F</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB988F</ModuleNameOffset>
      <Before>
        <Byte>30</Byte>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>07</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>4F</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>57</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+20],xmm2</Description>
      <Address>10E09894</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB9894</ModuleNameOffset>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>57</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>5F</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+30],xmm3</Description>
      <Address>10E09899</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB9899</ModuleNameOffset>
      <Before>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>5F</Byte>
        <Byte>30</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6F</Byte>
        <Byte>66</Byte>
        <Byte>40</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [ecx]</Description>
      <Address>10D7FA41</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2FA41</ModuleNameOffset>
      <Before>
        <Byte>83</Byte>
        <Byte>9E</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>D0</Byte>
        <Byte>81</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [ecx+01]</Description>
      <Address>10D7FA56</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2FA56</ModuleNameOffset>
      <Before>
        <Byte>95</Byte>
        <Byte>B8</Byte>
        <Byte>E4</Byte>
        <Byte>E3</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>51</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>D0</Byte>
        <Byte>81</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov edx,[ecx]</Description>
      <Address>10D7DFE0</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2DFE0</ModuleNameOffset>
      <Before>
        <Byte>3C</Byte>
        <Byte>97</Byte>
        <Byte>74</Byte>
        <Byte>20</Byte>
        <Byte>90</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C2</Byte>
        <Byte>C1</Byte>
        <Byte>EA</Byte>
        <Byte>08</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+50],xmm5</Description>
      <Address>10E098B7</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98B7</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>67</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>6F</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>77</Byte>
        <Byte>60</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [ecx]</Description>
      <Address>10D7FA41</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2FA41</ModuleNameOffset>
      <Before>
        <Byte>83</Byte>
        <Byte>9E</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>D0</Byte>
        <Byte>81</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movzx edx,byte ptr [ecx+01]</Description>
      <Address>10D7FA56</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2FA56</ModuleNameOffset>
      <Before>
        <Byte>95</Byte>
        <Byte>B8</Byte>
        <Byte>E4</Byte>
        <Byte>E3</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>51</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>D0</Byte>
        <Byte>81</Byte>
        <Byte>E2</Byte>
        <Byte>FF</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov edx,[ecx]</Description>
      <Address>10D7E0A6</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>D2E0A6</ModuleNameOffset>
      <Before>
        <Byte>8D</Byte>
        <Byte>3C</Byte>
        <Byte>97</Byte>
        <Byte>74</Byte>
        <Byte>26</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>11</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B6</Byte>
        <Byte>DA</Byte>
        <Byte>2B</Byte>
        <Byte>C3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi+50],xmm5</Description>
      <Address>10E098B7</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB98B7</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>67</Byte>
        <Byte>40</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>6F</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>77</Byte>
        <Byte>60</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of movdqa [edi],xmm0</Description>
      <Address>10E0988B</Address>
      <ModuleName>mhfo.dll</ModuleName>
      <ModuleNameOffset>DB988B</ModuleNameOffset>
      <Before>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>6F</Byte>
        <Byte>5E</Byte>
        <Byte>30</Byte>
      </Before>
      <Actual>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>7F</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_f77addr</Name>
      <Address>B03F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_faddr</Name>
      <Address>543EE0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f1addr</Name>
      <Address>551E11</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f2addr</Name>
      <Address>53B7CE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f3addr</Name>
      <Address>3AC45E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f4addr</Name>
      <Address>60A1A2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f5addr</Name>
      <Address>15DFCB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f6addr</Name>
      <Address>1712FD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f7addr</Name>
      <Address>1698FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f8addr</Name>
      <Address>552180</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f9addr</Name>
      <Address>552187</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f10addr</Name>
      <Address>B0106</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f11addr</Name>
      <Address>165C00</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f12addr</Name>
      <Address>2CA48B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f13addr</Name>
      <Address>2CB771</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f14addr</Name>
      <Address>B0E408</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f15addr</Name>
      <Address>405EF6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f16addr</Name>
      <Address>60A238</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f17addr</Name>
      <Address>190697</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f18addr</Name>
      <Address>17B4CE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f19addr</Name>
      <Address>194DC0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f20addr</Name>
      <Address>17CAFA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f21addr</Name>
      <Address>FE87F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f22addr</Name>
      <Address>5A0E71</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f23addr</Name>
      <Address>5A4115</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f24addr</Name>
      <Address>FDEC4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f25addr</Name>
      <Address>FBCDF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f26addr</Name>
      <Address>EF317</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f27addr</Name>
      <Address>5B946C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f28addr</Name>
      <Address>5B9449</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f29addr</Name>
      <Address>5A5E37</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f30addr</Name>
      <Address>59EDF6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f31addr</Name>
      <Address>5A0405</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f32addr</Name>
      <Address>6039E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f33addr</Name>
      <Address>1927E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f34addr</Name>
      <Address>5493F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f35addr</Name>
      <Address>29F09C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f36addr</Name>
      <Address>118489</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f37addr</Name>
      <Address>293AC0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f38addr</Name>
      <Address>60D302</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f39addr</Name>
      <Address>608005</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f40addr</Name>
      <Address>4723B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f41addr</Name>
      <Address>1D936A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f42addr</Name>
      <Address>540C94</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f43addr</Name>
      <Address>540CAA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f44addr</Name>
      <Address>5AE96A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f45addr</Name>
      <Address>182419</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f46addr</Name>
      <Address>422A33</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f47addr</Name>
      <Address>4340FD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f48addr</Name>
      <Address>55611C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f49addr</Name>
      <Address>556086</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f50addr</Name>
      <Address>5560CB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f51addr</Name>
      <Address>53B557</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f52addr</Name>
      <Address>53B7CE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f53addr</Name>
      <Address>53D1FD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f54addr</Name>
      <Address>53DF0B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f55addr</Name>
      <Address>60AF88</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f56addr</Name>
      <Address>60AF50</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f57addr</Name>
      <Address>555ECF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f58addr</Name>
      <Address>254A28</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f59addr</Name>
      <Address>339F56</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f60addr</Name>
      <Address>97450</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f61addr</Name>
      <Address>CDF820</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f63addr</Name>
      <Address>10EE49</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f64addr</Name>
      <Address>1B50F5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f65addr</Name>
      <Address>17B487</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f66addr</Name>
      <Address>43ED66</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f67addr</Name>
      <Address>232EB3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f68addr</Name>
      <Address>5A4713</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f69addr</Name>
      <Address>54B8ED</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f70addr</Name>
      <Address>17B918</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f71addr</Name>
      <Address>5346F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f72addr</Name>
      <Address>597AD5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f73addr</Name>
      <Address>17B618</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f74addr</Name>
      <Address>1195DB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f75addr</Name>
      <Address>5B8169</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_f76addr</Name>
      <Address>54575A</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"mhf.exe"+103C</Address>
      <Comment>[_f3addr]</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
