<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <Forms>
    <UDF1>B5564F6F2335149F246D6692344540912848AC39206DA56ED8B450A43DC03669B35BB6DD8426D51609A972329E6454C79EB53D4AE786F828DCF8145C0071E1C027407C0D4E3C7BFEA4D3A655B5EAE6127BFCECF77BBFF77BCFFEBB6659835EE7B13D68EF77B8982E9DEC759A4B87C453A55F0BE5E7C41F4F54E9874269C083D27161F995EFAA49E9A782D3F2F7FC23EE127B6DE81E6BA301D79B5EF25DEA8F59ADC5854BC4C18833595B19FAFD482A323D222CB492A5BE8A28B19DA1ECFB6C0CA3360E94CF59F9C1AE527834818F4871A426048DF194A09EE0232225172B6DEA13A63260B5789EE25AE970A61ADF8598FA2AB26BDEEB362558A828207697B52997C4AE9A3FD8363A5FED61019BD3581CA7C7A5AF61D8AB01EF8F0421AC0DEB44D4FB133E3B60032CCF5B58D88E54BB7486236939405B0F33429DE43FE6AE68E5A92B5A1973CB8620DBC134465E31F3298CECBAC27AF3B7A154BE17BD71A459546E1C55359E6B7BC719E06157F35FB4AC1A607F267818B4F8456D3E4C22584E23F82C8E603D89202C64B9AA64B9CA637D3F8FF5F52D586FC2A6793DC443C3ABF9BF8AEA372BC72BCD50AD7C02DB5BC4E382A088870824A87C16924FEBD57AB5077E2541D8E0D602030B112B2C4815B659AF9E48A33F109FC729E5B3EBB3295113EECA27F5EAC3975C1158C5CAB86384B888331AE9D343F0D54C6C371A1A40B381E6020F8D9BCC31A2BE5470E0F71AF58483488DD3A1E03349C4253BEE99850EC57282028A232236F4E15BD70FCFEA061DEC254727C187598CF1393D730E986DEAF347C00BF8F73D13D439E333348310A5D9D03BD833FEB62FFB1B4668CC93B2ED84944A533E680A0A4498B9001F70E8F5CE0E30F1B0AB299A71712E532763AEC01079F3BDDC2414F94CFA2EC97A01E4A72BE023184788C357918F40AAD0F33611698C1184ABC221D94CCCF46ED9686C548D1CDB9C7261DB23DAA278745E33DF627115EB370BB6160BD66CCE55565C4F6D3E1DF2B89ED261A2DC1789728B1F985EFA47AADCBFACBBBAAE1E400F4DCD2A7A72C05C7251B4EA7A2C1B7D25805F5928AFF5A0B7213C574C037EE58F0C4B31493D1A8E7D76D66C9E9D9E9D9E9E96D702F3E1912E16EC33221AE482942B3C20029BE1876678169B9DCD040E82C4A8EE938B00C888A7D60D05BD3420176A31B005C5BE952FF6E2AAA1ECCF84B2E2D3AC03ADF672C57339B1CB237A4CDC7B48EB3574DB0BD1FD9BA2FB3A43B772B9FADE0A367D6BEFBBBEB2E3BFC552FBE70DA4B6308B05CBAA80C356A81467957490BC161EA4AF85E223E3F5F7948F6EC64739EE167705616E6C108C5D8DF71DEA0C2F04B6E8C2F8E24A96DE31A8FE4BB9F8C5CA607DDC0E853E141A52DC1BA1834313832EF7045D6915CF745FCAE15FBD8544B3621E3AB5B2275B9CBAD62DB95CC46D5C08A5CF336ED74D14DF240FB1E28B2C08A79DDC73F63EC3434A5C27A36FAD3FF39569D2FA81275FF9CCE5B35C56AF91F7654C5E3575FB9EB96C9713AFE3CC6BBDCB08B478FD7A814ACE11F3EEBD11730DDDCEC2D41EA6AFD39FE7A95D7F0EAD1DCDB044530C57482B427BB81FC035202E2576E947EBA9753FADE1AB385F9B851CB4622921AE3F27AEB9838EB0807B78EB7173FB6E54D53C79020D5F5068D0B70AC9FA1F</UDF1>

  </Forms>
  <CheatEntries/>
  <UserdefinedSymbols/>
  <LuaScript>--------------------------------------------------------------------
--------------------------------------------------------------------
----Started at 15/03/2013 by DaSpamer,------------------------------
----Featuers:-------------------------------------------------------
--------------------------------------------------------------------
--1. Using Aobscan to search for Hay Bale Cost and EXP value,-------
---  And then using Break points to inject the opcode.--------------
--------------------------------------------------------------------
--2. Improved Attaching system, with single button------------------
---  Checking if PID is empty or not and attaching based results----
---  and improved checking system, by checking address of Kernel..--
--------------------------------------------------------------------
----Features updates at 16/03/2013----------------------------------
--------------------------------------------------------------------
--3. Added a popup feature after attaching using F6,----------------
---  And when openning the trainer itself..-------------------------
--------------------------------------------------------------------
----To continue..
--------------------------------------------------------------------
----Tasks to do...--------------------------------------------------
--1. Haven't added yet the Instant well generation and Furasion..---
----End of the report-----------------------------------------------
--------------------------------------------------------------------
--------------------------------------------------------------------

-- Form, and Exit and some Variables
--form_show(UDF1)
form_hide(UDF1)
form_show(UDF2)
-- Setting the attaching form on top and then as a normal
-- Like popup...
setProperty(UDF1 , "FormStyle", "fsSystemStayOnTop")
setProperty(UDF1 , "FormStyle", "fsNormal")

-- Closing the trainer..
function CloseClick()
  closeCE()
  return caFree
end
--
--Defining some stuff...
ProcList   = 0
--
EXPhack    = 0 --0 Not checked
Pricehack  = 0 --0 Not checked
--debuggers..
EXPDebug   = 0
PriceDebug = 0
EXPvalue   = 0
Costvalue  = 0
DebugProcessEnabled = false
--
-----------------------------------------------------------

-- Attaching using processor list..
function AttachList()

  local SelectedItemIndex = combobox_getItemIndex(UDF1_CEComboBox1)
  local pname=control_getCaption( UDF1_CEEdit1 );
  if SelectedItemIndex==-1 then return end

  if SelectedItemIndex==-1 then return end

  if SelectedItemIndex==0 and pname ==''  then -- return end
  ProcList = 0
  --elseif pname~='' then
  --AttachPID()
  end

  if SelectedItemIndex==0 and pname~=''  then -- return end
  ProcList = 0
  AttachPID()
  end


  if SelectedItemIndex ==1 and pname =='' then
  openProcess("FlashPlayerPlugin")
  errorOnLookupFailure(false)
  reinitializeSymbolhandler()
  err=getAddress("kernel32.dll")==0
  if err==true then
  ProcList = 0
  showMessage("Couldn't find the prcoessor")
  else
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 1
  showMessage("Attached successfully!")
  end
  elseif SelectedItemIndex ==1 and pname~='' then
  AttachPID()

  else
  if SelectedItemIndex ==2 and pname =='' then
  openProcess("plugin-container.exe")
  errorOnLookupFailure(false)
  reinitializeSymbolhandler()
  err=getAddress("kernel32.dll")==0
  if err==true then
  ProcList = 0
  showMessage("Couldn't find the prcoessor")
  else
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 1
  showMessage("Attached successfully!")
  end
  elseif SelectedItemIndex ==2 and pname~='' then
  AttachPID()

  else
  if SelectedItemIndex ==3 and pname =='' then
  openProcess("opera.exe")
  errorOnLookupFailure(false)
  reinitializeSymbolhandler()
  err=getAddress("kernel32.dll")==0
  if err==true then
  ProcList = 0
  showMessage("Couldn't find the prcoessor")
  else
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 1
  showMessage("Attached successfully!")
  end
  elseif SelectedItemIndex ==3 and pname~='' then
  AttachPID()

  else
  if SelectedItemIndex ==4 and pname =='' then
  openProcess("opera_plugin_wrapper.exe")
  errorOnLookupFailure(false)
  reinitializeSymbolhandler()
  err=getAddress("kernel32.dll")==0
  if err==true then
  ProcList = 0
  showMessage("Couldn't find the prcoessor")
  else
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 1
  showMessage("Attached successfully!")
  end
  elseif SelectedItemIndex ==4 and pname~='' then
  AttachPID()

  else
  if SelectedItemIndex ==5 and pname =='' then
  openProcess("iexplorer.exe")
  errorOnLookupFailure(false)
  reinitializeSymbolhandler()
  err=getAddress("kernel32.dll")==0
  if err==true then
  ProcList = 0
  showMessage("Couldn't find the prcoessor")
  else
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 1
  showMessage("Attached successfully!")
  end
  elseif SelectedItemIndex ==5 and pname~='' then
  AttachPID()

  end
 end
 end
 end
 end
end

function AttachPID()
if ProcList == 0 then
local pname=tonumber(control_getCaption( UDF1_CEEdit1 ));
if pname ~='' then
openProcess(pname)
errorOnLookupFailure(false)
reinitializeSymbolhandler()
err=getAddress("kernel32.dll")==0
if err==true then
 showMessage("Failed attaching to the given Processor ID")
 control_setCaption(UDF1_CEEdit1, '')
 elseif err~=0 then
 local PID=getOpenedProcessID()
 control_setEnabled(UDF1_CEButton2, true)
 control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
 showMessage("Succeed attaching to the given PID")
if pname=='' then return end
 end
 end
end
end

-- Attaching by getting the foreground processor..
function F6Attach()
local fore=getForegroundProcess()
  openProcess(fore)
  local PID=getOpenedProcessID()
  control_setCaption(UDF1_CELabel4, "Currently attached to PID: " .. PID)
  control_setEnabled(UDF1_CEButton2, true)
  ProcList = 0

  -- Popping up the trainer..
  setProperty(UDF1 , "FormStyle", "fsSystemStayOnTop")
  setProperty(UDF1 , "FormStyle", "fsNormal")
end
 -- Creating hotkey that will execute the F6 attach function when its called
Hotkeyattach = createHotkey(F6Attach, VK_F6)

-- Switching forms button
function SwitchingFormsWindow()
form_hide(UDF1) -- this is the attach form
form_show(UDF2) -- edit this to the form name..
--object_destroy(Hotkeyattach) --destroy hotkey F6 attach.. for some reason it don't destroys it.. strange gonna see check it out..
end


function checkboxescheck()
local state=checkbox_getState
if state(UDF2_CECheckbox1)==cbUnchecked then
   EXPhack   = 0
   elseif state(UDF2_CECheckbox1)==cbChecked then
   EXPhack   = 1
   end
if state(UDF2_CECheckbox2)==cbUnchecked then
   Pricehack = 0
   elseif state(UDF2_CECheckbox2)==cbChecked then
   Pricehack = 1
   end
if state(UDF2_CECheckbox1)==cbChecked or state(UDF2_CECheckbox2)==cbChecked then
 control_setEnabled(UDF2_CEButton1, true)
 else
 control_setEnabled(UDF2_CEButton1, false)
 end
end

function EnableHacks()
detachIfPossible()
 setDebugProcess()
if EXPhack   == 1 then
 EXPValueScan()
 end

if Pricehack == 1 then
 CostValueScan()
 end
end

function setDebugProcess()
  if DebugProcessEnabled then return end
  debugProcess()
  DebugProcessEnabled = true
end

function EXPValueScan()
  local results=AOBScan("F0 3F 8D 01 00 00 01 00 00 00")
  if (results~=nil) then
    EXPvalue=('0x'..stringlist_getString(results,0))+2
    object_destroy(results); results=nil

    setDebugProcess()
    debug_setBreakpoint(EXPvalue, 4, bptAccess)
    EXPDebug = 1
    print('debugging EXP')
  end
end


function debugger_onBreakpoint()
  if EXPDebug==1 then
    debug_removeBreakpoint(EXPvalue)
    EXPDebug=0
    if(readInteger(ECX+0x40)==397) then
     registerSymbol("EXPEIPaddress", EIP)
     toggleEXP()
     else
      showMessage("Hack (EXP hack) enabling has failed, please check that you're attached to the right processor")
    end
  end

  if PriceDebug==1 then
    debug_removeBreakpoint(Costvalue)
    PriceDebug=0
    if(readInteger(ECX+0x10)==45000) then
       registerSymbol("CostEIPaddress", EIP)
       toggleCost()
     else
       showMessage("Hack (Cost hack) enabling has failed, please check that you're attached to the right processor")
    end
  end

  debug_continueFromBreakpoint(co_run)
end

function toggleEXP()
script=[[
         alloc(newmem,2048)
         label(returnhere)
         label(exit)
         label(EXPourvalue)
         registersymbol(EXPourvalue)

         newmem:
         //mov eax,[ecx+40]
         //mov ecx,[ebp-10]
         mov eax,[EXPourvalue]
         mov ecx,[ebp-10]
         jmp exit

         exit:
         jmp returnhere

         EXPourvalue:
         db 64

         EXPEIPaddress-3:
         jmp newmem
         nop
         returnhere:
         ]]
autoAssemble(script);
showMessage("Done, hack was enabled")
end

function disableEXP()
script=[[
         EXPEIPaddress-3:
         mov eax,[ecx+40]
         mov ecx,[ebp-10]
         dealloc(newmem)]]
autoAssemble(script);
script=[[
         unregistersymbol(EXPvalue)
         unregistersymbol(EXPourvalue)
         unregistersymbol(EXPEIPaddress)
         ]]
autoAssemble(script);
showMessage("Done, hack was disabled")
end

function CostValueScan()

  local results=AOBScan("C8 AF 00 00 C8 AF 00 00 00 00 00 00")
  if (results~=nil) then
    Costvalue=('0x'..stringlist_getString(results,0))+0
    object_destroy(results); results=nil

    setDebugProcess()
    debug_setBreakpoint(Costvalue, 4, bptAccess)
    PriceDebug = 1
    print('debugging Cost')
  end
end


function toggleCost()
script=[[
         alloc(newmem,2048)
         label(returnhere)
         label(exit)
         label(Costourvalue)
         registersymbol(Costourvalue)

         newmem:
         //mov eax,[ecx+10]
         //mov ecx,[ebp-10]
         mov eax, [Costourvalue]
         mov ecx,[ebp-10]
         jmp exit

         exit:
         jmp returnhere

         Costourvalue:
         db 64

         CostEIPaddress-3:
         jmp newmem
         nop
         returnhere:
         ]]
autoAssemble(script);
showMessage("Done, hack was enabled")
end

function disableCost()
script=[[
         CostEIPaddress-3:
         mov eax,[ecx+10]
         mov ecx,[ebp-10]
         dealloc(newmem)]]
autoAssemble(script);
script=[[
         unregistersymbol(Costvalue)
         unregistersymbol(Costourvalue)
         unregistersymbol(CostEIPaddress)
         ]]
autoAssemble(script);
showMessage("Done, hack was disabled")
end
function CEButton2Click(sender)
disableCost()
disableEXP()
end

</LuaScript>
</CheatTable>
