<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>539</ID>
      <Description>"Mana"</Description>
      <Color>80000008</Color>
      <VariableType>Float</VariableType>
      <Address>CraftWorld.exe+2E63D8</Address>
      <Offsets>
        <Offset>1C</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>548</ID>
      <Description>"XP"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>CraftWorld.exe+2E667C</Address>
      <Offsets>
        <Offset>8</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>360</ID>
      <Description>"Disable Mana Consumption"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(Mana_newmem,1024)
label(Mana_returnhere)
label(Mana_exit)
label(aob_Mana_r)
registersymbol(aob_Mana_r)
aobscan(aob,51 8B 45 08 F3 0F 10 49 18 66 0F 6E C0 0F 5B C0 F3 0F 58 41 1C 0F 2F C1 F3 0F 11 41 1C)

Mana_newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov eax,[ebp+08]
movss xmm1,[ecx+18]
movd xmm0,eax
cvtdq2ps xmm0,xmm0
addss xmm0,[ecx+1C]
comiss xmm0,xmm1
//movss [ecx+1C],xmm0

Mana_exit:
jmp Mana_returnhere

aob:
aob_Mana_r:
jmp Mana_newmem
db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
Mana_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(Mana_newmem)
aob_Mana_r:
db 51 8B 45 08 F3 0F 10 49 18 66 0F 6E C0 0F 5B C0 F3 0F 58 41 1C 0F 2F C1 F3 0F 11 41 1C
unregistersymbol(aob_Mana_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>544</ID>
      <Description>"Negate fall dmg"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(Fall_newmem,1024)
label(Fall_returnhere)
label(Fall_exit)
label(aob_Fall_r)
registersymbol(aob_Fall_r)
aobscan(aob,F3 0F 5C C1 0F 57 C9 0F 2F C8 F3 0F 11 86 A8 00 00 00)

Fall_newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorps xmm1,xmm1
subss xmm0,xmm1
xorps xmm1,xmm1
comiss xmm1,xmm0
movss [esi+000000A8],xmm0


Fall_exit:
jmp Fall_returnhere

aob:
aob_Fall_r:
jmp Fall_newmem
db 90 90 90 90 90 90 90 90 90 90 90 90 90
Fall_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(Fall_newmem)
aob_Fall_r:
db F3 0F 5C C1 0F 57 C9 0F 2F C8 F3 0F 11 86 A8 00 00 00
unregistersymbol(aob_Fall_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>545</ID>
      <Description>"Immune mobs"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(ImmuneMob_newmem,1024)
label(ImmuneMob_returnhere)
label(ImmuneMob_exit)
label(aob_ImmuneMob_r)
registersymbol(aob_ImmuneMob_r)
aobscan(aob,F3 0F 10 8E 08 FD FF FF F3 0F 5C C8 F3 0F 11 8E 08 FD FF FF)

ImmuneMob_newmem: //this is allocated memory, you have read,write,execute access
//place your code here
xorps xmm0,xmm0
movss xmm1,[esi-000002F8]
subss xmm1,xmm0
movss [esi-000002F8],xmm1


ImmuneMob_exit:
jmp ImmuneMob_returnhere

aob:
aob_ImmuneMob_r:
jmp ImmuneMob_newmem
db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
ImmuneMob_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(ImmuneMob_newmem)
aob_ImmuneMob_r:
db F3 0F 10 8E 08 FD FF FF F3 0F 5C C8 F3 0F 11 8E 08 FD FF FF
unregistersymbol(aob_ImmuneMob_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>356</ID>
      <Description>"Disable hunger"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(Hunger_newmem,1024)
label(Hunger_returnhere)
label(Hunger_exit)
label(aob_Hunger_r)
registersymbol(aob_Hunger_r)
aobscan(aob,0F 28 CA F3 0F 5E 48 1C F3 0F 59 C8 F3 0F 10 86 AC 00 00 00 F3 0F 5C C1 F3 0F 11 86 AC 00 00 00)

Hunger_newmem: //this is allocated memory, you have read,write,execute access
//place your code here
movaps xmm1,xmm2
divss xmm1,[eax+1C]
mulss xmm1,xmm0
movss xmm0,[esi+000000AC]
xorps xmm1,xmm1
subss xmm0,xmm1
movss [esi+000000AC],xmm0



Hunger_exit:
jmp Hunger_returnhere

aob:
aob_Hunger_r:
jmp Hunger_newmem
db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
Hunger_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(Hunger_newmem)
aob_Hunger_r:
db 0F 28 CA F3 0F 5E 48 1C F3 0F 59 C8 F3 0F 10 86 AC 00 00 00 F3 0F 5C C1 F3 0F 11 86 AC 00 00 00
unregistersymbol(aob_Hunger_r)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>541</ID>
      <Description>"Resources"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(privatearea,2048)
label(privatearea_r)
registersymbol(privatearea_r)

privatearea:
privatearea_r:
dd 00000032

[DISABLE]
dealloc(privatearea)
unregistersymbol(privatearea_r)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>276</ID>
          <Description>"Infinite resources"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(Resource_newmem,1024)
label(Resource_returnhere)
label(Resource_exit)
label(aob_Resource_r)
registersymbol(aob_Resource_r)
aobscan(aob,01 5F 4C 8B 47 4C B9 E7 03 00 00 3B C1 0F 4F C1 89 47 4C 85 DB)

Resource_newmem: //this is allocated memory, you have read,write,execute access
//place your code here
add [edi+4C],ebx
mov eax,[edi+4C]
mov ecx,000003E7
cmp eax,ecx
cmovg eax,ecx

//privatearea_r+00 = Minimum resources
mov ecx,[privatearea_r]
cmp eax,ecx
cmovl eax,ecx

mov [edi+4C],eax

test ebx,ebx


Resource_exit:
jmp Resource_returnhere

aob:
aob_Resource_r:
jmp Resource_newmem
db 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
Resource_returnhere:


[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(Resource_newmem)
aob_Resource_r:
db 01 5F 4C 8B 47 4C B9 E7 03 00 00 3B C1 0F 4F C1 89 47 4C 85 DB
unregistersymbol(aob_Resource_r)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>540</ID>
              <Description>"Minimum resources"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>privatearea_r</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
