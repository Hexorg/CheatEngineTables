<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>134096</ID>
      <Description>"Enable pointer scan (updated when accessed)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
registersymbol(basepointer)
alloc(basepointer,4)
registersymbol(health_pointer)
alloc(health_pointer,4)
registersymbol(mana_pointer)
alloc(mana_pointer,4)
registersymbol(experience_pointer)
alloc(experience_pointer,4)
registersymbol(strength_pointer)
alloc(strength_pointer,4)
registersymbol(dexterity_pointer)
alloc(dexterity_pointer,4)
registersymbol(gold_person_pointer)
alloc(gold_person_pointer,4)
registersymbol(gold_stash_pointer)
alloc(gold_stash_pointer,4)
registersymbol(run_speed_pointer)
alloc(run_speed_pointer,4)
registersymbol(magc_find_pointer)
alloc(magc_find_pointer,4)
registersymbol(attack_rating_pointer)
alloc(attack_rating_pointer,4)

{
"Game.exe"+2258D0: 55                    -  push ebp
"Game.exe"+2258D1: 8B EC                 -  mov ebp,esp
"Game.exe"+2258D3: 8B 45 08              -  mov eax,[ebp+08]
"Game.exe"+2258D6: 85 C0                 -  test eax,eax
"Game.exe"+2258D8: 74 76                 -  je Game.exe+225950
"Game.exe"+2258DA: 83 7D 0C 00           -  cmp dword ptr [ebp+0C],00
"Game.exe"+2258DE: 75 06                 -  jne Game.exe+2258E6
"Game.exe"+2258E0: 83 7D 10 00           -  cmp dword ptr [ebp+10],00
"Game.exe"+2258E4: 75 6A                 -  jne Game.exe+225950
"Game.exe"+2258E6: 56                    -  push esi
// ---------- INJECTING HERE ----------
"Game.exe"+2258E7: 8B 70 5C              -  mov esi,[eax+5C]
"Game.exe"+2258EA: 85 F6                 -  test esi,esi
// ---------- DONE INJECTING  ----------
"Game.exe"+2258EC: 74 61                 -  je Game.exe+22594F
"Game.exe"+2258EE: F7 46 10 00 00 00 80  -  test [esi+10],80000000
"Game.exe"+2258F5: 74 58                 -  je Game.exe+22594F
"Game.exe"+2258F7: 53                    -  push ebx
"Game.exe"+2258F8: 33 DB                 -  xor ebx,ebx
"Game.exe"+2258FA: 66 39 5E 54           -  cmp [esi+54],bx
"Game.exe"+2258FE: 7E 4E                 -  jle Game.exe+22594E
"Game.exe"+225900: 57                    -  push edi
"Game.exe"+225901: 8B 46 50              -  mov eax,[esi+50]
"Game.exe"+225904: 8B 3C 98              -  mov edi,[eax+ebx*4]
}
aobscanmodule(aobBasepointer,Game.exe,8B 70 5C 85 F6 74 61)
registersymbol(addressBasepointer)
alloc(injectionBasepointer,128)
label(addressBasepointer)
label(returnBasepointer)

injectionBasepointer:
  mov esi,[eax+5C]
  lea esi,[esi]
  mov [basepointer],esi
  // original code
  mov esi,[eax+5C]
  test esi,esi
  jmp returnBasepointer

aobBasepointer:
addressBasepointer:
  jmp injectionBasepointer
returnBasepointer:

{
"Game.exe"+224F81: 7C 09                 -  jl Game.exe+224F8C
"Game.exe"+224F83: 8B 0E                 -  mov ecx,[esi]
"Game.exe"+224F85: 8D 04 C1              -  lea eax,[ecx+eax*8]
"Game.exe"+224F88: 85 C0                 -  test eax,eax
"Game.exe"+224F8A: 75 09                 -  jne Game.exe+224F95
"Game.exe"+224F8C: 33 C0                 -  xor eax,eax
"Game.exe"+224F8E: 5E                    -  pop esi
"Game.exe"+224F8F: 8B E5                 -  mov esp,ebp
"Game.exe"+224F91: 5D                    -  pop ebp
"Game.exe"+224F92: C2 04 00              -  ret 0004
// ---------- INJECTING HERE ----------
"Game.exe"+224F95: 8B 75 08              -  mov esi,[ebp+08]
"Game.exe"+224F98: 85 F6                 -  test esi,esi
// ---------- DONE INJECTING  ----------
"Game.exe"+224F9A: 8B 40 04              -  mov eax,[eax+04]
"Game.exe"+224F9D: 74 34                 -  je Game.exe+224FD3
"Game.exe"+224F9F: 8A 15 70 E2 6C 00     -  mov dl,[Game.exe+2CE270]
"Game.exe"+224FA5: 84 56 05              -  test [esi+05],dl
"Game.exe"+224FA8: 74 29                 -  je Game.exe+224FD3
"Game.exe"+224FAA: 83 7D FC 00           -  cmp dword ptr [ebp-04],00
"Game.exe"+224FAE: 74 23                 -  je Game.exe+224FD3
"Game.exe"+224FB0: 8B 4B 44              -  mov ecx,[ebx+44]
"Game.exe"+224FB3: 85 C9                 -  test ecx,ecx
"Game.exe"+224FB5: 74 1C                 -  je Game.exe+224FD3
}
aobscanmodule(aobStats,Game.exe,8B 75 08 85 F6 8B 40 04 74 34)
registersymbol(addressStats)
alloc(injectionStats,256)
label(exitHealth)
label(exitMana)
label(exitExperience)
label(exitStrength)
label(exitDexterity)
label(exitGoldPerson)
label(exitGoldStash)
label(exitRunSpeed)
label(exitMagicFind)
label(exitStats)
label(addressStats)
label(returnStats)

// main game loop which updates everyting
injectionStats:
  pushf // save flags state
  cmp ebx,[basepointer] // check if updating character
  jne exitStats
  lea esi,[eax+04]  // load addres for value that's being updated
  // Health
  cmp edx,00060000 // check if updating Health
  jne exitHealth
  mov [health_pointer],esi
exitHealth:
  // Mana
  cmp edx,00080000 // check if updating Mana
  jne exitMana
  mov [mana_pointer],esi
exitMana:
  // Experience
  cmp edx,000D0000 // check if updating Experience
  jne exitExperience
  mov [experience_pointer],esi
exitExperience:
  // Strength
  cmp edx,00000000 // check if updating Strength
  jne exitStrength
  mov [strength_pointer],esi
exitStrength:
  // Dexterity
  cmp edx,00020000 // check if updating Dexterity
  jne exitDexterity
  mov [dexterity_pointer],esi
exitDexterity:
 // Gold on person
  cmp edx,000E0000 // check if updating Dexterity
  jne exitGoldPerson
  mov [gold_person_pointer],esi
exitGoldPerson:
  // Gold in stash
  cmp edx,000F0000 // check if updating Dexterity
  jne exitGoldStash
  mov [gold_stash_pointer],esi
exitGoldStash:
  // Running Speed
  cmp edx,00430000 // check if updating Dexterity
  jne exitRunSpeed
  mov [run_speed_pointer],esi
exitRunSpeed:
  // Magic Find
  cmp edx,00500000 // check if updating Magic Find
  jne exitMagicFind
  mov [magc_find_pointer],esi
exitMagicFind:
exitStats:
  popf // restore flags state
  // original code
  mov esi,[ebp+08]
  test esi,esi
  jmp returnStats

aobStats:
addressStats:
  jmp injectionStats
returnStats:

{
"Game.exe"+22516F: 8B 7D 0C              -  mov edi,[ebp+0C]
"Game.exe"+225172: 85 FF                 -  test edi,edi
"Game.exe"+225174: 74 70                 -  je Game.exe+2251E6
"Game.exe"+225176: 8B 13                 -  mov edx,[ebx]
"Game.exe"+225178: 8B 45 08              -  mov eax,[ebp+08]
"Game.exe"+22517B: 52                    -  push edx
"Game.exe"+22517C: E8 FF FA FF FF        -  call Game.exe+224C80
"Game.exe"+225181: EB 03                 -  jmp Game.exe+225186
"Game.exe"+225183: 8B 7D 0C              -  mov edi,[ebp+0C]
"Game.exe"+225186: 85 FF                 -  test edi,edi
// ---------- INJECTING HERE ----------
"Game.exe"+225188: 8B 48 04              -  mov ecx,[eax+04]
"Game.exe"+22518B: 89 4D 0C              -  mov [ebp+0C],ecx
// ---------- DONE INJECTING  ----------
"Game.exe"+22518E: 75 18                 -  jne Game.exe+2251A8
"Game.exe"+225190: 8B 55 10              -  mov edx,[ebp+10]
"Game.exe"+225193: 80 7A 50 00           -  cmp byte ptr [edx+50],00
"Game.exe"+225197: 75 0F                 -  jne Game.exe+2251A8
"Game.exe"+225199: 8B 0B                 -  mov ecx,[ebx]
"Game.exe"+22519B: 51                    -  push ecx
"Game.exe"+22519C: 8B D0                 -  mov edx,eax
"Game.exe"+22519E: E8 6D FB FF FF        -  call Game.exe+224D10
"Game.exe"+2251A3: 8B 4D 0C              -  mov ecx,[ebp+0C]
"Game.exe"+2251A6: EB 13                 -  jmp Game.exe+2251BB
}
aobscanmodule(aobLazyStats,Game.exe,8B 48 04 89 4D 0C 75 18)
registersymbol(addressLazyStats)
alloc(injectionLazyStats,128)
label(exitLazyMF)
label(exitLazyAttackRating)
label(exitLazyStats)
label(addressLazyStats)
label(returnLazyStats)

// some stats are updated when changed instead of when being accessed
// Magic Find updated in both cases
injectionLazyStats:
  pushf // save flags state
  cmp ebx,[basepointer] // check if updating character
  jne exitLazyStats
  // Magic Find
  cmp edx,00500000 // check if updating Magic Find
  jne exitLazyMF
  lea ecx,[eax+04]
  mov [magc_find_pointer],ecx
exitLazyMF:
  // Attack Rating
  cmp edx,00130000
  jne exitLazyAttackRating // check if updating Attack Rating
  lea ecx,[eax+04]
  mov [attack_rating_pointer],ecx
exitLazyAttackRating:
exitLazyStats:
  popf // restore flags state
  // original code
  mov ecx,[eax+04]
  mov [ebp+0C],ecx
  jmp returnLazyStats

aobLazyStats:
addressLazyStats:
  jmp injectionLazyStats
  nop
returnLazyStats:

[DISABLE]

addressBasepointer:
  db 8B 70 5C 85 F6
unregistersymbol(addressBasepointer)
dealloc(injectionBasepointer)

addressStats:
  db 8B 75 08 85 F6
unregistersymbol(addressStats)
dealloc(injectionStats)

addressLazyStats:
  db 8B 48 04 89 4D 0C
unregistersymbol(addressLazyStats)
dealloc(injectionLazyStats)

unregistersymbol(basepointer)
dealloc(basepointer)
unregistersymbol(health_pointer)
dealloc(health_pointer)
unregistersymbol(mana_pointer)
dealloc(mana_pointer)
unregistersymbol(experience_pointer)
dealloc(experience_pointer)
unregistersymbol(strength_pointer)
dealloc(strength_pointer)
unregistersymbol(dexterity_pointer)
dealloc(dexterity_pointer)
unregistersymbol(gold_person_pointer)
dealloc(gold_person_pointer)
unregistersymbol(gold_stash_pointer)
dealloc(gold_stash_pointer)
unregistersymbol(run_speed_pointer)
dealloc(run_speed_pointer)
unregistersymbol(magc_find_pointer)
dealloc(magc_find_pointer)
unregistersymbol(attack_rating_pointer)
dealloc(attack_rating_pointer)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>111728</ID>
          <Description>"Health"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>2 Bytes</VariableType>
          <Address>health_pointer</Address>
          <Offsets>
            <Offset>1</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134120</ID>
          <Description>"Mana"</Description>
          <VariableType>2 Bytes</VariableType>
          <Address>mana_pointer</Address>
          <Offsets>
            <Offset>1</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134121</ID>
          <Description>"Experience"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>experience_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134122</ID>
          <Description>"Strength"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>strength_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134123</ID>
          <Description>"Dexterity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>dexterity_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134124</ID>
          <Description>"Gold on person"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>gold_person_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134125</ID>
          <Description>"Gold in stash"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>gold_stash_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134126</ID>
          <Description>"Running Speed"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>run_speed_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134094</ID>
          <Description>"Magic Find"</Description>
          <ShowAsSigned>1</ShowAsSigned>
          <VariableType>2 Bytes</VariableType>
          <Address>magc_find_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>134119</ID>
          <Description>"Attack Rating"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>attack_rating_pointer</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>134110</ID>
      <Description>"Override magic find check (has troubles with set itmes)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(coefficient,4)
registersymbol(coefficient)

{
"Game.exe"+15875B: 74 0A                 -  je Game.exe+158767
"Game.exe"+15875D: 8B C6                 -  mov eax,esi
"Game.exe"+15875F: 6B C0 64              -  imul eax,eax,64
"Game.exe"+158762: 99                    -  cdq
"Game.exe"+158763: F7 F9                 -  idiv ecx
"Game.exe"+158765: 8B F0                 -  mov esi,eax
"Game.exe"+158767: 8B 47 08              -  mov eax,[edi+08]
"Game.exe"+15876A: 3B F0                 -  cmp esi,eax
"Game.exe"+15876C: 7F 02                 -  jg Game.exe+158770
"Game.exe"+15876E: 8B F0                 -  mov esi,eax
// ---------- INJECTING HERE ----------
"Game.exe"+158770: 8B 45 14              -  mov eax,[ebp+14]
"Game.exe"+158773: 0F B7 40 06           -  movzx eax,word ptr [eax+06]
// ---------- DONE INJECTING  ----------
"Game.exe"+158777: 0F AF C6              -  imul eax,esi
"Game.exe"+15877A: 99                    -  cdq
"Game.exe"+15877B: 81 E2 FF 03 00 00     -  and edx,000003FF
"Game.exe"+158781: 03 C2                 -  add eax,edx
"Game.exe"+158783: C1 F8 0A              -  sar eax,0A
"Game.exe"+158786: F7 D8                 -  neg eax
"Game.exe"+158788: 03 F0                 -  add esi,eax
"Game.exe"+15878A: 85 F6                 -  test esi,esi
"Game.exe"+15878C: 0F 8E 21 FF FF FF     -  jng Game.exe+1586B3
"Game.exe"+158792: 8B 4D 0C              -  mov ecx,[ebp+0C]
}
aobscanmodule(aobMagicFind,Game.exe,8B 45 14 0F B7 40 06)
registersymbol(addressMagicFind)
alloc(injectionMagicFind,64)
label(exitCoefficient)
label(addressMagicFind)
label(returnMagicFind)

injectionMagicFind:
  pushf // save flags state
  // esi containt an integer that'll be used to determine item quality
  // the higher values means harder to get high quality item
  // note that set items are acually considered less qualitative then uniques
  mov eax, esi
  mov esi,0
  cmp [coefficient],0
  je exitCoefficient // maximum quality for selected loot table will always drop
  push edx // save register state
  mov edx,0 // prepare for division
  idiv [coefficient] // make quality items coefficient times more likely to drop
  mov esi,eax
  pop edx // restore register state
exitCoefficient:
  popf // restore flags state
  // original code
  mov eax,[ebp+14]
  movzx eax,word ptr [eax+06]
  jmp returnMagicFind

aobMagicFind:
addressMagicFind:
  jmp injectionMagicFind
  nop
  nop
returnMagicFind:

[DISABLE]

addressMagicFind:
  db 8B 45 14 0F B7 40 06
unregistersymbol(addressMagicFind)
dealloc(injectionMagicFind)

unregistersymbol(coefficient)
dealloc(coefficient)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>134111</ID>
          <Description>"Make quality drops this times more likely (0 = always)"</Description>
          <VariableType>Byte</VariableType>
          <Address>coefficient</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>SkillManager_savedAOB</Name>
      <Address>0100295F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Item_savedAOB</Name>
      <Address>010839EE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Skill_savedAOB</Name>
      <Address>010209E3</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>address</Name>
      <Address>00624F9A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT</Name>
      <Address>0062587B</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
