<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>194</ID>
      <Description>"M&amp;M X - Gold script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobGoldReader,8B 86 98 00 00 00 89 45 DC 8D 45 DC)

alloc(newmem,2048)

label(aobGoldReader_r)
registersymbol(aobGoldReader_r)

label(bEnableMinimumGold)
label(iMinimumGold)
registersymbol(bEnableMinimumGold)
registersymbol(iMinimumGold)

label(lblGoldReader)
label(lblGoldReaderSkip)
label(lblGoldReaderRet)

newmem:
bEnableMinimumGold:
dd 1
iMinimumGold:
dd (int)50000

lblGoldReader:
mov eax,[iMinimumGold]
cmp dword ptr [esi+98],eax
jge short lblGoldReaderSkip
mov dword ptr [esi+98],eax
jmp lblGoldReaderRet
lblGoldReaderSkip:
mov eax,[esi+00000098]
jmp lblGoldReaderRet

aobGoldReader:
aobGoldReader_r:
jmp lblGoldReader
nop
lblGoldReaderRet:

[DISABLE]
aobGoldReader_r:
db 8B 86 98 00 00 00

unregistersymbol(bEnableMinimumGold)
unregistersymbol(iMinimumGold)

unregistersymbol(aobGoldReader_r)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>195</ID>
          <Description>"bEnableMinimumGold"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinimumGold</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>196</ID>
              <Description>"iMinimumGold"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinimumGold</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>172</ID>
      <Description>"M&amp;M X - XP Gain script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobXPGainer,03 45 0C 89 86 B0 00 00 00)

alloc(newmem,2048)

label(aobXPGainer_r)
registersymbol(aobXPGainer_r)

label(lblXPGainer)
label(lblXPGainerSkip)
label(lblXPGainerRet)

label(bEnableXPGainMultiplier)
label(fXPGainMultiplier)
registersymbol(bEnableXPGainMultiplier)
registersymbol(fXPGainMultiplier)

newmem:
bEnableXPGainMultiplier:
dd 1
fXPGainMultiplier:
dd (float)2.5

lblXPGainer:
cmp dword ptr [bEnableXPGainMultiplier],1
jne short lblXPGainerSkip
fild dword ptr [ebp+0C]
fmul dword ptr [fXPGainMultiplier]
fistp dword ptr [ebp+0C]
lblXPGainerSkip:
add eax,[ebp+0C]
mov [esi+000000B0],eax
jmp lblXPGainerRet

aobXPGainer:
aobXPGainer_r:
jmp lblXPGainer
nop
nop
nop
nop
lblXPGainerRet:

[DISABLE]
aobXPGainer_r:
db 03 45 0C 89 86 B0 00 00 00

unregistersymbol(aobXPGainer_r)

unregistersymbol(bEnableXPGainMultiplier)
unregistersymbol(fXPGainMultiplier)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>173</ID>
          <Description>"bEnableXPGainMultiplier"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableXPGainMultiplier</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>174</ID>
              <Description>"fXPGainMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fXPGainMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>204</ID>
      <Description>"M&amp;M X - Item XP Gain script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobItemXPGainer,03 45 0C 89 46 1C 89 45 F8)

alloc(newmem,2048)

label(aobItemXPGainer_r)
registersymbol(aobItemXPGainer_r)

label(lblItemXPGainer)
label(lblItemXPGainerSkip)
label(lblItemXPGainerRet)

label(bEnableItemXPGainMultiplier)
label(fItemXPGainMultiplier)
registersymbol(bEnableItemXPGainMultiplier)
registersymbol(fItemXPGainMultiplier)

newmem:
bEnableItemXPGainMultiplier:
dd 1
fItemXPGainMultiplier:
dd (float)2.5

lblItemXPGainer:
cmp dword ptr [bEnableItemXPGainMultiplier],1
jne short lblItemXPGainerSkip
fild dword ptr [ebp+0C]
fmul dword ptr [fItemXPGainMultiplier]
fistp dword ptr [ebp+0C]
lblItemXPGainerSkip:
add eax,[ebp+0C]
mov [esi+1C],eax
jmp lblItemXPGainerRet

aobItemXPGainer:
aobItemXPGainer_r:
jmp lblItemXPGainer
nop
lblItemXPGainerRet:

[DISABLE]
aobItemXPGainer_r:
db 03 45 0C 89 46 1C

unregistersymbol(aobItemXPGainer_r)

unregistersymbol(bEnableItemXPGainMultiplier)
unregistersymbol(fItemXPGainMultiplier)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>205</ID>
          <Description>"bEnableItemXPGainMultiplier"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableItemXPGainMultiplier</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>206</ID>
              <Description>"fItemXPGainMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fItemXPGainMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>175</ID>
      <Description>"M&amp;M X - Stat script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobHealthReader,8B 87 9C 00 00 00 89 85 08 FE FF FF)

alloc(newmem,2048)

label(aobHealthReader_r)
registersymbol(aobHealthReader_r)

label(lblHealthReader)
label(lblHealthReaderSkipHealth)
label(lblHealthReaderSkipMana)
label(lblHealthReaderSkipAttributes)
label(lblHealthReaderSkipSkills)
label(lblHealthReaderRet)

label(bEnableHealthRefill)
label(bEnableManaRefill)
label(bEnableMinimumAttributePoints)
label(iMinimumAttributePoints)
label(bEnableMinimumSkillPoints)
label(iMinimumSkillPoints)
registersymbol(bEnableHealthRefill)
registersymbol(bEnableManaRefill)
registersymbol(bEnableMinimumAttributePoints)
registersymbol(iMinimumAttributePoints)
registersymbol(bEnableMinimumSkillPoints)
registersymbol(iMinimumSkillPoints)

newmem:
bEnableHealthRefill:
dd 1
bEnableManaRefill:
dd 1
bEnableMinimumAttributePoints:
dd 1
iMinimumAttributePoints:
dd (int)60
bEnableMinimumSkillPoints:
dd 1
iMinimumSkillPoints:
dd (int)24

lblHealthReader:
cmp dword ptr [bEnableManaRefill],1
jne short lblHealthReaderSkipHealth
mov eax,[edi+94]
mov dword ptr [edi+9C],eax
lblHealthReaderSkipHealth:

cmp dword ptr [bEnableManaRefill],1
jne short lblHealthReaderSkipMana
mov eax,[edi+98]
mov dword ptr [edi+A0],eax
lblHealthReaderSkipMana:

cmp dword ptr [bEnableMinimumSkillPoints],1
jne short lblHealthReaderSkipAttributes
mov eax,[iMinimumAttributePoints]
cmp dword ptr [edi+D4],eax
jge short lblHealthReaderSkipAttributes
mov dword ptr [edi+D4],eax
lblHealthReaderSkipAttributes:

cmp dword ptr [bEnableMinimumSkillPoints],1
jne short lblHealthReaderSkipSkills
mov eax,[iMinimumSkillPoints]
cmp dword ptr [edi+D0],eax
jge short lblHealthReaderSkipSkills
mov dword ptr [edi+D0],eax
lblHealthReaderSkipSkills:

mov eax,[edi+0000009C]
jmp lblHealthReaderRet

aobHealthReader:
aobHealthReader_r:
jmp lblHealthReader
nop
lblHealthReaderRet:

[DISABLE]
aobHealthReader_r:
db 8B 87 9C 00 00 00

unregistersymbol(aobHealthReader_r)

unregistersymbol(bEnableHealthRefill)
unregistersymbol(bEnableManaRefill)
unregistersymbol(bEnableMinimumAttributePoints)
unregistersymbol(iMinimumAttributePoints)
unregistersymbol(bEnableMinimumSkillPoints)
unregistersymbol(iMinimumSkillPoints)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>176</ID>
          <Description>"bEnableHealthRefill"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableHealthRefill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>177</ID>
          <Description>"bEnableManaRefill"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableManaRefill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>178</ID>
          <Description>"bEnableMinimumAttributePoints"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinimumAttributePoints</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>179</ID>
              <Description>"iMinimumAttributePoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinimumAttributePoints</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>180</ID>
          <Description>"bEnableMinimumSkillPoints"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinimumSkillPoints</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>181</ID>
              <Description>"iMinimumSkillPoints"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinimumSkillPoints</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>189</ID>
      <Description>"M&amp;M X - Party Effect script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobPartyEffectHandler,8B 49 0C 83 EC 08 51 50 39 00 E8 ?? ?? ?? ?? 83 C4 10 8B 46 30)

alloc(newmem,2048)

label(aobPartyEffectHandler_r)
registersymbol(aobPartyEffectHandler_r)

label(lblPartyEffectHandler)
label(lblPartyEffectHandlerSkipBooster)
label(lblPartyEffectHandlerSkipDampener)
label(lblPartyEffectHandlerRet)

label(bEnablePartyEffectBooster)
label(iBoosterValue)
label(bEnablePartyEffectDampener)
label(iDampenerValue)
registersymbol(bEnablePartyEffectBooster)
registersymbol(iBoosterValue)
registersymbol(bEnablePartyEffectDampener)
registersymbol(iDampenerValue)

newmem:
bEnablePartyEffectBooster:
dd 1
iBoosterValue:
dd (int)999
bEnablePartyEffectDampener:
dd 1
iDampenerValue:
dd (int)3

lblPartyEffectHandler:
push eax
cmp dword ptr [bEnablePartyEffectBooster],1
jne short lblPartyEffectHandlerSkipBooster
pushad
push 11
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblPartyEffectHandlerSkipBooster
mov eax,[iBoosterValue]
cmp dword ptr [ecx+14],eax
jge short lblPartyEffectHandlerSkipBooster
mov dword ptr [ecx+14],eax
lblPartyEffectHandlerSkipBooster:

cmp dword ptr [bEnablePartyEffectDampener],1
jne short lblPartyEffectHandlerSkipDampener
pushad
push 12
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblPartyEffectHandlerSkipDampener
mov eax,[iDampenerValue]
cmp dword ptr [ecx+14],eax
jle short lblPartyEffectHandlerSkipDampener
mov dword ptr [ecx+14],eax
lblPartyEffectHandlerSkipDampener:
pop eax
mov ecx,[ecx+0C]
sub esp,08
jmp lblPartyEffectHandlerRet

aobPartyEffectHandler:
aobPartyEffectHandler_r:
jmp lblPartyEffectHandler
nop
lblPartyEffectHandlerRet:

[DISABLE]
aobPartyEffectHandler_r:
db 8B 49 0C 83 EC 08

unregistersymbol(aobPartyEffectHandler_r)

unregistersymbol(bEnablePartyEffectBooster)
unregistersymbol(iBoosterValue)
unregistersymbol(bEnablePartyEffectDampener)
unregistersymbol(iDampenerValue)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>190</ID>
          <Description>"bEnablePartyEffectBooster (CTRL, drag over, wait for hint)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnablePartyEffectBooster</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>191</ID>
              <Description>"iBoosterValue"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iBoosterValue</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>192</ID>
          <Description>"bEnablePartyEffectDampener (ALT, drag over, wait for hint)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnablePartyEffectDampener</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>193</ID>
              <Description>"iDampenerValue"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iDampenerValue</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>221</ID>
      <Description>"M&amp;M X - Skill tier script"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobTierReader,8B 46 44 85 C0 75 ?? 8B)

alloc(newmem,2048)

label(aobTierReader_r)
registersymbol(aobTierReader_r)

label(lblTierReader)
//label(lblTierReaderSkipMaxBooster)
label(lblTierReaderSkipLevelUpgrader)
label(lblTierReaderRet)

//label(bEnableTierMaxBooster)
//label(iTierMaxBoostValue)
label(bEnableTierUpgrader)
//registersymbol(bEnableTierMaxBooster)
//registersymbol(iTierMaxBoostValue)
registersymbol(bEnableTierUpgrader)

newmem:
/*
bEnableTierMaxBooster:
dd 1
iTierMaxBoostValue:
dd (int)4
*/
bEnableTierUpgrader:
dd 1

lblTierReader:
push ebx
/*
cmp dword ptr [bEnableTierMaxBooster],1
jne short lblTierReaderSkipMaxBooster
pushad
push 11
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblTierReaderSkipMaxBooster
mov eax,[iTierMaxBoostValue]
cmp dword ptr [esi+48],eax
jge short lblTierReaderSkipMaxBooster
mov dword ptr [esi+48],eax
lblTierReaderSkipMaxBooster:
*/

cmp dword ptr [bEnableTierUpgrader],1
jne short lblTierReaderSkipLevelUpgrader
pushad
push 12
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblTierReaderSkipLevelUpgrader
mov eax,[esi+44]
mov ebx,[esi+48]
inc eax
cmp eax,ebx
jg short lblTierReaderSkipLevelUpgrader
mov dword ptr [esi+44],eax
lblTierReaderSkipLevelUpgrader:
pop ebx
mov eax,[esi+44]
test eax,eax
jmp lblTierReaderRet

aobTierReader:
aobTierReader_r:
jmp lblTierReader
lblTierReaderRet:

[DISABLE]
aobTierReader_r:
db 8B 46 44 85 C0

unregistersymbol(aobTierReader_r)

//unregistersymbol(bEnableTierMaxBooster)
//unregistersymbol(iTierMaxBoostValue)
unregistersymbol(bEnableTierUpgrader)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>224</ID>
          <Description>"bEnableTierUpgrader (ALT, drag over, wait for hint)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableTierUpgrader</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
