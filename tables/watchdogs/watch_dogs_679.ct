<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Activate"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="1" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Infinite Money"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(Money,Disrupt_b64.dll,41 29 B4 BC 9C 00 00 00) // should be unique
alloc(newmem,$1000,"Disrupt_b64.dll"+12669ED)

label(code)
label(return)

newmem:

code:
  //sub [r12+rdi*4+0000009C],esi
  mov [r12+rdi*4+0000009C],(int)9999999
  jmp return

Money:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Money)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Money:
  db 41 29 B4 BC 9C 00 00 00

unregistersymbol(Money)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_b64.dll"+12669ED

"Disrupt_b64.dll"+12669C1: 48 8B 44 24 30           -  mov rax,[rsp+30]
"Disrupt_b64.dll"+12669C6: 48 8B 9C 24 A0 00 00 00  -  mov rbx,[rsp+000000A0]
"Disrupt_b64.dll"+12669CE: 48 85 C0                 -  test rax,rax
"Disrupt_b64.dll"+12669D1: 74 12                    -  je Disrupt_b64.dll+12669E5
"Disrupt_b64.dll"+12669D3: F0 0F C1 28              -  xadd [rax],ebp
"Disrupt_b64.dll"+12669D7: FF CD                    -  dec ebp
"Disrupt_b64.dll"+12669D9: 75 0A                    -  jne Disrupt_b64.dll+12669E5
"Disrupt_b64.dll"+12669DB: 48 8B 4C 24 30           -  mov rcx,[rsp+30]
"Disrupt_b64.dll"+12669E0: E8 4B AD ED FE           -  call Disrupt_b64.dll+141730
"Disrupt_b64.dll"+12669E5: 48 8B AC 24 B0 00 00 00  -  mov rbp,[rsp+000000B0]
// ---------- INJECTING HERE ----------
"Disrupt_b64.dll"+12669ED: 41 29 B4 BC 9C 00 00 00  -  sub [r12+rdi*4+0000009C],esi
// ---------- DONE INJECTING  ----------
"Disrupt_b64.dll"+12669F5: 48 8D 15 2C 8A A9 01     -  lea rdx,[Disrupt_b64.dll+2CFF428]
"Disrupt_b64.dll"+12669FC: 48 8D 4C 24 50           -  lea rcx,[rsp+50]
"Disrupt_b64.dll"+1266A01: E8 DA 15 EC FE           -  call Disrupt_b64.dll+127FE0
"Disrupt_b64.dll"+1266A06: F7 DE                    -  neg esi
"Disrupt_b64.dll"+1266A08: 8B D7                    -  mov edx,edi
"Disrupt_b64.dll"+1266A0A: 49 8B CC                 -  mov rcx,r12
"Disrupt_b64.dll"+1266A0D: 4C 8B C8                 -  mov r9,rax
"Disrupt_b64.dll"+1266A10: 44 8B C6                 -  mov r8d,esi
"Disrupt_b64.dll"+1266A13: C6 44 24 28 01           -  mov byte ptr [rsp+28],01
"Disrupt_b64.dll"+1266A18: C6 44 24 20 01           -  mov byte ptr [rsp+20],01
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Infinite Ammo"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(Ammo,Disrupt_b64.dll,89 42 0C B0 01 EB D6) // should be unique
alloc(newmem,$1000,"Disrupt_b64.dll"+17FBC12)

label(code)
label(return)

newmem:

code:
  //mov [rdx+0C],eax
  mov [rdx+0C],3E7
  mov al,01
  jmp return

Ammo:
  jmp code
return:
registersymbol(Ammo)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Ammo:
  db 89 42 0C B0 01

unregistersymbol(Ammo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_b64.dll"+17FBC12

"Disrupt_b64.dll"+17FBBF9: 48 8B 74 24 48           -  mov rsi,[rsp+48]
"Disrupt_b64.dll"+17FBBFE: 48 83 C4 20              -  add rsp,20
"Disrupt_b64.dll"+17FBC02: 5F                       -  pop rdi
"Disrupt_b64.dll"+17FBC03: C3                       -  ret 
"Disrupt_b64.dll"+17FBC04: 8B 42 0C                 -  mov eax,[rdx+0C]
"Disrupt_b64.dll"+17FBC07: 83 F8 FF                 -  cmp eax,-01
"Disrupt_b64.dll"+17FBC0A: 74 E1                    -  je Disrupt_b64.dll+17FBBED
"Disrupt_b64.dll"+17FBC0C: 3B C6                    -  cmp eax,esi
"Disrupt_b64.dll"+17FBC0E: 76 09                    -  jna Disrupt_b64.dll+17FBC19
"Disrupt_b64.dll"+17FBC10: 2B C6                    -  sub eax,esi
// ---------- INJECTING HERE ----------
"Disrupt_b64.dll"+17FBC12: 89 42 0C                 -  mov [rdx+0C],eax
"Disrupt_b64.dll"+17FBC15: B0 01                    -  mov al,01
// ---------- DONE INJECTING  ----------
"Disrupt_b64.dll"+17FBC17: EB D6                    -  jmp Disrupt_b64.dll+17FBBEF
"Disrupt_b64.dll"+17FBC19: 33 C0                    -  xor eax,eax
"Disrupt_b64.dll"+17FBC1B: 89 42 0C                 -  mov [rdx+0C],eax
"Disrupt_b64.dll"+17FBC1E: B0 01                    -  mov al,01
"Disrupt_b64.dll"+17FBC20: EB CD                    -  jmp Disrupt_b64.dll+17FBBEF
"Disrupt_b64.dll"+17FBC22: CC                       -  int 3 
"Disrupt_b64.dll"+17FBC23: CC                       -  int 3 
"Disrupt_b64.dll"+17FBC24: CC                       -  int 3 
"Disrupt_b64.dll"+17FBC25: CC                       -  int 3 
"Disrupt_b64.dll"+17FBC26: CC                       -  int 3 
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No Reload"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(Reload,Disrupt_b64.dll,FF 8F 98 00 00 00) // should be unique
alloc(newmem,$1000,"Disrupt_b64.dll"+183564A)

label(code)
label(return)

newmem:

code:
  //dec [rdi+00000098]
  mov [rdi+098],63
  jmp return

Reload:
  jmp code
  nop
return:
registersymbol(Reload)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Reload:
  db FF 8F 98 00 00 00

unregistersymbol(Reload)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_b64.dll"+183564A

"Disrupt_b64.dll"+183561A: F3 0F 11 44 24 20           -  movss [rsp+20],xmm0
"Disrupt_b64.dll"+1835620: 48 8B CF                    -  mov rcx,rdi
"Disrupt_b64.dll"+1835623: E8 08 81 FE FF              -  call Disrupt_b64.dll+181D730
"Disrupt_b64.dll"+1835628: 48 8D 4C 24 50              -  lea rcx,[rsp+50]
"Disrupt_b64.dll"+183562D: E8 FE 8A FE FF              -  call Disrupt_b64.dll+181E130
"Disrupt_b64.dll"+1835632: 80 BF 9C 00 00 00 00        -  cmp byte ptr [rdi+0000009C],00
"Disrupt_b64.dll"+1835639: 75 21                       -  jne Disrupt_b64.dll+183565C
"Disrupt_b64.dll"+183563B: 80 BF 9D 00 00 00 00        -  cmp byte ptr [rdi+0000009D],00
"Disrupt_b64.dll"+1835642: 74 18                       -  je Disrupt_b64.dll+183565C
"Disrupt_b64.dll"+1835644: 8B 87 90 00 00 00           -  mov eax,[rdi+00000090]
// ---------- INJECTING HERE ----------
"Disrupt_b64.dll"+183564A: FF 8F 98 00 00 00           -  dec [rdi+00000098]
// ---------- DONE INJECTING  ----------
"Disrupt_b64.dll"+1835650: 85 C0                       -  test eax,eax
"Disrupt_b64.dll"+1835652: 7E 08                       -  jle Disrupt_b64.dll+183565C
"Disrupt_b64.dll"+1835654: FF C8                       -  dec eax
"Disrupt_b64.dll"+1835656: 89 87 90 00 00 00           -  mov [rdi+00000090],eax
"Disrupt_b64.dll"+183565C: 48 8B 1E                    -  mov rbx,[rsi]
"Disrupt_b64.dll"+183565F: 4C 8B A4 24 08 01 00 00     -  mov r12,[rsp+00000108]
"Disrupt_b64.dll"+1835667: 48 8B BC 24 38 01 00 00     -  mov rdi,[rsp+00000138]
"Disrupt_b64.dll"+183566F: FF 4B 18                    -  dec [rbx+18]
"Disrupt_b64.dll"+1835672: 48 8B B4 24 30 01 00 00     -  mov rsi,[rsp+00000130]
"Disrupt_b64.dll"+183567A: 48 8B AC 24 28 01 00 00     -  mov rbp,[rsp+00000128]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Infinite Battery"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(Battery,Disrupt_b64.dll,F3 0F 11 89 EC 00 00 00 F3 C3) // should be unique
alloc(newmem,$1000,"Disrupt_b64.dll"+1AE155E)

label(code)
label(return)

newmem:

code:
  //movss [rcx+000000EC],xmm1
  mov [rcx+0EC],(float)331.8364258
  jmp return

Battery:
  jmp code
  nop
  nop
  nop
return:
registersymbol(Battery)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
Battery:
  db F3 0F 11 89 EC 00 00 00

unregistersymbol(Battery)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_b64.dll"+1AE155E

"Disrupt_b64.dll"+1AE1530: 8B 91 F4 00 00 00        -  mov edx,[rcx+000000F4]
"Disrupt_b64.dll"+1AE1536: 85 D2                    -  test edx,edx
"Disrupt_b64.dll"+1AE1538: 74 2C                    -  je Disrupt_b64.dll+1AE1566
"Disrupt_b64.dll"+1AE153A: 8B 81 F8 00 00 00        -  mov eax,[rcx+000000F8]
"Disrupt_b64.dll"+1AE1540: 66 0F EF C9              -  pxor xmm1,xmm1
"Disrupt_b64.dll"+1AE1544: 66 0F EF C0              -  pxor xmm0,xmm0
"Disrupt_b64.dll"+1AE1548: F3 48 0F 2A C8           -  cvtsi2ss xmm1,rax
"Disrupt_b64.dll"+1AE154D: F3 48 0F 2A C2           -  cvtsi2ss xmm0,rdx
"Disrupt_b64.dll"+1AE1552: F3 0F 5E C8              -  divss xmm1,xmm0
"Disrupt_b64.dll"+1AE1556: F3 0F 59 89 E8 00 00 00  -  mulss xmm1,[rcx+000000E8]
// ---------- INJECTING HERE ----------
"Disrupt_b64.dll"+1AE155E: F3 0F 11 89 EC 00 00 00  -  movss [rcx+000000EC],xmm1
// ---------- DONE INJECTING  ----------
"Disrupt_b64.dll"+1AE1566: F3 C3                    - repe  ret 
"Disrupt_b64.dll"+1AE1568: CC                       -  int 3 
"Disrupt_b64.dll"+1AE1569: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156A: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156B: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156C: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156D: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156E: CC                       -  int 3 
"Disrupt_b64.dll"+1AE156F: CC                       -  int 3 
"Disrupt_b64.dll"+1AE1570: 40 53                    -  push rbx
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"Infinite SP (Skill Points)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscanmodule(SP,Disrupt_b64.dll,41 29 B4 BC 9C 00 00 00) // should be unique
alloc(newmem,$1000,"Disrupt_b64.dll"+12669ED)

label(code)
label(return)

newmem:

code:
  //sub [r12+rdi*4+0000009C],esi
  mov [r12+rdi*4+0000009C],63
  jmp return

SP:
  jmp code
  nop
  nop
  nop
return:
registersymbol(SP)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
SP:
  db 41 29 B4 BC 9C 00 00 00

unregistersymbol(SP)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Disrupt_b64.dll"+12669ED

"Disrupt_b64.dll"+12669C1: 48 8B 44 24 30           -  mov rax,[rsp+30]
"Disrupt_b64.dll"+12669C6: 48 8B 9C 24 A0 00 00 00  -  mov rbx,[rsp+000000A0]
"Disrupt_b64.dll"+12669CE: 48 85 C0                 -  test rax,rax
"Disrupt_b64.dll"+12669D1: 74 12                    -  je Disrupt_b64.dll+12669E5
"Disrupt_b64.dll"+12669D3: F0 0F C1 28              -  xadd [rax],ebp
"Disrupt_b64.dll"+12669D7: FF CD                    -  dec ebp
"Disrupt_b64.dll"+12669D9: 75 0A                    -  jne Disrupt_b64.dll+12669E5
"Disrupt_b64.dll"+12669DB: 48 8B 4C 24 30           -  mov rcx,[rsp+30]
"Disrupt_b64.dll"+12669E0: E8 4B AD ED FE           -  call Disrupt_b64.dll+141730
"Disrupt_b64.dll"+12669E5: 48 8B AC 24 B0 00 00 00  -  mov rbp,[rsp+000000B0]
// ---------- INJECTING HERE ----------
"Disrupt_b64.dll"+12669ED: 41 29 B4 BC 9C 00 00 00  -  sub [r12+rdi*4+0000009C],esi
// ---------- DONE INJECTING  ----------
"Disrupt_b64.dll"+12669F5: 48 8D 15 2C 8A A9 01     -  lea rdx,[Disrupt_b64.dll+2CFF428]
"Disrupt_b64.dll"+12669FC: 48 8D 4C 24 50           -  lea rcx,[rsp+50]
"Disrupt_b64.dll"+1266A01: E8 DA 15 EC FE           -  call Disrupt_b64.dll+127FE0
"Disrupt_b64.dll"+1266A06: F7 DE                    -  neg esi
"Disrupt_b64.dll"+1266A08: 8B D7                    -  mov edx,edi
"Disrupt_b64.dll"+1266A0A: 49 8B CC                 -  mov rcx,r12
"Disrupt_b64.dll"+1266A0D: 4C 8B C8                 -  mov r9,rax
"Disrupt_b64.dll"+1266A10: 44 8B C6                 -  mov r8d,esi
"Disrupt_b64.dll"+1266A13: C6 44 24 28 01           -  mov byte ptr [rsp+28],01
"Disrupt_b64.dll"+1266A18: C6 44 24 20 01           -  mov byte ptr [rsp+20],01
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Battery</Name>
      <Address> 7FFFF9BD155E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>SP</Name>
      <Address> 7FFFF93569ED</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
