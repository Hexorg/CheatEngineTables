<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Credits"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(CurrentCredits)
label(Credits)
registersymbol(CurrentCredits)
registersymbol(Credits)
aobscan(Creditsaob,d9 80 84 00 00 00 dd 9d 90 fb ff ff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[CurrentCredits]
mov [eax+00000084],ecx
pop ecx

originalcode:
fld dword ptr [eax+00000084]

exit:
jmp returnhere

CurrentCredits:
dd 0

Creditsaob:
Credits:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Credits:
fld dword ptr [eax+00000084]
//Alt: db D9 80 84 00 00 00
unregistersymbol(Credits)
unregistersymbol(CurrentCredits)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"CurrentCredits"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>CurrentCredits</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Research"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(CurrentResearch)
label(Research)
registersymbol(CurrentResearch)
registersymbol(Research)
aobscan(Researchaob,d9 40 08 dd 9d 90 fb ff ff f2 0f 10 85 90 fb ff ff f2 0f 2c c0 89 85 70 ff ff ff)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[CurrentResearch]
mov [eax+08],ecx
pop ecx

originalcode:
fld dword ptr [eax+08]
fstp qword ptr [ebp-00000470]

exit:
jmp returnhere

CurrentResearch:
dd 0

Researchaob:
Research:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Research:
fld dword ptr [eax+08]
fstp qword ptr [ebp-00000470]
//Alt: db D9 40 08 DD 9D 90 FB FF FF
unregistersymbol(Research)
unregistersymbol(CurrentResearch)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"CurrentResearch"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>CurrentResearch</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Ship Production"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(ShipCurrentProduction)
label(ShipProduction)
registersymbol(ShipCurrentProduction)
registersymbol(ShipProduction)
aobscan(ShipProductionaob,d9 40 1c d9 5e 08 8b 85 dc ea ff ff 8b 80 d4 01 00 00 8b 50 50 8b ce 39 09 e8 ** ** ** ** 8b 53 04 b9 10 1b ** ** e8 ** ** ** ** 80 78 2a 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[ShipCurrentProduction]
mov [eax+1C],ecx
pop ecx

originalcode:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]

exit:
jmp returnhere

ShipCurrentProduction:
dd 0

ShipProductionaob:
ShipProduction:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
ShipProduction:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]
//Alt: db D9 40 1C D9 5E 08
unregistersymbol(ShipProduction)
unregistersymbol(ShipCurrentProduction)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"ShipCurrentProduction"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>ShipCurrentProduction</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Buildings Production"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(BuildingCurrentProduction)
label(BuildingProduction)
registersymbol(BuildingCurrentProduction)
registersymbol(BuildingProduction)
aobscan(BuildingProductionaob,d9 40 1c d9 5e 08 8b 85 dc ea ff ff 8b 80 d4 01 00 00 8b 50 50 8b ce 39 09 e8 ** ** ** ** 8b 53 04 b9 10 1b ** ** e8 ** ** ** ** 80 78 29 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[BuildingCurrentProduction]
mov [eax+1C],ecx
pop ecx

originalcode:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]

exit:
jmp returnhere

BuildingCurrentProduction:
dd 0

BuildingProductionaob:
BuildingProduction:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
BuildingProduction:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]
//Alt: db D9 40 1C D9 5E 08
unregistersymbol(BuildingProduction)
unregistersymbol(BuildingCurrentProduction)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"BuildingCurrentProduction"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>BuildingCurrentProduction</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Troop Production"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(TroopCurrentProduction)
label(TroopProduction)
registersymbol(TroopCurrentProduction)
registersymbol(TroopProduction)
aobscan(TroopProductionaob,d9 40 1c d9 5e 08 8b 85 dc ea ff ff 8b 80 d4 01 00 00 8b 50 50 8b ce 39 09 e8 ** ** ** ** 83 7b 24 01)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push ecx
mov ecx,[TroopCurrentProduction]
mov [eax+1C],ecx
pop ecx

originalcode:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]

exit:
jmp returnhere

TroopCurrentProduction:
dd 0

TroopProductionaob:
TroopProduction:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
TroopProduction:
fld dword ptr [eax+1C]
fstp dword ptr [esi+08]
//Alt: db D9 40 1C D9 5E 08
unregistersymbol(TroopProduction)
unregistersymbol(TroopCurrentProduction)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Troops Production"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>TroopCurrentProduction</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>CurrentProduction</Name>
      <Address>064C0016</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Shield</Name>
      <Address>1F890D87</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
