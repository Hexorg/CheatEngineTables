<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"-- execute LUA script first and"</Description>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"-- use hotkey below:"</Description>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"ALT + F1"</Description>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"GodMode"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//GodMode script V5
[ENABLE]

 //Exception Handler
 globalalloc(EH,4096) // we need only one, this is why we use globalalloc
 label(nothandled)
 label(iEH)

 //cheat script
 globalalloc(godmodeScript,2048)
 //places
 label(returnhere)
 label(skip)
 label(originalcode)
 label(exit)
 label(code)
 label(Stamina_Check)
 label(Health_Check)
 label(StaminaSwitchTable)
 label(StaminaHit1)
 label(StaminaHit2)
 label(StaminaHit3)
 label(StaminaHit4)
 label(StaminaHit5)
 label(StaminaHitEnd)
 label(Reset)
 //variables
 label(Stamina)
 label(StaminaHitCount)
 label(HealthMultiplier)
 label(In_render_health)
 label(storeeax)

 aobscan(aobcode,8B 10 8B 4D 14 89 11 8b 50 04 5f)
 registersymbol(code)

 //try catch block + "EH initialized?"
 label(tryStart)
 label(tryEnd)
 label(catch)
 label(EHinitialized)


 godmodeScript:
 pushfd
 pushad

// initialize exception handler begin
 cmp dword ptr [iEH],0
 jne EHinitialized
 push EH
 push 0
 call RtlAddVectoredExceptionHandler
 mov [iEH],eax
 EHinitialized:
// initialize exception handler end


tryStart:

   mov edx,dword ptr [eax+10] //preapare for string comparaison

   //Are we already in _render_health ?
   cmp byte [In_render_health],1
   je Stamina_Check //check if string="stamina" or "health"

   //else is the string "_render_health" ?
   cmp dword ptr [edx+10],'_ren'
   jne skip //we're not in render_health, so if string!="_render_health"-&gt;GTFO
   cmp dword ptr [edx+14],'der_'
   jne skip
   cmp dword ptr [edx+18],'heal'
   jne skip
   cmp word ptr [edx+1C],'th'
   jne skip

   //Yes, we're in the _render_health function
   //Allow looking for stamina and health
   mov byte ptr [In_render_health],1
   mov dword ptr [StaminaHitCount],0
   jmp skip

   // is it "health" ?
   Health_Check:
   cmp dword ptr [edx+10],'heal'
   jne skip
   cmp word ptr [edx+14],'th'
   jne skip
   cmp byte ptr [edx+16],0
   jne skip
   //yes, check if we've hit "stamina" 6 times
   //between now and when we hit _render_health
   //(it could be less)
   cmp [StaminaHitCount],6
   jne Reset
   //hit 6 times,overwrite the health!
   //health=stamina*health_multiplier=max_health
   fld qword [HealthMultiplier]
   fmul qword [Stamina]
   fstp qword [eax]
   jmp Reset //job done

   //is the string "stamina" ?
   Stamina_Check:
   cmp dword ptr [edx+10],'stam'
   jne Health_Check
   cmp dword ptr [edx+14],'ina'
   jne skip

tryEnd:

 //switch(StaminaHitCount)
 mov edx,StaminaSwitchTable
 mov ecx,dword ptr[StaminaHitCount]
 jmp [edx+ecx*4]
 //case 0:skip

 //case 1:Stamina=new value
  StaminaHit1:
    fld qword [eax]
    fstp qword [Stamina]
    jmp StaminaHitEnd

 //case 2&amp;3:Stamina+=new value
  StaminaHit2:
  StaminaHit3:
    fld qword [eax]
    fadd qword [Stamina]
    fstp qword [Stamina]
    jmp StaminaHitEnd

 //case 4&amp;5:Stamina*=new value
 StaminaHit4:
 StaminaHit5:
    fld qword [eax]
    fmul qword [Stamina]
    fstp qword [Stamina]
    jmp StaminaHitEnd

 //case6: ERROR something unexpected happened, reset the mechanism
 Reset:
 mov [StaminaHitCount],0
 mov byte [In_render_health],0
 jmp skip

 StaminaHitEnd:
 inc ecx
 mov [StaminaHitCount],ecx

catch:

 skip:
 popad
 popfd

 originalcode:
 mov edx,[eax]
 nop
 mov ecx,[ebp+14]

 exit:
 jmp returnhere

 StaminaSwitchTable:
 dd StaminaHitEnd
 dd StaminaHit1
 dd StaminaHit2
 dd StaminaHit3
 dd StaminaHit4
 dd StaminaHit5
 dd Reset

 StaminaHitCount:
 dd 0

 Stamina:
 dq (double)20.0   //default value

 HealthMultiplier:
 dq (double)10.0   //game constant

 In_render_health:
 db 0

 storeeax:
 dd 00

 aobcode:
 code:
 jmp godmodeScript
 returnhere:

 //exception handler
 EH:
 nop
 nop
 mov eax,[esp+4]
 mov eax,[eax+4]
 lea eax,[eax+b8]

 cmp [eax],tryStart
 jb short nothandled
 cmp [eax],tryEnd
 jae short nothandled

 //handled
 mov [eax],catch
 mov eax,ffffffff
 ret 4

 nothandled:
 mov eax,0
 ret 4

 iEH:

 // exception handler end

[DISABLE]
code:
db 8B 10 8B 4D 14

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <LuaScript>strings_add(getAutoAttachList(), "krater.exe")

addresslist = getAddressList()
mrGodMode = addresslist_getMemoryRecordByDescription(addresslist,'GodMode')

mrLUAscriptlaunched =
addresslist_getMemoryRecordByDescription(addresslist,'-- execute LUA script first and')

memoryrecord_setDescription(mrLUAscriptlaunched, '-- LUA script is launched :-) ')

--timer function
function scripttoggle()

  timer_setEnabled(scriptTimer,false)

  local prevState = memoryrecord_isActive(mrGodMode)

  if (nextState == 'enable') then
    -- enable section
    memoryrecord_freeze(mrGodMode)
  else
    -- disable section
    memoryrecord_unfreeze(mrGodMode)
  end

  if (prevState ~= memoryrecord_isActive(mrGodMode)) then beep() end

  unpause() -- run game process
  nextState = ( nextState == 'enable' ) and 'disable' or 'enable'
end

--hotkey function
function changeState()
  if (timer_getEnabled(scriptTimer) == false) then

    pause() -- pause game process
    timer_setEnabled(scriptTimer,true) -- do script

  end
end

-- timer for 'delay between reactivating hotkey'
scriptTimer = createTimer(nil,false)
timer_setInterval(scriptTimer,500) -- 0.5 seconds
timer_setEnabled(scriptTimer,false)
timer_onTimer(scriptTimer, scripttoggle)

nextState = 'enable'
createHotkey(changeState,VK_F1,VK_MENU)
</LuaScript>
</CheatTable>
