<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>20</ID>
      <Description>"The Legend script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// King's Bounty. The Legend
// Game Version  : 1.6b7
// Script Version: 1.0
// CE Version    : 5.4
// Action points, God Mode, Runes, Leadership and gold
// 18-Oct-2008

[ENABLE]
alloc(MyCode,1024)

// Declaration session
label(_MonResources)
label(_BackMR)
label(_MonR0)
label(_MonR1)
label(_ExitMR)
label(iEnableMR)
label(aMoney)
label(aRune)
label(aLeader)
label(iEAX)
label(iMinimumLS)

registersymbol(MyCode)
registersymbol(iEnableMR)
registersymbol(iMinimumLS)

//=========================================
// Hacking Points
kb.exe+465a4:
 jmp _MonResources
 nop
 nop
_BackMR:

MyCode:
//=========================================
// It monitors Money and Runes
_MonResources:
 mov [iEAX],eax

 cmp dword ptr [iEnableMR],0 // Is it disabled?
 je _ExitMR                  // Jump if true

 mov ebp,[ecx+eax*4]         // Original code
 mov [esp+18],ebp            // Original code

 mov eax,[edi+04]
 mov eax,[eax+14]
 cmp eax,[aMoney]
 jne _MonR0

 mov eax,#5000000
 cmp eax,[ebp+08]
 jle _ExitMR

 mov [ebp+08],eax
 jmp _ExitMR

_MonR0:
 cmp eax,[aRune]
 jne _MonR1

 mov eax,#28
 cmp eax,[ebp+08]
 jle _ExitMR

 mov [ebp+08],eax
 jmp _ExitMR

_MonR1:
 cmp eax,[aLeader]
 jne _ExitMR

 mov eax,[iMinimumLS]
 cmp eax,[ebp+08]
 jle _ExitMR

 mov [ebp+08],eax

_ExitMR:
 mov eax,[iEAX]
 jmp _BackMR

//=========================================
// Variables
iEnableMR:
 dd 1
iMinimumLS:
 dd #150000
aMoney:
 db 'mone'
aRune:
 db 'rune'
aLeader:
 db 'lead'
iEAX:
 dd 0

//=========================================
// Original Codes
[DISABLE]
kb.exe+5e754: //updated for 1.7
 sub [ecx+14],eax
 cmp dword ptr [ecx+14],00

kb.exe+58627:
 mov [ecx+10],edx
 mov eax,[ebx+18]

kb.exe+5861c:
 mov [ecx+0c],edx
 mov eax,[ebx]

kb.exe+465a4:  ////updated for 1.7
 mov ebp,[ecx+eax*4]
 mov [esp+18],ebp

dealloc(MyCode)
unregistersymbol(MyCode)
unregistersymbol(iEnableAP)
unregistersymbol(iEnableTS)
unregistersymbol(iEnableTH)
unregistersymbol(iEnableMR)
unregistersymbol(iMinimumLS)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Kings Bounty Armored Princess Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//=========================================
// Kings Bounty Armored Princess
// Game Version  : 12 (build 5730)
// Script Version: 1.1
// CE Version    : 5.5
// Action points, God Mode, Runes, Leadership, Gold and XP
// 30-Nov-2009
// 08-Dec-2009: change on the XP routine
//=========================================

[ENABLE]
alloc(MyCode,1024)

//=========================================
// Declaration section
label(_ActionPoints)
label(_TroopSize)
label(_TroopHP)
label(_MonResources)
label(_BackAP)
label(_BackTS)
label(_BackTH)
label(_BackMR)
label(_MonR0)
label(_MonR1)
label(_MonR2)
label(_MonR3)
label(_MonR4)
label(_MonR5)
label(_MonR6)
label(_ExitAP)
label(_ExitTS)
label(_ExitTH)
label(_ExitMR)
label(iEnableAP)
label(iEnableGM)
label(iEnableMR)
label(iEnableMM)
label(iEnableML)
label(iEnableMX)
label(iEAX)
label(iXP)
label(iMinimumLS)
label(iMinMoney)
label(iMinRunes)
label(iMinAttack)
label(iMinDefense)
label(iMinInt)
label(iMinCrystals)

registersymbol(MyCode)
registersymbol(iEnableAP)
registersymbol(iEnableGM)
registersymbol(iEnableMR)
registersymbol(iEnableMM)
registersymbol(iEnableML)
registersymbol(iEnableMX)
registersymbol(iMinimumLS)
registersymbol(iMinMoney)
registersymbol(iMinRunes)
registersymbol(iMinAttack)
registersymbol(iMinDefense)
registersymbol(iMinInt)
registersymbol(iMinCrystals)
registersymbol(iXP)

//=========================================
// Hacking Points
kb.exe+00066f0f:
 jmp _ActionPoints 
 nop
 nop
_BackAP:

kb.exe+00062a8c:   
 jmp _TroopSize
 nop
_BackTS:

kb.exe+00062a81:   
 jmp _TroopHP
_BackTH:

kb.exe+0004cbd3:
 jmp _MonResources 
 nop
 nop
_BackMR:

MyCode:
//=========================================
// It does not let AP decrease during movement
_ActionPoints:
 cmp dword ptr [iEnableAP],0 // Is it disabled?
 je _ExitAP                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitAP                // Jump if false

 mov eax,[ecx+24]           // EAX = Original HP
 add eax,#1000
 mov [ecx+0c],eax           // HP = Original HP + 1000

 xor eax,eax                // Make AP to decrease = 0

_ExitAP:
 sub [ecx+14],eax           // Original code
 cmp dword ptr [ecx+14],00  // Original code
 jmp _BackAP                // Back to main code

//=========================================
// It does not let the troop size decrease during combat
_TroopSize:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTS                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitTS                // Jump if false

 mov edx,[ecx+00000114]     // Troop Size = Original Size 

_ExitTS:
 mov [ecx+10],edx           // Original code
 mov ecx,[esi+20]           // Original code
 jmp _BackTS                // Back to main code

//=========================================
// It does not let the troop HP decrease during combat
_TroopHP:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTH                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitTH                // Jump if false

 mov edx,[ecx+24]           // EDX = Original HP
 add edx,#5000              // New HP = Original HP + 5000

_ExitTH:
 mov [ecx+0c],edx           // Original code
 mov eax,[esi]              // Original code
 jmp _BackTH                // Back to main code

//=========================================
// It monitors Money, Runes and Leadership
_MonResources:
 mov [iEAX],eax

 cmp dword ptr [iEnableMR],0 
 je _ExitMR                  // Jump if feature is disabled

 mov esi,[ecx+eax*4]         // Original code
 mov [esp+10],esi            // Original code
 
 mov eax,[edi+04]            // Get ptr to item name
 mov eax,[eax+0c]            // Get name

 cmp dword ptr [iEnableMM],0 
 je _MonR0                   // Jump if feature is disabled

 cmp eax,'mone'              // Money?
 jne _MonR0                  // Jump if false

 mov eax,[iMinMoney]         // Get minimum value
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR0:
 cmp dword ptr [iEnableMR],0 
 je _MonR1                   // Jump if feature is disabled

 cmp eax,'rune'
 jne _MonR1

 mov eax,[iMinRunes]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR1:
 cmp dword ptr [iEnableML],0 
 je _MonR2                   // Jump if feature is disabled

 cmp eax,'lead'
 jne _MonR2

 mov eax,[iMinimumLS]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR
 
_MonR2:
 cmp dword ptr [iEnableMX],0 
 je _MonR4                  // Jump if feature is disabled

 cmp eax,'expe'
 jne _MonR4

 mov eax,[esi+04]
 mov eax,[eax+0c]
 cmp eax,'coun'
 jne _MonR3
 
 mov eax,[iXP]               // Get maximum XP
 or eax,eax
 jz _ExitMR
 
 dec eax                     // Decrease it by 1
 mov [esi+08],eax            // Save it as current XP
 jmp _ExitMR

_MonR3:                      // 08-Dec-2009
 cmp eax,'limi'
 jne _MonR4

 mov eax,[esi+08]
 mov [iXP],eax

_MonR4:
 cmp eax,'atta'
 jne _MonR5

 mov eax,[esi+08]
 cmp eax,[iMinAttack]
 jg _ExitMR
 mov eax,[iMinAttack]
 mov [esi+08],eax

_MonR5:
 cmp eax,'inte'
 jne _MonR6

 mov eax,[esi+08]
 cmp eax,[iMinInt]
 jg _ExitMR
 mov eax,[iMinInt]
 mov [esi+08],eax

_MonR6:
 cmp eax,'defe'
 jne _ExitMR

 mov eax,[esi+08]
 cmp eax,[iMinDefense]
 jg _ExitMR
 mov eax,[iMinDefense]
 mov [esi+08],eax

_ExitMR:
 mov eax,[iEAX]
 jmp _BackMR                 // Back to main code

//=========================================
// Variables
iEnableAP:
 dd 1 
iEnableGM:
 dd 1 
iEnableMR:
 dd 1
iEnableMM:
 dd 1
iEnableML:
 dd 0
iEnableMX:
 dd 0
iMinimumLS:
 dd #50000
iMinMoney:
 dd #5000000
iXP:
 dd 0
iEAX:
 dd 0
iMinRunes:
 dd #19
iMinAttack:
 dd #20
iMinDefense:
 dd #20
iMinInt:
 dd #20
iMinCrystals:
 dd #200

//=========================================
// Original Codes
[DISABLE]
kb.exe+00066f0f:
 sub [ecx+14],eax
 cmp dword ptr [ecx+14],00

kb.exe+00062a8c:
 mov [ecx+10],edx
 mov ecx,[esi+20]

kb.exe+00062a81:
 mov [ecx+0c],edx
 mov eax,[esi]

kb.exe+0004cbd3:
 mov esi,[ecx+eax*4]
 mov [esp+10],esi

dealloc(MyCode)
unregistersymbol(MyCode)
unregistersymbol(iEnableAP)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableML)
unregistersymbol(iEnableMX)
unregistersymbol(iMinimumLS)
unregistersymbol(iMinMoney)
unregistersymbol(iXP)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Crossworlds Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Kings Bounty Crossworlds (EXP)
 Game Version  : 13 (build 6150)
 Script Version: 1.2
 CE Version    : 5.6
 Action points, God Mode, Runes, Leadership, Gold, Max Troop and XP
 30-Nov-2009
 08-Dec-2009: change on the XP routine
 20-Sep-2010: Adapted from Version 1.2 Armored Princess
 22-Sep-2010: Added Max Troop and correction of a bug in _MonResources
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to running game version
// If false the script will not be loaded

assert(kb.exe+06a4a3,29 41 14 83 79 14 00)
assert(kb.exe+06604b,89 51 10 8b 4e 20)
assert(kb.exe+04f963,8b 34 81 89 74 24 10)

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_ActionPoints)
label(_BackAP)
label(_ExitAP)
label(_ActionP0)
label(_ActionP1)
label(_TroopSize)
label(_BackTS)
label(_ExitTS)
label(_TroopHP)
label(_BackTH)
label(_ExitTH)
label(_MonResources)
label(_BackMR)
label(_ExitMR)
label(_MonR0)
label(_MonR1)
label(_MonR2)
label(_MonR3)
label(iEnableAP)
label(iEnableGM)
label(iEnableMR)
label(iEnableMM)
label(iEnableML)
label(iEnableMX)
label(iEnableMxT)
label(iEAX)
label(iXP)
label(iMinimumLS)
label(iMinMoney)
label(iCurLS)
label(iMinRunes)
label(iMinAttack)
label(iMinDefense)
label(iMinInt)
label(iMinCrystals)

registersymbol(MyCode)
registersymbol(iEnableAP)
registersymbol(iEnableGM)
registersymbol(iEnableMR)
registersymbol(iEnableMM)
registersymbol(iEnableML)
registersymbol(iEnableMX)
registersymbol(iEnableMxT)
registersymbol(iMinimumLS)
registersymbol(iMinMoney)
registersymbol(iMinRunes)
registersymbol(iMinAttack)
registersymbol(iMinDefense)
registersymbol(iMinInt)
registersymbol(iMinCrystals)
registersymbol(iXP)
registersymbol(iCurLS)

//=========================================
MyCode:
//========================================= 22-sep-2010
// It does not let AP decrease during movement
_ActionPoints:
 push edx

 cmp dword ptr [ecx+000001dc],1 // PlayerÂ´s troop?
 jne _ExitAP                 // Jump if false

 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ActionP0                // Jump if true

 push eax
 mov eax,[ecx+24]            // EAX = Original HP
 add eax,#1000
 mov [ecx+0c],eax            // HP = Original HP + 1000
 pop eax

_ActionP0:
 cmp dword ptr [iEnableMxT],0// Is it disabled?
 je _ActionP1                // Jump if true

 push eax
 xor edx,edx
 mov eax,[iCurLS]           // Get current HeroÂ´s Leadership
 div dword ptr [ecx+118]    // Devide it by unitÂ´s LS cost
 mov edx,eax
 pop eax

 or edx,edx
 jz _ActionP1

 mov [ecx+10],edx           // Cur Size
 mov [ecx+00000114],edx     // Max Size

_ActionP1:
 cmp dword ptr [iEnableAP],0// Is it disabled?
 je _ExitAP                 // Jump if true

 xor eax,eax                // Make AP to decrease = 0

_ExitAP:
 pop edx

 sub [ecx+14],eax           // Original code
 cmp dword ptr [ecx+14],00  // Original code
 jmp _BackAP                // Back to main code

//========================================= ok
// It does not let the troop size decrease during combat
_TroopSize:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTS                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // PlayerÂ´s troop?
 jne _ExitTS                // Jump if false

 mov edx,[ecx+00000114]     // Troop Size = Original Size

_ExitTS:
 mov [ecx+10],edx           // Original code
 mov ecx,[esi+20]           // Original code
 jmp _BackTS                // Back to main code

//========================================= ok
// It does not let the troop HP decrease during combat
_TroopHP:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTH                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // PlayerÂ´s troop?
 jne _ExitTH                // Jump if false

 mov edx,[ecx+24]           // EDX = Original HP
 add edx,#5000              // New HP = Original HP + 5000

_ExitTH:
 mov [ecx+0c],edx           // Original code
 mov eax,[esi]              // Original code
 jmp _BackTH                // Back to main code

//========================================= 22-sep-2010
// It monitors Money, Runes and Leadership
_MonResources:
 mov [iEAX],eax

 mov esi,[ecx+eax*4]         // Original code
 mov [esp+10],esi            // Original code

 mov eax,[edi+04]            // Get ptr to item name
 mov eax,[eax+0c]            // Get name

 cmp dword ptr [iEnableMM],0
 je _MonR0                   // Jump if feature is disabled

 cmp eax,'mone'              // Money?
 jne _MonR0                  // Jump if false

 mov eax,[iMinMoney]         // Get minimum value
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR0:
 cmp dword ptr [iEnableMR],0
 je _MonR1                   // Jump if feature is disabled

 cmp eax,'rune'
 jne _MonR1

 mov eax,[iMinRunes]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR1:
 cmp eax,'lead'
 jne _MonR2

 mov eax,[esi+08]
 mov [iCurLS],eax            // Save Current Leardership value for further use

 cmp dword ptr [iEnableML],0
 je _ExitMR                  // Jump if feature is disabled

 mov eax,[iMinimumLS]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR2:
 cmp dword ptr [iEnableMX],0
 je _ExitMR                  // Jump if feature is disabled

 cmp eax,'expe'
 jne _ExitMR

 mov eax,[esi+04]
 mov eax,[eax+0c]
 cmp eax,'coun'
 jne _MonR3

 mov eax,[iXP]               // Get maximum XP
 or eax,eax
 jz _ExitMR

 dec eax                     // Decrease it by 1
 mov [esi+08],eax            // Save it as current XP
 jmp _ExitMR

_MonR3:                      // 08-Dec-2009
 cmp eax,'limi'
 jne _ExitMR

 mov eax,[esi+08]
 mov [iXP],eax

_ExitMR:
 mov eax,[iEAX]
 jmp _BackMR                 // Back to main code

//=========================================
// Variables
iEnableAP:
 dd 1
iEnableGM:
 dd 1
iEnableMR:
 dd 1
iEnableMM:
 dd 1
iEnableML:
 dd 0
iEnableMX:
 dd 0
iEnableMxT:
 dd 1
iMinimumLS:
 dd #50000
iMinMoney:
 dd #5000000
iXP:
 dd 0
iEAX:
 dd 0
iCurLS:
 dd 0
iMinRunes:
 dd #19
iMinAttack:
 dd #20
iMinDefense:
 dd #20
iMinInt:
 dd #20
iMinCrystals:
 dd #200

//=========================================
// Hacking Points
//kb.exe+00066f0f:
kb.exe+06a4a3:
 jmp _ActionPoints
 nop
 nop
_BackAP:

//kb.exe+00062a8c:
kb.exe+06604b:
 jmp _TroopSize
 nop
_BackTS:

//kb.exe+00062a81:
kb.exe+066040:
 jmp _TroopHP
_BackTH:

//kb.exe+0004cbd3:
kb.exe+04f963:
 jmp _MonResources
 nop
 nop
_BackMR:

//=========================================
// Original Codes
[DISABLE]
//kb.exe+00066f0f:
kb.exe+06a4a3:
 sub [ecx+14],eax
 cmp dword ptr [ecx+14],00

//kb.exe+00062a8c:
kb.exe+06604b:
 mov [ecx+10],edx
 mov ecx,[esi+20]

//kb.exe+00062a81:
kb.exe+066040:
 mov [ecx+0c],edx
 mov eax,[esi]

//kb.exe+0004cbd3:
kb.exe+04f963:
 mov esi,[ecx+eax*4]
 mov [esp+10],esi

unregistersymbol(MyCode)
unregistersymbol(iEnableAP)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableML)
unregistersymbol(iEnableMX)
unregistersymbol(iEnableMxT)
unregistersymbol(iMinimumLS)
unregistersymbol(iMinMoney)
unregistersymbol(iXP)
unregistersymbol(iCurLS)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Kings Bounty Crossworlds V13.1 Script V1.2 AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Kings Bounty Crossworlds (EXP)
 Game Version  : 13.1 (build 6171)
 Script Version: 1.2
 CE Version    : 5.6
 Action points, God Mode, Runes, Leadership, Gold, Max Troop and XP
 30-Nov-2009
 08-Dec-2009: change on the XP routine
 20-Sep-2010: Adapted from Version 1.2 Armored Princess
 22-Sep-2010: Added Max Troop and correction of a bug in _MonResources
 27-Dec-2010: Adapted to V13.1 (offsets and code)
 28-Dec-2010: AOB version of the script
===========================================
}

[ENABLE]
//=========================================
alloc(MyCode,1024)
//=========================================
aobscan(aobActionPoints,8b 49 70 29 41 14 83 79 14 00) //+03
aobscan(aobTroopHP,89 51 0c 8b 06 8b 48 70 8b 56 14)
aobscan(aobTroopSize,89 51 10 8b 4e 20 f6 c1 08)
aobscan(aobMonResources,55 8b cf ?? ?? ?? ?? ?? 85 c0 ?? ?? 8b 4f 0c 8b 34 81)//+0c

//=========================================
// Declaration section
label(pActionPoints)
label(pTroopSize)
label(pTroopHP)
label(pMonResources)
label(_ActionPoints)
label(_BackAP)
label(_ExitAP)
label(_ActionP0)
label(_ActionP1)
label(_TroopSize)
label(_BackTS)
label(_ExitTS)
label(_TroopHP)
label(_BackTH)
label(_ExitTH)
label(_MonResources)
label(_BackMR)
label(_ExitMR)
label(_MonR0)
label(_MonR1)
label(_MonR2)
label(_MonR3)
label(_MonR4)
label(_MonR5)
label(_MonR6)
label(_MonR7)
label(_MonR8)
label(_MonR9)
label(iEnableAP)
label(iEnableGM)
label(iEnableMR)
label(iEnableMM)
label(iEnableML)
label(iEnableMX)
label(iEnableMxT)
label(iEAX)
label(iXP)
label(iMinimumLS)
label(iMinMoney)
label(iCurLS)
label(iMinRunes)
label(iMinAttack)
label(iMinDefense)
label(iMinInt)
label(iMinCrystals)
label(iMinMana)
label(iMinRage)

registersymbol(MyCode)
registersymbol(iEnableAP)
registersymbol(iEnableGM)
registersymbol(iEnableMR)
registersymbol(iEnableMM)
registersymbol(iEnableML)
registersymbol(iEnableMX)
registersymbol(iEnableMxT)
registersymbol(iMinimumLS)
registersymbol(iMinMoney)
registersymbol(iXP)
registersymbol(iCurLS)
registersymbol(pActionPoints)
registersymbol(pTroopSize)
registersymbol(pTroopHP)
registersymbol(pMonResources)
registersymbol(iMinRunes)
registersymbol(iMinAttack)
registersymbol(iMinDefense)
registersymbol(iMinInt)
registersymbol(iMinCrystals)
registersymbol(iMinMana)
registersymbol(iMinRage)

//=========================================
MyCode:
//========================================= 22-sep-2010
// It does not let AP decrease during movement
_ActionPoints:
 push edx
 
 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitAP                 // Jump if false

 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ActionP0                // Jump if true

 push eax
 mov eax,[ecx+24]            // EAX = Original HP
 add eax,#1000
 mov [ecx+0c],eax            // HP = Original HP + 1000
 pop eax

_ActionP0: 
 cmp dword ptr [iEnableMxT],0// Is it disabled?
 je _ActionP1                // Jump if true

 push eax
 xor edx,edx
 mov eax,[iCurLS]           // Get current Hero´s Leadership
 div dword ptr [ecx+118]    // Devide it by unit´s LS cost
 mov edx,eax
 pop eax
 
 or edx,edx
 jz _ActionP1

 mov [ecx+10],edx           // Cur Size
 mov [ecx+00000114],edx     // Max Size

_ActionP1:
 cmp dword ptr [iEnableAP],0// Is it disabled?
 je _ExitAP                 // Jump if true

 xor eax,eax                // Make AP to decrease = 0

_ExitAP:
 pop edx
 
 sub [ecx+14],eax           // Original code
 cmp dword ptr [ecx+14],00  // Original code
 jmp _BackAP                // Back to main code

//========================================= ok
// It does not let the troop size decrease during combat
_TroopSize:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTS                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitTS                // Jump if false

 mov edx,[ecx+00000114]     // Troop Size = Original Size 
 
_ExitTS:
 mov [ecx+10],edx           // Original code
 mov ecx,[esi+20]           // Original code
 jmp _BackTS                // Back to main code

//========================================= ok
// It does not let the troop HP decrease during combat
_TroopHP:
 cmp dword ptr [iEnableGM],0 // Is it disabled?
 je _ExitTH                  // Jump if true

 cmp dword ptr [ecx+000001dc],1 // Player´s troop?
 jne _ExitTH                // Jump if false

 mov edx,[ecx+24]           // EDX = Original HP
 add edx,#5000              // New HP = Original HP + 5000

_ExitTH:
 mov [ecx+0c],edx           // Original code
 mov eax,[esi]              // Original code
 jmp _BackTH                // Back to main code

//========================================= 22-sep-2010
// It monitors Money, Runes and Leadership
_MonResources:
 mov [iEAX],eax

 mov ecx,[edi+0c]            // Original code (get ptr to item)
 mov esi,[ecx+eax*4]         // Original code (get ptr to value structure)

 mov eax,[edi+04]            // Get ptr to item name
 mov eax,[eax+0c]            // Get name

 cmp dword ptr [iEnableMM],0 
 je _MonR0                   // Jump if feature is disabled

 cmp eax,'mone'              // Money?
 jne _MonR0                  // Jump if false

 mov eax,[iMinMoney]         // Get minimum value
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR0:
 cmp dword ptr [iEnableMR],0 
 je _MonR1                   // Jump if feature is disabled

 cmp eax,'rune'
 jne _MonR1

 mov eax,[iMinRunes]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR

_MonR1:
 cmp eax,'lead'
 jne _MonR2

 mov eax,[esi+08]
 mov [iCurLS],eax            // Save Current Leardership value for further use

 cmp dword ptr [iEnableML],0 
 je _ExitMR                  // Jump if feature is disabled

 mov eax,[iMinimumLS]
 cmp eax,[esi+08]
 jle _ExitMR

 mov [esi+08],eax
 jmp _ExitMR
 
_MonR2:
 cmp dword ptr [iEnableMX],0 
 je _MonR4                  // Jump if feature is disabled

 cmp eax,'expe'
 jne _MonR4

 mov eax,[esi+04]
 mov eax,[eax+0c]
 cmp eax,'coun'
 jne _MonR3
 
 mov eax,[iXP]               // Get maximum XP
 or eax,eax
 jz _ExitMR
 
 dec eax                     // Decrease it by 1
 mov [esi+08],eax            // Save it as current XP
 jmp _ExitMR

_MonR3:                      // 08-Dec-2009
 cmp eax,'limi'
 jne _MonR4

 mov eax,[esi+08]
 mov [iXP],eax

 _MonR4:
 cmp eax,'atta'
 jne _MonR5

 mov eax,[esi+08]
 cmp eax,[iMinAttack]
 jg _ExitMR
 mov eax,[iMinAttack]
 mov [esi+08],eax

_MonR5:
 cmp eax,'inte'
 jne _MonR6

 mov eax,[esi+08]
 cmp eax,[iMinInt]
 jg _ExitMR
 mov eax,[iMinInt]
 mov [esi+08],eax

_MonR6:
 cmp eax,'defe'
 jne _MonR7

 mov eax,[esi+08]
 cmp eax,[iMinDefense]
 jg _ExitMR
 mov eax,[iMinDefense]
 mov [esi+08],eax

_MonR7:
 cmp eax,'crys'
 jne _MonR8

 mov eax,[esi+08]
 cmp eax,[iMinCrystals]
 jg _ExitMR
 mov eax,[iMinCrystals]
 mov [esi+08],eax

_MonR8:
 cmp eax,'mana'
 jne _MonR9

 mov eax,[esi+08]
 cmp eax,[iMinMana]
 jg _ExitMR
 mov eax,[iMinMana]
 mov [esi+08],eax

_MonR9:
 cmp eax,'rage'
 jne _ExitMR

 mov eax,[esi+08]
 cmp eax,[iMinRage]
 jg _ExitMR
 mov eax,[iMinRage]
 mov [esi+08],eax

_ExitMR:
 mov eax,[iEAX]
 jmp _BackMR                 // Back to main code

//=========================================
// Variables
iEnableAP:
 dd 1 
iEnableGM:
 dd 1 
iEnableMR:
 dd 1
iEnableMM:
 dd 1
iEnableML:
 dd 0
iEnableMX:
 dd 0
iEnableMxT:
 dd 1 
iMinimumLS:
 dd #50000
iMinMoney:
 dd #5000000
iXP:
 dd 0
iEAX:
 dd 0
iCurLS:
 dd 0 
iMinRunes:
 dd #19
iMinAttack:
 dd #20
iMinDefense:
 dd #20
iMinInt:
 dd #20
iMinCrystals:
 dd #200
iMinMana:
 dd #80
iMinRage:
 dd #80

//=========================================
// Hacking Points
//kb.exe+066f0f:
//kb.exe+06a4a3:
//kb.exe+06d8ac:
aobActionPoints+03:
pActionPoints:
 jmp _ActionPoints 
 nop
 nop
_BackAP:

//kb.exe+062a8c:   
//kb.exe+06604b:
//kb.exe+068489:
aobTroopSize:
pTroopSize:
 jmp _TroopSize
 nop
_BackTS:

//kb.exe+062a81:   
//kb.exe+066040:
//kb.exe+06847e:
aobTroopHP:
pTroopHP:
 jmp _TroopHP
_BackTH:

//kb.exe+0004cbd3:
//kb.exe+04f963:
//kb.exe+051125:
aobMonResources+0c:
pMonResources:
 jmp _MonResources 
 nop
_BackMR:

//=========================================
// Original Codes
[DISABLE]
//kb.exe+066f0f:
//kb.exe+06a4a3:
//kb.exe+06d8ac:
pActionPoints:
 sub [ecx+14],eax
 cmp dword ptr [ecx+14],00

//kb.exe+00062a8c:
//kb.exe+06604b:
//kb.exe+068489:
pTroopSize:
 mov [ecx+10],edx
 mov ecx,[esi+20]

//kb.exe+00062a81:
//kb.exe+066040:
//kb.exe+06847e:
pTroopHP:
 mov [ecx+0c],edx
 mov eax,[esi]

//kb.exe+0004cbd3:
//kb.exe+04f963:
//kb.exe+051125:
pMonResources:
 mov ecx,[edi+0c]
 mov esi,[ecx+eax*4]

unregistersymbol(MyCode)
unregistersymbol(iEnableAP)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMR)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableML)
unregistersymbol(iEnableMX)
unregistersymbol(iEnableMxT)
unregistersymbol(iMinimumLS)
unregistersymbol(iMinMoney)
unregistersymbol(iXP)
unregistersymbol(iCurLS)
unregistersymbol(pActionPoints)
unregistersymbol(pTroopSize)
unregistersymbol(pTroopHP)
unregistersymbol(pMonResources)

dealloc(MyCode)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Enable/Disable God Mode"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable/Disable Unlimited move AP"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableAP</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enable/Disable Unlimited Runes"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMR</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable/Disable Quick XP"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMX</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Enable/Disable MxT"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMxT</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Enable/Disable Minimum Money"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Enable/Disable Minimum Leadership"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableML</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Minimum Money Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinMoney</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Minimum Leadership Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinimumLS</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Minimum Runes Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinRunes</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Minimum Int Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinInt</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Minimum Attack Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinAttack</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Minimum Defense Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinDefense</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Minimum Crystals Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinCrystals</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Minimum Mana Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinMana</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Minimum Rage Value"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iMinRage</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"No description"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>08BD6018</Address>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :00466f0f - 29 41 14 - sub [ecx+14],eax _ActionPoints</Description>
      <Address>00466F0F</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>66F0F</ModuleNameOffset>
      <Before>
        <Byte>4E</Byte>
        <Byte>08</Byte>
        <Byte>8B</Byte>
        <Byte>49</Byte>
        <Byte>70</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>41</Byte>
        <Byte>14</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>79</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>7D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>0044cbd3 - 8b 34 81 - mov esi,[ecx+eax*4] _MonResources</Description>
      <Address>0044CBD3</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>4CBD3</ModuleNameOffset>
      <Before>
        <Byte>7C</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4F</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>34</Byte>
        <Byte>81</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>74</Byte>
        <Byte>24</Byte>
        <Byte>10</Byte>
        <Byte>EB</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :00462a81 - 89 51 0c - mov [ecx+0c],edx _TroopHP</Description>
      <Address>00462A81</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>62A81</ModuleNameOffset>
      <Before>
        <Byte>48</Byte>
        <Byte>70</Byte>
        <Byte>8B</Byte>
        <Byte>56</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>51</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>06</Byte>
        <Byte>8B</Byte>
        <Byte>48</Byte>
        <Byte>70</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :00462a8c - 89 51 10 - mov [ecx+10],edx _TroopSize</Description>
      <Address>00462A8C</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>62A8C</ModuleNameOffset>
      <Before>
        <Byte>48</Byte>
        <Byte>70</Byte>
        <Byte>8B</Byte>
        <Byte>56</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>51</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>4E</Byte>
        <Byte>20</Byte>
        <Byte>F6</Byte>
        <Byte>C1</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[ecx+08] - access crystals</Description>
      <Address>0042EBA0</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>2EBA0</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>41</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[ecx+08] - legend - access might rune</Description>
      <Address>00428F40</Address>
      <ModuleName>kb.exe</ModuleName>
      <ModuleNameOffset>28F40</ModuleNameOffset>
      <Before>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>41</Byte>
        <Byte>08</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>CC</Byte>
        <Byte>CC</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iMinRunes</Name>
      <Address>0B3A02C9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinAttack</Name>
      <Address>0B3A02CD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinDefense</Name>
      <Address>0B3A02D1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinInt</Name>
      <Address>0B3A02D5</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinCrystals</Name>
      <Address>0B3A02D9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinMana</Name>
      <Address>0B3A02DD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinRage</Name>
      <Address>0B3A02E1</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>struct item:
0000 = 00f90b8c
0004 = pTypeValue (ex.: count)
0008 = iAmount
struct type:
0000 = 00f8ccfc
0004 = pTypename
0008 = i2
struct Typename:
0004 = i16
0008 = i1
000c = aName (ex.: money, rune_mind, etc)
====== combat ======
struct troop
000c = icHP
0010 = icSize
0014 = icMP
0024 = imHP
0028 = imMP
004c = imHP
0114 = imSize
01dc = iPlayerID (1 = player)
intel
attac
defen
cryst
rage
rune_might
rune_mind
rune_magic
mana
</Comments>
</CheatTable>
