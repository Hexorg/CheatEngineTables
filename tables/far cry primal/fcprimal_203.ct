<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>435</ID>
      <Description>"God Mode"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160311

aobscanmodule( _Health, FCPrimal.exe, 0F57C00F2F411872 )
registersymbol( _Health )
alloc( Health, 256, FCPrimal.exe )
label( Health_orig )
registersymbol( Health_orig )

Health:
cmp dword ptr [rcx+10],CEDA2313 // Health
jne short @f
movss xmm1,[rcx+1C]
movss [rcx+18],xmm1
@@:
Health_orig:
readmem( _Health, 7 )
jmp _Health+7

_Health:
jmp Health
db 90 90

/*
1443496B0 - 0F57 C0               - xorps xmm0,xmm0
1443496B3 - 0F2F 41 18            - comiss xmm0,[rcx+18]
1443496B7 - 72 04                 - jb 1443496BD
1443496B9 - B0 01                 - mov al,01
1443496BB - C3                    - ret
1443496BD - 30 C0                 - xor al,al
1443496BF - C3                    - ret
*/

[DISABLE]

_Health:
readmem( Health_orig, 7 )

unregistersymbol( Health_orig )
dealloc( Health )
unregistersymbol( _Health )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Get Skill Points"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _SkillPoints_AOB, FCPrimal.exe, 4885C00F84????????8B808400000041 )
label( _SkillPoints )
registersymbol( _SkillPoints )
alloc( SkillPoints, 256, FCPrimal.exe )
label( SkillPointsPtr )
registersymbol( SkillPointsPtr )
label( SkillPoints_orig )
registersymbol( SkillPoints_orig )

SkillPoints:
mov [SkillPointsPtr],rax
SkillPoints_orig:
readmem( _SkillPoints_AOB+9, 6 )
jmp _SkillPoints+6

SkillPointsPtr:
dq 0

_SkillPoints_AOB+9:
_SkillPoints:
jmp SkillPoints
db 90

/*
144CB40C8 - 48 85 C0              - test rax,rax
144CB40CB - 0F84 A4010000         - je 144CB4275
144CB40D1 - 8B 80 84000000        - mov eax,[rax+00000084]
*/

[DISABLE]

_SkillPoints:
readmem( SkillPoints_orig, 6 )

unregistersymbol( SkillPoints_orig )
unregistersymbol( SkillPointsPtr )
dealloc( SkillPoints )
unregistersymbol( _SkillPoints )

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>434</ID>
          <Description>"Skill Points"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>SkillPointsPtr</Address>
          <Offsets>
            <Offset>84</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>413</ID>
      <Description>"Infinite Ammo (Clip)"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _ClipAmmo, FCPrimal.exe, 0F4CCE29C88903488B5C24 ) // Ammo Subtract Function
registersymbol( _ClipAmmo )
alloc( ClipAmmo, 512, FCPrimal.exe )
label( ClipAmmo_orig )
registersymbol( ClipAmmo_orig )

ClipAmmo:
push rcx
mov rcx,[r12+78]
cmp byte ptr [rcx+00000A31],0
pop rcx
jne short @f
xor ecx,ecx
@@:
ClipAmmo_orig:
readmem( _ClipAmmo, 5 )
jmp _ClipAmmo+5

CPawn:
dq 0
Player:
dq 0

_ClipAmmo:
jmp ClipAmmo

// 144655FB3 - 0F4C CE               - cmovl ecx,esi
// 144655FB6 - 29 C8                 - sub eax,ecx

[DISABLE]

_ClipAmmo:
readmem( ClipAmmo_orig, 5 )

unregistersymbol( ClipAmmo_orig )
dealloc( ClipAmmo )
unregistersymbol( _ClipAmmo )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>256</ID>
      <Description>"Bow Always Tensioned"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _BowAlwaysHasTension, FCPrimal.exe, F30F108F500B0000440FB6A000020000 )
registersymbol( _BowAlwaysHasTension )
alloc( BowAlwaysHasTension, 256, FCPrimal.exe )
label( BowAlwaysHasTension_orig )
registersymbol( BowAlwaysHasTension_orig )

BowAlwaysHasTension:
push rcx
mov rcx,[rbp+78] // rbp = CPawn
cmp byte ptr [rcx+A31],0
pop rcx
jne short @f
mov [rdi+00000B50],(float)2
mov [rcx+00000A54],(float)0.00
mov [rcx+00000A58],(float)0.00
mov [rcx+00000A5C],(float)0.00
mov [rcx+00000A60],(float)0.005
mov [rcx+00000A64],(float)0.00
mov [rcx+00000A68],(float)-1.00
mov [rcx+00000A6C],(float)1.00

/*
+A54 = 0.400000006               - amount to which crosshair collapses - set to 0.00
+A58 = 0.001000000047            - set to 0.00
+A5C = 0.6000000238              - speed with which crosshair collapses - set to 0.00
+A60 = 0.50                      - fast shooting - set to 0.1
+A64 = 0.400000006               - set to 0.00
+A68 = 1.00                      - switch to -1 for accuracy
+A6C = -1.00                     - switch to 1 for accuracy
*/

@@:
BowAlwaysHasTension_orig:
readmem( _BowAlwaysHasTension, 8 )
jmp _BowAlwaysHasTension+8

_BowAlwaysHasTension:
jmp BowAlwaysHasTension
db 90 90 90

// 1448E6807 - F3 0F 10 8F 50 0B 00 00 - movss xmm1,[rdi+00000B50]

[DISABLE]

_BowAlwaysHasTension:
readmem( BowAlwaysHasTension_orig, 8 )

unregistersymbol( BowAlwaysHasTension_orig )
dealloc( BowAlwaysHasTension )
unregistersymbol( _BowAlwaysHasTension )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"No Recoil"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _NoRecoil, FCPrimal.exe, F30F10B7D00000000F29BC24D0000000 )
registersymbol( _NoRecoil )
aobscanmodule( _NoRecoilNop, FCPrimal.exe, F3440F11879C0000004889F2 )
registersymbol( _NoRecoilNop )
alloc( NoRecoil, 512, FCPrimal.exe )
label( NoRecoilNop )
label( NoRecoil_orig )
registersymbol( NoRecoil_orig )
label( NoRecoilNop_orig )
registersymbol( NoRecoilNop_orig )

NoRecoil:
push rcx
mov rcx,[rsi+78]
cmp byte ptr [rcx+A31],0
pop rcx
jne short @f
mov [rdi+000000D0],0
mov [rdi+000000D4],0
mov [rdi+000000D8],0
@@:
NoRecoil_orig:
readmem( _NoRecoil, 8 )
jmp _NoRecoil+8

NoRecoilNop:
push rcx
mov rcx,[rsi+78]
cmp byte ptr [rcx+A31],0
pop rcx
jne short @f
jmp _NoRecoilNop+9
@@:
NoRecoilNop_orig:
readmem( _NoRecoilNop, 9 )
jmp _NoRecoilNop+9

_NoRecoil:
jmp NoRecoil
db 90 90 90

// 14486032A - F3 0F10 B7 D0000000     - movss xmm6,[rdi+000000D0]
// 144860332 - 0F29 BC 24 D0000000     - movaps [rsp+000000D0],xmm7
// 14486033A - 44 0F29 84 24 C0000000  - movaps [rsp+000000C0],xmm8
// 144860343 - F3 0F10 BF D4000000     - movss xmm7,[rdi+000000D4]
// 14486034B - 48 8D 54 24 30          - lea rdx,[rsp+30]
// 144860350 - 49 89 F0                - mov r8,rsi
// 144860353 - 48 89 F9                - mov rcx,rdi
// 144860356 - 44 0F29 8C 24 B0000000  - movaps [rsp+000000B0],xmm9
// 14486035F - 44 0F29 94 24 A0000000  - movaps [rsp+000000A0],xmm10
// 144860368 - 44 0F29 9C 24 90000000  - movaps [rsp+00000090],xmm11

_NoRecoilNop:
jmp NoRecoilNop
db 90 90 90 90

// 14486050A - F3 44 0F11 87 9C000000  - movss [rdi+0000009C],xmm8
// 144860513 - 48 89 F2                - mov rdx,rsi
// 144860516 - 4C 89 E1                - mov rcx,r12
// 144860519 - F3 44 0F11 87 A0000000  - movss [rdi+000000A0],xmm8

[DISABLE]

_NoRecoil:
readmem( NoRecoil_orig, 8 )

_NoRecoilNop:
readmem( NoRecoilNop_orig, 9 )

unregistersymbol( NoRecoilNop_orig )
unregistersymbol( NoRecoil_orig )
dealloc( NoRecoil )
unregistersymbol( _NoRecoilNop )
unregistersymbol( _NoRecoil )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"No Spread"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _NoSpread, FCPrimal.exe, F30F108A????????488B88????????488B89????????48 )
registersymbol( _NoSpread )
alloc( NoSpread, 256, FCPrimal.exe )
label( NoSpread_orig )
registersymbol( NoSpread_orig )

NoSpread:
push rcx
mov rcx,[rsp+18]
mov rcx,[rcx+78]
cmp byte ptr [rcx+A31],0
pop rcx
jne short @f
mov [rdx+00000290],(float)0
@@:
NoSpread_orig:
readmem( _NoSpread, 8 )
jmp _NoSpread+8

// 1448476CB - F3 0F10 8A 90020000   - movss xmm1,[rdx+00000290]
// 1448476D3 - 48 8B 88 C0000000     - mov rcx,[rax+000000C0]
// 1448476DA - 48 8B 89 30010000     - mov rcx,[rcx+00000130]
// 1448476E1 - 48 8B 01              - mov rax,[rcx]
// 1448476E4 - FF A0 68010000        - jmp qword ptr [rax+00000168]
// 1448476EA - CC                    - int 3
// 1448476EB - CC                    - int 3
// 1448476EC - CC                    - int 3
// 1448476ED - CC                    - int 3
// 1448476EE - CC                    - int 3
// 1448476F0 - 4C 8B 81 C0000000     - mov r8,[rcx+000000C0]

_NoSpread:
jmp NoSpread
db 90 90 90

[DISABLE]

_NoSpread:
readmem( NoSpread_orig, 8 )

unregistersymbol( NoSpread_orig )
dealloc( NoSpread )
unregistersymbol( _NoSpread )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>271</ID>
      <Description>"No Sway"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _NoSway, FCPrimal.exe, F30F1043040F14F2 )
registersymbol( _NoSway )
aobscanmodule( _NoSwayAimWalk, FCPrimal.exe, F30F1088F013000048 )
registersymbol( _NoSwayAimWalk )
alloc( NoSway, 256, FCPrimal.exe )
label( NoSwayAimWalk )
label( NoSway_orig )
registersymbol( NoSway_orig )
label( NoSwayAimWalk_orig )
registersymbol( NoSwayAimWalk_orig )

NoSway:
mov [rbx],(float)0
mov [rbx+04],(float)0
mov [rbx+08],(float)0
mov [rbx+0c],(float)0
NoSway_orig:
readmem( _NoSway, 5 )
jmp _NoSway+5

NoSwayAimWalk:
mov [rax+0000068C],(float)0
mov [rax+00000690],(float)0
mov [rax+00000694],(float)0
mov [rax+00000698],(float)0
mov [rax+000006AC],(float)1000
NoSwayAimWalk_orig:
readmem( _NoSwayAimWalk, 8 )
jmp _NoSwayAimWalk+8

_NoSway:
jmp NoSway

// 144638529 - F3 0F 10 43 04 - movss xmm0,[rbx+04]

_NoSwayAimWalk:
jmp NoSwayAimWalk
db 90 90 90

// 144638771 - F3 0F 10 88 F0 13 00 00 - movss xmm1,[rax+000013F0]

[DISABLE]

_NoSway:
readmem( NoSway_orig, 5 )

_NoSwayAimWalk:
readmem( NoSwayAimWalk_orig, 8 )

unregistersymbol( NoSwayAimWalk_orig )
unregistersymbol( NoSway_orig )
dealloc( NoSway )
unregistersymbol( _NoSwayAimWalk )
unregistersymbol( _NoSway )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>198</ID>
      <Description>"No Fall Damage"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _NoFallingDamage, FCPrimal.exe, F30F1087600A0000F30F5887400A0000 )
registersymbol( _NoFallingDamage )
alloc( NoFallingDamage, 256, FCPrimal.exe )
label( NoFallingDamage_orig )
registersymbol( NoFallingDamage_orig )

NoFallingDamage:
cmp byte ptr [rdi+A31],0
jne short @f
mov [rdi+00000A40],(float)-100
@@:
NoFallingDamage_orig:
readmem( _NoFallingDamage, 8 )
jmp _NoFallingDamage+8

_NoFallingDamage:
jmp NoFallingDamage
db 90 90 90

// 1446F395C - F3 0F10 87 600A0000   - movss xmm0,[rdi+00000A60]
// 1446F3964 - F3 0F58 87 400A0000   - addss xmm0,[rdi+00000A40]
// 1446F396C - F3 0F11 87 B80A0000   - movss [rdi+00000AB8],xmm0

[DISABLE]

_NoFallingDamage:
readmem( NoFallingDamage_orig, 8 )

unregistersymbol( NoFallingDamage_orig )
dealloc( NoFallingDamage )
unregistersymbol( _NoFallingDamage )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>185</ID>
      <Description>"Super Speed"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160317
// fixed speed when using grappling hook ;)

aobscanmodule( _Speed, FCPrimal.exe, F30F1080????????F30F59D8F30F59D0 )
registersymbol( _Speed )
alloc( Speed, 512, FCPrimal.exe )
label( _IncreaseSpeedValue )
registersymbol( _IncreaseSpeedValue )
label( _DecreaseSpeedValue )
registersymbol( _DecreaseSpeedValue )
label( _RestoreSpeedValue )
registersymbol( _RestoreSpeedValue )
label( _GetSpeedBasePtr )
registersymbol( _GetSpeedBasePtr )
label( _DefaultSpeed )
label( Speed_exit )
label( IncreaseSpeed )
label( DecreaseSpeed )
label( RestoreSpeed )
label( Speed_orig )
registersymbol( Speed_orig )


Speed:
cmp byte ptr [rax+A31],0
jne short Speed_exit
mov [_GetSpeedBasePtr],rax         // 0xB8 = get value of Walking Speed; 0xBC = get value of Sprint Speed
cmp byte ptr [_IncreaseSpeedValue],1
je short IncreaseSpeed
cmp byte ptr [_DecreaseSpeedValue],1
je short DecreaseSpeed
cmp byte ptr [_RestoreSpeedValue],1
je short RestoreSpeed
test byte ptr [rax+320],1          // if 0, we're on grappling hook
jne short Speed_exit                  // else execute normal code
movss xmm0,[_DefaultSpeed]         // apply default speed
jmp _Speed+8
Speed_exit:
Speed_orig:
readmem( _Speed, 8 )
jmp _Speed+8

IncreaseSpeed:
mov byte ptr [_IncreaseSpeedValue],0
fld [rax+000000B8]
fld1
faddp
fstp [rax+000000B8]
fld [rax+000000BC]
fld1
faddp
fstp [rax+000000BC]
jmp Speed_exit

DecreaseSpeed:
mov byte ptr [_DecreaseSpeedValue],0
fld [rax+000000B8]
fld1
fsubp
fstp [rax+000000B8]
fld [rax+000000BC]
fld1
fsubp
fstp [rax+000000BC]
jmp Speed_exit

RestoreSpeed:
mov byte ptr [_RestoreSpeedValue],0
mov [rax+000000B8],(float)1.0
mov [rax+000000BC],(float)1.0
jmp Speed_exit

_IncreaseSpeedValue:
db 0
 _DecreaseSpeedValue:
db 0
_RestoreSpeedValue:
db 0
_GetSpeedBasePtr:
dq 0
_DefaultSpeed:
dd (float)1.0

_Speed:
jmp Speed
db 90 90 90

// 14473EF62 - F3 0F10 80 B8000000   - movss xmm0,[rax+000000B8]
// 14473EF6A - F3 0F59 D8            - mulss xmm3,xmm0
// 14473EF6E - F3 0F59 D0            - mulss xmm2,xmm0
// 14473EF72 - F3 0F59 C8            - mulss xmm1,xmm0
// 14473EF76 - F3 0F11 5C 24 68      - movss [rsp+68],xmm3
// 14473EF7C - F3 0F11 54 24 64      - movss [rsp+64],xmm2
// 14473EF82 - F3 0F11 4C 24 60      - movss [rsp+60],xmm1

[DISABLE]

_Speed:
readmem( Speed_orig, 8 )

unregistersymbol( Speed_orig )
unregistersymbol( _GetSpeedBasePtr )
unregistersymbol( _RestoreSpeedValue )
unregistersymbol( _DecreaseSpeedValue )
unregistersymbol( _IncreaseSpeedValue )
dealloc( Speed )
unregistersymbol( _Speed )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>186</ID>
          <Description>"Increase by 1.0"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_IncreaseSpeedValue</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>187</ID>
          <Description>"Decrease by 1.0"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_DecreaseSpeedValue</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>98</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>188</ID>
          <Description>"Restore to default"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_RestoreSpeedValue</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>99</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>191</ID>
          <Description>"Debug"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>240</ID>
              <Description>"Current Walk Speed"</Description>
              <Color>808080</Color>
              <VariableType>Float</VariableType>
              <Address>_GetSpeedBasePtr</Address>
              <Offsets>
                <Offset>B8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>241</ID>
              <Description>"Current Sprint Speed"</Description>
              <Color>808080</Color>
              <VariableType>Float</VariableType>
              <Address>_GetSpeedBasePtr</Address>
              <Offsets>
                <Offset>BC</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>195</ID>
      <Description>"Super Jump"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _SuperJump, FCPrimal.exe, F30F1090B00A00004883 )
registersymbol( _SuperJump )
alloc( SuperJump, 1024, FCPrimal.exe )
label( _IncreaseJumpHeight )
registersymbol( _IncreaseJumpHeight )
label( _IncreaseJumpHeightBy_1 )
registersymbol( _IncreaseJumpHeightBy_1 )
label( _DecreaseJumpHeight )
registersymbol( _DecreaseJumpHeight )
label( _DecreaseJumpHeightBy_1 )
registersymbol( _DecreaseJumpHeightBy_1 )
label( _RestoreJumpHeight )
registersymbol( _RestoreJumpHeight )
label( _GetJumpHeight )
registersymbol( _GetJumpHeight )
label( SuperJump_exit )
label( IncreaseJumpHeight )
label( DecreaseJumpHeight )
label( RestoreJumpHeight )
label( IncreaseJumpHeightBy_1 )
label( DecreaseJumpHeightBy_1 )
label( SuperJump_orig )
registersymbol( SuperJump_orig )

SuperJump:
cmp byte ptr [rax+A31],0
jne short SuperJump_exit
cmp byte ptr [_IncreaseJumpHeight],1
je short IncreaseJumpHeight
cmp byte ptr [_DecreaseJumpHeight],1
je DecreaseJumpHeight
cmp byte ptr [_RestoreJumpHeight],1
je RestoreJumpHeight
cmp byte ptr [_IncreaseJumpHeightBy_1],1
je IncreaseJumpHeightBy_1
cmp byte ptr [_DecreaseJumpHeightBy_1],1
je DecreaseJumpHeightBy_1
cmp dword ptr [rax+00000AB0],(float)1.200000048
je short SuperJump_exit
mov [_GetJumpHeight],rax
SuperJump_exit:
SuperJump_orig:
readmem( _SuperJump, 8 )
jmp _SuperJump+8

IncreaseJumpHeight:
mov byte ptr [_IncreaseJumpHeight],0
cmp dword ptr [rax+00000AB0],(float)1.200000048
je SuperJump_exit
fld [rax+00000AB0]
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fld1
faddp
fstp [rax+00000AB0]
jmp SuperJump_exit

DecreaseJumpHeight:
mov byte ptr [_DecreaseJumpHeight],0
cmp dword ptr [rax+00000AB0],(float)1.25
jle SuperJump_exit
cmp dword ptr [rax+00000AB0],(float)1.200000048
je SuperJump_exit
fld [rax+00000AB0]
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fld1
fsubp
fstp [rax+00000AB0]
jmp SuperJump_exit

IncreaseJumpHeightBy_1:
mov byte ptr [_IncreaseJumpHeightBy_1],0
fld [rax+00000AB0]
fld1
faddp
fstp [rax+00000AB0]
jmp SuperJump_exit

DecreaseJumpHeightBy_1:
mov byte ptr [_DecreaseJumpHeightBy_1],0
fld [rax+00000AB0]
fld1
fsubp
fstp [rax+00000AB0]
jmp SuperJump_exit

RestoreJumpHeight:
mov byte ptr [_RestoreJumpHeight],0
cmp dword ptr [rax+00000AB0],(float)1.200000048
je SuperJump_exit
mov dword ptr [rax+00000AB0],(float)1.25
jmp SuperJump_exit

_IncreaseJumpHeight:
db 0
_DecreaseJumpHeight:
db 0
_IncreaseJumpHeightBy_1:
db 0
_DecreaseJumpHeightBy_1:
db 0
_RestoreJumpHeight:
db 0
_GetJumpHeight:
dq 0

_SuperJump:
jmp SuperJump
db 90 90 90

// 14473F0C2 - F3 0F10 90 B00A0000   - movss xmm2,[rax+00000AB0]
// 14473F0CA - 48 83 C1 20           - add rcx,20
// 14473F0CE - E8 ED17D1FF           - call 1444508C0

[DISABLE]

_SuperJump:
readmem( SuperJump_orig, 8 )

unregistersymbol( SuperJump_orig )
unregistersymbol( _GetJumpHeight )
unregistersymbol( _RestoreJumpHeight )
unregistersymbol( _DecreaseJumpHeightBy_1 )
unregistersymbol( _DecreaseJumpHeight )
unregistersymbol( _IncreaseJumpHeightBy_1 )
unregistersymbol( _IncreaseJumpHeight )
dealloc( SuperJump )
unregistersymbol( _SuperJump )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>407</ID>
          <Description>"Increase by 1.0"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_IncreaseJumpHeightBy_1</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>196</ID>
          <Description>"Increase by 25.00"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_IncreaseJumpHeight</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>100</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>406</ID>
          <Description>"Decrease by 1.00"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_DecreaseJumpHeightBy_1</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>231</ID>
          <Description>"Decrease by 25.00"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_DecreaseJumpHeight</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>101</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>197</ID>
          <Description>"Restore to default"</Description>
          <Color>404080</Color>
          <VariableType>Byte</VariableType>
          <Address>_RestoreJumpHeight</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>102</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"Debug"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>229</ID>
              <Description>"Current Jump Height"</Description>
              <Color>808080</Color>
              <VariableType>Float</VariableType>
              <Address>_GetJumpHeight</Address>
              <Offsets>
                <Offset>AB0</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>440</ID>
      <Description>"Stealth"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( _Stealth, FCPrimal.exe, 48895C240848897424184889542410574883EC304889CF4584C0 )
registersymbol( _Stealth )

_Stealth:
db C3

/*
14458FC00 - 48 89 5C 24 08        - mov [rsp+08],rbx &lt;- epilogue
14458FC05 - 48 89 74 24 18        - mov [rsp+18],rsi
14458FC0A - 48 89 54 24 10        - mov [rsp+10],rdx
14458FC0F - 57                    - push rdi
14458FC10 - 48 83 EC 30           - sub rsp,30
14458FC14 - 48 89 CF              - mov rdi,rcx
14458FC17 - 45 84 C0              - test r8l,r8l
..
14458FC4E - 83 7F 44 00           - cmp dword ptr [rdi+44],00 &lt;- ptr+44 contains the stealth bool
14458FC52 - 74 72                 - je 14458FCC6
14458FC54 - 4C 8B 44 24 48        - mov r8,[rsp+48]
*/

[DISABLE]

_Stealth:
db 48

unregistersymbol( _Stealth )
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>426</ID>
      <Description>"Unlimited Boost"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _UnlimitedBoost, FCPrimal.exe, F30F1051280F2FD60F86 )
registersymbol( _UnlimitedBoost )
alloc( UnlimitedBoost, 256, FCPrimal.exe )
label( BoostTimerPtr )
registersymbol( BoostTimerPtr )
label( MyBoostTimer )
registersymbol( MyBoostTimer )
label( UnlimitedBoost_orig )
registersymbol( UnlimitedBoost_orig )

UnlimitedBoost:
push rsi
mov rsi,[rsi+78]
cmp byte ptr [rsi+A31],0
pop rsi
jne short @f
mov [BoostTimerPtr],rcx
movss xmm2,[MyBoostTimer]
movss [rcx+28],xmm2
@@:
UnlimitedBoost_orig:
readmem( _UnlimitedBoost, 5 )
jmp _UnlimitedBoost+5

MyBoostTimer:
dd (float)60.00
BoostTimerPtr:
dq 0

_UnlimitedBoost:
jmp UnlimitedBoost

// 144737A18 - F3 0F10 51 28         - movss xmm2,[rcx+28]
// 144737A1D - 0F2F D6               - comiss xmm2,xmm6

[DISABLE]

_UnlimitedBoost:
readmem( UnlimitedBoost_orig, 5 )

unregistersymbol( UnlimitedBoost_orig )
unregistersymbol( MyBoostTimer )
unregistersymbol( BoostTimerPtr )
dealloc( UnlimitedBoost )
unregistersymbol( _UnlimitedBoost )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>427</ID>
          <Description>"Boost Value"</Description>
          <VariableType>Float</VariableType>
          <Address>MyBoostTimer</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>433</ID>
          <Description>"Debug"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>428</ID>
              <Description>"Boost Timer"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Float</VariableType>
              <Address>BoostTimerPtr</Address>
              <Offsets>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>429</ID>
              <Description>"Maximum Boost Timer"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Float</VariableType>
              <Address>BoostTimerPtr</Address>
              <Offsets>
                <Offset>28</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>447</ID>
      <Description>"Get Game Speed"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule( _GameSpeed, FCPrimal.exe, F20F594360F20F59C1F20F114348 )
registersymbol( _GameSpeed )
alloc( GameSpeed, 256, FCPrimal.exe )
label( GameSpeed_orig )
registersymbol( GameSpeed_orig )
label( gSpeed )
registersymbol( gSpeed )

GameSpeed:
mov [gSpeed],rbx
GameSpeed_orig:
readmem( _GameSpeed, 5 )
jmp _GameSpeed+5

gSpeed:
dq 0

_GameSpeed:
jmp GameSpeed

/*
143B0AC8E - F2 0F59 43 60         - mulsd xmm0,[rbx+60]
143B0AC93 - F2 0F59 C1            - mulsd xmm0,xmm1
143B0AC97 - F2 0F11 43 48         - movsd [rbx+48],xmm0
*/

[DISABLE]

_GameSpeed:
readmem( GameSpeed_orig, 5 )

unregistersymbol( gSpeed )
unregistersymbol( GameSpeed_orig )
dealloc( GameSpeed )
unregistersymbol( _GameSpeed )
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>446</ID>
          <Description>"Game Speed"</Description>
          <VariableType>Float</VariableType>
          <Address>gSpeed</Address>
          <Offsets>
            <Offset>64</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>452</ID>
      <Description>"[Inventory Editor]"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <Color>000080</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Main Hook

//aobscanmodule( _MainHook, FCPrimal.exe, 4883EC288B81800200004989C939D0 )
aobscanmodule( _MainHook, FCPrimal.exe, 4889E0488958184889782055488D68E8 )
registersymbol( _MainHook )
alloc( MainHook, 128, FCPrimal.exe )
registersymbol( MainHook )
label( CPawn )
registersymbol( CPawn )
label( CPlayer )
registersymbol( CPlayer )
label( MainHook_orig )
registersymbol( MainHook_orig )

MainHook:
push rcx
mov [CPawn],r8
mov rcx,[r8+78]
mov [CPlayer],rcx
pop rcx
@@:
MainHook_orig:
readmem( _MainHook, 7 )
jmp _MainHook+7

CPawn:
dq 0
CPlayer:
dq 0

_MainHook:
jmp MainHook
db 90 90

/*
144637330 - 48 83 EC 28           - sub rsp,28 &lt;-- RSI = CPawn; [RSI+78] = CPlayer
144637334 - 8B 81 80020000        - mov eax,[rcx+00000280]
14463733A - 49 89 C9              - mov r9,rcx
14463733D - 39 D0                 - cmp eax,edx
14463733F - 75 09                 - jne 14463734A
144637341 - 4C 39 81 90020000     - cmp [rcx+00000290],r8
144637348 - 74 30                 - je 14463737A
14463734A - 89 91 80020000        - mov [rcx+00000280],edx
144637350 - 48 8D 91 FC000000     - lea rdx,[rcx+000000FC]
144637357 - C7 81 7C020000 00000000 - mov [rcx+0000027C],00000000
144637361 - 89 81 84020000        - mov [rcx+00000284],eax
144637367 - 48 81 C1 BC010000     - add rcx,000001BC
14463736E - E8 DD6CFFFF           - call 14462E050
144637373 - 4D 89 81 90020000     - mov [r9+00000290],r8
14463737A - 48 83 C4 28           - add rsp,28
14463737E - C3                    - ret
*/

/*
FCPrimal.exe+492BF20 - 48 89 E0              - mov rax,rsp &lt;-- R8 = CPawn; [R8+78] = CPlayer
FCPrimal.exe+492BF23 - 48 89 58 18           - mov [rax+18],rbx
FCPrimal.exe+492BF27 - 48 89 78 20           - mov [rax+20],rdi
FCPrimal.exe+492BF2B - 55                    - push rbp
FCPrimal.exe+492BF2C - 48 8D 68 E8           - lea rbp,[rax-18]
FCPrimal.exe+492BF30 - 48 81 EC 10010000     - sub rsp,00000110
FCPrimal.exe+492BF37 - 48 89 CB              - mov rbx,rcx
FCPrimal.exe+492BF3A - 44 0F29 60 88         - movaps [rax-78],xmm12
FCPrimal.exe+492BF3F - 4C 89 C1              - mov rcx,r8
FCPrimal.exe+492BF42 - 4C 89 C7              - mov rdi,r8
FCPrimal.exe+492BF45 - 44 0F28 E1            - movaps xmm12,xmm1
*/

[DISABLE]

_MainHook:
readmem( MainHook_orig, 7 )

unregistersymbol( MainHook_orig )
unregistersymbol( CPlayer )
unregistersymbol( CPawn )
unregistersymbol( MainHook )
dealloc( MainHook )
unregistersymbol( _MainHook )

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>332</ID>
          <Description>"Edit Resources"</Description>
          <Options moHideChildren="1"/>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

alloc( KeyHandlerThread, 2048, FCPrimal.exe )
registersymbol( KeyHandlerThread )
CreateThread( KeyHandlerThread )
label( KeyHandlerOff )
registersymbol( KeyHandlerOff )
label( ExitKeyHandler )
label( KeyHandlerThread_loop )

label( Item )
registersymbol( Item )
label( Amount )
registersymbol( Amount )
label( rTable )
registersymbol( rTable )
label( lbl_a )
label( lbl_b )
label( lbl_exit )

label( GetResource_do )
label( GetAllResources_do )

KeyHandlerThread+500:

rTable:
dd 9ED //Animal Fat
dd A5B //Hardwood
dd 9E3 //Flint
dd A5A //Animal Hide
dd 9E4 //Bone
dd A2B //Bee Cluster
dd 9D2 //Clay Pot
dd 9EC //Meat
dd 3E8 //Green Leaf
dd 9FB //Violet Leaf
dd 56A //Blue Leaf
dd 83C //South Purple Leaf
dd 699 //North Yellow Leaf
dd A52 //Rare North Yellow Leaf
dd 69A //Red Leaf
dd 9FA //Rare Plant Root
dd 9E2 //Alder Wood
dd 9E0 //Slate
dd 9C9 //Reeds
dd 9F7 //Rare Reeds
dd 9DF //North Cedar
dd A4F //Rare North Cedar
dd 9DE //North Black Rock
dd A4D //Blood Of Oros
dd 9E1 //North Clay
dd 9F8 //South Maple
dd A50 //Rare South Maple
dd 9FC //South Stone
dd A4E //Rare South Stone
dd 9EE //South Rock Dust
dd 671 //Goat Skin
dd 748 //Deer Skin
dd A02 //Rare White Deer Skin
dd 8D1 //Wolf Skin
dd A56 //Rare White Wolf Skin
dd 9FE //Rare Stripe Wolf Skin
dd A20 //Dhole Skin
dd A25 //Rare Black Dhole Skin
dd 8D0 //Brown Bear Skin
dd A16 //Cave Bear Skin
dd 9EF //Sabretooth Tiger Skin
dd 9F0 //Cave Lion Skin
dd 9FD //Rare Black Lion Skin
dd 8D3 //Tapir Skin
dd A1C //Tall Elk Skin
dd A1D //Rare Red Elk Skin
dd 677 //Yak Skin
dd A07 //Rare White Yak Skin
dd 8CF //Boar Skin
dd 746 //Badger Skin
dd A1A //Jaguar Skin
dd A1B //Rare Black Jaguar Skin
dd A22 //Leopard Skin
dd A23 //Mammoth Skin
dd 8CC //Woolly Rhino Skin
dd A06 //Rare Two Horn Rhino Skin
dd A1E //Monkey Skin
dd A18 //Bitefish Skin
dd A19 //Rare Red Bitefish Skin
dd 683 //Feathers
dd 9FF //Rare Feathers
dd 0

KeyHandlerThread:
sub rsp,28

KeyHandlerThread_loop:
mov rcx,0a
call Sleep

cmp [KeyHandlerOff],1
je short ExitKeyHandler

  mov rcx,67 // VK_NUMPAD 7
  call GetAsyncKeyState
  test ax,ax
  jne short GetResource_do

  mov rcx,69 // VK_NUMPAD 9
  call GetAsyncKeyState
  test ax,ax
  jne short GetAllResources_do

  jmp short KeyHandlerThread_loop

ExitKeyHandler:
add rsp,28
mov [KeyHandlerOff],2
ret

GetResource_do:
sub rsp,30
@@:
cmp [Amount],0
je short @f
mov r9l,1
xor r8d,r8d
mov edx,[Item]                // 0x69A = ID for Red Leaf
mov rcx,[CPlayer]
lea rcx,[rcx+12B8]            // CPlayer + 12B8 = CInventory
mov byte ptr [rsp+20],0
call FCPrimal.exe+4974F80     // this call should be the same for you in version 1.3.3
sub [Amount],1
jmp @b
@@:
mov [Amount],64
add rsp,30
mov rcx,C8
call Sleep
jmp KeyHandlerThread_loop

GetAllResources_do:
sub rsp,30
mov rbx,rTable
lbl_a:
cmp dword ptr [rbx],0
je short lbl_exit
  lbl_b:
  cmp [Amount],0
  je short @f
    mov r9l,1
    xor r8d,r8d
    mov edx,[rbx]                 // Item
    mov rcx,[CPlayer]
    lea rcx,[rcx+12B8]            // CPlayer + 12B8 = CInventory
    mov byte ptr [rsp+20],0
    call FCPrimal.exe+4974F80     // this call should be the same for you in version 1.3.3
    sub [Amount],1
    jmp short lbl_b
  @@:
  mov [Amount],64
  add rbx,4
  jmp short lbl_a
lbl_exit:
add rsp,30
mov rcx,C8
call Sleep
jmp KeyHandlerThread_loop

Item:
dd 0

Amount:
dd 64

KeyHandlerOff:
dd 0

[DISABLE]

{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "KeyHandlerOff" ) == 0 then --could be 2 already
  writeInteger( "KeyHandlerOff", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "KeyHandlerOff" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}

unregistersymbol( rTable )
unregistersymbol( Amount )
unregistersymbol( Item )
unregistersymbol( KeyHandlerOff )
unregistersymbol( KeyHandlerThread )
dealloc( KeyHandlerThread )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>453</ID>
              <Description>"Item"</Description>
              <DropDownList DisplayValueAsItem="1">9ED:Animal Fat
A5B:Hardwood
9E3:Flint
A5A:Animal Hide
9E4:Bone
A2B:Bee Cluster
9D2:Clay Pot
9EC:Meat
3E8:Green Leaf
9FB:Violet Leaf
56A:Blue Leaf
83C:South Purple Leaf
699:North Yellow Leaf
A52:Rare North Yellow Leaf
69A:Red Leaf
9FA:Rare Plant Root
9E2:Alder Wood
9E0:Slate
9C9:Reeds
9F7:Rare Reeds
9DF:North Cedar
A4F:Rare North Cedar
9DE:North Black Rock
A4D:Blood Of Oros
9E1:North Clay
9F8:South Maple
A50:Rare South Maple
9FC:South Stone
A4E:Rare South Stone
9EE:South Rock Dust
671:Goat Skin
748:Deer Skin
A02:Rare White Deer Skin
8D1:Wolf Skin
A56:Rare White Wolf Skin
9FE:Rare Stripe Wolf Skin
A20:Dhole Skin
A25:Rare Black Dhole Skin
8D0:Brown Bear Skin
A16:Cave Bear Skin
9EF:Sabretooth Tiger Skin
9F0:Cave Lion Skin
9FD:Rare Black Lion Skin
8D3:Tapir Skin
A1C:Tall Elk Skin
A1D:Rare Red Elk Skin
677:Yak Skin
A07:Rare White Yak Skin
8CF:Boar Skin
746:Badger Skin
A1A:Jaguar Skin
A1B:Rare Black Jaguar Skin
A22:Leopard Skin
A23:Mammoth Skin
8CC:Woolly Rhino Skin
A06:Rare Two Horn Rhino Skin
A1E:Monkey Skin
A18:Bitefish Skin
A19:Rare Red Bitefish Skin
683:Feathers
9FF:Rare Feathers
569:WHITE LEAF
9CA:Sharp Flint
9CB:Sharp Rock
9CC:Wood Stick
9CD:Wood Pole
9D0:Fibers
9D1:Feathers
9F2:Berries
A17:Crocodile Skin
A1F:Pig Skin
A2A:Rot Bane
A2D:ANTIDOTE
A39:BOW
A3A:CLUB
A3B:WOOD ARROW
A3C:BAIT
A3D:STONE SHARD
A3F:STING BOMB
A40:STING BOMB
A41:SPEAR
A42:WOOD ARROW
A46:PLACEHOLDER UNIQUE ITEM
A4A:SPEAR
A62:STING BOMB
A63:BLOOD SHASTI CLUB
A64:KAPL SHARD
A53:DAYSHA HAND
A54:IZILA MASK
A55:WENJA BRACELET
A01:Rare Goat Skin
A12:Wenja Bracelet
A13:Udam Necklace
A14:Udam Furs
A15:Totem Nose
A21:Rare Black Dhole Skin
A29:Bloodtusk Mammoth Skull
A38:Lost Totem
A43:Bitefish Head
A44:Raven Feathers
A45:Snow Bird Feathers
A47:Elk Carcass
A48:Tortoise Shell
A49:Bone Dust
A4B:Totem Paw
A4C:Totem Ear
A51:Rhino Dung
A57:Honeycomb
A58:Moon Heart Mushroom
A59:Urki Rock
A5C:Necklace Offering
A5D:Drum Offering
A5E:Clay Pot Offering
A5F:Animal Dung
A60:Udam Tooth
A61:Izila Tooth
</DropDownList>
              <LastState Value="00000000" RealAddress="13FFE0155"/>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>4 Bytes</VariableType>
              <Address>Item</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>454</ID>
              <Description>"Amount"</Description>
              <LastState Value="100" RealAddress="13FFE0159"/>
              <VariableType>4 Bytes</VariableType>
              <Address>Amount</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>455</ID>
          <Description>"Debug"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" Activated="1" RealAddress="00000000"/>
          <Color>0080FF</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>456</ID>
              <Description>"CPawn"</Description>
              <LastState Value="00000000B0389270" RealAddress="13FFF0020"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>8 Bytes</VariableType>
              <Address>CPawn</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>457</ID>
              <Description>"CPlayer"</Description>
              <LastState Value="00000000BAA743D0" RealAddress="13FFF0028"/>
              <ShowAsHex>1</ShowAsHex>
              <Color>C0C0C0</Color>
              <VariableType>8 Bytes</VariableType>
              <Address>CPlayer</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>258</ID>
      <Description>"[Test]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>C0C0C0</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>300</ID>
          <Description>"REMOVE WALK SPEED LIMiT WHEN FiRiNG (not doing anything for the moment)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( _RemoveWalkSpeedLimitWhenFiring, FCPrimal.exe,  )
registersymbol( _RemoveWalkSpeedLimitWhenFiring )
alloc( RemoveWalkSpeedLimitWhenFiring, 256, FCPrimal.exe )
label( back )

RemoveWalkSpeedLimitWhenFiring:
mov [rax+000003F4],(float)1
mov [rax+000003F8],(float)1
mulss xmm6,[rax+000003F4]
jmp back

_RemoveWalkSpeedLimitWhenFiring:
jmp RemoveWalkSpeedLimitWhenFiring
db 90 90 90
back:
// 14475D9B0 - F6 40 09 01           - test byte ptr [rax+09],01
// 14475D9B4 - 74 12                 - je 14475D9C8
// 14475D9B6 - E8 C5490E00           - call 144842380
// 14475D9BB - F3 0F59 B0 F8030000   - mulss xmm6,[rax+000003F8] &lt;--
// 14475D9C3 - EB 10                 - jmp 14475D9D5
// 14475D9C5 - 7F E2                 - jg 14475D9A9
// 14475D9C7 - C2 E8B3               - ret B3E8
// 14475D9CA - 49 0E                 - push cs
// 14475D9CC - 00 F3                 - add bl,dh
// 14475D9CE - 0F59 B0 F4030000      - mulps xmm6,[rax+000003F4] &lt;--
// 14475D9D5 - 48 8B 87 C8010000     - mov rax,[rdi+000001C8]

[DISABLE]

_RemoveWalkSpeedLimitWhenFiring:
mulss xmm6,[rax+000003F4]

dealloc( RemoveWalkSpeedLimitWhenFiring )
unregistersymbol( _RemoveWalkSpeedLimitWhenFiring )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"iNFiNITE AMMO (CLiP) (crashes 4-5 minutes in-game)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

// SunBeam (rev: 20160304)

aobscanmodule( ClipAmmo_AOB, FCPrimal.exe, 4889742410574883EC2089D64889CF85D2 ) // Ammo Subtract Function
aobscanmodule( GetCPawn, FCPrimal.exe, 534883EC20488B8198000000488B58104885DB ) // GetCPawn
aobscanmodule( IsPlayer, FCPrimal.exe, 488B41780FB680310A0000 ) // IsPlayer
label( ClipHook )
registersymbol( ClipHook )
alloc( ClipAmmo, 512, FCPrimal.exe )
registersymbol( ClipAmmo )
label( back )
label( exit )
label( exit_0 )

ClipAmmo:
test edx,edx
je exit_0
push rax
push rcx
push rdx
push r8
push r9
push r10
sub rsp,20
mov rcx,[rsp+B0]
mov rcx,[rcx+70]
call GetCPawn // FCPrimal.exe+46399A0
test rax,rax
je short exit
mov rcx,rax
call IsPlayer // FCPrimal.exe+46D5DE0
test al,al
jne short exit
add rsp,20
pop r10
pop r9
pop r8
pop rdx
pop rcx
pop rax
ret
exit:
add rsp,20
pop r10
pop r9
pop r8
pop rdx
pop rcx
pop rax
exit_0:
mov [rsp+10],rsi
jmp back

ClipAmmo_AOB:
ClipHook:
jmp ClipAmmo
back:
// 144655F30 - 48 89 74 24 10 - mov [rsp+10],rsi

[DISABLE]

ClipHook:
mov [rsp+10],rsi

unregistersymbol( ClipAmmo )
dealloc( ClipAmmo )
unregistersymbol( ClipHook )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>412</ID>
          <Description>"iNFiNITE AMMO (CLiP) v2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

// SunBeam (rev: 20160304)

aobscanmodule( ClipAmmo_AOB, FCPrimal.exe, 4889742410574883EC2089D64889CF85D2 ) // Ammo Subtract Function
label( ClipHook )
registersymbol( ClipHook )
alloc( ClipAmmo, 256, FCPrimal.exe )
registersymbol( ClipAmmo )
label( back )
label( exit )

ClipAmmo:
test edx,edx
je exit
push rcx
mov rcx,[r12+78]
cmp byte ptr [rcx+00000A31],0
pop rcx
jne short @f
ret
@@:
exit:
mov [rsp+10],rsi
jmp back

ClipAmmo_AOB:
ClipHook:
jmp ClipAmmo
back:
// 144655F30 - 48 89 74 24 10 - mov [rsp+10],rsi

[DISABLE]

ClipHook:
mov [rsp+10],rsi

unregistersymbol( ClipAmmo )
dealloc( ClipAmmo )
unregistersymbol( ClipHook )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>289</ID>
          <Description>"NO CROSSHAiR DiSAPPEAR"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( _CrosshairNotDissappear, FCPrimal.exe, 488B8FD8000000F30F )
registersymbol( _CrosshairNotDissappear )

_CrosshairNotDissappear-2:
db EB 1C
// 144F007A6 - 74 1C - je 144F007C4
// 144F007A8 - 48 8B 8F D8 00 00 00 - mov rcx,[rdi+000000D8]

[DISABLE]

_CrosshairNotDissappear-2:
db 74 1C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"iNFiNiTE STAMiNA"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( _InfiniteStamina, FCPrimal.exe, 4889BC24B0000000488B79084885FF )
registersymbol( _InfiniteStamina )
alloc( InfiniteStamina, 512, FCPrimal.exe )
label( back )

InfiniteStamina:
cmp dword ptr [rcx+10],3B8CCC74 // Stamina
jne @f
push rax
mov rax,[rdi+250]
mov rax,[rax+78]
cmp byte ptr [rax+A31],0
pop rax
jne @f
movss xmm1,[rcx+1C]
@@:
movss [rcx+18],xmm1
jmp back

// 144381995 - F3 0F11 49 18         - movss [rcx+18],xmm1
// 14438199A - 45 84 C9              - test r9l,r9l
// 14438199D - 0F85 B8000000         - jne 144381A5B
// 1443819A3 - 48 89 BC 24 B0000000  - mov [rsp+000000B0],rdi

_InfiniteStamina-E:
jmp InfiniteStamina
back:

[DISABLE]

_InfiniteStamina-E:
movss [rcx+18],xmm1

dealloc( InfiniteStamina )
unregistersymbol( _InfiniteStamina )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>233</ID>
          <Description>"FLY"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( _Fly, FCPrimal.exe, 0F28204889D80F28C4 )
registersymbol( _Fly )
aobscanmodule( _BypassJumpFall, FCPrimal.exe, C6459800F680E801000080 )
registersymbol( _BypassJumpFall )
alloc( Fly, 512, FCPrimal.exe )
label( _Up )
registersymbol( _Up )
label( _Down )
registersymbol( _Down )
label( back_a )
label( Fly_exit )
label( Up )
label( Down )

Fly:
cmp byte ptr [_Up],1
je Up
cmp byte ptr [_Down],1
je Down
Fly_exit:
movaps xmm4,[rax]
mov rax,rbx
jmp back_a

Up:
mov byte ptr [_Up],0
fld [rax+08]
fld1
faddp
fld1
faddp
fld1
faddp
fstp [rax+08]
jmp Fly_exit

Down:
mov byte ptr [_Down],0
fld [rax+08]
fld1
fsubp
fld1
fsubp
fld1
fsubp
fstp [rax+08]
jmp Fly_exit

_Up:
db 0
_Down:
db 0

_Fly:
jmp Fly
db 90
back_a:
// 143E65584 - 0F 28 20 - movaps xmm4,[rax]
// 143E65587 - 48 89 D8 - mov rax,rbx

_BypassJumpFall:
 db C6 45 98 01 F6 80 E8 01 00 00 80
// 14473F0A1 - C6 45 98 00          - mov byte ptr [rbp-68],00
// 14473F0A5 - F6 80 E8 01 00 00 80 - test byte ptr [rax+000001E8],-80

[DISABLE]

_Fly:
movaps xmm4,[rax]
db 48 89 D8 // mov rax,rbx

_BypassJumpFall:
db C6 45 98 00 F6 80 E8 01 00 00 80

unregistersymbol( BypassJumpFall )
unregistersymbol( _Down )
unregistersymbol( _Up )
dealloc( Fly )
unregistersymbol( _BypassJumpFall )
unregistersymbol( _Fly )
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>17</Key>
                <Key>81</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>236</ID>
              <Description>"FLY UP"</Description>
              <Color>404080</Color>
              <VariableType>Byte</VariableType>
              <Address>_Up</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>103</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>237</ID>
              <Description>"FLY DOWN"</Description>
              <Color>404080</Color>
              <VariableType>Byte</VariableType>
              <Address>_Down</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>105</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>439</ID>
          <Description>"WiP - change scripts"</Description>
          <Options moHideChildren="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>436</ID>
              <Description>"[Enable]"</Description>
              <LastState/>
              <Color>000080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

// Main Hook

aobscanmodule( _MainHook, FCPrimal.exe, 4883EC288B81800200004989C939D0 )
registersymbol( _MainHook )
alloc( MainHook, 128, FCPrimal.exe )
registersymbol( MainHook )
label( CPawn )
registersymbol( CPawn )
label( CPlayer )
registersymbol( CPlayer )
label( MainHook_orig )
registersymbol( MainHook_orig )

MainHook:
test rsi,rsi
je short @f
mov [CPawn],rsi
test rcx,rcx
je short @f
mov [CPlayer],rcx
@@:
MainHook_orig:
readmem( _MainHook+4, 6 )
jmp _MainHook+A

CPawn:
dq 0
CPlayer:
dq 0

_MainHook+4:
jmp MainHook
nop

/*
144637330 - 48 83 EC 28           - sub rsp,28 &lt;-- RCX = Player; RSI = CPawn
144637334 - 8B 81 80020000        - mov eax,[rcx+00000280]
14463733A - 49 89 C9              - mov r9,rcx
14463733D - 39 D0                 - cmp eax,edx
14463733F - 75 09                 - jne 14463734A
144637341 - 4C 39 81 90020000     - cmp [rcx+00000290],r8
144637348 - 74 30                 - je 14463737A
14463734A - 89 91 80020000        - mov [rcx+00000280],edx
144637350 - 48 8D 91 FC000000     - lea rdx,[rcx+000000FC]
144637357 - C7 81 7C020000 00000000 - mov [rcx+0000027C],00000000
144637361 - 89 81 84020000        - mov [rcx+00000284],eax
144637367 - 48 81 C1 BC010000     - add rcx,000001BC
14463736E - E8 DD6CFFFF           - call 14462E050
144637373 - 4D 89 81 90020000     - mov [r9+00000290],r8
14463737A - 48 83 C4 28           - add rsp,28
14463737E - C3                    - ret
*/

[DISABLE]

_MainHook+4:
readmem( MainHook_orig, 6 )

unregistersymbol( MainHook_orig )
unregistersymbol( CPlayer )
unregistersymbol( CPawn )
unregistersymbol( MainHook )
dealloc( MainHook )
unregistersymbol( _MainHook )

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>437</ID>
                  <Description>"CPawn"</Description>
                  <LastState Value="00000000B0389270" RealAddress="13FFF0020"/>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>CPawn</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>438</ID>
                  <Description>"CPlayer"</Description>
                  <LastState Value="00000000BAA743D0" RealAddress="13FFF0028"/>
                  <ShowAsHex>1</ShowAsHex>
                  <VariableType>8 Bytes</VariableType>
                  <Address>CPlayer</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>441</ID>
                  <Description>"Infinite Ammo (Clip)"</Description>
                  <Options moHideChildren="1"/>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _ClipAmmo, FCPrimal.exe, 0F4CCE29C88903488B5C24 ) // Ammo Subtract Function
registersymbol( _ClipAmmo )
alloc( ClipAmmo, 128, FCPrimal.exe )
label( ClipAmmo_orig )
registersymbol( ClipAmmo_orig )

ClipAmmo:
cmp r12,[CPawn]
jne short @f
xor ecx,ecx
@@:
ClipAmmo_orig:
readmem( _ClipAmmo, 5 )
jmp _ClipAmmo+5

_ClipAmmo:
jmp ClipAmmo

// 144655FB3 - 0F4C CE               - cmovl ecx,esi
// 144655FB6 - 29 C8                 - sub eax,ecx

[DISABLE]

_ClipAmmo:
readmem( ClipAmmo_orig, 5 )

unregistersymbol( ClipAmmo_orig )
dealloc( ClipAmmo )
unregistersymbol( _ClipAmmo )
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>445</ID>
          <Description>"Stealth (visual, only against enemies)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule( _HalfStealth, FCPrimal.exe, 48895C2408574881ECE000000083B9E0000000000F29B424D0000000 )
registersymbol( _HalfStealth )

_HalfStealth:
db C3

/*
14561B560 - 48 89 5C 24 08        - mov [rsp+08],rbx
14561B565 - 57                    - push rdi
14561B566 - 48 81 EC E0000000     - sub rsp,000000E0
14561B56D - 83 B9 E0000000 00     - cmp dword ptr [rcx+000000E0],00 &lt;-
14561B574 - 0F29 B4 24 D0000000   - movaps [rsp+000000D0],xmm6
14561B57C - 41 0FB6 F8            - movzx edi,r8l
14561B580 - 0F28 F1               - movaps xmm6,xmm1
14561B583 - 48 89 CB              - mov rbx,rcx
14561B586 - 0F84 A5000000         - je 14561B631
*/

[DISABLE]

_HalfStealth:
db 48

unregistersymbol( _HalfStealth )
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>448</ID>
          <Description>"Infinite Ammo (Clip)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

// optimized: 20160312

aobscanmodule( _ClipAmmo, FCPrimal.exe, 0F4CCE29C88903488B5C24 ) // Ammo Subtract Function
registersymbol( _ClipAmmo )
alloc( ClipAmmo, 512, FCPrimal.exe )
label( ClipAmmo_orig )
registersymbol( ClipAmmo_orig )
label( CPawn )
registersymbol( CPawn )
label( Player )
registersymbol( Player )

ClipAmmo:
push rcx
mov rcx,[r12+78]
cmp byte ptr [rcx+00000A31],0
pop rcx
jne short @f
mov [CPawn],r12
push rax
mov rax,[r12+78]
mov [Player],rax
pop rax
xor ecx,ecx
@@:
ClipAmmo_orig:
readmem( _ClipAmmo, 5 )
jmp _ClipAmmo+5

CPawn:
dq 0
Player:
dq 0

_ClipAmmo:
jmp ClipAmmo

// 144655FB3 - 0F4C CE               - cmovl ecx,esi
// 144655FB6 - 29 C8                 - sub eax,ecx

[DISABLE]

_ClipAmmo:
readmem( ClipAmmo_orig, 5 )

unregistersymbol( Player )
unregistersymbol( CPawn )
unregistersymbol( ClipAmmo_orig )
dealloc( ClipAmmo )
unregistersymbol( _ClipAmmo )
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>449</ID>
              <Description>"Debug"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>0080FF</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>450</ID>
                  <Description>"CPawn"</Description>
                  <LastState Value="00000000B0389270" RealAddress="13FFF0020"/>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>CPawn</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>451</ID>
                  <Description>"Player"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>C0C0C0</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>Player</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_MainHook</Name>
      <Address> 14492BF20</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CPawn</Name>
      <Address>13FFF0020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CPlayer</Name>
      <Address>13FFF0028</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MainHook_orig</Name>
      <Address>13FFF0014</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>KeyHandlerOff</Name>
      <Address>13FFE015D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Item</Name>
      <Address>13FFE0155</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Amount</Name>
      <Address>13FFE0159</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>rTable</Name>
      <Address>13FFE0500</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <DisassemblerComments>
    <DisassemblerComment>
      <Address>"FC64.dll"+D621FD</Address>
      <Comment>&lt;---------------
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+D62223</Address>
      <Comment>&lt;-------------
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+D628B7</Address>
      <Comment>&lt;-----------
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+11D8AC8</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+1221E2A</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+1221F17</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+122EBE4</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+12732AA</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FC64.dll"+12BCE0D</Address>
      <Comment>&lt;-- enter
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FCPrimal.exe"+4737A18</Address>
      <Comment>&lt;-- max_timer acquire
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FCPrimal.exe"+4737A31</Address>
      <Comment>&lt;-- establish value for xmm0
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FCPrimal.exe"+4737A36</Address>
      <Comment>&lt;-- fill rbx+3C
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FCPrimal.exe"+4737B50</Address>
      <Comment>&lt;-- fetch rbx+3C
</Comment>
    </DisassemblerComment>
    <DisassemblerComment>
      <Address>"FCPrimal.exe"+4849A79</Address>
      <Comment>&lt;------ CPawn
</Comment>
    </DisassemblerComment>
  </DisassemblerComments>
</CheatTable>
