<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>31</ID>
      <Description>"*** If Searching by Blood Bowl 2 Type, Change Fast Scan (above) to 4 ***"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>25</ID>
      <Description>"Create New Scan Type for Blood Bowl 2"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
registerCustomTypeAutoAssembler([[
alloc(ConvertRoutine,1024)
alloc(ConvertBackRoutine,1024)
alloc(TypeName,256)
alloc(ByteSize,4)
alloc(UsesFloat,1)
TypeName:
db 'Blood Bowl 2',0
ByteSize:
dd 3
UsesFloat:
db 0
ConvertRoutine:
[64-bit]
push rdx
push rcx
mov rdx,rcx
movzx eax,byte ptr [edx+01]
movsx ecx,byte ptr [edx]
shl eax,08
shl ecx,10
or eax,ecx
movzx ecx,byte ptr [edx+02]
or eax,ecx
pop rcx
pop rdx
ret
[/64-bit]
[32-bit]
push ebp
push edx
push ecx
mov ebp,esp
mov edx,[ebp+8]
movzx eax,byte ptr [edx+01]
movsx ecx,byte ptr [edx]
shl eax,08
shl ecx,10
or eax,ecx
movzx ecx,byte ptr [edx+02]
or eax,ecx
pop ecx
pop edx
pop ebp
ret 4
[/32-bit]
ConvertBackRoutine:
[64-bit]
mov byte ptr [rdx+1],ch
mov byte ptr [rdx+2],cl
shr ecx,8
mov byte ptr [rdx],ch
ret
[/64-bit]
[32-bit]
push ebp
mov ebp,esp
push eax
push ebx
mov eax,[ebp+8]
mov ebx,[ebp+c]
mov byte ptr [ebx+1],ah
mov byte ptr [ebx+2],al
shr eax,8
mov byte ptr [ebx],ah
pop ebx
pop eax
pop ebp
ret 8
[/32-bit]
]])
assert(false)
{$asm}
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>26</ID>
      <Description>"*** Attach to BloodBowl2_DX_32.exe ***"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>008000</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"Value Pointer"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(get_value,BloodBowl2_DX_32.exe,0F BE 0A C1 E0 08)
alloc(newmem,$1000)

label(code)
label(return)
label(value_ptr)

newmem:
  cmp [value_ptr],0
  jne code
  mov [value_ptr],edx
code:
  movsx ecx,byte ptr [edx]
  shl eax,08
  jmp return

value_ptr:
  dd 0

get_value:
  jmp newmem
  nop
return:
registersymbol(get_value)
registersymbol(value_ptr)

[DISABLE]
get_value:
  db 0F BE 0A C1 E0 08
unregistersymbol(get_value)
unregistersymbol(value_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "BloodBowl2_DX_32.exe"+B9312F

"BloodBowl2_DX_32.exe"+B93113: B8 04 00 00 00        -  mov eax,00000004
"BloodBowl2_DX_32.exe"+B93118: 66 89 41 1C           -  mov [ecx+1C],ax
"BloodBowl2_DX_32.exe"+B9311C: 89 51 14              -  mov [ecx+14],edx
"BloodBowl2_DX_32.exe"+B9311F: B8 02 00 00 00        -  mov eax,00000002
"BloodBowl2_DX_32.exe"+B93124: 5E                    -  pop esi
"BloodBowl2_DX_32.exe"+B93125: 5D                    -  pop ebp
"BloodBowl2_DX_32.exe"+B93126: C3                    -  ret 
"BloodBowl2_DX_32.exe"+B93127: 8B 55 08              -  mov edx,[ebp+08]
"BloodBowl2_DX_32.exe"+B9312A: 5F                    -  pop edi
"BloodBowl2_DX_32.exe"+B9312B: 0F B6 42 01           -  movzx eax,byte ptr [edx+01]
// ---------- INJECTING HERE ----------
"BloodBowl2_DX_32.exe"+B9312F: 0F BE 0A              -  movsx ecx,byte ptr [edx]
"BloodBowl2_DX_32.exe"+B93132: C1 E0 08              -  shl eax,08
// ---------- DONE INJECTING  ----------
"BloodBowl2_DX_32.exe"+B93135: C1 E1 10              -  shl ecx,10
"BloodBowl2_DX_32.exe"+B93138: 0B C1                 -  or eax,ecx
"BloodBowl2_DX_32.exe"+B9313A: 0F B6 4A 02           -  movzx ecx,byte ptr [edx+02]
"BloodBowl2_DX_32.exe"+B9313E: 0B C1                 -  or eax,ecx
"BloodBowl2_DX_32.exe"+B93140: 8B 4D 10              -  mov ecx,[ebp+10]
"BloodBowl2_DX_32.exe"+B93143: 99                    -  cdq 
"BloodBowl2_DX_32.exe"+B93144: 89 41 10              -  mov [ecx+10],eax
"BloodBowl2_DX_32.exe"+B93147: B8 04 00 00 00        -  mov eax,00000004
"BloodBowl2_DX_32.exe"+B9314C: 66 89 41 1C           -  mov [ecx+1C],ax
"BloodBowl2_DX_32.exe"+B93150: 89 51 14              -  mov [ecx+14],edx
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>30</ID>
          <Description>"*** Reset Pointer and Immediately Open Team Roster for Gold ***"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Some Value"</Description>
          <LastState Value="" Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>Custom</VariableType>
          <CustomType>Blood Bowl 2</CustomType>
          <Address>value_ptr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Reset Pointer"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
value_ptr:
dd 0
[DISABLE]
value_ptr:
dd 0
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>35</ID>
      <Description>"Character Pointers"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(vars,BloodBowl2_DX_32.exe,0F BE 00 99 89 41 10)
alloc(newmem,$1000)

label(code)
label(return)
label(vars_ptr)

newmem:
  cmp edi,A
  jne code
  mov [vars_ptr],eax
  lea eax,[eax]
code:
  movsx eax,byte ptr [eax]
  cdq 
  mov [ecx+10],eax
  jmp return

vars_ptr:
  dd 0

vars:
  jmp newmem
  nop
  nop
return:
registersymbol(vars)
registersymbol(vars_ptr)

[DISABLE]
vars:
  db 0F BE 00 99 89 41 10
unregistersymbol(vars)
unregistersymbol(vars_ptr)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "BloodBowl2_DX_32.exe"+B930E0

"BloodBowl2_DX_32.exe"+B930C8: 8B 45 10              -  mov eax,[ebp+10]
"BloodBowl2_DX_32.exe"+B930CB: B9 01 00 00 00        -  mov ecx,00000001
"BloodBowl2_DX_32.exe"+B930D0: 5F                    -  pop edi
"BloodBowl2_DX_32.exe"+B930D1: 66 89 48 1C           -  mov [eax+1C],cx
"BloodBowl2_DX_32.exe"+B930D5: 33 C0                 -  xor eax,eax
"BloodBowl2_DX_32.exe"+B930D7: 5E                    -  pop esi
"BloodBowl2_DX_32.exe"+B930D8: 5D                    -  pop ebp
"BloodBowl2_DX_32.exe"+B930D9: C3                    -  ret 
"BloodBowl2_DX_32.exe"+B930DA: 8B 45 08              -  mov eax,[ebp+08]
"BloodBowl2_DX_32.exe"+B930DD: 8B 4D 10              -  mov ecx,[ebp+10]
// ---------- INJECTING HERE ----------
"BloodBowl2_DX_32.exe"+B930E0: 0F BE 00              -  movsx eax,byte ptr [eax]
"BloodBowl2_DX_32.exe"+B930E3: 99                    -  cdq 
"BloodBowl2_DX_32.exe"+B930E4: 89 41 10              -  mov [ecx+10],eax
// ---------- DONE INJECTING  ----------
"BloodBowl2_DX_32.exe"+B930E7: B8 04 00 00 00        -  mov eax,00000004
"BloodBowl2_DX_32.exe"+B930EC: 5F                    -  pop edi
"BloodBowl2_DX_32.exe"+B930ED: 66 89 41 1C           -  mov [ecx+1C],ax
"BloodBowl2_DX_32.exe"+B930F1: 89 51 14              -  mov [ecx+14],edx
"BloodBowl2_DX_32.exe"+B930F4: B8 01 00 00 00        -  mov eax,00000001
"BloodBowl2_DX_32.exe"+B930F9: 5E                    -  pop esi
"BloodBowl2_DX_32.exe"+B930FA: 5D                    -  pop ebp
"BloodBowl2_DX_32.exe"+B930FB: C3                    -  ret 
"BloodBowl2_DX_32.exe"+B930FC: 8B 4D 08              -  mov ecx,[ebp+08]
"BloodBowl2_DX_32.exe"+B930FF: 5F                    -  pop edi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Base Address"</Description>
          <LastState Activated="0" RealAddress="00000000"/>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>0</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>vars_ptr</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>10</ID>
              <Description>"Movement"</Description>
              <LastState Value="??" Activated="0" RealAddress="FFFFFFFFFFFFFFFD"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>-3</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>36</ID>
              <Description>"Strength"</Description>
              <LastState Value="??" Activated="0" RealAddress="FFFFFFFFFFFFFFFE"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>-2</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>37</ID>
              <Description>"Agility"</Description>
              <LastState Value="??" Activated="0" RealAddress="FFFFFFFFFFFFFFFF"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>-1</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>38</ID>
              <Description>"Movement"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>+0</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>14</ID>
              <Description>"Unit Type"</Description>
              <LastState Value="??" Activated="0" RealAddress="FFFFFFFFFFFFFFF8"/>
              <Color>80000008</Color>
              <VariableType>Byte</VariableType>
              <Address>-8</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>get_value</Name>
      <Address>0106312F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>value_ptr</Name>
      <Address>03D6001E</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
