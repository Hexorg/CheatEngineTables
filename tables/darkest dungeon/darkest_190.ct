<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>1235</ID>
      <Description>"QuirkFlipper (Hover mouse on Quirk, CTRL/ALT to toggle on/off)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(aobQuirkReinforceTicker1,Darkest.exe,5B 8A 44 88 1A 5D C2 04 00)
aobscanmodule(aobQuirkReinforceTicker2,Darkest.exe,2B CE C6 44 88 19 00 5F 5E 5D C2 04 00)

alloc(newmem,4096)

label(aobQuirkReinforceTicker1_r)
label(aobQuirkReinforceTicker2_r)
registersymbol(aobQuirkReinforceTicker1_r)
registersymbol(aobQuirkReinforceTicker2_r)

label(lblQuirkReinforceTicker1)
label(lblQuirkReinforceTicker1Skip)
label(lblQuirkReinforceTicker1Ret)
label(lblQuirkReinforceTicker1SwitchOn)
label(lblQuirkReinforceTicker1SwitchOff)

label(lblQuirkReinforceTicker2)
label(lblQuirkReinforceTicker2Skip)
label(lblQuirkReinforceTicker2Ret)

label(pQuirkPtr)
label(pQuirkID)
registersymbol(pQuirkPtr)
registersymbol(pQuirkID)

newmem:
lblQuirkReinforceTicker1:
cmp dword ptr [pQuirkPtr],eax
jne short lblQuirkReinforceTicker1Skip
cmp dword ptr [pQuirkID],ecx
jne short lblQuirkReinforceTicker1Skip
pushad
push 11 // CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je short lblQuirkReinforceTicker1SwitchOn
pushad
push 12 // ALT key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je short lblQuirkReinforceTicker1SwitchOff
lblQuirkReinforceTicker1Skip:
//pop ebx
//mov al,[eax+ecx*4+1A]
db 5B 8A 44 88 1A
jmp lblQuirkReinforceTicker1Ret
lblQuirkReinforceTicker1SwitchOn:
mov byte ptr [eax+ecx*4+1A],1
jmp short lblQuirkReinforceTicker1Skip
lblQuirkReinforceTicker1SwitchOff:
mov byte ptr [eax+ecx*4+1A],0
jmp short lblQuirkReinforceTicker1Skip

lblQuirkReinforceTicker2:
//sub ecx,esi                    // Original code
//mov byte ptr [eax+ecx*4+19],00 // Original code
db 2B CE C6 44 88 19 00
mov dword ptr [pQuirkPtr],eax
mov dword ptr [pQuirkID],ecx
lblQuirkReinforceTicker2Skip:
jmp lblQuirkReinforceTicker2Ret
pQuirkPtr:
dd 0
pQuirkID:
dd 0

//"Darkest.exe"+9F2E14:
aobQuirkReinforceTicker1:
aobQuirkReinforceTicker1_r:
jmp lblQuirkReinforceTicker1
lblQuirkReinforceTicker1Ret:

//"Darkest.exe"+9F2D1D:
aobQuirkReinforceTicker2:
aobQuirkReinforceTicker2_r:
jmp lblQuirkReinforceTicker2
nop
nop
lblQuirkReinforceTicker2Ret:

[DISABLE]
aobQuirkReinforceTicker1_r:
//"Darkest.exe"+9F2E14:
//Alt: pop ebx
//Alt: mov al,[eax+ecx*4+1A]
db 5B 8A 44 88 1A

aobQuirkReinforceTicker2_r:
//"Darkest.exe"+9F2D1D:
//Alt: sub ecx,esi
//Alt: mov byte ptr [eax+ecx*4+19],00
db 2B CE C6 44 88 19 00

unregistersymbol(pQuirkPtr)
unregistersymbol(pQuirkID)

dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1241</ID>
      <Description>"ResolveChecker (CTRL+ALT to set to 1 and hold until started)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(aobResolveEvalTicker,Darkest.exe,8B 89 F8 09 00 00 90 3B 0A 72 ?? 8B F8)

alloc(newmem,4096)

label(aobResolveEvalTicker_r)
registersymbol(aobResolveEvalTicker_r)

label(lblResolveEvalTicker)
label(lblResolveEvalTickerSkip)
label(lblResolveEvalTickerRet)

newmem:

lblResolveEvalTicker:
// mov ecx,[ecx+000009F8] // Original code
db 8B 89 F8 09 00 00
pushad
push 11 // CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblResolveEvalTickerSkip
pushad
push 12 // ALT key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblResolveEvalTickerSkip
mov ecx,1
lblResolveEvalTickerSkip:
jmp lblResolveEvalTickerRet

//"Darkest.exe"+886DA9:
aobResolveEvalTicker:
aobResolveEvalTicker_r:
jmp lblResolveEvalTicker
nop
lblResolveEvalTickerRet:

[DISABLE]
aobResolveEvalTicker_r:
//"Darkest.exe"+886DA9:
//Alt: mov ecx,[ecx+000009F8]
db 8B 89 F8 09 00 00

unregistersymbol(aobResolveEvalTicker_r)

dealloc(newmem)

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
