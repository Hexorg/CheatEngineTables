<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="12">
  <CheatEntries>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Undead"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pHealth,4)
aobscan(AOB1,89 5C BE 14 8B 16 8B 82 04 01 00 00 57 8B CE FF D0)
label(AOB1_jmp)
registersymbol(AOB1_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [esp+30],DoDamage+339
jne originalcode
push ecx
lea ecx,[esi+edi*4+14]
mov [pHealth],ecx
pop ecx
cmp ebx,1
jge originalcode
mov ebx,1

originalcode:
mov [esi+edi*4+14],ebx
mov edx,[esi]

exit:
jmp returnhere

///
pHealth:
dd 0
///

AOB1:                                   //"Risen2.exe"+142B5A:
AOB1_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB1_jmp:                               //"Risen2.exe"+142B5A:
db 89 5C BE 14 8B 16
//Alt: mov [esi+edi*4+14],ebx
//Alt: mov edx,[esi]
dealloc(pHealth)
unregistersymbol(AOB1_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pHealth</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Inf. Bullet"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
globalalloc(pBullet,4)
alloc(tEcx,4)
aobscan(AOB2,85 C0 0F 9C C2 8D 5E 08 8B CB 4A 23 C2 89 46 28)
label(AOB2_jmp)
registersymbol(AOB2_jmp)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
dec edx
and eax,edx

mov [tEcx],ecx
mov ecx,[esp+18]
sub ecx,esp
cmp ecx,00000034
mov ecx,[tEcx]
jne originalcode

mov [tEcx],ecx
mov ecx,[esp+28]
sub ecx,[esp+2C]
cmp ecx,00000024
mov ecx,[tEcx]
jne originalcode

mov [pBullet],esi
cmp eax,00000005
jge originalcode
mov eax,00000005

originalcode:
//dec edx
//and eax,edx
mov [esi+28],eax

exit:
jmp returnhere

///
pBullet:
dd 0
tEcx:
dd 0
///

AOB2+A:                                      //"Risen2.exe"+1988E1:
AOB2_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
AOB2_jmp:                                    //"Risen2.exe"+1988E1:
db 4A 23 C2 89 46 28
//Alt: dec edx
//Alt: and eax,edx
//Alt: mov [esi+28],eax
dealloc(pBullet)
dealloc(tEcx)
unregistersymbol(AOB2_jmp)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Bullet"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pBullet</Address>
          <Offsets>
            <Offset>28</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
