<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>90</ID>
      <Description>"[X] &lt;== Rome II Total War v1.00-6858 RLD Script 1.3"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Rome II Total War
 Game Version  : 1.00 (6858)
 Game Sponsor  : RELOADED
 Proces Name   : Rome2.exe
 Script Version: 1.2
 CE Version    : 6.3
 Release date  : 09-Sep-2013
 Author        : Recifense
 History:
 08-Sep-13: First Release
 09-Sep-13: Fixed an issue related to GM and a possible crash
 09-Sep-13: Release for version 6858
 Features:
 - Minimum Money
 - Unlimited Action Points
   - Agent
   - Troop
   - Army Commander
 - Recover Troop Size on Move
 - Blessed Units:
   - Cunning   (20)
   - Zeal      (20)
   - Authority (20)
   - Ambition  (30)
   - Gravitas  (63)
 - Province Minimum PO (63)
 - Mercenaries Available
 - Unit Can Act again:
   - Agent
   - Army Commander
 - Army Reinforcement in 1 Turn
 - Province Growth in 1 turn
 - Province Minimum PS (10)
 - God Mode:
   - Ground Battle
   - Sea Battle
 - Unlimited Ammo
 - Research in 1 Turn
 - pointers
===========================================
}


//=========================================
// Definitions
define(LUDO,"Rome2.exe")
define(MMMY,Rome2.dll+007bc7a0)
define(MSCR,Rome2.dll+001798c2)
define(MAPC,Rome2.dll+0022ce4a)
define(MAPT,Rome2.dll+00d606a7)
define(MAPA,Rome2.dll+0079ed17)
define(MSPE,Rome2.dll+0099f2a1)
define(MPPO,Rome2.dll+001212df)
define(MMCA,Rome2.dll+00d55e93)
define(MAAP,Rome2.dll+00c8d670)
define(MART,Rome2.dll+005ce421)
define(MTAN,Rome2.dll+00b276ff)
define(MCAP,Rome2.dll+00d2485e)
define(MPGH,Rome2.dll+00dfb3e2)
define(MPPS,Rome2.dll+0047a468)
define(MSTP,Rome2.dll+00eed6b7)
define(GDMD,Rome2.dll+00a80140)
define(GDM1,Rome2.dll+00252b90)
define(MOAM,Rome2.dll+00d6fec0)
define(GDMS,Rome2.dll+00b4c941)
define(MBUN,Rome2.dll+0072e5c6)
define(GDM2,Rome2.dll+00772a50)
define(MTSZ,Rome2.dll+00ad140f)
define(MTAP,Rome2.dll+00692410)
define(MTA1,Rome2.dll+00d606b0)
define(MSSZ,Rome2.dll+0046ef6e)
define(MRPS,Rome2.dll+00d7f015)

define(RPPS,Rome2.dll+000e92ba) // Surplus

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MMMY,8b 81 0c 05 00 00 c3 cc cc cc ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??)
assert(MSCR,8b 82 d0 05 00 00 6a 40 8d 4d e8 89 45 f8 e8 ?? ?? ?? ?? 8d 4d)
assert(MAPC,89 46 1c 5e 5d c2 04 00 57 8b ce e8 ?? ?? ?? ?? 5f 5e 5d c2 04)
assert(MAPT,2b c2 89 41 74 5d c2 04 00 c7 41 74 00 00 00 00 5d c2 04 00 ??)
assert(MAPA,2b c2 89 41 1c 5d c2 04 00 c7 41 1c 00 00 00 00 5d c2 04 00 ??)
assert(MSPE,8b 45 e0 2b 46 28 89 07 0f 89 ?? ?? ?? ?? 8b 56 28 2b 56 30 0f)
assert(MPPO,89 56 0c 8b 4e 14 8b c2 3b c1 ?? ?? 8b 4e 10 3b c8 ?? ?? 89 4e)
assert(MMCA,8b 46 04 85 c0 ?? ?? 8b 4d 10 39 41 08 ?? ?? 83 cf 01 8b 4d f8)
assert(MAAP,c7 41 1c 00 00 00 00 c7 81 ac 00 00 00 ff ff ff ff c3 ?? ?? ??)
assert(MART,03 47 34 5f 5e 5d c2 04 00 83 c8 ff 5f 5e 5d c2 04 00 ?? ?? ??)
assert(MTAN,89 4e 54 8b 46 48 85 c0 ?? ?? 8b 00 85 c0 ?? ?? 8b 00 8b 80 88)
assert(MCAP,f3 0f 11 86 b0 00 00 00 e8 ?? ?? ?? ?? 5e 8b e5 5d c2 04 00 ??)
assert(MPGH,8b f8 39 7e 08 ?? ?? 8d a4 24 00 00 00 00 8b ce e8 ?? ?? ?? ??)
assert(MPPS,8b f1 8b 46 04 89 45 fc 8b 06 8b 98 98 00 00 00 8b 88 94 00 00)
assert(MSTP,89 be 40 09 00 00 8b 86 1c 09 00 00 3b 86 28 09 00 00 ?? ?? 84)
assert(GDMD,55 8b ec 53 56 8b 75 08 8b 86 4c 02 00 00 8b 40 0c 48 8b d9 83)
assert(GDM1,55 8b ec 83 ec 5c 53 56 8b f1 8b 8e 50 02 00 00 57 33 ff 3b cf)
assert(MOAM,f3 0f 5c c1 0f 2f c8 f3 0f 11 86 ac 0f 00 00 0f 86 ?? ?? ?? ??)
assert(GDMS,8b be f0 06 00 00 3b f8 ?? ?? 2b f8 89 be f0 06 00 00 5f 5e 5b)
assert(MBUN,8b 96 ec 06 00 00 db 86 ec 06 00 00 85 d2 ?? ?? d8 05 ?? ?? ??)
assert(GDM2,89 8e f0 06 00 00 89 be 1c 0b 00 00 39 9e 1c 0b 00 00 ?? ?? 38)
assert(MTSZ,89 4e 54 8b 50 78 8a 48 7c f3 0f 10 80 80 00 00 00 89 55 f4 8d)
assert(MTAP,c7 81 44 01 00 00 ff ff ff ff c7 41 74 00 00 00 00 c3 cc cc cc)
assert(MTA1,c7 41 74 00 00 00 00 5d c2 04 00 cc cc cc ?? ?? ?? ?? ?? ?? ??)
assert(MSSZ,89 46 54 8b 56 28 8b 52 08 8d 4e 28 8d 45 08 50 89 75 08 ff d2)
assert(MRPS,03 d0 3b 51 1c ?? ?? 8b 76 1c 01 46 08 5b 5f 5e 8b e5 5d c2 08)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonMinimumMoney)
label(_MonMM00)
label(_BackMMM)
label(_ExitMMM)
label(_MonSelCommander)
label(_BackMSC)
label(_ExitMSC)
label(_MonActionPointsC)
label(_BackMAC)
label(_ExitMAC)
label(_MonActionPointsT)
label(_MonAT00)
label(_BackMAT)
label(_ExitMAT)
label(_MonActionPointsA)
label(_BackMAA)
label(_ExitMAA)
label(_MonSelProvince)
label(_BackMSP)
label(_ExitMSP)
label(_MonProvincePO)
label(_BackMPP)
label(_ExitMPP)
label(_MonMercAvail)
label(_BackMMA)
label(_ExitMMA)
label(_MonAgentAP)
label(_BackAAP)
label(_ExitAAP)
label(_MonArmyReinf)
label(_BackMAR)
label(_ExitMAR)
label(_MonTroopAttrition)
label(_BackMTA)
label(_ExitMTA)
label(_MonCommanderAP)
label(_BackCAP)
label(_ExitCAP)
label(_MonProvinceGrowth)
label(_BackMPG)
label(_ExitMPG)
label(_MonProvPopSurplus)
label(_BackPPS)
label(_ExitPPS)
label(_MonSelTroop)
label(_BackMST)
label(_ExitMST)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonAmmo)
label(_BackMAM)
label(_ExitMAM)
label(_GodModeS)
label(_BackGMS)
label(_ExitGMS)
label(_MonBattleUnits)
label(_BackMBU)
label(_ExitMBU)
label(_GodMode2)
label(_BackGM2)
label(_ExitGM2)
label(_MonTroopSize)
label(_BackMTS)
label(_ExitMTS)
label(_MonTroopAP)
label(_BackTAP)
label(_ExitTAP)
label(_MonTroopAP1)
label(_BackTA1)
label(_ExitTA1)
label(_MonShipSize)
label(_BackMSS)
label(_ExitMSS)
label(_MonResProgress)
label(_BackMRP)
label(_ExitMRP)
label(pMoney)
label(pPlayer)
label(pCommander)
label(pProvince)
label(pTroop)
label(pCommon)
label(iEnableMMM)
label(iEnableMAP)
label(iEnableMTS)
label(iEnableMBU)
label(iEnableMPP)
label(iEnableMMA)
label(iEnableMAA)
label(iEnableMAR)
label(iEnableMTA)
label(iEnableMPG)
label(iEnablePPS)
label(iEnableGMD)
label(iEnableMAM)
label(iEnableMRP)
label(iMinMoney)
label(iCount0)
label(iCount1)
label(iCount2)
label(iCount3)
label(iCount4)
label(pUnit)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(pMoney)
registersymbol(pPlayer)
registersymbol(pCommander)
registersymbol(pProvince)
registersymbol(pTroop)
registersymbol(pCommon)
registersymbol(pUnit)
registersymbol(iEnableMMM)
registersymbol(iEnableMAP)
registersymbol(iEnableMTS)
registersymbol(iEnableMBU)
registersymbol(iEnableMPP)
registersymbol(iEnableMMA)
registersymbol(iEnableMAA)
registersymbol(iEnableMAR)
registersymbol(iEnableMTA)
registersymbol(iEnableMPG)
registersymbol(iEnablePPS)
registersymbol(iEnableGMD)
registersymbol(iEnableMAM)
registersymbol(iEnableMRP)
registersymbol(iMinMoney)
registersymbol(iCount0)
registersymbol(iCount1)
registersymbol(iCount2)
registersymbol(iCount3)
registersymbol(iCount4)

//=========================================
MyCode:
//=========================================
// TBS
_MonMinimumMoney:
 mov [pMoney],ecx

 mov eax,[ecx+00000510]
 mov eax,[eax+00000098]
 test eax,eax
 jz _MonMM00

 mov eax,[ecx+00000510]
 cmp eax,[pPlayer]
 je _MonMM00

 mov [pPlayer],eax

_MonMM00:
 mov eax,[ecx+00000510]
 cmp eax,[pPlayer]
 jne _ExitMMM

 cmp dword ptr [iEnableMMM],0
 je _ExitMMM                       // Jump if feature is disabled

 mov eax,[iMinMoney]
 cmp eax,[ecx+0000050C]
 js _ExitMMM

 mov [ecx+0000050C],eax

_ExitMMM:
 mov eax,[ecx+0000050C]            // Original code (rds money)
 jmp _BackMMM                      // Back to main code

//=========================================
// TBS
_MonSelCommander:
 push ebx

 mov [pCommander],edx

 mov eax,[edx+00000258]
 test eax,eax
 jz _ExitMSC

 mov eax,[eax]
 cmp eax,[pPlayer]
 jne _ExitMSC

 cmp dword ptr [iEnableMBU],0
 je _ExitMSC                       // Jump if feature is disabled

 mov eax,#20
// Cunning
 mov ebx,[edx+000003d0]
 cmp ebx,eax
 cmovs ebx,eax
 mov [edx+000003d0],ebx
 mov [edx+00000608],ebx
// Zeal
 mov ebx,[edx+000003d4]
 cmp ebx,eax
 cmovs ebx,eax
 mov [edx+000003d4],ebx
 mov [edx+0000060c],ebx
// Authority
 mov ebx,[edx+000003d8]
 cmp ebx,eax
 cmovs ebx,eax
 mov [edx+000003d8],ebx
 mov [edx+00000610],ebx

 mov eax,#30
 // Ambition
 mov ebx,[edx+000005cc]
 cmp ebx,eax
 cmovs ebx,eax
 mov [edx+000005cc],ebx

 mov eax,#63
 // Gravitas
 mov ebx,[edx+000005d0]
 cmp ebx,eax
 cmovs ebx,eax
 mov [edx+000005d0],ebx

_ExitMSC:
 pop ebx

 mov eax,[edx+000005D0]            // Original code (rds Gravitas)
 jmp _BackMSC                      // Back to main code

//=========================================
// TBS (Commander)
_MonActionPointsC:
 push ecx

 mov ecx,[esi+00000258]
 test ecx,ecx
 jz _ExitMAC

 mov ecx,[ecx]
 cmp ecx,[pPlayer]
 jne _ExitMAC

 cmp dword ptr [iEnableMAP],0
 je _ExitMAC                       // Jump if feature is disabled

 cmp eax,[esi+1C]
 js _ExitMAC

 mov eax,[esi+1C]

_ExitMAC:
 pop ecx

 mov [esi+1C],eax                  // Original code (upds AP)
 pop esi                           // Original code
 pop ebp                           // Original code
 jmp _BackMAC                      // Back to main code

//=========================================
// TBS (Troops)
_MonActionPointsT:
 push ebx

 mov ebx,[ecx+4c]
 cmp ebx,[pPlayer]
 jne _ExitMAT

 cmp dword ptr [iEnableMTS],0
 je _MonAT00                       // Jump if feature is disabled

 mov ebx,[ecx+58]
 mov [ecx+54],ebx

_MonAT00:
 cmp dword ptr [iEnableMAP],0
 je _ExitMAT                       // Jump if feature is disabled

 mov eax,[ecx+74]
 mov [ecx+00000144],eax
 xor edx,edx

_ExitMAT:
 pop ebx

 sub eax,edx                       // Original code
 mov [ecx+74],eax                  // Original code (upds AP)
 jmp _BackMAT                      // Back to main code

//=========================================
// TBS (Agents)
_MonActionPointsA:
 push ebx

 mov ebx,[ecx+00000258]
 test ebx,ebx
 jz _ExitMAA

 mov ebx,[ebx]
 cmp ebx,[pPlayer]
 jne _ExitMAA

 cmp dword ptr [iEnableMAP],0
 je _ExitMAA                       // Jump if feature is disabled

 mov eax,[ecx+1c]
 xor edx,edx

_ExitMAA:
 pop ebx

 sub eax,edx                       // Original code
 mov [ecx+1c],eax                  // Original code (upds AP)
 jmp _BackMAA                      // Back to main code

//=========================================
// TBS - Public Order undercursor on province detail
_MonSelProvince:
 mov eax,[esi]

 mov [pProvince],eax

_ExitMSP:
 mov eax,[ebp-20]                  // Original code
 sub eax,[esi+28]                  // Original code (rds PO)
 jmp _BackMSP                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonProvincePO:
 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 mov ecx,[edi]                     // Get pProvince
 test ecx,ecx
 jz _ExitMPP

 mov ecx,[ecx+00000080]            // Get ppPlayer
 test ecx,ecx
 jz _ExitMPP

 mov ecx,[ecx]                     // Get pPlayer
 cmp ecx,[pPlayer]
 jne _ExitMPP

 mov ecx,#63                       // Minimum PO value
 cmp edx,ecx
 cmovs edx,ecx

_ExitMPP:
 mov [esi+0C],edx                  // Original code (upd PO)
 mov ecx,[esi+14]                  // Original code
 jmp _BackMPP                      // Back to main code

//=========================================
// TBS - Mercenaries available to player's commander
_MonMercAvail:
 test ebx,ebx                      // Is there a commander?
 jz _ExitMMA

 mov eax,[ebx+00000258]            // Get pOwner
 test eax,eax
 jz _ExitMMA

 mov eax,[eax]                     // Get player
 cmp eax,[pPlayer]
 jne _ExitMMA

 cmp dword ptr [iEnableMMA],0
 je _ExitMMA                       // Jump if feature is disabled

 mov eax,[esi+0c]
 cmp eax,[esi+04]
 js _ExitMMA

 mov [esi+04],eax

_ExitMMA:
 mov eax,[esi+04]                  // Original code (rd MA)
 test eax,eax                      // Original code
 jmp _BackMMA                      // Back to main code

//=========================================
// TBS - Agent can act again
_MonAgentAP:
 push eax

 mov eax,[ecx+00000258]            // Get pOwner
 test eax,eax
 jz _ExitAAP

 mov eax,[eax]                     // Get player
 cmp eax,[pPlayer]
 jne _ExitAAP

 cmp dword ptr [iEnableMAA],0
 je _ExitAAP                       // Jump if feature is disabled

 mov eax,[ecx+18]
 mov [ecx+1C],eax
 mov [ecx+000000AC],eax
 mov byte ptr [ecx+00000638],00

 pop eax
 ret
//====
_ExitAAP:
 pop eax

 mov [ecx+1C],00000000             // Original code (AP = 0)
 jmp _BackAAP                      // Back to main code

//=========================================
// TBS - When Reinforcing
_MonArmyReinf:
 cmp dword ptr [iEnableMAR],0
 je _ExitMAR                       // Jump if feature is disabled

 mov esi,[edi+30]                  // Get ppArmy
 test esi,esi
 jz _ExitMAR

 mov esi,[esi]                     // Get pArmy
 test esi,esi
 jz _ExitMAR

 mov esi,[esi]                     // Get Army
 test esi,esi
 jz _ExitMAR

 mov esi,[esi+000000bc]            // Get pOwner
 test esi,esi
 jz _ExitMAR

 mov esi,[esi]                     // Get player
 cmp esi,[pPlayer]
 jne _ExitMAR

 mov dword ptr [edi+34],1          // One turn

_ExitMAR:
 add eax,[edi+34]                  // Original code (rd #Turns)
 pop edi                           // Original code
 pop esi                           // Original code
 jmp _BackMAR                      // Back to main code

//=========================================
// TBS During Turn
_MonTroopAttrition:
 mov eax,[esi+4c]
 cmp eax,[pPlayer]
 jne _ExitMTA

 cmp dword ptr [iEnableMTA],0
 je _ExitMTA                       // Jump if feature is disabled

 mov ecx,[esi+58]

_ExitMTA:
 mov [esi+54],ecx                  // Original code (upds TS)
 mov eax,[esi+48]                  // Original code
 jmp _BackMTA                      // Back to main code

//=========================================
// TBS - Commander can act again
_MonCommanderAP:
 push eax

 cmp dword ptr [iEnableMAA],0
 je _ExitCAP                       // Jump if feature is disabled

 mov eax,[esi+00000258]            // Get pOwner
 test eax,eax
 jz _ExitCAP

 mov eax,[eax]                     // Get player
 cmp eax,[pPlayer]
 jne _ExitCAP

 mov eax,[esi+1C]
 mov [esi+000000AC],eax

_ExitCAP:
 pop eax

 movss [esi+000000B0],xmm0         // Original code
 jmp _BackCAP                      // Back to main code

//=========================================
// TBS - During Turn changing
_MonProvinceGrowth:
 push ebx

 cmp dword ptr [iEnableMPG],0
 je _ExitMPG                       // Jump if feature is disabled

 mov ebx,[esi]                     // Get pProvince
 test ebx,ebx
 jz _ExitMPG

 mov ebx,[ebx+00000080]            // Get pPlayer
 test ebx,ebx
 jz _ExitMPG

 mov ebx,[ebx]                     // Get player
 cmp ebx,[pPlayer]
 jne _ExitMPG

 mov [esi+08],eax

_ExitMPG:
 pop ebx

 mov edi,eax                       // Original code
 cmp [esi+08],edi                  // Original code (rd growth)
 jmp _BackMPG                      // Back to main code

//========================================= s1.3
// TBS - When Growth Undercursor
_MonProvPopSurplus:
 push ebx

 mov esi,ecx                       // Original code

 mov ebx,[ebp+04]
 cmp ebx,RPPS
 jne _ExitPPS

 mov ebx,[esi]                     // Get pProvince
 test ebx,ebx
 jz _ExitPPS

 mov [pProvince],ebx

 cmp dword ptr [iEnablePPS],0
 je _ExitPPS                       // Jump if feature is disabled

 mov ebx,[ebx+00000080]            // Get pPlayer
 test ebx,ebx
 jz _ExitPPS

 mov ebx,[ebx]                     // Get player
 cmp ebx,[pPlayer]
 jne _ExitPPS

 mov eax,#10
 cmp eax,[esi+04]
 js _ExitPPS

 mov [esi+04],eax

_ExitPPS:
 pop ebx

 mov eax,[esi+04]                  // Original code (rd Pop Surplus)
 jmp _BackPPS                      // Back to main code

//=========================================
// RTS - Selected Troop
_MonSelTroop:
 push eax

 mov [pTroop],edi

 test edi,edi
 jz _ExitMST

 cmp byte ptr [edi+000000e4],01
 jne _ExitMST

 mov eax,[edi+000000cc]
 test eax,eax
 jz _ExitMST

 mov eax,[eax+30]

 mov [pCommon],eax

_ExitMST:
 pop eax

 mov [esi+00000940],edi            // Original code
 jmp _BackMST                      // Back to main code

//=========================================
// RTS - During Battle (Horses)
_GodMode:
 push ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ecx,[esp+08]

 inc dword ptr [iCount0]

 mov ecx,[ecx+00000254]
 test ecx,ecx
 jz _ExitGMD

 dec dword ptr [iCount0]

 mov ecx,[ecx+30]
 cmp ecx,[pCommon]
 jne _ExitGMD

 pop ecx
 ret 0004
//==
_ExitGMD:
 pop ecx

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 push ebx                          // Original code
 push esi                          // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
// RTS - During Battle (Soldiers)
// ECX = TroopIndex
_GodMode1:
 push eax

 mov [pUnit],ecx

 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 inc dword ptr [iCount1]

 mov eax,[ecx+00000254]
 test eax,eax
 jz _ExitGM1

 dec dword ptr [iCount1]

 mov eax,[eax+30]
 cmp eax,[pCommon]
 jne _ExitGM1

 pop eax
 ret 0004
//==
_ExitGM1:
 pop eax

 push ebp                          // Original code
 mov ebp,esp                       // Original code
 sub esp,5C                        // Original code
 jmp _BackGM1                      // Back to main code

//=========================================
// RTS - During Battle
// ESI = Troop_Index
_MonAmmo:
 push ecx

 cmp dword ptr [iEnableMAM],0
 je _ExitMAM                       // Jump if feature is disabled

 mov ecx,[esi+30]
 cmp ecx,[pCommon]
 jne _ExitMAM

 cvtsi2ss xmm0,[esi+00000fb0]
 xorps xmm1,xmm1

_ExitMAM:
 pop ecx

 subss xmm0,xmm1                   // Original code
 comiss xmm1,xmm0                  // Original code
 jmp _BackMAM                      // Back to main code

//=========================================
// RTS - During Battle (Ship)
// ESI = Ship
_GodModeS:
 push ebx

 cmp dword ptr [iEnableGMD],0
 je _ExitGMS                       // Jump if feature is disabled

 inc dword ptr [iCount2]

 mov edi,[esi+00000254]
 test edi,edi
 jz _ExitGMS

 dec dword ptr [iCount2]

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGMS

 mov edi,#63000
 mov ebx,[esi+000006EC]
 cmp ebx,edi
 cmovs ebx,edi

 mov [esi+000006EC],ebx
 mov [esi+000006F0],ebx
 xor eax,eax

_ExitGMS:
 pop ebx

 mov edi,[esi+000006F0]            // Original code (rd cHP)
 jmp _BackGMS                      // Back to main code

//=========================================
// RTS - During Battle
// ESI = UNIT
_MonBattleUnits:
 push ebx

 mov [pUnit],esi

 cmp dword ptr [iEnableGMD],0
 je _ExitMBU                       // Jump if feature is disabled

 inc dword ptr [iCount3]

 mov edx,[esi+00000254]
 test edx,edx
 jz _ExitMBU

 dec dword ptr [iCount3]

 mov edx,[edx+30]
 cmp edx,[pCommon]
 jne _ExitMBU

 mov edx,#63000
 mov ebx,[esi+000006EC]
 cmp ebx,edx
 cmovs ebx,edx

 mov [esi+000006EC],ebx
 mov [esi+000006F0],ebx

_ExitMBU:
 pop ebx

 mov edx,[esi+000006EC]            // Original code
 jmp _BackMBU                      // Back to main code

//=========================================
// RTS - During Battle (Unit on Fire)
// ESI = UNIT
_GodMode2:
 push ebx
 push edi

 cmp dword ptr [iEnableGMD],0
 je _ExitGM2                       // Jump if feature is disabled

 inc dword ptr [iCount4]

 mov edi,[esi+00000254]
 test edi,edi
 jz _ExitGM2

 dec dword ptr [iCount4]

 mov edi,[edi+30]
 cmp edi,[pCommon]
 jne _ExitGM2

 mov edi,#63000
 mov ebx,[esi+000006EC]
 cmp ebx,edi
 cmovs ebx,edi

 mov [esi+000006EC],ebx
 mov ecx,ebx

_ExitGM2:
 pop edi
 pop ebx

 mov [esi+000006F0],ecx            // Original code (upd cHP)
 jmp _BackGM2                      // Back to main code

//=========================================
// TBS (After a battle)
_MonTroopSize:
 push ebx

 mov ebx,[esi+4c]
 cmp ebx,[pPlayer]
 jne _ExitMTS

 cmp dword ptr [iEnableMTS],0
 je _ExitMTS                       // Jump if feature is disabled

 mov ecx,[esi+58]

_ExitMTS:
 pop ebx

 mov [esi+54],ecx                  // Original code (upds size)
 mov edx,[eax+78]                  // Original code
 jmp _BackMTS                      // Back to main code

//=========================================
// TBS (After a battle)
_MonTroopAP:
 push ebx

 mov ebx,[ecx+4c]
 cmp ebx,[pPlayer]
 jne _ExitTAP

 cmp dword ptr [iEnableMAP],0
 je _ExitTAP                       // Jump if feature is disabled

 mov ebx,[ecx+74]
 mov [ecx+00000144],ebx

 pop ebx
 ret
//==
_ExitTAP:
 pop ebx

 mov [ecx+00000144],FFFFFFFF       // Original code
 jmp _BackTAP                      // Back to main code

 //=========================================
// TBS (After a battle)
_MonTroopAP1:
 push ebx

 mov ebx,[ecx+4c]
 cmp ebx,[pPlayer]
 jne _ExitTA1

 cmp dword ptr [iEnableMAP],0
 je _ExitTA1                       // Jump if feature is disabled

 mov ebx,[ecx+74]
 mov [ecx+00000144],ebx

 pop ebx

 pop ebp
 ret 0004
//==
_ExitTA1:
 pop ebx

 mov [ecx+74],00000000             // Original code
 jmp _BackTA1                      // Back to main code

//=========================================
// TBS (at open sea)(in fact #sailors)
_MonShipSize:
 push ebx

 mov ebx,[esi+4c]
 cmp ebx,[pPlayer]
 jne _ExitMSS

 cmp dword ptr [iEnableMTS],0
 je _ExitMSS                       // Jump if feature is disabled

 mov eax,[esi+58]

_ExitMSS:
 pop ebx

 mov [esi+54],eax                  // Original code (upds size)
 mov edx,[esi+28]                  // Original code
 jmp _BackMSS                      // Back to main code

//=========================================
// TBS During turn changing
_MonResProgress:
 push ebx

 mov ebx,[esi+18]
 cmp ebx,[pPlayer]
 jne _ExitMRP

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov edx,[ecx+1C]                  // Get value_needed
 mov ebx,[esi+1c]                  // Get pResearchProgress
 mov [ebx+08],edx                  // Complete research

_ExitMRP:
 pop ebx

 add edx,eax                       // Original code
 cmp edx,[ecx+1C]                  // Original code
 jmp _BackMRP                      // Back to main code

//=========================================
 db '======================================&gt;'
 db 'CE6.3 Script by Recifense 091013'
//=========================================
// Variables
iEnableMMM:
 dd 0
iEnableMAP:
 dd 0
iEnableMTS:
 dd 0
iEnableMBU:
 dd 0
iEnableMPP:
 dd 0
iEnableMMA:
 dd 0
iEnableMAA:
 dd 0
iEnableMAR:
 dd 0
iEnableMTA:
 dd 0
iEnableMPG:
 dd 0
iEnablePPS:
 dd 0
iEnableGMD:
 dd 0
iEnableMAM:
 dd 0
iEnableMRP:
 dd 0
pMoney:
 dd 0
pPlayer:
 dd MyCode
pCommander:
 dd 0
pProvince:
 dd 0
pTroop:
 dd 0
pCommon:
 dd MyCode
iMinMoney:
 dd #63000
iCount0:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0
iCount3:
 dd 0
iCount4:
 dd 0
pUnit:
 dd 0

//=========================================
// Hacking Points
MMMY:
 jmp _MonMinimumMoney
 nop
_BackMMM:

MSCR:
 jmp _MonSelCommander
 nop
_BackMSC:

MAPC:
 jmp _MonActionPointsC
_BackMAC:

MAPT:
 jmp _MonActionPointsT
_BackMAT:

MAPA:
 jmp _MonActionPointsA
_BackMAA:

MSPE:
 jmp _MonSelProvince
 nop
_BackMSP:

MPPO:
 jmp _MonProvincePO
 nop
_BackMPP:

MMCA:
 jmp _MonMercAvail
_BackMMA:

MAAP:
 jmp _MonAgentAP
 nop
 nop
_BackAAP:

MART:
 jmp _MonArmyReinf
_BackMAR:

MTAN:
 jmp _MonTroopAttrition
 nop
_BackMTA:

MCAP:
 jmp _MonCommanderAP
 nop
 nop
 nop
_BackCAP:

MPGH:
 jmp _MonProvinceGrowth
_BackMPG:

MPPS:
 jmp _MonProvPopSurplus
_BackPPS:

MSTP:
 jmp _MonSelTroop
 nop
_BackMST:

GDMD:
 jmp _GodMode
_BackGMD:

GDM1:
 jmp _GodMode1
 nop
_BackGM1:

MOAM:
 jmp _MonAmmo
 nop
 nop
_BackMAM:

GDMS:
 jmp _GodModeS
 nop
_BackGMS:

MBUN:
 jmp _MonBattleUnits
 nop
_BackMBU:

GDM2:
 jmp _GodMode2
 nop
_BackGM2:

MTSZ:
 jmp _MonTroopSize
 nop
_BackMTS:

MTAP:
 jmp _MonTroopAP
 db 90 90 90 90 90
_BackTAP:

MTA1:
 jmp _MonTroopAP1
 db 90 90
_BackTA1:

MSSZ:
 jmp _MonShipSize
 nop
_BackMSS:

MRPS:
 jmp _MonResProgress
_BackMRP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MMMY:
// mov eax,[ecx+0000050C]
 db 8b 81 0c 05 00 00

MSCR:
// mov eax,[edx+000005D0]
 db 8b 82 d0 05 00 00

MAPC:
// mov [esi+1C],eax
// pop esi
// pop ebp
 db 89 46 1c 5e 5d

MAPT:
// sub eax,edx
// mov [ecx+74],eax
 db 2b c2 89 41 74

MAPA:
// sub eax,edx
// mov [ecx+1c],eax
 db 2b c2 89 41 1c

MSPE:
// mov eax,[ebp-20]
// sub eax,[esi+28]
 db 8b 45 e0 2b 46 28

MPPO:
// mov [esi+0C],edx
// mov ecx,[esi+14]
 db 89 56 0c 8b 4e 14

MMCA:
// mov eax,[esi+04]
// test eax,eax
 db 8b 46 04 85 c0

MAAP:
// mov [ecx+1C],00000000
 db c7 41 1c 00 00 00 00

MART:
// add eax,[edi+34]
// pop edi
// pop esi
 db 03 47 34 5f 5e

MTAN:
// mov [esi+54],ecx
// mov eax,[esi+48]
 db 89 4e 54 8b 46 48

MCAP:
// movss [esi+000000B0],xmm0
 db f3 0f 11 86 b0 00 00 00

MPGH:
// mov edi,eax
// cmp [esi+08],edi
 db 8b f8 39 7e 08

MPPS:
// mov esi,ecx
// mov eax,[esi+04]
 db 8b f1 8b 46 04

MSTP:
// mov [esi+00000940],edi
 db 89 be 40 09 00 00

GDMD:
// push ebp
// mov ebp,esp
// push ebx
// push esi
 db 55 8b ec 53 56

GDM1:
// push ebp
// mov ebp,esp
// sub esp,5C
 db 55 8b ec 83 ec 5c

MOAM:
// subss xmm0,xmm1
// comiss xmm1,xmm0
 db f3 0f 5c c1 0f 2f c8

GDMS:
// mov edi,[esi+000006F0]
 db 8b be f0 06 00 00

MBUN:
// mov edx,[esi+000006EC]
 db 8b 96 ec 06 00 00

GDM2:
// mov [esi+000006F0],ecx
 db 89 8e f0 06 00 00

MTSZ:
// mov [esi+54],ecx
// mov edx,[eax+78]
 db 89 4e 54 8b 50 78

MTAP:
// mov [ecx+00000144],FFFFFFFF
 db c7 81 44 01 00 00 ff ff ff ff

MTA1:
// mov [ecx+74],00000000
 db c7 41 74 00 00 00 00

MSSZ:
// mov [esi+54],eax
// mov edx,[esi+28]
 db 89 46 54 8b 56 28

MRPS:
// add edx,eax
// cmp edx,[ecx+1C]
 db 03 d0 3b 51 1c

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(pMoney)
unregistersymbol(pPlayer)
unregistersymbol(pCommander)
unregistersymbol(pProvince)
unregistersymbol(pTroop)
unregistersymbol(pCommon)
unregistersymbol(pUnit)
unregistersymbol(iEnableMMM)
unregistersymbol(iEnableMAP)
unregistersymbol(iEnableMTS)
unregistersymbol(iEnableMBU)
unregistersymbol(iEnableMPP)
unregistersymbol(iEnableMMA)
unregistersymbol(iEnableMAA)
unregistersymbol(iEnableMAR)
unregistersymbol(iEnableMTA)
unregistersymbol(iEnableMPG)
unregistersymbol(iEnablePPS)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMAM)
unregistersymbol(iEnableMRP)
unregistersymbol(iMinMoney)
unregistersymbol(iCount0)
unregistersymbol(iCount1)
unregistersymbol(iCount2)
unregistersymbol(iCount3)
unregistersymbol(iCount4)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
6798:
define(MMMY,Rome2.dll+007bc7a0)
define(MSCR,Rome2.dll+001798c2)
define(MAPC,Rome2.dll+0022ce4a)
define(MAPT,Rome2.dll+00d606a7)
define(MAPA,Rome2.dll+0079ed17)
define(MSPE,Rome2.dll+0099f2a1)
define(MPPO,Rome2.dll+001212df)
define(MMCA,Rome2.dll+00d55e93)
define(MAAP,Rome2.dll+00c8d670)
define(MART,Rome2.dll+005ce421)
define(MTAN,Rome2.dll+00b276ff)
define(MCAP,Rome2.dll+00d2485e)
define(MPGH,Rome2.dll+00dfb3e2)
define(MPPS,Rome2.dll+0047a468)
define(MSTP,Rome2.dll+00eed6b7)
define(GDMD,Rome2.dll+00a80140)
define(GDM1,Rome2.dll+00252b90)
define(MOAM,Rome2.dll+00d6fec0)
define(GDMS,Rome2.dll+00b4c941)
define(MBUN,Rome2.dll+0072e5c6)
define(GDM2,Rome2.dll+00772a50)
define(MTSZ,Rome2.dll+00ad140f)
define(MTAP,Rome2.dll+00692410)
define(MTA1,Rome2.dll+00d606b0)
define(MSSZ,Rome2.dll+0046ef6e)
define(MRPS,Rome2.dll+00d7f015)
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"Enable/Disable Minimum Money =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMM</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Minimum Money Value ==&gt;"</Description>
              <Color>0080FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinMoney</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Enable/Disable Free Action Points =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>25</ID>
          <Description>"Enable/Disable Recover Troop Size =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMTS</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Enable/Disable Blessed Units =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMBU</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Enable/Disable Minimum Public Order =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>40</ID>
          <Description>"Enable/Disable Mercenaries Available =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMA</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Enable/Disable Agent Can Act Again =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAA</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>44</ID>
          <Description>"Enable/Disable Army Reinforcement in 1 Turn =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>48</ID>
          <Description>"Enable/Disable Protection From Attrition =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMTA</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>51</ID>
          <Description>"Enable/Disable Province Growth in 1 Turn =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPG</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"Enable/Disable Minimum Province Pop Surplus =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnablePPS</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>79</ID>
          <Description>"Enable/Disable Unlimited Ammo =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAM</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>97</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>96</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"Enable/Disable Research in 1 Turn =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"============= General/Agent Info =============="</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>000080</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pCommander</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>54</ID>
              <Description>"Selected Army Current XP ==&gt;"</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>104</Offset>
                <Offset>0</Offset>
                <Offset>260</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>53</ID>
              <Description>"Selected Commander Current XP ==&gt;"</Description>
              <Color>0000FF</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>pCommander</Address>
              <Offsets>
                <Offset>4F8</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>pMoney</Name>
      <Address>013907E8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>013907EC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommander</Name>
      <Address>013907F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pProvince</Name>
      <Address>013907F4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pTroop</Name>
      <Address>013907F8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pCommon</Name>
      <Address>013907FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pUnit</Name>
      <Address>01390818</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMMM</Name>
      <Address>013907B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAP</Name>
      <Address>013907B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMTS</Name>
      <Address>013907B8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMBU</Name>
      <Address>013907BC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPP</Name>
      <Address>013907C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMMA</Name>
      <Address>013907C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAA</Name>
      <Address>013907C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAR</Name>
      <Address>013907CC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMTA</Name>
      <Address>013907D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPG</Name>
      <Address>013907D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnablePPS</Name>
      <Address>013907D8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMD</Name>
      <Address>013907DC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAM</Name>
      <Address>013907E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMRP</Name>
      <Address>013907E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMinMoney</Name>
      <Address>01390800</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount0</Name>
      <Address>01390804</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount1</Name>
      <Address>01390808</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount2</Name>
      <Address>0139080C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount3</Name>
      <Address>01390810</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount4</Name>
      <Address>01390814</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Rome II Total War
 Game Version  : 1.00 (6858)
 Game Sponsor  : RELOADED
 Proces Name   : Rome2.exe
 Script Version: 1.3
 CE Version    : 6.3
 Release date  : 10-Sep-2013
 Author        : Recifense
 History:
 08-Sep-13: First Release
 09-Sep-13: Fixed an issue related to GM and a possible crash
 09-Sep-13: Release for version 6858
 10-Sep-13: Trying to fix the surplus issue
 Features:
TBS ===&gt;
 - Minimum Money                [1]
 - Unlimited Action Points      [2]
   - Agent
   - Troop
   - Army Commander
 - Recover Troop Size on Move   [3]
 - Blessed Units:               [4]
   - Cunning   (20)
   - Zeal      (20)
   - Authority (20)
   - Ambition  (30)
   - Gravitas  (63)
 - Province Minimum PO (63)     [5]
 - Mercenaries Available        [6]
 - Unit Can Act again:          [7]
   - Agent
   - Army Commander
 - Army Reinforcement in 1 Turn [8]
 - Province Growth in 1 turn    [9]
 - Province Minimum PS (10)     [A]
RTS ===&gt;
 - God Mode:                    [B]
   - Ground Battle
   - Sea Battle
 - Unlimited Ammo               [C]
 - Research in 1 Turn           [D]
 - pointers                     [E]
===========================================
[1] The minimum money value is 63000 by default;
[2] Army/Agents can move freely;
[3] Size of each troop will be set to maximum;
[4] It will affect the selected agent/commander;
[5] It will work during turn changing;
[6] You can hire as many as you want;
[7] Agents can act freely;
[8] That's it;
[9] Player's Provinces will advance one level every turn;
[A] The selected province population surplus will be set to minimum;
[B] For troops and ships;
[C] For troops;
[D] That's it;
[E] Used on the table;
===========================================
[USAGE - TBS]
1- Activate the table by clicking on its box [ ] =&gt; [X]
2 - Just enable the cheats you want to use;
===========================================
HOTKEYS:
CTRL+Home   = Enable  all cheats (but Blessed/Growth/Surplus/RTS)
CTRL+End    = Disable all cheats (but Blessed/Growth/Surplus/RTS)
-------------
CTRL+PageUp   = Enable  Blassed/Growth/Surplus cheats;
CTRL+PageDown = Disable Blassed/Growth/Surplus cheats;
-------------
CTRL+NUM1   = Enable  GM/Ammo cheats; (RTS)
CTRL+NUM0   = Disable GM/Ammo cheats; (RTS)
-------------
[NOTE] Go to Menu before using the HOTKEYS;
[NOTE] You can modify all Hotkeys;
===========================================
[IMPORTANT]
Save the game before unsing the table, so you can always go back if you did not like the result.
===========================================
Happy gaming!
 
</Comments>
</CheatTable>
