<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"GodMode"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentHealth,00000018)
define(CompareTo,00000134)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Health)
label(Compare)
label(Godmode)
registersymbol(Health)
aobscan(Healthaob,8b 46 18 d9 5e 1c d9 86 5c 03 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
Godmode:
popfd
mov [esi+CurrentHealth],(float)1000000
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]

jmp returnhere

Compare:
pushfd
cmp [esi+CompareTo],0
je Godmode
popfd

originalcode:
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]

exit:
jmp returnhere

Healthaob:
Health:
jmp Compare
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Health:
mov eax,[esi+CurrentHealth]
fstp dword ptr [esi+1C]
//Alt: db 8B 46 18 D9 5E 1C
unregistersymbol(Health)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Godly Energy"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentEnergy,0000002C)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(Energy)
registersymbol(Energy)
aobscan(Energyaob,d8 46 2c d8 65 0c d9 1c 24)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [esi+CurrentEnergy],(float)1000000

originalcode:
fadd dword ptr [esi+CurrentEnergy]
fsub dword ptr [ebp+0C]

exit:
jmp returnhere

Energyaob:
Energy:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Energy:
fadd dword ptr [esi+CurrentEnergy]
fsub dword ptr [ebp+0C]
//Alt: db D8 46 2C D8 65 0C
unregistersymbol(Energy)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"One Hit Kill"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentHealth,00000018)
define(CompareTo,00000134)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(HealthDecreaser)
label(Compare)
label(OneHitKill)
registersymbol(HealthDecreaser)
aobscan(HealthDecreaseraob,d9 59 18 d9 44 24 04 d8 41 20 d9 59 20)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
OneHitKill:
popfd
fstp dword ptr [ecx+CurrentHealth]
mov [ecx+CurrentHealth],(float)0
fld dword ptr [esp+04]

jmp returnhere

Compare:
pushfd
cmp [ecx+CompareTo],0
jne OneHitKill
popfd

originalcode:
fstp dword ptr [ecx+CurrentHealth]
fld dword ptr [esp+04]

exit:
jmp returnhere

HealthDecreaseraob:
HealthDecreaser:
jmp Compare
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
HealthDecreaser:
fstp dword ptr [ecx+CurrentHealth]
fld dword ptr [esp+04]
//Alt: db D9 59 18 D9 44 24 04
unregistersymbol(HealthDecreaser)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Gold"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(CurrentGold,00000948)
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)
label(PlayerGold)
label(Gold)
registersymbol(PlayerGold)
registersymbol(Gold)
aobscan(Goldaob,8b 81 48 09 00 00 c3 81 c1 48 09 00 00)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push edx
mov edx,[PlayerGold]
mov [ecx+CurrentGold],edx
mov eax,[ecx+CurrentGold]
pop edx

jmp returnhere

originalcode:
mov eax,[ecx+CurrentGold]

exit:
jmp returnhere

PlayerGold:
dd 0

Goldaob:
Gold:
jmp newmem
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
Gold:
mov eax,[ecx+CurrentGold]
//Alt: db 8B 81 48 09 00 00
unregistersymbol(PlayerGold)
unregistersymbol(Gold)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Player Gold"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>PlayerGold</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"No description"</Description>
      <LastState Value="3761" RealAddress="1A317688"/>
      <VariableType>4 Bytes</VariableType>
      <Address>1A317688</Address>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>HealthDecreaser</Name>
      <Address>00C2754D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Health</Name>
      <Address>022280BE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Energy</Name>
      <Address>022281E0</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
