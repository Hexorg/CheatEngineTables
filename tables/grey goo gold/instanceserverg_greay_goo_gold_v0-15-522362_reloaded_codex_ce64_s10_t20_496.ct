<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>93</ID>
      <Description>"[X] &lt;== Grey Goo Gold v0.15.522362 RELOADED/CODEX Script v1.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Grey Goo Gold
 Game Version  : 0.15.522362
 Game Sponsor  : RELOADED
 Process Name  : InstanceServerG.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 04-Feb-2015
 Author        : Recifense
 History:
 28-Jan-15: First Release
 04-Feb-15: Release for version 0.15 (patch by CODEX)
 Features:
 - Minimum Resources
 - God Mode
 - Full Ammo
 - Unlimited Units
 - Some Pointers
===========================================
}

//=========================================
// Definitions
define(LUDO,"InstanceServerG.exe")
define(MOHP,InstanceServerG.exe+00b70981) //=
define(MOPR,InstanceServerG.exe+002afedc) //=
define(GDMD,InstanceServerG.exe+002ab29d) //=
define(MOFA,InstanceServerG.exe+00b16287) //=
define(MOUU,InstanceServerG.exe+000986be) //=

define(SELL,InstanceServerG.exe+002A25fa) //=
define(CTRK,InstanceServerG.exe+0026126a) //=

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)
define(ctMRES,#640)    // Minimum Resource

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOHP,8b 71 68 85 f6 ?? ?? 8b 06 8b 50 08 8b ce ff d2 85 c0 ?? ?? 3d ??)
assert(MOPR,8b 70 0c 89 58 0c 88 50 14 3b f3 ?? ?? 8b 7f 08 85 ff ?? ?? 8b 07)
assert(GDMD,f3 0f 10 4d 0c 0f 57 d2 0f 2f ca f3 0f 10 47 18 f3 0f 11 4d 9c ??)
assert(MOFA,df 7d 0c 8b 55 0c 89 11 d9 6d 0a 5e 5d c2 0c 00 cc cc cc cc cc cc)
assert(MOUU,8b 47 0c 6a 20 50 8b 42 04 8b ce 80 e3 01 ff d0 8b 16 22 d8 8b 47)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_MonPlayerRes)
label(_BackMPR)
label(_ExitMPR)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonFullAmmo)
label(_BackMFA)
label(_ExitMFA)
label(_MonUnlimitedUnits)
label(_BackMUU)
label(_ExitMUU)

label(iEnableMPR)
label(iEnableGMD)
label(iEnableMFA)
label(iEnableMUU)

label(pCommon)
label(pUnit)
label(pRes)
label(pPop)

label(fLast)
label(aLast)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableMPR)
registersymbol(iEnableGMD)
registersymbol(iEnableMFA)
registersymbol(iEnableMUU)
registersymbol(pCommon)
registersymbol(pUnit)
registersymbol(pRes)
registersymbol(pPop)

registersymbol(fLast)
registersymbol(aLast)

//=========================================
MyCode:
//=========================================
// At the game main RTS screen
_MonHumanPlayer:
 mov [aLast],'_MHP'

 push eax

 mov esi,[ecx+68]
 test esi,esi
 jz _ExitMHP

 cmp esi,[ecx+64]
 jne _ExitMHP

 mov eax,[esi+14]
 test eax,eax
 jz _ExitMHP

 mov eax,[eax]
 cmp eax,'HUMA'
 jne _ExitMHP

 mov [pCommon],esi

_ExitMHP:
 pop eax

 mov esi,[ecx+68]                  // Original code (get pPlayer)
 test esi,esi                      // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// When updating resource
_MonPlayerRes:
 mov [aLast],'_MPR'

 push ecx

 mov esi,[eax+0C]                  // Original code (get current value)

 test edi,edi
 jz _ExitMPR

 mov ecx,[edi+08]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+68]
 test ecx,ecx
 jz _ExitMPR

 mov ecx,[ecx+64]
 cmp ecx,[pCommon]
 jne _ExitMPR

 mov [pRes],edi

 cmp dword ptr [iEnableMPR],0
 je _ExitMPR                       // Jump if feature is disabled

 cmp ebx,ctMRES
 jns _ExitMPR

 mov ebx,ctMRES

 cmp ebx,esi
 jne _ExitMPR

 dec esi

_ExitMPR:
 pop ecx

 mov [eax+0C],ebx                  // Original code (set new value)
 jmp _BackMPR                      // Back to main code

//=========================================
// When changing HP
_GodMode:
 mov [aLast],'_GMD'

 push eax

 mov eax,[ebp+00000114]

 cmp eax,SELL
 je _ExitGMD

 cmp eax,CTRK
 je _ExitGMD

 mov [pUnit],edi

 mov eax,[edi+08]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+68]
 test eax,eax
 jz _ExitGMD

 mov eax,[eax+64]
 cmp eax,[pCommon]
 jne _ExitGMD

 mov eax,[edi+18]                  // Just for debugging
 mov eax,[ebp+0c]                  // Just for debugging
 mov [fLast],eax

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,[ebp+0c]
 test eax,eax
 jns _ExitGMD

 mov eax,[edi+18]
 mov [edi+14],eax

 mov eax,(float)-1.0
 mov [ebp+0c],eax

_ExitGMD:
 pop eax

 movss xmm1,[ebp+0C]               // Original code (get value 2 add or dec)
 jmp _BackGMD                      // Back to main code

//=========================================
// When loading/unloading ammo (affects all)
_MonFullAmmo:
 mov [aLast],'_MFA'

 fistp qword ptr [ebp+0C]          // Original code (convert new value)

 cmp dword ptr [iEnableMFA],0
 je _ExitMFA                       // Jump if feature is disabled

 mov edx,[ecx+04]
 mov [ebp+0C],edx

_ExitMFA:
 mov edx,[ebp+0C]                  // Original code (get new value)
 jmp _BackMFA                      // Back to main code

//=========================================
// When Inc/Dec spent unit points
_MonUnlimitedUnits:
 mov [aLast],'_MUU'

 cmp dword ptr [iEnableMUU],0
 je _ExitMUU                       // Jump if feature is disabled

 mov eax,[edi+04]
 cmp eax,[pCommon]
 jne _ExitMUU

 mov [pPop],edi

 xor eax,eax
 mov [edi+0c],eax
 mov [edi+14],eax

_ExitMUU:
 mov eax,[edi+0C]                  // Original code (get spent points)
 push 20                           // Original code
 jmp _BackMUU                      // Back to main code

//=========================================
 db '=================================&gt;'
 db 'CE6.4 Script by Recifense 012815'
//=========================================
// Variables
iEnableMPR:
 dd 0
iEnableGMD:
 dd 0
iEnableMFA:
 dd 0
iEnableMUU:
 dd 0
pCommon:
 dd MyCode
pUnit:
 dd 0
pRes:
 dd 0
pPop:
 dd 0
fLast:
 dd 0
aLast:
 db 'CE64'

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
_BackMHP:

MOPR:
 jmp _MonPlayerRes
 nop
_BackMPR:

GDMD:
 jmp _GodMode
_BackGMD:

MOFA:
 jmp _MonFullAmmo
 nop
_BackMFA:

MOUU:
 jmp _MonUnlimitedUnits
_BackMUU:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// mov esi,[ecx+68]
// test esi,esi
 db 8b 71 68 85 f6

MOPR:
// mov esi,[eax+0C]
// mov [eax+0C],ebx
 db 8b 70 0c 89 58 0c

GDMD:
// movss xmm1,[ebp+0C]
 db f3 0f 10 4d 0c

MOFA:
// fistp qword ptr [ebp+0C]
// mov edx,[ebp+0C]
 db df 7d 0c 8b 55 0c

MOUU:
// mov eax,[edi+0C]
// push 20
 db 8b 47 0c 6a 20

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableMPR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMFA)
unregistersymbol(iEnableMUU)
unregistersymbol(pCommon)
unregistersymbol(pUnit)
unregistersymbol(pRes)
unregistersymbol(pPop)

unregistersymbol(fLast)
unregistersymbol(aLast)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
v0.14.520083:
define(MOPR,InstanceServerG.exe+002b0c0c)
define(GDMD,InstanceServerG.exe+002ac09d)
define(MOFA,InstanceServerG.exe+00b17497)
define(MOUU,InstanceServerG.exe+00098d3e)

define(SELL,InstanceServerG.exe+002A33F8)
define(CTRK,InstanceServerG.exe+00261f4a)
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>94</ID>
          <Description>"[X] &lt;== Minimum Resource -----&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPR",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPR",0)
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"[X] &lt;== God Mode ------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"[X] &lt;== Full Ammo -------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMFA",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMFA",0)
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"[X] &lt;== Unlimited Unit Points ---&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUU",1)
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUU",0)
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iRegs</Name>
      <Address>0155027E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iCount</Name>
      <Address>0155027A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>repair</Name>
      <Address>00651409</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>units1</Name>
      <Address>00545378</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>units2</Name>
      <Address>0051F4FC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>resources</Name>
      <Address>00DE876C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>missiles</Name>
      <Address>00FA2A99</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Grey Goo Gold
 Game Version  : 0.15.522362
 Game Sponsor  : RELOADED
 Process Name  : InstanceServerG.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 04-Feb-2015
 Author        : Recifense
 History:
 28-Jan-15: First Release
 04-Feb-15: Release for version 0.15 (patch by CODEX)
 Features:
 - Minimum Resources [1]
 - God Mode          [2]
 - Full Ammo         [3]
 - Unlimited Units   [4]
 - Some Pointers
===========================================
[1] For human player only (not AI);
[2] For player's units and buildings (not AI's);
[3] For Human player and AIs;
[4] For Human player only (not AI);
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "InstanceServerG.exe" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  MR/GM cheats;
CTRL+End       = Disable MR/GM cheats;
-----------
CTRL+PageUp    = Enable  FA cheat;
CTRL+PageDown  = Disable FA cheat;
-----------
CTRL+Insert    = Enable  UUP cheat;
CTRL+Delete    = Disable UUP cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
