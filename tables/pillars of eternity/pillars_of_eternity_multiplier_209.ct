<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Check -- enable this one"</Description>
      <Options moBindActivation="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : PillarsOfEternity.exe
  Version: 
  Date   : 2015-03-29
  Author : deama

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(INJECT2,8B 8F 08 01 00 00 3B) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

alloc(mine3,16)
registersymbol(mine3)

newmem:

code:
mov [mine3],edi
mov ecx,[edi+00000108]
jmp return

INJECT2:
  jmp code
  nop
return:
registersymbol(INJECT2)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT2:
  db 8B 8F 08 01 00 00

unregistersymbol(INJECT2)
dealloc(newmem)
dealloc(mine3)
unregistersymbol(mine3)

{
// ORIGINAL CODE - INJECTION POINT: 2A67F17F

2A67F163: 57                             -  push edi
2A67F164: 56                             -  push esi
2A67F165: 8B 7D 08                       -  mov edi,[ebp+08]
2A67F168: 8B B7 04 01 00 00              -  mov esi,[edi+00000104]
2A67F16E: EB 01                          -  jmp 2A67F171
2A67F170: 46                             -  inc esi
2A67F171: 8D 4E 01                       -  lea ecx,[esi+01]
2A67F174: 8B C6                          -  mov eax,esi
2A67F176: 0F AF C1                       -  imul eax,ecx
2A67F179: 69 C0 F4 01 00 00              -  imul eax,eax,000001F4
// ---------- INJECTING HERE ----------
2A67F17F: 8B 8F 08 01 00 00              -  mov ecx,[edi+00000108]
// ---------- DONE INJECTING  ----------
2A67F185: 3B C1                          -  cmp eax,ecx
2A67F187: 7E E7                          -  jle 2A67F170
2A67F189: 8B C6                          -  mov eax,esi
2A67F18B: 8D 65 F8                       -  lea esp,[ebp-08]
2A67F18E: 5E                             -  pop esi
2A67F18F: 5F                             -  pop edi
2A67F190: C9                             -  leave 
2A67F191: C3                             -  ret 
2A67F192: 00 00                          -  add [eax],al
2A67F194: 00 00                          -  add [eax],al
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>8</ID>
          <Description>"EXP multiplier"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PillarsOfEternity.exe
  Version: 
  Date   : 2015-03-28
  Author : deama

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(INJECT,89 88 08 01 00 00 C9 C3 00 68) // should be unique
alloc(newmem,$1000)

alloc(mine,16)
alloc(mine2,16)
alloc(mine4,16)
registersymbol(mine)
registersymbol(mine2)
registersymbol(mine4)

label(code)
label(check)
label(return)

mine4:
dd 05

newmem:
cmp [mine3],eax
je check
jmp code

check:
    push ecx
mov ecx,[eax+00000108]
mov [mine],ecx
    pop ecx
mov [mine2],ecx

    push eax
mov eax,[mine]
sub [mine2],eax
    pop eax

    push eax
mov eax,[mine2]
    push ecx
mov ecx,[mine4]
mul ecx
    pop ecx
add ecx,eax
    pop eax

code:
  mov [eax+00000108],ecx
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 89 88 08 01 00 00

unregistersymbol(INJECT)
dealloc(newmem)
dealloc(mine)
dealloc(mine2)
dealloc(mine4)
unregistersymbol(mine)
unregistersymbol(mine2)
unregistersymbol(mine4)
{
// ORIGINAL CODE - INJECTION POINT: 1706CFFF

1706CFE1: 8B EC                 -  mov ebp,esp
1706CFE3: 83 EC 08              -  sub esp,08
1706CFE6: 83 EC 0C              -  sub esp,0C
1706CFE9: FF 75 08              -  push [ebp+08]
1706CFEC: E8 27 00 00 00        -  call 1706D018
1706CFF1: 83 C4 10              -  add esp,10
1706CFF4: 8B 4D 0C              -  mov ecx,[ebp+0C]
1706CFF7: 3B C8                 -  cmp ecx,eax
1706CFF9: 0F 4F C8              -  cmovg ecx,eax
1706CFFC: 8B 45 08              -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
1706CFFF: 89 88 08 01 00 00     -  mov [eax+00000108],ecx
// ---------- DONE INJECTING  ----------
1706D005: C9                    -  leave 
1706D006: C3                    -  ret 
1706D007: 00 68 D0              -  add [eax-30],ch
1706D00A: B8 E0 0C E9 16        -  mov eax,16E90CE0
1706D00F: 30 FD                 -  xor ch,bh
1706D011: EC                    -  in al,dx
1706D012: 00 00                 -  add [eax],al
1706D014: 00 00                 -  add [eax],al
1706D016: 00 00                 -  add [eax],al
1706D018: 55                    -  push ebp
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>19</ID>
              <Description>"EXP is multiplied by..."</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>mine4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
