<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>9</ID>
      <Description>"SCRIPT: Damage"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  This is where damage is done...

  If the health offset changes, refine the AOB search by replacing '1C 13' with
  'XX XX' and possibly adding more code bytes from below to find a single match,
  then you should just have to change the define statments to get the cheat
  working.

}

define(_health,0000131C)

[ENABLE]

aobscanmodule(INJECT_DAMAGE,Game.dll,D9 86 1C 13 00 00 51) // should be unique
alloc(newmem,$1000)

label(code)
label(damage_player)
label(damage_nonplayer)
label(damage_notonehit)
label(damage_done)
label(return)


newmem:

label(fGod)
label(fOneHitKill)
label(vDamageMultiplier)

registersymbol(fGod)
registersymbol(fOneHitKill)
registersymbol(vDamageMultiplier)

fGod:
  dd 1
fOneHitKill:
  dd 1
vDamageMultiplier:
  dd (float)2.0

code:
  fld dword ptr [esi+_health] // original code
  pushfd
  pushad

  mov eax,[esi]
  mov eax,[esi+4]
  test eax,eax
  jz damage_done // invalid pointer

  mov ebx,[eax+40] // pointer that is 0 for player, pointer for all others
  test ebx,ebx
  jz damage_player

  mov ebx,[eax+50]
  test ebx,ebx
  jz damage_done // not a valid pointer

  mov eax,[ebx]
  cmp eax,5F6D6F63 // "com_" as in "com_kid2", something with COMpanion I hope
  je damage_player
  jnz damage_nonplayer

  // ok, we have player, check for god flag
damage_player:
  mov eax,[fGod]
  test eax,eax
  jz damage_done
  xor eax,eax
  mov [ebp+08],eax
  jmp damage_done

damage_nonplayer:
  // check for one-hit-kill
  mov eax,[fOneHitKill]
  test eax,eax
  jz damage_notonehit
  // we already have health in the FPU, store it as damage
  fst dword ptr [ebp+08]
  jmp damage_done

damage_notonehit:
  fstp dword ptr [esp-04] // store st(0)
  fld dword ptr [ebp+08] // load damage we're doing
  fmul dword ptr [vDamageMultiplier] // multiply by our multiplier
  fstp dword ptr [ebp+08] // store changed damage
  fld dword ptr [esp-04] // load original st(0)

damage_done:
  popad
  popfd
  jmp return

INJECT_DAMAGE:
  jmp code
  nop
return:
registersymbol(INJECT_DAMAGE)

[DISABLE]

INJECT_DAMAGE:
  db D9 86 1C 13 00 00

dealloc(newmem)

unregistersymbol(INJECT_DAMAGE)
unregistersymbol(fGod)
unregistersymbol(fOneHitKill)
unregistersymbol(vDamageMultiplier)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+150A2A

"Game.dll"+150A10: 51                      - push ecx
"Game.dll"+150A11: 8B 4D 10                - mov ecx,[ebp+10]
"Game.dll"+150A14: D9 5D FC                - fstp dword ptr [ebp-04]
"Game.dll"+150A17: D9 45 FC                - fld dword ptr [ebp-04]
"Game.dll"+150A1A: D9 1C 24                - fstp dword ptr [esp]
"Game.dll"+150A1D: 53                      - push ebx
"Game.dll"+150A1E: E8 F90CEBFF             - call Game.dll+171C
"Game.dll"+150A23: EB 02                   - jmp Game.dll+150A27
"Game.dll"+150A25: DDD8                    - fstp st(0)
"Game.dll"+150A27: 8B 75 F8                - mov esi,[ebp-08]
// ---------- INJECTING HERE ----------
"Game.dll"+150A2A: D9 86 1C130000          - fld dword ptr [esi+0000131C]
// ---------- DONE INJECTING  ----------
"Game.dll"+150A30: 51                      - push ecx
"Game.dll"+150A31: D8 65 08                - fsub dword ptr [ebp+08]
"Game.dll"+150A34: 8B CE                   - mov ecx,esi
"Game.dll"+150A36: D9 5D 10                - fstp dword ptr [ebp+10]
"Game.dll"+150A39: D9 45 10                - fld dword ptr [ebp+10]
"Game.dll"+150A3C: D9 1C 24                - fstp dword ptr [esp]
"Game.dll"+150A3F: E8 E64CEDFF             - call Game.dll+2572A
"Game.dll"+150A44: 8B CE                   - mov ecx,esi
"Game.dll"+150A46: E8 4269EBFF             - call Game.dll+738D
"Game.dll"+150A4B: 84 C0                   - test al,al
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>11</ID>
          <Description>"fOneHitKill"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>fOneHitKill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"fGod"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>fGod</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>66</ID>
          <Description>"vDamageMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>vDamageMultiplier</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"SCRIPT: Unlimited Feature/Skill Points"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  two injections for feature points, one for skill points
}

[ENABLE]

aobscanmodule(INJECT_FP1,Game.dll,2B 87 6C 13 00 00 5F) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  //sub eax,[edi+0000136C]
  mov eax,#100
  jmp return

INJECT_FP1:
  jmp code
  nop
return:
registersymbol(INJECT_FP1)

aobscanmodule(INJECT_FP2,Game.dll,2B 87 6C 13 00 00 33) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  // sub eax,[edi+0000136C]
  mov eax,#100
  jmp return2

INJECT_FP2:
  jmp code2
  nop
return2:
registersymbol(INJECT_FP2)

aobscanmodule(INJECT_SP,Game.dll,2B 87 68 13 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  // sub eax,[edi+00001368]
  mov eax,#100
  jmp return5

INJECT_SP:
  jmp code5
  nop
return5:
registersymbol(INJECT_SP)

[DISABLE]

INJECT_FP1:
  db 2B 87 6C 13 00 00

unregistersymbol(INJECT_FP1)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+D658A

"Game.dll"+D656D: D9 87 28130000     - fld dword ptr [edi+00001328]
"Game.dll"+D6573: 6A 00              - push 00
"Game.dll"+D6575: 8B F0              - mov esi,eax
"Game.dll"+D6577: 51                 - push ecx
"Game.dll"+D6578: 8B CE              - mov ecx,esi
"Game.dll"+D657A: D9 1C 24           - fstp dword ptr [esp]
"Game.dll"+D657D: E8 845BF5FF        - call Game.dll+2C106
"Game.dll"+D6582: 50                 - push eax
"Game.dll"+D6583: 8B CE              - mov ecx,esi
"Game.dll"+D6585: E8 5C30F5FF        - call Game.dll+295E6
// ---------- INJECTING HERE ----------
"Game.dll"+D658A: 2B 87 6C130000     - sub eax,[edi+0000136C] // feature points (display)
// ---------- DONE INJECTING  ----------
"Game.dll"+D6590: 5F                 - pop edi
"Game.dll"+D6591: 5E                 - pop esi
"Game.dll"+D6592: C3                 - ret
"Game.dll"+D6593: CC                 - int 3
"Game.dll"+D6594: CC                 - int 3
"Game.dll"+D6595: CC                 - int 3
"Game.dll"+D6596: CC                 - int 3
"Game.dll"+D6597: CC                 - int 3
"Game.dll"+D6598: CC                 - int 3
"Game.dll"+D6599: CC                 - int 3
}
INJECT_FP2:
  db 2B 87 6C 13 00 00

unregistersymbol(INJECT_FP2)
dealloc(newmem2)

{
// ORIGINAL CODE - INJECTION POINT: 630B6D9D

"Game.dll"+D6D80: D9 87 28130000    - fld dword ptr [edi+00001328]
"Game.dll"+D6D86: 6A 00             - push 00
"Game.dll"+D6D88: 8B F0             - mov esi,eax
"Game.dll"+D6D8A: 51                - push ecx
"Game.dll"+D6D8B: 8B CE             - mov ecx,esi
"Game.dll"+D6D8D: D9 1C 24          - fstp dword ptr [esp]
"Game.dll"+D6D90: E8 7153F5FF       - call Game.dll+2C106
"Game.dll"+D6D95: 50                - push eax
"Game.dll"+D6D96: 8B CE             - mov ecx,esi
"Game.dll"+D6D98: E8 4928F5FF       - call Game.dll+295E6
// ---------- INJECTING HERE ----------
"Game.dll"+D6D9D: 2B 87 6C130000    - sub eax,[edi+0000136C] // feature points (selecting skill to spend points on)
// ---------- DONE INJECTING  ----------
"Game.dll"+D6DA3: 33 C9             - xor ecx,ecx
"Game.dll"+D6DA5: 3B 45 08          - cmp eax,[ebp+08]
"Game.dll"+D6DA8: 5F                - pop edi
"Game.dll"+D6DA9: 0F9D C0           - setge al
"Game.dll"+D6DAC: 5E                - pop esi
"Game.dll"+D6DAD: 5D                - pop ebp
"Game.dll"+D6DAE: C2 0400           - ret 0004
"Game.dll"+D6DB1: CC                - int 3
"Game.dll"+D6DB2: CC                - int 3
"Game.dll"+D6DB3: CC                - int 3
}
INJECT_SP:
  db 2B 87 68 13 00 00

unregistersymbol(INJECT_SP)
dealloc(newmem5)

{
// ORIGINAL CODE - INJECTION POINT: 630B648A

"Game.dll"+D646D: D9 87 28130000     - fld dword ptr [edi+00001328]
"Game.dll"+D6473: 6A 00              - push 00
"Game.dll"+D6475: 8B F0              - mov esi,eax
"Game.dll"+D6477: 51                 - push ecx
"Game.dll"+D6478: 8B CE              - mov ecx,esi
"Game.dll"+D647A: D9 1C 24           - fstp dword ptr [esp]
"Game.dll"+D647D: E8 845CF5FF        - call Game.dll+2C106
"Game.dll"+D6482: 50                 - push eax
"Game.dll"+D6483: 8B CE              - mov ecx,esi
"Game.dll"+D6485: E8 EEC3F3FF        - call Game.dll+12878
// ---------- INJECTING HERE ----------
"Game.dll"+D648A: 2B 87 68130000     - sub eax,[edi+00001368] // skill points
// ---------- DONE INJECTING  ----------
"Game.dll"+D6490: 5F                 - pop edi
"Game.dll"+D6491: 5E                 - pop esi
"Game.dll"+D6492: C3                 - ret
"Game.dll"+D6493: CC                 - int 3
"Game.dll"+D6494: CC                 - int 3
"Game.dll"+D6495: CC                 - int 3
"Game.dll"+D6496: CC                 - int 3
"Game.dll"+D6497: CC                 - int 3
"Game.dll"+D6498: CC                 - int 3
"Game.dll"+D6499: CC                 - int 3
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>61</ID>
      <Description>"SCRIPT: No Inventory Use (including ammo)"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  Do not subtract from inventory when using ammo or items
}

[ENABLE]

aobscanmodule(INJECT_INVENTORY,Game.dll,2B C1 89 46 28) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  // sub eax,ecx // skip subtract
  mov [esi+28],eax
  jmp return

INJECT_INVENTORY:
  jmp code
return:
registersymbol(INJECT_INVENTORY)

[DISABLE]

INJECT_INVENTORY:
  db 2B C1 89 46 28

unregistersymbol(INJECT_INVENTORY)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 630EE9B2

"Game.dll"+10E99A: 8B F0              - mov esi,eax
"Game.dll"+10E99C: EB 4A              - jmp Game.dll+10E9E8
"Game.dll"+10E99E: 8B 46 28           - mov eax,[esi+28]
"Game.dll"+10E9A1: 83 F8 FF           - cmp eax,-01
"Game.dll"+10E9A4: 75 05              - jne Game.dll+10E9AB
"Game.dll"+10E9A6: 89 5D F0           - mov [ebp-10],ebx
"Game.dll"+10E9A9: EB 19              - jmp Game.dll+10E9C4
"Game.dll"+10E9AB: 8B 4D F0           - mov ecx,[ebp-10]
"Game.dll"+10E9AE: 3B C1              - cmp eax,ecx
"Game.dll"+10E9B0: 7E 0A              - jle Game.dll+10E9BC
// ---------- INJECTING HERE ----------
"Game.dll"+10E9B2: 2B C1              - sub eax,ecx
"Game.dll"+10E9B4: 89 46 28           - mov [esi+28],eax
// ---------- DONE INJECTING  ----------
"Game.dll"+10E9B7: 89 5D F0           - mov [ebp-10],ebx
"Game.dll"+10E9BA: EB 08              - jmp Game.dll+10E9C4
"Game.dll"+10E9BC: 2B C8              - sub ecx,eax
"Game.dll"+10E9BE: 89 4D F0           - mov [ebp-10],ecx
"Game.dll"+10E9C1: 89 5E 28           - mov [esi+28],ebx
"Game.dll"+10E9C4: 8B 46 28           - mov eax,[esi+28]
"Game.dll"+10E9C7: 83 F8 FF           - cmp eax,-01
"Game.dll"+10E9CA: 75 04              - jne Game.dll+10E9D0
"Game.dll"+10E9CC: 0B C8              - or ecx,eax
"Game.dll"+10E9CE: EB 02              - jmp Game.dll+10E9D2

// original script comments:
Game.dll+10A1C5 - E8 E561F2FF           - call Game.dll+303AF
Game.dll+10A1CA - 8B F0                 - mov esi,eax
Game.dll+10A1CC - EB 4A                 - jmp Game.dll+10A218
Game.dll+10A1CE - 8B 46 28              - mov eax,[esi+28] ------------------------------------------- load ammo
Game.dll+10A1D1 - 83 F8 FF              - cmp eax,FF
Game.dll+10A1D4 - 75 05                 - jne Game.dll+10A1DB
Game.dll+10A1D6 - 89 5D F0              - mov [ebp-10],ebx
Game.dll+10A1D9 - EB 19                 - jmp Game.dll+10A1F4
Game.dll+10A1DB - 8B 4D F0              - mov ecx,[ebp-10]
Game.dll+10A1DE - 3B C1                 - cmp eax,ecx
Game.dll+10A1E0 - 7E 0A                 - jle Game.dll+10A1EC
Game.dll+10A1E2 - 2B C1                 - sub eax,ecx  ----------------------------------------------- subtract shot
Game.dll+10A1E4 - 89 46 28              - mov [esi+28],eax ------------------------------------------- save new ammo
Game.dll+10A1E7 - 89 5D F0              - mov [ebp-10],ebx
Game.dll+10A1EA - EB 08                 - jmp Game.dll+10A1F4
Game.dll+10A1EC - 2B C8                 - sub ecx,eax
Game.dll+10A1EE - 89 4D F0              - mov [ebp-10],ecx -- replace with adjusted quantity remaining to use if we didn't have enough?
Game.dll+10A1F1 - 89 5E 28              - mov [esi+28],ebx (not executed, maybe will if out of ammo?)
Game.dll+10A1F4 - 8B 46 28              - mov eax,[esi+28] ------------------------------------------- load ammo again to check for empty?
Game.dll+10A1F7 - 83 F8 FF              - cmp eax,FF
Game.dll+10A1FA - 75 04                 - jne Game.dll+10A200
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>49</ID>
      <Description>"SCRIPT: Speed"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  This script does blah blah blah
}

define(_speed,000016A4)
define(_speed2,000016A0)

[ENABLE]

aobscanmodule(INJECT_SPEED,Engine.dll,D9 81 A4 16 00 00) // should be unique
alloc(newmem,$1000)

newmem:

label(code_speed)
label(normal_speed)
label(slow_speed)
label(fast_speed)
label(skip_shift_speed)
label(done_speed)
label(fSlowMotion)
label(fFastMotion)
label(fShiftFastMotion)
label(vSlowMotionMultiplier)
label(vFastMotionMultiplier)
label(vNormalMotionMultiplier)
label(pSpeedStruct)
label(return)

registersymbol(fSlowMotion)
registersymbol(fFastMotion)
registersymbol(fShiftFastMotion)
registersymbol(vSlowMotionMultiplier)
registersymbol(vFastMotionMultiplier)
registersymbol(vNormalMotionMultiplier)
registersymbol(pSpeedStruct)

fSlowMotion:
  dd 0
fFastMotion:
  dd 0
fShiftFastMotion:
  dd 1
vSlowMotionMultiplier:
  dd (float)0.5
vFastMotionMultiplier:
  dd (float)1.75
vNormalMotionMultiplier:
  dd (float)1.0
pSpeedStruct:
  dd 0
  dd 0
  dd 0

code_speed:
  push eax
  mov [pSpeedStruct],ecx // store for analysis

  // use normal speed if speed is already altered, i.e. pause menu or
  // ability that slows time
  cmp dword ptr [ecx+_speed],(float)0.9
  jl normal_speed
  cmp dword ptr [ecx+_speed],(float)1.1
  jg normal_speed

  // check for speed flags
  cmp [fSlowMotion],00000000
  jne slow_speed

  cmp [fFastMotion],00000000
  jne fast_speed

normal_speed:
  cmp [fShiftFastMotion],00000000
  je skip_shift_speed

  pushad
  push 000000A0 // VK_LSHIFT
  // push 00000070 // F1 (for testing because VK_SHIFT or 0000000A doesn't work)
  call GetAsyncKeyState
  mov [pSpeedStruct+4],eax
  inc [pSpeedStruct+8]
  test eax,ffffffff
  popad
  jnz fast_speed

skip_shift_speed:
  mov eax,[vNormalMotionMultiplier]
  mov [ecx+_speed2],eax
  jmp done_speed

slow_speed:
  mov eax,[vSlowMotionMultiplier]
  mov [ecx+_speed2],eax
  jmp done_speed

fast_speed:
  mov eax,[vFastMotionMultiplier]
  mov [ecx+_speed2],eax
  jmp done_speed

done_speed:
  pop eax
  fld dword ptr [ecx+_speed]
  jmp return

INJECT_SPEED:
  jmp code_speed
  nop
return:
registersymbol(INJECT_SPEED)

[DISABLE]

INJECT_SPEED:
  db D9 81 A4 16 00 00

unregistersymbol(INJECT_SPEED)
unregistersymbol(hook_speed)
unregistersymbol(fSlowMotion)
unregistersymbol(fFastMotion)
unregistersymbol(fShiftFastMotion)
unregistersymbol(vSlowMotionMultiplier)
unregistersymbol(vFastMotionMultiplier)
unregistersymbol(vNormalMotionMultiplier)
unregistersymbol(pSpeedStruct)

dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Engine.dll"+BA279

"Engine.dll"+BA250: 38 91 AD160000  - cmp [ecx+000016AD],dl
"Engine.dll"+BA256: 75 10           - jne Engine.dll+BA268
"Engine.dll"+BA258: 38 91 AF160000  - cmp [ecx+000016AF],dl
"Engine.dll"+BA25E: 75 08           - jne Engine.dll+BA268
"Engine.dll"+BA260: 38 91 AE160000  - cmp [ecx+000016AE],dl
"Engine.dll"+BA266: 74 05           - je Engine.dll+BA26D
"Engine.dll"+BA268: BA 01000000     - mov edx,00000001
"Engine.dll"+BA26D: D9 81 A0160000  - fld dword ptr [ecx+000016A0]
"Engine.dll"+BA273: 88 50 20        - mov [eax+20],dl
"Engine.dll"+BA276: D9 58 18        - fstp dword ptr [eax+18]
// ---------- INJECTING HERE ----------
"Engine.dll"+BA279: D9 81 A4160000  - fld dword ptr [ecx+000016A4]
// ---------- DONE INJECTING  ----------
"Engine.dll"+BA27F: D9 58 1C        - fstp dword ptr [eax+1C]
"Engine.dll"+BA282: 5D              - pop ebp
"Engine.dll"+BA283: C2 0400         - ret 0004
"Engine.dll"+BA286: CC              - int 3
"Engine.dll"+BA287: CC              - int 3
"Engine.dll"+BA288: CC              - int 3
"Engine.dll"+BA289: CC              - int 3
"Engine.dll"+BA28A: CC              - int 3
"Engine.dll"+BA28B: CC              - int 3
"Engine.dll"+BA28C: CC              - int 3
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>53</ID>
          <Description>"F6: Slow Motion"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
fSlowMotion:
  dd 1

[DISABLE]
fSlowMotion:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>117</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"F7: Fast Motion"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
fFastMotion:
  dd 1

[DISABLE]
fFastMotion:
  dd 0


</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>118</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>50</ID>
          <Description>"fShiftFastMotion"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>fShiftFastMotion</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"vSlowMotionMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>vSlowMotionMultiplier</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>51</ID>
          <Description>"vFastMotionMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>vFastMotionMultiplier</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>55</ID>
          <Description>"vNormalMotionMultiplier"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>vNormalMotionMultiplier</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>52</ID>
          <Description>"pSpeedStruct"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSpeedStruct</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"pSpeedStruct+4"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSpeedStruct+4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>65</ID>
          <Description>"pSpeedStruct+8"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pSpeedStruct+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>62</ID>
      <Description>"SCRIPT: Fluid"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason
}

define(_fluid,00001320)
define(_fluid_max,00000164)

[ENABLE]

aobscanmodule(INJECT_FLUID,Game.dll,D9 9E 20 13 00 00 5E) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  // fstp dword ptr [esi+00001320]
  // throw away new value and load from max
  fstp st(0)
  fld dword ptr [esi+_fluid_max]
  fstp dword ptr [esi+_fluid]
  jmp return

INJECT_FLUID:
  jmp code
  nop
return:
registersymbol(INJECT_FLUID)

[DISABLE]

INJECT_FLUID:
  db D9 9E 20 13 00 00

unregistersymbol(INJECT_FLUID)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+D6A49

"Game.dll"+D6A2C: D9 5D 08        - fstp dword ptr [ebp+08]
"Game.dll"+D6A2F: D9 45 08        - fld dword ptr [ebp+08]
"Game.dll"+D6A32: DC 15 30C74C63  - fcom qword ptr [Game.dll+4EC730]
"Game.dll"+D6A38: DFE0            - fnstsw ax
"Game.dll"+D6A3A: F6 C4 05        - test ah,05
"Game.dll"+D6A3D: 7A 04           - jp Game.dll+D6A43
"Game.dll"+D6A3F: DDD8            - fstp st(0)
"Game.dll"+D6A41: D9EE            - fldz
"Game.dll"+D6A43: D9 5D 08        - fstp dword ptr [ebp+08]
"Game.dll"+D6A46: D9 45 08        - fld dword ptr [ebp+08]
// ---------- INJECTING HERE ----------
"Game.dll"+D6A49: D9 9E 20130000  - fstp dword ptr [esi+00001320]
// ---------- DONE INJECTING  ----------
"Game.dll"+D6A4F: 5E              - pop esi
"Game.dll"+D6A50: 8B E5           - mov esp,ebp
"Game.dll"+D6A52: 5D              - pop ebp
"Game.dll"+D6A53: C2 0400         - ret 0004
"Game.dll"+D6A56: CC              - int 3
"Game.dll"+D6A57: CC              - int 3
"Game.dll"+D6A58: CC              - int 3
"Game.dll"+D6A59: CC              - int 3
"Game.dll"+D6A5A: CC              - int 3
"Game.dll"+D6A5B: CC              - int 3
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"SCRIPT: Health Display (Player Pointer)"</Description>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : MarsWarLogs.exe
  Version:
  Date   : 2014-05-03
  Author : Jason

  Find player pointer in code that loads health every frame for display
}

[ENABLE]

aobscanmodule(INJECT_HEALTH_DISPLAY,Game.dll,D8 BE 1C 13 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pPlayer)


newmem:

registersymbol(pPlayer)

pPlayer:
  dd 0

code:
  mov [pPlayer],esi
  fdivr dword ptr [esi+0000131C]
  jmp return

INJECT_HEALTH_DISPLAY:
  jmp code
  nop
return:
registersymbol(INJECT_HEALTH_DISPLAY)

[DISABLE]

INJECT_HEALTH_DISPLAY:
  db D8 BE 1C 13 00 00

dealloc(newmem)

unregistersymbol(INJECT_HEALTH_DISPLAY)
unregistersymbol(pPlayer)

{
// ORIGINAL CODE - INJECTION POINT: "Game.dll"+D3BA2

"Game.dll"+D3B90: DFE0            - fnstsw ax
"Game.dll"+D3B92: DDD9            - fstp st(1)
"Game.dll"+D3B94: F6 C4 44        - test ah,44
"Game.dll"+D3B97: 7A 07           - jp Game.dll+D3BA0
"Game.dll"+D3B99: DDD9            - fstp st(1)
"Game.dll"+D3B9B: 5E              - pop esi
"Game.dll"+D3B9C: 8B E5           - mov esp,ebp
"Game.dll"+D3B9E: 5D              - pop ebp
"Game.dll"+D3B9F: C3              - ret
"Game.dll"+D3BA0: DDD8            - fstp st(0)
// ---------- INJECTING HERE ----------
"Game.dll"+D3BA2: D8 BE 1C130000  - fdivr dword ptr [esi+0000131C]
// ---------- DONE INJECTING  ----------
"Game.dll"+D3BA8: 5E              - pop esi
"Game.dll"+D3BA9: D9 5D FC        - fstp dword ptr [ebp-04]
"Game.dll"+D3BAC: D9 45 FC        - fld dword ptr [ebp-04]
"Game.dll"+D3BAF: 8B E5           - mov esp,ebp
"Game.dll"+D3BB1: 5D              - pop ebp
"Game.dll"+D3BB2: C3              - ret
"Game.dll"+D3BB3: CC              - int 3
"Game.dll"+D3BB4: CC              - int 3
"Game.dll"+D3BB5: CC              - int 3
"Game.dll"+D3BB6: CC              - int 3
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>18</ID>
          <Description>"pPlayer"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pPlayer</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>36</ID>
          <Description>"Feature Points Spent"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>136C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Skill Points Spent"</Description>
          <Color>80000008</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>1368</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Experience"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>1328</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Liquid"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>1320</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>131C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Experience Bonus"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>1054</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Crit Chance"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>4F0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>25</ID>
          <Description>"Weapon Damage"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>340</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>26</ID>
          <Description>"Damage Reduction: Electrical"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>2B0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Damage Reduction: Physical"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>28C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Max Fluid"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>164</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Health Regen (out of combat)"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>148</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Health Regen (Combat)"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pPlayer</Address>
          <Offsets>
            <Offset>100</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>hook_damage</Name>
      <Address>58F5C1CA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hook_inventory</Name>
      <Address>58F1A1E2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hook_fluid</Name>
      <Address>58EE2279</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>hook_health</Name>
      <Address>58EDF3D2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_FP1</Name>
      <Address> 630B658A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_FP2</Name>
      <Address> 630B6D9D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SP</Name>
      <Address> 630B648A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_INVENTORY</Name>
      <Address> 630EE9B2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fSlowMotion</Name>
      <Address>0D4B0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fFastMotion</Name>
      <Address>0D4B0004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fShiftFastMotion</Name>
      <Address>0D4B0008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vSlowMotionMultiplier</Name>
      <Address>0D4B000C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vFastMotionMultiplier</Name>
      <Address>0D4B0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vNormalMotionMultiplier</Name>
      <Address>0D4B0014</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pSpeedStruct</Name>
      <Address>0D4B0018</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_SPEED</Name>
      <Address> 646FA279</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fGod</Name>
      <Address>0D4C0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fOneHitKill</Name>
      <Address>0D4C0004</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>vDamageMultiplier</Name>
      <Address>0D4C0008</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_DAMAGE</Name>
      <Address> 63130A2A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_FLUID</Name>
      <Address> 630B6A49</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pPlayer</Name>
      <Address>0D4E0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT_HEALTH_DISPLAY</Name>
      <Address> 630B3BA2</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
