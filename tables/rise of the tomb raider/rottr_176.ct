<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="25">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Rise of the Tomb Raider"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$Lua}
getAutoAttachList().add('ROTTR.exe')
{$Asm}
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Bow Aim Teleport"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : ROTTR.exe
  Version:
  Date   : 2016-02-07
  Author : mgr.inz.Player
}

[ENABLE]
aobscanmodule(aob_BowAimPosition,ROTTR.exe,66 0F 7F BF 90 0B 00 00) // should be unique
registersymbol(aob_BowAimPosition)
alloc(newmem_BowAimPosition,$1000,ROTTR.exe)
label(code_BowAimPosition)
label(return_BowAimPosition)

aobscanmodule(aob_LaraPositionWrite,ROTTR.exe,49 63 F8 0F 28 79 10) // should be unique
registersymbol(aob_LaraPositionWrite)
label(code_LaraPositionWrite)
label(return_LaraPositionWrite)

label(LaraPositionAddress)
label(plus100)
label(BowAimTeleport)
registersymbol(BowAimTeleport)


newmem_BowAimPosition:
plus100:
dd (float)0 (float)0 (float)100 (float)0

code_BowAimPosition:
  movdqa [rdi+00000B90],xmm7
  cmp [BowAimTeleport],1
  jne @f
  cmp [LaraPositionAddress],0
  je  @f

  push rax
  mov rax,[LaraPositionAddress]
  addps xmm7,[plus100]
  movaps [rax+10],xmm7
  pop rax
  mov [BowAimTeleport],0

  @@:
  jmp return_BowAimPosition

code_LaraPositionWrite:
  mov [LaraPositionAddress],rcx
  movsxd  rdi,r8d
  movaps xmm7,[rcx+10]
  jmp return_LaraPositionWrite

LaraPositionAddress:
dq 0
BowAimTeleport:
dd 0


aob_BowAimPosition:
  jmp code_BowAimPosition
  nop
  nop
  nop
return_BowAimPosition:

aob_LaraPositionWrite:
  jmp code_LaraPositionWrite
  nop
  nop
return_LaraPositionWrite:

[DISABLE]

aob_BowAimPosition:
  db 66 0F 7F BF 90 0B 00 00

unregistersymbol(aob_BowAimPosition)
unregistersymbol(BowAimTeleport)

dealloc(newmem_BowAimPosition)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR.exe"+3ABA9CA

"ROTTR.exe"+3ABA99B: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR.exe"+3ABA99E: 89 87 C0 0C 00 00              -  mov [rdi+00000CC0],eax
"ROTTR.exe"+3ABA9A4: EB 24                          -  jmp ROTTR.exe+3ABA9CA
"ROTTR.exe"+3ABA9A6: 7C 48                          -  jl ROTTR.exe+3ABA9F0
"ROTTR.exe"+3ABA9A8: 89 9F B8 0C 00 00              -  mov [rdi+00000CB8],ebx
"ROTTR.exe"+3ABA9AE: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR.exe"+3ABA9B1: 89 87 C0 0C 00 00              -  mov [rdi+00000CC0],eax
"ROTTR.exe"+3ABA9B7: EB 11                          -  jmp ROTTR.exe+3ABA9CA
"ROTTR.exe"+3ABA9B9: 48 89 9F B8 0C 00 00           -  mov [rdi+00000CB8],rbx
"ROTTR.exe"+3ABA9C0: C7 87 C0 0C 00 00 FF FF FF FF  -  mov [rdi+00000CC0],FFFFFFFF
// ---------- INJECTING HERE ----------
"ROTTR.exe"+3ABA9CA: 66 0F 7F BF 90 0B 00 00        -  movdqa [rdi+00000B90],xmm7
// ---------- DONE INJECTING  ----------
"ROTTR.exe"+3ABA9D2: 48 8B 97 88 0C 00 00           -  mov rdx,[rdi+00000C88]
"ROTTR.exe"+3ABA9D9: 0F 28 BC 24 40 02 00 00        -  movaps xmm7,[rsp+00000240]
"ROTTR.exe"+3ABA9E1: 48 85 D2                       -  test rdx,rdx
"ROTTR.exe"+3ABA9E4: 74 23                          -  je ROTTR.exe+3ABAA09
"ROTTR.exe"+3ABA9E6: 81 FA 20 4E 00 00              -  cmp edx,00004E20
"ROTTR.exe"+3ABA9EC: 73 1B                          -  jae ROTTR.exe+3ABAA09
"ROTTR.exe"+3ABA9EE: 89 D0                          -  mov eax,edx
"ROTTR.exe"+3ABA9F0: 48 8D 0C C0                    -  lea rcx,[rax+rax*8]
"ROTTR.exe"+3ABA9F4: 48 C1 E1 05                    -  shl rcx,05
"ROTTR.exe"+3ABA9F8: 4C 01 E1                       -  add rcx,r12
}


aob_LaraPositionWrite:
  db 49 63 F8 0F 28 79 10

unregistersymbol(aob_LaraPositionWrite)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR.exe"+3A9F453

"ROTTR.exe"+3A9F42E: CC                             -  int 3
"ROTTR.exe"+3A9F42F: CC                             -  int 3
"ROTTR.exe"+3A9F430: 48 89 5C 24 08                 -  mov [rsp+08],rbx
"ROTTR.exe"+3A9F435: 57                             -  push rdi
"ROTTR.exe"+3A9F436: 48 83 EC 50                    -  sub rsp,50
"ROTTR.exe"+3A9F43A: 48 89 CB                       -  mov rbx,rcx
"ROTTR.exe"+3A9F43D: 48 8B 89 38 31 00 00           -  mov rcx,[rcx+00003138]
"ROTTR.exe"+3A9F444: 0F 29 7C 24 30                 -  movaps [rsp+30],xmm7
"ROTTR.exe"+3A9F449: 44 0F 29 44 24 20              -  movaps [rsp+20],xmm8
"ROTTR.exe"+3A9F44F: 44 0F 28 02                    -  movaps xmm8,[rdx]
// ---------- INJECTING HERE ----------
"ROTTR.exe"+3A9F453: 49 63 F8                       -  movsxd  rdi,r8d
"ROTTR.exe"+3A9F456: 0F 28 79 10                    -  movaps xmm7,[rcx+10]
// ---------- DONE INJECTING  ----------
"ROTTR.exe"+3A9F45A: E8 81 CC B0 FF                 -  call ROTTR.exe+35AC0E0
"ROTTR.exe"+3A9F45F: 48 8B 93 38 31 00 00           -  mov rdx,[rbx+00003138]
"ROTTR.exe"+3A9F466: 48 8B 4A 68                    -  mov rcx,[rdx+68]
"ROTTR.exe"+3A9F46A: 49 89 C0                       -  mov r8,rax
"ROTTR.exe"+3A9F46D: 48 B8 00 00 00 00 FF FF FF FF  -  mov rax,FFFFFFFF00000000
"ROTTR.exe"+3A9F477: 48 85 C8                       -  test rax,rcx
"ROTTR.exe"+3A9F47A: 74 45                          -  je ROTTR.exe+3A9F4C1
"ROTTR.exe"+3A9F47C: 48 85 C9                       -  test rcx,rcx
"ROTTR.exe"+3A9F47F: 74 40                          -  je ROTTR.exe+3A9F4C1
"ROTTR.exe"+3A9F481: 81 F9 20 4E 00 00              -  cmp ecx,00004E20
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"hotkey F6"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>BowAimTeleport</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>117</Key>
                  </Keys>
                  <Value>1</Value>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Inventory"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//ROTTR.exe+37B2600 - 4C 8B 81 A8030000     - mov r8,[rcx+000003A8]
//ROTTR.exe+37B9870 - 48 83 B9 28030000 00  - cmp qword ptr [rcx+00000328],00
[ENABLE]
aobscanmodule(aob_inventory_pointerbase,ROTTR.exe,49 83 78 38 00 74 2E) // should be unique
//assert(aob_inventory_pointerbase-7,4C 8B 81 A8 03 00 00)
registersymbol(aob_inventory_pointerbase)
alloc(newmem_inventory_pointerbase,$1000,ROTTR.exe)
label(return_inventory_pointerbase)

label(inventory_pointerbase)
registersymbol(inventory_pointerbase)
label(inventoryMax_pointerbase)
registersymbol(inventoryMax_pointerbase)

newmem_inventory_pointerbase:
  mov [inventoryMax_pointerbase],rcx
  mov r8,[rcx+000003A8]
  mov [inventory_pointerbase],r8
  jmp return_inventory_pointerbase

inventory_pointerbase:
dq 0
inventoryMax_pointerbase:
dq 0

aob_inventory_pointerbase-7:
  jmp newmem_inventory_pointerbase
  nop
  nop
return_inventory_pointerbase:

[DISABLE]
aob_inventory_pointerbase-7:
  db 4C 8B 81 A8 03 00 00

unregistersymbol(aob_inventory_pointerbase)
unregistersymbol(inventory_pointerbase)
unregistersymbol(inventoryMax_pointerbase)
dealloc(newmem_inventory_pointerbase)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Compact View Mode"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
function cycleFullCompact(sender,force)
  local state = not(compactmenuitem.Caption == 'Compact View Mode')
  if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
  getMainForm().Splitter1.Visible = state
  getMainForm().Panel4.Visible    = state
  getMainForm().Panel5.Visible    = state
end
function addCompactMenu()
  if compactmenualreadyexists then return end
  local parent = getMainForm().Menu.Items
  compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem)
  compactmenuitem.Caption = 'Compact View Mode'
  compactmenuitem.OnClick = cycleFullCompact
  compactmenualreadyexists = 'yes'
end
addCompactMenu()
cycleFullCompact(nil,true)
{$asm}

[DISABLE]
{$lua}
cycleFullCompact(nil,false)
{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"inventory_pointerbase"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>inventory_pointerbase</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>6</ID>
              <Description>"Prepare Inventory Map"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

local ItemList_ID_Name = [[
1300392505:Cloth
1596491239:Herbs
1596518693:Hide
73319806:Salvage
1860591193:Mushrooms
516527174:Hardwood
2432172444:Feather
4200658040:Oil
3305195250:Boar Fat
4011968730:Deer Antler
1353721286:Exotic Hide
1358162264:Magnesite Ore
273513695:Bear Hide
1439296855:Technical Parts
3827729073:Byzantine Coins
2546518011:Chromite Ore
54359098:Cluster Arrow
911311014:Bear Trap
1014797730:Explosive Arrow
1410284630:Fire Arrow
1548887417:SMG Bullets
1563807238:Bandage
1764654631:Flashbang
1941840742:Sapling
2288237209:Arrows
2363594663:Handgun Bullet Hollow Point
2631568530:Poison Arrow
2721112983:Shotgun Bullets
2862006737:Grenade
3056299628:Pistol Bullets
3094493228:Endurance Food
3459366600:Spike Trap
4021324121:Fire Shotgun Bullets]]

local ItemList_Known = {}
(ItemList_ID_Name..'\n'):gsub('(%d+):(.-)\n',
  function (c,d)
    ItemList_Known[tonumber(c)]=d..':'
  end)


if syntaxcheck then return end

local al=getAddressList()
local mrPrepareInventory=al.getMemoryRecordByDescription('Prepare Inventory Map')
local Inventory_ArrayOfPointers=0

local function prepareInventoryMap()
  Inventory_ArrayOfPointers = readQword('[inventory_pointerbase]+28')
  Inventory_totalCount = readInteger('[inventory_pointerbase]+38')
  local InventoryMax_ArrayOfPointers = readQword('[inventoryMax_pointerbase]+318')
  local InventoryMax_LoopCount = readQword('[inventoryMax_pointerbase]+330')

  --[[ debug
  print('')
  print('Inventory_ArrayOfPointers '..tohex(Inventory_ArrayOfPointers))
  print('Inventory_totalCount '..Inventory_totalCount)
  print('InventoryMax_ArrayOfPointers '..tohex(InventoryMax_ArrayOfPointers))
  print('InventoryMax_LoopCount '..InventoryMax_LoopCount)
  --]]

  while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end

  if Inventory_totalCount&gt;200 or InventoryMax_LoopCount&gt;200 then return end     --nope

  local function addmemrec(parent,address,max)
    local ID = readInteger(address)
    if ItemList_Known[ID]==nil then return end
    local newmrID=al.createMemoryRecord()
    local newmrCount=al.createMemoryRecord()
    newmrID.Address = string.format('%X',address)
    newmrID.Description = ItemList_Known[ID]
    newmrID.ShowAsSigned = false
    newmrID.DropDownList.Text = ItemList_ID_Name
    newmrID.DropDownReadOnly = true
    newmrID.DropDownDescriptionOnly = true
    newmrID.DisplayAsDropDownListItem = true
    newmrID.appendToEntry(parent)
    newmrCount.Address = string.format('%X',address+0x4)
    newmrCount.Description = 'count:'
    newmrCount.appendToEntry(newmrID)

    if max then
     local newmrMAX=al.createMemoryRecord()
     newmrMAX.Address = string.format('%X',max)
     newmrMAX.Description = 'max:'
     newmrMAX.appendToEntry(newmrID)
    end
  end

  local items = {}

  local currentItemIndex=0
  for i=Inventory_ArrayOfPointers,Inventory_ArrayOfPointers+1600,8 do
  repeat
    local innerArray = readQword(i)
    if innerArray==0 or readInteger(innerArray)==nil then break end --continue
    currentItemIndex=currentItemIndex+1
    items[1+#items] = {address = innerArray+0x8, type = readInteger(innerArray+0x8)}

    local innerInnerArray = readQword(innerArray)
    while innerInnerArray~=0 and innerInnerArray~=nil do
      currentItemIndex=currentItemIndex+1
      items[1+#items] = {address = innerInnerArray+0x8, type = readInteger(innerInnerArray+0x8)}
      innerInnerArray = readQword(innerInnerArray)
    end
  until true
  if currentItemIndex==Inventory_totalCount then break end
  end

  local max = {}
  ---[[
  for i=0,InventoryMax_LoopCount-1 do
  repeat
    local max_innerArray = readQword(InventoryMax_ArrayOfPointers+i*8)
    if max_innerArray==0 or readInteger(max_innerArray)==nil then break end --continue
    max[readInteger(max_innerArray+0x8)] = max_innerArray+0xC

    local max_innerInnerArray = readQword(max_innerArray)
    while max_innerInnerArray~=0 and max_innerInnerArray~=nil do
      max[readInteger(max_innerInnerArray+0x8)] = max_innerInnerArray+0xC
      max_innerInnerArray = readQword(max_innerInnerArray)
    end

  until true
  end
  --]]

  for i,v in ipairs(items) do
    addmemrec(mrPrepareInventory,v.address,max[v.type])
  end
end

if timerPrepareInventory==nil then timerPrepareInventory=createTimer(nil,false) end
timerPrepareInventory.OnTimer =
  function (t)
    local tmp=readQword('[inventory_pointerbase]+28')
    if (tmp == nil) or (tmp == 0) then return end

    if (Inventory_ArrayOfPointers == tmp ) and
       (Inventory_totalCount == readQword('[inventory_pointerbase]+38'))
    then return end

    prepareInventoryMap()
  end
timerPrepareInventory.Interval=500
timerPrepareInventory.Enabled=true

local mr1=al.createMemoryRecord()
local mr2=al.createMemoryRecord()
mr1.appendToEntry(mrPrepareInventory)
mr2.appendToEntry(mrPrepareInventory)
mr1.Description = "Do something in game:"
mr2.Description = "aim, open inventory, etc."
{$asm}

[DISABLE]
{$lua}
if syntaxcheck then return end
timerPrepareInventory.Enabled=false
local al=getAddressList()
local mrPrepareInventory=al.getMemoryRecordByDescription('Prepare Inventory Map')
while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end
{$asm}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
