<?xml version="1.0"?>
<CheatTable CheatEngineTableVersion="11">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Commander_Conquest_Americas_V1034_Script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Commander - Conquest of the Americas
 Game Version  : 1.034
 Script Version: 1.0
 CE Version    : 6.0
 Money, Warehouse, Colonists, Soldiers, Colony Morale, Building Construction,
 Ship construction, Ship hull, Ship Sail, Ship Crew, Ship Ammo and Marines
 29-Jan-2011 Release for V1.034
 By Recifense
===========================================
}

[ENABLE]
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert("Commander.exe"+1cba8d,8b 88 b0 00 00 00)
assert("Commander.exe"+136ade,8b 88 80 01 00 00)
assert("Commander.exe"+1328c8,8b 82 e4 01 00 00)
assert("Commander.exe"+132944,8b 88 f8 01 00 00)
assert("Commander.exe"+231f83,8b 32 80 7e 20 00)
assert("Commander.exe"+2cf6b2,8b 80 78 01 00 00)
assert("Commander.exe"+2cf71f,8d 8c 24 60 02 00 00)
assert("Commander.exe"+0c87db,8b 82 14 01 00 00)
assert("Commander.exe"+0c8af6,29 98 18 01 00 00)
assert("Commander.exe"+0c8b33,8b aa 3c 01 00 00)
assert("Commander.exe"+0be098,8b 82 3c 01 00 00)
assert("Commander.exe"+1c2dfb,89 81 c8 00 00 00)
assert("Commander.exe"+24ed2a,29 90 48 01 00 00)
assert("Commander.exe"+0c8a4d,8b a9 90 00 00 00)
assert("Commander.exe"+0b14bc,8b 90 90 00 00 00)
//"Commander.exe"+0bf5c4
//"Commander.exe"+082ec7

//=========================================
alloc(MyCode,1024)
//=========================================
// Declaration section
label(_MonMoney)
label(_BackMM)
label(_ExitMM)
label(_MonWarehouse)
label(_BackMW)
label(_ExitMW)
label(_MonColonists)
label(_BackMC)
label(_ExitMC)
label(_MonC0)
label(_MonColonyMorale)
label(_BackMCM)
label(_ExitMCM)
label(_MonBuildingConstruction)
label(_BackMBC)
label(_ExitMBC)
label(_MonShipConstruction1)
label(_BackMSC1)
label(_MonShipConstruction2)
label(_BackMSC2)
label(_ExitMSC2)
label(_MonSC20)
label(_MonSC21)
label(_MonShipHull)
label(_BackMSH)
label(_ExitMSH)
label(_MonShipSail)
label(_BackMSS)
label(_ExitMSS)
label(_MonShipCrew)
label(_BackMSCw)
label(_ExitMSCw)
label(_MonShipAmmo)
label(_BackMSA)
label(_ExitMSA)
label(_MonSA0)
label(_MonShip)
label(_BackMS)
label(_MonShipMarines)
label(_BackMSM)
label(_ExitMSM)
label(_MonShipMarines1)
label(_BackMSM1)
label(_ExitMSM1)
label(_MonShipMarines2)
label(_BackMSM2)
label(_ExitMSM2)
label(_MonShipInCombat)
label(_BackMSI)
label(_ExitMSI)
label(_MonCannons)
label(_BackMCa)
label(_ExitMCa)
label(_MonCannons1)
label(_BackMCa1)
label(_ExitMCa1)
label(pMoney)
label(pItem)
label(pColonists)
label(pCurDate)
label(pShipyard)
label(pShip)
label(iEnableMM)
label(iEnableMW)
label(iEnableMC)
label(iEnableMCM)
label(iEnableMBC)
label(iEnableMSC)
label(iEnableGM)
label(iEnableMA)
label(iOwnerID)

registersymbol(MyCode)
registersymbol(pMoney)
registersymbol(pItem)
registersymbol(pColonists)
registersymbol(pShip)
registersymbol(iEnableMM)
registersymbol(iEnableMW)
registersymbol(iEnableMC)
registersymbol(iEnableMCM)
registersymbol(iEnableMBC)
registersymbol(iEnableMSC)
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iOwnerID)

//=========================================
MyCode:
//========================================= ok!
_MonMoney:
 mov [pMoney],eax

 cmp dword ptr [iEnableMM],0
 je _ExitMM

 mov ecx,#500000
 cmp ecx,[eax+000000B0]
 jle _ExitMM

 mov [eax+000000B0],ecx

_ExitMM:
 mov ecx,[eax+000000B0]
 jmp _BackMM

//========================================= ok!
_MonWarehouse:
 mov [pItem],eax

 cmp dword ptr [iEnableMW],0
 je _ExitMW

 mov ecx,#101
 cmp ecx,[eax+00000180]
 jle _ExitMW

 mov [eax+00000180],ecx

_ExitMW:
 cmp dword ptr [eax+00000180],00
 jmp _BackMW

//========================================= ok!
_MonColonists:
 mov [pColonists],edx

 cmp dword ptr [iEnableMC],0
 je _ExitMC

 mov eax,#2500
 cmp eax,[edx+000001E4]
 jle _MonC0

 mov [edx+000001E4],eax

_MonC0:
 mov eax,#250
 cmp eax,[edx+000001E8]
 jle _ExitMC

 mov [edx+000001E8],eax

_ExitMC:
 mov eax,[edx+000001E4]
 jmp _BackMC

//========================================= ok!
_MonColonyMorale:
 mov ecx,[eax+000001F8]

 cmp dword ptr [iEnableMCM],0
 je _ExitMCM

 cmp dword ptr [ecx+08],(float)80.0
 jge _ExitMCM

 mov dword ptr [ecx+08],(float)80.0
 mov dword ptr [ecx+0c],(float)80.0

_ExitMCM:
 jmp _BackMCM

//========================================= ok!
_MonBuildingConstruction:
 mov esi,[edx]

 cmp dword ptr [iEnableMBC],0
 je _ExitMBC

 cmp dword ptr [esi+24],0
 je _ExitMBC

 mov dword ptr [esi+24],1

_ExitMBC:
 cmp byte ptr [esi+20],00
 jmp _BackMBC

//========================================= ok!
_MonShipConstruction1:
 mov [pShipyard],ebx

 mov eax,[eax+00000178]
 jmp _BackMSC1

//========================================= ok!
// EBX = #Months
_MonShipConstruction2:
 push eax
 push ebx
 push edi
 push esi

 cmp dword ptr [iEnableMSC],0
 je _ExitMSC2

 mov esi,[pShipyard]

 dec ebx

 mov ecx,[esi+34]
 mov eax,[esi+30]

_MonSC20:
 cmp ebx,eax
 jl _MonSC21

 dec ecx
 lea eax,[eax+0c]
 jmp _MonSC20

_MonSC21:
 sub eax,ebx
 mov [esi+30],eax
 mov [esi+34],ecx

_ExitMSC2:
 pop esi
 pop edi
 pop ebx
 pop eax

 lea ecx,[esp+00000260]
 jmp _BackMSC2

//========================================= ok!
_MonShipHull:
 cmp dword ptr [iEnableGM],0
 je _ExitMSH

 mov eax,[ecx+0000008c]
 test eax,eax
 jz _ExitMSH

 mov eax,[eax+1c]

 cmp eax,[iOwnerID]
 jne _ExitMSH

 xor ebp,ebp
 mov [esp+00000080],ebp

_ExitMSH:
 mov eax,[edx+00000114]
 jmp _BackMSH

//========================================= ok!
_MonShipSail:
 cmp dword ptr [iEnableGM],0
 je _ExitMSS

 mov ecx,[edx+0000008c]
 test ecx,ecx
 jz _ExitMSS

 mov ecx,[ecx+1c]

 cmp ecx,[iOwnerID]
 jne _ExitMSS

 xor ebx,ebx
 mov [esp+18],ebx
 mov [esp+1C],ebx

_ExitMSS:
 sub [eax+00000118],ebx
 jmp _BackMSS

//========================================= ok!
_MonShipCrew:
 cmp dword ptr [iEnableGM],0
 je _ExitMSCw

 mov ebp,[ecx+0000008c]
 test ebp,ebp
 jz _ExitMSCw

 mov ebp,[ebp+1c]

 cmp ebp,[iOwnerID]
 jne _ExitMSCw

 mov ebp,[edx+00000134]

 cmp ebp,[edx+0000013C]
 jle _ExitMSCw

 mov [edx+0000013C],ebp

_ExitMSCw:
 mov ebp,[edx+0000013C]
 jmp _BackMSCw

//========================================= ok!
_MonShipAmmo:
 mov eax,[ecx+0000008c]
 test eax,eax
 jz _ExitMSA

 mov eax,[eax+1c]

 cmp eax,[iOwnerID]
 jne _ExitMSA

 cmp dword ptr [iEnableMA],0
 je _MonSA0

 mov eax,[edx+0000019c]
 mov [edx+000001Ac],eax
 mov eax,[edx+000001a0]
 mov [edx+000001b0],eax
 mov eax,[edx+000001a4]
 mov [edx+000001b4],eax

_MonSA0:
 cmp dword ptr [iEnableGM],0
 je _ExitMSA

 mov eax,[edx+00000150]
 mov [edx+0000014c],eax

 mov dword ptr [ecx+000000b4],0
 mov dword ptr [ecx+000000b8],0

 mov eax,[edx+00000134]
 cmp eax,[edx+0000013c]
 jle _ExitMSA

 mov [edx+0000013c],eax

_ExitMSA:
 mov eax,[edx+0000013C]
 jmp _BackMSA

//========================================= ok!
_MonShip:
 mov [pShip],eax

 mov [ecx+000000C8],eax
 jmp _BackMS

//========================================= ok!
_MonShipMarines:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM

 mov eax,[ecx+0000008c]
 test eax,eax
 jz _ExitMSM

 mov eax,[eax+1c]

 cmp eax,[iOwnerID]
 jne _ExitMSM

 xor edx,edx

_ExitMSM:
 mov eax,[ecx+00000090]
 sub [eax+00000148],edx
 jmp _BackMSM

//========================================= ok!
_MonShipMarines1:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM1

 mov ebp,[ecx+0000008c]
 test ebp,ebp
 jz _ExitMSM1

 mov ebp,[ebp+1c]

 cmp ebp,[iOwnerID]
 jne _ExitMSM1

 xor ebx,ebx
 mov [esp+00000080],ebx
 mov [esp+00000018],ebx
 mov [esp+0000001c],ebx
 mov [esi+000014d8],ebx
 mov [esi+000014dc],ebx

_ExitMSM1:
 mov ebp,[ecx+00000090]
 jmp _BackMSM1

//========================================= ok!
_MonShipMarines2:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM2

 mov edx,[eax+0000008c]
 test edx,edx
 jz _ExitMSM2

 mov edx,[edx+1c]

 cmp edx,[iOwnerID]
 jne _ExitMSM2

 xor ebx,ebx
 xor edi,edi
 xor ecx,ecx

_ExitMSM2:
 mov edx,[eax+00000090]
 jmp _BackMSM2

//========================================= ok!
_MonShipInCombat:
 mov [pShip],edx

 mov eax,[edx+0000008c]
 test eax,eax
 jz _ExitMSI

 mov eax,[eax+1c]
 mov [iOwnerID],eax

_ExitMSI:
 mov eax,[edx+00000090]
 jmp _BackMSI

//========================================= ok!
_MonCannons:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa

 mov eax,[ebp+000014a0]
 test eax,eax
 jz _ExitMCa

 mov eax,[eax+0000008c]
 test eax,eax
 jz _ExitMCa

 mov eax,[eax+1c]

 cmp eax,[iOwnerID]
 jne _ExitMCa

 mov al,#100
 mov [edx+esi+38],al

_ExitMCa:
 cmp byte ptr [edx+esi+38],00
 jmp _BackMCa

//========================================= ok!
_MonCannons1:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa1

 mov eax,[edi+000014a0]
 test eax,eax
 jz _ExitMCa1

 mov eax,[eax+0000008c]
 test eax,eax
 jz _ExitMCa1

 mov eax,[eax+1c]

 cmp eax,[iOwnerID]
 jne _ExitMCa1

 mov al,#100
 mov [ebp+38],al

_ExitMCa1:
 cmp byte ptr [ebp+38],00
 xorps xmm0,xmm0
 jmp _BackMCa1

//=========================================
// Variables
iEnableMM:
 dd 1
iEnableMW:
 dd 1
iEnableMC:
 dd 1
iEnableMCM:
 dd 1
iEnableMBC:
 dd 1
iEnableMSC:
 dd 1
iEnableGM:
 dd 1
iEnableMA:
 dd 1
pMoney:
 dd 0
pItem:
 dd 0
pColonists:
 dd 0
pCurDate:
 dd 0
pShipyard:
 dd 0
pShip:
 dd 0
iOwnerID:
 dd 0

//=========================================
// Hacking Points
"Commander.exe"+1cba8d:
 jmp _MonMoney
 nop
_BackMM:

"Commander.exe"+136a3b:
 jmp _MonWarehouse
 nop
 nop
_BackMW:

"Commander.exe"+1328c8:
 jmp _MonColonists
 nop
_BackMC:

"Commander.exe"+132944:
 jmp _MonColonyMorale
 nop
_BackMCM:

"Commander.exe"+231f83:
 jmp _MonBuildingConstruction
 nop
_BackMBC:

"Commander.exe"+2cf6b2:
 jmp _MonShipConstruction1
 nop
_BackMSC1:

"Commander.exe"+2cf71f:
 jmp _MonShipConstruction2
 nop
 nop
_BackMSC2:

"Commander.exe"+0c87db:
 jmp _MonShipHull
 nop
_BackMSH:

"Commander.exe"+0c8af6:
 jmp _MonShipSail
 nop
_BackMSS:

"Commander.exe"+0c8b33:
 jmp _MonShipCrew
 nop
_BackMSCw:

"Commander.exe"+0be098:
 jmp _MonShipAmmo
 nop
_BackMSA:

"Commander.exe"+1c2dfb:
 jmp _MonShip
 nop
_BackMS:

"Commander.exe"+24ed2a:
 jmp _MonShipMarines
 nop
_BackMSM:

"Commander.exe"+0c8a4d:
 jmp _MonShipMarines1
 nop
_BackMSM1:

"Commander.exe"+0b14bc:
 jmp _MonShipMarines2
 nop
_BackMSM2:

"Commander.exe"+1d2ac1:
 jmp _MonShipInCombat
 nop
_BackMSI:

"Commander.exe"+0bf5c4:
 jmp _MonCannons
_BackMCa:

"Commander.exe"+082ec7:
 jmp _MonCannons1
 nop
 nop
_BackMCa1:

//=========================================
// Original Codes
[DISABLE]
"Commander.exe"+1cba8d:
 mov ecx,[eax+000000B0]

"Commander.exe"+136a3b:
 cmp dword ptr [eax+00000180],00

"Commander.exe"+1328c8:
 mov eax,[edx+000001E4]

"Commander.exe"+132944:
 mov ecx,[eax+000001F8]

"Commander.exe"+231f83:
 mov esi,[edx]
 cmp byte ptr [esi+20],00

"Commander.exe"+2cf6b2:
 mov eax,[eax+00000178]

"Commander.exe"+2cf71f:
 lea ecx,[esp+00000260]

"Commander.exe"+0c87db:
 mov eax,[edx+00000114]

"Commander.exe"+0c8af6:
 sub [eax+00000118],ebx

"Commander.exe"+0c8b33:
 mov ebp,[edx+0000013C]

"Commander.exe"+0be098:
 mov eax,[edx+0000013C]

"Commander.exe"+1c2dfb:
 mov [ecx+000000C8],eax

"Commander.exe"+24ed2a:
 sub [eax+00000148],edx

"Commander.exe"+0c8a4d:
 mov ebp,[ecx+00000090]

"Commander.exe"+0b14bc:
 mov edx,[eax+00000090]

"Commander.exe"+1d2ac1:
 mov eax,[edx+00000090]

"Commander.exe"+0bf5c4:
 cmp byte ptr [esi+edx+38],00

"Commander.exe"+082ec7:
 cmp byte ptr [ebp+38],00
 xorps xmm0,xmm0

unregistersymbol(MyCode)
unregistersymbol(pMoney)
unregistersymbol(pItem)
unregistersymbol(pColonists)
unregistersymbol(pShip)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMW)
unregistersymbol(iEnableMC)
unregistersymbol(iEnableMCM)
unregistersymbol(iEnableMBC)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iOwnerID)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Commander_Conquest_Americas_V1034_Script_AOB"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Commander - Conquest of the Americas
 Game Version  : 1.034
 Script Version: 1.0
 CE Version    : 6.1
 Money, Warehouse, Colonists, Soldiers, Colony Morale, Building Construction,
 Ship construction, Ship hull, Ship Sail, Ship Crew, Ship Ammo and Marines
 29-Jan-2011 Release for V1.034
 17-Mar-2012 AOB version for v1.034
===========================================
}

[ENABLE]
//=========================================
alloc(MyCode,1024)
//=========================================

AOBScan(aobMonMoney,8b 88 b0 00 00 00 51 8b 8f d0 00 00 00)
AOBScan(aobMonWarehouse,83 b8 80 01 00 00 00 ?? ?? c7 46 74 00 00 00)
AOBScan(aobMonColonists,8b 82 e4 01 00 00 8b 8f dc 00 00 00 50)
AOBScan(aobMonColonyMorale,8b 88 f8 01 00 00 55 ?? ?? ?? ?? ?? 51)
AOBScan(aobMonBuildingConstruction,8b 32 80 7e 20 00 ?? ?? 40 83 c2 04)
AOBScan(aobMonShipConstruction1,8b 80 78 01 00 00 3b f1 ?? ?? 2b 43 30 8b f8)
AOBScan(aobMonShipConstruction2,8d 8c 24 60 02 00 00 c7 84 24 7c 02 00 00 01 00 00 00)
AOBScan(aobMonShipHull,8b 82 14 01 00 00 2b c5 8b ca 89 81 14 01 00 00)
AOBScan(aobMonShipSail,29 98 18 01 00 00 8b 86 a0 14 00 00 8b 88 90 00 00 00)
AOBScan(aobMonShipCrew,8b aa 3c 01 00 00 ?? ?? ?? ?? ?? 3b e8)
AOBScan(aobMonShipAmmo,8b 82 3c 01 00 00 89 44 24 04 db 44 24 04)
AOBScan(aobMonShip,89 81 c8 00 00 00 ?? ?? ?? ?? ?? 33 c0 8b 4c)
AOBScan(aobMonShipMarines,29 90 48 01 00 00 29 51 14 b8 00 00 00)
AOBScan(aobMonShipMarines1,8b a9 90 00 00 00 83 bd 48 01 00 00 00)
AOBScan(aobMonShipMarines2,8b 90 90 00 00 00 39 9a 48 01 00 00 ?? ?? 8b d0)
AOBScan(aobMonShipInCombat,8b 82 90 00 00 00 d9 80 4c 01 00 00 6a 00 51)
AOBScan(aobMonCannons,80 7c ?? 38 00 8d 44 16 38 ?? ?? 5f 5e 5d)
AOBScan(aobMonCannons1,80 7d 38 00 0f 57 c0 0f 8f)

//=========================================
// Declaration section
label(pMonMoney)
label(pMonWarehouse)
label(pMonColonists)
label(pMonColonyMorale)
label(pMonBuildingConstruction)
label(pMonShipConstruction1)
label(pMonShipConstruction2)
label(pMonShipHull)
label(pMonShipSail)
label(pMonShipCrew)
label(pMonShipAmmo)
label(pMonShip)
label(pMonShipMarines)
label(pMonShipMarines1)
label(pMonShipMarines2)
label(pMonShipInCombat)
label(pMonCannons)
label(pMonCannons1)

label(_MonMoney)
label(_BackMM)
label(_ExitMM)
label(_MonWarehouse)
label(_BackMW)
label(_ExitMW)
label(_MonColonists)
label(_BackMC)
label(_ExitMC)
label(_MonC0)
label(_MonColonyMorale)
label(_BackMCM)
label(_ExitMCM)
label(_MonBuildingConstruction)
label(_BackMBC)
label(_ExitMBC)
label(_MonShipConstruction1)
label(_BackMSC1)
label(_MonShipConstruction2)
label(_BackMSC2)
label(_ExitMSC2)
label(_MonSC20)
label(_MonSC21)
label(_MonShipHull)
label(_BackMSH)
label(_ExitMSH)
label(_MonShipSail)
label(_BackMSS)
label(_ExitMSS)
label(_MonShipCrew)
label(_BackMSCw)
label(_ExitMSCw)
label(_MonShipAmmo)
label(_BackMSA)
label(_ExitMSA)
label(_MonShip)
label(_BackMS)
label(_MonShipMarines)
label(_BackMSM)
label(_ExitMSM)
label(_MonShipMarines1)
label(_BackMSM1)
label(_ExitMSM1)
label(_MonShipMarines2)
label(_BackMSM2)
label(_ExitMSM2)
label(_MonShipInCombat)
label(_BackMSI)
label(_ExitMSI)
label(_MonCannons)
label(_BackMCa)
label(_ExitMCa)
label(_MonCannons1)
label(_BackMCa1)
label(_ExitMCa1)
label(pMoney)
label(pItem)
label(pColonists)
label(pCurDate)
label(pShipyard)
label(pShip)
label(iEnableMM)
label(iEnableMW)
label(iEnableMC)
label(iEnableMCM)
label(iEnableMBC)
label(iEnableMSC)
label(iEnableGM)
label(iEnableMA)
label(iOwnerID)

registersymbol(MyCode)
registersymbol(pMoney)
registersymbol(pItem)
registersymbol(pColonists)
registersymbol(pShip)
registersymbol(iEnableMM)
registersymbol(iEnableMW)
registersymbol(iEnableMC)
registersymbol(iEnableMCM)
registersymbol(iEnableMBC)
registersymbol(iEnableMSC)
registersymbol(iEnableGM)
registersymbol(iEnableMA)
registersymbol(iOwnerID)

registersymbol(pMonMoney)
registersymbol(pMonWarehouse)
registersymbol(pMonColonists)
registersymbol(pMonColonyMorale)
registersymbol(pMonBuildingConstruction)
registersymbol(pMonShipConstruction1)
registersymbol(pMonShipConstruction2)
registersymbol(pMonShipHull)
registersymbol(pMonShipSail)
registersymbol(pMonShipCrew)
registersymbol(pMonShipAmmo)
registersymbol(pMonShip)
registersymbol(pMonShipMarines)
registersymbol(pMonShipMarines1)
registersymbol(pMonShipMarines2)
registersymbol(pMonShipInCombat)
registersymbol(pMonCannons)
registersymbol(pMonCannons1)

//=========================================
MyCode:
//========================================= ok!
_MonMoney:
 mov [pMoney],eax                  // Save ptr for debugging

 cmp dword ptr [iEnableMM],0
 je _ExitMM                        // Jump if feature is disabled

 mov ecx,#500000                   // Get minimum money value
 cmp ecx,[eax+000000B0]            // Current money &gt;= minimum?
 jle _ExitMM                       // Jump if true

 mov [eax+000000B0],ecx            // Update money

_ExitMM:
 mov ecx,[eax+000000B0]            // Original code (rds money)
 jmp _BackMM                       // Back to main code

//========================================= ok!
_MonWarehouse:
 mov [pItem],eax                   // Save ptr for debugging

 cmp dword ptr [iEnableMW],0
 je _ExitMW                        // Jump if feature is disabled

 mov ecx,#101                      // Get minimum item value
 cmp ecx,[eax+00000180]            // Current value &gt;= minimum?
 jle _ExitMW                       // Jump if true

 mov [eax+00000180],ecx            // Update item value

_ExitMW:
 cmp dword ptr [eax+00000180],00   // Original code (rds item value)
 jmp _BackMW                       // Back to main code

//========================================= ok!
_MonColonists:
 mov [pColonists],edx              // Save ptr for debugging

 cmp dword ptr [iEnableMC],0
 je _ExitMC                        // Jump if feature is disabled

 mov eax,#2500                     // Get minimum Colonists
 cmp eax,[edx+000001E4]            // Current value &gt;= minimum?
 jle _MonC0                        // Jump if true

 mov [edx+000001E4],eax            // Update Colonists

_MonC0:
 mov eax,#250                      // Get minimum Soldiers
 cmp eax,[edx+000001E8]            // Current value &gt;= minimum?
 jle _ExitMC                       // Jump if true

 mov [edx+000001E8],eax            // Update Soldiers

_ExitMC:
 mov eax,[edx+000001E4]            // Original code (rds colonists)
 jmp _BackMC                       // Back to main code

//========================================= ok!
_MonColonyMorale:
 mov ecx,[eax+000001F8]            // Original code (rds pMorale)

 cmp dword ptr [iEnableMCM],0
 je _ExitMCM                       // Jump if feature is disabled

 cmp dword ptr [ecx+08],(float)80.0 // Current value &gt;= minimum?
 jge _ExitMCM                      // Jump if true

 mov dword ptr [ecx+08],(float)80.0 // Update Morale
 mov dword ptr [ecx+0c],(float)80.0 // Update Morale

_ExitMCM:
 jmp _BackMCM                      // Back to main code

//========================================= ok!
_MonBuildingConstruction:
 mov esi,[edx]                     // Original code (rds pBuilding)

 cmp dword ptr [iEnableMBC],0
 je _ExitMBC                       // Jump if feature is disabled

 cmp dword ptr [esi+24],0          // Is it complete?
 je _ExitMBC                       // Jump if true

 mov dword ptr [esi+24],1          // Just one more month

_ExitMBC:
 cmp byte ptr [esi+20],00          // Original code (checks underconstruction)
 jmp _BackMBC                      // Back to main code

//========================================= ok!
_MonShipConstruction1:
 mov [pShipyard],ebx

 mov eax,[eax+00000178]            // Original code
 jmp _BackMSC1                     // Back to main code

//========================================= ok!
// EBX = #Months
_MonShipConstruction2:
 push eax
 push ebx
 push edi
 push esi

 cmp dword ptr [iEnableMSC],0
 je _ExitMSC2                      // Jump if feature is disabled

 mov esi,[pShipyard]

 dec ebx                           // # of months - 1

 mov ecx,[esi+34]                  // Get currrent year
 mov eax,[esi+30]                  // Get current month

_MonSC20:
 cmp ebx,eax                       // Could it be this year?
 jl _MonSC21                       // Jump if true

 dec ecx                           // Decrease year by 1
 lea eax,[eax+0c]                  // Add 12 months
 jmp _MonSC20

_MonSC21:
 sub eax,ebx                       // Month = Current Month - Remaining Months
 mov [esi+30],eax                  // Update Month of Const Start
 mov [esi+34],ecx                  // Update Year  of Const Start

_ExitMSC2:
 pop esi
 pop edi
 pop ebx
 pop eax

 lea ecx,[esp+00000260]           // Original code
 jmp _BackMSC2                    // Back to main code

//========================================= ok!
_MonShipHull:
 cmp dword ptr [iEnableGM],0
 je _ExitMSH                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSH                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSH                      // Jump if false

 xor ebp,ebp                       // Make value2decrease = 0
 mov [esp+00000080],ebp            // Damage = 0

_ExitMSH:
 mov eax,[edx+00000114]            // Original code (rds HULL HP)
 jmp _BackMSH                      // Back to main code

//========================================= ok!
_MonShipSail:
 cmp dword ptr [iEnableGM],0
 je _ExitMSS                       // Jump if feature is disabled

 mov ecx,[edx+0000008c]            // Get pointer to Fleet
 test ecx,ecx
 jz _ExitMSS                       // Jump if invalid pointer

 mov ecx,[ecx+1c]                  // Get ship's owner ID

 cmp ecx,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSS                      // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 mov [esp+18],ebx                  // Sail Damage = 0
 mov [esp+1C],ebx                  // Crew Damage = 0

_ExitMSS:
 sub [eax+00000118],ebx            // Original code (decs SAIL HP)
 jmp _BackMSS                      // Back to main code

//========================================= ok!
_MonShipCrew:
 cmp dword ptr [iEnableGM],0
 je _ExitMSCw                      // Jump if feature is disabled

 mov ebp,[ecx+0000008c]            // Get pointer to Fleet
 test ebp,ebp
 jz _ExitMSCw                      // Jump if invalid pointer

 mov ebp,[ebp+1c]                  // Get ship's owner ID

 cmp ebp,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSCw                     // Jump if false

 mov ebp,[edx+00000134]            // Get maximum CREW

 cmp ebp,[edx+0000013C]
 jle _ExitMSCw

 mov [edx+0000013C],ebp            // Update current CREW

_ExitMSCw:
 mov ebp,[edx+0000013C]            // Original code (rds CREW)
 jmp _BackMSCw                     // Back to main code

//========================================= ok!
_MonShipAmmo:
 cmp dword ptr [iEnableMA],0
 je _ExitMSA                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSA                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSA                      // Jump if false

 mov eax,[edx+0000019c]            // Get maximum Solid Shot
 mov [edx+000001Ac],eax            // Update current Solid Shot
 mov eax,[edx+000001a0]            // Get maximum Grape Shot
 mov [edx+000001b0],eax            // Update current Grape Shot
 mov eax,[edx+000001a4]            // Get maximum Chain Shot
 mov [edx+000001b4],eax            // Update current Chain Shot

 cmp dword ptr [iEnableGM],0
 je _ExitMSA                       // Jump if feature is disabled

 mov eax,[edx+00000150]            // Get maximum Morale
 mov [edx+0000014c],eax            // Update Morale

 mov dword ptr [ecx+000000b4],0    // Status = OK
 mov dword ptr [ecx+000000b8],0    // Status = OK

 mov eax,[edx+00000134]            // Get Base Crew
 cmp eax,[edx+0000013c]            // Current Crew
 jle _ExitMSA

 mov [edx+0000013c],eax            // Update current crew

_ExitMSA:
 mov eax,[edx+0000013C]            // Original code (rds CREW)
 jmp _BackMSA                      // Back to main code

//========================================= ok!
// Selected Ship on Ship Info Screen
_MonShip:
 mov [pShip],eax

 mov [ecx+000000C8],eax            // Original code
 jmp _BackMS                       // Back to main code

//========================================= ok!
_MonShipMarines:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM                       // Jump if feature is disabled

 mov eax,[ecx+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMSM                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM                      // Jump if false

 xor edx,edx                       // Make value2decrease = 0

_ExitMSM:
 mov eax,[ecx+00000090]            // Gets ptr to shipinfo
 sub [eax+00000148],edx            // Original code (decs Marines)
 jmp _BackMSM                      // Back to main code

//========================================= ok!
_MonShipMarines1:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM1                      // Jump if feature is disabled

 mov ebp,[ecx+0000008c]            // Get pointer to Fleet
 test ebp,ebp
 jz _ExitMSM1                      // Jump if invalid pointer

 mov ebp,[ebp+1c]                  // Get ship's owner ID

 cmp ebp,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM1                     // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 mov [esp+00000080],ebx            // Damage = 0
 mov [esp+00000018],ebx            // Damage = 0
 mov [esp+0000001c],ebx            // Damage = 0
 mov [esi+000014d8],ebx            // Status = ok
 mov [esi+000014dc],ebx            // Status = ok

_ExitMSM1:
 mov ebp,[ecx+00000090]            // Gets ptr to shipinfo
 jmp _BackMSM1                     // Back to main code

//========================================= ok!
_MonShipMarines2:
 cmp dword ptr [iEnableGM],0
 je _ExitMSM2                      // Jump if feature is disabled

 mov edx,[eax+0000008c]            // Get pointer to Fleet
 test edx,edx
 jz _ExitMSM2                      // Jump if invalid pointer

 mov edx,[edx+1c]                  // Get ship's owner ID

 cmp edx,[iOwnerID]                // Is it a player's ship?
 jne _ExitMSM2                     // Jump if false

 xor ebx,ebx                       // Make value2decrease = 0
 xor edi,edi                       // Make value2decrease = 0
 xor ecx,ecx                       // Make value2decrease = 0

_ExitMSM2:
 mov edx,[eax+00000090]            // Gets ptr to shipinfo
 jmp _BackMSM2                     // Back to main code

//========================================= ok!
// Selected Ship in Combat
_MonShipInCombat:
 mov [pShip],edx

 mov eax,[edx+0000008c]            // Get pointer to OwnerID
 test eax,eax
 jz _ExitMSI                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ID
 mov [iOwnerID],eax                // Save ID for further use

_ExitMSI:
 mov eax,[edx+00000090]            // Original code (rds pShipInfo)
 jmp _BackMSI                      // Back to main code

//========================================= ok!
_MonCannons:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa                       // Jump if feature is disabled

 mov eax,[ebp+000014a0]            // Get pointer to Ship
 test eax,eax
 jz _ExitMCa                       // Jump if invalid pointer

 mov eax,[eax+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMCa                       // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMCa                      // Jump if false

 mov al,#100
 mov [edx+esi+38],al               // HP = 100%

_ExitMCa:
 cmp byte ptr [edx+esi+38],00      // Original code (Cannon HP)
 jmp _BackMCa                      // Back to main code

//========================================= ok!
_MonCannons1:
 cmp dword ptr [iEnableGM],0
 je _ExitMCa1                      // Jump if feature is disabled

 mov eax,[edi+000014a0]            // Get pointer to Ship
 test eax,eax
 jz _ExitMCa1                      // Jump if invalid pointer

 mov eax,[eax+0000008c]            // Get pointer to Fleet
 test eax,eax
 jz _ExitMCa1                      // Jump if invalid pointer

 mov eax,[eax+1c]                  // Get ship's owner ID

 cmp eax,[iOwnerID]                // Is it a player's ship?
 jne _ExitMCa1                     // Jump if false

 mov al,#100
 mov [ebp+38],al                   // HP = 100%

_ExitMCa1:
 cmp byte ptr [ebp+38],00          // Original code (Cannon HP)
 xorps xmm0,xmm0                   // Original code
 jmp _BackMCa1                     // Back to main code

//=========================================
// Variables
iEnableMM:
 dd 1
iEnableMW:
 dd 1
iEnableMC:
 dd 1
iEnableMCM:
 dd 1
iEnableMBC:
 dd 1
iEnableMSC:
 dd 1
iEnableGM:
 dd 1
iEnableMA:
 dd 1
pMoney:
 dd 0
pItem:
 dd 0
pColonists:
 dd 0
pCurDate:
 dd 0
pShipyard:
 dd 0
pShip:
 dd 0
iOwnerID:
 dd 0

//=========================================
// Hacking Points
//"Commander.exe"+1cba8d:
aobMonMoney:
pMonMoney:
 jmp _MonMoney
 nop
_BackMM:

//"Commander.exe"+136a3b:
aobMonWarehouse:
pMonWarehouse:
 jmp _MonWarehouse
 nop
 nop
_BackMW:

//"Commander.exe"+1328c8:
aobMonColonists:
pMonColonists:
 jmp _MonColonists
 nop
_BackMC:

//"Commander.exe"+132944:
aobMonColonyMorale:
pMonColonyMorale:
 jmp _MonColonyMorale
 nop
_BackMCM:

//"Commander.exe"+231f83:
aobMonBuildingConstruction:
pMonBuildingConstruction:
 jmp _MonBuildingConstruction
 nop
_BackMBC:

//"Commander.exe"+2cf6b2:
aobMonShipConstruction1:
pMonShipConstruction1:
 jmp _MonShipConstruction1
 nop
_BackMSC1:

//"Commander.exe"+2cf71f:
aobMonShipConstruction2:
pMonShipConstruction2:
 jmp _MonShipConstruction2
 nop
 nop
_BackMSC2:

//"Commander.exe"+0c87db:
aobMonShipHull:
pMonShipHull:
 jmp _MonShipHull
 nop
_BackMSH:

//"Commander.exe"+0c8af6:
aobMonShipSail:
pMonShipSail:
 jmp _MonShipSail
 nop
_BackMSS:

//"Commander.exe"+0c8b33:
aobMonShipCrew:
pMonShipCrew:
 jmp _MonShipCrew
 nop
_BackMSCw:

//"Commander.exe"+0be098:
aobMonShipAmmo:
pMonShipAmmo:
 jmp _MonShipAmmo
 nop
_BackMSA:

//"Commander.exe"+1c2dfb:
aobMonShip:
pMonShip:
 jmp _MonShip
 nop
_BackMS:

//"Commander.exe"+24ed2a:
aobMonShipMarines:
pMonShipMarines:
 jmp _MonShipMarines
 nop
_BackMSM:

//"Commander.exe"+0c8a4d:
aobMonShipMarines1:
pMonShipMarines1:
 jmp _MonShipMarines1
 nop
_BackMSM1:

//"Commander.exe"+0b14bc:
aobMonShipMarines2:
pMonShipMarines2:
 jmp _MonShipMarines2
 nop
_BackMSM2:

//"Commander.exe"+1d2ac1:
aobMonShipInCombat:
pMonShipInCombat:
 jmp _MonShipInCombat
 nop
_BackMSI:

//"Commander.exe"+0bf5c4:
aobMonCannons:
pMonCannons:
 jmp _MonCannons
_BackMCa:

//"Commander.exe"+082ec7:
aobMonCannons1:
pMonCannons1:
 jmp _MonCannons1
 nop
 nop
_BackMCa1:

//=========================================
// Original Codes
[DISABLE]
//"Commander.exe"+1cba8d:
pMonMoney:
 mov ecx,[eax+000000B0]

//"Commander.exe"+136a3b:
pMonWarehouse:
 cmp dword ptr [eax+00000180],00

//"Commander.exe"+1328c8:
pMonColonists:
 mov eax,[edx+000001E4]

//"Commander.exe"+132944:
pMonColonyMorale:
 mov ecx,[eax+000001F8]

//"Commander.exe"+231f83:
pMonBuildingConstruction:
 mov esi,[edx]
 cmp byte ptr [esi+20],00

//"Commander.exe"+2cf6b2:
pMonShipConstruction1:
 mov eax,[eax+00000178]

//"Commander.exe"+2cf71f:
pMonShipConstruction2:
 lea ecx,[esp+00000260]

//"Commander.exe"+0c87db:
pMonShipHull:
 mov eax,[edx+00000114]

//"Commander.exe"+0c8af6:
pMonShipSail:
 sub [eax+00000118],ebx

//"Commander.exe"+0c8b33:
pMonShipCrew:
 mov ebp,[edx+0000013C]

//"Commander.exe"+0be098:
pMonShipAmmo:
 mov eax,[edx+0000013C]

//"Commander.exe"+1c2dfb:
pMonShip:
 mov [ecx+000000C8],eax

//"Commander.exe"+24ed2a:
pMonShipMarines:
 sub [eax+00000148],edx

//"Commander.exe"+0c8a4d:
pMonShipMarines1:
 mov ebp,[ecx+00000090]

//"Commander.exe"+0b14bc:
pMonShipMarines2:
 mov edx,[eax+00000090]

//"Commander.exe"+1d2ac1:
pMonShipInCombat:
 mov eax,[edx+00000090]

//"Commander.exe"+0bf5c4:
pMonCannons:
 cmp byte ptr [esi+edx+38],00

//"Commander.exe"+082ec7:
pMonCannons1:
 cmp byte ptr [ebp+38],00
 xorps xmm0,xmm0

unregistersymbol(MyCode)
unregistersymbol(pMoney)
unregistersymbol(pItem)
unregistersymbol(pColonists)
unregistersymbol(pShip)
unregistersymbol(iEnableMM)
unregistersymbol(iEnableMW)
unregistersymbol(iEnableMC)
unregistersymbol(iEnableMCM)
unregistersymbol(iEnableMBC)
unregistersymbol(iEnableMSC)
unregistersymbol(iEnableGM)
unregistersymbol(iEnableMA)
unregistersymbol(iOwnerID)

unregistersymbol(pMonMoney)
unregistersymbol(pMonWarehouse)
unregistersymbol(pMonColonists)
unregistersymbol(pMonColonyMorale)
unregistersymbol(pMonBuildingConstruction)
unregistersymbol(pMonShipConstruction1)
unregistersymbol(pMonShipConstruction2)
unregistersymbol(pMonShipHull)
unregistersymbol(pMonShipSail)
unregistersymbol(pMonShipCrew)
unregistersymbol(pMonShipAmmo)
unregistersymbol(pMonShip)
unregistersymbol(pMonShipMarines)
unregistersymbol(pMonShipMarines1)
unregistersymbol(pMonShipMarines2)
unregistersymbol(pMonShipInCombat)
unregistersymbol(pMonCannons)
unregistersymbol(pMonCannons1)

dealloc(MyCode)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Enable/Disable Minimum Money"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Enable/Disable Minimum Items in Warehouse"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMW</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Enable/Disable Minimum Colonists in Colony"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Enable/Disable Minimum Colony Morale"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMCM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Enable/Disable Quick Building Construction"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMBC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"Enable/Disable Quick Ship Construction"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMSC</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"Enable/Disable God Mode"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableGM</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Enable/Disable Ship Ammunition"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>iEnableMA</Address>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Selected Colony Colonists"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>pColonists</Address>
      <Offsets>
        <Offset>1E4</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Selected Colony Soldiers"</Description>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>pColonists</Address>
      <Offsets>
        <Offset>1E8</Offset>
      </Offsets>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>iYear</Name>
      <Address>04B40186</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMonth</Name>
      <Address>04B4018A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMoney</Name>
      <Address>0A720484</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pItem</Name>
      <Address>0A720488</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pColonists</Name>
      <Address>0A72048C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pShip</Name>
      <Address>0A720498</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMM</Name>
      <Address>0A720464</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMW</Name>
      <Address>0A720468</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMC</Name>
      <Address>0A72046C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMCM</Name>
      <Address>0A720470</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMBC</Name>
      <Address>0A720474</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMSC</Name>
      <Address>0A720478</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGM</Name>
      <Address>0A72047C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMA</Name>
      <Address>0A720480</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iOwnerID</Name>
      <Address>0A72049C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonMoney</Name>
      <Address>005CBA8D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonWarehouse</Name>
      <Address>00536A3B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonColonists</Name>
      <Address>005328C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonColonyMorale</Name>
      <Address>00532944</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonBuildingConstruction</Name>
      <Address>00631F83</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipConstruction1</Name>
      <Address>006CF6B2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipConstruction2</Name>
      <Address>006CF71F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipHull</Name>
      <Address>004C87DB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipSail</Name>
      <Address>004C8AF6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipCrew</Name>
      <Address>004C8B33</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipAmmo</Name>
      <Address>004BE098</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShip</Name>
      <Address>005C2DFB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines</Name>
      <Address>0064ED2A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines1</Name>
      <Address>004C8A4D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipMarines2</Name>
      <Address>004B14BC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonShipInCombat</Name>
      <Address>005D2AC1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonCannons</Name>
      <Address>004BF5C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMonCannons1</Name>
      <Address>00482EC7</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Commander - Conquest of the Americas
 Game Version  : 1.034
 Script Version: 1.0
 CE Version    : 6.1
 Money, Warehouse, Colonists, Soldiers, Colony Morale, Building Construction,
 Ship construction, Ship hull, Ship Sail, Ship Crew, Ship Ammo and Marines
 29-Jan-2011 Release for V1.034
 17-Mar-2012 AOB version for v1.034
 By Recifense
===========================================
</Comments>
</CheatTable>
