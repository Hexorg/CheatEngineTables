<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>91</ID>
      <Description>"[X] &lt;== Prepare Environment for Cheating Script 1.0 (ACTIVATE ME FIRST)"</Description>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Warhammer 40000 Space Marine
 Game Version  : 1.0.165
 Game Sponsor  : Myself
 Process Name  : SpaceMarine.exe
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 22-Sep-2015
 Author        : Recifense
 History:
 22-Sep-15: Release for version 1.0.165
 Features:
 - Prepare environment for bypassing CRC-Check
===========================================
}

//=========================================
// Definitions
define(CODESIZE,0x01138c00)
define(LUDO,SpaceMarine.exe)

//=========================================
define(ctCE64,(float)6.4)
//=========================================
[ENABLE]
//=========================================
alloc(CodeCopy,CODESIZE,LUDO)
alloc(_IniMem,4096,LUDO)
//=========================================
label(iFlagOK)
label(pCodeCopy)
label(_ExitIM)
//=========================================
registersymbol(CodeCopy)
registersymbol(_IniMem)
registersymbol(iFlagOK)
registersymbol(pCodeCopy)
//=========================================
_IniMem:
 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 cld
 rep movsd

 push #500
 call kernel32.sleep

 mov ecx,CODESIZE
 shr ecx,2
 mov esi,LUDO
 mov edi,CodeCopy
 repe cmpsd

 test ecx,ecx
 jnz _ExitIM

 mov dword ptr [iFlagOK],55555555

_ExitIM:
 ret
//=========================================
 db '=========================================&gt;'
 db 'CE6.4 Script by Recifense 092215'
//=========================================
// Variables
pCodeCopy:
 dd CodeCopy
iFlagOK:
 dd 0

//=========================================
CREATETHREAD(_IniMem)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
//=========================================
unregistersymbol(CodeCopy)
unregistersymbol(_IniMem)
unregistersymbol(iFlagOK)
unregistersymbol(pCodeCopy)
//=========================================
dealloc(CodeCopy)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>55</ID>
      <Description>"[X] &lt;== WH40K - Space Marine v1.0.165 Steam Script 2.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Warhammer 40000 Space Marine
 Game Version  : 1.0.165
 Game Sponsor  : Myself
 Process Name  : SpaceMarine.exe
 Relevant Info : CRC Check/32bits/2011/3rd Person Action
 Script Version: 2.0
 CE Version    : 6.4
 Release date  : 24-Sep-2015
 Author        : Recifense
 History:
 01-Oct-11: First Release (1.0.54)
 24-Sep-15: Release for version 1.0.165 - Steam
 Features:
 - God Mode
 - Unlimited Ammo (No reload)
 - Unlimited Shield
===========================================
}

//=========================================
// Definitions
define(LUDO,"SpaceMarine.exe")
define(LUDOEND,SpaceMarine.exe+00b70000)

define(MOHP,SpaceMarine.exe+001c5428)
define(GDMD,SpaceMarine.exe+0043437f)
define(MOAA,SpaceMarine.exe+004ffb3b)
define(MOPS,SpaceMarine.exe+00434407)
// CRC
define(BCCK,SpaceMarine.exe+00b6a404)

define(CHKQ,SpaceMarine.exe+00b52673)
define(CHKR,SpaceMarine.exe+00b526f3)
define(CHKS,SpaceMarine.exe+00b526b3)

define(CHKU,SpaceMarine.exe+00b52734)
define(CHKV,SpaceMarine.exe+00b52984)
define(CHKW,SpaceMarine.exe+00b52bd4)
define(CHKX,SpaceMarine.exe+00b52de4)

define(JBCC,SpaceMarine.exe+0113a548) //(MSVCR90.dll+3AE20 = memcpy)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(MOHP,ff 90 b4 00 00 00 8b 07 51 8b cf d9 1c 24 ff 90 b0 00 00 00 51)
assert(GDMD,f3 0f 10 44 24 3c f3 0f 5c 44 24 20 f3 0f 5e 44 24 30 f3 0f 58)
assert(MOAA,f3 0f 10 45 0c 0f 2f 05 ?? ?? ?? ?? 8b 46 08 ?? ?? 0f b6 48 08)
assert(MOPS,f3 0f 10 44 24 40 f3 0f 5c 44 24 30 f3 0f 5e 44 24 34 f3 0f 58)
assert(BCCK,ff 25 ?? ?? ?? ?? ff 25 ?? ?? ?? ?? ff 25 ?? ?? ?? ?? ff 25 ??)
assert(CHKQ,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4d 08 53 0f b6 1c 0a)
assert(CHKR,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4e 04 53 8b 5d 08 0f)
assert(CHKS,56 57 8b 7d 0c 33 d2 85 ff 8b f1 ?? ?? 8b 4d 08 53 0f b6 1c 0a)
assert(CHKU,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(CHKV,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(CHKW,56 57 8b 7d 08 8d a4 24 00 00 00 00 8b 55 0c 83 fa 07 ?? ?? ff)
assert(CHKX,8b 5d 08 56 57 8d a4 24 00 00 00 00 8b 75 0c 83 fe 07 ?? ?? ff)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_MonHumanPlayer)
label(_BackMHP)
label(_ExitMHP)
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_MonAllAmmo)
label(_BackMAA)
label(_ExitMAA)
label(_MonPlayerShield)
label(_BackMPS)
label(_ExitMPS)
label(_BypassCrcCheck)
label(_BackBCC)
label(_ExitBCC)
label(_HackPointQ)
label(_BackHPQ)
label(_ExitHPQ)
label(_HackPointR)
label(_BackHPR)
label(_ExitHPR)
label(_HackPointS)
label(_BackHPS)
label(_ExitHPS)
label(_HackPointU)
label(_BackHPU)
label(_ExitHPU)
label(_HackPointV)
label(_BackHPV)
label(_ExitHPV)
label(_HackPointW)
label(_BackHPW)
label(_ExitHPW)
label(_HackPointX)
label(_BackHPX)
label(_ExitHPX)

label(iEnableGMD)
label(iEnableMUA)
label(iEnableMPS)
label(iEnableCRC)

label(pPlayer)

label(iEAX_Reg)
label(iECX_Reg)
label(iCount)
label(iCountQ)
label(iCountR)
label(iCountS)
label(iCountU)
label(iCountV)
label(iCountW)
label(iCountX)
label(iCount0)
label(iCount1)
label(iCount2)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMUA)
registersymbol(iEnableMPS)
registersymbol(pPlayer)
registersymbol(iCount)
registersymbol(iCountQ)
registersymbol(iCountR)
registersymbol(iCountS)
registersymbol(iCountU)
registersymbol(iCountV)
registersymbol(iCountW)
registersymbol(iCountX)
registersymbol(iCount0)
registersymbol(iCount1)
registersymbol(iCount2)

//=========================================
MyCode:
//=========================================
// All the time
_MonHumanPlayer:
 mov [pPlayer],edi

_ExitMHP:
 call dword ptr [eax+000000B4]     // Original code
 jmp _BackMHP                      // Back to main code

//=========================================
// During Combat
_GodMode:
 inc dword ptr [iCount0]

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                        // Jump if feature is disabled

 cmp esi,[pPlayer]
 jne _ExitGMD

 xor eax,eax
 mov [esp+3c],eax
 mov [esp+20],eax

 mov eax,(float)1.0
 mov [esp+2c],eax

_ExitGMD:
 movss xmm0,[esp+3c]               // Original code
 jmp _BackGMD                      // Back to main code

//=========================================
// All players
_MonAllAmmo:
 inc dword ptr [iCount1]

 cmp dword ptr [iEnableMUA],0
 je _ExitMAA                       // Jump if feature is disabled

 mov dword ptr [ebp+0c],00         // value2decrease = 0

_ExitMAA:
 movss xmm0,[ebp+0C]               // Original code
 jmp _BackMAA                      // Back to main code

//=========================================
_MonPlayerShield:
 inc dword ptr [iCount2]

 cmp dword ptr [iEnableMPS],0
 je _ExitMPS                       // Jump if feature is disabled

 cmp esi,[pPlayer]
 jne _ExitMPS

 mov ebx,(float)1.0
 mov [esp+30],ebx
 mov [esp+40],ebx
 mov [esp+2c],ebx

_ExitMPS:
 movss xmm0,[esp+40]               // Original code
 jmp _BackMPS                      // Back to main code
//-----------------------------------------------------------------------------
//=========================================
_BypassCrcCheck:
 mov [iEAX_Reg],eax
 mov [iECX_Reg],ecx

 cmp dword ptr [iFlagOK],55555555
 jne _ExitBCC

 cmp dword ptr [iEnableCRC],0
 je _ExitBCC                       // Jump if feature is disabled

 mov ecx,[esp+08]

 cmp ecx,LUDO
 jl _ExitBCC

 cmp ecx,LUDOEND
 jge _ExitBCC

 mov eax,LUDO
 sub ecx,eax
 mov eax,CodeCopy
 add ecx,eax

 mov [esp+08],ecx

 inc dword ptr [iCount]

_ExitBCC:
 mov eax,[iEAX_Reg]
 mov ecx,[iECX_Reg]

 jmp dword ptr [JBCC]              // Original code
 jmp _BackBCC                      // Back to main code (keeping the template)

//=========================================
_HackPointQ:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+0C]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPQ

 cmp dword ptr [iEnableCRC],0
 je _ExitHPQ                       // Jump if feature is disabled

 mov eax,[ebp+08]

 cmp eax,LUDO
 jl _ExitHPQ

 cmp eax,LUDOEND
 jge _ExitHPQ

 mov edx,LUDO
 sub eax,edx
 mov edx,CodeCopy
 add eax,edx

 mov [ebp+08],eax

 inc dword ptr [iCountQ]

_ExitHPQ:
 jmp _BackHPQ                      // Back to main code

//=========================================
_HackPointR:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+0C]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPR

 cmp dword ptr [iEnableCRC],0
 je _ExitHPR                       // Jump if feature is disabled

 mov eax,[ebp+08]

 cmp eax,LUDO
 jl _ExitHPR

 cmp eax,LUDOEND
 jge _ExitHPR

 mov edx,LUDO
 sub eax,edx
 mov edx,CodeCopy
 add eax,edx

 mov [ebp+08],eax

 inc dword ptr [iCountR]

_ExitHPR:
 jmp _BackHPR                      // Back to main code

//=========================================
_HackPointS:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+0C]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPS

 cmp dword ptr [iEnableCRC],0
 je _ExitHPS                       // Jump if feature is disabled

 mov eax,[ebp+08]

 cmp eax,LUDO
 jl _ExitHPS

 cmp eax,LUDOEND
 jge _ExitHPS

 mov edx,LUDO
 sub eax,edx
 mov edx,CodeCopy
 add eax,edx

 mov [ebp+08],eax

 inc dword ptr [iCountS]

_ExitHPS:
 jmp _BackHPS                      // Back to main code

//=========================================
_HackPointU:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+08]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPU

 cmp dword ptr [iEnableCRC],0
 je _ExitHPU                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPU

 cmp edi,LUDOEND
 jge _ExitHPU

 mov eax,LUDO
 sub edi,eax
 mov eax,CodeCopy
 add edi,eax

 mov [ebp+08],edi

 inc dword ptr [iCountU]

_ExitHPU:
 jmp _BackHPU                      // Back to main code

//=========================================
_HackPointV:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+08]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPV

 cmp dword ptr [iEnableCRC],0
 je _ExitHPV                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPV

 cmp edi,LUDOEND
 jge _ExitHPV

 mov eax,LUDO
 sub edi,eax
 mov eax,CodeCopy
 add edi,eax

 mov [ebp+08],edi

 inc dword ptr [iCountV]

_ExitHPV:
 jmp _BackHPV                      // Back to main code

//=========================================
_HackPointW:
 push esi                          // Original code
 push edi                          // Original code
 mov edi,[ebp+08]                  // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPW

 cmp dword ptr [iEnableCRC],0
 je _ExitHPW                       // Jump if feature is disabled

 cmp edi,LUDO
 jl _ExitHPW

 cmp edi,LUDOEND
 jge _ExitHPW

 mov eax,LUDO
 sub edi,eax
 mov eax,CodeCopy
 add edi,eax

 mov [ebp+08],edi

 inc dword ptr [iCountW]

_ExitHPW:
 jmp _BackHPW                      // Back to main code

//=========================================
_HackPointX:
 mov ebx,[ebp+08]                  // Original code
 push esi                          // Original code
 push edi                          // Original code

 cmp dword ptr [iFlagOK],55555555
 jne _ExitHPX

 cmp dword ptr [iEnableCRC],0
 je _ExitHPX                       // Jump if feature is disabled

 cmp ebx,LUDO
 jl _ExitHPX

 cmp ebx,LUDOEND
 jge _ExitHPX

 mov eax,LUDO
 sub ebx,eax
 mov eax,CodeCopy
 add ebx,eax

 mov [ebp+08],ebx

 inc dword ptr [iCountX]

_ExitHPX:
 jmp _BackHPX                      // Back to main code

//=========================================
 db '==================================&gt;'
 db 'CE6.4 Script by Recifense 092415'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMUA:
 dd 0
iEnableMPS:
 dd 0
iEnableCRC:
 dd 1
pPlayer:
 dd MyCode
iEAX_Reg:
 dd 0
iECX_Reg:
 dd 0
iCount:
 dd 0
iCountQ:
 dd 0
iCountR:
 dd 0
iCountS:
 dd 0
iCountU:
 dd 0
iCountV:
 dd 0
iCountW:
 dd 0
iCountX:
 dd 0
iCount0:
 dd 0
iCount1:
 dd 0
iCount2:
 dd 0

//=========================================
// Hacking Points
MOHP:
 jmp _MonHumanPlayer
 nop
_BackMHP:

GDMD:
 jmp _GodMode
 nop
_BackGMD:

MOAA:
 jmp _MonAllAmmo
_BackMAA:

MOPS:
 jmp _MonPlayerShield
 nop
_BackMPS:
//--------
BCCK:
// jmp _BypassCrcCheck
// nop
_BackBCC:

CHKQ:
 jmp _HackPointQ
_BackHPQ:

CHKR:
 jmp _HackPointR
_BackHPR:

CHKS:
 jmp _HackPointS
_BackHPS:

CHKU:
 jmp _HackPointU
_BackHPU:

CHKV:
 jmp _HackPointV
_BackHPV:

CHKW:
 jmp _HackPointW
_BackHPW:

CHKX:
 jmp _HackPointX
_BackHPX:

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(112).Active=false
getAddressList().getMemoryRecordByID(112).Color=0x0c08000
getAddressList().getMemoryRecordByID(113).Active=false
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
getAddressList().getMemoryRecordByID(114).Active=false
getAddressList().getMemoryRecordByID(114).Color=0x0c08000
{$asm}

//=========================================
// Script for Restoring Original Codes
[DISABLE]
MOHP:
// call dword ptr [eax+000000B4]
 db ff 90 b4 00 00 00

GDMD:
// movss xmm0,[esp+3C]
 db f3 0f 10 44 24 3c

MOAA:
// movss xmm0,[ebp+0C]
 db f3 0f 10 45 0c

MOPS:
// movss xmm0,[esp+40]
 db f3 0f 10 44 24 40
//----
BCCK:
 jmp dword ptr [JBCC]

CHKQ:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

CHKR:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

CHKS:
// push esi
// push edi
// mov edi,[ebp+0C]
 db 56 57 8b 7d 0c

CHKU:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

CHKV:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

CHKW:
// push esi
// push edi
// mov edi,[ebp+08]
 db 56 57 8b 7d 08

CHKX:
// mov ebx,[ebp+08]
// push esi
// push edi
 db 8b 5d 08 56 57

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(112).Active=false
getAddressList().getMemoryRecordByID(112).Color=0x0c08000
getAddressList().getMemoryRecordByID(113).Active=false
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
getAddressList().getMemoryRecordByID(114).Active=false
getAddressList().getMemoryRecordByID(114).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMUA)
unregistersymbol(iEnableMPS)
unregistersymbol(pPlayer)
unregistersymbol(iCount)
unregistersymbol(iCountQ)
unregistersymbol(iCountR)
unregistersymbol(iCountS)
unregistersymbol(iCountU)
unregistersymbol(iCountV)
unregistersymbol(iCountW)
unregistersymbol(iCountX)
unregistersymbol(iCount0)
unregistersymbol(iCount1)
unregistersymbol(iCount2)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>112</ID>
          <Description>"[X] &lt;== God Mode for main Character -------------------------------&gt; (HK: ALT+Home / ALT+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(112).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(112).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>18</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>18</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"[X] &lt;== No Decreasing Shield for main Character -------------&gt; (HK: ALT+Home / ALT+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPS",1)
getAddressList().getMemoryRecordByID(113).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPS",0)
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>18</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>18</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>114</ID>
          <Description>"[X] &lt;== Unlimited Ammo for all  ------------------------------------------&gt; (HK: ALT+Home / ALT+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUA",1)
getAddressList().getMemoryRecordByID(114).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUA",0)
getAddressList().getMemoryRecordByID(114).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>18</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>18</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>228</ID>
      <Description>"[X] &lt;== Table/Script Information"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
getMainForm().CommentButton.doClick()
{$ASM}

[disable]

</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150924</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Warhammer 40000 Space Marine
 Game Version  : 1.0.165
 Game Sponsor  : Myself
 Process Name  : SpaceMarine.exe
 Relevant Info : CRC Check/32bits/2011/3rd Person Action
 Script Version: 2.0
 CE Version    : 6.4
 Release date  : 24-Sep-2015
 Author        : Recifense
 History:
 01-Oct-11: First Release (1.0.54)
 24-Sep-15: Release for version 1.0.165 - Steam
 Features:
 - God Mode                   [1]
 - Unlimited Shield           [2]
 - Unlimited Ammo (No reload) [3]
===========================================
[1] For human player only (not AI);
[1] For human player only (not AI);
[2] For all units (including AI);
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "SpaceMarine.exe" in CE;
4) Load this table and activate the 1st script;
5) Activate the main script;
6) Now Activate the script of each cheat you want to use;
7) Game On;
===========================================
[HOTKEYS]
ALT+Home      = Enable  ALL cheats;
ALT+End       = Disable ALL cheats;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 10 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
