<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Terraria (click 1st, allocation)"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
globalalloc(_TER,$4000)

_TER+3fc0:
mov rax,_TER
mov [rax],rax
ret

createThread(_TER+3fc0)

[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"buffs"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>Define(_now,_TER+10)
Define(_saveType,_TER+18)
Define(_saveTime,_TER+1c)
Define(_typeArr,_TER+20)
Define(_timeArr,_TER+24)
Define(_loopVar,_TER+28)
Define(_loopCnt,_TER+2c)
Define(_saveHook,_TER+30)
Define(_saveHoo2,_TER+38)
Define(_buffList,_TER+300)
Define(_loopHook,_TER+100)
Define(_loopInit,_TER+240)


[ENABLE]
_buffList: // target buff no., use #123 for decimal, end with 0
dd #1,#2,#3,#6,#7,#8,#9,#11,#12,#15,#17,#18,#63,#48,#59,#122,#123
dd #60,#127,#136,#57,#82,#81,#85,#56,#55,#54,#53,#52 // summoned things
dd #158,#107,#108,#109,#110,#150,#111,#112,#113,#114,#115,#165
dd 0

//             00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F
aobscan(_buffs,8b ?? ?? 8b ?? ?? ?? 00 00 3b 42 04 0f 83 ?? ?? 00 00 8b ?? ?? 08 85 ?? 0f ?? ?? ?? 00 00 8b ?? ?? ?? 00 00 3b ?? 04 0f ?? ?? ?? ?? ?? 83 ?? ?? ?? ?? 0f ?? ?? ?? ?? ?? 8b ?? ?? 3b ?? ?? ?? ?? ?? 75)
assert(_buffs-06,89)

_saveHoo2:
readmem(_buffs-06,6)


_saveHook:
readmem(_buffs+03,6)
_typeArr:
readmem(_buffs+05,4)
_timeArr:
readmem(_buffs+20,4)
_loopVar:
readmem(_buffs+02,1)


// ============= before loop
_loopInit:
readmem(_buffs-06,6) // free eax,ecx,edx

xor  eax,eax
mov  [_now],eax // reset target buff index
// save original 1st buff anyway
mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
//cmp  [eax+4],1
//jge  @f        // force at least one item
//mov  [eax+4],1
@@:
mov  eax,[eax+08]  // 1st buff item
mov  [_saveType],eax


mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
//cmp  [eax+4],1
//jge  @f        // force at least one item
//mov  [eax+4],1
@@:
mov  eax,[eax+08]
mov  [_saveTime],eax


jmp  _buffs

_buffs-06:
jmp _loopInit
nop

// ============= beginning of loop

label(_done)
label(_check1)

_loopHook:// free eax?, ecx,edx
mov  [_loopCnt],eax
readmem(_buffs+38,9)
jne  _done // not player
mov  eax,[_loopCnt]

_check1:
cmp  eax,1 //
jne  _done //
mov  eax,[_now]
mov  ecx,[_buffList+eax*4]
test ecx,ecx
jne  @f
// restore for no more target buff
mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
mov  ecx,[_saveType]
mov  [eax+8],ecx

mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
mov  ecx,[_saveTime]
mov  [eax+8],ecx
jmp _done
@@:
// change back the loop cnt to zero and we put our target buff on the arr
xor eax,eax
mov [_loopCnt],eax

movsx edx,byte ptr [_loopVar] // also the local loop cnt [ebp-14]
add edx,ebp
mov [edx],eax

mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
mov  [eax+8],ecx    // type

mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
mov  [eax+8],#1000  // time
inc  [_now] // next target buff
_done:
mov  eax,[_loopCnt]
readmem(_buffs+03,6)
jmp _buffs+09


_buffs+03:
jmp _loopHook
nop

[DISABLE]
aobscan(_buffs,8b ?? ?? e9 ?? ?? ?? ?? ?? 3b 42 04 0f 83 ?? ?? 00 00 8b ?? ?? 08 85 ?? 0f ?? ?? ?? 00 00 8b ?? ?? ?? 00 00 3b ?? 04 0f ?? ?? ?? ?? ?? 83 ?? ?? ?? ?? 0f ?? ?? ?? ?? ?? 8b ?? ?? 3b ?? ?? ?? ?? ?? 75)
_buffs+03:
readmem(_saveHook,6)
_buffs-06:
readmem(_saveHoo2,6)


{
//  UpdateBuffs - loop start next buff
// ORIGINAL CODE - INJECTION POINT: 0C0B00FB (mutable)

0C0B00D6: FF 00                 -  inc [eax]
0C0B00D8: 41                    -  inc ecx
0C0B00D9: 81 F9 E8 03 00 00     -  cmp ecx,000003E8
0C0B00DF: 7C BF                 -  jl 0C0B00A0
0C0B00E1: 33 D2                 -  xor edx,edx
0C0B00E3: 89 55 EC              -  mov [ebp-14],edx
0C0B00E6: B9 90 52 2A 00        -  mov ecx,002A5290
0C0B00EB: BA 7E 01 00 00        -  mov edx,0000017E
0C0B00F0: E8 26 F5 1A 66        -  call clr.dll+F61B
0C0B00F5: 89 85 E0 FE FF FF     -  mov [ebp-00000120],eax
// ---------- INJECTING HERE ----------
0C0B00FB: 8B 45 EC              -  mov eax,[ebp-14]
0C0B00FE: 8B 93 9C 00 00 00     -  mov edx,[ebx+0000009C]
// ---------- DONE INJECTING  ----------
0C0B0104: 3B 42 04              -  cmp eax,[edx+04]
0C0B0107: 0F 83 B4 3D 00 00     -  jae 0C0B3EC1
0C0B010D: 8B 4C 82 08           -  mov ecx,[edx+eax*4+08]
0C0B0111: 85 C9                 -  test ecx,ecx
0C0B0113: 0F 8E 93 3D 00 00     -  jng 0C0B3EAC
0C0B0119: 8B 93 A0 00 00 00     -  mov edx,[ebx+000000A0]
0C0B011F: 3B 42 04              -  cmp eax,[edx+04]
0C0B0122: 0F 83 99 3D 00 00     -  jae 0C0B3EC1
0C0B0128: 83 7C 82 08 00        -  cmp dword ptr [edx+eax*4+08],00
0C0B012D: 0F 8E 79 3D 00 00     -  jng 0C0B3EAC
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>7</ID>
      <Description>"_buffList (memory view)"</Description>
      <LastState Value="1" Activated="0" RealAddress="004C0300"/>
      <Color>80000008</Color>
      <VariableType>4 Bytes</VariableType>
      <Address>_TER</Address>
      <Offsets>
        <Offset>300</Offset>
      </Offsets>
    </CheatEntry>
    <CheatEntry>
      <ID>6</ID>
      <Description>"UpdateBuffs.cs"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>assert(0,-1)

  public void UpdateBuffs(int i)
  {
      if (this.soulDrain &gt; 0 &amp;&amp; this.whoAmI == Main.myPlayer)
      {
          this.AddBuff(151, 2, true);
      }
      for (int num = 0; num &lt; 1000; num++)
      {
          if (Main.projectile[num].active &amp;&amp; Main.projectile[num].owner == i)
          {
              this.ownedProjectileCounts[Main.projectile[num].type] = this.ownedProjectileCounts[Main.projectile[num].type] + 1;
          }
      }
      for (int j = 0; j &lt; 22; j++)
      {
          if (this.buffType[j] &gt; 0 &amp;&amp; this.buffTime[j] &gt; 0)
          {
              if (this.whoAmI == Main.myPlayer &amp;&amp; this.buffType[j] != 28)
              {
                  this.buffTime[j] = this.buffTime[j] - 1;
              }
              if (this.buffType[j] == 1)
              {
                  this.lavaImmune = true;
                  this.fireWalk = true;
                  this.buffImmune[24] = true;
              }
              else if (this.buffType[j] == 158)
              {
                  Player player = this;
                  player.manaRegen = player.manaRegen + 2;
              }
              else if (this.buffType[j] == 159 &amp;&amp; this.inventory[this.selectedItem].melee)
              {
                  this.armorPenetration = 4;
              }
              else if (this.buffType[j] == 2)
              {
                  Player player1 = this;
                  player1.lifeRegen = player1.lifeRegen + 4;
              }
              else if (this.buffType[j] == 3)
              {
                  Player player2 = this;
                  player2.moveSpeed = player2.moveSpeed + 0.25f;
              }
              else if (this.buffType[j] == 4)
              {
                  this.gills = true;
              }
              else if (this.buffType[j] == 5)
              {
                  Player player3 = this;
                  player3.statDefense = player3.statDefense + 8;
              }
              else if (this.buffType[j] == 6)
              {
                  this.manaRegenBuff = true;
              }
              else if (this.buffType[j] == 7)
              {
                  Player player4 = this;
                  player4.magicDamage = player4.magicDamage + 0.2f;
              }
              else if (this.buffType[j] == 8)
              {
                  this.slowFall = true;
              }
              else if (this.buffType[j] == 9)
              {
                  this.findTreasure = true;
              }
              else if (this.buffType[j] == 10)
              {
                  this.invis = true;
              }
              else if (this.buffType[j] == 11)
              {
                  Lighting.AddLight((int)(this.position.X + (float)(this.width / 2)) / 16, (int)(this.position.Y + (float)(this.height / 2)) / 16, 0.8f, 0.95f, 1f);
              }
              else if (this.buffType[j] == 12)
              {
                  this.nightVision = true;
              }
              else if (this.buffType[j] == 13)
              {
                  this.enemySpawns = true;
              }
              else if (this.buffType[j] == 14)
              {
                  if (this.thorns &lt; 1f)
                  {
                      this.thorns = 0.333333343f;
                  }
              }
              else if (this.buffType[j] == 15)
              {
                  this.waterWalk = true;
              }
              else if (this.buffType[j] == 16)
              {
                  this.archery = true;
              }
              else if (this.buffType[j] == 17)
              {
                  this.detectCreature = true;
              }
              else if (this.buffType[j] == 18)
              {
                  this.gravControl = true;
              }
              else if (this.buffType[j] == 30)
              {
                  this.bleed = true;
              }
              else if (this.buffType[j] == 31)
              {
                  this.confused = true;
              }
              else if (this.buffType[j] == 32)
              {
                  this.slow = true;
              }
              else if (this.buffType[j] == 35)
              {
                  this.silence = true;
              }
              else if (this.buffType[j] == 160)
              {
                  this.dazed = true;
              }
              else if (this.buffType[j] == 46)
              {
                  this.chilled = true;
              }
              else if (this.buffType[j] == 47)
              {
                  this.frozen = true;
              }
              else if (this.buffType[j] == 156)
              {
                  this.stoned = true;
              }
              else if (this.buffType[j] == 69)
              {
                  this.ichor = true;
                  Player player5 = this;
                  player5.statDefense = player5.statDefense - 20;
              }
              else if (this.buffType[j] == 36)
              {
                  this.brokenArmor = true;
              }
              else if (this.buffType[j] == 48)
              {
                  this.honey = true;
              }
              else if (this.buffType[j] == 59)
              {
                  this.shadowDodge = true;
              }
              else if (this.buffType[j] == 93)
              {
                  this.ammoBox = true;
              }
              else if (this.buffType[j] == 58)
              {
                  this.palladiumRegen = true;
              }
              else if (this.buffType[j] == 88)
              {
                  this.chaosState = true;
              }
              else if (this.buffType[j] == 63)
              {
                  Player player6 = this;
                  player6.moveSpeed = player6.moveSpeed + 1f;
              }
              else if (this.buffType[j] == 104)
              {
                  Player player7 = this;
                  player7.pickSpeed = player7.pickSpeed - 0.25f;
              }
              else if (this.buffType[j] == 105)
              {
                  this.lifeMagnet = true;
              }
              else if (this.buffType[j] == 106)
              {
                  this.calmed = true;
              }
              else if (this.buffType[j] == 121)
              {
                  Player player8 = this;
                  player8.fishingSkill = player8.fishingSkill + 15;
              }
              else if (this.buffType[j] == 122)
              {
                  this.sonarPotion = true;
              }
              else if (this.buffType[j] == 123)
              {
                  this.cratePotion = true;
              }
              else if (this.buffType[j] == 107)
              {
                  Player player9 = this;
                  player9.tileSpeed = player9.tileSpeed + 0.25f;
                  Player player10 = this;
                  player10.wallSpeed = player10.wallSpeed + 0.25f;
                  Player player11 = this;
                  player11.blockRange = player11.blockRange + 1;
              }
              else if (this.buffType[j] == 108)
              {
                  this.kbBuff = true;
              }
              else if (this.buffType[j] == 109)
              {
                  this.ignoreWater = true;
                  this.accFlipper = true;
              }
              else if (this.buffType[j] == 110)
              {
                  Player player12 = this;
                  player12.maxMinions = player12.maxMinions + 1;
              }
              else if (this.buffType[j] == 150)
              {
                  Player player13 = this;
                  player13.maxMinions = player13.maxMinions + 1;
              }
              else if (this.buffType[j] == 111)
              {
                  this.dangerSense = true;
              }
              else if (this.buffType[j] == 112)
              {
                  this.ammoPotion = true;
              }
              else if (this.buffType[j] == 113)
              {
                  this.lifeForce = true;
                  Player player14 = this;
                  player14.statLifeMax2 = player14.statLifeMax2 + this.statLifeMax / 5 / 20 * 20;
              }
              else if (this.buffType[j] == 114)
              {
                  Player player15 = this;
                  player15.endurance = player15.endurance + 0.1f;
              }
              else if (this.buffType[j] == 115)
              {
                  Player player16 = this;
                  player16.meleeCrit = player16.meleeCrit + 10;
                  Player player17 = this;
                  player17.rangedCrit = player17.rangedCrit + 10;
                  Player player18 = this;
                  player18.magicCrit = player18.magicCrit + 10;
                  Player player19 = this;
                  player19.thrownCrit = player19.thrownCrit + 10;
              }
              else if (this.buffType[j] == 116)
              {
                  this.inferno = true;
                  Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.65f, 0.4f, 0.1f);
                  int num1 = 24;
                  float single = 200f;
                  bool flag = this.infernoCounter % 60 == 0;
                  int num2 = 10;
                  if (this.whoAmI == Main.myPlayer)
                  {
                      for (int k = 0; k &lt; 200; k++)
                      {
                          NPC nPC = Main.npc[k];
                          if (nPC.active &amp;&amp; !nPC.friendly &amp;&amp; nPC.damage &gt; 0 &amp;&amp; !nPC.dontTakeDamage &amp;&amp; !nPC.buffImmune[num1] &amp;&amp; Vector2.Distance(base.Center, nPC.Center) &lt;= single)
                          {
                              if (nPC.HasBuff(num1) == -1)
                              {
                                  nPC.AddBuff(num1, 120, false);
                              }
                              if (flag)
                              {
                                  nPC.StrikeNPC(num2, 0f, 0, false, false, false);
                                  if (Main.netMode != 0)
                                  {
                                      NetMessage.SendData(28, -1, -1, "", k, (float)num2, 0f, 0f, 0, 0, 0);
                                  }
                              }
                          }
                      }
                      if (this.hostile)
                      {
                          for (int l = 0; l &lt; 255; l++)
                          {
                              Player player20 = Main.player[l];
                              if (player20 != this &amp;&amp; player20.active &amp;&amp; !player20.dead &amp;&amp; player20.hostile &amp;&amp; !player20.buffImmune[num1] &amp;&amp; (player20.team != this.team || player20.team == 0) &amp;&amp; Vector2.Distance(base.Center, player20.Center) &lt;= single)
                              {
                                  if (player20.HasBuff(num1) == -1)
                                  {
                                      player20.AddBuff(num1, 120, true);
                                  }
                                  if (flag)
                                  {
                                      player20.Hurt(num2, 0, true, false, "", false);
                                      if (Main.netMode != 0)
                                      {
                                          NetMessage.SendData(26, -1, -1, Lang.deathMsg(this.whoAmI, -1, -1, -1), l, 0f, (float)num2, 1f, 0, 0, 0);
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
              else if (this.buffType[j] == 117)
              {
                  Player player21 = this;
                  player21.thrownDamage = player21.thrownDamage + 0.1f;
                  Player player22 = this;
                  player22.meleeDamage = player22.meleeDamage + 0.1f;
                  Player player23 = this;
                  player23.rangedDamage = player23.rangedDamage + 0.1f;
                  Player player24 = this;
                  player24.magicDamage = player24.magicDamage + 0.1f;
                  Player player25 = this;
                  player25.minionDamage = player25.minionDamage + 0.1f;
              }
              else if (this.buffType[j] == 119)
              {
                  this.loveStruck = true;
              }
              else if (this.buffType[j] == 120)
              {
                  this.stinky = true;
              }
              else if (this.buffType[j] == 124)
              {
                  this.resistCold = true;
              }
              else if (this.buffType[j] == 165)
              {
                  Player player26 = this;
                  player26.lifeRegen = player26.lifeRegen + 6;
                  Player player27 = this;
                  player27.statDefense = player27.statDefense + 8;
                  this.dryadWard = true;
                  if (this.thorns &lt; 1f)
                  {
                      Player player28 = this;
                      player28.thorns = player28.thorns + 0.2f;
                  }
              }
              else if (this.buffType[j] == 144)
              {
                  this.electrified = true;
                  Lighting.AddLight((int)base.Center.X / 16, (int)base.Center.Y / 16, 0.3f, 0.8f, 1.1f);
              }
              else if (this.buffType[j] == 94)
              {
                  this.manaSick = true;
                  this.manaSickReduction = Player.manaSickLessDmg * ((float)this.buffTime[j] / (float)Player.manaSickTime);
              }
              else if (this.buffType[j] &gt;= 95 &amp;&amp; this.buffType[j] &lt;= 97)
              {
                  this.buffTime[j] = 5;
                  int num3 = (byte)(1 + this.buffType[j] - 95);
                  if (this.beetleOrbs &gt; 0 &amp;&amp; this.beetleOrbs != num3)
                  {
                      if (this.beetleOrbs &lt;= num3)
                      {
                          for (int m = 0; m &lt; 22; m++)
                          {
                              if (this.buffType[m] &gt;= 95 &amp;&amp; this.buffType[m] &lt;= 95 + num3 - 1)
                              {
                                  this.DelBuff(m);
                                  m--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.beetleOrbs = num3;
                  if (this.beetleDefense)
                  {
                      this.beetleBuff = true;
                  }
                  else
                  {
                      this.beetleOrbs = 0;
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] &gt;= 170 &amp;&amp; this.buffType[j] &lt;= 172)
              {
                  this.buffTime[j] = 5;
                  int num4 = (byte)(1 + this.buffType[j] - 170);
                  if (this.solarShields &gt; 0 &amp;&amp; this.solarShields != num4)
                  {
                      if (this.solarShields &lt;= num4)
                      {
                          for (int n = 0; n &lt; 22; n++)
                          {
                              if (this.buffType[n] &gt;= 170 &amp;&amp; this.buffType[n] &lt;= 170 + num4 - 1)
                              {
                                  this.DelBuff(n);
                                  n--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.solarShields = num4;
                  if (!this.setSolar)
                  {
                      this.solarShields = 0;
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] &gt;= 98 &amp;&amp; this.buffType[j] &lt;= 100)
              {
                  int num5 = (byte)(1 + this.buffType[j] - 98);
                  if (this.beetleOrbs &gt; 0 &amp;&amp; this.beetleOrbs != num5)
                  {
                      if (this.beetleOrbs &lt;= num5)
                      {
                          for (int o = 0; o &lt; 22; o++)
                          {
                              if (this.buffType[o] &gt;= 98 &amp;&amp; this.buffType[o] &lt;= 98 + num5 - 1)
                              {
                                  this.DelBuff(o);
                                  o--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.beetleOrbs = num5;
                  Player player29 = this;
                  player29.meleeDamage = player29.meleeDamage + 0.1f * (float)this.beetleOrbs;
                  Player player30 = this;
                  player30.meleeSpeed = player30.meleeSpeed + 0.1f * (float)this.beetleOrbs;
                  if (this.beetleOffense)
                  {
                      this.beetleBuff = true;
                  }
                  else
                  {
                      this.beetleOrbs = 0;
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] &gt;= 176 &amp;&amp; this.buffType[j] &lt;= 178)
              {
                  int num6 = this.nebulaLevelMana;
                  int num7 = (byte)(1 + this.buffType[j] - 176);
                  if (num6 &gt; 0 &amp;&amp; num6 != num7)
                  {
                      if (num6 &lt;= num7)
                      {
                          for (int p = 0; p &lt; 22; p++)
                          {
                              if (this.buffType[p] &gt;= 176 &amp;&amp; this.buffType[p] &lt;= 178 + num7 - 1)
                              {
                                  this.DelBuff(p);
                                  p--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.nebulaLevelMana = num7;
                  if (this.buffTime[j] == 2 &amp;&amp; this.nebulaLevelMana &gt; 1)
                  {
                      Player player31 = this;
                      player31.nebulaLevelMana = player31.nebulaLevelMana - 1;
                      this.buffType[j] = this.buffType[j] - 1;
                      this.buffTime[j] = 480;
                  }
              }
              else if (this.buffType[j] &gt;= 173 &amp;&amp; this.buffType[j] &lt;= 175)
              {
                  int num8 = this.nebulaLevelLife;
                  int num9 = (byte)(1 + this.buffType[j] - 173);
                  if (num8 &gt; 0 &amp;&amp; num8 != num9)
                  {
                      if (num8 &lt;= num9)
                      {
                          for (int q = 0; q &lt; 22; q++)
                          {
                              if (this.buffType[q] &gt;= 173 &amp;&amp; this.buffType[q] &lt;= 175 + num9 - 1)
                              {
                                  this.DelBuff(q);
                                  q--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.nebulaLevelLife = num9;
                  if (this.buffTime[j] == 2 &amp;&amp; this.nebulaLevelLife &gt; 1)
                  {
                      Player player32 = this;
                      player32.nebulaLevelLife = player32.nebulaLevelLife - 1;
                      this.buffType[j] = this.buffType[j] - 1;
                      this.buffTime[j] = 480;
                  }
                  Player player33 = this;
                  player33.lifeRegen = player33.lifeRegen + 10 * this.nebulaLevelLife;
              }
              else if (this.buffType[j] &gt;= 179 &amp;&amp; this.buffType[j] &lt;= 181)
              {
                  int num10 = this.nebulaLevelDamage;
                  int num11 = (byte)(1 + this.buffType[j] - 179);
                  if (num10 &gt; 0 &amp;&amp; num10 != num11)
                  {
                      if (num10 &lt;= num11)
                      {
                          for (int r = 0; r &lt; 22; r++)
                          {
                              if (this.buffType[r] &gt;= 179 &amp;&amp; this.buffType[r] &lt;= 181 + num11 - 1)
                              {
                                  this.DelBuff(r);
                                  r--;
                              }
                          }
                      }
                      else
                      {
                          this.DelBuff(j);
                          j--;
                      }
                  }
                  this.nebulaLevelDamage = num11;
                  if (this.buffTime[j] == 2 &amp;&amp; this.nebulaLevelDamage &gt; 1)
                  {
                      Player player34 = this;
                      player34.nebulaLevelDamage = player34.nebulaLevelDamage - 1;
                      this.buffType[j] = this.buffType[j] - 1;
                      this.buffTime[j] = 480;
                  }
                  float single1 = 0.15f * (float)this.nebulaLevelDamage;
                  Player player35 = this;
                  player35.meleeDamage = player35.meleeDamage + single1;
                  Player player36 = this;
                  player36.rangedDamage = player36.rangedDamage + single1;
                  Player player37 = this;
                  player37.magicDamage = player37.magicDamage + single1;
                  Player player38 = this;
                  player38.minionDamage = player38.minionDamage + single1;
                  Player player39 = this;
                  player39.thrownDamage = player39.thrownDamage + single1;
              }
              else if (this.buffType[j] == 62)
              {
                  if ((double)this.statLife &gt; (double)this.statLifeMax2 * 0.5)
                  {
                      this.DelBuff(j);
                      j--;
                  }
                  else
                  {
                      Lighting.AddLight((int)(base.Center.X / 16f), (int)(base.Center.Y / 16f), 0.1f, 0.2f, 0.45f);
                      this.iceBarrier = true;
                      Player player40 = this;
                      player40.endurance = player40.endurance + 0.25f;
                      Player player41 = this;
                      player41.iceBarrierFrameCounter = (byte)(player41.iceBarrierFrameCounter + 1);
                      if (this.iceBarrierFrameCounter &gt; 2)
                      {
                          this.iceBarrierFrameCounter = 0;
                          Player player42 = this;
                          player42.iceBarrierFrame = (byte)(player42.iceBarrierFrame + 1);
                          if (this.iceBarrierFrame &gt;= 12)
                          {
                              this.iceBarrierFrame = 0;
                          }
                      }
                  }
              }
              else if (this.buffType[j] == 49)
              {
                  for (int s = 191; s &lt;= 194; s++)
                  {
                      if (this.ownedProjectileCounts[s] &gt; 0)
                      {
                          this.pygmy = true;
                      }
                  }
                  if (this.pygmy)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 83)
              {
                  if (this.ownedProjectileCounts[317] &gt; 0)
                  {
                      this.raven = true;
                  }
                  if (this.raven)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 64)
              {
                  if (this.ownedProjectileCounts[266] &gt; 0)
                  {
                      this.slime = true;
                  }
                  if (this.slime)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 125)
              {
                  if (this.ownedProjectileCounts[373] &gt; 0)
                  {
                      this.hornetMinion = true;
                  }
                  if (this.hornetMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 126)
              {
                  if (this.ownedProjectileCounts[375] &gt; 0)
                  {
                      this.impMinion = true;
                  }
                  if (this.impMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 133)
              {
                  if (this.ownedProjectileCounts[390] &gt; 0 || this.ownedProjectileCounts[391] &gt; 0 || this.ownedProjectileCounts[392] &gt; 0)
                  {
                      this.spiderMinion = true;
                  }
                  if (this.spiderMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 134)
              {
                  if (this.ownedProjectileCounts[387] &gt; 0 || this.ownedProjectileCounts[388] &gt; 0)
                  {
                      this.twinsMinion = true;
                  }
                  if (this.twinsMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 135)
              {
                  if (this.ownedProjectileCounts[393] &gt; 0 || this.ownedProjectileCounts[394] &gt; 0 || this.ownedProjectileCounts[395] &gt; 0)
                  {
                      this.pirateMinion = true;
                  }
                  if (this.pirateMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 139)
              {
                  if (this.ownedProjectileCounts[407] &gt; 0)
                  {
                      this.sharknadoMinion = true;
                  }
                  if (this.sharknadoMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 140)
              {
                  if (this.ownedProjectileCounts[423] &gt; 0)
                  {
                      this.UFOMinion = true;
                  }
                  if (this.UFOMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 182)
              {
                  if (this.ownedProjectileCounts[613] &gt; 0)
                  {
                      this.stardustMinion = true;
                  }
                  if (this.stardustMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 187)
              {
                  if (this.ownedProjectileCounts[623] &gt; 0)
                  {
                      this.stardustGuardian = true;
                  }
                  if (this.stardustGuardian)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 188)
              {
                  if (this.ownedProjectileCounts[625] &gt; 0)
                  {
                      this.stardustDragon = true;
                  }
                  if (this.stardustDragon)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 161)
              {
                  if (this.ownedProjectileCounts[533] &gt; 0)
                  {
                      this.DeadlySphereMinion = true;
                  }
                  if (this.DeadlySphereMinion)
                  {
                      this.buffTime[j] = 18000;
                  }
                  else
                  {
                      this.DelBuff(j);
                      j--;
                  }
              }
              else if (this.buffType[j] == 90)
              {
                  this.mount.SetMount(0, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 128)
              {
                  this.mount.SetMount(1, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 129)
              {
                  this.mount.SetMount(2, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 130)
              {
                  this.mount.SetMount(3, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 118)
              {
                  this.mount.SetMount(6, this, true);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 138)
              {
                  this.mount.SetMount(6, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 167)
              {
                  this.mount.SetMount(11, this, true);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 166)
              {
                  this.mount.SetMount(11, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 184)
              {
                  this.mount.SetMount(13, this, true);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 185)
              {
                  this.mount.SetMount(13, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 131)
              {
                  this.ignoreWater = true;
                  this.accFlipper = true;
                  this.mount.SetMount(4, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 132)
              {
                  this.mount.SetMount(5, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 168)
              {
                  this.ignoreWater = true;
                  this.accFlipper = true;
                  this.mount.SetMount(12, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 141)
              {
                  this.mount.SetMount(7, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 142)
              {
                  this.mount.SetMount(8, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 143)
              {
                  this.mount.SetMount(9, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 162)
              {
                  this.mount.SetMount(10, this, false);
                  this.buffTime[j] = 10;
              }
              else if (this.buffType[j] == 37)
              {
                  if (Main.wof &lt; 0 || Main.npc[Main.wof].type != 113)
                  {
                      this.DelBuff(j);
                      j--;
                  }
                  else
                  {
                      this.gross = true;
                      this.buffTime[j] = 10;
                  }
              }
              else if (this.buffType[j] == 38)
              {
                  this.buffTime[j] = 10;
                  this.tongued = true;
              }
              else if (this.buffType[j] == 146)
              {
                  Player player43 = this;
                  player43.moveSpeed = player43.moveSpeed + 0.1f;
                  Player player44 = this;
                  player44.moveSpeed = player44.moveSpeed * 1.1f;
                  this.sunflower = true;
              }
              else if (this.buffType[j] == 19)
              {
                  this.buffTime[j] = 18000;
                  this.lightOrb = true;
                  bool flag1 = true;
                  if (this.ownedProjectileCounts[18] &gt; 0)
                  {
                      flag1 = false;
                  }
                  if (flag1)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 18, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 155)
              {
                  this.buffTime[j] = 18000;
                  this.crimsonHeart = true;
                  bool flag2 = true;
                  if (this.ownedProjectileCounts[500] &gt; 0)
                  {
                      flag2 = false;
                  }
                  if (flag2)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 500, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 190)
              {
                  this.buffTime[j] = 18000;
                  this.suspiciouslookingTentacle = true;
                  bool flag3 = true;
                  if (this.ownedProjectileCounts[650] &gt; 0)
                  {
                      flag3 = false;
                  }
                  if (flag3)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 650, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 27 || this.buffType[j] == 101 || this.buffType[j] == 102)
              {
                  this.buffTime[j] = 18000;
                  bool flag4 = true;
                  int num12 = 72;
                  if (this.buffType[j] == 27)
                  {
                      this.blueFairy = true;
                  }
                  if (this.buffType[j] == 101)
                  {
                      num12 = 86;
                      this.redFairy = true;
                  }
                  if (this.buffType[j] == 102)
                  {
                      num12 = 87;
                      this.greenFairy = true;
                  }
                  if (this.head == 45 &amp;&amp; this.body == 26 &amp;&amp; this.legs == 25)
                  {
                      num12 = 72;
                  }
                  if (this.ownedProjectileCounts[num12] &gt; 0)
                  {
                      flag4 = false;
                  }
                  if (flag4)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, num12, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 40)
              {
                  this.buffTime[j] = 18000;
                  this.bunny = true;
                  bool flag5 = true;
                  if (this.ownedProjectileCounts[111] &gt; 0)
                  {
                      flag5 = false;
                  }
                  if (flag5)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 111, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 148)
              {
                  this.rabid = true;
                  if (Main.rand.Next(1200) == 0)
                  {
                      int num13 = Main.rand.Next(6);
                      float single2 = (float)Main.rand.Next(60, 100) * 0.01f;
                      if (num13 == 0)
                      {
                          this.AddBuff(22, (int)(60f * single2 * 3f), true);
                      }
                      else if (num13 == 1)
                      {
                          this.AddBuff(23, (int)(60f * single2 * 0.75f), true);
                      }
                      else if (num13 == 2)
                      {
                          this.AddBuff(31, (int)(60f * single2 * 1.5f), true);
                      }
                      else if (num13 == 3)
                      {
                          this.AddBuff(32, (int)(60f * single2 * 3.5f), true);
                      }
                      else if (num13 == 4)
                      {
                          this.AddBuff(33, (int)(60f * single2 * 5f), true);
                      }
                      else if (num13 == 5)
                      {
                          this.AddBuff(35, (int)(60f * single2 * 1f), true);
                      }
                  }
                  Player player45 = this;
                  player45.meleeDamage = player45.meleeDamage + 0.2f;
                  Player player46 = this;
                  player46.magicDamage = player46.magicDamage + 0.2f;
                  Player player47 = this;
                  player47.rangedDamage = player47.rangedDamage + 0.2f;
                  Player player48 = this;
                  player48.thrownDamage = player48.thrownDamage + 0.2f;
                  Player player49 = this;
                  player49.minionDamage = player49.minionDamage + 0.2f;
              }
              else if (this.buffType[j] == 41)
              {
                  this.buffTime[j] = 18000;
                  this.penguin = true;
                  bool flag6 = true;
                  if (this.ownedProjectileCounts[112] &gt; 0)
                  {
                      flag6 = false;
                  }
                  if (flag6)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 112, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 152)
              {
                  this.buffTime[j] = 18000;
                  this.magicLantern = true;
                  if (this.ownedProjectileCounts[492] == 0)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 492, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 91)
              {
                  this.buffTime[j] = 18000;
                  this.puppy = true;
                  bool flag7 = true;
                  if (this.ownedProjectileCounts[334] &gt; 0)
                  {
                      flag7 = false;
                  }
                  if (flag7)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 334, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 92)
              {
                  this.buffTime[j] = 18000;
                  this.grinch = true;
                  bool flag8 = true;
                  if (this.ownedProjectileCounts[353] &gt; 0)
                  {
                      flag8 = false;
                  }
                  if (flag8)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 353, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 84)
              {
                  this.buffTime[j] = 18000;
                  this.blackCat = true;
                  bool flag9 = true;
                  if (this.ownedProjectileCounts[319] &gt; 0)
                  {
                      flag9 = false;
                  }
                  if (flag9)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 319, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 61)
              {
                  this.buffTime[j] = 18000;
                  this.dino = true;
                  bool flag10 = true;
                  if (this.ownedProjectileCounts[236] &gt; 0)
                  {
                      flag10 = false;
                  }
                  if (flag10)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 236, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 154)
              {
                  this.buffTime[j] = 18000;
                  this.babyFaceMonster = true;
                  bool flag11 = true;
                  if (this.ownedProjectileCounts[499] &gt; 0)
                  {
                      flag11 = false;
                  }
                  if (flag11)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 499, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 65)
              {
                  this.buffTime[j] = 18000;
                  this.eyeSpring = true;
                  bool flag12 = true;
                  if (this.ownedProjectileCounts[268] &gt; 0)
                  {
                      flag12 = false;
                  }
                  if (flag12)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 268, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 66)
              {
                  this.buffTime[j] = 18000;
                  this.snowman = true;
                  bool flag13 = true;
                  if (this.ownedProjectileCounts[269] &gt; 0)
                  {
                      flag13 = false;
                  }
                  if (flag13)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 269, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 42)
              {
                  this.buffTime[j] = 18000;
                  this.turtle = true;
                  bool flag14 = true;
                  if (this.ownedProjectileCounts[127] &gt; 0)
                  {
                      flag14 = false;
                  }
                  if (flag14)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 127, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 45)
              {
                  this.buffTime[j] = 18000;
                  this.eater = true;
                  bool flag15 = true;
                  if (this.ownedProjectileCounts[175] &gt; 0)
                  {
                      flag15 = false;
                  }
                  if (flag15)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 175, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 50)
              {
                  this.buffTime[j] = 18000;
                  this.skeletron = true;
                  bool flag16 = true;
                  if (this.ownedProjectileCounts[197] &gt; 0)
                  {
                      flag16 = false;
                  }
                  if (flag16)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 197, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 51)
              {
                  this.buffTime[j] = 18000;
                  this.hornet = true;
                  bool flag17 = true;
                  if (this.ownedProjectileCounts[198] &gt; 0)
                  {
                      flag17 = false;
                  }
                  if (flag17)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 198, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 52)
              {
                  this.buffTime[j] = 18000;
                  this.tiki = true;
                  bool flag18 = true;
                  if (this.ownedProjectileCounts[199] &gt; 0)
                  {
                      flag18 = false;
                  }
                  if (flag18)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 199, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 53)
              {
                  this.buffTime[j] = 18000;
                  this.lizard = true;
                  bool flag19 = true;
                  if (this.ownedProjectileCounts[200] &gt; 0)
                  {
                      flag19 = false;
                  }
                  if (flag19)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 200, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 54)
              {
                  this.buffTime[j] = 18000;
                  this.parrot = true;
                  bool flag20 = true;
                  if (this.ownedProjectileCounts[208] &gt; 0)
                  {
                      flag20 = false;
                  }
                  if (flag20)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 208, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 55)
              {
                  this.buffTime[j] = 18000;
                  this.truffle = true;
                  bool flag21 = true;
                  if (this.ownedProjectileCounts[209] &gt; 0)
                  {
                      flag21 = false;
                  }
                  if (flag21)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 209, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 56)
              {
                  this.buffTime[j] = 18000;
                  this.sapling = true;
                  bool flag22 = true;
                  if (this.ownedProjectileCounts[210] &gt; 0)
                  {
                      flag22 = false;
                  }
                  if (flag22)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 210, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 85)
              {
                  this.buffTime[j] = 18000;
                  this.cSapling = true;
                  bool flag23 = true;
                  if (this.ownedProjectileCounts[324] &gt; 0)
                  {
                      flag23 = false;
                  }
                  if (flag23)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 324, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 81)
              {
                  this.buffTime[j] = 18000;
                  this.spider = true;
                  bool flag24 = true;
                  if (this.ownedProjectileCounts[313] &gt; 0)
                  {
                      flag24 = false;
                  }
                  if (flag24)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 313, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 82)
              {
                  this.buffTime[j] = 18000;
                  this.squashling = true;
                  bool flag25 = true;
                  if (this.ownedProjectileCounts[314] &gt; 0)
                  {
                      flag25 = false;
                  }
                  if (flag25)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 314, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 57)
              {
                  this.buffTime[j] = 18000;
                  this.wisp = true;
                  bool flag26 = true;
                  if (this.ownedProjectileCounts[211] &gt; 0)
                  {
                      flag26 = false;
                  }
                  if (flag26)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 211, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 60)
              {
                  this.buffTime[j] = 18000;
                  this.crystalLeaf = true;
                  bool flag27 = true;
                  for (int t = 0; t &lt; 1000; t++)
                  {
                      if (Main.projectile[t].active &amp;&amp; Main.projectile[t].owner == this.whoAmI &amp;&amp; Main.projectile[t].type == 226)
                      {
                          if (!flag27)
                          {
                              Main.projectile[t].Kill();
                          }
                          flag27 = false;
                      }
                  }
                  if (flag27)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 226, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 127)
              {
                  this.buffTime[j] = 18000;
                  this.zephyrfish = true;
                  bool flag28 = true;
                  if (this.ownedProjectileCounts[380] &gt; 0)
                  {
                      flag28 = false;
                  }
                  if (flag28)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 380, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 136)
              {
                  this.buffTime[j] = 18000;
                  this.miniMinotaur = true;
                  bool flag29 = true;
                  if (this.ownedProjectileCounts[398] &gt; 0)
                  {
                      flag29 = false;
                  }
                  if (flag29)
                  {
                      Projectile.NewProjectile(this.position.X + (float)(this.width / 2), this.position.Y + (float)(this.height / 2), 0f, 0f, 398, 0, 0f, this.whoAmI, 0f, 0f);
                  }
              }
              else if (this.buffType[j] == 70)
              {
                  this.venom = true;
              }
              else if (this.buffType[j] == 20)
              {
                  this.poisoned = true;
              }
              else if (this.buffType[j] == 21)
              {
                  this.potionDelay = this.buffTime[j];
              }
              else if (this.buffType[j] == 22)
              {
                  this.blind = true;
              }
              else if (this.buffType[j] == 80)
              {
                  this.blackout = true;
              }
              else if (this.buffType[j] == 23)
              {
                  this.noItems = true;
              }
              else if (this.buffType[j] == 24)
              {
                  this.onFire = true;
              }
              else if (this.buffType[j] == 103)
              {
                  this.dripping = true;
              }
              else if (this.buffType[j] == 137)
              {
                  this.drippingSlime = true;
              }
              else if (this.buffType[j] == 67)
              {
                  this.burned = true;
              }
              else if (this.buffType[j] == 68)
              {
                  this.suffocating = true;
              }
              else if (this.buffType[j] == 39)
              {
                  this.onFire2 = true;
              }
              else if (this.buffType[j] == 44)
              {
                  this.onFrostBurn = true;
              }
              else if (this.buffType[j] == 163)
              {
                  this.headcovered = true;
                  this.bleed = true;
              }
              else if (this.buffType[j] == 164)
              {
                  this.vortexDebuff = true;
              }
              else if (this.buffType[j] == 145)
              {
                  this.moonLeech = true;
              }
              else if (this.buffType[j] == 149)
              {
                  this.webbed = true;
                  if (this.velocity.Y == 0f)
                  {
                      this.velocity = Vector2.Zero;
                  }
                  else
                  {
                      this.velocity = new Vector2(0f, 1E-06f);
                  }
                  Player.jumpHeight = 0;
                  this.gravity = 0f;
                  this.moveSpeed = 0f;
                  this.dash = 0;
                  this.noKnockback = true;
                  this.grappling[0] = -1;
                  this.grapCount = 0;
                  for (int u = 0; u &lt; 1000; u++)
                  {
                      if (Main.projectile[u].active &amp;&amp; Main.projectile[u].owner == this.whoAmI &amp;&amp; Main.projectile[u].aiStyle == 7)
                      {
                          Main.projectile[u].Kill();
                      }
                  }
              }
              else if (this.buffType[j] == 43)
              {
                  this.paladinBuff = true;
              }
              else if (this.buffType[j] == 29)
              {
                  Player player50 = this;
                  player50.magicCrit = player50.magicCrit + 2;
                  Player player51 = this;
                  player51.magicDamage = player51.magicDamage + 0.05f;
                  Player player52 = this;
                  player52.statManaMax2 = player52.statManaMax2 + 20;
                  Player player53 = this;
                  player53.manaCost = player53.manaCost - 0.02f;
              }
              else if (this.buffType[j] == 28)
              {
                  if (Main.dayTime || !this.wolfAcc || this.merman)
                  {
                      this.DelBuff(j);
                      j--;
                  }
                  else
                  {
                      Player player54 = this;
                      player54.lifeRegen = player54.lifeRegen + 1;
                      this.wereWolf = true;
                      Player player55 = this;
                      player55.meleeCrit = player55.meleeCrit + 2;
                      Player player56 = this;
                      player56.meleeDamage = player56.meleeDamage + 0.051f;
                      Player player57 = this;
                      player57.meleeSpeed = player57.meleeSpeed + 0.051f;
                      Player player58 = this;
                      player58.statDefense = player58.statDefense + 3;
                      Player player59 = this;
                      player59.moveSpeed = player59.moveSpeed + 0.05f;
                  }
              }
              else if (this.buffType[j] == 33)
              {
                  Player player60 = this;
                  player60.meleeDamage = player60.meleeDamage - 0.051f;
                  Player player61 = this;
                  player61.meleeSpeed = player61.meleeSpeed - 0.051f;
                  Player player62 = this;
                  player62.statDefense = player62.statDefense - 4;
                  Player player63 = this;
                  player63.moveSpeed = player63.moveSpeed - 0.1f;
              }
              else if (this.buffType[j] == 25)
              {
                  Player player64 = this;
                  player64.statDefense = player64.statDefense - 4;
                  Player player65 = this;
                  player65.meleeCrit = player65.meleeCrit + 2;
                  Player player66 = this;
                  player66.meleeDamage = player66.meleeDamage + 0.1f;
                  Player player67 = this;
                  player67.meleeSpeed = player67.meleeSpeed + 0.1f;
              }
              else if (this.buffType[j] == 26)
              {
                  this.wellFed = true;
                  Player player68 = this;
                  player68.statDefense = player68.statDefense + 2;
                  Player player69 = this;
                  player69.meleeCrit = player69.meleeCrit + 2;
                  Player player70 = this;
                  player70.meleeDamage = player70.meleeDamage + 0.05f;
                  Player player71 = this;
                  player71.meleeSpeed = player71.meleeSpeed + 0.05f;
                  Player player72 = this;
                  player72.magicCrit = player72.magicCrit + 2;
                  Player player73 = this;
                  player73.magicDamage = player73.magicDamage + 0.05f;
                  Player player74 = this;
                  player74.rangedCrit = player74.rangedCrit + 2;
                  Player player75 = this;
                  player75.rangedDamage = player75.rangedDamage + 0.05f;
                  Player player76 = this;
                  player76.thrownCrit = player76.thrownCrit + 2;
                  Player player77 = this;
                  player77.thrownDamage = player77.thrownDamage + 0.05f;
                  Player player78 = this;
                  player78.minionDamage = player78.minionDamage + 0.05f;
                  Player player79 = this;
                  player79.minionKB = player79.minionKB + 0.5f;
                  Player player80 = this;
                  player80.moveSpeed = player80.moveSpeed + 0.2f;
              }
              else if (this.buffType[j] == 71)
              {
                  this.meleeEnchant = 1;
              }
              else if (this.buffType[j] == 73)
              {
                  this.meleeEnchant = 2;
              }
              else if (this.buffType[j] == 74)
              {
                  this.meleeEnchant = 3;
              }
              else if (this.buffType[j] == 75)
              {
                  this.meleeEnchant = 4;
              }
              else if (this.buffType[j] == 76)
              {
                  this.meleeEnchant = 5;
              }
              else if (this.buffType[j] == 77)
              {
                  this.meleeEnchant = 6;
              }
              else if (this.buffType[j] == 78)
              {
                  this.meleeEnchant = 7;
              }
              else if (this.buffType[j] == 79)
              {
                  this.meleeEnchant = 8;
              }
          }
      }
  }
[ENABLE]
[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"IGNORE"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"_updatebuff loop start next"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2015-07-08
  Author : user

  This script does blah blah blah
}

[ENABLE]

aobscan(_NextBuff,8B 45 EC 8B 93 9C 00 00 00 3B 42 04 0F 83 B4) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,[ebp-14]
  mov edx,[ebx+0000009C]
  jmp return

_NextBuff:
  jmp code
  nop
  nop
  nop
  nop
return:
registersymbol(_NextBuff)

[DISABLE]

_NextBuff:
  db 8B 45 EC 8B 93 9C 00 00 00

unregistersymbol(_NextBuff)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C0B00FB

0C0B00D6: FF 00                 -  inc [eax]
0C0B00D8: 41                    -  inc ecx
0C0B00D9: 81 F9 E8 03 00 00     -  cmp ecx,000003E8
0C0B00DF: 7C BF                 -  jl 0C0B00A0
0C0B00E1: 33 D2                 -  xor edx,edx
0C0B00E3: 89 55 EC              -  mov [ebp-14],edx
0C0B00E6: B9 90 52 2A 00        -  mov ecx,002A5290
0C0B00EB: BA 7E 01 00 00        -  mov edx,0000017E
0C0B00F0: E8 26 F5 1A 66        -  call clr.dll+F61B
0C0B00F5: 89 85 E0 FE FF FF     -  mov [ebp-00000120],eax
// ---------- INJECTING HERE ----------
0C0B00FB: 8B 45 EC              -  mov eax,[ebp-14]
0C0B00FE: 8B 93 9C 00 00 00     -  mov edx,[ebx+0000009C]
// ---------- DONE INJECTING  ----------
0C0B0104: 3B 42 04              -  cmp eax,[edx+04]
0C0B0107: 0F 83 B4 3D 00 00     -  jae 0C0B3EC1
0C0B010D: 8B 4C 82 08           -  mov ecx,[edx+eax*4+08]
0C0B0111: 85 C9                 -  test ecx,ecx
0C0B0113: 0F 8E 93 3D 00 00     -  jng 0C0B3EAC
0C0B0119: 8B 93 A0 00 00 00     -  mov edx,[ebx+000000A0]
0C0B011F: 3B 42 04              -  cmp eax,[edx+04]
0C0B0122: 0F 83 99 3D 00 00     -  jae 0C0B3EC1
0C0B0128: 83 7C 82 08 00        -  cmp dword ptr [edx+eax*4+08],00
0C0B012D: 0F 8E 79 3D 00 00     -  jng 0C0B3EAC
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>0</ID>
          <Description>"_buff check"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2015-07-08
  Author : user

  This script does blah blah blah
}

[ENABLE]

aobscan(_buff,C7 44 82 08 50 46 00 00 C6 83 FB) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [edx+eax*4+08],00004650
  jmp return

_buff:
  jmp code
  nop
  nop
  nop
return:
registersymbol(_buff)

[DISABLE]

_buff:
  db C7 44 82 08 50 46 00 00

unregistersymbol(_buff)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C0B3753

0C0B3726: B9 D3 00 00 00           -  mov ecx,000000D3
0C0B372B: 33 D2                    -  xor edx,edx
0C0B372D: FF 15 18 94 B8 02        -  call dword ptr [02B89418]
0C0B3733: E9 74 07 00 00           -  jmp 0C0B3EAC
0C0B3738: 83 F9 3C                 -  cmp ecx,3C
0C0B373B: 0F 85 F6 00 00 00        -  jne 0C0B3837
0C0B3741: 8B 45 EC                 -  mov eax,[ebp-14]
0C0B3744: 8B 93 A0 00 00 00        -  mov edx,[ebx+000000A0]
0C0B374A: 3B 42 04                 -  cmp eax,[edx+04]
0C0B374D: 0F 83 6E 07 00 00        -  jae 0C0B3EC1
// ---------- INJECTING HERE ----------
0C0B3753: C7 44 82 08 50 46 00 00  -  mov [edx+eax*4+08],00004650
// ---------- DONE INJECTING  ----------
0C0B375B: C6 83 FB 04 00 00 01     -  mov byte ptr [ebx+000004FB],01
0C0B3762: BA 01 00 00 00           -  mov edx,00000001
0C0B3767: 33 F6                    -  xor esi,esi
0C0B3769: 81 FE E8 03 00 00        -  cmp esi,000003E8
0C0B376F: 7D 45                    -  jnl 0C0B37B6
0C0B3771: A1 34 43 EC 03           -  mov eax,[03EC4334]
0C0B3776: A1 34 43 EC 03           -  mov eax,[03EC4334]
0C0B377B: 3B 70 04                 -  cmp esi,[eax+04]
0C0B377E: 0F 83 3D 07 00 00        -  jae 0C0B3EC1
0C0B3784: 8B 4C B0 0C              -  mov ecx,[eax+esi*4+0C]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"_updateBuffs_start"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : Terraria.exe
  Version: 
  Date   : 2015-07-08
  Author : user

  This script does blah blah blah
}

[ENABLE]

aobscan(_updatebuffstart,8B 93 9C 00 00 00 3B 42 04 0F 83 54) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov edx,[ebx+0000009C]
  jmp return

_updatebuffstart:
  jmp code
  nop
return:
registersymbol(_updatebuffstart)

[DISABLE]

_updatebuffstart:
  db 8B 93 9C 00 00 00

unregistersymbol(_updatebuffstart)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0C0B015E

0C0B013C: 75 1D                          -  jne 0C0B015B
0C0B013E: 83 F9 1C                       -  cmp ecx,1C
0C0B0141: 74 18                          -  je 0C0B015B
0C0B0143: 8B 45 EC                       -  mov eax,[ebp-14]
0C0B0146: 8B 93 A0 00 00 00              -  mov edx,[ebx+000000A0]
0C0B014C: 3B 42 04                       -  cmp eax,[edx+04]
0C0B014F: 0F 83 6C 3D 00 00              -  jae 0C0B3EC1
0C0B0155: 8D 44 82 08                    -  lea eax,[edx+eax*4+08]
0C0B0159: FF 08                          -  dec [eax]
0C0B015B: 8B 45 EC                       -  mov eax,[ebp-14]
// ---------- INJECTING HERE ----------
0C0B015E: 8B 93 9C 00 00 00              -  mov edx,[ebx+0000009C]
// ---------- DONE INJECTING  ----------
0C0B0164: 3B 42 04                       -  cmp eax,[edx+04]
0C0B0167: 0F 83 54 3D 00 00              -  jae 0C0B3EC1
0C0B016D: 8B 4C 82 08                    -  mov ecx,[edx+eax*4+08]
0C0B0171: 83 F9 01                       -  cmp ecx,01
0C0B0174: 75 27                          -  jne 0C0B019D
0C0B0176: C6 83 D9 05 00 00 01           -  mov byte ptr [ebx+000005D9],01
0C0B017D: C6 83 3C 05 00 00 01           -  mov byte ptr [ebx+0000053C],01
0C0B0184: 8B 83 A4 00 00 00              -  mov eax,[ebx+000000A4]
0C0B018A: 83 78 04 18                    -  cmp dword ptr [eax+04],18
0C0B018E: 0F 86 2D 3D 00 00              -  jbe 0C0B3EC1
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"buffs"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>Define(_now,_TER+10)
Define(_saveType,_TER+18)
Define(_saveTime,_TER+1c)
Define(_typeArr,_TER+20)
Define(_timeArr,_TER+24)
Define(_loopVar,_TER+28)
Define(_loopCnt,_TER+2c)
Define(_saveHook,_TER+30)
Define(_buffList,_TER+300)
Define(_loopHook,_TER+100)


[ENABLE]
_buffList: // target buff no., use #123 for decimal, end with 0
dd #1,#2,#3,#6,#7,#8,#9,#11,#12,#15,#17,#18,#63,#48,#59,#122,#123
dd #60,#127,#136,#57,#82,#81,#85,#56,#55,#54,#53,#52 // summoned things
dd #158,#107,#108,#109,#110,#150,#111,#112,#113,#114,#115,#165
dd 0

//             00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F
aobscan(_buffs,8b ?? ?? 8b ?? ?? ?? 00 00 3b 42 04 0f 83 ?? ?? 00 00 8b ?? ?? 08 85 ?? 0f ?? ?? ?? 00 00 8b ?? ?? ?? 00 00 3b ?? 04 0f ?? ?? ?? ?? ?? 83 ?? ?? ?? ?? 0f ?? ?? ?? ?? ?? 8b ?? ?? 3b ?? ?? ?? ?? ?? 75)
_saveHook:
readmem(_buffs+03,6)
_typeArr:
readmem(_buffs+05,4)
_timeArr:
readmem(_buffs+20,4)
_loopVar:
readmem(_buffs+02,1)

label(_done)
label(_check1)

_loopHook:// free eax?, ecx,edx
mov  [_loopCnt],eax
readmem(_buffs+38,9)
jne  _done // not player
mov  eax,[_loopCnt]

mov  edx,[_typeArr]
add  edx,ebx
mov  edx,[edx]
cmp  [edx+8],0    // previous buff removed


jne  @f
xor  eax,eax // reset loop idx to 1
inc  eax
mov  [_loopCnt],eax

jmp  _check1
@@:
test eax,eax
jne  _check1
mov  [_now],eax // reset target buff index
// save original 1st buff anyway
mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
//cmp  [eax+4],1
//jge  @f        // force at least one item
//mov  [eax+4],1
@@:
mov  eax,[eax+08]  // 1st buff item
mov  [_saveType],eax
mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
//cmp  [eax+4],1
//jge  @f        // force at least one item
//mov  [eax+4],1
@@:
mov  eax,[eax+08]
mov  [_saveTime],eax
jmp  _done
_check1:
cmp  eax,1 //
jne  _done //
mov  eax,[_now]
mov  ecx,[_buffList+eax*4]
test ecx,ecx
jne  @f
// restore for no more target buff
mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
mov  ecx,[_saveType]
mov  [eax+8],ecx

mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
mov  ecx,[_saveTime]
mov  [eax+8],ecx
jmp _done
@@:
// change back the loop cnt to zero and we put our target buff on the arr
xor eax,eax
mov [_loopCnt],eax

movsx edx,byte ptr [_loopVar] // also the local loop cnt [ebp-14]
add edx,ebp
mov [edx],eax

mov  eax,[_typeArr]
add  eax,ebx
mov  eax,[eax]
mov  [eax+8],ecx    // type

mov  eax,[_timeArr]
add  eax,ebx
mov  eax,[eax]
mov  [eax+8],#1000  // time
inc  [_now] // next target buff
_done:
mov  eax,[_loopCnt]
readmem(_buffs+03,6)
jmp _buffs+09


_buffs+03:
jmp _loopHook
nop

[DISABLE]
aobscan(_buffs,8b ?? ?? e9 ?? ?? ?? ?? ?? 3b 42 04 0f 83 ?? ?? 00 00 8b ?? ?? 08 85 ?? 0f ?? ?? ?? 00 00 8b ?? ?? ?? 00 00 3b ?? 04 0f ?? ?? ?? ?? ?? 83 ?? ?? ?? ?? 0f ?? ?? ?? ?? ?? 8b ?? ?? 3b ?? ?? ?? ?? ?? 75)
_buffs+03:
readmem(_saveHook,6)


{
//  UpdateBuffs - loop start next buff
// ORIGINAL CODE - INJECTION POINT: 0C0B00FB (mutable)

0C0B00D6: FF 00                 -  inc [eax]
0C0B00D8: 41                    -  inc ecx
0C0B00D9: 81 F9 E8 03 00 00     -  cmp ecx,000003E8
0C0B00DF: 7C BF                 -  jl 0C0B00A0
0C0B00E1: 33 D2                 -  xor edx,edx
0C0B00E3: 89 55 EC              -  mov [ebp-14],edx
0C0B00E6: B9 90 52 2A 00        -  mov ecx,002A5290
0C0B00EB: BA 7E 01 00 00        -  mov edx,0000017E
0C0B00F0: E8 26 F5 1A 66        -  call clr.dll+F61B
0C0B00F5: 89 85 E0 FE FF FF     -  mov [ebp-00000120],eax
// ---------- INJECTING HERE ----------
0C0B00FB: 8B 45 EC              -  mov eax,[ebp-14]
0C0B00FE: 8B 93 9C 00 00 00     -  mov edx,[ebx+0000009C]
// ---------- DONE INJECTING  ----------
0C0B0104: 3B 42 04              -  cmp eax,[edx+04]
0C0B0107: 0F 83 B4 3D 00 00     -  jae 0C0B3EC1
0C0B010D: 8B 4C 82 08           -  mov ecx,[edx+eax*4+08]
0C0B0111: 85 C9                 -  test ecx,ecx
0C0B0113: 0F 8E 93 3D 00 00     -  jng 0C0B3EAC
0C0B0119: 8B 93 A0 00 00 00     -  mov edx,[ebx+000000A0]
0C0B011F: 3B 42 04              -  cmp eax,[edx+04]
0C0B0122: 0F 83 99 3D 00 00     -  jae 0C0B3EC1
0C0B0128: 83 7C 82 08 00        -  cmp dword ptr [edx+eax*4+08],00
0C0B012D: 0F 8E 79 3D 00 00     -  jng 0C0B3EAC
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>mouseover_aob</Name>
      <Address>11D6A5BE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>players</Name>
      <Address>1179E48E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>timer_aob</Name>
      <Address>1193233D</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_TER</Name>
      <Address>004C0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
