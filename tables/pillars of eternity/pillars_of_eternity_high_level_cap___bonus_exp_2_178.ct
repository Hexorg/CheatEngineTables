<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>60</ID>
      <Description>"Enable this one"</Description>
      <Options moBindActivation="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : PillarsOfEternity.exe
  Version: 1.0
  Date   : 2015-03-29
  Author : deama
}

[ENABLE]
 
 
aobscan(INJECT2,8B 8F 08 01 00 00 3B)
alloc(newmem,$1000)

label(code)
label(check0)
label(check)
label(check2)
label(check3)
label(check4)
label(restore)
label(aCheck)
label(aCheck2)
label(aCheck3)
label(firsttime)
label(isinCombat)
label(return)

alloc(mine3,16)
alloc(mine8,16)
alloc(level,16)
alloc(count,16)
alloc(reset,16)
alloc(expMod,16)
alloc(saveEXP,16)
alloc(isCombat,16)
registersymbol(mine3)
registersymbol(mine8)
registersymbol(level)
registersymbol(count)
registersymbol(reset)
registersymbol(expMod)
registersymbol(saveEXP)
registersymbol(isCombat)

expMod:
dd 1F4
////////////////////////////////////////////////////////////////////////////////
//starts here
////////////////////////////////////////////////////////////////////////////////
newmem:
mov [mine3],edi

    push eax
    push ecx
mov eax,[edi+00000104]
mov ecx,[expMod]
mul ecx
mov [mine8],eax
add [mine8],2710
    pop ecx
    pop eax

cmp [count],01
je check0

    push eax
mov eax,[edi+00000108]
cmp eax,[mine8]
    pop eax
jge check
jmp code
////////////////////////////////////////////////////////////////////////////////
//checks
////////////////////////////////////////////////////////////////////////////////
check0:
cmp [edi+00000104],0A
je restore
jmp code

restore:
cmp [edi+00000104],0C
je firsttime

    push eax
    push ecx
mov eax,[level]
mov ecx,[expMod]
mul ecx
mov [mine8],eax
add [mine8],2710
    pop ecx
    pop eax

    push eax
mov [count],0
inc [level]
mov eax,[level]
mov [edi+00000104],eax

mov eax,[saveEXP]
sub eax,[mine8]
inc eax
mov [edi+00000108],eax
    pop eax
jmp code

firsttime:
    push eax
mov [count],0
inc [level]
mov eax,[level]
mov [edi+00000104],eax
mov [edi+00000108],01
    pop eax
jmp code

aCheck:
cmp [reset],0
je aCheck2
jmp check3

aCheck2:
cmp [edi+00000108],EA60
jge aCheck3
jmp check3

aCheck3:
mov [edi+00000108],01
mov [reset],01
jmp check3

check:
cmp [edi+00000104],0C
je aCheck

check3:
cmp [edi+00000104],0C
jge check2
jmp code

check2:
    push eax
mov eax,[edi+00000108]
cmp eax,[mine8]
    pop eax
jge check4
jmp code

check4:
isinCombat:
cmp [isCombat],00
jne code

    push eax
mov eax,[edi+00000104]
mov [level],eax

mov eax,[edi+00000108]
mov [saveEXP],eax
    pop eax
mov [edi+00000104],09
mov [edi+00000108],AFC8
mov [count],01
////////////////////////////////////////////////////////////////////////////////
//Code
////////////////////////////////////////////////////////////////////////////////
code:
mov ecx,[edi+00000108]
jmp return

INJECT2:
jmp newmem
nop

return:
registersymbol(INJECT2)

[DISABLE]

INJECT2:
  db 8B 8F 08 01 00 00

unregistersymbol(INJECT2)
dealloc(newmem)
dealloc(mine3)
dealloc(mine6)
dealloc(mine8)
dealloc(level)
dealloc(count)
dealloc(reset)
dealloc(expMod)
dealloc(saveEXP)
dealloc(isCombat)
unregistersymbol(mine3)
unregistersymbol(mine6)
unregistersymbol(mine8)
unregistersymbol(level)
unregistersymbol(count)
unregistersymbol(reset)
unregistersymbol(expMod)
unregistersymbol(saveEXP)
unregistersymbol(isCombat)

{
// ORIGINAL CODE - INJECTION POINT: 2A67F17F

2A67F163: 57                             -  push edi
2A67F164: 56                             -  push esi
2A67F165: 8B 7D 08                       -  mov edi,[ebp+08]
2A67F168: 8B B7 04 01 00 00              -  mov esi,[edi+00000104]
2A67F16E: EB 01                          -  jmp 2A67F171
2A67F170: 46                             -  inc esi
2A67F171: 8D 4E 01                       -  lea ecx,[esi+01]
2A67F174: 8B C6                          -  mov eax,esi
2A67F176: 0F AF C1                       -  imul eax,ecx
2A67F179: 69 C0 F4 01 00 00              -  imul eax,eax,000001F4
// ---------- INJECTING HERE ----------
2A67F17F: 8B 8F 08 01 00 00              -  mov ecx,[edi+00000108]
// ---------- DONE INJECTING  ----------
2A67F185: 3B C1                          -  cmp eax,ecx
2A67F187: 7E E7                          -  jle 2A67F170
2A67F189: 8B C6                          -  mov eax,esi
2A67F18B: 8D 65 F8                       -  lea esp,[ebp-08]
2A67F18E: 5E                             -  pop esi
2A67F18F: 5F                             -  pop edi
2A67F190: C9                             -  leave 
2A67F191: C3                             -  ret 
2A67F192: 00 00                          -  add [eax],al
2A67F194: 00 00                          -  add [eax],al
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>61</ID>
          <Description>"EXP multiplier - don't touch"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PillarsOfEternity.exe
  Version: 
  Date   : 2015-03-28
  Author : deama

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(INJECT,89 88 08 01 00 00 C9 C3 00 68) // should be unique
alloc(newmem,$1000)

alloc(mine,16)
alloc(mine2,16)
alloc(mine4,16)
registersymbol(mine)
registersymbol(mine2)
registersymbol(mine4)

label(code)
label(check)
label(return)

mine4:
dd 05

newmem:
cmp [mine3],eax
je check
jmp code

check:
    push ecx
mov ecx,[eax+00000108]
mov [mine],ecx
    pop ecx
mov [mine2],ecx

    push eax
mov eax,[mine]
sub [mine2],eax
    pop eax

    push eax
mov eax,[mine2]
    push ecx
mov ecx,[mine4]
mul ecx
    pop ecx
add ecx,eax
    pop eax

code:
mov [eax+00000108],ecx
jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT:
  db 89 88 08 01 00 00

unregistersymbol(INJECT)
dealloc(newmem)
dealloc(mine)
dealloc(mine2)
dealloc(mine4)
unregistersymbol(mine)
unregistersymbol(mine2)
unregistersymbol(mine4)
{
// ORIGINAL CODE - INJECTION POINT: 1706CFFF

1706CFE1: 8B EC                 -  mov ebp,esp
1706CFE3: 83 EC 08              -  sub esp,08
1706CFE6: 83 EC 0C              -  sub esp,0C
1706CFE9: FF 75 08              -  push [ebp+08]
1706CFEC: E8 27 00 00 00        -  call 1706D018
1706CFF1: 83 C4 10              -  add esp,10
1706CFF4: 8B 4D 0C              -  mov ecx,[ebp+0C]
1706CFF7: 3B C8                 -  cmp ecx,eax
1706CFF9: 0F 4F C8              -  cmovg ecx,eax
1706CFFC: 8B 45 08              -  mov eax,[ebp+08]
// ---------- INJECTING HERE ----------
1706CFFF: 89 88 08 01 00 00     -  mov [eax+00000108],ecx
// ---------- DONE INJECTING  ----------
1706D005: C9                    -  leave 
1706D006: C3                    -  ret 
1706D007: 00 68 D0              -  add [eax-30],ch
1706D00A: B8 E0 0C E9 16        -  mov eax,16E90CE0
1706D00F: 30 FD                 -  xor ch,bh
1706D011: EC                    -  in al,dx
1706D012: 00 00                 -  add [eax],al
1706D014: 00 00                 -  add [eax],al
1706D016: 00 00                 -  add [eax],al
1706D018: 55                    -  push ebp
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"Is in Combat?"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : PillarsOfEternity.exe
  Version: 
  Date   : 2015-04-04
  Author : deama

  This script does blah blah blah
}

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

 
 
aobscan(INJECT3,0F B6 4D B3 3B C1) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
mov [isCombat],cl
movzx ecx,byte ptr [ebp-4D]
cmp eax,ecx
jmp return

INJECT3:
jmp code
nop
return:
registersymbol(INJECT3)

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
INJECT3:

db 0F B6 4D B3 3B C1

unregistersymbol(INJECT3)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: 0463B2C0

0463B2A0: 39 09                 -  cmp [ecx],ecx
0463B2A2: 8B 40 18              -  mov eax,[eax+18]
0463B2A5: 8B C8                 -  mov ecx,eax
0463B2A7: 39 09                 -  cmp [ecx],ecx
0463B2A9: D9 40 14              -  fld dword ptr [eax+14]
0463B2AC: D9 5D 9C              -  fstp dword ptr [ebp-64]
0463B2AF: D9 45 9C              -  fld dword ptr [ebp-64]
0463B2B2: B8 E0 7D 4D 00        -  mov eax,004D7DE0
0463B2B7: D9 18                 -  fstp dword ptr [eax]
0463B2B9: 0F B6 05 CC 7D 4D 00  -  movzx eax,byte ptr [004D7DCC]
// ---------- INJECTING HERE ----------
0463B2C0: 0F B6 4D B3           -  movzx ecx,byte ptr [ebp-4D]
0463B2C4: 3B C1                 -  cmp eax,ecx
// ---------- DONE INJECTING  ----------
0463B2C6: 75 1B                 -  jne 0463B2E3
0463B2C8: 0F B6 45 B2           -  movzx eax,byte ptr [ebp-4E]
0463B2CC: 85 C0                 -  test eax,eax
0463B2CE: 0F 84 DE 00 00 00     -  je 0463B3B2
0463B2D4: 0F B6 05 D4 7D 4D 00  -  movzx eax,byte ptr [004D7DD4]
0463B2DB: 85 C0                 -  test eax,eax
0463B2DD: 0F 84 CF 00 00 00     -  je 0463B3B2
0463B2E3: D9 EE                 -  fldz 
0463B2E5: B8 DC 7D 4D 00        -  mov eax,004D7DDC
0463B2EA: D9 18                 -  fstp dword ptr [eax]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>64</ID>
      <Description>"MODIFIERS"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>0000FF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>62</ID>
          <Description>"THIS IS THE EXP GAIN MULTIPLIER -- CHANGE THIS TO CHANGE MULTIPLIER"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>mine4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"[HERO LEVEL] * [THIS] + 10,000 = EXP TO NEXT LEVEL-- ONLY WORKS AFTER LEVEL 11"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>expMod</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov ecx,[edi+00000108]</Description>
      <Address>2B9AFBF7</Address>
      <ModuleName/>
      <ModuleNameOffset>0</ModuleNameOffset>
      <Before>
        <Byte>C0</Byte>
        <Byte>F4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>8F</Byte>
        <Byte>08</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>3B</Byte>
        <Byte>C1</Byte>
        <Byte>7E</Byte>
        <Byte>E7</Byte>
        <Byte>8B</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
