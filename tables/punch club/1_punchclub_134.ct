<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">b(:mr!Y}xZ%LdyRf38ftlqVnp]T%2-NJ4?M6Ryj49F1K(,k:8H/s*hb3dCehPSVrgch1,--dlvkPm@0W4j)2]/?M*iGN^ks1=={)c=6bi(:xg2mW6#(Yphs]8#{AHAuW)e.T-hskTVc=Qn!xzpO}}v@BL2*Wbn}CZ.w6{]L)gqgNuK5X#_^Q!u2R0OGKIb.Rce_wcLSjHbTjza-D/,Z)G]#BILS1qn^B*;KBBNGU[J2FP2G)V{coVZ(+o2mE@9PxaLCJT/Grkahw:5[6Em!ET8-+!%8wb5pq3Eq=jL_=gv_xfl@dt)7d[=D?BVKcIf$wL]lxaRB5-Xby:[kg*E]mTS$fRz5v)JSc+I4LBtd!WfQlp),G3_B4r{.V!EEI6qH4p/!3E$(rRXGE=v#gKL</UDF1>
  </Forms>
  <Files>
    <MRAA.lua Encoding="Ascii85">r5V_7,emVr4fqS?rB?z/WZa?7KhA.@II+!9Y!VD(V[!5%K#=t)5U+*AWebM/-{_.zeX(VVPIfnkEVAqBx}u%{pMUx)txiuqeYs)*xXr}K6Cx_uBq9f_Do(p7cQuQ*./@;pb/=n7nKS/PyM$-8h)rueVN#VzEc_D0e+5_Q^m0vdN4?#Y=_16@o:+NOC(B+o/n$!3k}k-.woF7.l_:BY?Eew_Xqxfh@n^RXMc]]]3Enay9#{}?6D:/ZLj79AB6.w:ujkDhKb!]=coK*?4KsMF7#?xzA^HQzAeLGFU4DH]7m}0tJw1@h2bXMEt=qbt]v,xDg2$4Cg5tEH8I9:?wEw*P?NWixr!%b!0lN1AFNh,qY;Or1o_F:g30Z-8vS;!7tT],F0C_wKB78o)IOB@+o.2.!(uDf5XVY1rL]8I/FU28IM6ABmQAhiXD_+:=dTzj8/vLvM1oQEYlr-2_g7%Bn440{;FHx_lcOON}BXOC@Q)y;wgRn^,Qub9:rief?skFz3EN3Ksk;*{tmfZAZJ9pAojzPLW!88cdEHqU-1{6F{17:HdL1yalICp(((5t/5GUL2bp^[oyE-bcwrj2zN^A:AMVQroI6_HF*hQV{79za1mCuS-F0I@@IN!o@S[#R*b,bqfBrg8nI4qhTpMyS@lr81)RjW:^lvXazs#v8z{N.O2bXex)??ek#]HDeplLp9$lPESBq]3IjOB;?}e[-JW$Jv@Y;0Bzm[H1_0IyEWV.i}cci^}t)UAoqxFd#/d1fHJ[.ED@qU:1IFm)c5vI;Stp]gtd0IHq4q(U.HXCz+6q(Q0OZBfHwUc7YxqsKe3_XyDu!Mc/M:#4#De;_2?I$H07+m?}jcwP^f7[kg=$U2FBnqUpFLrE}9{y?MEu4C2v;oK)a*Hu;9=/b^=f(MJr[?hA[s(+Ux7P$GW0+wwMcm##2Z;:FECKoF4JjF.7Qm%xp;sY56XHIjPKk)K3So3MIT?jVywot$xU*!_ax-/P1u^r-Hkvy2hkIPhxOp2ZqEsXE7uJ2{=oj)i0=s#IUx]dngp/$iW?3+eN)H;MyqFIc(l1?*l(*2()E[Qx%NVys8-(JCej?SqTZJ-sQWYDI6ZID+7e=UI33U.4nnNPy+iB0:G:y%M$#QR4cL-2u2C=8C#G6Q:lq[9W^p}SSYXJR8jOj9TMOEF]sy0:*i?cH)7Xr9}^^H:uO-btV0_kM0H3G:sp/n9{BJk0{}4-WT9ZFS2[}yiEL;Ob4bY@A/TGH2}BYrsTf(nCUlU0gdq2wV=ZxBMpGUp.9P;a+,l]W6d)bIEKHOmd+!*]U;Mgm2zp:LmV*opaX(Fiu+2J_O{aU{5SEo1Y$/$EX]?1Nq4q(C]H[pesmaaV1$UZ3X=B1ZT3f=^x:;U^SMPVf-yp(]jiK,uWw5CLo?A-x8T*KE+dH[T0PG-93BiD,kKx9i.siebYU4Z.JL@2atl%oU3?eg#JYdO,8Y0*Bsl/ZYJjT1mq!k?_AU#ww(MO@Ws9(W}WANU4^Gr-sneKBeuK3Oh:r^]IcdS(M,YH-HJPAKkZ7H1eZ/{S!Zk_nNi_!D3jHT3{nfYjbm-.}suYhSviC}RDiYh43UC}z3Cc0iVdNz9Z=%jC0I9i3e5HOMZ=B=r(={u=VR+KwFqaQ!-cYnkJY6.K.Lq80O+=K!JtE@NC1dL(bm;K92CLakhHY4gv*0OE*HpjIU//}WK$:;DV1,?5:ULZfZhW/=A::vzX()+6%:i5-L*wIbW[[nIvH#X58r8D}.3EGWBN]B}(1bc$4k*::6KG3A*)OY@XuUN+N!2#YzjS)eq]/yGPupCE6ziZuLbO}O#:^2dOCts9JXCo(OP#N+]Ly:(Hvq-@Vvj7M$Hne,uBPIKE*)bIY.O3qGFRp$ls,2BW+*C=)3fIda2IdtV)4lwBxk3i*2q8D:08vA3MDxdZYcF;M)3d?6]#Mui#^g=^Se*/Y56.%t+M3r?6#lP[TgT4M2M?z:.s,C%$H$KDZ{0B$Sh[?80!]q{cyDv]p),aSCPWFG?d}-VxJ#JVQI)YAS1IBR]wZU3)trNT7Ze9RcPbtq5;*7KOy1h*gmoUy(%+@Ktq[yedFbgV)fMX$lFbHeuz4,AZ5pR39KoKwic1H38-.o{kE.k52TPpIFc@$B0AapCr)Fz{1;H(Xymx*s/dF[wJk]v#PDW=yq0!Q_sPC6K+sEczr1[SD:Zd0AnQlc^X$lv9cZ5a#fq-yRJm[1xgVM*yv3NOH@;x=Fw{wf,MP$/fB9FI7Bi{l8j?!^yla5pqZvcQbx_3R)aqudS5D%@vjP71Uw_mhYI;ljg);1!:pr02vD57aFu=j:B-PoPw^M(iFfRD!oE-ib$f}xf9Fb!GKn+gSvg=Cs1eqaX#TEwAP8+pn32x,*yLgTprK5$*Z=^TG8@93%H!;_NlP]7]UC=mcBBzV[7dwb71U9UJEq2z$uZpy+yUDTc2%=*0hg*}}lld}jFke:*H/J:K,Y@!7?KX-;-bLvsJ:g871j[.1_WT/KGo@cUFpZ8,{Pk,mDCU-f+B?6nb-LZ6g@ZD0kaS:p+[)pBr(8_-kW+a(Iq;1aQuFbcHn,DQP*4EeNx%z0@E6H77-;[x7c7I8r#4tXnsg=Raf)5{q;vq3o$MHjbf9uV{4Q(!rNgD7Il}iz#24zn?BqP7LfTmYAKVHAf*XOaS%Yj{O]CBwQs7tb(FN9idAP_%bDt{%r,:{8h;_ZDIuam][2=jqD6g-OLITp4nI:u;pyRCvpy+UD+!Gobw+WCy-Y#@l=N3mDI@*qyD(?Vy5q[#%B;P;=F@w*PlHMWYu2C7$@/f*W(2Bi.l^6/$L5G1dvnqW_N7^)919h2Lktf,HVuo9fh3py}l(FcTbEmWCi,bnHS0_Tl}$hBo1CmY$e)W{5EYSuNcIIZIfC7ObR9CE@jE-8mu0)SwBX/#x3A:p#GWOw(B(pM?Q(%A/rbl^djcPQU-wH[V.lf=c5</MRAA.lua>
    <monojunk160117.lua Encoding="Ascii85">y/7cm,eQ-azb=;s+i(kdj48p(wK/$)#(vAB4K8VlBnK3+6?#KyHZKw;kW[597r+np!Oh2hl9Zda+RunQTF%bQ(d(UHX2_@K?n?fX?p--wM?JXSP5N3ko2p2XB43K.N*{(yF2u6T)xrHLDiZO[M.useimb]YLfqUOy=XX0ON,3,UBziRi]P{z$gGLPa41(kdntgYP)*%:Z[=RPibYw0I8kR,zHX4AmQjHS(C%t=G?xX4:V_85lnu/S(i1Ezyc)Uzx}a/BFfv25I1$X^A{=eZj7FgLXcWY71@3]83Yb/FbG*DrZ@f0oJUTjF(BJUpj}Do-02OOkF#H%b!IsD0pC11sNt$XSNnNq7?{da=B,iRV0U{^]q$SZbX63DJQ-H,0Ze)=_Y09IzmMgGebzH7iX,c[.*unK:YC;QlQim34U{Yg]8AS15Q[v:WZP(6_-m)ZWV13l]m$m%j@Brs6?[k(%db30$uVG+rx+{p/gqjHpD(GsxQt.HfWRU]2wY)ix]hH^C*wfK;+53IIHrn}08fnKk$(T;0u)?5!5d9*bl0bV,z;E4dEy/sJkGRJ,m1H,:dy=@4-Z_sB-@-h?h{;v^O{(yg5R5Ccs{L_=:?E^lO(sk06vTy%KG.szH)@B0pDbk(MhD{@tf3lBf[;0Ui!jSFaj5R{M[fz$x8*C.*l61l9nT]*,I4i71gy9+H1S8IFj8l+Mk1f#(J?HfAn%,VB!7L)S5L=MDFC3xk9neE*_7;;z(1@5xejZ(T+Plqe}jf#Q;C8KtGJHyIE]n7rZM}+!_!nHuL/V5YPwcO?XV8Oj565nC]rsqK*;/cgKC:4oq971@Elswd(6/$S_4PPS_Uk:8/9fz0v:S%G?mBFD8HE9HZsH!QaSqQaP/YyB6#tzj9FPOWm?;VvnkeT[CBnl9=z(epAZ5Un0S]a].FU$cR@:;ai)VDk]+98/}SwJ*h1kD/q+};A0zY9$W@8jj[p!d.RM1Uy9$GMyY/6xG;qWm%fKLRjk9WZR%+Nx%m7Nv#GV*%fWAjBvs9(ta8/DmPbP)ZvuLp0nwH$_vN5nDP;sa)y/VLz/ae=.n$N2,g,Hwrq?k9;YR-7Ci.+/rQvw$zAT3z{LItIK8T4cTfM$r@Bu(HFvP_dkKyd{_HjEyj]@JIYN[$w5cA67N8*zF0T5-{R)9E-BUEFld.0W=e.nE7;$T2vi$Kvth$fb6oX]7)FT^0rP]F=:(MayB=]Vx.4.0qecsw%5j#f!3hzgd5q:F3e5M/Tjl6dM?#HCJo9WCxRV=fO[RKN*%6ktF,]+:P+h$Umw.Kbt;lp-OMFo[1g$+=p05]XOCXSWpUV*mH4c1P)I,+]#T2452gPp-tlmaArNc8eX=q4w*$oPVqxHdI@*{egjuc$zH{;/3}_?BRP:^(WpYzS(PL=]Md}x0Fh09${DeQ%T)uCb)O]y56-Q4l@6IiuXTQp[uyO0XfPVZ=tq.Dc7VHhj?eCB]CYz?Mer:03+{IO4}!)nnWn?7vkp,PngCV2FH8@B4M@IoxR!zYm)7)ZVMdj%+5wim:Yta)=Id3.SjbZphuaI,L%aqa?G+q1j;GCXPxo+Bw%^KIsI-DWd0s#M;RH{_Q420uU63;W%0w/?@Bsb)J4biR6@imY#--FiydQJvr%zD0cc3]gQ/RAD^Gy9#0y)PLc/;(_K,Eer,*:02637fh.NLyOfaeAH:!Tr/P5!eqb6QH8^Eyse8-R9n@86YmD%V!Z]HFqY/cqn=?;RNw-RNp?vW8XWY[Pf+Wo412O-O=:gq%K)R7BDEeb58d!E322iPN7THLWuzG^7POx;h__me,u{Xd.ApANYaB?Hg)7UaV7a/vQVXHfH!^5{hA?/=cLBt1e,{W-^c7=UWEG,)REY!3bxuZ3q]0BasLP(bN7NFS?]}l@q#_kiLHHVMrH8;vB[Nl7bN6150yJuVJSbxtxz$Xu:^L9z1_JdI45]Aq%oGqQ)XiF;s/3OKG5+l?]*jV=LlT(dph:mNMRt91+}aidX=KpU.JILSrCagzFtveT]SMO)XJx:1+MbRfre$nwUBPwhiEdd,eCMNBP)TZd4xfBJcom4B+,x24RW,,Q9zFRo*n+siGGmOjvYjcX(;S:ndId.R9=q1SG]RXw-ApiQ}YyhFUqOp:xea@4;GA8:t17/[2er4A#7YV.c)DcDQUUZG+$ZLwCz,TpW)M8Jh{9t}$8n2zJj#!]/m+cfRN4zNwQJX%Un-P[^hVqjHZ95]DXF1;x[59W+Z1Ih1}Sk)@!03_uX{u2r#(M;@P0ts^m=Z1+s5vcNkpHsG[8BCo0cC}wvn#As@-ullxV)i:e%92=Y])]B)J#F]_YCHha,S]m$?bli=r,hox:3hOpGfjMrXr=M}HnDy5%vXaa6[INdqvue4B)]7?Py,ZeF[xfV]5R2V!!m{suriYPN^-S,hV,8x2mV9WNv]T]7GCjgb_8(2-Y.yLC?6G}/80y6]]Lwr+#]h3heQMV)4o{PMuEWg0B#.Qzi4zV;2r7,]9[G8IcN8*wl*Kev:I){e%,%d(tHdBYOYr9mOIX-27?5,+G#/Dh(]PU)2T]i^hb.{EDW8}dq;:0?tzv[?PkhA!rA?%vOfJ#s$)tyL0UeZfTYOPv]-z$v984es]z46f+U3{)]q2q)+3rq/*!Ao#P(H(N%iVB-F1tGmqX?W#df#]*MhuX,cf!aju#0n0SKZ9,BuH:yX0,wD(%l}M*uAI1)9=DpTK$FI2C:qQi?Dq5=]tM#UspW0brF/W+}%@NJr8j{gdgABikaji[(O}hU(-fE$i,ftO?D^L/ECQk1s#ClMWmV2[yo/P(plKeBMs_Q1pFT8bU1hTssMFR^![UBO1}MP/%mkjAIj#[@J+M*k-eQ]JN:TI@*k/z7)1#pwGHs]nJTp6E+y]hdx+ZV0%FsIyuZt!sz?C=pdRE+@XEk*FI5jFN.;GH46HL;ZC.p,4=*s7mM%e0F$Vf=W%gV#0h-QK7+m0FwtI8/aLRuVgV:/o=Wvl!39Q,qm?}Hp#:Q{H@uU+cM[*hI+H1fD2JHaWcyuvMfXH!T-X]p7sVk=S;-(3}(v4v[er[w57^b:/[nIHP.VQ,#!-yuvL4R6K^vzk)dVZP4]Z%;3$Yx#h:@bdP4)N3L3/t=6[HxKy=h.Ma=l7/?p]IQ%762}q=?fF3RQK;TVFns,Kow0xuF}noaei{8*Y@93=:Ob8XQise+OM](7gLVYhi.s?(kIbevR!KG.P=i07X*6lv,[=0?uV-q?Uf[e(j{y!Zzv%=#@h49%i0f(Tom}Ys/*i/(u)_xR[DR6*9a*(psnDa*$.@Ld/)wwBbAMR]1ok4%l#r+XX#q1r-*4woHs#SB$$DH1pgh1G_S_g]b=roR{fHY0.YDgO2HKFo{Y)jO_d)l=#;?Ze^qpFi=j,f]7E1}lKeCfIROQtng.N9PtJ=.YP#pJxQ@Ogv{+=l4N7rm%%T*m,(nd)M!mgx(-UicjKEkvh}0gNe5wn(YwGjXT}06VB^9H7ROVZYN]AnWf(*yg]*-Sd:-dIK@(D$e7UhX-Qb3-TTWN2*O9tpo18y+9cW#{z/1{C9a/.j:$kO5(!gd%DJ,fctYiZ9/9Jx4ZP?/gwSd_%_Ly{y_:G9sjX5^(aX,,x;J2W%;A]bg;do,y9ixhOasN4MXrtdwAo+jQ[tP.f5LQyLyv2+ZJHdo}w[u/+=oBXm!8,?9C0aCBiOvc$Vt!w-muZWT@YfTta0q%8ikPMGP!{_}OMauz:vjy-=*y$(R:%U?p%GEkw$[wTk.zv*CyVGNbKcwr9d7FlNRhqylLgInW9=jhW(otkY!8?p7%}uAJ!IMD?zf8)?CZ*j8v_=PrF%I-.(9h8Zgu[[,;vIMGhsI0@,/xf1/8Ey@uM.+h(bg4lg-us0(Ymze1H{;YlC%eE@kBSIo/TuHN.tUVI0J72p1[I%FmXgfUeKv51(paJ#pD,duXd+$7JM1GQA@v*n)9{LXb4-xR,Z6c?NakD.QK@.sKrDL]azBO1cMr*RO*0mU5(RO#CmyKVMAhtcp$OU@7u5p+wpf+T%}yt??t0-o.xZ{!ja!x(FxTcxDOyT/35.d]/-UxI9}alP_S1yUZk+*D,0N,Nsr6r5:!v0GWy$II!.3Y:F.R#%1qYz.sIcPfKLGOhKR*,n2StvA2^a3g+t$qbehF{.HW2+kWSrfHSr;@O!Do{Cu7!BHSs#rAm.jJ4ST1tn,/l*#;2l*zZ@u{dG?U=nnA72vRK{7pBNwvvZr{_2@LaMe{R)]q*h7YgB:4,fQRawc[vha_A]Jw#1eMNI]m.gp0p4_o,$9;=xIlJh;!?U#VtSwvh.V*yaZxZZ9$@DhyyWh4Lt:7S{BBUMKr)bWNn,@Y#pZ7ZmngMn,BhttH*Wi2:Gl^5RQicD!;CUCL)_[iM[j=UL4=j.-Z$#?usR_)I@a%Cuh#wDNlAv%$:Sj!yrfyyLdubhL?i}68GKd,n29=c:hJ);wg{/4e6nyY-Cl);fr,,Dmoe,*Sb]+;*Sa:G8p)HHXc-{XC7*8zT2t?w]_U0I?#?UZw@zY$]buLC[Zv:7Qsg_pBC-Hb2y{iA-Q97mDhaO?.(6ASUx.x#CPr)brStlV;sj!Y49z+pen_LsC9!Ffs3d[z]JK9.d^JJy3pakQWYEeqH..w?*-[kb=]40zVRl8H3D.rZqcv)qd{y+%A{RDHYPx;$Bbi/ndeE4TWlfE[F%#TI{,)lzi(e*1Dkw=8Ks^7izU]7TeV}+@#p6_PuH^ERC68RNtbckUz^%e_IHt=NMeJ3[_Opp[l=m3MU#/cuC}%znbxcNX]N]Mq.[k1Ec@x1KC3j=-Dx+JczY#P,U;3!Gd/T^?Ewwd(2mm?$V[q?Z[wAK%jL40PJc[ICYxr{6e.@5pj-Grk8IQSUj0-fm3g=TS;=+b0#1oK.n$paET^5O/;o?EV0sjwCy!uW%G2+!-DSn{tW7sf;/H=3-y=}-tQt9_lTay#8f9:c0vJFN6*GW-QH*/Mg0uo[GiN(ZfPHgali[]rC}^?/f80n0^63a.1F-0MF:,2:^/AtZz%CCQhThX(Lz+{gXXEK]_A]J:C6hlu*CbaYg5xvPz;))l0^mH_psN4P20Aj0vE1GFl*^(nEOe=j.xK(mrmC(%*moWpA[lfW/MQ4cPrHwO].CLNLzdM:NP_,C7enSM2T[,BW}BOl2PxZz;*P2]Q?sS-Z+jO*8?l1JzACR?Ldla{.;$fq6X_*Xby]z],;;ZQT80=GPR9,Mc1jh$JRNytsyR*o?7?#ov51oQUj</monojunk160117.lua>
  </Files>
  <CheatEntries>
    <CheatEntry>
      <ID>235</ID>
      <Description>"**OPEN UIForm**"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck == true then return end
if UIForm==nil then
--

local setting = getSettings("PunchClub")

local Apack,Unpack = table.pack or pack,table.unpack or unpack
local TYPE,PAIRS = type,pairs
local _UID,_Later = {},{}

local function getUID(n)
  n = TYPE(n)=='string' and n or '__'
  _UID[n] = TYPE(_UID[n])=='number' and 1+_UID[n] or 0
  return _UID[n]
end

local function toLogSave(txt)
  txt = tostring(txt)
  local mr = getMRByPath("logSAVE",{Type=vtAutoAssembler})
  mr.Script="{$lua}\n--[=====[\n"..txt.."\n--]=====]\n{$asm}\n[ENABLE]\n[DISABLE]"
end
local function fromLogSave()
  local mr = getMRByPath("logSAVE")
  local txt = mr.Script:match("=====%[(.-)%]=====")
  return txt
end

local function monoStrAddr(s)
  local len = s:len()
  local t = dwordToByteTable(len)
  local s = wideStringToByteTable(s)
  for i=1,#s do t[1+#t]=s[i] end
  local s={}
  for i=1,8 do s[1+#s]='??' end
  for i=1,#t do s[1+#s]=string.format('%02X',t[i])end
  s = table.concat(s," ")
--  return s
  ---[[
  local s = AOBScan(s)
  if s~=nil then
    for i=0,s.Count do
      print("&gt;&gt;",s[i])
      local b = readBytes(s[i],#t,true)
      if byteTableToDword(b)&gt;0 then
        local b = s[i]
        s.Destroy()
        return b
      end
    end
    s.Destroy()
  end
  --]]
end


local function ceupd(o,p,...)-- handy function to update ce userdata/guiclass
  if type(p)~='table' then return o end
  for k,v in pairs(p) do
    if type(v)=='table' then
      if k:lower()=='whxy' then -- size/pos shorthand
        if v[1]~=nil or v[2]~=nil then o.AutoSize=false end
        if v[1]~=nil then o.Width=v[1] end
        if v[2]~=nil then o.Height=v[2] end
        if v[3]~=nil then o.Left=v[3] end
        if v[4]~=nil then o.Top=v[4] end
      elseif k:lower()=='xywh' then -- pos/size shorthand
        if v[3]~=nil or v[4]~=nil then o.AutoSize=false end
        if v[1]~=nil then o.Left=v[1] end
        if v[2]~=nil then o.Top=v[2] end
        if v[3]~=nil then o.Width=v[3] end
        if v[4]~=nil then o.Height=v[4] end
      else
        local peek = o[k]
        o[k]=ceupd(peek,v)
      end
    else
      o[k]=v
    end
  end
  if select('#',...)==0 then return o end
  return ceupd(o,...)
end


local function callLater(n,f,...)
  local uid,p = getUID('later')
  if TYPE(n)~='number' then n,f,p = 1,n,Apack(f,...) else p = Apack(...) end
  _Later[uid],n=true,n&lt;1 and 1 or n
  local t = ceupd(createTimer(),{Interval=n,OnTimer=function(tm)
    tm.Destroy()
    if nil~=_Later[uid]then _Later[uid]=nil f(Unpack(p,1,p.n))end
  end})
  return function()_Later[uid]=nil end
end

local function hx(n)if type(n)=='number' then return string.format("%02X",n) else return "OOPS!"end end


local function ToNumber(s,d)
  if type(s)=='number' then return s end
  d = type(d)=='number' and d&gt;1 and d&lt;=36 and d or 10
  return tonumber(type(s)=='string' and s or '',d)
end
--print(ToNumber("100"))
--[[
dd85
02f6
9b86
a121
41e3
9a98
03ff
b166
--]]
local function md5str2int(s)
  c = 0
  for i=1,4 do
    c = bAnd(c*7 + 13*ToNumber(s:sub(i*4-3,i*4),16),0xffffffff)
  end
  return c
end

local function numSetting(k,v,d)
  d,v = ToNumber(d), ToNumber(v)
  d = d or ToNumber(setting.Value[k..'_def']) or v or -1  -- make sure default is number, -1 to signal default not in setting
  --print('['..k..']d = '..tostring(d)..' v='..tostring(v))
  if d~=nil and d~=ToNumber(setting.Value[k..'_def']) then
    --print('set default '..k..' &lt;- '..tostring(d))
    setting.Value[k..'_def'] = tostring(d)
  end
  local n = ToNumber(setting.Value[k]) or d
  if type(v)=='number' then
    n = v
    setting.Value[k] = tostring(v)
  end
  return n
end
local function strSetting(k,v,d)
  if d~=nil and tostring(d)~=setting.Value[k..'_def'] then
    setting.Value[k..'_def'] = tostring(d)
  end
  local n = setting.Value[k] or d
  if type(v)=='string' then
    n = v
    setting.Value[k] = v
  end
  return n
end

strSetting('RESOURCE',nil,'')

local RESOURCE = {}
strSetting('RESOURCE'):gsub("~",";"):gsub("[^;]+",function(w)RESOURCE[w]=true end)

local updResource,uimessage

numSetting('prevMd5',-1)
numSetting('FormWidth',nil,480)
numSetting('FormHeight',nil,280)

local function getRoot(o)
  if type(o)=='userdata' then
    local parent,p = o,o.Parent or o.Owner
    while p~=nil do
      parent,p = p,p.Parent or p.Owner
    end
    return parent
  end
end


local function GUI(namecls,props,childs,parent,rootForm)
  local c = type(namecls)
  if c=='table' then return GUI(unpack(namecls)) -- input is a table, unpack it
  elseif c=='string' then -- create new ui class by name-class specification
    local name,cls = namecls:match('^([^|/: ]+)[|/: ](.-)$')
    if cls==nil or cls:len()==0 then cls,name = name or namecls,nil end
    c = _G['create'..assert(cls)]
    assert(type(c)=='function',"check function(?) create "..tostring(cls).."&lt;-"..tostring(namecls))
    c = cls == 'Form' and c(false) or assert(parent) and c(parent)
    if c and cls == 'Form' then rootForm = c end
    if name~=nil then c.Name = name end
  elseif c=='userdata' then -- asssum it is existed ui class , else error...
    c = namecls
  end
  if type(props)=='table' then c=ceupd(c,props) end
  if type(childs)=='table' then
    for _,d in ipairs(childs) do
      local dt = type(d[1])
      if dt=='string' or dt=='userdata' then
        GUI(d[1],d[2] or {},d[3] or {},c,rootForm)
      end
    end
  end
  return c
end


local f = GUI('CELuaFrm/Form',{
          Caption='CELua Console',
          whxy={numSetting("FormWidth"),numSetting("FormHeight")},
          Constraints={MinHeight=280,MinWidth=400},
          Position='poOwnerFormCenter',
          ShowInTaskBar='stAlways',
          BorderStyle='bsSizeable',
          ChildSizing={ControlsPerLine=1},
          OnClose=function(s)
            s.Hide()
            return caHide
          end,
          OnResize=function(s)
            numSetting('FormWidth',s.Width)
            numSetting('FormHeight',s.Height)
          end,
        },{--[====[
          {'pm/Panel',{Align=alLeft,Caption='',Color=0xff00},{
            {'wwrap/CheckBox',{Caption="Word Ward",whxy={100,20,nil,0},Align=alRight,Enabled=true,Checked=false,AllowGrayed=faalse,OnChange=function(b)
                end}},
            {'clearLast/Button',{Caption="Till Last 5 Print",Enabled=false,whxy={100,20,0,20},OnClick=function(b)
                end}},
            {'clearAll/Button',{Caption="Cearl All",whxy={100,20,0,0},OnClick=function(b)
                end}},
            {'cbLLimit/CheckBox',{Caption="Keep Max Lines",Checked=false,whxy={100,20,110,00},OnChange=function(b)
                end}},
            {'txLLimit/Edit',{Text=tostring(numSetting("LLimit")),whxy={50},whxy={50,20,210,00},OnChange=function(b)
                end}},
          }},--]====]
          {'pt/Panel',{Align=alClient,Caption = ''},{
--            {'px/Panel',{Align=alClient,Caption = ''},{
              {'lx/ListView',ScrollBars=ssVertical,{IconOptions={AutoArrange=true,WrapText=false},SortType=stText,ViewStyle=vsList,ReadOnly=true,Align=alClient,OnClick=function(lb)
                local idx = lb.ItemIndex
                if idx&gt;=0 then
                  local rootform = getRoot(lb)
                  local res = rootform.pb.resstr
                  res.Text = lb.Items[idx].Caption
                end
              end}},
              {'ls/ListBox',{Align=alRight,Caption = '',whxy={100,nil,nil,0},OnClick=function(lb)
                local idx = lb.ItemIndex
                if idx&gt;=0 then
                  local rootform = getRoot(lb)
                  local res = rootform.pb.resstr
                  res.Text = lb.Items[idx]
                end
              end}}
--            }}
          }},
          {'pb/Panel',{Align=alBottom,Caption='',Color=0x80,whxy={nil,80}},{
            {'stop/Button',{Caption="Exec",whxy={80,20,0,0},OnClick=function(btn)
                  local char = readInteger("_res+0c") or 0
--                  print(hx(char))
                  if char&gt;0 then
                    local rootform=getRoot(btn)
                    local res = rootform.pb.resstr.Text
                    if RESOURCE[res]==nil then return uimessage("Not valid resource string") end
                    local amt = math.floor(tonumber(rootform.pb.amount.Text) or 0)
                    if amt==0 then return uimessage("Not valid amount")end
--                    local addr = monoStrAddr(res)
--                    print("&gt;&gt;"..tostring(addr))
--                    if char~=nil then
--                      writeInteger("_res+7b0",getAddress(addr))
                      writeString("_res+70c",res,true)
--                      writeString(string.format("_res+%X",0x700+0xc),res,true)
                      writeInteger("_res+708",res:len())
                      writeFloat("_res+7a0",amt)
                      writeBytes("_res+7e0",1)
--                    end
                  end
            --[=====[
--                  local meth = findMethodBySignature("","CharacterBase","AddCharRes","string") or 0
                  local meth = findMethodBySignature("","GameRes","Get","string") or 0
                  local pchar = readInteger("_res+0c") or 0
                  print(hx(meth),hx(pchar))
                  if meth&gt;0 and pchar&gt;0 then
                    local args = {{type=vtString,value="_money"},{type=vtDword,value=1000}}
                    print("invoke:"..tostring(mono_invoke_method(nil,meth,pchar,args)))
                  end
--]=====]
                end}},
            {'start/Button',{Caption="Update",whxy={80,20,0,20},OnClick=function(btn)
                  updResource(true)
                end}},
            {'abort/Button',{Caption="????",whxy={80,20,0,40},Enabled=false,OnClick=function(b)
                end}},
            {'resstr/Edit',{ReadOnly=true,Text='--resource string--',whxy={200,20,100,00}}},
            {'amount/Edit',{Text='--enter amount--',whxy={50},whxy={200,20,100,20}}},
            {'msg/Label',{Caption='...',whxy={50},whxy={200,20,100,40},Color=0xeeeeee}}
          }}

        })
-- Constraints={MinWidth=80,MaxWidth=80},

f.pt.lx.OnSelectItem=f.pt.lx.OnClick
uimessage=function(s)
  f.pb.msg.Caption = tostring(s)
end

local function getKeys(t)
  local ks = {}
  for k in pairs(t) do ks[1+#ks]=k end
  table.sort(ks,function(a,b)
    local order = function(s)local h = s:sub(1,1) return h=='_' and 1 or h:match("%w") and 2 or h=='#' and 3 or 4 end
    local oa,ob = order(a),order(b)
    if oa==ob then return a&lt;b else return oa&lt;ob end
  end)
  return ks
end

updResource=function(force)
  local addr = readInteger("_res+0c")
  local sl = f.pt.ls.Items
  local lv = f.pt.lx.Items
  if force==true then
    lv.clear()
    local ks = getKeys(RESOURCE)
    for i,k in ipairs(ks) do
      if k:len()&gt;1 then
        ceupd(lv.add(),{Caption=k,SubItems={Text=k}})
      end
    end
  end
  if addr ~= nil then
    local thismd5 = md5str2int(md5memory("_res+200",0x400))
    if thismd5~=numSetting("prevMd5") then
--                      print(thismd5,numSetting("prevMd5"))
      numSetting("prevMd5",thismd5)
      sl.clear()
--                      lv.clear()
      local b = readBytes("_res+210",readInteger("_res+200"),true)
      for i=1,#b do b[i]=b[i]==0 and ";" or string.char(b[i])end
--                    local names={}
      local updateLv = false
      table.concat(b):gsub("[^;]+",function(w)
        sl.add(w)
        if RESOURCE[w]==nil then updateLv = true end
        RESOURCE[w] = true
      end)

      if updateLv==true then
        lv.clear()
        local ks = getKeys(RESOURCE)
        for i,k in ipairs(ks) do
          if k:len()&gt;1 then
            ceupd(lv.add(),{Caption=k,SubItems={Text=k}})
          end
        end
        local resourceText = table.concat(ks,';')
        strSetting("RESOURCE",resourceText)
        toLogSave(resourceText)
      end
    end
  end
end

local updTimer = ceupd(createTimer(),{Interval=5000,OnTimer=function(tm)
  if f and f.ClassName and f.ClassName:match("(%w+)"):len()&lt;6 then
    tm.Destroy()
  else
    updResource()
  end
end})

f.Show()
UIForm = f
end


[ENABLE]
UIForm.Show()


 
 
[DISABLE]
UIForm.Show()

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"PunchClub (click 1st: load Scripts)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
if syntaxcheck==true then return '' end
--

-- common function
local Apack,Unpack = table.pack or pack,table.unpack or unpack
if loadTableFile == nil then
  local loaded = {}
  function getLoadedChunks(p)
    p = type(p)=='string' and {p} or p
    local r,c = {},0
    for i=1,#p do
      local v = loaded[p[i]]
      if v~=nil then
        r[p[i]]=v
        c = c + 1
      end
    end
    return c, r
  end
  function loadChunks(t)
    for i,m in ipairs(t) do
      loadTableFile(t[i],true)
    end
  end
  function loadTableFile(n,mode)
    local hdr = 'loadTableFile: '
    assert(type(n)=='string',hdr.."input should be a string -"..tostring(n).." of "..type(n))
    local m = assert(findTableFile(n),hdr.."can't find table file -"..n).Stream
    m = assert(readStringLocal(m.Memory,m.Size),hdr.."can't read content -"..n)
    if type(mode)~='boolean' then return m end
    m = assert(loadstring(m,n),hdr.."lua script load fail -"..n)
    if type(m)=='function' then loaded[n]=m end
    return mode and m() or m or nil
  end
end

local target= {"monojunk160117.lua","MRAA.lua"}

local skip_Print = AA_CHECK~=true and ( true )
-- suppress informative or warning message, not error throw

if getLoadedChunks(target)==0 then
  local original_print = _G['print']

  if skip_Print then _G['print'] = function()end end
  loadChunks(target)
  _G['print'] = original_print
end


{$asm}

[ENABLE]

useDomain()

[DISABLE]

monoDetach()

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>225</ID>
          <Description>"Start Setup &amp; Tools (click 2nd: Global Storage)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
--[===[
--


local function hx(n)if type(n)=='number' then return string.format("%02X",n) else return "OOPS!" end end

local function assm2img(n)
  local domain=mono_enumDomains()
  if #domain&lt;1 then return nil end
  domain=domain[#domain]
  local assm = mono_enumAssemblies()
  for i=1,#assm do
    local im = mono_getImageFromAssembly(assm[i])
    local nm = mono_image_get_name(im)
    print(nm)
    if nm == n then return im end
  end
end
local function findMethod(desc,assm)
  assm = assm or 'Assembly-CSharp'
  local im = assm2img(assm)
  if im~=nil then
    return mono_class_findMethodByDesc(im,desc)
  end
end

local ResAdd = findMethod("GameRes:Add(string,single)")
--local ResAdd = findMethod('Component:GetComponent(string)','UnityEngine')

print(hx(ResAdd))

--]===]
{$asm}


[ENABLE]
globalalloc(__,$4000)
__:
dq __

__+08:
{$lua}
if getOpenedProcessID()==0 then
  return "db 0"
elseif targetIs64Bit() then
  return "db 64"
else
  return "db 32"
end
{$asm}

__+2c:
dd 1


globalalloc(myStrCmp,$200)

myStrCmp:
push  ebp
mov   ebp,esp
push  edx
push  edi
push  esi

mov   esi,[ebp+08]
mov   edi,[ebp+0c]
mov   eax,[ebp+10]
cmp   eax,1
je    short @f
mov   eax,2
@@:
mov   dl,[esi]
cmp   dl,[edi]
jne   short @f
add   esi,eax
inc   edi
test  dl,dl
jne   short @b
xor   eax,eax
inc   eax
cmp   eax,eax
@@:
je    short @f
xor   eax,eax
@@:
pop   esi
pop   edi
pop   edx
mov   esp,ebp
pop   ebp
retn  0c


globalalloc(myStrIndexOf,$200)

myStrIndexOf:
push  ebp
mov   ebp,esp
push  ecx
push  edx
push  edi
push  esi

xor   ecx,ecx

mov   edi,[ebp+0c]
mov   eax,[ebp+10]
cmp   eax,1
je    short @f
mov   eax,2

label(next)
label(nextWord)
label(noMore)
label(done)
next:
mov   esi,[ebp+08] // reset source ptr
mov   dh,[edi]     // peek test target 1st char
test  dh,dh
je    noMore
@@:
mov   dh,[edi]
inc   edi

mov   dl,[esi]
add   esi,eax

cmp   dl,dh
jne   nextWord
test  dl,dl // end of sourece?
jne   @b
test  dh,dh // end of target?
jne   nextWord

//exact found
mov   eax,ecx
jmp   done

nextWord:
mov   dh,[edi]
inc   edi
test  dh,dh
jne   nextWord
inc   ecx     // word counter
jmp   next

noMore: // ie. not found
xor   eax,eax
dec   eax
done:
pop   esi
pop   edi
pop   edx
pop   ecx
mov   esp,ebp
pop   ebp
retn  0c
[DISABLE]



</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"logResourceString"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
{$asm}
Eval(char,"CharacterPlayer:StopCurrentActivity")
Eval(res,$findMethodAddrBySignature("","GameRes","Get","string"))
Eval(radd,$findMethodAddrBySignature("","CharacterBase","AddCharRes","string"))


[ENABLE]

assert(res,55)
globalalloc(_res,$1000)

_res:
dd _res,res,char // +08 -&gt; aob1 ; +10 -&gt; a0b2

_res+10:
readmem(res,16)

_res+200:
dd 0
_res+204:
dd 0
_res+210:
db 0,0

_res+0c:
dd 0

_res+7f0:
readmem(char,16)

label(adddone)

_res+800:
push  ebp
mov   ebp,esp
pushad
mov   esi,[ebp+08]
mov   [_res+0c],esi
mov   eax,[_res+7e0]
test  eax,eax
je    adddone

  mov   ebx,[_res+7a0]// amount in float
 // mov   edx,_res+7c0  // res string in ascii
  mov   edi,_res+700  // res string in unicode

  mov   eax,[_res+708]
  test  eax,eax
  je    adddone

  xor   eax,eax
  mov   [_res+7e0],eax
{
  xor   ecx,ecx
@@:
  xor   eax,eax
  mov   al,[edx+ecx]
  mov   [edi+ecx*2+0c],ax
  inc   ecx
  test  ax,ax
  jne   @b
  dec   ecx
  mov   [edi+08],ecx
}
  sub   esp,4
  push  ebx
  push  edi
  push  esi
  call  radd
  add   esp,10


adddone:
popad
pop   ebp
ReassembleEx(char,_cLen)
jmp char+_cLen

char:
jmp _res+800


label(done)

_res+40:
push  ebp
mov   ebp,esp
pushad

mov   esi,[ebp+0c] // string base, actual +0c
mov   edx,[esi]
mov   [_res+700],edx
mov   edx,[esi+08]
mov   [_res+20],edx
cmp   edx,18
jg    done
xor   ecx,ecx
@@:
mov   al,[esi+ecx*2+0c]
mov   [ecx+_res+24],al
inc   ecx
cmp   ecx,edx
jl    @b
xor   al,al
mov   [ecx+_res+24],al

push  1
push  _res+210
push  _res+24
call  myStrIndexOf
test  eax,eax
jge   done

// new log
mov   edx,[_res+20]
xor   ecx,ecx
mov   edi,_res+210
add   edi,[_res+200]
@@:
mov   al,[esi+ecx*2+0c]
mov   [edi+ecx],al
inc   ecx
cmp   ecx,edx
jl    @b
xor   al,al
mov   [edi+ecx],al
mov   [edi+ecx+1],al

// update count etc.
mov   eax,[_res+200]
add   eax,[_res+20]
inc   eax
mov   [_res+200],eax
inc   dword ptr [_res+204]

done:
popad
pop   ebp
ReassembleEx(res,_Len)
jmp   res+_Len

res:
jmp  _res+40
{
MR(Punch/32/resource/LastRes,Type=vtString,String.Unicode=true,Address=[_res+0c]+0c)
//MR(Punch/32/log/ability/mulfactor,Type=vtDword,Address=_abt+24)


_res+100:
db '_money',0,'_sp',0,'_str',0,'_agl',0
db '_stm',0,'_dream',0,'_fame',0,'_hp',0
db '_energy',0,'_mood',0,'_hunger',0,'focus_points',0
db '_time',0,'focus_moves',0,'fight_hp',0,'fight_energy',0,0

_res+380:
dd 1,2,3,4
dd 5,6,7,8
dd 9,#10,#11,#12
dd #13,#14,#9997,#9998,#9999
}
[DISABLE]
[_res+04]:
readmem(_res+10,16)
[_res+08]:
readmem(_res+7f0,16)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>231</ID>
              <Description>"char pointer base"</Description>
              <LastState RealAddress="08C0440C"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>_res+0c</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>202</ID>
          <Description>"&gt;log Fight Char"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//define(fcalc,"Fight:FightCalculation:CalculateTick")
//           "Fight:FightCalculation:CalculateTick"
//ProcessStaminaRecharge
//"Fight:FightCalculation:CalculateTick"

Eval(fqctor,"Fight:FightCalculation:.ctor")
//getmonostruct(fq,Fight:FightCalculation)
define(fqc,8)//not work ... fq.&lt;&gt;f__switch$map3)

[ENABLE]
assert(fqctor,55)

globalalloc(_fqc,$400)

_fqc:
dd _fqc,fqctor,fqc // +08 -&gt; aob1 ; +10 -&gt; a0b2

_fqc+10:
readmem(fqctor,16)

_fqc+20: // fightchar ptr
dq 0

_fqc+40:
pop   dword ptr [_fqc+0c]
push  @f
ReassembleEx(fqctor,_Len)
jmp fqctor+_Len
@@:
push  dword ptr [_fqc+0c]

push  ebp
mov   ebp,esp
push  eax

mov   eax,[ebp+08]
mov   eax,[eax+fqc]
mov   eax,[eax+10]
mov   [_fqc+20],eax

pop   eax
pop   ebp
ret

fqctor:
jmp  _fqc+40


MR(Punch/log Fight/pointer,Type=vtString,Address=_fqc+20,String.Size=0)


[DISABLE]
[_fqc+04]:
readmem(_fqc+10,16)

_fqc+20:
dq 0

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>201</ID>
              <Description>"EnergySpend"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//define(fcalc,"Fight:FightCalculation:CalculateTick")
//           "Fight:FightCalculation:CalculateTick"
//ProcessStaminaRecharge
//"Fight:FightCalculation:CalculateTick"

Eval(eng,"Fight:FightCharacter:SpendEnergy")

[ENABLE]

assert(eng,55)
globalalloc(_eng,$100)

_eng:
dd _eng,eng // +08 -&gt; aob1 ; +10 -&gt; a0b2

_eng+10:
readmem(eng,16)


_eng+40:
push  ebp
mov   ebp,[esp+08]
cmp   ebp,[_fqc+20]// is player?
jne   @f
mov   ebp,[esp+0c] // spend amount
sar   ebp,2
mov   [esp+0c],ebp
@@:
pop   ebp
ReassembleEx(eng,_Len)
jmp  eng+_Len

eng:
jmp  _eng+40



//MR(Punch/32/log/ability/ENABLE,Type=vtDword,Address=_abt+20)
//MR(Punch/32/log/ability/mulfactor,Type=vtDword,Address=_abt+24)


[DISABLE]
[_eng+04]:
readmem(_eng+10,16)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>236</ID>
              <Description>"pointer"</Description>
              <LastState RealAddress="08C05420"/>
              <VariableType>String</VariableType>
              <Length>0</Length>
              <Unicode>0</Unicode>
              <ZeroTerminate>1</ZeroTerminate>
              <Address>_fqc+20</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Ignore"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//assert(__+08,32)
[ENABLE]

[DISABLE]

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>229</ID>
      <Description>"logSAVE"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
--[=====[

--]=====]
{$asm}
[ENABLE]
[DISABLE]
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>base</Name>
      <Address>06410020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>offs</Name>
      <Address>06410030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>__</Name>
      <Address>08C00000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_weapon</Name>
      <Address>03424C00</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_cost</Name>
      <Address>03424800</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_regen</Name>
      <Address>03424400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_cardSelect</Name>
      <Address>05284000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_card</Name>
      <Address>03424000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_hresp</Name>
      <Address>00774500</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_coin</Name>
      <Address>00774000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_tower</Name>
      <Address>008F4000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_rapid</Name>
      <Address>066F4000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_fqc</Name>
      <Address>08C05400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_abt</Name>
      <Address>03854400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_eng</Name>
      <Address>08C05800</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_res</Name>
      <Address>08C04400</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>myStrCmp</Name>
      <Address>08C04000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>myStrIndexOf</Name>
      <Address>08C04200</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
