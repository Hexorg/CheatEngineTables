<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>125</ID>
      <Description>"-----&gt;MY Scripts&lt;-----"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>122</ID>
          <Description>"Instant Locks"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
ASSERT(GoF2.exe+BBF53,7E 72) // asteroids
ASSERT(GoF2.exe+BBFD4,0F 8E 8E 01 00 00) // asteroids pre-timer
ASSERT(GoF2.exe+BAB29,7E 25) // station
ASSERT(GoF2.exe+BAF69,7E 53) // planet
ASSERT(GoF2.exe+BB818,0F 8E 9D 01 00 00) // ship

GoF2.exe+BBF53:
 db 90 90

GoF2.exe+BBFD4:
 db 90 90 90 90 90 90

GoF2.exe+BAB29:
 db 90 90

GoF2.exe+BAF69:
 db 90 90

GoF2.exe+BB818:
 db 90 90 90 90 90 90

[DISABLE]
ASSERT(GoF2.exe+BBF53,90 90)
ASSERT(GoF2.exe+BBFD4,90 90 90 90 90 90)
ASSERT(GoF2.exe+BAB29,90 90)
ASSERT(GoF2.exe+BAF69,90 90)
ASSERT(GoF2.exe+BB818,90 90 90 90 90 90)

GoF2.exe+BBF53:
 db 7E 72

GoF2.exe+BBFD4:
 db 0F 8E 8E 01 00 00

GoF2.exe+BAB29:
 db 7E 25

GoF2.exe+BAF69:
 db 7E 53

GoF2.exe+BB818:
 db 0F 8E 9D 01 00 00

{
GoF2.exe+BBF32 - 0F85 39010000         - jne GoF2.exe+BC071
GoF2.exe+BBF38 - 8B 45 14              - mov eax,[ebp+14]           // ms for current frame
GoF2.exe+BBF3B - 01 83 78010000        - add [ebx+00000178],eax     // add to total ms spent scanning object
GoF2.exe+BBF41 - 8B 93 94010000        - mov edx,[ebx+00000194]     // this the current scanner's time required?
GoF2.exe+BBF47 - 81 EA C8000000        - sub edx,000000C8
GoF2.exe+BBF4D - 39 93 78010000        - cmp [ebx+00000178],edx     // compare time spent scanning so far
GoF2.exe+BBF53 - 7E 72                 - jle GoF2.exe+BBFC7 		&lt;&lt; NOP for instant scan
GoF2.exe+BBF55 - 38 4D 0F              - cmp [ebp+0F],cl
GoF2.exe+BBF58 - 74 1D                 - je GoF2.exe+BBF77
GoF2.exe+BBF5A - 38 8B 89010000        - cmp [ebx+00000189],cl
GoF2.exe+BBF60 - 75 0D                 - jne GoF2.exe+BBF6F
GoF2.exe+BBF62 - 8B 03                 - mov eax,[ebx]
GoF2.exe+BBF64 - 51                    - push ecx


GoF2.exe+BBFC1 - 8B 43 10              - mov eax,[ebx+10]
GoF2.exe+BBFC4 - 89 43 0C              - mov [ebx+0C],eax
GoF2.exe+BBFC7 - 8B 93 78010000        - mov edx,[ebx+00000178]     // time spent scanning so far
GoF2.exe+BBFCD - B9 F4010000           - mov ecx,000001F4           // compare with 500 ms
GoF2.exe+BBFD2 - 3B D1                 - cmp edx,ecx
GoF2.exe+BBFD4 - 0F8E 8E010000         - jng GoF2.exe+BC168			&lt;&lt; NOP to not wait 500 ms to show scan going on
GoF2.exe+BBFDA - 8B 73 10              - mov esi,[ebx+10]
GoF2.exe+BBFDD - 85 F6                 - test esi,esi
GoF2.exe+BBFDF - 74 4D                 - je GoF2.exe+BC02E
GoF2.exe+BBFE1 - 80 7D 0F 00           - cmp byte ptr [ebp+0F],00
GoF2.exe+BBFE5 - 74 05                 - je GoF2.exe+BBFEC

--------------------------------------------------------------------------------
- Each frame while locking on to planet
--------------------------------------------------------------------------------
GoF2.exe+BAF3F - 8B 0B                 - mov ecx,[ebx]
GoF2.exe+BAF41 - 8B 81 C8000000        - mov eax,[ecx+000000C8]
GoF2.exe+BAF47 - E8 975BFFFF           - call GoF2.exe+B0AE3
GoF2.exe+BAF4C - 84 C0                 - test al,al
GoF2.exe+BAF4E - 0F85 2A010000         - jne GoF2.exe+BB07E
GoF2.exe+BAF54 - 8B 45 14              - mov eax,[ebp+14]
GoF2.exe+BAF57 - 01 83 7C010000        - add [ebx+0000017C],eax 	&lt;----- add current frame ms
GoF2.exe+BAF5D - 8B 83 7C010000        - mov eax,[ebx+0000017C]
GoF2.exe+BAF63 - 3B 83 94010000        - cmp eax,[ebx+00000194]
GoF2.exe+BAF69 - 7E 53                 - jle GoF2.exe+BAFBE
GoF2.exe+BAF6B - 38 55 EA              - cmp [ebp-16],dl
GoF2.exe+BAF6E - 74 15                 - je GoF2.exe+BAF85
GoF2.exe+BAF70 - 8B 89 C8000000        - mov ecx,[ecx+000000C8]
GoF2.exe+BAF76 - 6A 00                 - push 00
GoF2.exe+BAF78 - 51                    - push ecx
GoF2.exe+BAF79 - 6A 15                 - push 15
GoF2.exe+BAF7B - FF 75 10              - push [ebp+10]
GoF2.exe+BAF7E - E8 4904FAFF           - call GoF2.exe+5B3CC
GoF2.exe+BAF83 - EB 39                 - jmp GoF2.exe+BAFBE
GoF2.exe+BAF85 - 38 93 F4010000        - cmp [ebx+000001F4],dl
GoF2.exe+BAF8B - 75 15                 - jne GoF2.exe+BAFA2
GoF2.exe+BAF8D - D9EE                  - fldz
GoF2.exe+BAF8F - 8B 35 70AF6000        - mov esi,[GoF2.exe+20AF70]
GoF2.exe+BAF95 - 51                    - push ecx
GoF2.exe+BAF96 - D9 1C 24              - fstp dword ptr [esp]
GoF2.exe+BAF99 - 6A 00                 - push 00
GoF2.exe+BAF9B - 6A 1A                 - push 1A
GoF2.exe+BAF9D - E8 BB7B0200           - call GoF2.exe+E2B5D
GoF2.exe+BAFA2 - 80 BB 84010000 00     - cmp byte ptr [ebx+00000184],00
GoF2.exe+BAFA9 - 8B 43 18              - mov eax,[ebx+18]
GoF2.exe+BAFAC - 89 43 14              - mov [ebx+14],eax
GoF2.exe+BAFAF - 74 0D                 - je GoF2.exe+BAFBE
GoF2.exe+BAFB1 - 8B 03                 - mov eax,[ebx]
GoF2.exe+BAFB3 - 8B B8 C8000000        - mov edi,[eax+000000C8]
GoF2.exe+BAFB9 - E8 3E5BFFFF           - call GoF2.exe+B0AFC
GoF2.exe+BAFBE - 8B 83 7C010000        - mov eax,[ebx+0000017C]		&lt;----- current value
GoF2.exe+BAFC4 - 89 45 08              - mov [ebp+08],eax
GoF2.exe+BAFC7 - 85 C0                 - test eax,eax
GoF2.exe+BAFC9 - 0F8E BD000000         - jng GoF2.exe+BB08C
GoF2.exe+BAFCF - 80 7D EA 00           - cmp byte ptr [ebp-16],00
GoF2.exe+BAFD3 - 0F85 B3000000         - jne GoF2.exe+BB08C
GoF2.exe+BAFD9 - 8B 43 18              - mov eax,[ebx+18]
GoF2.exe+BAFDC - 85 C0                 - test eax,eax

--------------------------------------------------------------------------------
- Each frame while locking on to Station
--------------------------------------------------------------------------------
GoF2.exe+BAB17 - 01 83 80010000        - add [ebx+00000180],eax
GoF2.exe+BAB1D - 8B 83 80010000        - mov eax,[ebx+00000180]
GoF2.exe+BAB23 - 3B 83 94010000        - cmp eax,[ebx+00000194]
GoF2.exe+BAB29 - 7E 25                 - jle GoF2.exe+BAB50
GoF2.exe+BAB2B - 38 93 F4010000        - cmp [ebx+000001F4],dl
GoF2.exe+BAB31 - 75 17                 - jne GoF2.exe+BAB4A
GoF2.exe+BAB33 - D9EE                  - fldz
GoF2.exe+BAB35 - 8B 35 70AF6000        - mov esi,[GoF2.exe+20AF70]
GoF2.exe+BAB3B - 51                    - push ecx
GoF2.exe+BAB3C - D9 1C 24              - fstp dword ptr [esp]
GoF2.exe+BAB3F - 6A 00                 - push 00
GoF2.exe+BAB41 - 6A 1A                 - push 1A
GoF2.exe+BAB43 - E8 15800200           - call GoF2.exe+E2B5D
GoF2.exe+BAB48 - 33 D2                 - xor edx,edx
GoF2.exe+BAB4A - 8B 43 28              - mov eax,[ebx+28]
GoF2.exe+BAB4D - 89 43 24              - mov [ebx+24],eax
GoF2.exe+BAB50 - 8B 83 80010000        - mov eax,[ebx+00000180]

--------------------------------------------------------------------------------
- Each frame while locking on to ships (yellow at least)
--------------------------------------------------------------------------------
GoF2.exe+BB7F0 - 01 8B 74010000        - add [ebx+00000174],ecx
GoF2.exe+BB7F6 - 80 7D 0B 00           - cmp byte ptr [ebp+0B],00
GoF2.exe+BB7FA - 8B B3 74010000        - mov esi,[ebx+00000174]
GoF2.exe+BB800 - 75 0E                 - jne GoF2.exe+BB810
GoF2.exe+BB802 - 80 78 1C 00           - cmp byte ptr [eax+1C],00
GoF2.exe+BB806 - 75 08                 - jne GoF2.exe+BB810
GoF2.exe+BB808 - 8B 8B 94010000        - mov ecx,[ebx+00000194]
GoF2.exe+BB80E - EB 06                 - jmp GoF2.exe+BB816
GoF2.exe+BB810 - 8B 8B 90010000        - mov ecx,[ebx+00000190]
GoF2.exe+BB816 - 3B F1                 - cmp esi,ecx
GoF2.exe+BB818 - 0F8E 9D010000         - jng GoF2.exe+BB9BB

}


</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>124</ID>
          <Description>"Computer Drilling"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Thanks to unknown_k for finding this address

[ENABLE]
ASSERT(GOF2.EXE+9818D,D8 47 10 D9 5F 10)
ASSERT(GOF2.EXE+981A5,D8 47 14 D9 5F 14)

// change this: fadd dword ptr [edi+10] // D8 47 10
// to this:     fld dword ptr [edi+10]  // D9 47 10
GOF2.EXE+9818D:
 db D9

// change this: fadd dword ptr [edi+14] // D8 47 14
// to this:     fld dword ptr [edi+14]  // D9 47 14
GOF2.EXE+981A5:
 db D9

[DISABLE]
ASSERT(GOF2.EXE+9818D,D9 47 10 D9 5F 10)
ASSERT(GOF2.EXE+981A5,D9 47 14 D9 5F 14)

GOF2.EXE+9818D:
 db D8

GOF2.EXE+981A5:
 db D8

{
GoF2.exe+98176 - DB 45 08              - fild dword ptr [ebp+08]
GoF2.exe+98179 - D9 5D 08              - fstp dword ptr [ebp+08]
GoF2.exe+9817C - D9 47 08              - fld dword ptr [edi+08]
GoF2.exe+9817F - D8 07                 - fadd dword ptr [edi]
GoF2.exe+98181 - D9 5D F4              - fstp dword ptr [ebp-0C]
GoF2.exe+98184 - D9 45 F4              - fld dword ptr [ebp-0C]
GoF2.exe+98187 - D8 75 F8              - fdiv dword ptr [ebp-08]
GoF2.exe+9818A - D8 4D 08              - fmul dword ptr [ebp+08]
GoF2.exe+9818D - D8 47 10              - fadd dword ptr [edi+10] &lt;&lt; load to make it do nothing, leaving cursor in the center
GoF2.exe+98190 - D9 5F 10              - fstp dword ptr [edi+10]
GoF2.exe+98193 - D9 47 0C              - fld dword ptr [edi+0C]
GoF2.exe+98196 - D8 47 04              - fadd dword ptr [edi+04]
GoF2.exe+98199 - D9 5D F4              - fstp dword ptr [ebp-0C]
GoF2.exe+9819C - D9 45 F4              - fld dword ptr [ebp-0C]
GoF2.exe+9819F - D8 75 F8              - fdiv dword ptr [ebp-08]
GoF2.exe+981A2 - D8 4D 08              - fmul dword ptr [ebp+08]
GoF2.exe+981A5 - D8 47 14              - fadd dword ptr [edi+14] &lt;&lt; load to make it do nothing, leaving cursor in the center
GoF2.exe+981A8 - D9 5F 14              - fstp dword ptr [edi+14]
GoF2.exe+981AB - E8 88BBFEFF           - call GoF2.exe+83D38
GoF2.exe+981B0 - 8B B7 8C000000        - mov esi,[edi+0000008C]
GoF2.exe+981B6 - 53                    - push ebx
GoF2.exe+981B7 - E8 7CBBFEFF           - call GoF2.exe+83D38
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>135</ID>
          <Description>"Armor: 10k"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>DEFINE(address,GoF2.exe+8FC7A)
DEFINE(bytes,8B 80 C8 00 00 00)

[ENABLE]
ASSERT(address,bytes)
ALLOC(newmem,$1000)

newmem:
 mov eax, [eax+000000c8] // original code, eax should now be ptr-&gt;ptr-&gt;armor
 push edi
 mov edi, [eax]
 mov [edi+70], #10000 // current armor
 mov [edi+7c], #10000 // max armor
 mov [edi+84], #10000 // special armor
 mov [edi+88], #10000 // special armor max
 pop edi
 ret

address:
 call newmem
 db 90

[DISABLE]
address:
ASSERT(address,E8 ?? ?? ?? ?? 90)
 db bytes

dealloc(newmem)

{
SET UP NEW SHIP:

GoF2.exe+8FBF9 - D9 9B B8000000        - fstp dword ptr [ebx+000000B8]
GoF2.exe+8FBFF - D9 05 9C0F5500        - fld dword ptr [GoF2.exe+150F9C]
GoF2.exe+8FC05 - 8B 3D 50D15200        - mov edi,[GoF2.exe+12D150]
GoF2.exe+8FC0B - 33 F6                 - xor esi,esi
GoF2.exe+8FC0D - D9 9B 10010000        - fstp dword ptr [ebx+00000110]
GoF2.exe+8FC13 - D9 05 980F5500        - fld dword ptr [GoF2.exe+150F98]
GoF2.exe+8FC19 - 89 B3 BC000000        - mov [ebx+000000BC],esi
GoF2.exe+8FC1F - D9 9B 14010000        - fstp dword ptr [ebx+00000114]
GoF2.exe+8FC25 - 89 B3 98000000        - mov [ebx+00000098],esi
GoF2.exe+8FC2B - D9 05 E8085500        - fld dword ptr [GoF2.exe+1508E8]
GoF2.exe+8FC31 - 89 B3 94000000        - mov [ebx+00000094],esi
GoF2.exe+8FC37 - D9 9B 18010000        - fstp dword ptr [ebx+00000118]
GoF2.exe+8FC3D - 89 B3 9C000000        - mov [ebx+0000009C],esi
GoF2.exe+8FC43 - 89 B3 20010000        - mov [ebx+00000120],esi
GoF2.exe+8FC49 - 89 B3 1C010000        - mov [ebx+0000011C],esi
GoF2.exe+8FC4F - 89 B3 50010000        - mov [ebx+00000150],esi
GoF2.exe+8FC55 - 89 B3 4C010000        - mov [ebx+0000014C],esi
GoF2.exe+8FC5B - 89 B3 30010000        - mov [ebx+00000130],esi
GoF2.exe+8FC61 - 89 B3 2C010000        - mov [ebx+0000012C],esi
GoF2.exe+8FC67 - C6 83 54010000 00     - mov byte ptr [ebx+00000154],00
GoF2.exe+8FC6E - 89 B3 28010000        - mov [ebx+00000128],esi
GoF2.exe+8FC74 - 89 B3 24010000        - mov [ebx+00000124],esi
GoF2.exe+8FC7A - 8B 80 C8000000        - mov eax,[eax+000000C8]                 &lt;&lt;&lt;&lt;&lt; NOW I'M TRYING THIS ONE
GoF2.exe+8FC80 - 68 60040000           - push 00000460                          &lt;&lt;&lt;&lt;&lt;
GoF2.exe+8FC85 - 89 43 58              - mov [ebx+58],eax                       &lt;&lt;&lt;&lt;&lt;
GoF2.exe+8FC88 - FF D7                 - call edi                               &lt;&lt;&lt;&lt;&lt;
GoF2.exe+8FC8A - 59                    - pop ecx
GoF2.exe+8FC8B - 89 45 EC              - mov [ebp-14],eax
GoF2.exe+8FC8E - 89 75 FC              - mov [ebp-04],esi
GoF2.exe+8FC91 - 3B C6                 - cmp eax,esi
GoF2.exe+8FC93 - 74 08                 - je GoF2.exe+8FC9D
GoF2.exe+8FC95 - 50                    - push eax
GoF2.exe+8FC96 - E8 8592FCFF           - call GoF2.exe+58F20
GoF2.exe+8FC9B - EB 02                 - jmp GoF2.exe+8FC9F
GoF2.exe+8FC9D - 33 C0                 - xor eax,eax
GoF2.exe+8FC9F - 83 4D FC FF           - or dword ptr [ebp-04],FF
GoF2.exe+8FCA3 - 6A 48                 - push 48
GoF2.exe+8FCA5 - 89 43 70              - mov [ebx+70],eax
GoF2.exe+8FCA8 - FF D7                 - call edi
GoF2.exe+8FCAA - 59                    - pop ecx
GoF2.exe+8FCAB - 3B C6                 - cmp eax,esi
GoF2.exe+8FCAD - 74 50                 - je GoF2.exe+8FCFF
GoF2.exe+8FCAF - 83 48 30 FF           - or dword ptr [eax+30],FF
GoF2.exe+8FCB3 - 8B 0D 78AF6000        - mov ecx,[GoF2.exe+20AF78]
GoF2.exe+8FCB9 - 8B 3D 00AF6000        - mov edi,[GoF2.exe+20AF00]
GoF2.exe+8FCBF - 89 30                 - mov [eax],esi
GoF2.exe+8FCC1 - 89 70 08              - mov [eax+08],esi
GoF2.exe+8FCC4 - 89 70 10              - mov [eax+10],esi
GoF2.exe+8FCC7 - 89 70 0C              - mov [eax+0C],esi
GoF2.exe+8FCCA - 89 70 18              - mov [eax+18],esi
GoF2.exe+8FCCD - 89 70 1C              - mov [eax+1C],esi
GoF2.exe+8FCD0 - 89 70 28              - mov [eax+28],esi
GoF2.exe+8FCD3 - 89 70 04              - mov [eax+04],esi
GoF2.exe+8FCD6 - 66 C7 40 2C 0000      - mov word ptr [eax+2C],0000
GoF2.exe+8FCDC - 8B 91 98000000        - mov edx,[ecx+00000098]
GoF2.exe+8FCE2 - 2B FA                 - sub edi,edx
GoF2.exe+8FCE4 - D1 FF                 - sar edi,1
GoF2.exe+8FCE6 - 89 50 38              - mov [eax+38],edx
GoF2.exe+8FCE9 - 89 78 3C              - mov [eax+3C],edi
GoF2.exe+8FCEC - 8B 89 9C000000        - mov ecx,[ecx+0000009C]
GoF2.exe+8FCF2 - 8B 3D 50D15200        - mov edi,[GoF2.exe+12D150]
GoF2.exe+8FCF8 - 89 48 40              - mov [eax+40],ecx
GoF2.exe+8FCFB - 8B D0                 - mov edx,eax
GoF2.exe+8FCFD - EB 02                 - jmp GoF2.exe+8FD01
GoF2.exe+8FCFF - 33 D2                 - xor edx,edx
GoF2.exe+8FD01 - 8B 43 74              - mov eax,[ebx+74]
GoF2.exe+8FD04 - 89 93 80000000        - mov [ebx+00000080],edx



GoF2.exe+8F80D - DA 40 70              - fiadd [eax+70]
GoF2.exe+8F810 - E8 5BEF0700           - call GoF2.exe+10E770
GoF2.exe+8F815 - 89 86 10010000        - mov [esi+00000110],eax
GoF2.exe+8F81B - 8B 87 54010000        - mov eax,[edi+00000154]
GoF2.exe+8F821 - 8B 48 04              - mov ecx,[eax+04]
GoF2.exe+8F824 - FF B7 60010000        - push [edi+00000160]
GoF2.exe+8F82A - 89 4F 4C              - mov [edi+4C],ecx
GoF2.exe+8F82D - 8B 48 1C              - mov ecx,[eax+1C]
GoF2.exe+8F830 - 89 4F 44              - mov [edi+44],ecx
GoF2.exe+8F833 - 8B 40 20              - mov eax,[eax+20]
GoF2.exe+8F836 - 8B 4F 58              - mov ecx,[edi+58]
GoF2.exe+8F839 - 89 47 48              - mov [edi+48],eax

Clears armor pointer when docking:
00492BA2 - 89 7B 4C  - mov [ebx+4C],edi
00492BA5 - C6 43 54 00 - mov byte ptr [ebx+54],00
00492BA9 - 89 7B 58  - mov [ebx+58],edi &lt;&lt;
00492BAC - 89 7B 5C  - mov [ebx+5C],edi
00492BAF - C6 05 FAAD6000 00 - mov byte ptr [GoF2.exe+20ADFA],00

SETS ARMOR POINTER WHEN LEAVING STATION:
0048FC7A - 8B 80 C8000000  - mov eax,[eax+000000C8]
0048FC80 - 68 60040000 - push 00000460
0048FC85 - 89 43 58  - mov [ebx+58],eax &lt;&lt;
0048FC88 - FF D7  - call edi
0048FC8A - 59 - pop ecx

EAX=09CBAEB8
EBX=09B9C288
ECX=0046772F
EDX=00000000
ESI=00000000
EDI=696C232B
ESP=0018F7B0
EBP=0018F7F0
EIP=0048FC88



}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>147</ID>
          <Description>"Cargo: 10k"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>DEFINE(address,GoF2.exe+6502A)
DEFINE(bytes,8B 50 28 03 50 0C)

[ENABLE]
ASSERT(address,bytes)
ALLOC(newmem,$1000)

newmem:
 mov [eax+0C], #10000
 mov edx,[eax+28]
 add edx,[eax+0C]
 ret

address:
 call newmem
 db 90

[DISABLE]
address:
ASSERT(address,E8 ?? ?? ?? ?? 90)
 db bytes

dealloc(newmem)

{
--------------------------------------------------------------------------------
- Called each frame in hangar and store, static cargo is lower, 6506E
--------------------------------------------------------------------------------
GoF2.exe+64F95 - FF 35 68AE6000        - push [GoF2.exe+20AE68]
GoF2.exe+64F9B - E8 C0380800           - call GoF2.exe+E8860
GoF2.exe+64FA0 - 8B 86 D0020000        - mov eax,[esi+000002D0]
GoF2.exe+64FA6 - 8B 0D 78AF6000        - mov ecx,[GoF2.exe+20AF78]
GoF2.exe+64FAC - 2B 41 10              - sub eax,[ecx+10]
GoF2.exe+64FAF - 6A 01                 - push 01
GoF2.exe+64FB1 - 03 86 D8020000        - add eax,[esi+000002D8]
GoF2.exe+64FB7 - 50                    - push eax
GoF2.exe+64FB8 - 8B 86 D4020000        - mov eax,[esi+000002D4]
GoF2.exe+64FBE - 2B C7                 - sub eax,edi
GoF2.exe+64FC0 - 03 86 CC020000        - add eax,[esi+000002CC]
GoF2.exe+64FC6 - 50                    - push eax
GoF2.exe+64FC7 - FF B6 0C030000        - push [esi+0000030C]
GoF2.exe+64FCD - FF 35 68AE6000        - push [GoF2.exe+20AE68]
GoF2.exe+64FD3 - E8 88380800           - call GoF2.exe+E8860
GoF2.exe+64FD8 - 8A 4D 0C              - mov cl,[ebp+0C]
GoF2.exe+64FDB - 8B 86 90030000        - mov eax,[esi+00000390]
GoF2.exe+64FE1 - 88 88 9E000000        - mov [eax+0000009E],cl
GoF2.exe+64FE7 - 84 C9                 - test cl,cl
GoF2.exe+64FE9 - 75 09                 - jne GoF2.exe+64FF4
GoF2.exe+64FEB - 38 4D 10              - cmp [ebp+10],cl
GoF2.exe+64FEE - 74 04                 - je GoF2.exe+64FF4
GoF2.exe+64FF0 - B2 01                 - mov dl,01
GoF2.exe+64FF2 - EB 02                 - jmp GoF2.exe+64FF6
GoF2.exe+64FF4 - 32 D2                 - xor dl,dl
GoF2.exe+64FF6 - 8B BE 8C030000        - mov edi,[esi+0000038C]
GoF2.exe+64FFC - 88 97 9E000000        - mov [edi+0000009E],dl
GoF2.exe+65002 - 84 C9                 - test cl,cl
GoF2.exe+65004 - 74 08                 - je GoF2.exe+6500E
GoF2.exe+65006 - 8B BE 90030000        - mov edi,[esi+00000390]
GoF2.exe+6500C - EB 0C                 - jmp GoF2.exe+6501A
GoF2.exe+6500E - 80 7D 10 00           - cmp byte ptr [ebp+10],00
GoF2.exe+65012 - 74 0B                 - je GoF2.exe+6501F
GoF2.exe+65014 - 8B BE 8C030000        - mov edi,[esi+0000038C]
GoF2.exe+6501A - E8 47840700           - call GoF2.exe+DD466
GoF2.exe+6501F - A1 6CAD6000           - mov eax,[GoF2.exe+20AD6C]
GoF2.exe+65024 - 8B 80 54010000        - mov eax,[eax+00000154]
GoF2.exe+6502A - 8B 50 28              - mov edx,[eax+28]
GoF2.exe+6502D - 03 50 0C              - add edx,[eax+0C]			&lt;---- Called every frame in hangar
GoF2.exe+65030 - 39 50 10              - cmp [eax+10],edx
GoF2.exe+65033 - 7E 10                 - jle GoF2.exe+65045
GoF2.exe+65035 - 8B 0D 68AE6000        - mov ecx,[GoF2.exe+20AE68]
GoF2.exe+6503B - B8 FF002AFF           - mov eax,FF2A00FF
GoF2.exe+65040 - E8 0B760800           - call GoF2.exe+EC650
GoF2.exe+65045 - 33 FF                 - xor edi,edi
GoF2.exe+65047 - B8 A8AF5400           - mov eax,GoF2.exe+14AFA8
GoF2.exe+6504C - 8D 75 CC              - lea esi,[ebp-34]
GoF2.exe+6504F - 89 7D CC              - mov [ebp-34],edi
GoF2.exe+65052 - E8 59D70800           - call GoF2.exe+F27B0
GoF2.exe+65057 - 89 7D FC              - mov [ebp-04],edi
GoF2.exe+6505A - B8 C4B05400           - mov eax,GoF2.exe+14B0C4
GoF2.exe+6505F - 8D 75 D4              - lea esi,[ebp-2C]
GoF2.exe+65062 - 89 7D D4              - mov [ebp-2C],edi
GoF2.exe+65065 - E8 46D70800           - call GoF2.exe+F27B0
GoF2.exe+6506A - C6 45 FC 01           - mov byte ptr [ebp-04],01
GoF2.exe+6506E - A1 6CAD6000           - mov eax,[GoF2.exe+20AD6C]  &lt;&lt;&lt;&lt;&lt; Static - [[GoF2.exe+20AD6C]+154] + 0C == cargo, +154 == ship?
GoF2.exe+65073 - 8B 88 54010000        - mov ecx,[eax+00000154]
GoF2.exe+65079 - 8B 41 28              - mov eax,[ecx+28]
GoF2.exe+6507C - 03 41 0C              - add eax,[ecx+0C]			&lt;&lt;&lt;&lt;&lt; Called every frame in hangar
GoF2.exe+6507F - 8D 5D DC              - lea ebx,[ebp-24]
GoF2.exe+65082 - 99                    - cdq
GoF2.exe+65083 - 52                    - push edx
GoF2.exe+65084 - 50                    - push eax
GoF2.exe+65085 - 89 7D DC              - mov [ebp-24],edi
GoF2.exe+65088 - E8 E3D80800           - call GoF2.exe+F2970
GoF2.exe+6508D - C6 45 FC 02           - mov byte ptr [ebp-04],02
GoF2.exe+65091 - A1 6CAD6000           - mov eax,[GoF2.exe+20AD6C]
GoF2.exe+65096 - 8B 80 54010000        - mov eax,[eax+00000154]
GoF2.exe+6509C - 8B 40 10              - mov eax,[eax+10]
GoF2.exe+6509F - 21 7D EC              - and [ebp-14],edi
GoF2.exe+650A2 - 99                    - cdq
GoF2.exe+650A3 - 52                    - push edx
GoF2.exe+650A4 - 50                    - push eax
GoF2.exe+650A5 - 8D 5D EC              - lea ebx,[ebp-14]
GoF2.exe+650A8 - E8 C3D80800           - call GoF2.exe+F2970
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"Keyboard (Required for cheats that read the keyboard) -Turbo, Inventory"</Description>
          <Options moHideChildren="1" moBindActivation="1"/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{==============================================================================
 = Keyboard Helper Script
 = Author: Jason Goemaat
 = Version 1.0
 =
 = Lets you check key states easily and for presses inside other scripts
 ==============================================================================
 = int CheckKeyPress(MyKeyState *pKeyState)
 =
 = struct MyKeyState {
 =     int VirtualKeyCode,// key code to check
 =     int LastTickCount, // time of last "PRESS" returned from GetTickCount
 =     int ReturnFlags, // also in eax, 800000001 for new press, 1 if still pressed, 0 if not pressed
 =     int Reserved, // currently incrementing count of presses
 =

 Sample call:
 LABEL(MyKeyCode)
 MyKeyCode:
  // 14 is VK_CAPITAL: http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731.aspx
  DD 14 0 0 0

 // now the code to actually check
 push MyKeyCode
 call CheckKeyPress
 test eax, 80000001 // eax is return, also [MyKeyCode+8]
 js DestinationIfNewPress // sign bit (MSB) is if new press (last call passing this struct wasn't pressed or was pressed at a different time)
 jnz DestinationIfPressed // bit 0 (LSB) is set if pressed at all
 // not pressed here

}

globalalloc(KeyboardHelper,$10000) // upped to 64k

//=============================================================================
[ENABLE]
//=============================================================================
label(CheckKeyPress)
registersymbol(CheckKeyPress) // method called from other scripts

//-----------------------------------------------------------------------------
// Keyboard
//-----------------------------------------------------------------------------
label(CurrentMS)
label(ExitFlag)
label(KeyPressTimes)
label(IsPressed)
label(AfterPressed)
label(Continue)
label(KEYSTATES)
registersymbol(KEYSTATES) // register if you want to double-check

//-----------------------------------------------------------------------------
KeyboardHelper:
label(MyGetKeyboardState)
MyGetKeyboardState:
    label(ContinueMyGetKeyboardState)
    push ebp
    mov ebp, esp
    push edi
    sub esp, 8

    mov edi, dword ptr [ebp+8]800000001
    mov ecx, 0

ContinueMyGetKeyboardState:
    mov dword ptr [ebp-4], ecx
    push ecx
    call GetAsyncKeyState
    mov byte ptr [edi], ah
    mov ecx, dword ptr [ebp-4]
    inc ecx
    inc edi
    cmp ecx, 00000100
    jb ContinueMyGetKeyboardState

    add esp, 8
    pop edi
    pop ebp
    ret 0004

//-----------------------------------------------------------------------------
CheckKeyPress:
    label(CheckKeyPress_NotCurrentlyPressed)
    // pushed value is a pointer to 16 bytes
    // 0000: Virtual Key Code (http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx)
    // 0004: Time of last press we checked (set by this to 0 if not pressed or
    //       GetTickCount as of when we noticed it was pressed
    // 0008: Returned flags, 800000001 if newly pressed, 1 if still pressed, 0 if not
    // 000C: Reserved for future use
    // RETURN (in EAX): bit 00000001 if currently pressed, 80000001 if newly pressed
    //       "test eax, eax" will let you JNZ if pressed at all, JS if newly pressed
    push ebp
    mov ebp, esp
    push eax // space for result at ebp-4
    pushad // use any registers I want

    // clear result
    xor eax, eax

    mov edi, dword ptr [ebp+8] // first and only argument, edi is address of struct
    mov ebx, dword ptr [edi] // get vkey code
    and ebx, 000000ff // make sure it is in range, should be
    lea esi, [KeyPressTimes+ebx*4] // get address of last stored press time
    mov ecx, dword ptr [esi] // get last time we noticed the key being pressed

    // if not currently pressed, leave eax clear
    test ecx, ecx
    jz CheckKeyPress_NotCurrentlyPressed

    // so it is pressed now, set 1 flag
    or eax, 00000001

    // see if it is newly pressed, stored ticks equals given ticks
    cmp ecx, dword ptr [edi+4]
    je CheckKeyPress_NotCurrentlyPressed // already pass this flag once
    inc [edi+c]
    or eax, 80000000

CheckKeyPress_NotCurrentlyPressed:
    // set value in passed struct no matter what
    mov [edi+4], ecx

    // store result to pop back into eax and in struct
    mov dword ptr [ebp-4], eax
    mov dword ptr [edi+8], eax

    popad
    pop eax // result
    pop ebp
    ret 0004 // pop pushed argument off the stack


LABEL(KeyboardHelperThread)
KeyboardHelperThread:
    push KEYSTATES // function will pop this when returning
    call MyGetKeyboardState

    call GetTickCount
    mov dword ptr [CurrentMS], eax

    // loop through each key so we know when last set
    mov ecx, 0

Continue:
    lea edi, [KeyPressTimes+ecx*4]
    movsx ebx, [KEYSTATES+ecx] // sign-extends, so MSB is right
    test ebx, ebx
    js IsPressed

    // not currently pressed, set time to 0
    mov dword ptr [edi], 00000000
    jmp AfterPressed

IsPressed:
    // only set if current value is 0, meaning it wasn't pressed before
    cmp dword ptr [edi], 0
    jnz AfterPressed
    mov dword ptr [edi], eax

AfterPressed:
    inc ecx
    cmp ecx, 00000100
    jb Continue

    mov eax, 0000000a // 10 ms sleep
    push eax
    call Sleep

    cmp dword ptr [ExitFlag], 0 // see if we should exit
    je KeyboardHelperThread
    ret

// current tick count (ms since system start)
KeyboardHelper+1000:
CurrentMS:
    dd 0
KeyboardHelper+1004:
ExitFlag:
    dd 0 // set to 1 on disable to trigger thread returning
KEYSTATES:
    // 32 quad-words, 256 bytes
    dq 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

KeyboardHelper+2000:
KeyPressTimes:
    // 256 dwords, 0 if key isn't pressed, tickcount when initially pressed
    // if it is pressed, current if was 0, unchanged otherwise
    dq 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    dq 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    dq 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    dq 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

CreateThread(KeyboardHelperThread)

//=============================================================================
[DISABLE]
//=============================================================================
// I leave symbols registered

// tell keyboard thread to exit
KeyboardHelper+1004:
    dd 1

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>144</ID>
              <Description>"SHIFT-&gt;Fast (slow down normally)"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>DEFINE(address,GoF2.exe+ACC84)
DEFINE(bytes,D9 83 A0 00 00 00)

[ENABLE]
ASSERT(address,bytes)
ALLOC(newmem,$1000)

LABEL(VKEY_SUPERTHRUST)

newmem:
 LABEL(NotPressed)

 // check for new keypress
 pushad
 pushfd
 push VKEY_SUPERTHRUST
 call CheckKeyPress
 test eax, 80000001
 //jns NotPressed // once on new press only
 jz NotPressed

 // ok, set fast
 mov dword ptr [ebx+000000A0], (float)4.0

NotPressed:
 popfd
 popad
 fld dword ptr [ebx+000000A0]
 ret

VKEY_SUPERTHRUST:
 dd 10 0 0 0 // 10 is VK_SHIFT, 14 is capslock


address:
 call newmem
 db 90

[DISABLE]
address:
ASSERT(address,E8 ?? ?? ?? ?? 90)
 db bytes

dealloc(newmem)

{
GoF2.exe+ACC68 - 8D 45 98              - lea eax,[ebp-68]
GoF2.exe+ACC6B - E8 20630300           - call GoF2.exe+E2F90
GoF2.exe+ACC70 - 80 BB BC020000 00     - cmp byte ptr [ebx+000002BC],00
GoF2.exe+ACC77 - 74 0B                 - je GoF2.exe+ACC84
GoF2.exe+ACC79 - 8D 8B 74020000        - lea ecx,[ebx+00000274]
GoF2.exe+ACC7F - E8 0C630300           - call GoF2.exe+E2F90
GoF2.exe+ACC84 - D9 83 A0000000        - fld dword ptr [ebx+000000A0]           &lt;&lt; LOADS thrust, 1.0 is max
GoF2.exe+ACC8A - 8D 75 D4              - lea esi,[ebp-2C]
GoF2.exe+ACC8D - D8 4D 0C              - fmul dword ptr [ebp+0C]
GoF2.exe+ACC90 - 8D 7D E0              - lea edi,[ebp-20]
GoF2.exe+ACC93 - D8 8B 9C000000        - fmul dword ptr [ebx+0000009C]
GoF2.exe+ACC99 - D9 5D E8              - fstp dword ptr [ebp-18]
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>146</ID>
              <Description>"SHIFT-&gt;No Inventory Change"</Description>
              <Color>80000008</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
ASSERT(GoF2.exe+5F77A,89 48 38 8B 40 18)
ASSERT(GoF2.exe+5F78F,89 48 34 8B 40 18)
ALLOC(newmem,$1000)

newmem:
LABEL(VKEY_SHIFT)
VKEY_SHIFT:
 // http://msdn.microsoft.com/en-us/library/windows/desktop/dd375731.aspx
 dd 10 0 0 0 // vkeycode, last time pressed, flags(return), reserved

LABEL(CODE1)
LABEL(SKIP1)
CODE1:
//GoF2.exe+5F77A - 89 48 38 - mov [eax+38],ecx // decrease shop inventory
//GoF2.exe+5F77D - 8B 40 18 - mov eax,[eax+18]
 pushad
 pushfd
 push VKEY_SHIFT
 call CheckKeyPress
 popfd
 popad
 test [VKEY_SHIFT+4],ffffffff
 jnz SKIP1
 mov [eax+38],ecx
SKIP1:
 mov eax,[eax+18]
 ret

LABEL(CODE2)
LABEL(SKIP2)
CODE2:
//GoF2.exe+5F78F - 89 48 34 - mov [eax+34],ecx // decrease ship inventory
//GoF2.exe+5F792 - 8B 40 18 - mov eax,[eax+18]
 pushad
 pushfd
 push VKEY_SHIFT
 call CheckKeyPress
 popfd
 popad
 test [VKEY_SHIFT+4],ffffffff
 jnz SKIP2
 mov [eax+34],ecx
SKIP2:
 mov eax,[eax+18]
 ret

GoF2.exe+5F77A:
 call CODE1
 nop

GoF2.exe+5F78F:
 call CODE2
 nop

[DISABLE]
ASSERT(GoF2.exe+5F77A,E8 ?? ?? ?? ?? 90)
ASSERT(GoF2.exe+5F78F,E8 ?? ?? ?? ?? 90)

GoF2.exe+5F77A:
 db 89 48 38 8B 40 18

GoF2.exe+5F78F:
 db 89 48 34 8B 40 18

{
GoF2.exe+5F74F - 55                    - push ebp
GoF2.exe+5F750 - 8B EC                 - mov ebp,esp
GoF2.exe+5F752 - 80 7D 08 00           - cmp byte ptr [ebp+08],00
GoF2.exe+5F756 - 74 2C                 - je GoF2.exe+5F784
GoF2.exe+5F758 - 8B 48 38              - mov ecx,[eax+38]
GoF2.exe+5F75B - 85 C9                 - test ecx,ecx
GoF2.exe+5F75D - 7E 38                 - jle GoF2.exe+5F797 		// jmp will xor eax and return 0
GoF2.exe+5F75F - 80 7D 0C 00           - cmp byte ptr [ebp+0C],00
GoF2.exe+5F763 - 75 11                 - jne GoF2.exe+5F776
GoF2.exe+5F765 - 8B 15 6CAD6000        - mov edx,[GoF2.exe+20AD6C]
GoF2.exe+5F76B - 8B 92 74010000        - mov edx,[edx+00000174]
GoF2.exe+5F771 - 3B 50 18              - cmp edx,[eax+18]
GoF2.exe+5F774 - 7C 21                 - jnge GoF2.exe+5F797
GoF2.exe+5F776 - 49                    - dec ecx
GoF2.exe+5F777 - FF 40 34              - inc [eax+34]				// increase inventory from shop
GoF2.exe+5F77A - 89 48 38              - mov [eax+38],ecx           // decrease shop inventory
GoF2.exe+5F77D - 8B 40 18              - mov eax,[eax+18]
GoF2.exe+5F780 - F7 D8                 - neg eax
GoF2.exe+5F782 - EB 15                 - jmp GoF2.exe+5F799
GoF2.exe+5F784 - 8B 48 34              - mov ecx,[eax+34]
GoF2.exe+5F787 - 85 C9                 - test ecx,ecx
GoF2.exe+5F789 - 7E 0C                 - jle GoF2.exe+5F797
GoF2.exe+5F78B - 49                    - dec ecx
GoF2.exe+5F78C - FF 40 38              - inc [eax+38]               // increase shop inventory
GoF2.exe+5F78F - 89 48 34              - mov [eax+34],ecx			// decrease inventory, giving to shop
GoF2.exe+5F792 - 8B 40 18              - mov eax,[eax+18]
GoF2.exe+5F795 - EB 02                 - jmp GoF2.exe+5F799
GoF2.exe+5F797 - 33 C0                 - xor eax,eax
GoF2.exe+5F799 - 5D                    - pop ebp
GoF2.exe+5F79A - C2 0800               - ret 0008
}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of jng GoF2.exe+BC168</Description>
      <Address>004BBFD4</Address>
      <ModuleName>GoF2.exe</ModuleName>
      <ModuleNameOffset>BBFD4</ModuleNameOffset>
      <Before>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>3B</Byte>
        <Byte>D1</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>8E</Byte>
        <Byte>8E</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>73</Byte>
        <Byte>10</Byte>
        <Byte>85</Byte>
        <Byte>F6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jle GoF2.exe+BBFC7</Description>
      <Address>004BBF53</Address>
      <ModuleName>GoF2.exe</ModuleName>
      <ModuleNameOffset>BBF53</ModuleNameOffset>
      <Before>
        <Byte>93</Byte>
        <Byte>78</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>72</Byte>
      </Actual>
      <After>
        <Byte>38</Byte>
        <Byte>4D</Byte>
        <Byte>0F</Byte>
        <Byte>74</Byte>
        <Byte>1D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of mov [eax+34],ecx</Description>
      <Address>0045F78F</Address>
      <ModuleName>GoF2.exe</ModuleName>
      <ModuleNameOffset>5F78F</ModuleNameOffset>
      <Before>
        <Byte>0C</Byte>
        <Byte>49</Byte>
        <Byte>FF</Byte>
        <Byte>40</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>34</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>18</Byte>
        <Byte>EB</Byte>
        <Byte>02</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>test</Name>
      <Address>0A4F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>KeyboardHelper</Name>
      <Address>041A0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CheckKeyPress</Name>
      <Address>041A002F</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>KEYSTATES</Name>
      <Address>041A1008</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
