<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>33</ID>
      <Description>"ToW2 Kursk 1943 - v1.3.3 Steam Script v1.0"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Theatre of War 2 - Kursk 1943
 Game Version  : 1.3.3
 Game Sponsor  : Myself
 Process Name  : Kursk1943.bin
 Relevant Info : 32bits/RTS/2010
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 27-Jun-2015
 Author        : Recifense
 History:
 15-Mar-11: First Release
 27-Jun-15: Release for version 1.3.3 (steam)
 Features:
 - God Mode
 - Unlimited Ammo
 - Unit Skills
 - Unlimited Points
===========================================
}

//=========================================
// Definitions
define(LUDO,"Kursk1943.bin")
define(GDMD,Kursk1943.bin+002f9591)
define(GMD1,Kursk1943.bin+002f8397)
define(MAOS,Kursk1943.bin+002878b2)
define(MAOT,Kursk1943.bin+005bb133)
define(MOUS,Kursk1943.bin+0063b774)
define(MOPP,Kursk1943.bin+003b4410)

//=========================================
// Constants used in the script (that can be changed)
define(ctCE64,(float)6.4)

//=========================================
[ENABLE]
//=========================================
//LuaCall(CheckVersion())
//=========================================
// Check if script is compatible to this game version
// If false the script will not be loaded

assert(GDMD,d9 58 38 83 ec f8 5b c2 04 00 83 ec f8 5b e8 ?? ?? ?? ?? 90 90)
assert(GMD1,8b 54 24 04 39 51 08 ?? ?? d9 44 91 10 c2 08 00 e8 ?? ?? ?? ??)
assert(MAOS,83 47 04 01 59 ?? ?? b8 ff ff ff ff 59 5f 5e 5d c2 04 00 59 e8)
assert(MAOT,29 43 18 2b f8 8b c7 59 5f 5b c2 08 00 59 5f 5b e8 ?? ?? ?? ??)
assert(MOUS,8b 88 7c 01 00 00 8b 51 04 8a 82 dd 00 00 00 c2 04 00 e8 ?? ??)
assert(MOPP,8b 44 24 04 8b 40 14 c2 04 00 90 90 90 90 90 90 8b 44 24 04 8b)

//=========================================
alloc(MyCode,4096,LUDO)
//=========================================
// Declaration section
label(_GodMode)
label(_BackGMD)
label(_ExitGMD)
label(_GodMode1)
label(_BackGM1)
label(_ExitGM1)
label(_MonAmmoS)
label(_MonAS00)
label(_BackMAS)
label(_ExitMAS)
label(_MonAmmoT)
label(_BackMAT)
label(_ExitMAT)
label(_MonUnitSkills)
label(_MonUS00)
label(_MonUS01)
label(_BackMUS)
label(_ExitMUS)
label(_MonPlayerPoints)
label(_BackMPP)
label(_ExitMPP)

label(iEnableGMD)
label(iEnableMAO)
label(iEnableMUS)
label(iEnableMPP)
label(iPlayerID)

label(pUnit)

//=========================================
// Registering Symbols
registersymbol(MyCode)
registersymbol(iEnableGMD)
registersymbol(iEnableMAO)
registersymbol(iEnableMUS)
registersymbol(iEnableMPP)
registersymbol(pUnit)

//=========================================
MyCode:
//========================================= 1.3.3
// Human
_GodMode:
 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov ebx,[eax+18]
 test ebx,ebx
 jz _ExitGMD

 movzx ebx,word ptr [ebx+12]
 cmp ebx,[iPlayerID]
 jne _ExitGMD

 fstp st(0)
 fld dword ptr [eax+3c]

_ExitGMD:
 fstp dword ptr [eax+38]           // Original code (set HP)
 sub esp,-08                       // Original code
 jmp _BackGMD                      // Back to main code

//========================================= 1.3.3
// Vehicles
_GodMode1:
 cmp dword ptr [iEnableGMD],0
 je _ExitGM1                       // Jump if feature is disabled

 mov edx,[eax+18]
 test edx,edx
 jz _ExitGM1

 movzx edx,word ptr [edx+12]
 cmp edx,[iPlayerID]
 jne _ExitGM1

 mov edx,[esp+04]                  // Get index
 cmp [ecx+08],edx                  // Valid?
 jna _ExitGM1                      // Jump if false

 mov dword ptr [ecx+edx*4+10],(float)10999.0

 mov dword ptr [eax+3c],(float)10999.0
 mov dword ptr [eax+38],(float)10999.0

_ExitGM1:
 mov edx,[esp+04]                  // Original code (get Index)
 cmp [ecx+08],edx                  // Original code
 jmp _BackGM1                      // Back to main code

//========================================= 1.3.3
// Unlimited Ammo and No Reload
_MonAmmoS:
 add dword ptr [edi+04],01         // Original code

 cmp dword ptr [iEnableMAO],0
 je _ExitMAS                       // Jump if feature is disabled

 mov ecx,[edi+08]
 test ecx,ecx
 jz _ExitMAS

 cmp dword ptr [ecx+04],0
 jne _MonAS00                      // Jump if vehicle

 mov ecx,[ecx+20]                  // Get level 2 pointer
 or ecx,ecx                        // Valid Pointer?
 jz _ExitMAS                       // Jump if false

_MonAS00:
 mov ecx,[ecx+10]                  // Get weapon's owner
 or ecx,ecx                        // Valid Pointer?
 jz _ExitMAS                       // Jump if false

 movzx ecx,word ptr [ecx+12]
 cmp ecx,[iPlayerID]
 jne _ExitMAS

 mov dword ptr [edi+04],00         // Make Spent Ammo = 0

_ExitMAS:
 pop ecx                           // Original code
 jmp _BackMAS                      // Back to main code

//========================================= 1.3.3
// Unlimited Ammo for Tanks
_MonAmmoT:
 cmp dword ptr [iEnableMAO],0
 je _ExitMAT                       // Jump if feature is disabled

 mov ecx,[ebx+14]                  // Get level 1 pointer
 or ecx,ecx                        // Valid Pointer?
 jz _ExitMAT                       // Jump if false

 mov ecx,[ecx+04]                  // Get Tank's owner
 or ecx,ecx                        // Valid Pointer?
 jz _ExitMAT                       // Jump if false

 movzx ecx,word ptr [ecx+12]
 cmp ecx,[iPlayerID]
 jne _ExitMAT

 xor eax,eax                       // Make Ammo_to_decrease = 0
 mov edi,eax                       // EDI should be = EAX

_ExitMAT:
 sub [ebx+18],eax                  // Original code
 sub edi,eax                       // Original code
 jmp _BackMAT                      // Back to main code

//========================================= 1.3.3
// Leadership, Driver, Gunlayer, Scout, Accuracy and Inteligence   (ok)
_MonUnitSkills:
 mov ecx,[eax+0000017c]            // Original code

 cmp dword ptr [iEnableMUS],0
 je _ExitMUS                       // Jump if feature is disabled

 movzx edx,word ptr [eax+12]
 cmp edx,[iPlayerID]
 jne _ExitMUS                      // Jump if false

 mov edx,[ecx+2c]                  // Get level 2 pointer
 test edx,edx                      // Valid pointer?
 jz _ExitMUS                       // Jump if false (vehicles)

 push ecx
 mov ecx,6                         // Number of skills

_MonUS00:
 cmp dword ptr [edx+ecx*4+0c],0
 je _MonUS01                       // Jump if skill is zero

 mov dword ptr [edx+ecx*4+0c],#100

_MonUS01:
 loop _MonUS00                     // Repeat until ECX = 0

 pop ecx

_ExitMUS:
 jmp _BackMUS                      // Back to main code

//========================================= 1.3.3
// Points in Skirmish mode
_MonPlayerPoints:
 mov eax,[esp+04]                  // Original code

 cmp dword ptr [iEnableMPP],0
 je _ExitMPP                       // Jump if feature is disabled

 cmp dword ptr [eax+04],1
 jne _ExitMPP

 cmp dword ptr [eax+14],#5000
 jge _ExitMPP

 mov dword ptr [eax+14],#5000

_ExitMPP:
 mov eax,[eax+14]                  // Original code
 jmp _BackMPP                      // Back to main code

//=========================================
 db '================================&gt;'
 db 'CE6.4 Script by Recifense 062715'
//=========================================
// Variables
iEnableGMD:
 dd 0
iEnableMAO:
 dd 0
iEnableMUS:
 dd 0
iEnableMPP:
 dd 0
iPlayerID:
 dd 1
pUnit:
 dd 0

//=========================================
// Hacking Points
GDMD:
 jmp _GodMode
 nop
_BackGMD:

GMD1:
 jmp _GodMode1
 nop
 nop
_BackGM1:

MAOS:
 jmp _MonAmmoS
_BackMAS:

MAOT:
 jmp _MonAmmoT
_BackMAT:

MOUS:
 jmp _MonUnitSkills
 nop
_BackMUS:

MOPP:
 jmp _MonPlayerPoints
 nop
 nop
_BackMPP:

//=========================================
// Script for Restoring Original Codes
[DISABLE]
GDMD:
// fstp dword ptr [eax+38]
// sub esp,-08
 db d9 58 38 83 ec f8

GMD1:
// mov edx,[esp+04]
// cmp [ecx+08],edx
 db 8b 54 24 04 39 51 08

MAOS:
// add dword ptr [edi+04],01
// pop ecx
 db 83 47 04 01 59

MAOT:
// sub [ebx+18],eax
// sub edi,eax
 db 29 43 18 2b f8

MOUS:
// mov eax,[esp+04]
 db 8b 88 7c 01 00 00

MOPP:
// sub [ebx+18],eax
// mov eax,[eax+14]
 db 8b 44 24 04 8b 40 14

//=========================================
// Unloading Scripts
{$lua}
getAddressList().getMemoryRecordByID(110).Active=false
getAddressList().getMemoryRecordByID(110).Color=0x0c08000
getAddressList().getMemoryRecordByID(111).Active=false
getAddressList().getMemoryRecordByID(111).Color=0x0c08000
getAddressList().getMemoryRecordByID(112).Active=false
getAddressList().getMemoryRecordByID(112).Color=0x0c08000
getAddressList().getMemoryRecordByID(113).Active=false
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
{$asm}

//=========================================
// Unregistering Symbols
unregistersymbol(MyCode)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMAO)
unregistersymbol(iEnableMUS)
unregistersymbol(iEnableMPP)
unregistersymbol(pUnit)

//=========================================
dealloc(MyCode)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>110</ID>
          <Description>"[X] &lt;== God Mode --------------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableGMD",1)
getAddressList().getMemoryRecordByID(110).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableGMD",0)
getAddressList().getMemoryRecordByID(110).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>111</ID>
          <Description>"[X] &lt;== Unlimited Ammo ------------------------------------------&gt; (HK: CTRL+Home / CTRL+End)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMAO",1)
getAddressList().getMemoryRecordByID(111).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMAO",0)
getAddressList().getMemoryRecordByID(111).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"[X] &lt;== Soldiers Full Skill -----------------------------------------&gt; (HK: CTRL+Page Up / CTRL+Page Down)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMUS",1)
getAddressList().getMemoryRecordByID(112).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMUS",0)
getAddressList().getMemoryRecordByID(112).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>113</ID>
          <Description>"[X] &lt;== Minimum Field Points ----------------------------------&gt; (HK: CTRL+Insert / CTRL+Delete)"</Description>
          <LastState Activated="0"/>
          <Color>C08000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
define(test,LUDO)

{$LUA}
writeInteger("iEnableMPP",1)
getAddressList().getMemoryRecordByID(113).Color=0x0008000
{$ASM}

[disable]
{$LUA}
writeInteger("iEnableMPP",0)
getAddressList().getMemoryRecordByID(113).Color=0x0c08000
{$ASM}

</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Activate</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Deactivate</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>Recifense</Name>
      <Address>20150617</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Theatre of War 2 - Kursk 1943
 Game Version  : 1.3.3
 Game Sponsor  : Myself
 Process Name  : Kursk1943.bin
 Relevant Info : 32bits/RTS/2010
 Script Version: 1.0
 CE Version    : 6.4
 Release date  : 27-Jun-2015
 Author        : Recifense
 History:
 15-Mar-11: First Release
 27-Jun-15: Release for version 1.3.3 (steam)
 Features:
 - God Mode          [1]
 - Unlimited Ammo    [2]
 - Unit Skills       [3]
 - Unlimited Points  [4]
===========================================
[1] For human player's units;
[2] For human player's units;
[3] For human player's soldiers not in a vehicle;
[4] During skirmish battles;
===========================================
[USAGE]
1) Run CE64;
2) Run Game;
3) Load the game process "Kursk1943.bin" in CE;
4) Load this table and activate the main script;
5) Now Activate the script of each cheat you want to use;
6) Game On;
===========================================
[HOTKEYS]
CTRL+Home      = Enable  GM/UA cheats;
CTRL+End       = Disable GM/UA cheats;
---------------
CTRL+Page Up   = Enable  SFS cheat;
CTRL+Page Down = Disable SFS cheat;
---------------
CTRL+Insert    = Enable  MFP cheat;
CTRL+Delete    = Disable MFP cheat;
===========================================
[ADVICE]
When you can,save the game before starting using table/cheat. So you can always come back in case you don't like the result.
===========================================
[INFO]
Tested on Win 7 64bits
===========================================
Cheers!
</Comments>
</CheatTable>
