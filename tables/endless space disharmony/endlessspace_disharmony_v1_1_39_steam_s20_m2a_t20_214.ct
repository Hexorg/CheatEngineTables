<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>36</ID>
      <Description>"[X] &lt;== Endless Space v1.1.39 Steam Script 2.0 (M2A) "</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Endless Space - Disharmony
 Game Version  : 1.1.39
 Game Sponsor  : Myself
 Proces Name   : EndlessSpace.exe
 Script Version: 2.0 (JIT - Approach 2)
 CE Version    : 6.3
 Release date  : 14-Dec-2013
 Author        : Recifense
 History:
 02-Jul-13: First Release
 17-Jul-13: Script was changed to work with Harmony Faction as well.
 14-Dec-13: Release for version 1.1.39 (Steam).
 Features:
 - Minimum Dust
 - One Turn Research
 - Unlimited Movement Points
 - God Mode
===========================================
}

//=========================================
// Definitions
define(APPN,"Mono.dll")
define(LUDO,"EndlessSpace.exe")

//=========================================
define(ctSMTD,50)     // MTD Structure Size (#80)
//=========================================
// Structures
struct HMD            // Hacked Method Info
 iHMStat: dd ?        // 0 = Not Installed, 1 = Installed
 iOMSize: dd ?        // Size of the Original Method
 aOCName: resb 16     // Name of the Class  (C type)
 aOMName: resb 16     // Name of the Method (C type)
 iOMAddr: dd ?        // Original Method Current Code Address
 iHMDelt: dd ?        // Delta for Hacking Point
 iHMSize: dd ?        // Size of the array for hacking
 aobOMTD: resb 8      // Original HP AOB (for asserting and restore)
 aobHMTD: resb 8      // AOB of Hacking Code (for replacing original)
 iHMEntr: dd ?        // Hacking Entry Point Address
 iHMBack: dd ?        // Hacking Return Address
 pOMStru: dd ?        // Pointer to Method Structure (for debugging)
endstruct

struct JIT            // Mono JIt Info
 pMethod: dd ?        // Pointer to Method
 dd ?
 iMDAddr: dd ?        // Code Start Memory Address
 dd ?
 iMDSize: dd ?        // Method code size
endstruct

struct MMD            // More Info of Mono Method MDI
 iIDValu: dd ?        // Method ID Number (&lt;&gt;0)
 wMIndex: dw ?        // Method Index
 dw ?
 pMClass: dd ?        // Pointer to Class
 dd ?
 pMDName: dd ?        // Pointer to Method ASCII name
endstruct

struct STK
  oldebp: dd ?
  retadd: dd ?
  profil: dd ?
  method: dd ?
  jitnfo: dd ?
  result: dd ?
endstruct

//=========================================
[ENABLE]
//=========================================
alloc(MyMono,8192,APPN)
alloc(MyProfiler,4096,APPN)
//=========================================
// Mono Declaration section
label(_MonThread)
label(_MonoProfileJitResult)
label(_MPMEExit)
label(_ProfilerCallBack)
label(_MonMethods)
label(_ExitMMD)
label(_CheckMethodByName)
label(_ChkMN00)
label(_ChkMN01)
label(_ChkMN02)
label(_ChkMN03)
label(_ChkMN04)
label(_ChkMN05)
label(_ExitCMD)
label(_CompareString)
label(_CmpSG00)
label(_ExitCSG)
label(pDomain)
label(pMethodStr)
label(pMethodName)
label(iMethodIndex)
label(pClass)
label(pClassName)
label(pJitInfo)
label(pJitStart)
label(iJitSize)
label(iNumMethods)
label(MethodList)
label(Method00)
label(Method01)
label(Method02)
label(Method03)
label(Method04)
label(Method05)
label(Method06)
// General Declaration section
label(_MonPlayerDust)
label(_ExitMPD)
label(_MonResearchProgress)
label(_ExitMRP)
label(_MonMovement1)
label(_MonM100)
label(_MonM101)
label(_MonM102)
label(_ExitMM1)
label(_MonMovement2)
label(_MonM200)
label(_ExitMM2)
label(_MonBaseValue)
label(_ExitMBV)
label(_MonEndTurn)
label(_ExitMET)
label(_MonBattleTurn)
label(_ExitMBT)
label(iEnableMPD)
label(iEnableMRP)
label(iEnableMRK)
label(iEnableMMT)
label(iEnableGMD)
label(fMinRes)
label(fGarbage)
label(pUnit)
label(pMove)
label(pUnit1)
label(pMove1)
label(pUnit2)
label(pMove2)
label(pPlayer)
label(pCommon)
label(pLast)

//=========================================
// Mono Registering Symbols
registersymbol(MyMono)
registersymbol(_MonThread)
registersymbol(_MonoProfileJitResult)
registersymbol(_ProfilerCallBack)
registersymbol(pDomain)
registersymbol(pMethodStr)
registersymbol(pMethodName)
registersymbol(iMethodIndex)
registersymbol(pClass)
registersymbol(pClassName)
registersymbol(pJitInfo)
registersymbol(pJitStart)
registersymbol(iJitSize)
registersymbol(iNumMethods)
registersymbol(MethodList)
registersymbol(Method00)
registersymbol(Method01)
registersymbol(Method02)
registersymbol(Method03)
registersymbol(Method04)
registersymbol(Method05)
registersymbol(Method06)
//=========================================
// General Registering Symbols
registersymbol(iEnableMPD)
registersymbol(iEnableMRP)
registersymbol(iEnableMRK)
registersymbol(iEnableMMT)
registersymbol(iEnableGMD)
registersymbol(fMinRes)
registersymbol(pUnit)
registersymbol(pMove)
registersymbol(pUnit1)
registersymbol(pMove1)
registersymbol(pUnit2)
registersymbol(pMove2)
registersymbol(pPlayer)
registersymbol(pCommon)
registersymbol(pLast)
registersymbol(_MonPlayerDust)
registersymbol(_MonResearchProgress)
registersymbol(_MonMovement1)
registersymbol(_MonMovement2)
registersymbol(_MonBaseValue)
registersymbol(_MonEndTurn)
registersymbol(_MonBattleTurn)

//=========================================
MyMono:
//=========================================
// Run once (Original By Dark Byte)
//=========================================
_MonThread:
 call mono.mono_get_root_domain    // Get App Domain
 mov [pDomain],eax

 push eax
 call mono.mono_thread_attach
 add esp,4

 push _ProfilerCallBack
 push MyProfiler
 call mono.mono_profiler_install
 add esp,8

 push _MonoProfileJitResult        // Procedure called when a Method is JITted
 call mono.mono_profiler_install_jit_end
 add esp,4

 call mono.mono_profiler_get_events

 or eax,10                        // MONO_PROFILE_JIT_COMPILATION
 push eax
 call mono.mono_profiler_set_events
 add esp,4
 ret

//=========================================
// (Original By Dark Byte)
 _ProfilerCallBack:
  ret

//=========================================
//Entry: (*prof, *method, *jinfo, int result); (Original By Dark Byte)
//=========================================
_MonoProfileJitResult:
 push ebp
 mov ebp,esp

 push [ebp+STK.method]
 pop [pMethodStr]

 push [ebp+STK.jitnfo]
 pop [pJitInfo]

 push [ebp+STK.method]
 call mono.mono_method_get_name
 add esp, 4
 mov [pMethodName],eax

 push [ebp+STK.method]
 call mono.mono_method_get_class
 add esp, 4
 mov [pClass],eax

 push eax
 call mono.mono_class_get_name
 add esp, 4
 mov [pClassName],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_start
 add esp,4
 mov [pJitStart],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_size
 add esp,4
 mov [iJitSize],eax

 call _MonMethods

_MPMEExit:
 pop ebp
 ret

//=========================================
// Find out a particular method code address by its name (By RC)
_MonMethods:
 push eax

 cmp dword ptr [iNumMethods],00
 je _ExitMMD

 mov eax,[pMethodName]             // Get paMethodName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pClassName]              // Get paClassName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pJitInfo]                // Get pJitInfoStr
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 call _CheckMethodByName

_ExitMMD:
 pop eax
 ret

//=========================================
// By RC
_CheckMethodByName:
 pushad

 mov ebp,MethodList                 // Point to First Method
 xor ebx,ebx                        // Index = 0

// Verify if any method used in the Script
// Check Size
_ChkMN00:
 mov eax,[ebp+HMD.iOMSize]         // Method2Bfound  Size
 cmp eax,[iJitSize]                // Current Method Size
 je _ChkMN02                       // jump if a match

_ChkMN01:
 lea ebp,[ebp+ctSMTD]              // Point to next method info
 inc ebx
 cmp ebx,[iNumMethods]             // Finished?
 js _ChkMN00                       // If false, continue ...
 jmp _ExitCMD                      // ... Else, exit.

_ChkMN02:
// Check Class Name
 mov esi,[pClassName]
 lea edi,[ebp+HMD.aOCName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// Check Class Name
 mov esi,[pMethodName]
 lea edi,[ebp+HMD.aOMName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// One of the Methods was found
 cmp dword ptr [ebp+HMD.iHMStat],0 // Method already hacked?
 je _ChkMN03                       // Jump if false

 mov eax,[pJitStart]
 cmp eax,[ebp+HMD.iOMAddr]
 je _ExitCMD                       // Jump if same address

// Assert and hack the Method
_ChkMN03:
 xor eax,eax
 mov [ebp+HMD.iHMStat],eax         // Status = Not hacked yet
 mov eax,[pJitStart]               // Get method address
 mov [ebp+HMD.iOMAddr],eax         // Update Original Method Current Address
 add eax,[ebp+HMD.iHMDelt]         // Point to Hacking Point
 mov esi,eax                       // Save address for assertion
 mov [ebp+HMD.iHMEntr],eax         // Update Code Entry Point
 add eax,[ebp+HMD.iHMSize]         // Point to Return Point
 mov [ebp+HMD.iHMBack],eax         // Update Code Return Point

// Asserting
 xor ebx,ebx                       // Index = 0
 lea edi,[ebp+HMD.aobOMTD]         // Point expected AOB

_ChkMN04:
 mov al,[esi+ebx]
 cmp al,[edi+ebx]
 jne _ExitCMD

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN04                       // Continue if false

// Hacking
 xor ebx,ebx
 mov edi,[ebp+HMD.iHMEntr]
 lea esi,[ebp+HMD.aobHMTD]

_ChkMN05:
 mov al,[esi+ebx]
 mov [edi+ebx],al

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN05                       // Continue if false

 mov eax,1
 mov [ebp+HMD.iHMStat],eax         // Status = Hacked

_ExitCMD:
 popad
 ret

//=========================================
// Compare two strings (max size = 16) (by RC)
// Entry: ESI and EDI
// Output: Z = found
_CompareString:
 push eax
 push ecx

 xor ecx,ecx

_CmpSG00:
 mov al,[edi+ecx]

 cmp al,0                          // Finished ?
 je _ExitCSG                       // Continue if true

 cmp al,[esi+ecx]
 jne _ExitCSG                      // Jump if name does not match

 inc ecx                           // Increase Index
 cmp ecx,#16
 js _CmpSG00

 xor eax,eax

_ExitCSG:
 pop ecx
 pop eax
 ret

//*****************************************
// SCRIPTS FOR CHEATING (By RC)
//*****************************************
//=========================================
// Clicking on Empire Icon (Method00)
_MonPlayerDust:
 push ebx

 mov [pPlayer],eax
 mov ebx,[eax+08]
 mov [pCommon],ebx

 cmp dword ptr [iEnableMPD],0
 je _ExitMPD                       // Jump if feature is disabled

 cmp dword ptr [eax+40],0
 je _ExitMPD

 mov ebx,[fMinRes]
 cmp ebx,[eax+40]
 jle _ExitMPD

 mov [eax+40],ebx

_ExitMPD:
 pop ebx

 fld dword ptr [eax+34]            // Original code (rds res)
 fstp dword ptr [ebp-54]           // Original code
 jmp [Method00+HMD.iHMBack]        // Back to main code

//=========================================
// Between Turns (Only possible to load after at least one turn) (Method01)
_MonResearchProgress:
 add esp,10                        // Original code (Needed value)
 fstp dword ptr [ebp-20]           // Original code (Needed value)

 push ecx

 cmp dword ptr [iEnableMRP],0
 je _ExitMRP                       // Jump if feature is disabled

 mov ecx,[ebx+08]
 cmp ecx,[pCommon]
 jne _ExitMRP

 mov ecx,[ebp-20]                  // Get the research cost
 mov [ebx+18],ecx                  // Update current spent value

_ExitMRP:
 pop ecx

 jmp [Method01+HMD.iHMBack]        // Back to main code

//=========================================
// At the end of the movement (+GM) (Method02)
_MonMovement1:
 add esp,10                        // Original code

 push ecx

 mov [pMove1],edi
 mov ecx,[edi+20]
 mov [pUnit1],ecx

 cmp ecx,00000006
 je _MonM100

 cmp ecx,00000100
 jne _ExitMM1

 mov ecx,000000AA
 cmp ecx,[edi+04]
 je _MonM102

_MonM100:
 cmp dword ptr [iEnableMRK],0
 je _MonM101                       // Jump if feature is disabled

 mov ecx,00000055
 mov [edi+04],ecx

_MonM101:
 mov ecx,[edi+04]
 cmp ecx,00000055
 jne _ExitMM1

 cmp dword ptr [iEnableMMT],0
 je _ExitMM1                       // Jump if feature is disabled

 fst dword ptr [fGarbage]

 mov ecx,[fGarbage]
 test ecx,ecx
 js _ExitMM1

 cmp ecx,(float)1.0
 jg _ExitMM1

 xor ecx,ecx
 mov [edi+14],ecx                  // Make % spent_MP = 0
 mov [edi+18],ecx                  // Make % spent_MP = 0

 fstp st(0)
 fldz
 jmp _ExitMM1
//=
_MonM102:
 cmp dword ptr [iEnableGMD],0
 je _ExitMM1                       // Jump if feature is disabled

 mov ecx,[edi+14]
 mov [edi+18],ecx

 fstp st(0)
 fld dword ptr [edi+18]

_ExitMM1:
 pop ecx

 fstp dword ptr [edi+18]           // Original code
 jmp [Method02+HMD.iHMBack]        // Back to main code

//=========================================
// At the end of the movement (Method03)
// Mark ship HP and Recover it if enabled
_MonMovement2:
 push ecx

 mov [pUnit2],eax                  // For debugging

 mov ecx,[eax+04]
 cmp ecx,000000AA                  // Already marked as HP?
 je _MonM200                       // Jump if true

 mov ecx,[eax+20]
 cmp ecx,00000100                  // Could it be HP?
 jne _ExitMM2                      // Jump if false

 mov ecx,[eax+14]                  // Get maximum value
 test ecx,ecx
 jz _ExitMM2                       // Jump if Zero

 cmp ecx,(float)10.0               // Is it really HP?
 js _ExitMM2                       // Jump if false

 cmp ecx,[eax+18]                  // Is it greater then current value?
 js _ExitMM2                       // Jump if false (something wrong mV &lt; cV)

 cmp dword ptr [iEnableMRK],0
 je _ExitMM2                       // Jump if feature is disabled

 mov ecx,000000AA
 mov [eax+04],ecx                  // Mark it as HP

_MonM200:
 mov [pMove2],eax                  // For debugging

 cmp dword ptr [iEnableGMD],0
 je _ExitMM2                       // Jump if feature is disabled

 mov ecx,[eax+14]
 mov [eax+18],ecx

_ExitMM2:
 pop ecx

 fld dword ptr [eax+18]            // Original code (rds cHP)
 fstp dword ptr [ebp-10]           // Original code
 jmp [Method03+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method04)
_MonBaseValue:
 push ecx

 mov ecx,[edi+04]
 cmp ecx,000000AA                  // Already marked as HP?
 jne _ExitMBV                      // Jump if true

 cmp dword ptr [iEnableGMD],0
 je _ExitMBV                       // Jump if feature is disabled

 mov ecx,[edi+14]
 cmp ecx,[ebp+0C]
 js _ExitMBV

 mov [ebp+0C],ecx
 mov [edi+18],ecx

_ExitMBV:
 pop ecx

 fld dword ptr [ebp+0C]            // Original code
 fstp dword ptr [edi+14]           // Original code
 jmp [Method04+HMD.iHMBack]        // Back to main code

//=========================================
// When ending turn (Method05)
_MonEndTurn:
 push ecx

 mov ecx,[esi+08]
 cmp ecx,[pCommon]                 // Player's Dust
 jne _ExitMET                      // Jump if false

 cmp dword ptr [iEnableMPD],0
 je _ExitMET                       // Jump if feature is disabled

 mov ecx,[fMinRes]
 cmp ecx,[ebp-08]
 js _ExitMET

 mov [ebp-08],ecx

_ExitMET:
 pop ecx

 fld dword ptr [ebp-08]            // Original code
 fstp dword ptr [esi+40]           // Original code
 jmp [Method05+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method06)
_MonBattleTurn:
 push ecx

 mov [pLast],esi
 mov ecx,[esi+40]
 mov [pLast+04],ecx
 test ecx,ecx                      // Player's ?
 jnz _ExitMBT                      // Jump if false

 cmp dword ptr [iEnableGMD],0
 je _ExitMBT                       // Jump if feature is disabled

 mov ecx,[eax+74]
 mov [esi+4C],ecx
 mov [ebp-0C],ecx

_ExitMBT:
 pop ecx

 fld dword ptr [ebp-0C]            // Original code
 fstp dword ptr [esi+48]           // Original code
 jmp [Method06+HMD.iHMBack]        // Back to main code

//=========================================
 db '=====================================&gt;'
 db 'CE6.3 Script by Recifense 261113'
//=========================================
// Mono Variables
pDomain:
 dd 0
pMethodStr:
 dd 0
pMethodName:
 dd 0
iMethodIndex:
 dd 0
pClass:
 dd 0
pClassName:
 dd 0
pJitInfo:
 dd 0
pJitStart:
 dd 0
iJitSize:
 dd 0
iNumMethods:
 dd 7
 db 'Methods:'
MethodList:
Method00:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 000007f8                         // iOMSize ( 4)
 db 'BannerEmpireToo'                // aOCName (16)
 db 0
 db 'SetTooltipConte'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 00000133                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db d9,40,34,d9,5d,ac                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonPlayerDust
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method01:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 000001c7                         // iOMSize ( 4)
 db 'DepartmentOfSci'                // aOCName (16)
 db 0
 db 'UpdateResearchQ'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 0000007a                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 83,c4,10,d9,5d,e0                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonResearchProgress
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method02:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 00000070                         // iOMSize ( 4)
 db 'SimulationObjec'                // aOCName (16)
 db 0
 db 'set_Value'                      // aOMName (16)
 db 0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 00000064                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 83,c4,10,d9,5f,18                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonMovement1
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method03:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000007d                         // iOMSize ( 4)
 db 'SimulationObjec'                // aOCName (16)
 db 0
 db 'GetPropertyValu'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 00000058                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db d9,40,18,d9,5d,f0                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonMovement2
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method04:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000002f                         // iOMSize ( 4)
 db 'SimulationObjec'                // aOCName (16)
 db 0
 db 'set_BaseValue'                  // aOMName (16)
 db 0,5,6
 dd 0                                // iOMAddr ( 4)
 dd 00000018                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db d9,45,0c,d9,5f,14                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonBaseValue
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method05:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 000000d7                         // iOMSize ( 4)
 db 'DepartmentOfThe'                // aOCName (16)
 db 0
 db 'EndTurn'                        // aOMName (16)
 db 0,9,0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 0000009e                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db d9,45,f8,d9,5e,40                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonEndTurn
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method06:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000013c                         // iOMSize ( 4)
 db 'BattleSimulatio'                // aOCName (16)
 db 0
 db 'BeginTurn'                      // aOMName (16)
 db 0,1,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 000000ec                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db d9,45,f4,d9,5e,48                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonBattleTurn
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

//=========================================
 db '===============&gt;'
//=========================================
// Variables
iEnableMPD:
 dd 0
iEnableMRP:
 dd 0
iEnableMRK:
 dd 0
iEnableMMT:
 dd 0
iEnableGMD:
 dd 0
pUnit:
 dd 0
pMove:
 dd 0
pUnit1:
 dd 0
pMove1:
 dd 0
pUnit2:
 dd 0
pMove2:
 dd 0
pPlayer:
 dd 0
pCommon:
 dd MyMono
fMinRes:
 dd (float)6300.0
fGarbage:
 dd 0
pLast:
 dd 0
 dd 0

//=========================================
// Hacking Points
// None

//=========================================
 createthread(_MonThread)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
// NO HP
 mov no_disable,Recifense

//=========================================
// Mono Unregistering Symbols
unregistersymbol(MyMono)
unregistersymbol(_MonThread)
unregistersymbol(_MonoProfileJitResult)
unregistersymbol(_ProfilerCallBack)
unregistersymbol(pDomain)
unregistersymbol(pMethodStr)
unregistersymbol(pMethodName)
unregistersymbol(iMethodIndex)
unregistersymbol(pClass)
unregistersymbol(pClassName)
unregistersymbol(pJitInfo)
unregistersymbol(pJitStart)
unregistersymbol(iJitSize)
unregistersymbol(iNumMethods)
unregistersymbol(MethodList)
unregistersymbol(Method00)
unregistersymbol(Method01)
unregistersymbol(Method02)
unregistersymbol(Method03)
unregistersymbol(Method04)
unregistersymbol(Method05)
unregistersymbol(Method06)

//=========================================
// General Uregistering Symbols
unregistersymbol(iEnableMPD)
unregistersymbol(iEnableMRP)
unregistersymbol(iEnableMRK)
unregistersymbol(iEnableMMT)
unregistersymbol(iEnableGMD)
unregistersymbol(fMinRes)
unregistersymbol(pUnit)
unregistersymbol(pMove)
unregistersymbol(pUnit1)
unregistersymbol(pMove1)
unregistersymbol(pUnit2)
unregistersymbol(pMove2)
unregistersymbol(pPlayer)
unregistersymbol(pCommon)
unregistersymbol(pLast)
unregistersymbol(_MonPlayerDust)
unregistersymbol(_MonResearchProgress)
unregistersymbol(_MonMovement1)
unregistersymbol(_MonMovement2)
unregistersymbol(_MonBaseValue)
unregistersymbol(_MonEndTurn)
unregistersymbol(_MonBattleTurn)
//=========================================
dealloc(MyMono)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
3630.75
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Enable/Disable Minimum DUST =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>27</ID>
              <Description>"Minimum Dust Value =&gt;"</Description>
              <Color>0080FF</Color>
              <VariableType>Float</VariableType>
              <Address>fMinRes</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Enable/Disable Research in 1 Turn =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Enable/Disable Mark Ship in Movement =&gt; (1/0) "</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMRK</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Enable/Disable Free Movement for Marked Ships =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMT</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>===========================================
 Game Title    : Endless Space - Disharmony
 Game Version  : 1.1.39
 Game Sponsor  : Myself
 Proces Name   : EndlessSpace.exe
 Script Version: 2.0 (JIT - Approach 2)
 CE Version    : 6.3
 Release date  : 14-Dec-2013
 Author        : Recifense
 History:
 02-Jul-13: First Release
 17-Jul-13: Script was changed to work with Harmony Faction as well.
 14-Dec-13: Release for version 1.1.39 (Steam).
 Features:
 - Minimum Dust                      [1] 
 - One Turn Research                 [2]
 - Unlimited Movement Points         [3]
===========================================
[1] The current DUST value will be set to a minimum value when you open/close Empire Management Module (default = 6300);
[2] The current research will take one turn;
[3] The fleet/ships will have unlimited movement poits. But the ship has to be marked in order to work;
[4] During Battle (this depends on the Script Part 2)
[5] Mark the player's ships just before a battle, so the GM cheat can save their asses;
===========================================
[USAGE]
1) Run CE;
2) Run Game (stop at main menu);
3) Go to CE and load the game process;
4) Load the table;
5) ACTIVATE the script by clicking on the box under ACTIVE column =&gt; [X];
6) Enable the cheats you want to use by change their value to 1 under VALUE column (Or use the HOTKEYS listed below);
7) Go back to the game and play on;
[IMPORTANT]
- If you activate the script on a game on going, the cheats will not work;
- Once the script is activated, you will not be able to deactivate it. If you don't want to use it after that, just disable the cheats by changing their values to 0 (Or use the HOTKEYS listed below);
===========================================
[UNLIMITED MOVEMENT USAGE]
- Before moving your fleets ENABLE "Mark Ship in Movement". Remember to disable "Mark Ship" before ending turn; 
- You only need to do this once for each fleet, then it will remain marked.
===========================================
HOTKEYS:
CTRL+Home     = ENABLE  all cheats (except "Mark Ship")
CTRL+End      = DISABLE all cheats (except "Mark Ship")
---------------
CTRL+PageUp   = ENABLE  "Mark Ship"
CTRL+PageDown = DISABLE "Mark Ship"
===========================================
[EXPLANATION]
This is the second official try of making a table for a game that uses MONO.DLL engine feel like a any other table (no need to load to activate the scripts by parts)
===========================================
[NOTE]
Thanks go to Dark Byte for posting his findings related to the MONO engine. 
===========================================
Cheers!
</Comments>
</CheatTable>
