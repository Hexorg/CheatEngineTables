<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>126</ID>
      <Description>"[Stats Related Scripts]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>000080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>35</ID>
          <Description>"Undead"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(grabbedByExeChkAOB,83 BA A8 00 00 00 00 7C 05)
registersymbol(grabbedByExeChkAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [edx+68],0 //team
jne originalcode
//mov dword ptr [ebp+8],0 //damage taken
mov dword ptr [edx+c0],0 //hpCapDmg
jmp grabbedByExeChkAOB+9

originalcode:
cmp dword ptr [edx+000000A8],00 //grabbedByExe

exit:
jmp returnhere

///

grabbedByExeChkAOB: //04D08159:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
grabbedByExeChkAOB: //04D08159:
db 83 BA A8 00 00 00 00
//Alt: cmp dword ptr [edx+000000A8],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Inf. Stamina"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(staminaWriteAOB,D9 9E 8C 00 00 00 D9 86 8C 00 00 00)
registersymbol(staminaWriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [esi+68],0 //team
jne originalcode
fstp st(0)
fldz
fstp dword ptr [esi+c4]  //spCapDmg
jmp exit

originalcode:
fstp dword ptr [esi+0000008C]

exit:
jmp returnhere

///

staminaWriteAOB: //ProjectTower.character.CharUpdate::BurnStamina+80:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
staminaWriteAOB: //ProjectTower.character.CharUpdate::BurnStamina+80:
db D9 9E 8C 00 00 00
//Alt: fstp dword ptr [esi+0000008C]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>127</ID>
      <Description>"[Item Related Scripts]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>000080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>37</ID>
          <Description>"Inf. Item Usage"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(itemQuantityDecAOB,FF 49 14 83 79 14 00 7F 73)
registersymbol(itemQuantityDecAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 11      //CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je originalcode

cmp [ecx+14],2
jae originalcode
mov [ecx+14],2

originalcode:
dec [ecx+14]
cmp dword ptr [ecx+14],00

exit:
jmp returnhere

///

itemQuantityDecAOB: //08A2F2E3:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
itemQuantityDecAOB: //08A2F2E3:
db FF 49 14 83 79 14 00
//Alt: dec [ecx+14]
//Alt: cmp dword ptr [ecx+14],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>39</ID>
          <Description>"Inf. Arrow"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(arrowChkZeroOnAimAOB,83 78 14 00 7F 07 33 C0 ** ** ** ** ** 8B ** ** 8B)
registersymbol(arrowChkZeroOnAimAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+14],3
jae originalcode
mov dword ptr [eax+14],3

originalcode:
cmp dword ptr [eax+14],00
jg arrowChkZeroOnAimAOB+d //ProjectTower.character.CharEquipment::CanAttack+292

exit:
jmp returnhere

///

arrowChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanAttack+285:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
arrowChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanAttack+285:
db 83 78 14 00 7F 07
//Alt: cmp dword ptr [eax+14],00
//Alt: jg arrowChkZeroOnAimAOB+d //ProjectTower.character.CharEquipment::CanAttack+292
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"Inf. Bolt"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(boltChkZeroOnAimAOB,83 78 14 00 7F 07 33 C0 ** ** ** ** ** 8B ** ** 6A)
registersymbol(boltChkZeroOnAimAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+14],3
jae originalcode1
mov dword ptr [eax+14],3

originalcode1:
cmp dword ptr [eax+14],00
jg boltChkZeroOnAimAOB+d //ProjectTower.character.CharEquipment::CanOffhandAttack+280

exit1:
jmp returnhere1

///

boltChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanOffhandAttack+273:
jmp newmem1
nop
returnhere1:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
boltChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanOffhandAttack+273:
db 83 78 14 00 7F 07
//Alt: cmp dword ptr [eax+14],00
//Alt: jg boltChkZeroOnAimAOB+d //ProjectTower.character.CharEquipment::CanOffhandAttack+280
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"Inf. Ammunition"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(bullet1ChkZeroOnAimAOB,83 78 14 00 7F 04 33 C0 ** ** 83)
registersymbol(bullet1ChkZeroOnAimAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+14],3
jae originalcode
mov dword ptr [eax+14],3

originalcode:
cmp dword ptr [eax+14],00
jg bullet1ChkZeroOnAimAOB+a //ProjectTower.character.CharEquipment::CanOffhandAttack+2FD

exit:
jmp returnhere

bullet1ChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanOffhandAttack+2F3:
jmp newmem
nop
returnhere:

///*****************************************///

aobscan(bullet2ChkZeroOnAimAOB,83 78 14 00 7F 04 33 C0 ** ** 8B)
registersymbol(bullet2ChkZeroOnAimAOB)

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+14],3
jae originalcode2
mov dword ptr [eax+14],3

originalcode2:
cmp dword ptr [eax+14],00
jg bullet2ChkZeroOnAimAOB+a //05C2F57D

exit2:
jmp returnhere2

bullet2ChkZeroOnAimAOB: //05C2F573:
jmp newmem2
nop
returnhere2:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
bullet1ChkZeroOnAimAOB: //ProjectTower.character.CharEquipment::CanOffhandAttack+2F3:
db 83 78 14 00 7F 04
//Alt: cmp dword ptr [eax+14],00
//Alt: jg bullet1ChkZeroOnAimAOB+a //ProjectTower.character.CharEquipment::CanOffhandAttack+2FD

///*****************************************///

dealloc(newmem2)
bullet2ChkZeroOnAimAOB: //05C2F573:
db 83 78 14 00 7F 04
//Alt: cmp dword ptr [eax+14],00
//Alt: jg bullet2ChkZeroOnAimAOB+a //05C2F57D
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Inf. Torch"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(torchDurabilityWriteAOB,D9 5A 18 D9 42 18)
registersymbol(torchDurabilityWriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp st(0)

originalcode:
//fstp dword ptr [edx+18]
fld dword ptr [edx+18]

exit:
jmp returnhere

///

torchDurabilityWriteAOB: //ProjectTower.character.CharUpdate::BurnTorch+DD:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
torchDurabilityWriteAOB: //ProjectTower.character.CharUpdate::BurnTorch+DD:
db D9 5A 18 D9 42 18
//Alt: fstp dword ptr [edx+18]
//Alt: fld dword ptr [edx+18]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>41</ID>
          <Description>"Highlighted Item"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(itemInfoReadA0B,F3 0F 7E 06 66 0F D6 07 68 00 00 80 40 68 00 00 40 41)
registersymbol(itemInfoReadA0B)

label(pHighlightedItemInfoBase)
registersymbol(pHighlightedItemInfoBase)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pHighlightedItemInfoBase],ecx

originalcode:
movq xmm0,[esi]
movq [edi],xmm0

exit:
jmp returnhere

///
pHighlightedItemInfoBase:
///

itemInfoReadA0B: //ProjectTower.player.InvPicker::DrawItemInfo+5DF:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
itemInfoReadA0B: //ProjectTower.player.InvPicker::DrawItemInfo+5DF:
db F3 0F 7E 06 66 0F D6 07
//Alt: movq xmm0,[esi]
//Alt: movq [edi],xmm0

unregistersymbol(pHighlightedItemInfoBase)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>42</ID>
              <Description>"[player.InvLoot]"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>000080</Color>
              <VariableType>Array of byte</VariableType>
              <ByteLength>0</ByteLength>
              <Address>pHighlightedItemInfoBase</Address>
              <Offsets>
                <Offset>0</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>43</ID>
                  <Description>"name (reference)"</Description>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>256</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+4</Address>
                  <Offsets>
                    <Offset>8</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>52</ID>
                  <Description>"title (reference)"</Description>
                  <Color>808080</Color>
                  <VariableType>String</VariableType>
                  <Length>256</Length>
                  <Unicode>1</Unicode>
                  <ZeroTerminate>1</ZeroTerminate>
                  <Address>+8</Address>
                  <Offsets>
                    <Offset>8</Offset>
                    <Offset>4</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>44</ID>
                  <Description>"uiid"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">=== Weapons ==================
0000000000000000:Varangian Spatha
0000000100000000:Woodsman's Axe
0000000200000000:Arming Sword
0000000300000000:Infantry Pollaxe
0000000400000000:Self Bow
0000000500000000:Haymaker
0000000600000000:Soldier's Spear
0000000700000000:Midshipman's Dirk
0000000800000000:Cutpurse Shiv
0000000900000000:Morning Star
0000000a00000000:Flanged Mace
0000000b00000000:Scrimashaw Cane
0000000c00000000:Bullwhip
0000000d00000000:0000000d00000000
0000000e00000000:Kureimoa
0000000f00000000:Battle Axe
0000001000000000:Warhammer
0000001100000000:Outlaw Greataxe
0000001200000000:0000001200000000
0000001300000000:0000001300000000
0000001400000000:Raider Axe
0000001500000000:Wraithclaw
0000001600000000:Trident
0000001700000000:Branding Iron
0000001800000000:Pessklaw
0000001900000000:Stardust Spire
0000001a00000000:Red Guillotine
0000001b00000000:Vilehawk Bow
0000001c00000000:Tachi
0000001d00000000:Corsair's Backsword
0000001e00000000:Monstrous Mace
0000001f00000000:Barbarian's Cudgel
0000002000000000:Virulent Scimitar
0000002100000000:Seawolf Cutlass
0000002200000000:Chitin Obelisk
0000002300000000:Breach Pike
0000002400000000:Razorback
0000002500000000:Batsuichi Tsuka
0000002600000000:Rowan Crosier
0000002700000000:Channeler's Rod
0000002800000000:Aster Monolith
0000002900000000:Obsidian Pillar
0000002a00000000:Venom Arbelos
0000002b00000000:Eviscerator
0000002c00000000:Pitchfork
0000002d00000000:War Scythe
0000002e00000000:Bloodwood Bow
0000002f00000000:Block Widow
0000003000000000:Headtaker
0000003100000000:Kaltic Razor
0000003200000000:Harmen Mace
0000003300000000:Platoon Crossbow
0000003400000000:Guardsman's Halberd
0000003500000000:Bloodwood Crossbow
0000003600000000:Kraekan Axe
0000003700000000:Torch
0000003800000000:Saltwood Branch
0000003900000000:Antler Baton
0000003a00000000:Necromancer's Virge
0000003b00000000:Opal Tusk
0000003c00000000:Shikeimaru
0000003d00000000:Flintlock Pistol
0000003e00000000:Searing Manacle
0000003f00000000:Scorpion Tail
0000004000000000:Dragoon Espingole
0000004100000000:Naginata
0000004200000000:Purifier
0000004300000000:Purgatory Sceptre
0000004400000000:Sacrificial Garrote
0000004500000000:Jaws of Death
0000004600000000:Flint &amp; Steel
0000004700000000:Tainted Ranseur
0000004800000000:Mountain Breaker
0000004900000000:Cephalopounder
0000004a00000000:The Coveted
0000004b00000000:Iron Butterfly
0000004c00000000:Aegis Greatbow
0000004d00000000:Red Eclipse
0000004e00000000:Rusted Greatladle
0000004f00000000:Tetruncheon
0000005000000000:Scharfrichter
0000005100000000:Saltreaver
0000005200000000:Axe of Splendor
0000005300000000:Stone Cleaver
0000005400000000:Leviathan
0000005500000000:Overlord's Bident
0000005600000000:Adder Fang
0000005700000000:Hedsman's Voulge
0000005800000000:Umbral Partisan
0000005900000000:Gravedigger
0000005a00000000:Kumo Sasumata
0000005b00000000:Bonecrusher
0000005c00000000:Lowlander's Greatknife
0000005d00000000:Steel Centipede
0000005e00000000:Northern Cross
0000005f00000000:Predator Lockbow
0000006000000000:Adrasteia
0000006100000000:Hellfire Arbalest
0000006200000000:Castaway's Greatadze
0000006300000000:Trinity Greatsword
0000006400000000:Trinity Sceptre
0000006500000000:Saira's Staff
0000006600000000:Iron Pot
0000006700000000:Earthsplitter
0000006800000000:Blade of Envy
0000006900000000:Oar
0000006a00000000:0000006a00000000
0000006b00000000:0000006b00000000
0000006c00000000:0000006c00000000
0000006d00000000:0000006d00000000
0000006e00000000:Cocoon Battledore
0000006f00000000:Recurve Bow
0000007000000000:Gravewalker Greatbow
0000007100000000:Trinity Bardiche
0000007200000000:Construct Coil
0000007300000000:Lump Hammer
0000007400000000:Phoenix Tail 
=== Shields ==================
0000000000000001:Teuthis Shield
0000000100000001:Wooden Targe
0000000200000001:Oppressor's Greatshield
0000000300000001:Type 46 Tower Shield
0000000400000001:Ashen Effigy
0000000500000001:Buckler
0000000600000001:Heater Shield
0000000700000001:Escutcheon
0000000800000001:Palatine Shield
0000000900000001:Cleric's Kite Shield
0000000a00000001:Kraeken Greateshield
0000000b00000001:Iron Rampart
0000000c00000001:Gangplank Mantlet
0000000d00000001:Askarian Scutum
0000000e00000001:Sunset Kite Shield
0000000f00000001:Raider's Targe
0000001000000001:Phoenix Rondache
0000001100000001:Pendragon Targe
0000001200000001:Pruina Scutum
0000001300000001:Boeotian Greatshield
0000001400000001:Vinemesh Peltarion
0000001500000001:Silver Shield
0000001600000001:Tainted Greatshield
0000001700000001:Carapace Pavise
0000001800000001:Bloodbrow Scutum
0000001900000001:Flayer's Rack
0000001a00000001:0000001a00000001
0000001b00000001:Mirror Shield
0000001c00000001:Umbral Aegis 
=== Armours ==================
0000000100000002:Beggar's Rags
0000000200000002:Beggar's Gloves
0000000300000002:Beggar's Breeches
0000000400000002:Onyx Burgeonet
0000000500000002:Onyx Cuirass
0000000600000002:Onyx Sabatons
0000000700000002:Onyx Manifers
0000000800000002:Crimson Hood
0000000900000002:Crimson Tabard
0000000a00000002:Crimson Gloves
0000000b00000002:Crimson Culottes
0000000c00000002:Cavalier's Armet
0000000d00000002:Cavalier's Cuirass
0000000e00000002:Cavalier's Manifers
0000000f00000002:Cavalier's Sabatons
0000001000000002:Merchant's Dolman
0000001100000002:Merchant's Gloves
0000001200000002:Merchant's Fistan
0000001300000002:Merchant's Fez
0000001400000002:Steel Armet
0000001500000002:Steel Cuirass
0000001600000002:Steel Greaves
0000001700000002:Steel Manifers
0000001800000002:Doppelsoldner Barbut
0000001900000002:Doppelsoldner Cuirass
0000001a00000002:Doppelsoldner Cuisses
0000001b00000002:Doppelsoldner Gauntlets
0000001c00000002:Priest's Zucchetto
0000001d00000002:Priest's Dalmatic
0000001e00000002:Scorpion Mogfer
0000001f00000002:Blacksmith's Apron
0000002000000002:Blacksmith's Gloves
0000002100000002:Blacksmith's Boots
0000002200000002:Rogue's Mask
0000002300000002:Rogue's Jacket
0000002400000002:Rogue's Highboots
0000002500000002:Rogue's Gloves
0000002600000002:Leather Sallet
0000002700000002:Leather Cuirass
0000002800000002:Leather Cuisses
0000002900000002:Leather Gauntlets
0000002a00000002:Royalist's Armet
0000002b00000002:White Plate Armor
0000002c00000002:White Greaves
0000002d00000002:White Gauntlets
0000002e00000002:Hunter's Cloak
0000002f00000002:Hunter's Boots
0000003000000002:Hunter's Gloves
0000003100000002:Hunter's Tricorne
0000003200000002:Palantine Chainmail
0000003300000002:Palantine Chausses
0000003400000002:Palantine Coif
0000003500000002:Palantine Gauntlets
0000003600000002:Ragged Hanten
0000003700000002:Ragged Hakama
0000003800000002:Frayed Sugegasa
0000003900000002:Silver Udewa
0000003a00000002:Kraekan Helm
0000003b00000002:Kraekan Armor
0000003c00000002:Kraekan Greaves
0000003d00000002:Kraekan Gloves
0000003e00000002:Cotton Tunic
0000003f00000002:Cotton Trousers
0000004000000002:Acolyte's Kontusz
0000004100000002:Acolyte's Boots
0000004200000002:Acolyte's Gloves
0000004300000002:Chain Hauberk
0000004400000002:Chain Chausses
0000004500000002:Chain Coif
0000004600000002:Chain Gauntlets
0000004700000002:Raider's Harness
0000004800000002:Raider's Portyanki
0000004900000002:Raider's Ushanka
0000004a00000002:Raptor Brigandine
0000004b00000002:Raptor Visor
0000004c00000002:Raptor Sabatons
0000004d00000002:Clay Mask
0000004e00000002:Officer's Frock Coat
0000004f00000002:Officer's Jackboots
0000005000000002:Cuirass
0000005100000002:Lamprey Barbut
0000005200000002:Lamprey Greaves
0000005300000002:Lamprey Gauntlets
0000005400000002:Aristocrat's Corset
0000005500000002:Aristocrat's Crinolette
0000005600000002:Sorcerer's Kurta
0000005700000002:Sorcerer's Lungi
0000005800000002:Scorpion Krug
0000005900000002:Scorpion Dizcek
0000005a00000002:Scorpion Migfer
0000005b00000002:Scorpion Kolluk
0000005c00000002:Jester's Motley
0000005d00000002:Jester's Slippers
0000005e00000002:Jester's Crown
0000005f00000002:Plate Mail
0000006000000002:Plate Greaves
0000006100000002:Plate Gauntlets
0000006200000002:Titan Cuirass
0000006300000002:Titan Armet
0000006400000002:Titan Greaves
0000006500000002:Titan Gauntlets
0000006600000002:Patched Hood
0000006700000002:Patched Rags
0000006800000002:Patched Gloves
0000006900000002:Patched Skirt
0000006a00000002:Corsair's Vest
0000006b00000002:Corsair's Bandana
0000006c00000002:Corsair's Boots
0000006d00000002:Guide's Tunic
0000006e00000002:Guide's Cap
0000006f00000002:Guide's Trousers
0000007000000002:Guide's Gloves
0000007100000002:Alchemist's Mask
0000007200000002:Alchemist's Coverall
0000007300000002:Alchemist's Apron
0000007400000002:Stella Tabard
0000007500000002:Stella Soprana
0000007600000002:Stella Cincture
0000007700000002:Malva Pigaciae
0000007800000002:Malva Koukoulion
0000007900000002:Stella Triregno
0000007a00000002:Stella Guanti
0000007b00000002:Grim Headdress
0000007c00000002:Grim Justacorps
0000007d00000002:Grim Bracelets
0000007e00000002:Grim Tassets
0000007f00000002:Boatman's Sugegasa
0000008000000002:Boatman's Mino
0000008100000002:Boatman's Waraji
0000008200000002:Assassin's Cowl
0000008300000002:Assassin's Tunic
0000008400000002:Assassin's Leggings
0000008500000002:Assassin's Gauntlet
0000008600000002:Evanescent Cassock
0000008700000002:Evanescent Cowl
0000008800000002:Evanescent Cincture
0000008900000002:Tainted Cuirass
0000008a00000002:Tainted Armet
0000008b00000002:Tainted Greaves
0000008c00000002:Tainted Gauntlets
0000008d00000002:Malva Cuffs
0000008e00000002:Russet Mask
0000008f00000002:Top Hat
0000009000000002:Black Tailcoat
0000009100000002:Black Slacks
0000009200000002:Black Silk Gloves
0000009300000002:Sohei Kesa
0000009400000002:Sohei Tabi
0000009500000002:Juzu-Udewa
0000009600000002:Russet Doublet
0000009700000002:Russet Leggings
0000009800000002:Russet Sleeves
0000009900000002:Jute Tunic
0000009a00000002:Jute Breeches
0000009b00000002:Mask of Splendor
0000009c00000002:Amethyst Bodice
0000009d00000002:Amethyst Skirt
0000009e00000002:Bloodbrow Cuirass
0000009f00000002:Bloodbrow Barbute
000000a000000002:Bloodbrow Greaves
000000a100000002:Aristocrat's Veil
000000a200000002:Amethyst Hood
000000a300000002:Yokai Mask
000000a400000002:Pigeon Mask
000000a500000002:Breatplate of The Wolf
000000a600000002:Boots of The Wolf
000000a700000002:Predator Bascinet
000000a800000002:Chef's Apron
000000a900000002:Chef's Toque
000000aa00000002:Chef's Trousers
000000ab00000002:Torturer's Veil
000000ac00000002:Sadist's Veil
000000ad00000002:Warden's Branks
000000ae00000002:Warden's Smock
000000af00000002:Warden's Chaps
000000b000000002:Warden's Gloves
000000b100000002:Predator Cuirass
000000b200000002:Predator Sabatons
000000b300000002:Predator Gauntlets
000000b400000002:Split Cuirass
000000b500000002:Split Mask
000000b600000002:Split Sabatons
000000b700000002:Split Manifers
000000b800000002:Golem's Torso
000000b900000002:Golem's Legs
000000ba00000002:Golem's Arms
000000bb00000002:Golem's Head
000000bc00000002:Mildewed Chemise
000000bd00000002:Mildewed Caraco
000000be00000002:Mildewed Polonaise
000000bf00000002:Tranished Coronet
000000c000000002:Ghastly Gourd
000000c100000002:Umbral Visor
000000c200000002:Umbral Shroud
000000c300000002:Umbral Rhinegraves
000000c400000002:Umbral Gauntlets
000000c500000002:Demon Kabuto
000000c600000002:Demon Domaru
000000c700000002:Demon Haidate
000000c800000002:Demon Turban
000000c900000002:Demon Candelabra
000000ca00000002:Demon Greaves
000000cb00000002:Demon Overlord's Gauntlets
000000cc00000002:Demon Kote
000000cd00000002:Resplendent Cuirass
000000ce00000002:Resplendent Armet
000000cf00000002:Resplendent Cuisses
000000d000000002:Resplendent Gauntlets
000000d100000002:000000d100000002
000000d200000002:Smallclothes
000000d300000002:Fleshbound Basque
000000d400000002:Fleshbound Frock
000000d500000002:Steeple Hat
000000d600000002:Alkymancer's Veil
000000d700000002:Alkymancer's Simar
000000d800000002:Alkymancer's Gown
=== Rings / Charms ==================
0000000000000003:Defender's Ring
0000000100000003:Goldstone Ring
0000000200000003:Impen Crest Ring
0000000300000003:Vile Vines Ring
0000000400000003:Gurrrrd Ring
0000000500000003:Shroud Ring
0000000600000003:Faithful Ring
0000000700000003:Kismet Stone
0000000800000003:Grasping Ring
0000000900000003:Symbol of Affluence
0000000a00000003:Mending Band
0000000b00000003:Conduit of Mind
0000000c00000003:Mossy Ring
0000000d00000003:Stone Ring
0000000e00000003:Plated Band
0000000f00000003:Trickster's Band
0000001000000003:Brightcoral Ring
0000001100000003:Fused Metal Ring
0000001200000003:Wrapped Link
0000001300000003:Bloodflower Ring
0000001400000003:Bandaged Ring
0000001500000003:Charged Ring
0000001600000003:Band of The Humble
0000001700000003:Relentless Ring
0000001800000003:Ring of Brilliance
0000001900000003:Hurrrd Ring
0000001a00000003:Bloodflower  Charm
0000001b00000003:Stone Charm
0000001c00000003:Mossy Charm
0000001d00000003:Pale Charm
0000001e00000003:Impen's Charm
0000001f00000003:Frozen Charm
0000002000000003:Vile Charm
0000002100000003:Goldstone Charm
0000002200000003:Templar's Charm
0000002300000003:Shroud Charm
0000002400000003:Black Charm
0000002500000003:Voracious Charm
0000002600000003:Saper Charm
0000002700000003:Burning Sky Ring
0000002800000003:Ring of Meditation
0000002900000003:Vertigo Brand
0000002a00000003:Dart Brand
0000002b00000003:Shadowflip Brand
0000002c00000003:Lift Rune
0000002d00000003:Heartspent Ring
0000002e00000003:Fluke's Ward
0000002f00000003:Sparkling Ring
0000003000000003:Redshift Brand
0000003100000003:Hardlight Brand
0000003200000003:Dancing Ring
0000003300000003:Saltseeker's Ring
0000003400000003:Twinmetal Ring
0000003500000003:Bloodluster's Ring
0000003600000003:Storm Ring
0000003700000003:Link of Fire And Sky
=== Consumables ==================
0000000000000004:Red Flask
0000000100000004:Metal Icon
0000000200000004:Earthen Vessel
0000000300000004:Candelabra of The Three
0000000400000004:Stone Acorn
0000000500000004:Skull Trophy
0000000600000004:Golden Face
0000000700000004:Wooden Bottle
0000000800000004:Living Tome
0000000900000004:Tree of Bones
0000000a00000004:Arrow
0000000b00000004:Steel Arrow
0000000c00000004:Hearty Roll
0000000d00000004:Water of Blessing
0000000e00000004:Pouch of Salt
0000000f00000004:Bundle of Salt
0000001000000004:Bag of Salt
0000001100000004:Sack of Salt
0000001200000004:Satchel of Salt
0000001300000004:Pack of Salt
0000001400000004:Case of Salt
0000001500000004:Box of Salt
0000001600000004:Crate of Salt
0000001700000004:Chest of Salt
0000001800000004:Flame Arro
0000001900000004:Blue Crystal
0000001a00000004:Flaks of Fire
0000001b00000004:Cloth of Blessing
0000001c00000004:Spiced Mead
0000001d00000004:Jurny Bottle
0000001e00000004:Green Jurney Bottle
0000001f00000004:Pitchfire
0000002000000004:Shockstone
0000002100000004:Pessmud
0000002200000004:Frostgel
0000002300000004:Blessed Page
0000002400000004:Stained Page
0000002500000004:Imperial Pitchfire
0000002600000004:Metal Shockstone
0000002700000004:Mossy Pessmud
0000002800000004:Sky Forstgel
0000002900000004:0000002900000004
0000002a00000004:0000002a00000004
0000002b00000004:0000002b00000004
0000002c00000004:Birian Firepot
0000002d00000004:Grenado
0000002e00000004:Throwing Dagger
0000002f00000004:Forestfang
0000003000000004:Dragon's Tooth
0000003100000004:Lightvessel
0000003200000004:Red Shard
0000003300000004:Red Glass
0000003400000004:Blue Glass
0000003500000004:Bell of Return
0000003600000004:Bolt
0000003700000004:Flamebolt
0000003800000004:Poision Arrow
0000003900000004:Poison Bolt
0000003a00000004:Phail of Undersight
0000003b00000004:Torch
0000003c00000004:Flintlock Shot
0000003d00000004:Tainted Shot
0000003e00000004:Glowing Shot
0000003f00000004:Wraithfang
0000004000000004:Imperial Shockstone
0000004100000004:Orange Phial
0000004200000004:Sky Shard
0000004300000004:Bottled Sky
0000004400000004:Liylred Wine
0000004500000004:Iris Wine
0000004600000004:Calling Horn
0000004700000004:Warhorn
0000004800000004:Expnged Heart
0000004900000004:Sky Crystal
0000004a00000004:Goldenwine
0000004b00000004:Black Salt
0000004c00000004:Blood Vial
0000004d00000004:Mountain Warhorn
0000004e00000004:Egg of Wrath
0000004f00000004:Clarity
0000005000000004:Flask of Defilement
0000005100000004:Cleansing Cloth
0000005200000004:Sellsword's Bell
0000005300000004:Antidote
0000005400000004:Crystal Sphere
0000005500000004:Potato
=== Magic ==================
0000000100000005:Lightning Arc
0000000200000005:Flashfire
0000000300000005:Fireball
0000000400000005:Lightningball
0000000500000005:Wildfire
0000000600000005:Lightning Storm
0000000700000005:Rock Shield
0000000800000005:Mend
0000000900000005:Spirited Mend
0000000a00000005:Rejuvenate
0000000b00000005:Dark Coil
0000000c00000005:Dark Reach
0000000d00000005:Blessed Weapon
0000000e00000005:Divine Blessed Weapon
0000000f00000005:Light
0000001000000005:Ray of Searing
0000001100000005:Flame Orbiters
0000001200000005:Lightning Pod
0000001300000005:Static Geist
0000001400000005:Flame Gaurdian
0000001500000005:Venomous Blade
0000001600000005:Arcane Weapon
0000001700000005:Undersight
0000001800000005:Lightning Barrage
0000001900000005:Flame Barrage
0000001a00000005:Dragon Fire
0000001b00000005:Sprites
0000001c00000005:Sacred Linens
0000001d00000005:Divine Will
0000001e00000005:Divine Armor
0000001f00000005:Ethereal Intervention
0000002000000005:Cleanse
0000002100000005:Flamestar
0000002200000005:Poison Gas
0000002300000005:Dark Swarm
0000002400000005:Dark Arrows
0000002500000005:Revive
0000002600000005:Guardian Blade 
=== Keys ==================
0000000000000006:Fortress Key
0000000100000006:Bronze Key
0000000200000006:Sanctuary Key
0000000300000006:Mossy Key
0000000400000006:Jagged Key
0000000500000006:Spiked Key
0000000600000006:Cellar Key
0000000700000006:Bug of Earth
0000000800000006:Bloody Writ
0000000900000006:Bone Key
0000000a00000006:Green Key
=== Crafting Items ==================
0000000000000007:Frozen Doll
0000000100000007:Frozen Locket
0000000200000007:Frozen Reliquary
0000000300000007:Frozen Tome
0000000400000007:Charred Doll
0000000500000007:Charred Locket
0000000600000007:Charred Reliquary
0000000700000007:Charred Tome
0000000800000007:A Soldier's Poem
0000000900000007:A Lord's Orders
0000000a00000007:A King's Orders
0000000b00000007:Black Flame
0000000c00000007:Drowned Locket
0000000d00000007:Lock of Hair
0000000e00000007:Silver Leaf
0000000f00000007:Amber Idol
0000001000000007:Diamond Cluster
0000001100000007:Shimmering Pearl
0000001200000007:Black Blaze
0000001300000007:Black Spark
0000001400000007:Black Nova
0000001500000007:Drowned Idol
0000001600000007:Drowned Censer
0000001700000007:Drowned Tome
0000001800000007:Molten Smithset
0000001900000007:Thunder Smithset
0000001a00000007:Vile Smithset
0000001b00000007:Frozen Smithset
0000001c00000007:Divine Smithset
0000001d00000007:Tainted Smithset
0000001e00000007:Stone Merchant
0000001f00000007:Stone Cleric
0000002000000007:Stone Mage
0000002100000007:Stone Blacksmith
0000002200000007:Endless Fang
0000002300000007:Hateful Jawbone
0000002400000007:Enduring Skull
0000002500000007:Twisted Heart
0000002600000007:Black Pearl
0000002700000007:Drowned Soldier's Ear
0000002800000007:Drowned Berzerker's Ear
0000002900000007:Kraekan Cyclops' Horn
0000002a00000007:Drowned Archer's Ear
0000002b00000007:The Sodden Knight's Ashes
0000002c00000007:Feral Beast Tooth
0000002d00000007:Bronze Night Ashes
0000002e00000007:Blade Wraith Rib
0000002f00000007:Skullbat Wing
0000003000000007:The Queen of Smile's Ear
0000003100000007:The Mad Alchemist's Ear
0000003200000007:Kraekan Wrym's Horn
0000003300000007:The Tree of Men's Ashes
0000003400000007:Disemboweled Husk's Doll
0000003500000007:That Stench Most Foul's Tooth
0000003600000007:Ronin Cran's Ashes
0000003700000007:The Witch of The Lake's Ear
0000003800000007:Drowned Raider's Ear
0000003900000007:Pale Witch's Ear
0000003a00000007:Bloated Monstrosity's Ear
0000003b00000007:Vilehawk's Ear
0000003c00000007:Angsty Bones' Rib
0000003d00000007:Amror Gaurdian's Ashes
0000003e00000007:Poison Cytoplasm Gel
0000003f00000007:Armor Mite Chitin
0000004000000007:Court Sourcer's Ear
0000004100000007:Clay Phantom's Ashes
0000004200000007:Torturer's Ear
0000004300000007:Ember Skull's Ashes
0000004400000007:Dropspider's Tusk
0000004500000007:Drowned Peasant's Ear
0000004600000007:Bedspider's Tusk
0000004700000007:Gaoler's Ear
0000004800000007:Caged Man's Ear
0000004900000007:Retchfeeder's Maw
0000004a00000007:Lepris's Ear
0000004b00000007:Hunting Bones' Rib
0000004c00000007:Rotten Walker's Ear
0000004d00000007:Drowned Bandit's Ear
0000004e00000007:Primitive Bones' Ear
0000004f00000007:Vile Guard's Ear
0000005000000007:Whisperman's Ashes
0000005100000007:The Third Lamb's Beak
0000005200000007:Bronze Axe Knight's Ashes
0000005300000007:Stone Alchemist
0000005400000007:Stone Guide
0000005500000007:Stone Leader
0000005600000007:0000005600000007
0000005700000007:0000005700000007
0000005800000007:0000005800000007
0000005900000007:0000005900000007
0000005a00000007:Arrox'A Ear
0000005b00000007:Vacant Blade's Ashes
0000005c00000007:Vexing Brat's Ear
0000005d00000007:Stone Sellword
0000005e00000007:Spear Imp's Horn
0000005f00000007:Split Swordsman's Ear
0000006000000007:Sanctuary Guard's Ear
0000006100000007:The Untouched Inquisitor's Ashes
0000006200000007:The Architect's Ear
0000006300000007:The Unskinned's Liver
0000006400000007:Dread Horseman's Ashes
0000006500000007:Horent Steel's Ashes
0000006600000007:Cave Keeper's Ear
0000006700000007:Hanged Man's Rope
0000006800000007:Bola Eye Nerves
0000006900000007:Heatseeker's Nerves
0000006a00000007:Thing of Arm's Ear
0000006b00000007:The Coveted's Ashes
0000006c00000007:Red Lord's Ear
0000006d00000007:Alkymancery Knight's Ashes
0000006e00000007:Horeshead's Ear
0000006f00000007:Drowned Porcelain's Ashes
0000007000000007:Fly Spider's Tusk
0000007100000007:Wrathful Dead's Bindings
0000007200000007:Whisper Lady's Ashes
0000007300000007:Skourzh's Horn
0000007400000007:The Nameless God's Ashes
0000007500000007:Carsejaw The Cruel's Ashes
0000007600000007:Gravewalker's Ashes
0000007700000007:Crypt Keeper's Ashes
0000007800000007:Cave Keeper's Ear
0000007900000007:The Forgotten Judge's Ear
0000007a00000007:The Forgotten Knight's Ear
0000007b00000007:Rotten Raider's Ear
0000007c00000007:Satless Asjes
0000007d00000007:Grey Pearl
0000007e00000007:Murdiella Mal's Ashes
</DropDownList>
                  <ShowAsHex>1</ShowAsHex>
                  <Color>008000</Color>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"category"</Description>
                  <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Weapon
1:Shield
2:Armor
3:Ring
4:Consumable
5:Spells
6:Key
7:Crafting Items 
</DropDownList>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>45</ID>
                  <Description>"catalogIdx"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+10</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>46</ID>
                  <Description>"count"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+14</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>47</ID>
                  <Description>"durability"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Float</VariableType>
                  <Address>+18</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>48</ID>
                  <Description>"upgrade"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+1c</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>49</ID>
                  <Description>"elemental"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+20</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>50</ID>
                  <Description>"sanctuaryConsumableCreed"</Description>
                  <Color>0000FF</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>+24</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>51</ID>
                  <Description>"equipped"</Description>
                  <Color>0000FF</Color>
                  <VariableType>Byte</VariableType>
                  <Address>+28</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>129</ID>
      <Description>"[Battle/Movement Related Scripts]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>000080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>102</ID>
          <Description>"Fast Attack"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(fastAttackFlagChk1AOB,80 78 45 00 75 0C)
registersymbol(fastAttackFlagChk1AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[eax+4]          //get character
cmp dword ptr [eax+68],0 //team
mov eax,[eax+4]          //get anim
jne originalcode
mov eax,[eax+8]          //get animName
/*
//one-hand sword
cmp dword ptr [eax+8],00740061 //at(tack)    //land
je @f
cmp dword ptr [eax+8],00740073 //st(rong)
je @f
cmp dword ptr [eax+8],00610066 //fa(ttack)   //fly
je @f
cmp dword ptr [eax+8],00730066 //fs(trong)
je @f
//two-hand sword
cmp dword ptr [eax+8],006c0064 //dl(attack)  //land
je @f
cmp dword ptr [eax+8],006c0064 //dl(strong)
je @f
cmp dword ptr [eax+8],00660064 //df(aatk)    //fly
je @f
cmp dword ptr [eax+8],00660064 //df(astrong)
je @f
//two-hand sword (back-hand)
cmp dword ptr [eax+8],00610064 //da(ttack)   //land
je @f
cmp dword ptr [eax+8],00730064 //ds(trong)
je @f
cmp dword ptr [eax+8],00660064 //df(atk)    //fly
je @f
cmp dword ptr [eax+8],00660064 //df(strong)
je @f
*/
//projectile
{
cmp word ptr [eax+8],0062 //b(attck)
je originalcode
cmp dword ptr [eax+8],00720063 //cr(ossbow)
je originalcode
cmp dword ptr [eax+8],006c0066 //fl(intlock)
je originalcode
}
//melee
cmp dword ptr [eax+8],00740061 //at(tack)
je @f
cmp dword ptr [eax+8],00740073 //st(rong)
je @f
cmp dword ptr [eax+a],00740061 //(*)at(tack)
je @f
cmp dword ptr [eax+a],00740073 //(*)st(rong)
je @f
cmp dword ptr [eax+c],00740061 //(**)at(tack)
je @f
cmp dword ptr [eax+c],00740073 //(**)st(rong)
je @f
cmp dword ptr [eax+e],00740061 //(***)at(tack)
je @f
cmp dword ptr [eax+e],00740073 //(***)st(rong)
je @f
cmp dword ptr [eax+10],00740061 //(****)at(tack)
je @f
cmp dword ptr [eax+10],00740073 //(****)st(rong)
je @f
//melee whip
cmp dword ptr [eax+8],00680077 //wh(ip)
je @f
cmp dword ptr [eax+a],00680077 //wh(ip)
je @f
cmp dword ptr [eax+c],00680077 //wh(ip)
je @f
cmp dword ptr [eax+e],00680077 //wh(ip)
je @f
cmp dword ptr [eax+10],00680077 //wh(ip)
je @f
jmp originalcode

@@:
pop eax
jmp fastAttackFlagChk1AOB+12 //ProjectTower.character.CharAnim::Update+B82




originalcode:
pop eax
cmp byte ptr [eax+45],00
jne fastAttackFlagChk1AOB+12 //ProjectTower.character.CharAnim::Update+B82

exit:
jmp returnhere

fastAttackFlagChk1AOB: //ProjectTower.character.CharAnim::Update+B70:
jmp newmem
nop
returnhere:

///******************************************************///

aobscan(fastAttackFlagChk2AOB,80 78 45 00 74 0C)
registersymbol(fastAttackFlagChk2AOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
push eax
mov eax,[eax+4]          //get character
cmp dword ptr [eax+68],0 //team
mov eax,[eax+4]          //get anim
jne originalcode1
mov eax,[eax+8]          //get animName
cmp dword ptr [eax+8],00740061 //at(tack)
je @f
cmp dword ptr [eax+8],00740073 //st(rong)
je @f
cmp dword ptr [eax+8],00730066 //fs(trong)
je @f
cmp dword ptr [eax+8],00610066 //fa(ttack)
je @f
jmp originalcode1

@@:
pop eax
jmp exit1

originalcode1:
pop eax
cmp byte ptr [eax+45],00
je fastAttackFlagChk2AOB+12 //ProjectTower.character.CharAnim::Update+BA6

exit1:
jmp returnhere1

fastAttackFlagChk2AOB: //ProjectTower.character.CharAnim::Update+B94:
jmp newmem1
nop
returnhere1:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
fastAttackFlagChk1AOB: //ProjectTower.character.CharAnim::Update+B70:
db 80 78 45 00 75 0C
//Alt: cmp byte ptr [eax+45],00
//Alt: jne fastAttackFlagChk1AOB+12 //ProjectTower.character.CharAnim::Update+B82

///******************************************************///

dealloc(newmem1)
fastAttackFlagChk2AOB: //ProjectTower.character.CharAnim::Update+B94:
db 80 78 45 00 74 0C
//Alt: cmp byte ptr [eax+45],00
//Alt: je fastAttackFlagChk2AOB+12 //ProjectTower.character.CharAnim::Update+B
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>109</ID>
          <Description>"Always Charged Attack"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(chargeValReadForCamMgrAOB,8B 50 08 D9 42 1C)
registersymbol(chargeValReadForCamMgrAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+68],0 //team
jne originalcode
mov edx,[eax+4]
mov edx,[edx+8]
/*
cmp dword ptr [edx+8],00740061 //at(tack)
je @f
cmp dword ptr [edx+8],00740073 //st(rong)
je @f
cmp dword ptr [edx+8],00730066 //fs(trong)
je @f
cmp dword ptr [edx+8],00610066 //fa(ttack)
je @f
*/
//projectile
cmp word ptr [edx+8],0062 //b(attck)
je originalcode
cmp dword ptr [edx+8],00720063 //cr(ossbow)
je originalcode
cmp dword ptr [edx+8],006c0066 //fl(intlock)
je originalcode
//melee
cmp dword ptr [edx+8],00740061 //at(tack)
je @f
cmp dword ptr [edx+8],00740073 //st(rong)
je @f
cmp dword ptr [edx+a],00740061 //(*)at(tack)
je @f
cmp dword ptr [edx+a],00740073 //(*)st(rong)
je @f
cmp dword ptr [edx+c],00740061 //(**)at(tack)
je @f
cmp dword ptr [edx+c],00740073 //(**)st(rong)
je @f
cmp dword ptr [edx+e],00740061 //(***)at(tack)
je @f
cmp dword ptr [edx+e],00740073 //(***)st(rong)
je @f
cmp dword ptr [edx+10],00740061 //(****)at(tack)
je @f
cmp dword ptr [edx+10],00740073 //(****)st(rong)
je @f
//melee whip
cmp dword ptr [edx+8],00680077 //wh(ip)
je @f
cmp dword ptr [edx+a],00680077 //wh(ip)
je @f
cmp dword ptr [edx+c],00680077 //wh(ip)
je @f
cmp dword ptr [edx+e],00680077 //wh(ip)
je @f
cmp dword ptr [edx+10],00680077 //wh(ip)
je @f
jmp originalcode

@@:
mov edx,[eax+8]
mov dword ptr [edx+1C],(float)1.1

originalcode:
mov edx,[eax+08]
fld dword ptr [edx+1C]

exit:
jmp returnhere

chargeValReadForCamMgrAOB: //ProjectTower.director.CamMgr::Update+BB7:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
chargeValReadForCamMgrAOB: //ProjectTower.director.CamMgr::Update+BB7:
db 8B 50 08 D9 42 1C
//Alt: mov edx,[eax+08]
//Alt: fld dword ptr [edx+1C]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>157</ID>
          <Description>"Lock Magic Balance"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(magBalanceRead1AOB,D9 40 1C D9 EE DF F1 ** ** ** ** ** ** D9)
registersymbol(magBalanceRead1AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov ecx,[eax+8]
cmp dword ptr [ecx+68],0
mov ecx,eax
jne originalcode
fldz
fst dword ptr [eax+1c]

originalcode:
//fld dword ptr [eax+1C]
fldz 

exit:
jmp returnhere

magBalanceRead1AOB: //ProjectTower.character.CharBuffs::Update+2B:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
magBalanceRead1AOB: //ProjectTower.character.CharBuffs::Update+2B:
db D9 40 1C D9 EE
//Alt: fld dword ptr [eax+1C]
//Alt: fldz
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"Stagger Mod"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(poiseWrite1OnHitAOB,D8 A8 88 00 00 00 D9 98 88 00 00 00)
registersymbol(poiseWrite1OnHitAOB)

label(bPlayerTeamNoStagger)
registersymbol(bPlayerTeamNoStagger)
label(bNonPlayerTeamAlwaysStagger)
registersymbol(bNonPlayerTeamAlwaysStagger)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+68],0 //team
jne @f
cmp byte ptr [bPlayerTeamNoStagger],1
jne originalcode
fstp st(0)
mov dword ptr [eax+88],(float)5000
jmp exit

@@:
cmp byte ptr [bNonPlayerTeamAlwaysStagger],1
jne originalcode
fstp st(0)
fldz

originalcode:
fstp dword ptr [eax+00000088]

exit:
jmp returnhere

///
bPlayerTeamNoStagger:
dd 0
bNonPlayerTeamAlwaysStagger:
dd 0
///

poiseWrite1OnHitAOB+6: //ProjectTower.particles.particles.hit.HitManager::CheckHit+2834:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
poiseWrite1OnHitAOB+6: //ProjectTower.particles.particles.hit.HitManager::CheckHit+2834:
db D9 98 88 00 00 00
//Alt: fstp dword ptr [eax+00000088]

unregistersymbol(bPlayerTeamNoStagger)
unregistersymbol(bNonPlayerTeamAlwaysStagger)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>123</ID>
              <Description>"Player (Team) No Stagger"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bPlayerTeamNoStagger</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>124</ID>
              <Description>"Non-player (Team) Always Stagger"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:No
1:Yes
</DropDownList>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bNonPlayerTeamAlwaysStagger</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"Enable Eminent Obelisks"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(chkRuneFlag0AOB,80 78 08 00 0F 84 ** ** ** ** 8D)
registersymbol(chkRuneFlag0AOB)

chkRuneFlag0AOB: //ProjectTower.player.PlayerPrompts::GetCharacterInteraction+1EE:
db 90 90 85 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
chkRuneFlag0AOB: //ProjectTower.player.PlayerPrompts::GetCharacterInteraction+1EE:
db 80 78 08 00
//Alt: cmp byte ptr [eax+08],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"Enable Air Dash"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(chkRuneFlag1AOB,80 78 09 00 0F 84)
registersymbol(chkRuneFlag1AOB)

chkRuneFlag1AOB: //ProjectTower.character.CharUpdate::Update+5371:
db 90 90 85 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
chkRuneFlag1AOB: //ProjectTower.character.CharUpdate::Update+5371:
db 80 78 09 00
//Alt: cmp byte ptr [eax+09],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>72</ID>
          <Description>"Enable Wall Jump"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(chkRuneFlag2aAOB,80 78 0A 00 0F 84 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 01)
registersymbol(chkRuneFlag2aAOB)

chkRuneFlag2aAOB: //ProjectTower.character.CharMovement::Move+14EB:
db 90 90 85 C0

///

aobscan(chkRuneFlag2bAOB,80 78 0A 00 0F 84 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 00)
registersymbol(chkRuneFlag2bAOB)

chkRuneFlag2bAOB: //ProjectTower.character.CharMovement::Move+1BFA:
db 90 90 85 C0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
chkRuneFlag2aAOB: //ProjectTower.character.CharMovement::Move+14EB:
db 80 78 0A 00
//Alt: cmp byte ptr [eax+0A],00

///

chkRuneFlag2bAOB: //ProjectTower.character.CharMovement::Move+1BFA:
db 80 78 0A 00
//Alt: cmp byte ptr [eax+0A],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>84</ID>
          <Description>"Enable Sprint (Shift)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(moveSpeedXCalAOB,D9 5D 08 33 D2 89 55 9C)
registersymbol(moveSpeedXCalAOB)

label(fSprintSpeed)
registersymbol(fSprintSpeed)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp dword ptr [esi-6c],0 //team
jne originalcode

pushad
push 10      //SHIFT key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
fmul dword ptr [fSprintSpeed]

originalcode:
popfd
fstp dword ptr [ebp+08]
xor edx,edx

exit:
jmp returnhere

///
fSprintSpeed:
dd (float)1.8
///

moveSpeedXCalAOB: //ProjectTower.character.CharMovement::Move+3F8:
jmp newmem
returnhere:

///*******************************************///
aobscan(loc_2WriteInAirAOB,D8 40 04 D9 58 04 A1 ** ** ** ** 8B ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** 74)
registersymbol(loc_2WriteInAirAOB)

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp dword ptr [eax-6c],0 //team
jne originalcode2

pushad
push 10      //SHIFT key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode2

fmul dword ptr [fSprintSpeed]

originalcode2:
popfd
fadd dword ptr [eax+04]
fstp dword ptr [eax+04]

exit2:
jmp returnhere2

///

loc_2WriteInAirAOB: //ProjectTower.character.CharMovement::Move+364E:
jmp newmem2
nop
returnhere2:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
moveSpeedXCalAOB: //ProjectTower.character.CharMovement::Move+3F8:
db D9 5D 08 33 D2
//Alt: fstp dword ptr [ebp+08]
//Alt: xor edx,edx

unregistersymbol(fSprintSpeed)

///*******************************************///

dealloc(newmem2)
loc_2WriteInAirAOB: //ProjectTower.character.CharMovement::Move+364E:
db D8 40 04 D9 58 04
//Alt: fadd dword ptr [eax+04]
//Alt: fstp dword ptr [eax+04]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>85</ID>
              <Description>"Sprint Speed"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>fSprintSpeed</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>155</ID>
          <Description>"Enable Walk (Ctrl)"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(keyLeftRunWriteAOB,C6 43 20 01 D9 EE)
registersymbol(keyLeftRunWriteAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
push eax
mov eax,[ebx+4]
cmp dword ptr [eax+68],0
pop eax
jne originalcode
pushad
push 11      //CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode
popfd
mov byte ptr [ebx+22],1 //keyLeftWalk
fldz
jmp exit

originalcode:
popfd
mov byte ptr [ebx+20],01
fldz 

exit:
jmp returnhere

keyLeftRunWriteAOB: //ProjectTower.character.CharKeys::Update+854:
jmp newmem
nop
returnhere:

///****************************************///

aobscan(keyRightRunWriteAOB,C6 43 21 01 D9 EE)
registersymbol(keyRightRunWriteAOB)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)

newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
push eax
mov eax,[ebx+4]
cmp dword ptr [eax+68],0
pop eax
jne originalcode1
pushad
push 11      //CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne originalcode1
popfd
mov byte ptr [ebx+23],1 //keyRightWalk
fldz
jmp exit1

originalcode1:
popfd
mov byte ptr [ebx+21],01
fldz

exit1:
jmp returnhere1

keyRightRunWriteAOB: //ProjectTower.character.CharKeys::Update+8EB:
jmp newmem1
nop
returnhere1:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
keyLeftRunWriteAOB: //ProjectTower.character.CharKeys::Update+854:
db C6 43 20 01 D9 EE
//Alt: mov byte ptr [ebx+20],01
//Alt: fldz

///****************************************///

dealloc(newmem1)
keyRightRunWriteAOB: //ProjectTower.character.CharKeys::Update+8EB:
db C6 43 21 01 D9 EE
//Alt: mov byte ptr [ebx+21],01
//Alt: fldz
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>160</ID>
          <Description>"Inf. Air Dash"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(canAirGlidePostDecAOB,8B 40 04 8B 50 14 80 7A 31 00)
registersymbol(canAirGlidePostDecAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+70],0
jne originalcode
mov dword ptr [eax+70],2

originalcode:
mov eax,[eax+04]
mov edx,[eax+14]

exit:
jmp returnhere

canAirGlidePostDecAOB: //ProjectTower.character.CharUpdate::Update+591B:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
canAirGlidePostDecAOB: //ProjectTower.character.CharUpdate::Update+591B:
db 8B 40 04 8B 50 14
//Alt: mov eax,[eax+04]
//Alt: mov edx,[eax+14]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>166</ID>
          <Description>"NoClip"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
label(bEndThread_salt_noClip_mem)
registersymbol(bEndThread_salt_noClip_mem)
label(pCharacterForNoClip)
registersymbol(pCharacterForNoClip)
label(fNoClipMoveSpeed)
registersymbol(fNoClipMoveSpeed)

alloc(salt_noClip_mem,2048)
createthread(salt_noClip_mem)
registersymbol(salt_noClip_mem)
label(salt_noClip_mem_start)
label(salt_noClip_mem_end)
label(salt_noClip_mem_exit)

label(cmoveup)
label(cmoveupz)
label(cmovedown)
label(cmovedownz)
label(cmoveleft)
label(cmoveleftz)
label(cmoveright)
label(cmoverightz)

salt_noClip_mem:
sub esp,28

salt_noClip_mem_start:
mov edx,[pCharacterForNoClip]
test edx,edx
jz salt_noClip_mem_end

pushad
push 60      //Numeric keypad 0 key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne salt_noClip_mem_end

pushad
push 26      //UP ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne @f
call cmoveup

@@:
pushad
push 28      //DOWN ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne @f
call cmovedown

@@:
pushad
push 25      //LEFT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne @f
call cmoveleft

@@:
pushad
push 27      //RIGHT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne @f
call cmoveright

@@:

salt_noClip_mem_end:
push #6
call Sleep
cmp dword ptr [bEndThread_salt_noClip_mem],1
jne salt_noClip_mem_start

salt_noClip_mem_exit:
add esp,28
mov dword ptr [bEndThread_salt_noClip_mem],2
ret

///
//
cmoveup:
fld dword ptr [fNoClipMoveSpeed]

pushad
push 25      //LEFT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

pushad
push 27      //RIGHT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

jmp cmoveupz

@@:
fmul dword ptr [fNoClipMoveSpeed+4]

cmoveupz:
fsubr dword ptr [edx+d8]
fstp dword ptr [edx+d8]
ret

//
cmovedown:
fld dword ptr [fNoClipMoveSpeed]

pushad
push 25      //LEFT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

pushad
push 27      //RIGHT ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

jmp cmovedownz

@@:
fmul dword ptr [fNoClipMoveSpeed+4]

cmovedownz:
fadd dword ptr [edx+d8]
fstp dword ptr [edx+d8]
ret

//
cmoveleft:
fld dword ptr [fNoClipMoveSpeed]

pushad
push 26      //UP ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

@@:
pushad
push 28      //DOWN ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

jmp cmoveleftz

@@:
fmul dword ptr [fNoClipMoveSpeed+4]

cmoveleftz:
fsubr dword ptr [edx+d4]
fstp dword ptr [edx+d4]
ret

//
cmoveright:
fld dword ptr [fNoClipMoveSpeed]

pushad
push 26      //UP ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

@@:
pushad
push 28      //DOWN ARROW key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f

jmp cmoverightz

@@:
fmul dword ptr [fNoClipMoveSpeed+4]

cmoverightz:
fadd dword ptr [edx+d4]
fstp dword ptr [edx+d4]
ret

///
bEndThread_salt_noClip_mem:
dd 0
pCharacterForNoClip:
dd 0
fNoClipMoveSpeed:
dd (float)3
dd (float)0.5
///

///*********************************************************///
aobscan(charCoordRead2AOB,8D 82 D4 00 00 00 D9 00 D8 ** ** ** ** ** DD ** ** F2)
registersymbol(charCoordRead2AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [edx+68],0 //team
jne originalcode

mov [pCharacterForNoClip],edx

originalcode:
lea eax,[edx+000000D4]

exit:
jmp returnhere

///

charCoordRead2AOB: //ProjectTower.sanctuary.SanctuaryMgr::GetSanctuaryIn+F:
jmp newmem
nop
returnhere:





[DISABLE]
//code from here till the end of the code will be used to disable the cheat
//obtained from SubBeam's ACS script - start//
{$lua}

if( syntaxcheck == false ) then --actual execution
  local starttime = getTickCount()

if readInteger( "bEndThread_salt_noClip_mem" ) == 0 then --could be 2 already
  writeInteger( "bEndThread_salt_noClip_mem", 1 ) --tell the thread to kill itself
end

while( getTickCount() &lt; starttime + 1000 ) and ( readInteger( "bEndThread_salt_noClip_mem" ) ~=2 ) do --wait till it has finished
  sleep( 20 )
end

if( getTickCount() &gt; starttime + 1000 ) then --could happen when the window is shown
  showMessage( 'Disabling the thread failed!' )
  error( 'Thread disabling failed!' )
end
  sleep( 1 )
end

{$asm}
//obtained from SubBeam's ACS script - end//

//bEndThread_refreshSkillFilelinks_mem:
//dd 1

unregistersymbol(bEndThread_salt_noClip_mem)
unregistersymbol(pCharacterForNoClip)
unregistersymbol(fNoClipMoveSpeed)

unregistersymbol(salt_noClip_mem)
dealloc(salt_noClip_mem)

///*********************************************************///

dealloc(newmem)
charCoordRead2AOB: //ProjectTower.sanctuary.SanctuaryMgr::GetSanctuaryIn+F:
db 8D 82 D4 00 00 00
//Alt: lea eax,[edx+000000D4]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>165</ID>
              <Description>"Move Speed"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>fNoClipMoveSpeed</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>147</ID>
          <Description>"Fly v2"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(traj_2CalAOB,D8 42 04 D9 5A 04 D9 87 A4 00 00 00)
registersymbol(traj_2CalAOB)

label(fFlySpeed)
registersymbol(fFlySpeed)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fadd dword ptr [edx+04]//
fstp dword ptr [edx+04]//

pushfd
push eax
push ebx

cmp dword ptr [ecx+68],0
jne originalcode

mov eax,[ecx+14]
cmp byte ptr [eax+33],1
jne originalcode

mov ebx,[ecx+18]
fld dword ptr [ecx+d4]
fstp dword ptr [ebx+8c]
fld dword ptr [ecx+d8]
fstp dword ptr [ebx+90]

cmp byte ptr [eax+24],1
jne @f
//fsub dword ptr [fFlySpeed]
mov dword ptr [edx+4],(float)-700
jmp originalcode

@@:
cmp byte ptr [eax+25],1
jne @f
//fadd dword ptr [fFlySpeed]
mov dword ptr [edx+4],(float)700
jmp originalcode

@@:
fld dword ptr [edx+4]
fldz
fcomip st(0),st(1)
fstp st(0)
jp originalcode
jae originalcode
fldz
fstp dword ptr [edx+4]

originalcode:
pop ebx
pop eax
popfd
//fadd dword ptr [edx+04]
//fstp dword ptr [edx+04]

exit:
jmp returnhere

///
fFlySpeed:
dd (float)8
///

traj_2CalAOB: //05C2E632:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
traj_2CalAOB: //05C2E632:
db D8 42 04 D9 5A 04
//Alt: fadd dword ptr [edx+04]
//Alt: fstp dword ptr [edx+04]

unregistersymbol(fFlySpeed)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>128</ID>
      <Description>"[Misc. Scripts]"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>000080</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Increased Drop Rate"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(platerStatsReadAOB,8B 44 82 08 EB 02 33 C0)
registersymbol(platerStatsReadAOB)
aobscan(getSPRetAOB,D8 0D ** ** ** ** D8 05 ** ** ** ** C3)
registersymbol(getSPRetAOB) //ProjectTower.player.PlayerStats::GetSP+F

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushfd
cmp eax,3
jne @f
cmp [ebp+1c],getSPRetAOB //ProjectTower.player.PlayerStats::GetSP+F
je @f
mov eax,#50000
jmp originalcode
@@:
mov eax,[edx+eax*4+08]

originalcode:
popfd
//mov eax,[edx+eax*4+08]
jmp platerStatsReadAOB+8 //ProjectTower.player.PlayerStats::GetEquipAdjustedStat+30

exit:
jmp returnhere

///

platerStatsReadAOB: //ProjectTower.player.PlayerStats::GetEquipAdjustedStat+28:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
platerStatsReadAOB: //ProjectTower.player.PlayerStats::GetEquipAdjustedStat+28:
db 8B 44 82 08 EB 02
//Alt: mov eax,[edx+eax*4+08]
//Alt: jmp platerStatsReadAOB+8 //ProjectTower.player.PlayerStats::GetEquipAdjustedStat+30
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"Game Speed Mod (press CapsLock to toggle)"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(slowTimeReadAOB,D9 40 24 D9 EE DF F1 DD D8 ** ** ** ** D9 ** ** ** ** ** D8 ** ** ** ** ** 8B)
registersymbol(slowTimeReadAOB)

label(bSpeedModOn)
registersymbol(bSpeedModOn)
label(bSpeedModKeyPressed)
label(fGameSpeedMultiplier)
registersymbol(fGameSpeedMultiplier)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(gamespeedmod)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 14    //CAPS LOCK key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f
mov byte ptr [bSpeedModKeyPressed],0
jmp gamespeedmod

@@:
cmp byte ptr [bSpeedModKeyPressed],1
je @f
mov byte ptr [bSpeedModKeyPressed],1
xor byte ptr [bSpeedModOn],1

gamespeedmod:
cmp byte ptr [bSpeedModOn],1
jne originalcode
fld dword ptr [fGameSpeedMultiplier]
fmul dword ptr [ebp+8]
fstp dword ptr [ebp+8]

originalcode:
fld dword ptr [eax+24]
fldz 

exit:
jmp returnhere

///
bSpeedModOn:
dd 0
bSpeedModKeyPressed:
dd 0
fGameSpeedMultiplier:
dd (float)0.5
///

slowTimeReadAOB: //ProjectTower.character.Character::Update+16:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
slowTimeReadAOB: //ProjectTower.character.Character::Update+16:
db D9 40 24 D9 EE
//Alt: fld dword ptr [eax+24]
//Alt: fldz

unregistersymbol(bSpeedModOn)
unregistersymbol(fGameSpeedMultiplier)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>117</ID>
              <Description>"Mod Status"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Off
1:On
</DropDownList>
              <Color>008000</Color>
              <VariableType>Byte</VariableType>
              <Address>bSpeedModOn</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"Speed Mod Multiplier"</Description>
              <Color>008000</Color>
              <VariableType>Float</VariableType>
              <Address>fGameSpeedMultiplier</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>111</Key>
                  </Keys>
                  <Value>0.4</Value>
                  <ID>0</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>106</Key>
                  </Keys>
                  <Value>0.5</Value>
                  <ID>1</ID>
                </Hotkey>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>109</Key>
                  </Keys>
                  <Value>0.6</Value>
                  <ID>2</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>112</ID>
          <Description>"Light Toggle (press G)"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(lightBuffChkAOB,D9 40 10 D9 EE DF F1 DD D8 ** ** ** ** 8B ** ** ** ** ** D9 ** ** ** ** ** D8)
registersymbol(lightBuffChkAOB)

label(bLightOn)
label(bLightKeyPressed)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(lightmod)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
pushad
push 'G'
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
je @f
mov byte ptr [bLightKeyPressed],0
jmp lightmod

@@:
cmp byte ptr [bLightKeyPressed],1
je @f
mov byte ptr [bLightKeyPressed],1
xor byte ptr [bLightOn],1

lightmod:
cmp byte ptr [bLightOn],1
jne originalcode
mov dword ptr [eax+10],(float)1.2
mov dword ptr [eax+14],(float)0.8

originalcode:
fld dword ptr [eax+10]
fldz 

exit:
jmp returnhere

///
bLightOn:
dd 0
bLightKeyPressed:
dd 0
///

lightBuffChkAOB: //ProjectTower.character.CharBuffs::Update+2A3:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
lightBuffChkAOB: //ProjectTower.character.CharBuffs::Update+2A3:
db D9 40 10 D9 EE
//Alt: fld dword ptr [eax+10]
//Alt: fldz
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"Enable Mouse Flag"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(cJmpIfMouseDisabledWhenAttackKeyIsPresedAOB,0F 85 5D 01 00 00 80 7E 0F 00)
registersymbol(cJmpIfMouseDisabledWhenAttackKeyIsPresedAOB)

label(bMouseFlag)
registersymbol(bMouseFlag)

[cJmpIfMouseDisabledWhenAttackKeyIsPresedAOB-5]:
bMouseFlag:
dd 1

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>141</ID>
              <Description>"Mouse Flag"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>0000FF</Color>
              <VariableType>Byte</VariableType>
              <Address>bMouseFlag</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5671920#5671920
</Comments>
</CheatTable>
