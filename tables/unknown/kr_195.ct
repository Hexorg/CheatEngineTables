<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Auto Assemble script"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
 alloc(newmem,2048)
 //places
 label(returnhere)
 label(skip)
 label(originalcode)
 label(exit)
 label(code)
 label(Stamina_Check)
 label(_render_health_Check)
 //variables
 label(Stamina)
 label(StaminaLogged)
 label(HealthMultiplier)
 label(In_render_health)
 label(storeeax)


 aobscan(aobcode,8B 10 8B 4D 14 89 11 8b 50 04 5f)
 registersymbol(code)

 newmem:
 pushfd
 pushad
 mov dword ptr [storeeax],eax //save eax

 //address readable?
 lea eax,[eax+10]
 push 4
 push eax
 call isbadreadptr
 cmp eax,0
 jne skip

 mov eax,dword ptr [storeeax] // restore eax

 //address readable?
 mov eax,dword ptr [eax+10]
 push 16
 push eax
 call isbadreadptr
 cmp eax,0
 jne skip

 mov eax,[storeeax] // restore eax

 //is it _render_health ?
 mov edx,dword ptr [eax+10]
 cmp dword ptr [edx+10],'_ren'
 jne short _render_health_Check
 cmp dword ptr [edx+14],'der_'
 jne skip //starts with "_ren", not followed by "der_"->trash
 cmp dword ptr [edx+18],'heal'
 jne skip
 cmp word ptr [edx+1C],'th'
 jne skip

 //Yes, we're in the _render_health function
 //Allow overwriting the health and logging stamina
 mov byte [In_render_health],1
 mov byte [StaminaLogged],0
 jmp short skip

 //Are we already in _render_health ?
 _render_health_Check:
 cmp byte [In_render_health],1
 jne short skip //no->GTFO

 // is it health ?
 cmp dword ptr [edx+10],'heal'
 jne short Stamina_Check
 cmp word ptr [edx+14],'th'
 jne short skip
 cmp byte ptr [edx+16],0
 jne short skip
 
 //yes, overwrite the health!
 //health=stamina*health_multiplier=max_health
 fld qword [Stamina]
 fld qword [HealthMultiplier]
 fmulp st(1)
 fstp qword [eax]
 mov byte [In_render_health],0 //disallow further health writing
 jmp skip

  // is it stamina ?
 Stamina_Check:
 cmp dword ptr [edx+10],'stam'
 jne short skip
 cmp dword ptr [edx+14],'ina'
 jne short skip

 //yes store the FIRST stamina
 cmp byte [StaminaLogged],1
 je skip
 mov edx,[eax]
 mov dword [Stamina],edx
 mov edx,[eax+4]
 mov dword [Stamina+4],edx
 mov byte [StaminaLogged],1

 skip:
 popad
 popfd

 originalcode:
 mov edx,[eax]
 mov ecx,[ebp+14]

 exit:
 jmp returnhere

 Stamina:
 dq (double)20.0 //default value

 StaminaLogged:
 db 1          //disable logging stamina at first

 HealthMultiplier:
 dq (double)10.0   //game constant

 In_render_health:
 db 0

 storeeax:
 dd 00

 aobcode:
 code:
 jmp newmem
 returnhere:

[DISABLE]
code:
db 8B 10 8B 4D 14
dealloc(newmem)
unregistersymbol(code)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
