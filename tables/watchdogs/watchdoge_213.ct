<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>1</ID>
      <Description>"Infinite Battery"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AoBScanModule( battery, Disrupt_b64.dll, 48 89 7C 24 ? 3B D0 ) /*.text:000000018021FDFB  48 89 7C 24 78    mov     [rsp+58h+arg_18], rdi
                                                                 .text:000000018021FE00  3B D0             cmp     edx, eax
                                                                 .text:000000018021FE02  0F 42 C2          cmovb   eax, edx
                                                                 .text:000000018021FE05  48 8D 15 BCE59E02 lea     rdx, aBatterychanged ; "BatteryChanged"*/ //Look for this in the RDATA table.

[ENABLE]
battery+7:
db 90 90 90 //Nop out the instruction. This instruction says, if the battery was changed, move the new value in. If it's not, keep it the same. We're basically tricking it in to thinking the battery was never changed.

[DISABLE]
battery+7:
cmovb eax,edx //Original Code
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>97</Key>
          </Keys>
          <Description>Infinite Battery</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Infinite Equipment"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AoBScanModule( equipment, Disrupt_b64.dll, 89 42 0C B0 01 EB ) /*.text:00000001807F14A2 89 42 0C  mov    [rdx+0Ch], eax
                                                                 .text:00000001807F14A5 B0 01     mov    al, 1
                                                                 .text:00000001807F14A7 EB D6     jmp    short loc_1807F147F */

[ENABLE]
equipment-2:
db 90 90

[DISABLE]
equipment-2:
sub eax, esi
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>98</Key>
          </Keys>
          <Description>Infinite Equipment</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Disable Negative Reputation"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>AoBScanModule( reputation, Disrupt_b64.dll, 48 8D 45 88 48 89 45 80 ) /*.text:0000000180658EFC 48 8D 45 88   lea  rax, [rbp-78h]
                                                                        .text:0000000180658F00 48 89 45 80   mov  [rbp-80h], rax*/

[ENABLE]
alloc(newmem, 256, "Disrupt_b64.dll")
label(exit)

reputation+11:
jmp newmem
exit:

newmem:
add edi,ebx //Original Code.
cmp [r14],edi //Compare the current state of reputation against the potential state.
jg exit //If it's above the potential, then skip the MOV instruction.
mov [r14],edi //Original Code.
jmp exit //Return.

[DISABLE]
dealloc(newmem)
dealloc(exit)

reputation+11:
add edi,ebx
mov [r14],edi
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>17</Key>
            <Key>99</Key>
          </Keys>
          <Description>Disable Negative Reputation</Description>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
