<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>294</ID>
      <Description>"Bolt Tempest"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>
[ENABLE]

aobscanmodule(ARTE2,Tales of Zestiria.exe,89 84 91 74 2A 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,1e
  mov [ecx+edx*4+00002A74],eax
  jmp return

ARTE2:
  jmp code
  nop
  nop
return:
registersymbol(ARTE2)

[DISABLE]

ARTE2:
  db 89 84 91 74 2A 00 00

unregistersymbol(ARTE2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Tales of Zestiria.exe"+318A83

"Tales of Zestiria.exe"+318A61: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A63: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A68: 8B 48 08              -  mov ecx,[eax+08]
"Tales of Zestiria.exe"+318A6B: 8B 45 10              -  mov eax,[ebp+10]
"Tales of Zestiria.exe"+318A6E: 8B 55 0C              -  mov edx,[ebp+0C]
"Tales of Zestiria.exe"+318A71: 8D 14 82              -  lea edx,[edx+eax*4]
"Tales of Zestiria.exe"+318A74: 03 D0                 -  add edx,eax
"Tales of Zestiria.exe"+318A76: 8B 45 08              -  mov eax,[ebp+08]
"Tales of Zestiria.exe"+318A79: 8B 8C 81 C4 00 00 00  -  mov ecx,[ecx+eax*4+000000C4]
"Tales of Zestiria.exe"+318A80: 8B 45 14              -  mov eax,[ebp+14]
// ---------- INJECTING HERE ----------
"Tales of Zestiria.exe"+318A83: 89 84 91 74 2A 00 00  -  mov [ecx+edx*4+00002A74],eax
// ---------- DONE INJECTING  ----------
"Tales of Zestiria.exe"+318A8A: 5D                    -  pop ebp
"Tales of Zestiria.exe"+318A8B: C3                    -  ret 
"Tales of Zestiria.exe"+318A8C: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8D: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8E: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8F: CC                    -  int 3 
"Tales of Zestiria.exe"+318A90: 55                    -  push ebp
"Tales of Zestiria.exe"+318A91: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A93: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A98: 8B 48 08              -  mov ecx,[eax+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>295</ID>
      <Description>"Flamberge"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>

[ENABLE]

aobscanmodule(ARTE2,Tales of Zestiria.exe,89 84 91 74 2A 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,95
  mov [ecx+edx*4+00002A74],eax
  jmp return

ARTE2:
  jmp code
  nop
  nop
return:
registersymbol(ARTE2)

[DISABLE]

ARTE2:
  db 89 84 91 74 2A 00 00

unregistersymbol(ARTE2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Tales of Zestiria.exe"+318A83

"Tales of Zestiria.exe"+318A61: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A63: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A68: 8B 48 08              -  mov ecx,[eax+08]
"Tales of Zestiria.exe"+318A6B: 8B 45 10              -  mov eax,[ebp+10]
"Tales of Zestiria.exe"+318A6E: 8B 55 0C              -  mov edx,[ebp+0C]
"Tales of Zestiria.exe"+318A71: 8D 14 82              -  lea edx,[edx+eax*4]
"Tales of Zestiria.exe"+318A74: 03 D0                 -  add edx,eax
"Tales of Zestiria.exe"+318A76: 8B 45 08              -  mov eax,[ebp+08]
"Tales of Zestiria.exe"+318A79: 8B 8C 81 C4 00 00 00  -  mov ecx,[ecx+eax*4+000000C4]
"Tales of Zestiria.exe"+318A80: 8B 45 14              -  mov eax,[ebp+14]
// ---------- INJECTING HERE ----------
"Tales of Zestiria.exe"+318A83: 89 84 91 74 2A 00 00  -  mov [ecx+edx*4+00002A74],eax
// ---------- DONE INJECTING  ----------
"Tales of Zestiria.exe"+318A8A: 5D                    -  pop ebp
"Tales of Zestiria.exe"+318A8B: C3                    -  ret 
"Tales of Zestiria.exe"+318A8C: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8D: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8E: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8F: CC                    -  int 3 
"Tales of Zestiria.exe"+318A90: 55                    -  push ebp
"Tales of Zestiria.exe"+318A91: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A93: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A98: 8B 48 08              -  mov ecx,[eax+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>296</ID>
      <Description>"Earth Revolution"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>
[ENABLE]

aobscanmodule(ARTE2,Tales of Zestiria.exe,89 84 91 74 2A 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,BF
  mov [ecx+edx*4+00002A74],eax
  jmp return

ARTE2:
  jmp code
  nop
  nop
return:
registersymbol(ARTE2)

[DISABLE]

ARTE2:
  db 89 84 91 74 2A 00 00

unregistersymbol(ARTE2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Tales of Zestiria.exe"+318A83

"Tales of Zestiria.exe"+318A61: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A63: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A68: 8B 48 08              -  mov ecx,[eax+08]
"Tales of Zestiria.exe"+318A6B: 8B 45 10              -  mov eax,[ebp+10]
"Tales of Zestiria.exe"+318A6E: 8B 55 0C              -  mov edx,[ebp+0C]
"Tales of Zestiria.exe"+318A71: 8D 14 82              -  lea edx,[edx+eax*4]
"Tales of Zestiria.exe"+318A74: 03 D0                 -  add edx,eax
"Tales of Zestiria.exe"+318A76: 8B 45 08              -  mov eax,[ebp+08]
"Tales of Zestiria.exe"+318A79: 8B 8C 81 C4 00 00 00  -  mov ecx,[ecx+eax*4+000000C4]
"Tales of Zestiria.exe"+318A80: 8B 45 14              -  mov eax,[ebp+14]
// ---------- INJECTING HERE ----------
"Tales of Zestiria.exe"+318A83: 89 84 91 74 2A 00 00  -  mov [ecx+edx*4+00002A74],eax
// ---------- DONE INJECTING  ----------
"Tales of Zestiria.exe"+318A8A: 5D                    -  pop ebp
"Tales of Zestiria.exe"+318A8B: C3                    -  ret 
"Tales of Zestiria.exe"+318A8C: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8D: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8E: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8F: CC                    -  int 3 
"Tales of Zestiria.exe"+318A90: 55                    -  push ebp
"Tales of Zestiria.exe"+318A91: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A93: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A98: 8B 48 08              -  mov ecx,[eax+08]
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>297</ID>
      <Description>"Sylphystia"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>

[ENABLE]

aobscanmodule(ARTE2,Tales of Zestiria.exe,89 84 91 74 2A 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov eax,E7
  mov [ecx+edx*4+00002A74],eax
  jmp return

ARTE2:
  jmp code
  nop
  nop
return:
registersymbol(ARTE2)

[DISABLE]

ARTE2:
  db 89 84 91 74 2A 00 00

unregistersymbol(ARTE2)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: "Tales of Zestiria.exe"+318A83

"Tales of Zestiria.exe"+318A61: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A63: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A68: 8B 48 08              -  mov ecx,[eax+08]
"Tales of Zestiria.exe"+318A6B: 8B 45 10              -  mov eax,[ebp+10]
"Tales of Zestiria.exe"+318A6E: 8B 55 0C              -  mov edx,[ebp+0C]
"Tales of Zestiria.exe"+318A71: 8D 14 82              -  lea edx,[edx+eax*4]
"Tales of Zestiria.exe"+318A74: 03 D0                 -  add edx,eax
"Tales of Zestiria.exe"+318A76: 8B 45 08              -  mov eax,[ebp+08]
"Tales of Zestiria.exe"+318A79: 8B 8C 81 C4 00 00 00  -  mov ecx,[ecx+eax*4+000000C4]
"Tales of Zestiria.exe"+318A80: 8B 45 14              -  mov eax,[ebp+14]
// ---------- INJECTING HERE ----------
"Tales of Zestiria.exe"+318A83: 89 84 91 74 2A 00 00  -  mov [ecx+edx*4+00002A74],eax
// ---------- DONE INJECTING  ----------
"Tales of Zestiria.exe"+318A8A: 5D                    -  pop ebp
"Tales of Zestiria.exe"+318A8B: C3                    -  ret 
"Tales of Zestiria.exe"+318A8C: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8D: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8E: CC                    -  int 3 
"Tales of Zestiria.exe"+318A8F: CC                    -  int 3 
"Tales of Zestiria.exe"+318A90: 55                    -  push ebp
"Tales of Zestiria.exe"+318A91: 8B EC                 -  mov ebp,esp
"Tales of Zestiria.exe"+318A93: A1 30 B3 12 02        -  mov eax,["Tales of Zestiria.exe"+1D2B330]
"Tales of Zestiria.exe"+318A98: 8B 48 08              -  mov ecx,[eax+08]
}
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
