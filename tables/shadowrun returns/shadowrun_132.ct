<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>78</ID>
      <Description>"Shadowrun Returns AOB script, Karma, money and essence"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobKarmaReader,8B 80 00 01 00 00 85 C0 0F 8E)
aobscan(aobMoneyReader,8B 47 18 8B C8 39 09 8B 40 48)
aobscan(aobEssenceUpdater,D9 58 5C 8B 47 6C 83 EC 08 6A 01 50)
aobscan(aobEssenceReader,D9 40 5C D9 5D F4 D9 45 F4)

alloc(newmem,4096)

label(aobKarmaReader_r)
registersymbol(aobKarmaReader_r)

label(lblKarmaReader)
label(lblKarmaReaderSkip)
label(lblKarmaReaderRet)

label(bEnableMinKarma)
label(iMinKarma)
registersymbol(bEnableMinKarma)
registersymbol(iMinKarma)

label(aobMoneyReader_r)
registersymbol(aobMoneyReader_r)

label(lblMoneyReader)
label(lblMoneyReaderSkip)
label(lblMoneyReaderRet)

label(bEnableMinMoney)
label(iMinMoney)
registersymbol(bEnableMinMoney)
registersymbol(iMinMoney)

label(aobEssenceUpdater_r)
registersymbol(aobEssenceUpdater_r)

label(lblEssenceUpdater)
label(lblEssenceUpdaterSkip)
label(lblEssenceUpdaterRet)

label(bEnableInfiniteEssence)
registersymbol(bEnableInfiniteEssence)

label(aobEssenceReader_r)
registersymbol(aobEssenceReader_r)

label(lblEssenceReader)
label(lblEssenceReaderSkip)
label(lblEssenceReaderRet)

label(bEnableMinEssence)
label(fMinEssence)
registersymbol(bEnableMinEssence)
registersymbol(fMinEssence)

newmem:
bEnableMinKarma:
dd 1
iMinKarma:
dd (int)20
bEnableMinMoney:
dd 1
iMinMoney:
dd (int)20000
bEnableInfiniteEssence:
dd 1
bEnableMinEssence:
dd 1
fMinEssence:
dd (float)5.5

lblKarmaReader:
push ebx
cmp dword ptr [bEnableMinKarma],1
jne short lblKarmaReaderSkip
mov ebx,[iMinKarma]
cmp dword ptr [eax+100],ebx
jge short lblKarmaReaderSkip
mov dword ptr [eax+100],ebx
lblKarmaReaderSkip:
pop ebx
db 8B 80 00 01 00 00
jmp lblKarmaReaderRet

lblMoneyReader:
db 8B 47 18
cmp dword ptr [bEnableMinMoney],1
jne short lblMoneyReaderSkip
mov ecx,[iMinMoney]
cmp dword ptr [eax+48],ecx
jge short lblMoneyReaderSkip
mov dword ptr [eax+48],ecx
lblMoneyReaderSkip:
db 8B C8
jmp lblMoneyReaderRet

lblEssenceUpdater:
cmp dword ptr [bEnableInfiniteEssence],1
jne short lblEssenceUpdaterSkip
fstp st(0)
mov eax,[edi+6C]
jmp lblEssenceUpdaterRet
lblEssenceUpdaterSkip:
db D9 58 5C 8B 47 6C
jmp lblEssenceUpdaterRet

lblEssenceReader:
push ebx
cmp dword ptr [bEnableMinEssence],1
jne short lblEssenceReaderSkip
mov ebx,[fMinEssence]
cmp dword ptr [eax+5C],ebx
jge short lblEssenceReaderSkip
mov dword ptr [eax+5C],ebx
lblEssenceReaderSkip:
pop ebx
db D9 40 5C D9 5D F4
jmp lblEssenceReaderRet

aobEssenceReader:
aobEssenceReader_r:
jmp lblEssenceReader
nop
lblEssenceReaderRet:

aobEssenceUpdater:
aobEssenceUpdater_r:
jmp lblEssenceUpdater
nop
lblEssenceUpdaterRet:

aobMoneyReader:
aobMoneyReader_r:
jmp lblMoneyReader
lblMoneyReaderRet:

aobKarmaReader:
aobKarmaReader_r:
jmp lblKarmaReader
nop
lblKarmaReaderRet:

[DISABLE]
aobKarmaReader_r:
db 8B 80 00 01 00 00

unregistersymbol(aobKarmaReader_r)

unregistersymbol(bEnableMinKarma)
unregistersymbol(iMinKarma)

aobMoneyReader_r:
db 8B 47 18 8B C8

unregistersymbol(aobMoneyReader_r)

unregistersymbol(bEnableMinMoney)
unregistersymbol(iMinMoney)

aobEssenceUpdater_r:
db D9 58 5C 8B 47 6C

unregistersymbol(aobEssenceUpdater_r)

unregistersymbol(bEnableInfiniteEssence)

aobEssenceReader_r:
db D9 40 5C D9 5D F4

unregistersymbol(aobEssenceReader_r)

unregistersymbol(bEnableMinEssence)
unregistersymbol(fMinEssence)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>79</ID>
          <Description>"bEnableMinKarma"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinKarma</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>80</ID>
              <Description>"iMinKarma"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinKarma</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>81</ID>
          <Description>"bEnableMinMoney"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinMoney</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>82</ID>
              <Description>"iMinMoney"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinMoney</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>83</ID>
          <Description>"bEnableInfiniteEssence"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteEssence</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>84</ID>
          <Description>"bEnableMinEssence"</Description>
          <LastState Value="??" Activated="0" RealAddress="00000000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableMinEssence</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>85</ID>
              <Description>"fMinEssence"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fMinEssence</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>86</ID>
      <Description>"Shadowrun Returns AOB script, Health and Ammo"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobHealthUpdater,89 86 9C 00 00 00 39 36 83 EC)
aobscan(aobAmmoUpdater,2B C1 89 46 2C 39 1B)

alloc(newmem,2048)

label(aobHealthUpdater_r)
registersymbol(aobHealthUpdater_r)

label(lblHealthUpdater)
label(lblHealthUpdaterFoe)
label(lblHealthUpdaterSkip)
label(lblHealthUpdaterRet)

label(bEnableGodMode)
label(bEnableOneHitKill)
registersymbol(bEnableGodMode)
registersymbol(bEnableOneHitKill)

label(aobAmmoUpdater_r)
registersymbol(aobAmmoUpdater_r)

label(lblAmmoUpdater)
label(lblAmmoUpdaterFoe)
label(lblAmmoUpdaterSkip)
label(lblAmmoUpdaterRet)

label(bEnableInfiniteAmmo)
registersymbol(bEnableInfiniteAmmo)

newmem:
bEnableGodMode:
dd 1
bEnableOneHitKill:
dd 0
bEnableInfiniteAmmo:
dd 1

lblHealthUpdater:
push ebx
cmp dword ptr [bEnableGodMode],1
jne short lblHealthUpdaterSkip
mov ebx,[esi+DC]
test ebx,ebx
jz short lblHealthUpdaterSkip
cmp dword ptr [ebx+08],D
jne short lblHealthUpdaterFoe
cmp dword ptr [ebx+0C],680073
jne short lblHealthUpdaterFoe
mov ebx,[esi+6c]
mov eax,[ebx+30]
pop ebx
db 89 86 9C 00 00 00
jmp lblHealthUpdaterRet
lblHealthUpdaterFoe:
cmp dword ptr [bEnableOneHitKill],1
jne short lblHealthUpdaterSkip
xor eax,eax
lblHealthUpdaterSkip:
pop ebx
db 89 86 9C 00 00 00
jmp lblHealthUpdaterRet

lblAmmoUpdater:
push ebx
cmp dword ptr [bEnableInfiniteAmmo],1
jne short lblAmmoUpdaterSkip
mov ebx,[edi+DC]
test ebx,ebx
jz short lblAmmoUpdaterSkip
cmp dword ptr [ebx+08],D
jne short lblAmmoUpdaterFoe
cmp dword ptr [ebx+0C],680073
jne short lblAmmoUpdaterFoe
xor ecx,ecx
cmp eax,[esi+2C]
jge short lblAmmoUpdaterSkip
mov eax,[esi+2C]
jmp short lblAmmoUpdaterSkip
lblAmmoUpdaterFoe:
lblAmmoUpdaterSkip:
pop ebx
db 2B C1 89 46 2C
jmp lblAmmoUpdaterRet

aobAmmoUpdater:
aobAmmoUpdater_r:
jmp lblAmmoUpdater
lblAmmoUpdaterRet:

aobHealthUpdater:
aobHealthUpdater_r:
jmp lblHealthUpdater
nop
lblHealthUpdaterRet:

[DISABLE]
aobHealthUpdater_r:
db 89 86 9C 00 00 00

unregistersymbol(aobHealthUpdater_r)

unregistersymbol(bEnableGodMode)
unregistersymbol(bEnableOneHitKill)

aobAmmoUpdater_r:
db 2B C1 89 46 2C

unregistersymbol(aobAmmoUpdater_r)

unregistersymbol(bEnableInfiniteAmmo)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>87</ID>
          <Description>"bEnableGodMode"</Description>
          <LastState Value="??" Activated="0" RealAddress="003A0000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableGodMode</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"bEnableOneHitKill"</Description>
          <LastState Value="??" Activated="0" RealAddress="003A0004"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableOneHitKill</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"bEnableInfiniteAmmo"</Description>
          <LastState Value="??" Activated="0" RealAddress="003A0008"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableInfiniteAmmo</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>106</ID>
      <Description>"Shadowrun Returns AOB script, AP and Cooldown"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscan(aobCooldownReader,8B 40 14 3B 45 F0 7E)
aobscan(aobActorSelector,89 47 40 83 EC 08 6A 00 50)

alloc(newmem,2048)

label(aobCooldownReader_r)
registersymbol(aobCooldownReader_r)

label(lblCooldownReader)
label(lblCooldownReaderSkip)
label(lblCooldownReaderRet)

label(bEnableCooldownResetOnCTRL)
registersymbol(bEnableCooldownResetOnCTRL)

label(aobActorSelector_r)
registersymbol(aobActorSelector_r)

label(lblActorSelector)
label(lblActorSelectorSkip)
label(lblActorSelectorRet)

label(bEnableActionPointGiverOnCTRL)
label(iActionPointsToGiveOnCTRL)
registersymbol(bEnableActionPointGiverOnCTRL)
registersymbol(iActionPointsToGiveOnCTRL)

newmem:
bEnableCooldownResetOnCTRL:
dd 1
bEnableActionPointGiverOnCTRL:
dd 1
iActionPointsToGiveOnCTRL:
dd (int)5

lblCooldownReader:
push ebx
cmp dword ptr [bEnableCooldownResetOnCTRL],1
jne short lblCooldownReaderSkip
pushad
push 11 // CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblCooldownReaderSkip
mov ebx,[ebp-10]
mov dword ptr [eax+14],ebx
lblCooldownReaderSkip:
pop ebx
db 8B 40 14 3B 45 F0
jmp lblCooldownReaderRet

lblActorSelector:
push ebx
test eax,eax
jz short lblActorSelectorSkip
cmp dword ptr [bEnableActionPointGiverOnCTRL],1
jne short lblActorSelectorSkip
pushad
push 11 // CTRL key
call GetAsyncKeyState
shr ax,#15
cmp ax,1
popad
jne short lblActorSelectorSkip
mov ebx,[eax+98]
add ebx,[iActionPointsToGiveOnCTRL]
mov dword ptr [eax+98],ebx
lblActorSelectorSkip:
pop ebx
db 89 47 40 83 EC 08
jmp lblActorSelectorRet

aobActorSelector:
aobActorSelector_r:
jmp lblActorSelector
nop
lblActorSelectorRet:

aobCooldownReader:
aobCooldownReader_r:
jmp lblCooldownReader
nop
lblCooldownReaderRet:

[DISABLE]
aobCooldownReader_r:
db 8B 40 14 3B 45 F0

unregistersymbol(aobCooldownReader_r)

unregistersymbol(bEnableCooldownResetOnCTRL)

aobActorSelector_r:
db 89 47 40 83 EC 08

unregistersymbol(aobActorSelector_r)

unregistersymbol(bEnableActionPointGiverOnCTRL)
unregistersymbol(iActionPointsToGiveOnCTRL)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>121</ID>
          <Description>"bEnableActionPointGiverOnCTRL"</Description>
          <LastState Value="??" Activated="0" RealAddress="003C0004"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableActionPointGiverOnCTRL</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>122</ID>
              <Description>"iActionPointsToGiveOnCTRL"</Description>
              <LastState Value="??" Activated="0" RealAddress="003C0008"/>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iActionPointsToGiveOnCTRL</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"bEnableCooldownResetOnCTRL"</Description>
          <LastState Value="??" Activated="0" RealAddress="003C0000"/>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bEnableCooldownResetOnCTRL</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
