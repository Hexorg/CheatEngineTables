<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Inventory"</Description>
      <Options moHideChildren="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(InventoryAddress, DXMD.exe, 48 8B 0B E8 ? ? ? ? 48 85 C0 )
aobscanmodule(functiontocall, DXMD.exe, 49 89 D2 4C 8B 41 18)
RegisterSymbol(InventoryAddress)
RegisterSymbol(functiontocall)
alloc(itemaddress,8,DXMD.exe)
registersymbol(itemaddress)
alloc(newmem,1024,DXMD.exe)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp rsi, 0
jne originalcode
cmp rax, 0
jne originalcode
cmp rdi, 4
jne originalcode
//mov rcx,[rbx]
mov [itemaddress],rbx
originalcode:
mov rcx,[rbx]
call functiontocall
exit:
jmp returnhere

InventoryAddress:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
UnregisterSymbol(InventoryAddress)
UnregisterSymbol(functiontocall)
dealloc(itemaddress)
dealloc(InventoryAddress)
dealloc(functiontocall)
unregistersymbol(itemaddress)
dealloc(newmem)
dealloc(returnhere)
dealloc(originalcode)
dealloc(exit)
InventoryAddress:
mov rcx,[rbx]
call functiontocall
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Base Pointer"</Description>
          <ShowAsHex>1</ShowAsHex>
          <VariableType>4 Bytes</VariableType>
          <Address>itemaddress</Address>
          <Offsets>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>30</ID>
          <Description>"Quantity"</Description>
          <VariableType>4 Bytes</VariableType>
          <Address>itemaddress</Address>
          <Offsets>
            <Offset>38</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>
