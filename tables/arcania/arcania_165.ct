<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="17">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Fix Vision90 crash"</Description>
      <LastState Activated="0"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
Arcania.exe+FF443: //nop the test+jump that skips the malloc call
//11 nops
db 90 90 90 90 90 90 90 90 90 90 90

Arcania.exe+FF45E: //after the malloc, go to our code cave
jmp Arcania.exe+FF499


Arcania.exe+FF497:
jmp Arcania.exe+FF4D2      //a safety so that other pathways don't land in our code cave.
//Arcania.exe+FF499:       //note: code in the code cave was used to log 'Not enough memory blah blah'
movzx edx byte [ebp-198]
test edx,edx               //cases when edx=1 are handled by the game
  je Arcania.exe+FFE6A       //when it's 0 game is expected to crash, so we handle that
jmp Arcania.exe+FF4D2


 
[DISABLE]
Arcania.exe+FF443:
movzx edx byte [ebp-198]
test edx,edx
je Arcania.exe+FF460

Arcania.exe+FF45E:
jmp Arcania.exe+FF493

Arcania.exe+FF497:
jne Arcania.exe+FF4D2
mov ecx,[ebp+08]
push ecx
mov edx,[ebp-0000018C]
mov eax,[edx+20]
push eax
push Arcania.exe+9C78DC
push 000006C2

{
incase you'd need to port this hack to another version of the game, here is part of the memory allocator:
Arcania.exe+FF395 - 8D 55 E8              - lea edx,[ebp-18]  //loop the scan all 256 buffer (slots?)
Arcania.exe+FF398 - 52                    - push edx
Arcania.exe+FF399 - 8B 45 E4              - mov eax,[ebp-1C]
Arcania.exe+FF39C - 50                    - push eax
Arcania.exe+FF39D - 8B 8D 74FEFFFF        - mov ecx,[ebp-0000018C]
Arcania.exe+FF3A3 - E8 E8270000           - call Arcania.exe+101B90  //see if a buffer is available
Arcania.exe+FF3A8 - 0FB6 C8               - movzx ecx,al
Arcania.exe+FF3AB - 85 C9                 - test ecx,ecx
Arcania.exe+FF3AD - 0F85 4A010000         - jne Arcania.exe+FF4FD    //jump if an usable buffer was found
Arcania.exe+FF3B3 - 8B 55 E4              - mov edx,[ebp-1C]
Arcania.exe+FF3B6 - 83 C2 01              - add edx,01               //increase loop index
Arcania.exe+FF3B9 - 89 55 E4              - mov [ebp-1C],edx
Arcania.exe+FF3BC - 81 7D E4 00010000     - cmp [ebp-1C],00000100    //did we sweep over all 256 buffers?
Arcania.exe+FF3C3 - 0F82 2F010000         - jb Arcania.exe+FF4F8
Arcania.exe+FF3C9 - C7 45 C0 00000000     - mov [ebp-40],00000000
Arcania.exe+FF3D0 - 8B 85 74FEFFFF        - mov eax,[ebp-0000018C]
Arcania.exe+FF3D6 - 83 B8 88040000 00     - cmp dword ptr [eax+00000488],00
Arcania.exe+FF3DD - 74 28                 - je Arcania.exe+FF407
Arcania.exe+FF3DF - 8B 4D 08              - mov ecx,[ebp+08]
Arcania.exe+FF3E2 - 51                    - push ecx
Arcania.exe+FF3E3 - 8B 95 74FEFFFF        - mov edx,[ebp-0000018C]
Arcania.exe+FF3E9 - 8B 82 88040000        - mov eax,[edx+00000488]
Arcania.exe+FF3EF - 8B 8D 74FEFFFF        - mov ecx,[ebp-0000018C]
Arcania.exe+FF3F5 - 8B 89 88040000        - mov ecx,[ecx+00000488]
Arcania.exe+FF3FB - 8B 10                 - mov edx,[eax]
Arcania.exe+FF3FD - 8B 42 14              - mov eax,[edx+14]
Arcania.exe+FF400 - FF D0                 - call eax
Arcania.exe+FF402 - E9 630A0000           - jmp Arcania.exe+FFE6A
Arcania.exe+FF407 - 83 3D 58A53401 00     - cmp dword ptr [Arcania.exe+F4A558],00
Arcania.exe+FF40E - 74 29                 - je Arcania.exe+FF439
Arcania.exe+FF410 - 8B 0D 58A53401        - mov ecx,[Arcania.exe+F4A558]
Arcania.exe+FF416 - 89 8D FCFEFFFF        - mov [ebp-00000104],ecx
Arcania.exe+FF41C - 8B 8D FCFEFFFF        - mov ecx,[ebp-00000104]
Arcania.exe+FF422 - E8 899BF7FF           - call Arcania.exe+78FB0
Arcania.exe+FF427 - 83 78 10 00           - cmp dword ptr [eax+10],00
Arcania.exe+FF42B - 74 0C                 - je Arcania.exe+FF439
Arcania.exe+FF42D - C7 85 68FEFFFF 01000000 - mov [ebp-00000198],00000001
Arcania.exe+FF437 - EB 0A                 - jmp Arcania.exe+FF443
Arcania.exe+FF439 - C7 85 68FEFFFF 00000000 - mov [ebp-00000198],00000000
Arcania.exe+FF443 - 0FB6 95 68FEFFFF      - movzx edx,byte ptr [ebp-00000198]    //nop
Arcania.exe+FF44A - 85 D2                 - test edx,edx                         //nop
Arcania.exe+FF44C - 74 12                 - je Arcania.exe+FF460                 //nop
Arcania.exe+FF44E - 8B 45 08              - mov eax,[ebp+08]
Arcania.exe+FF451 - 50                    - push eax
Arcania.exe+FF452 - FF 15 8C76D200        - call dword ptr [Arcania.exe+92768C] //malloc that we'll use
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>122</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"hacking leftovers"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"memory allocation fix (attempt 1)-&gt;shit"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
//caused by CALL DWORD PTR DS:[&lt;&amp;vBase90.?GetHeapPointer@VManagedThread@@QAEPAXI@Z&gt;]
//returning 0
aobscan(Vision90Crash_AOB,8B 46 08 8B 0D * * * * 85 C0 74 18 39 0E)
registersymbol(Vision90Crash_AOB)
aobscan(CodeCave,CC B9 * * * * FF 25 * * * * 00 00)

label(Vision90Crash_HookStub)
label(Vision90Crash_Hook)
label(Vision90Crash_ValidHeapPointer)
label(Vision90Crash_ReturnHere)
label(Vision90Crash_GetNewHeapPointer)

Vision90Crash_AOB-3:
jmp short Vision90Crash_HookStub
Vision90Crash_ReturnHere:

Vision90Crash_AOB+4b:
Vision90Crash_HookStub:
jmp Vision90Crash_Hook

Vision90Crash_AOB+15:
Vision90Crash_GetNewHeapPointer:


CodeCave+e:
Vision90Crash_Hook:
  test eax,eax
  jne short Vision90Crash_ValidHeapPointer
    MOV EAX,DWORD [ESI+8]
    jmp Vision90Crash_GetNewHeapPointer
  Vision90Crash_ValidHeapPointer:
  pop edi    //original code
  pop esi    //original code
jmp Vision90Crash_ReturnHere

[disable]
unregistersymbol(Vision90Crash_AOB)

Vision90Crash_AOB-3:
pop edi    //original code
pop esi    //original code

{
Fix explanation:
6D0C4F1F   CC               INT3
6D0C4F20 &gt; 56               PUSH ESI
6D0C4F21   57               PUSH EDI
6D0C4F22   8BF1             MOV ESI,ECX
6D0C4F24   E8 F789F8FF      CALL Vision90.?GetThreadManager@Vision@@SAPAVVThreadManager@@XZ
6D0C4F29   8BC8             MOV ECX,EAX
6D0C4F2B   FF15 24E90E6D    CALL DWORD PTR DS:[&lt;&amp;vBase90.?GetExecutingThread@VThreadManager@@QAEPAVVManagedThread@@XZ&gt;]
6D0C4F31   8BF8             MOV EDI,EAX
6D0C4F33   85FF             TEST EDI,EDI
6D0C4F35   74 26            JE SHORT Vision90.6D0C4F5D
6D0C4F37   A1 C03C166D      MOV EAX,DWORD PTR DS:[6D163CC0]
6D0C4F3C   8D0440           LEA EAX,DWORD PTR DS:[EAX+EAX*2]
6D0C4F3F   03C0             ADD EAX,EAX
6D0C4F41   03C0             ADD EAX,EAX
6D0C4F43   03C0             ADD EAX,EAX
6D0C4F45   50               PUSH EAX
6D0C4F46   6A 00            PUSH 0
6D0C4F48   8BCF             MOV ECX,EDI
6D0C4F4A   FF15 34E90E6D    CALL DWORD PTR DS:[&lt;&amp;vBase90.?EnsureHeapSize@VManagedThread@@QAEXII@Z&gt;]
6D0C4F50   6A 00            PUSH 0
6D0C4F52   8BCF             MOV ECX,EDI

6D0C4F54   FF15 30E90E6D    CALL DWORD PTR DS:[&lt;&amp;vBase90.?GetHeapPointer@VManagedThread@@QAEPAXI@Z&gt;]  // if this returns 0 the game will normally crash
6D0C4F5A   5F               POP EDI //so HERE we should check if GetHeapPointer returned 0 and if so, jump to 6D0C4F5D.
6D0C4F5B   5E               POP ESI //but since we only have 3 bytes (2 POPs+retn)to do this, short jump to after the end of the function
6D0C4F5C   C3               RETN    //then long jump to our code cave

6D0C4F5D   8B46 08          MOV EAX,DWORD PTR DS:[ESI+8]    //&lt;-Vision90Crash_AOB
6D0C4F60   8B0D C03C166D    MOV ECX,DWORD PTR DS:[6D163CC0]
6D0C4F66   85C0             TEST EAX,EAX
6D0C4F68   74 18            JE SHORT Vision90.6D0C4F82
6D0C4F6A   390E             CMP DWORD PTR DS:[ESI],ECX
6D0C4F6C   73 34            JNB SHORT Vision90.6D0C4FA2
6D0C4F6E   85C0             TEST EAX,EAX
6D0C4F70   74 10            JE SHORT Vision90.6D0C4F82
6D0C4F72   50               PUSH EAX                       //execute that if GetHeapPointer returned 0
6D0C4F73   FF15 2CE90E6D    CALL DWORD PTR DS:[&lt;&amp;vBase90.?VBaseAlignedDealloc_rel@@YAXPAX@Z&gt;]
6D0C4F79   8B0D C03C166D    MOV ECX,DWORD PTR DS:[6D163CC0]
6D0C4F7F   83C4 04          ADD ESP,4
6D0C4F82   8D0449           LEA EAX,DWORD PTR DS:[ECX+ECX*2]
6D0C4F85   03C0             ADD EAX,EAX
6D0C4F87   03C0             ADD EAX,EAX
6D0C4F89   03C0             ADD EAX,EAX
6D0C4F8B   6A 10            PUSH 10
6D0C4F8D   50               PUSH EAX
6D0C4F8E   FF15 28E90E6D    CALL DWORD PTR DS:[&lt;&amp;vBase90.?VBaseAlignedAlloc_rel@@YAPAXIH@Z&gt;]
6D0C4F94   8946 08          MOV DWORD PTR DS:[ESI+8],EAX
6D0C4F97   8B0D C03C166D    MOV ECX,DWORD PTR DS:[6D163CC0]
6D0C4F9D   83C4 08          ADD ESP,8
6D0C4FA0   890E             MOV DWORD PTR DS:[ESI],ECX
6D0C4FA2   8B46 08          MOV EAX,DWORD PTR DS:[ESI+8]
6D0C4FA5   5F               POP EDI
6D0C4FA6   5E               POP ESI
6D0C4FA7   C3               RETN
6D0C4FA8   CC               INT3
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"memory allocation fix (attempt 2)-&gt;shit"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[enable]
aobscan(Vision90Crash_AOB,e8 * * * * 8D 4C 24 38 51 8B CF e8)
registersymbol(Vision90Crash_AOB)
aobscan(CodeCave,CC B9 * * * * FF 25 * * * * 00 00)

label(Vision90Crash_Hook)
label(Vision90Crash_ReturnHere)

Vision90Crash_AOB-7:
jmp Vision90Crash_Hook
Vision90Crash_ReturnHere:

CodeCave+e:
Vision90Crash_Hook:
//exit the function if  CALL Vision90.?GetDestVertexPosition@VisVertexAnimResult_cl@@QAEHAAPAM@Z returned 0
  mov eax,dword [esp+10]      //eax=address of the DestVertexPosition buffer
  test eax,eax
  je Vision90Crash_AOB+D60    //+d60:they said "keep your functions as small as possible"....
    LEA EAX,DWORD [ESP+20]    //original code
    push eax                  //original code
jmp Vision90Crash_ReturnHere

[disable]
unregistersymbol(Vision90Crash_AOB)

Vision90Crash_AOB-7:
LEA EAX,DWORD [ESP+20]    //original code
push eax                  //original code

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
