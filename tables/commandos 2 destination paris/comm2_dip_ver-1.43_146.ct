<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>65</ID>
      <Description>"Ammo v2"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : commandos 2 destination paris
  Version: 1.43
  Date   : 2017-01-23
  Author : Ahsan Iqbal (3xd_tango)

  This script does inf. Ammo and Med
}

[ENABLE]

aobscanmodule(Ammo,comm2.exe,49 89 48 04 C3 90)
aobscanmodule(Ammo1,comm2.exe,FF 4E 04 8A 44 24 14)
aobscanmodule(Ammo2,comm2.exe,89 42 08 8B 44 24 10 50)
aobscanmodule(Ammo3,comm2.exe,89 11 0F 84 A0 00 00 00)
aobscanmodule(Ammo4,comm2.exe,89 08 75 2E 8B 83 B0 00 00 00 57 85 C0)
aobscanmodule(Ammo5,comm2.exe,89 08 74 14 8B 46 20 8B 4E 08 6A 01)
aobscanmodule(Ammo6,comm2.exe,8B 41 0C 85 C0 76 04 48 89 41 0C)
aobscanmodule(Ammo7,comm2.exe,FF 08 C3 90 90 90 90 90)
aobscanmodule(Ammo8,comm2.exe,89 45 00 5D 59 C3 8B 4D 04)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)
alloc(newmem3,$1000)
alloc(newmem4,$1000)
alloc(newmem5,$1000)
alloc(newmem6,$1000)
alloc(newmem7,$1000)
alloc(newmem8,$1000)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)
label(code3)
label(return3)
label(code4)
label(return4)
label(code5)
label(return5)
label(code6)
label(return6)
label(code7)
label(return7)
label(code8)
label(return8)

newmem:
  mov [eax+04],ecx
  mov [eax+04],(int)999
  ret
  nop
  jmp return

newmem1:
  dec [esi+04]
  mov al,[esp+14]
  mov [esi+04],(int)999
  nop
  nop
  jmp return1

newmem2:
 mov [edx+08],eax
 mov [edx+08],(int)999
 mov eax,[esp+10]
  nop
  nop
 jmp return2

newmem3:
  mov [ecx],edx
  mov [ecx],(int)999
  je comm2.exe+4141F8
  nop
  nop
  jmp return3

newmem4:
  mov [ecx],edx
  mov [eax],(int)999
  jne comm2.exe+2BB72D
  mov eax,[ebx+000000B0]
  nop
  nop
  jmp return4

newmem5:
  mov [eax],ecx
  mov [eax],(int)999
  je comm2.exe+414A3D
  mov eax,[esi+20]
  nop
  nop
  jmp return5

newmem6:
  mov [ecx+0C],(int)999
  test eax,eax
  nop
  nop
  jmp return6

newmem7:
  mov [eax],(int)999
  ret
  nop
  nop
  jmp return7

newmem8:
  mov [ebp+00],eax
  mov [ebp+00],(int)999
  pop ebp
  pop ecx
  jmp return8

code:
  mov [eax+04],ecx
  ret
  nop
  jmp return

code1:
  dec [esi+04]
  mov al,[esp+14]
  jmp return1

code2:
  mov [edx+08],eax
  mov eax,[esp+10]
  jmp return2

code3:
  mov [ecx],edx
  je comm2.exe+4141F8
  jmp return3

code4:
  mov [eax],ecx
  jne comm2.exe+2BB72D
  mov eax,[ebx+000000B0]
  jmp return4

code5:
  mov [eax],ecx
  je comm2.exe+414A3D
  mov eax,[esi+20]
  jmp return5

code6:
  mov eax,[ecx+0C]
  test eax,eax
  jmp return6

code7:
  dec [eax]
  ret
  nop
  nop
  jmp return7

code8:
  mov [ebp+00],eax
  pop ebp
  pop ecx
  jmp return8

Ammo+01:
  jmp newmem
return:
registersymbol(Ammo)

Ammo1:
  jmp newmem1
  nop
  nop
return1:
registersymbol(Ammo1)

Ammo2:
  jmp newmem2
  nop
  nop
return2:
registersymbol(Ammo2)

Ammo3:
  jmp newmem3
  nop
  nop
  nop
return3:
registersymbol(Ammo3)

Ammo4:
  jmp newmem4
  nop
  nop
  nop
  nop
  nop
return4:
registersymbol(Ammo4)

Ammo5:
  jmp newmem5
  nop
  nop
return5:
registersymbol(Ammo5)

Ammo6:
  jmp newmem6
return6:
registersymbol(Ammo6)

Ammo7:
  jmp newmem7
return7:
registersymbol(Ammo7)

Ammo8:
  jmp newmem8
return8:
registersymbol(Ammo8)

[DISABLE]

Ammo+01:
  db 89 48 04 C3 90
Ammo1:
  db FF 4E 04 8A 44 24 14
Ammo2:
  db 89 42 08 8B 44 24 10
Ammo3:
  db 89 11 0F 84 A0 00 00 00
Ammo4:
  db 89 08 75 2E 8B 83 B0 00 00 00
Ammo5:
  db 89 08 74 14 8B 46 20
Ammo6:
  db 8B 41 0C 85 C0
Ammo7:
  db FF 08 C3 90 90
Ammo8:
  db 89 45 00 5D 59

unregistersymbol(Ammo)
dealloc(newmem)
unregistersymbol(Ammo1)
dealloc(newmem1)
unregistersymbol(Ammo2)
dealloc(newmem2)
unregistersymbol(Ammo3)
dealloc(newmem3)
unregistersymbol(Ammo4)
dealloc(newmem4)
unregistersymbol(Ammo5)
dealloc(newmem5)
unregistersymbol(Ammo6)
dealloc(newmem6)
unregistersymbol(Ammo7)
dealloc(newmem7)
unregistersymbol(Ammo8)
dealloc(newmem8)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"god mod v2"</Description>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : commandos 2 destination paris
  Version: 1.43
  Date   : 2017-01-23
  Author : Ahsan Iqbal (3xd_tango)

  This script does God MODv2
}

[ENABLE]

aobscanmodule(inf,comm2.exe,67 8B 0E 8B 56 28 89 91 80 01 00 00 8B 7E 28)
aobscanmodule(inf1,comm2.exe,D9 9E 1C 02 00 00 D9 86 1C 02 00 00)
aobscanmodule(inf2,comm2.exe,D9 96 24 02 00 00 D8 1D C4 66 AE 00 DF)
alloc(newmem,$1000)
alloc(newmem1,$1000)
alloc(newmem2,$1000)

label(code)
label(return)
label(OHK)
label(GODMODE)
label(code1)
label(return1)
label(code2)
label(return2)

newmem:
cmp [ecx+000000C4],0
jne code
je GODMODE

newmem1:
  fstp dword ptr [esi+0000021C]
  mov [esi+0000021C],(float)2000
  nop
  nop
  jmp return1

newmem2:
  fst dword ptr [esi+00000224]
  mov [esi+00000224],(float)1000
  nop
  nop
  jmp return2

code:
  mov edx,[esi+28]
  mov [ecx+00000180],edx
  jmp return

code1:
  fstp dword ptr [esi+0000021C]
  jmp return1

code2:
  fst dword ptr [esi+00000224]
  jmp return2

OHK:
push ebx
mov ebx,00
mov [esi+28],ebx
pop ebx
jmp code

GODMODE:
mov edx,[esi+28]
push ebx
mov ebx,[ecx+0000017C]
sub ebx,10
mov [ecx+00000180],ebx
pop ebx
mov [ecx+0000009C],(int)268451840
nop
nop
jmp return

inf+03:
  jmp newmem
  nop
  nop
  nop
  nop
return:
registersymbol(inf)

inf1:
  jmp newmem1
  nop
return1:
registersymbol(inf1)

inf2:
  jmp newmem2
  nop
return2:
registersymbol(inf2)

[DISABLE]

inf+03:
  db 8B 56 28 89 91 80 01 00 00

inf1:
  db D9 9E 1C 02 00 00

inf2:
  db D9 96 24 02 00 00

unregistersymbol(inf)
dealloc(newmem)
unregistersymbol(inf1)
dealloc(newmem1)
unregistersymbol(inf2)
dealloc(newmem2)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>playerbase</Name>
      <Address>0A300000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>player</Name>
      <Address>08C10000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo</Name>
      <Address> 005A4FFE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo1</Name>
      <Address> 0086BCBD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo2</Name>
      <Address> 0082A187</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo3</Name>
      <Address> 00814150</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo4</Name>
      <Address> 006BB6FB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo5</Name>
      <Address> 00814A25</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo6</Name>
      <Address> 0079CE17</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo7</Name>
      <Address> 0082C911</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Ammo8</Name>
      <Address> 0082189C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inf</Name>
      <Address> 006E61B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inf1</Name>
      <Address> 006B66FE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>inf2</Name>
      <Address> 006B685D</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
