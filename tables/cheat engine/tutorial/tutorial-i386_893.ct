<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <CheatEntries>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Pass all"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Step 2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT2,Tutorial-i386.exe,75 2C 8B 83 68 04 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90
code:
  //jne Tutorial-i386.exe+23AFB
  mov eax,[ebx+00000468]
  jmp return

INJECT2:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(INJECT2)

[DISABLE]

INJECT2:
  db 75 2C 8B 83 68 04 00 00

unregistersymbol(INJECT2)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Step 3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT3,Tutorial-i386.exe,75 2C 8B 83 74 04 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90
code:
  //jne Tutorial-i386.exe+23F5B
  mov eax,[ebx+00000474]
  jmp return

INJECT3:
  jmp newmem
  nop
  nop
  nop
return:
registersymbol(INJECT3)

[DISABLE]

INJECT3:
  db 75 2C 8B 83 74 04 00 00

unregistersymbol(INJECT3)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Step 4"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT4,Tutorial-i386.exe,7A 43 72 41 DD 05 D0 D7 5D 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90 90 90
code:
  //jp Tutorial-i386.exe+24499
  //jb Tutorial-i386.exe+24499
  fld qword ptr [Tutorial-i386.exe+1DD7D0]
  jmp return

INJECT4:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT4)

[DISABLE]

INJECT4:
  db 7A 43 72 41 DD 05 D0 D7 5D 00

unregistersymbol(INJECT4)
dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>7</ID>
              <Description>"Step 4"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(INJECT44,Tutorial-i386.exe,7A 2E 72 2C 8B 83 68 04 00 00) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90 90 90
code:
  //jp Tutorial-i386.exe+24499
  //jb Tutorial-i386.exe+24499
  mov eax,[ebx+00000468]
  jmp return

INJECT44:
  jmp newmem
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT44)

[DISABLE]

INJECT44:
  db 7A 2E 72 2C 8B 83 68 04 00 00

unregistersymbol(INJECT44)
dealloc(newmem)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Step 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT5,Tutorial-i386.exe,00 00 8B 00 3B 45 F4 74 02 EB 1C 8B 45 F8) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
  mov eax,[ebp-08]
  jmp return

code:
  //je Tutorial-i386.exe+2481C
 // jmp Tutorial-i386.exe+24838
 // mov eax,[ebp-08]
  //jmp return

INJECT5+07:
  jmp newmem
  nop
  nop
return:
registersymbol(INJECT5)

[DISABLE]

INJECT5+07:
  db 74 02 EB 1C 8B 45 F8

unregistersymbol(INJECT5)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Step 6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT6,Tutorial-i386.exe,63 00 8B 00 3B 45 F4 74 02 EB 1C 8B 45 F8) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

  mov eax,[ebp-08]
  jmp return

code:
  //je Tutorial-i386.exe+24C11
  //jmp Tutorial-i386.exe+24C2D
  //mov eax,[ebp-08]
 // jmp return

INJECT6+07:
  jmp newmem
  nop
  nop
return:
registersymbol(INJECT6)

[DISABLE]

INJECT6+07:
  db 74 02 EB 1C 8B 45 F8

unregistersymbol(INJECT6)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"Step 7"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT7,Tutorial-i386.exe,75 1A 39 F2 75 16) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90 90 90 90 90

code:
  //jne Tutorial-i386.exe+25271
  //cmp edx,esi
  //jne Tutorial-i386.exe+25271
  jmp return

INJECT7:
  jmp newmem
  nop

return:
registersymbol(INJECT7)

[DISABLE]

INJECT7:
  db 75 1A 39 F2 75 16

unregistersymbol(INJECT7)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Step 8"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT8,Tutorial-i386.exe,74 02 EB 1C 8B 45 F8 8B 80 70) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:
db 90 90 90 90
code:
  //je Tutorial-i386.exe+25F73
  //jmp Tutorial-i386.exe+25F8F
  mov eax,[ebp-08]
  jmp return

INJECT8:
  jmp newmem
  nop
  nop
return:
registersymbol(INJECT8)

[DISABLE]

INJECT8:
  db 74 02 EB 1C 8B 45 F8

unregistersymbol(INJECT8)
dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Step 9"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,Tutorial-i386.exe,D8 6B 04 D9 5D D0) // should be unique
alloc(newmem,$1000)

label(originalcode)
label(return)
alloc(nil,4)
alloc(full,4)

full:
dd (float)100
nil:
dd (float)0

{
//Adds health to players instead of subtract
newmem:
  cmp [ebx+10],1
  jne originalcode
  fadd dword ptr [ebx+04]
  fstp dword ptr [ebp-30]
  jmp return
}

//one hit kill on enemy:
{
newmem:
  cmp [ebx+10],1
  je originalcode
  fsubr dword ptr [nil]
  fstp dword ptr [ebp-30]
  jmp return
}

//Refills health after every hit

newmem:
  cmp [ebx+10],1
  jne originalcode
  fsubr dword ptr [full]
  fstp dword ptr [ebp-30]
  jmp return


originalcode:
  fsubr dword ptr [ebx+04]
  fstp dword ptr [ebp-30]
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db D8 6B 04 D9 5D D0

unregistersymbol(INJECT)
dealloc(newmem)
dealloc(nil)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of jmp Tutorial-i386.exe+2623E</Description>
      <Address>004261A1</Address>
      <ModuleName>Tutorial-i386.exe</ModuleName>
      <ModuleNameOffset>261A1</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>4F</Byte>
        <Byte>01</Byte>
        <Byte>0F</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E9</Byte>
        <Byte>98</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>75</Byte>
        <Byte>CC</Byte>
        <Byte>DB</Byte>
        <Byte>45</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>INJECT9</Name>
      <Address>004261AC</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
