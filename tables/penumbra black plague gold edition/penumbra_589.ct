<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>7</ID>
      <Description>"[Enable] (Overture)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(batteryreadinmenuAOB,D9 80 20 03 00 00 6A 00)
registersymbol(batteryreadinmenuAOB)
aobscan(batteryreadonhighlightinmenuAOB,D9 81 20 03 00 00 57)
registersymbol(batteryreadonhighlightinmenuAOB)
aobscan(healthwritegeneralAOB,D9 91 1C 03 00 00)
registersymbol(healthwritegeneralAOB)

label(pBase)
registersymbol(pBase)
label(fMinHealth)
registersymbol(fMinHealth)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

label(newmem6)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [pBase],eax

originalcode:
fld dword ptr [eax+00000320]

exit:
jmp returnhere

///

newmem2:
mov [pBase],ecx

originalcode2:
fld dword ptr [ecx+00000320]

exit2:
jmp returnhere2

///

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
fadd dword ptr [ecx+0000031C]
mov [pBase],ecx
pushfd
pushad
fcom dword ptr [fMinHealth]
fnstsw ax
test ah,1
je originalcode6
/*test ah,41
jp originalcode6*/
fstp st(0)
fld dword ptr [fMinHealth]

originalcode6:
popad
popfd
//fadd dword ptr [ecx+0000031C]

exit6:
jmp returnhere6

///
pBase:
dd 0
fMinHealth:
dd 0
///

batteryreadinmenuAOB: //"Penumbra.exe"+4E7C2:
jmp newmem
nop
returnhere:

batteryreadonhighlightinmenuAOB: //"Penumbra.exe"+4E923:
jmp newmem2
nop
returnhere2:

healthwritegeneralAOB-c: //"Penumbra.exe"+7EE30:
jmp newmem6
nop
returnhere6:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
batteryreadinmenuAOB: //"Penumbra.exe"+4E7C2:
db D9 80 20 03 00 00
//Alt: fld dword ptr [eax+00000320]
unregistersymbol(batteryreadinmenuAOB)
batteryreadonhighlightinmenuAOB: //"Penumbra.exe"+4E923:
db D9 81 20 03 00 00
//Alt: fld dword ptr [ecx+00000320]
unregistersymbol(batteryreadonhighlightinmenuAOB)
healthwritegeneralAOB-c: //"Penumbra.exe"+7EE24:
db D8 81 1C 03 00 00
//Alt: fadd dword ptr [ecx+0000031C]
unregistersymbol(healthwritegeneralAOB)

unregistersymbol(pBase)
unregistersymbol(fMinHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>14</ID>
          <Description>"Undead"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthzeroaction1AOB,8B 89 98 02 00 00 E8 ** ** ** ** C2 04 00 CC CC CC CC CC CC CC CC CC 8B)
registersymbol(healthzeroaction1AOB)
aobscan(healthzeroaction2AOB,8B 89 98 02 00 00 E8 ** ** ** ** C2 04 00 CC CC CC CC CC CC CC CC CC D9)
registersymbol(healthzeroaction2AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pBase],ecx
jne originalcode
mov [ecx+31c],(float)1.0
ret 0004

originalcode:
mov ecx,[ecx+00000298]

exit:
jmp returnhere

///

newmem2:
cmp [pBase],ecx
jne originalcode2
mov [ecx+31c],(float)1.0
ret 0004

originalcode2:
mov ecx,[ecx+00000298]

exit2:
jmp returnhere2

///

healthzeroaction1AOB: //"Penumbra.exe"+7EE59:
jmp newmem
nop
returnhere:

healthzeroaction2AOB: //"Penumbra.exe"+7EE09:
jmp newmem2
nop
returnhere2:

fMinHealth:
dd (float)50.0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthzeroaction1AOB: //"Penumbra.exe"+7EE59:
db 8B 89 98 02 00 00
//Alt: mov ecx,[ecx+00000298]
unregistersymbol(healthzeroaction1AOB)
healthzeroaction2AOB: //"Penumbra.exe"+7EE09:
db 8B 89 98 02 00 00
//Alt: mov ecx,[ecx+00000298]
unregistersymbol(healthzeroaction2AOB)
fMinHealth:
dd 0
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>15</ID>
              <Description>"Min Health"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fMinHealth</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Inf. Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(batterywriteonuseAOB,D9 91 20 03 00 00)
registersymbol(batterywriteonuseAOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fst dword ptr [ecx+00000320]
cmp dword ptr [ecx+320],(float)10.0
jge originalcode
mov dword ptr [ecx+320],(float)10.0

originalcode:
//fst dword ptr [ecx+00000320]

exit:
jmp returnhere

///

batterywriteonuseAOB: //"Penumbra.exe"+7ED8A:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
batterywriteonuseAOB: //"Penumbra.exe"+7ED8A:
db D9 91 20 03 00 00
//Alt: fst dword ptr [ecx+00000320]
unregistersymbol(batterywriteonuseAOB)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>31C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>320</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"[Enable] (Black Plague)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthwritegeneralAOB,D8 81 10 03 00 00)
registersymbol(healthwritegeneralAOB)
label(zerohealthaction1AOB)
registersymbol(zerohealthaction1AOB)

label(bUndead)
registersymbol(bUndead)
label(bInfBattery)
registersymbol(bInfBattery)
label(pBase)
registersymbol(pBase)
label(fMinHealth)
registersymbol(fMinHealth)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(healthchkstart)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fadd dword ptr [ecx+00000310]
pushfd
pushad
cmp byte ptr [bInfBattery],1
jne healthchkstart
cmp dword ptr [ecx+314],(float)10.0
jge originalcode
mov dword ptr [ecx+314],(float)10.0

healthchkstart:
mov [pBase],ecx
fcom dword ptr [fMinHealth]
fnstsw ax
test ah,1
je originalcode
/*test ah,41
jp originalcode*/
fstp st(0)
fld dword ptr [fMinHealth]

originalcode:
popad
popfd
//fadd dword ptr [ecx+00000310]

exit:
jmp returnhere

///

newmem2:
cmp [pBase],ecx
jne originalcode2
cmp byte ptr [bUndead],1
jne originalcode2
mov [ecx+310],(float)1.0
ret 0004

originalcode2:
mov ecx,[ecx+0000028C]

exit2:
jmp returnhere2

///
bUndead:
db 0
bInfBattery:
db 0
pBase:
dd 0
fMinHealth:
dd 0
///

healthwritegeneralAOB: //"Penumbra.exe"+99B34:
jmp newmem
nop
returnhere:

healthwritegeneralAOB+35: //"Penumbra.exe"+99B69:
zerohealthaction1AOB:
jmp newmem2
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthwritegeneralAOB: //"Penumbra.exe"+99B34:
db D8 81 10 03 00 00
//Alt: fadd dword ptr [ecx+00000310]
unregistersymbol(healthwritegeneralAOB)
zerohealthaction1AOB: //"Penumbra.exe"+99B69:
db 8B 89 8C 02 00 00
//Alt: mov ecx,[ecx+0000028C]
unregistersymbol(zerohealthaction1AOB)

unregistersymbol(bUndead)
unregistersymbol(bInfBattery)
unregistersymbol(pBase)
unregistersymbol(fMinHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Undead"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(zerohealthaction2AOB,8B 89 8C 02 00 00)
registersymbol(zerohealthaction2AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pBase],ecx
jne originalcode
mov [ecx+310],(float)1.0
ret 0004

originalcode:
mov ecx,[ecx+0000028C]

exit:
jmp returnhere

///

zerohealthaction2AOB: //"Penumbra.exe"+99B19:
jmp newmem
nop
returnhere:

bUndead:
db 1

fMinHealth:
dd (float)50.0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
zerohealthaction2AOB: //"Penumbra.exe"+99B19:
db 8B 89 8C 02 00 00
//Alt: mov ecx,[ecx+0000028C]
unregistersymbol(zerohealthaction2AOB)
bUndead:
db 0
fMinHealth:
dd 0
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>25</ID>
              <Description>"Min Health"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fMinHealth</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"Inf. Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInfBattery:
db 1

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInfBattery:
db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>310</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>314</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"[Enable] (Requiem)"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(healthgeneralwriteAOB,D8 81 14 03 00 00)
registersymbol(healthgeneralwriteAOB)
label(zerohealthaction1AOB)
registersymbol(zerohealthaction1AOB)

label(bUndead)
registersymbol(bUndead)
label(bInfOxygen)
registersymbol(bInfOxygen)
label(bInfBattery)
registersymbol(bInfBattery)
label(pBase)
registersymbol(pBase)
label(fMinHealth)
registersymbol(fMinHealth)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(healthchkstart)
label(oxygenchkstart)

label(newmem2)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fadd dword ptr [ecx+00000314]
pushfd
pushad
cmp byte ptr [bInfBattery],1
jne oxygenchkstart
cmp dword ptr [ecx+318],(float)10.0
jge oxygenchkstart
mov dword ptr [ecx+318],(float)10.0

oxygenchkstart:
cmp byte ptr [bInfOxygen],1
jne healthchkstart
cmp dword ptr [ecx+320],(float)10.0
jge healthchkstart
mov dword ptr [ecx+320],(float)10.0

healthchkstart:
mov [pBase],ecx
fcom dword ptr [fMinHealth]
fnstsw ax
test ah,1
je originalcode
/*test ah,41
jp originalcode*/
fstp st(0)
fld dword ptr [fMinHealth]

originalcode:
popad
popfd
//fadd dword ptr [ecx+00000314]

exit:
jmp returnhere

///

newmem2:
cmp [pBase],ecx
jne originalcode2
cmp byte ptr [bUndead],1
jne originalcode2
mov [ecx+314],(float)1.0
ret 0004

originalcode2:
mov ecx,[ecx+00000290]

exit2:
jmp returnhere2

///
bUndead:
db 0
bInfOxygen:
db 0
bInfBattery:
db 0
pBase:
dd 0
fMinHealth:
dd 0
///

healthgeneralwriteAOB: //"Requiem.exe"+9ABA4:
jmp newmem
nop
returnhere:

healthgeneralwriteAOB+35:
zerohealthaction1AOB: //"Requiem.exe"+9ABD9:
jmp newmem2
nop
returnhere2:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
healthgeneralwriteAOB: //"Requiem.exe"+9ABA4:
db D8 81 14 03 00 00
//Alt: fadd dword ptr [ecx+00000314]
unregistersymbol(healthgeneralwriteAOB)
zerohealthaction1AOB: //"Requiem.exe"+9ABD9:
db 8B 89 90 02 00 00
//Alt: mov ecx,[ecx+00000290]
unregistersymbol(zerohealthaction1AOB)

unregistersymbol(bUndead)
unregistersymbol(bInfOxygen)
unregistersymbol(bInfBattery)
unregistersymbol(pBase)
unregistersymbol(fMinHealth)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Undead"</Description>
          <Options moHideChildren="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(zerohealthaction2AOB,8B 89 90 02 00 00)
registersymbol(zerohealthaction2AOB)

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [pBase],ecx
jne originalcode
mov [ecx+314],(float)1.0
ret 0004

originalcode:
mov ecx,[ecx+00000290]

exit:
jmp returnhere

///

zerohealthaction2AOB: //"Requiem.exe"+9AB89:
jmp newmem
nop
returnhere:

bUndead:
db 1

fMinHealth:
dd (float)50.0


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
zerohealthaction2AOB: //"Requiem.exe"+9AB89:
db 8B 89 90 02 00 00
//Alt: mov ecx,[ecx+00000290]
unregistersymbol(zerohealthaction2AOB)
bUndead:
db 0
fMinHealth:
dd 0
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>26</ID>
              <Description>"Min Health"</Description>
              <Color>80000008</Color>
              <VariableType>Float</VariableType>
              <Address>fMinHealth</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Inf. Oxygen"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInfOxygen:
db 1

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInfOxygen:
db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>29</ID>
          <Description>"Inf. Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
bInfBattery:
db 1

 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
bInfBattery:
db 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>22</ID>
          <Description>"Health"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>314</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>28</ID>
          <Description>"Oxygen"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>320</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>23</ID>
          <Description>"Battery"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>pBase</Address>
          <Offsets>
            <Offset>318</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>13</ID>
      <Description>"[old/testing]"</Description>
      <Options moHideChildren="1"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>10</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>068ED5DC</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"No description"</Description>
          <Color>80000008</Color>
          <VariableType>Float</VariableType>
          <Address>068ED5E0</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"Auto Assemble script"</Description>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov [ecx+320],(float)1.0

originalcode:
//mov [ecx+00000320],00000000

exit:
jmp returnhere

///

"Penumbra.exe"+7EDBA:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"Penumbra.exe"+7EDBA:
db C7 81 20 03 00 00 00 00 00 00
//Alt: mov [ecx+00000320],00000000
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>battery menu read Code :fld dword ptr [eax+00000320]</Description>
      <Address>0044E7C2</Address>
      <ModuleName>Penumbra.exe</ModuleName>
      <ModuleNameOffset>4E7C2</ModuleNameOffset>
      <Before>
        <Byte>80</Byte>
        <Byte>8C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>80</Byte>
        <Byte>20</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>6A</Byte>
        <Byte>00</Byte>
        <Byte>D8</Byte>
        <Byte>0D</Byte>
        <Byte>58</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>battery menu highlight read Code :fld dword ptr [ecx+00000320]</Description>
      <Address>0044E923</Address>
      <ModuleName>Penumbra.exe</ModuleName>
      <ModuleNameOffset>4E923</ModuleNameOffset>
      <Before>
        <Byte>88</Byte>
        <Byte>8C</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>81</Byte>
        <Byte>20</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>57</Byte>
        <Byte>83</Byte>
        <Byte>EC</Byte>
        <Byte>08</Byte>
        <Byte>DD</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>battery write Code :fst dword ptr [ecx+00000320]</Description>
      <Address>0047ED8A</Address>
      <ModuleName>Penumbra.exe</ModuleName>
      <ModuleNameOffset>7ED8A</ModuleNameOffset>
      <Before>
        <Byte>81</Byte>
        <Byte>20</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>91</Byte>
        <Byte>20</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D8</Byte>
        <Byte>1D</Byte>
        <Byte>88</Byte>
        <Byte>3D</Byte>
        <Byte>64</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>batteryreadinmenuAOB</Name>
      <Address>0044E7C2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>batteryreadonhighlightinmenuAOB</Name>
      <Address>0044E923</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthzeroaction1AOB</Name>
      <Address>0047EE59</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthzeroaction2AOB</Name>
      <Address>0047EE09</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>batterywriteonuseAOB</Name>
      <Address>0047ED8A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthwritegeneralAOB</Name>
      <Address>00499B34</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>healthgeneralwriteAOB</Name>
      <Address>0049ABA4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>zerohealthaction1AOB</Name>
      <Address>0049ABD9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bUndead</Name>
      <Address>03B700AD</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInfOxygen</Name>
      <Address>03B700AE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>bInfBattery</Name>
      <Address>03B700AF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pBase</Name>
      <Address>03B700B0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>fMinHealth</Name>
      <Address>03B700B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>zerohealthaction2AOB</Name>
      <Address>0049AB89</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>http://forum.cheatengine.org/viewtopic.php?p=5539713#5539713</Comments>
</CheatTable>
