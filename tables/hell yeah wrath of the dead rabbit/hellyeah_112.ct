<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>4</ID>
      <Description>"Inf. Ammo"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(infammoAOB1,D9 E8 D8 AB 9C 02 00 00 D9 9B 9C 02 00 00)
aobscan(infammoAOB2,D9 05 ** ** ** ** D8 AB A0 02 00 00 D9 9B A0 02 00 00 8D 83 14 03 00 00 83 78 08 00 0F 84 9D 00 00 00)
aobscan(infammoAOB6,83 7C 90 08 00 0F 9F C0 0F B6 C0 89 45 F0)
label(infammoAOB1_jmp)
label(infammoAOB2_jmp)
label(infammoAOB6_jmp)
registersymbol(infammoAOB1_jmp)
registersymbol(infammoAOB2_jmp)
registersymbol(infammoAOB6_jmp)

alloc(newmem6,2048) //2kb should be enough
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here
cmp dword ptr [eax+edx*4+08],01
jg originalcode6
mov dword ptr [eax+edx*4+08],02

originalcode6:
cmp dword ptr [eax+edx*4+08],00

exit6:
jmp returnhere6

infammoAOB6:                           //04E7D3E7:
infammoAOB6_jmp:
jmp newmem6
returnhere6:

alloc(newmem2,2048) //2kb should be enough
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+000002A0]
cmp dword ptr [ebx+000002A0],(float)1.0
jge exit2
mov dword ptr [ebx+000002A0],(float)1.0

originalcode2:
//fstp dword ptr [ebx+000002A0]

exit2:
jmp returnhere2

infammoAOB2+C:                         //04E8768C:
infammoAOB2_jmp:
jmp newmem2
nop
returnhere2:

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
fstp dword ptr [ebx+0000029C]
cmp dword ptr [ebx+0000029C],(float)1.0
jge exit
mov dword ptr [ebx+0000029C],(float)1.0

originalcode:
//fstp dword ptr [ebx+0000029C]

exit:
jmp returnhere

infammoAOB1+8:                         //04FC0F4A:
infammoAOB1_jmp:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem6)
infammoAOB6_jmp:                       //04E7D3E7:
db 83 7C 90 08 00
//Alt: cmp dword ptr [eax+edx*4+08],00
dealloc(newmem2)
infammoAOB2_jmp:                       //04E8768C:
db D9 9B A0 02 00 00
//Alt: fstp dword ptr [ebx+000002A0]
dealloc(newmem)
infammoAOB1_jmp:                       //04FC0F4A:
db D9 9B 9C 02 00 00
//Alt: fstp dword ptr [ebx+0000029C]
unregistersymbol(infammoAOB6_jmp)
unregistersymbol(infammoAOB2_jmp)
unregistersymbol(infammoAOB1_jmp)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>9</ID>
      <Description>"Dash Instant Charge"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
aobscan(dashinstantchargeAOB1,0F B6 81 D4 02 00 00 C3)
label(dashinstantchargeAOB1_jmp)
registersymbol(dashinstantchargeAOB1_jmp)

alloc(newmem,2048) //2kb should be enough
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov byte ptr [ecx+000002D4],1

originalcode:
movzx eax,byte ptr [ecx+000002D4]

exit:
jmp returnhere

dashinstantchargeAOB1:                       //052655C0:
dashinstantchargeAOB1_jmp:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
dashinstantchargeAOB1_jmp:                   //052655C0:
db 0F B6 81 D4 02 00 00
//Alt: movzx eax,byte ptr [ecx+000002D4]
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
