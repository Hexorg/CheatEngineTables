<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="16">
  <CheatEntries>
    <CheatEntry>
      <ID>57</ID>
      <Description>"[X] &lt;== Ravensword Shadowlands v4.2.2.78157 SR Script 1.0-M2A"</Description>
      <Options moHideChildren="1"/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{
===========================================
 Game Title    : Ravensword Shadowlands
 Game Version  : 4.2.2.78157
 Game Sponsor  : SKIDROW
 Proces Name   : Ravensword2.exe
 Script Version: 1.0 (JIT - Approach 2)
 CE Version    : 6.3
 Release date  : 12-Dec-2013
 Author        : Recifense
 History:
 12-Dec-13: First Release
 Features:
 - Fast Level Up (a level per kill)
 - Minimum Attribute Points
 - Minimum Talent Points
 - Minimum Reputation
 - God Mode
 - Full Energy
 - Mono JIT system
===========================================
}

//=========================================
// Definitions
define(APPN,"Mono.dll")
define(LUDO,"Ravensword2.exe")

//=========================================
define(ctSMTD,50)     // MTD Structure Size (#80)
//=========================================
// These can be changed
define(ctMGLD,#63000) // Minimum Gold
define(ctMAPT,#10)    // Minimum Attribute Points
define(ctMTPT,#5)     // Minimum Talent Points
define(ctMREP,#400)   // Minimum Reputation
//=========================================
// Structures
struct HMD            // Hacked Method Info
 iHMStat: dd ?        // 0 = Not Installed, 1 = Installed
 iOMSize: dd ?        // Size of the Original Method
 aOCName: resb 16     // Name of the Class  (C type)
 aOMName: resb 16     // Name of the Method (C type)
 iOMAddr: dd ?        // Original Method Current Code Address
 iHMDelt: dd ?        // Delta for Hacking Point
 iHMSize: dd ?        // Size of the array for hacking
 aobOMTD: resb 8      // Original HP AOB (for asserting and restore)
 aobHMTD: resb 8      // AOB of Hacking Code (for replacing original)
 iHMEntr: dd ?        // Hacking Entry Point Address
 iHMBack: dd ?        // Hacking Return Address
 pOMStru: dd ?        // Pointer to Method Structure (for debugging)
endstruct

struct JIT            // Mono JIt Info
 pMethod: dd ?        // Pointer to Method
 dd ?
 iMDAddr: dd ?        // Code Start Memory Address
 dd ?
 iMDSize: dd ?        // Method code size
endstruct

struct MMD            // More Info of Mono Method MDI
 iIDValu: dd ?        // Method ID Number (&lt;&gt;0)
 wMIndex: dw ?        // Method Index
 dw ?
 pMClass: dd ?        // Pointer to Class
 dd ?
 pMDName: dd ?        // Pointer to Method ASCII name
endstruct

struct STK
  oldebp: dd ?
  retadd: dd ?
  profil: dd ?
  method: dd ?
  jitnfo: dd ?
  result: dd ?
endstruct

//=========================================
[ENABLE]
//=========================================
alloc(MyMono,8192,APPN)
alloc(MyProfiler,4096,APPN)
//=========================================
// Mono Declaration section
label(_MonThread)
label(_MonoProfileJitResult)
label(_MPMEExit)
label(_ProfilerCallBack)
label(_MonMethods)
label(_ExitMMD)
label(_CheckMethodByName)
label(_ChkMN00)
label(_ChkMN01)
label(_ChkMN02)
label(_ChkMN03)
label(_ChkMN04)
label(_ChkMN05)
label(_ExitCMD)
label(_CompareString)
label(_CmpSG00)
label(_ExitCSG)
label(pDomain)
label(pMethodStr)
label(pMethodName)
label(iMethodIndex)
label(pClass)
label(pClassName)
label(pJitInfo)
label(pJitStart)
label(iJitSize)
label(iNumMethods)
label(MethodList)
label(Method00)
label(Method01)
label(Method02)
label(Method03)
// General Declaration section
label(_MonHumanPlayer)
label(_MonHP00)
label(_MonHP01)
label(_MonHP02)
label(_ExitMHP)
label(_GodMode)
label(_ExitGMD)
label(_MonPlayerEnergy)
label(_ExitMPE)
label(_MonPlayerGold)
label(_ExitMPG)
label(iEnableMXP)
label(iEnableMAP)
label(iEnableMTP)
label(iEnableMMR)
label(iEnableGMD)
label(iEnableMPE)
label(iEnableMPG)
label(pHero)
label(pGold)

//=========================================
// Mono Registering Symbols
registersymbol(MyMono)
registersymbol(_MonThread)
registersymbol(_MonoProfileJitResult)
registersymbol(_ProfilerCallBack)
registersymbol(pDomain)
registersymbol(pMethodStr)
registersymbol(pMethodName)
registersymbol(iMethodIndex)
registersymbol(pClass)
registersymbol(pClassName)
registersymbol(pJitInfo)
registersymbol(pJitStart)
registersymbol(iJitSize)
registersymbol(iNumMethods)
registersymbol(MethodList)
registersymbol(Method00)
registersymbol(Method01)
registersymbol(Method02)
registersymbol(Method03)
//=========================================
// General Registering Symbols
registersymbol(iEnableMXP)
registersymbol(iEnableMAP)
registersymbol(iEnableMTP)
registersymbol(iEnableMMR)
registersymbol(iEnableGMD)
registersymbol(iEnableMPE)
registersymbol(iEnableMPG)
registersymbol(pHero)
registersymbol(pGold)
registersymbol(_MonHumanPlayer)
registersymbol(_GodMode)
registersymbol(_MonPlayerEnergy)
registersymbol(_MonPlayerGold)

//=========================================
MyMono:
//=========================================
// Run once (Original By Dark Byte)
//=========================================
_MonThread:
 call mono.mono_get_root_domain    // Get App Domain
 mov [pDomain],eax

 push eax
 call mono.mono_thread_attach
 add esp,4

 push _ProfilerCallBack
 push MyProfiler
 call mono.mono_profiler_install
 add esp,8

 push _MonoProfileJitResult        // Procedure called when a Method is JITted
 call mono.mono_profiler_install_jit_end
 add esp,4

 call mono.mono_profiler_get_events

 or eax,10                        // MONO_PROFILE_JIT_COMPILATION
 push eax
 call mono.mono_profiler_set_events
 add esp,4
 ret

//=========================================
// (Original By Dark Byte)
 _ProfilerCallBack:
  ret

//=========================================
//Entry: (*prof, *method, *jinfo, int result); (Original By Dark Byte)
//=========================================
_MonoProfileJitResult:
 push ebp
 mov ebp,esp

 push [ebp+STK.method]
 pop [pMethodStr]

 push [ebp+STK.jitnfo]
 pop [pJitInfo]

 push [ebp+STK.method]
 call mono.mono_method_get_name
 add esp, 4
 mov [pMethodName],eax

 push [ebp+STK.method]
 call mono.mono_method_get_class
 add esp, 4
 mov [pClass],eax

 push eax
 call mono.mono_class_get_name
 add esp, 4
 mov [pClassName],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_start
 add esp,4
 mov [pJitStart],eax

 push [ebp+STK.jitnfo]
 call mono.mono_jit_info_get_code_size
 add esp,4
 mov [iJitSize],eax

 call _MonMethods

_MPMEExit:
 pop ebp
 ret

//=========================================
// Find out a particular method code address by its name (By RC)
_MonMethods:
 push eax

 cmp dword ptr [iNumMethods],00
 je _ExitMMD

 mov eax,[pMethodName]             // Get paMethodName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pClassName]              // Get paClassName
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 mov eax,[pJitInfo]                // Get pJitInfoStr
 test eax,eax                      // Null pointer?
 je _ExitMMD                       // Jump if true

 call _CheckMethodByName

_ExitMMD:
 pop eax
 ret

//=========================================
// By RC
_CheckMethodByName:
 pushad

 mov ebp,MethodList                 // Point to First Method
 xor ebx,ebx                        // Index = 0

// Verify if any method used in the Script
// Check Size
_ChkMN00:
 mov eax,[ebp+HMD.iOMSize]         // Method2Bfound  Size
 cmp eax,[iJitSize]                // Current Method Size
 je _ChkMN02                       // jump if a match

_ChkMN01:
 lea ebp,[ebp+ctSMTD]              // Point to next method info
 inc ebx
 cmp ebx,[iNumMethods]             // Finished?
 js _ChkMN00                       // If false, continue ...
 jmp _ExitCMD                      // ... Else, exit.

_ChkMN02:
// Check Class Name
 mov esi,[pClassName]
 lea edi,[ebp+HMD.aOCName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// Check Class Name
 mov esi,[pMethodName]
 lea edi,[ebp+HMD.aOMName]         // Point EDI to the first char of the name
 call _CompareString
 jne _ChkMN01

// One of the Methods was found
 cmp dword ptr [ebp+HMD.iHMStat],0 // Method already hacked?
 je _ChkMN03                       // Jump if false

 mov eax,[pJitStart]
 cmp eax,[ebp+HMD.iOMAddr]
 je _ExitCMD                       // Jump if same address

// Assert and hack the Method
_ChkMN03:
 xor eax,eax
 mov [ebp+HMD.iHMStat],eax         // Status = Not hacked yet
 mov eax,[pJitStart]               // Get method address
 mov [ebp+HMD.iOMAddr],eax         // Update Original Method Current Address
 add eax,[ebp+HMD.iHMDelt]         // Point to Hacking Point
 mov esi,eax                       // Save address for assertion
 mov [ebp+HMD.iHMEntr],eax         // Update Code Entry Point
 add eax,[ebp+HMD.iHMSize]         // Point to Return Point
 mov [ebp+HMD.iHMBack],eax         // Update Code Return Point

// Asserting
 xor ebx,ebx                       // Index = 0
 lea edi,[ebp+HMD.aobOMTD]         // Point expected AOB

_ChkMN04:
 mov al,[esi+ebx]
 cmp al,[edi+ebx]
 jne _ExitCMD

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN04                       // Continue if false

// Hacking
 xor ebx,ebx
 mov edi,[ebp+HMD.iHMEntr]
 lea esi,[ebp+HMD.aobHMTD]

_ChkMN05:
 mov al,[esi+ebx]
 mov [edi+ebx],al

 inc ebx
 cmp ebx,[ebp+HMD.iHMSize]         // Finished?
 js _ChkMN05                       // Continue if false

 mov eax,1
 mov [ebp+HMD.iHMStat],eax         // Status = Hacked

_ExitCMD:
 popad
 ret

//=========================================
// Compare two strings (max size = 16) (by RC)
// Entry: ESI and EDI
// Output: Z = found
_CompareString:
 push eax
 push ecx

 xor ecx,ecx

_CmpSG00:
 mov al,[edi+ecx]

 cmp al,0                          // Finished ?
 je _ExitCSG                       // Continue if true

 cmp al,[esi+ecx]
 jne _ExitCSG                      // Jump if name does not match

 inc ecx                           // Increase Index
 cmp ecx,#16
 js _CmpSG00

 xor eax,eax

_ExitCSG:
 pop ecx
 pop eax
 ret

//*****************************************
// SCRIPTS FOR CHEATING (By RC)
//*****************************************
//=========================================
// At Main Screen (Method00)
_MonHumanPlayer:
 push ebx
 push ecx

 mov [pHero],eax

 cmp dword ptr [iEnableMXP],0
 je _MonHP00                       // Jump if feature is disabled

 mov ecx,(float)99.0
 cmp ecx,[eax+000001d0]
 js _MonHP00

 mov [eax+000001d0],ecx

// Attribute Points
_MonHP00:
 cmp dword ptr [iEnableMAP],0
 je _MonHP01                       // Jump if feature is disabled

 mov ebx,[eax+00000080]
 test ebx,ebx
 jz _MonHP01

 mov ecx,ctMAPT
 cmp ecx,[ebx+1c]
 js _MonHP01

 mov [ebx+1c],ecx

// Talent Points
_MonHP01:
 cmp dword ptr [iEnableMTP],0
 je _MonHP02                       // Jump if feature is disabled

 mov ebx,[eax+00000260]
 test ebx,ebx
 jz _MonHP02

 mov ecx,ctMTPT
 cmp ecx,[ebx+14]
 js _MonHP02

 mov [ebx+14],ecx

// Reputation
_MonHP02:
 cmp dword ptr [iEnableMMR],0
 je _ExitMHP                       // Jump if feature is disabled

 mov ecx,ctMREP
 cmp ecx,[eax+000002f4]
 js _ExitMHP

 mov [eax+000002f4],ecx

_ExitMHP:
 pop ecx
 pop ebx

 mov eax,[eax+00000110]            // Original code (RD HP)
 jmp [Method00+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method01)
_GodMode:
 cmp ebx,[pHero]
 jne _ExitGMD

 cmp dword ptr [iEnableGMD],0
 je _ExitGMD                       // Jump if feature is disabled

 mov eax,#63000

_ExitGMD:
 mov [ebx+00000110],eax            // Original code (UPD HP)
 jmp [Method01+HMD.iHMBack]        // Back to main code

//=========================================
// During Battle (Method02)
_MonPlayerEnergy:
 cmp ebx,[pHero]
 jne _ExitMPE

 cmp dword ptr [iEnableMPE],0
 je _ExitMPE                       // Jump if feature is disabled

 mov eax,#63000

_ExitMPE:
 mov [ebx+00000114],eax            // Original code (UPD HP)
 jmp [Method02+HMD.iHMBack]        // Back to main code

//=========================================
// At the inventory window (Method03)
_MonPlayerGold:
 push ebx

 mov [pGold],eax

 cmp dword ptr [iEnableMPG],0
 je _ExitMPG                       // Jump if feature is disabled

 mov ebx,ctMGLD
 cmp ebx,[eax+20]
 js _ExitMPG

 mov [eax+20],ebx

_ExitMPG:
 pop ebx

 cmp [ecx],ecx                     // Original code
 mov eax,[eax+20]                  // Original code (RD GOLD)
 leave                             // Original code
 jmp [Method03+HMD.iHMBack]        // Back to main code

//=========================================
 db '===============================&gt;'
 db 'CE6.3 Script by Recifense 121213'
//=========================================
// Mono Variables
pDomain:
 dd 0
pMethodStr:
 dd 0
pMethodName:
 dd 0
iMethodIndex:
 dd 0
pClass:
 dd 0
pClassName:
 dd 0
pJitInfo:
 dd 0
pJitStart:
 dd 0
iJitSize:
 dd 0
iNumMethods:
 dd 4
 db 'Methods:'
MethodList:
Method00:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000007e                         // iOMSize ( 4)
 db 'StatusBarHealth'                // aOCName (16)
 db 0
 db 'getPercent'                     // aOMName (16)
 db 0,2,3,4,5,6
 dd 0                                // iOMAddr ( 4)
 dd 00000028                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 8b,80,10,01,00,00                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonHumanPlayer
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method01:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000009e                         // iOMSize ( 4)
 db 'GameActor'                      // aOCName (16)
 db 0,1,2,3,4,5,6
 db 'applyHealthChan'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 00000084                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 89,83,10,01,00,00                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _GodMode
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method02:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 0000007a                         // iOMSize ( 4)
 db 'GameActor'                      // aOCName (16)
 db 0,1,2,3,4,5,6
 db 'applyManaChange'                // aOMName (16)
 db 0
 dd 0                                // iOMAddr ( 4)
 dd 00000022                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 89,83,14,01,00,00                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonPlayerEnergy
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

Method03:                            // Size = 80
 dd 0                                // iHMStat ( 4)
 dd 00000023                         // iOMSize ( 4)
 db 'GuiInventory'                   // aOCName (16)
 db 0,4,5,6
 db 'getGoldToShow'                  // aOMName (16)
 db 0,5,6
 dd 0                                // iOMAddr ( 4)
 dd 0000001c                         // iHMDelt ( 4)
 dd #6                               // iHMSize ( 4)
 db 39,09,8b,40,20,c9                // aobOMTD ( 8)
 db 90,90
 db 68                               // aobHMTD ( 8)
 dd _MonPlayerGold
 db c3,90,90
 dd 0                                // iHMEntr ( 4)
 dd 0                                // iHMBack ( 4)
 dd 0                                // pOMStru ( 4)

//=========================================
 db '===============&gt;'
//=========================================
// General Variables
iEnableMXP:
 dd 0
iEnableMAP:
 dd 0
iEnableMTP:
 dd 0
iEnableMMR:
 dd 0
iEnableGMD:
 dd 0
iEnableMPE:
 dd 0
iEnableMPG:
 dd 0
pHero:
 dd 55555555
pGold:
 dd 0

//=========================================
// Hacking Points
// None

//=========================================
 createthread(_MonThread)
//=========================================
// Script for Restoring Original Codes
[DISABLE]
// NO HP
 mov no_disable,Recifense

//=========================================
// Unregistering Symbols
//=========================================
// Mono Registering Symbols

unregistersymbol(MyMono)
unregistersymbol(_MonThread)
unregistersymbol(_MonoProfileJitResult)
unregistersymbol(_ProfilerCallBack)
unregistersymbol(pDomain)
unregistersymbol(pMethodStr)
unregistersymbol(pMethodName)
unregistersymbol(iMethodIndex)
unregistersymbol(pClass)
unregistersymbol(pClassName)
unregistersymbol(pJitInfo)
unregistersymbol(pJitStart)
unregistersymbol(iJitSize)
unregistersymbol(iNumMethods)
unregistersymbol(MethodList)
unregistersymbol(Method00)
unregistersymbol(Method01)
unregistersymbol(Method02)
unregistersymbol(Method03)

//=========================================
// General Registering Symbols
unregistersymbol(iEnableMXP)
unregistersymbol(iEnableMAP)
unregistersymbol(iEnableMTP)
unregistersymbol(iEnableMMR)
unregistersymbol(iEnableGMD)
unregistersymbol(iEnableMPE)
unregistersymbol(iEnableMPG)
unregistersymbol(pHero)
unregistersymbol(pGold)
unregistersymbol(_MonHumanPlayer)
unregistersymbol(_GodMode)
unregistersymbol(_MonPlayerEnergy)
unregistersymbol(_MonPlayerGold)

//=========================================
//dealloc(MyMono)
//============= Scripts End ===============

// ****************************************
// NOTES
// ****************************************
{
  First Script with mono approach released in a table!
}

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>58</ID>
          <Description>"Enable/Disable Fast Level Up =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMXP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>45</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>46</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Enable/Disable Minimum Attribute Points =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMAP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>60</ID>
          <Description>"Enable/Disable Minimum Talent Points =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMTP</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Enable/Disable Minimum Reputation =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMMR</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>33</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>34</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"Enable/Disable God Mode =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableGMD</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>63</ID>
          <Description>"Enable/Disable Full Energy =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPE</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
        <CheatEntry>
          <ID>64</ID>
          <Description>"Enable/Disable Minimum Gold =&gt; (1/0)"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iEnableMPG</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>36</Key>
              </Keys>
              <Value>1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>17</Key>
                <Key>35</Key>
              </Keys>
              <Value>0</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_MonThread</Name>
      <Address>0FFF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonoProfileJitResult</Name>
      <Address>0FFF0046</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_ProfilerCallBack</Name>
      <Address>0FFF0045</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pDomain</Name>
      <Address>0FFF0340</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMethodStr</Name>
      <Address>0FFF0344</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pMethodName</Name>
      <Address>0FFF0348</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iMethodIndex</Name>
      <Address>0FFF034C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pClass</Name>
      <Address>0FFF0350</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pClassName</Name>
      <Address>0FFF0354</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pJitInfo</Name>
      <Address>0FFF0358</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pJitStart</Name>
      <Address>0FFF035C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iJitSize</Name>
      <Address>0FFF0360</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iNumMethods</Name>
      <Address>0FFF0364</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>MethodList</Name>
      <Address>0FFF0370</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method00</Name>
      <Address>0FFF0370</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method01</Name>
      <Address>0FFF03C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method02</Name>
      <Address>0FFF0410</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>Method03</Name>
      <Address>0FFF0460</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMXP</Name>
      <Address>0FFF04C0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMAP</Name>
      <Address>0FFF04C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMTP</Name>
      <Address>0FFF04C8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMMR</Name>
      <Address>0FFF04CC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableGMD</Name>
      <Address>0FFF04D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPE</Name>
      <Address>0FFF04D4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iEnableMPG</Name>
      <Address>0FFF04D8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pHero</Name>
      <Address>0FFF04DC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pGold</Name>
      <Address>0FFF04E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonHumanPlayer</Name>
      <Address>0FFF01C4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_GodMode</Name>
      <Address>0FFF027A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonPlayerEnergy</Name>
      <Address>0FFF02A4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_MonPlayerGold</Name>
      <Address>0FFF02CE</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>===========================================
 Game Title    : Ravensword Shadowlands
 Game Version  : 4.2.2.78157
 Game Sponsor  : SKIDROW
 Process Name  : Ravensword2.exe
 Script Version: 1.0 (JIT - Approach 2)
 CE Version    : 6.3
 Release date  : 12-Dec-2013
 Author        : Recifense
 History:
 12-Dec-13: First Release
 Features:
 - Fast Level Up (a level per kill) [1]
 - Minimum Attribute Points (10)    [2]
 - Minimum Talent Points    ( 5)    [3]
 - Minimum Reputation      (400)    [4]
 - God Mode                         [5]
 - Full Energy                      [6]
 - Minimum Gold          (63000)    [7]
===========================================
[1] For player's hero (the XP always at 99%); (*)
[2] Attribute points will be set to a minimum when needed; (*)
[3] Talent points will be set to a minimum when needed; (*)
[4] Reputation will be set to a minimum when needed (*)
[5] GM for player's hero only; (*)
[6] FE for player's hero only; (*)
[7] Gold will be set to a minimum; (**)
----------------------
(*)  It works on the game main screen;
(**) It works when you open the inventory;
===========================================
[USAGE]
1) Run CE;
2) Run Game (stop at main menu);
3) Go to CE and load the game process;
4) Load the table;
5) ACTIVATE the script by clicking on the box under ACTIVE column =&gt; [X];
6) Enable the cheats you want to use by change their value to 1 under VALUE column (Or use the HOTKEYS listed below);
7) Go back to the game and play on;
[IMPORTANT]
- If you activate the script on a game on going, the cheats will not work;
- Once the script is activated, you will not be able to deactivate it. If you don't want to use it after that, just disable the cheats by changing their values to 0 (Or use the HOTKEYS listed below);
===========================================
[HOTKEYS]
CTRL+Home = Enable  GM/Energy/Gold cheats;
CTRL+End  = Disable GM/Energy/Gold cheats;
----------
CTRL+Insert = Enable  Level-up cheat;
CTRL+Delete = Disable Level-up cheat;
----------
CTRL+Page Up   = Enable  Attribute/Talent/Reputation cheats;
CTRL+Page Down = Disable Attribute/Talent/Reputation cheats;
===========================================
[NOTE]
This is my first official try of making a table for a game that uses MONO.DLL engine feel like a any other table (no need to load to activate the scripts by parts)
===========================================
[NOTE]
Thanks go to Dark Byte for posting his findings related to the MONO engine. 
===========================================
Cheers!
</Comments>
</CheatTable>
