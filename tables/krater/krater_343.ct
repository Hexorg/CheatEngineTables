<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"God Mode"</Description>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//GodMode script V7
//from lua.h:
define(LUA_TSTRING   ,4)

[ENABLE]
alloc(newmem,2048)
//places
label(returnhere)
label(skip)
label(originalcode)
label(exit)
label(code)
label(Stamina_Check)
label(Health_Check)
label(StaminaSwitchTable)
label(StaminaHit1)
label(StaminaHit2)
label(StaminaHit3)
label(StaminaHit4)
label(StaminaHit5)
label(StaminaHitEnd)
label(Reset)
//variables
label(Stamina)
label(StaminaHitCount)
label(HealthMultiplier)
label(In_render_health)


aobscan(aobcode,8B 10 8B 4D 14 89 11 8b 50 04 5f)
registersymbol(code)

newmem:
pushfd
pushad

//Check that the 3rd arguent ( TValue *key) to luaV_gettable is
//a valid lua string
  mov edx,dword ptr [ebp+10] //edx= key = &amp;(key-&gt;value.gc)
  cmp dword [edx+8],LUA_TSTRING
  jne skip
  mov edx,dword [edx] //edx=&amp;(key.value.gc-&gt;ts)
//string is &lt;6 char long-&gt;not interested
  cmp [edx+C],6 //note:string length does not count null terminator
  jb skip

//Are we already in _render_health ?
  cmp byte [In_render_health],1
  je Stamina_Check //check if string="stamina" or then "health"
//else is the string "_render_health" ?
  cmp dword ptr [edx+10],'_ren'
  jne skip //we're not in render_health, so if string!="_render_health"-&gt;GTFO
  cmp dword ptr [edx+14],'der_'
  jne skip
  cmp dword ptr [edx+18],'heal'
  jne skip
  cmp word ptr [edx+1C],'th'
  jne skip
  //Yes, we're in the _render_health function
  //Allow overwriting the health &amp; logging stamina
  //also reset the stamina hit counter
  mov byte [In_render_health],1
  mov dword [StaminaHitCount],0
  jmp skip

// is the string "health" ?
Health_Check:
  cmp dword ptr [edx+10],'heal'
  jne skip
  cmp word ptr [edx+14],'th'
  jne skip
  cmp byte ptr [edx+16],0
  jne skip
  //yes, check if we've hit "stamina" 6 times
  //between now and when we hit _render_health
  //(it could be less)
  cmp [StaminaHitCount],6
  jne short Reset
  //hit 6 times,overwrite the health!
  //health=stamina*health_multiplier=max_health
  fld qword [Stamina]
  fmul qword [HealthMultiplier]
  fstp qword [eax]
  jmp short Reset //job done

//is the string "stamina" ?
Stamina_Check:
  cmp dword ptr [edx+10],'stam'
  jne short Health_Check
  cmp dword ptr [edx+14],'ina'
  jne short skip
  //switch(StaminaHitCount)
  mov edx,StaminaSwitchTable
  mov ecx,dword [StaminaHitCount]
  jmp [edx+ecx*4]
  //case 0:skip

  //case 1:Stamina=new value
  StaminaHit1:
    fld qword [eax]
    fstp qword [Stamina]
    jmp short StaminaHitEnd
  //case 2&amp;3:Stamina+=new value
  StaminaHit2:
  StaminaHit3:
    fld qword [eax]
    fadd qword [Stamina]
    fstp qword [Stamina]
    jmp short StaminaHitEnd
  //case 4&amp;5:Stamina*=new value
  StaminaHit4:
  StaminaHit5:
    fld qword [eax]
    fmul qword [Stamina]
    fstp qword [Stamina]
    jmp short StaminaHitEnd
  //case6: ERROR something unexpected happened, reset the mechanism
  Reset:
    mov [StaminaHitCount],0
    mov byte [In_render_health],0
    jmp short skip

StaminaHitEnd:
  inc ecx
  mov [StaminaHitCount],ecx

skip:
  popad
  popfd

originalcode:
  mov edx,[eax]
  mov ecx,[ebp+14]

exit:
  jmp returnhere

StaminaSwitchTable:
dd StaminaHitEnd
dd StaminaHit1
dd StaminaHit2
dd StaminaHit3
dd StaminaHit4
dd StaminaHit5
dd Reset

StaminaHitCount:
dd 0

Stamina:
dq (double)20.0 //default value

HealthMultiplier:
dq (double)10.0   //game constant

In_render_health:
db 0

aobcode:
code:
  jmp newmem
  returnhere:

[DISABLE]
code:
     db 8B 10 8B 4D 14
dealloc(newmem)
unregistersymbol(code)
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>code</Name>
      <Address>00566E6F</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>God mode table 

(working on "krater v1.0 skidrow")


Credits for the script goes to Gniarf i just made the table for easy usage


xpertvision.</Comments>
</CheatTable>
