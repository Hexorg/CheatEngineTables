<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Rise of the Tomb Raider (UWP)"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$Lua}
getAutoAttachList().add('ROTTR_UAP.exe')
{$Asm}
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"Teleport &amp; Movement"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Bow Aim Teleport"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : ROTTR_UAP.exe
  Version:
  Date   : 2016-02-07
  Author : mgr.inz.Player
}

[ENABLE]
aobscanmodule(aob_BowAimPosition,ROTTR_UAP.exe,0F 29 BF A0 0B 00 00) // should be unique
registersymbol(aob_BowAimPosition)
alloc(newmem_BowAimPosition,$1000,ROTTR_UAP.exe)
label(code_BowAimPosition)
label(return_BowAimPosition)

aobscanmodule(aob_LaraPositionWrite,ROTTR_UAP.exe,49 63 F8 0F 28 79 10) // should be unique
registersymbol(aob_LaraPositionWrite)
label(code_LaraPositionWrite)
label(return_LaraPositionWrite)

label(LaraPositionAddress)
label(plus100)
label(BowAimTeleport)
registersymbol(BowAimTeleport)


newmem_BowAimPosition:
plus100:
dd (float)0 (float)0 (float)100 (float)0

code_BowAimPosition:
  movaps [rdi+00000BA0],xmm7
  cmp [BowAimTeleport],1
  jne @f
  cmp [LaraPositionAddress],0
  je  @f

  push rax
  mov rax,[LaraPositionAddress]
  addps xmm7,[plus100]
  movaps [rax+10],xmm7
  pop rax
  mov [BowAimTeleport],0

  @@:
  jmp return_BowAimPosition

code_LaraPositionWrite:
  mov [LaraPositionAddress],rcx
  movsxd  rdi,r8d
  movaps xmm7,[rcx+10]
  jmp return_LaraPositionWrite

LaraPositionAddress:
dq 0
BowAimTeleport:
dd 0


aob_BowAimPosition:
  jmp code_BowAimPosition
  nop
  nop
return_BowAimPosition:

aob_LaraPositionWrite:
  jmp code_LaraPositionWrite
  nop
  nop
return_LaraPositionWrite:

[DISABLE]

aob_BowAimPosition:
  db 0F 29 BF A0 0B 00 00

unregistersymbol(aob_BowAimPosition)
unregistersymbol(BowAimTeleport)

dealloc(newmem_BowAimPosition)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3BA7099

"ROTTR_UAP.exe"+3BA7064: 48 89 8F C0 0C 00 00           -  mov [rdi+00000CC0],rcx
"ROTTR_UAP.exe"+3BA706B: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR_UAP.exe"+3BA706E: 89 87 C8 0C 00 00              -  mov [rdi+00000CC8],eax
"ROTTR_UAP.exe"+3BA7074: EB 23                          -  jmp ROTTR_UAP.exe+3BA7099
"ROTTR_UAP.exe"+3BA7076: 48 89 9F C0 0C 00 00           -  mov [rdi+00000CC0],rbx
"ROTTR_UAP.exe"+3BA707D: 8B 40 10                       -  mov eax,[rax+10]
"ROTTR_UAP.exe"+3BA7080: 89 87 C8 0C 00 00              -  mov [rdi+00000CC8],eax
"ROTTR_UAP.exe"+3BA7086: EB 11                          -  jmp ROTTR_UAP.exe+3BA7099
"ROTTR_UAP.exe"+3BA7088: 48 89 9F C0 0C 00 00           -  mov [rdi+00000CC0],rbx
"ROTTR_UAP.exe"+3BA708F: C7 87 C8 0C 00 00 FF FF FF FF  -  mov [rdi+00000CC8],FFFFFFFF
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3BA7099: 0F 29 BF A0 0B 00 00           -  movaps [rdi+00000BA0],xmm7
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3BA70A0: 48 8B 97 98 0C 00 00           -  mov rdx,[rdi+00000C98]
"ROTTR_UAP.exe"+3BA70A7: 0F 28 BC 24 50 02 00 00        -  movaps xmm7,[rsp+00000250]
"ROTTR_UAP.exe"+3BA70AF: 48 85 D2                       -  test rdx,rdx
"ROTTR_UAP.exe"+3BA70B2: 74 23                          -  je ROTTR_UAP.exe+3BA70D7
"ROTTR_UAP.exe"+3BA70B4: 81 FA 20 4E 00 00              -  cmp edx,00004E20
"ROTTR_UAP.exe"+3BA70BA: 73 1B                          -  jae ROTTR_UAP.exe+3BA70D7
"ROTTR_UAP.exe"+3BA70BC: 89 D0                          -  mov eax,edx
"ROTTR_UAP.exe"+3BA70BE: 48 8D 0C C0                    -  lea rcx,[rax+rax*8]
"ROTTR_UAP.exe"+3BA70C2: 48 C1 E1 05                    -  shl rcx,05
"ROTTR_UAP.exe"+3BA70C6: 4C 01 E1                       -  add rcx,r12
}


aob_LaraPositionWrite:
  db 49 63 F8 0F 28 79 10

unregistersymbol(aob_LaraPositionWrite)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3B8B403

"ROTTR_UAP.exe"+3B8B3D3: CC                                   -  int 3
"ROTTR_UAP.exe"+3B8B3D4: 66 66 66 2E 0F 1F 84 00 00 00 00 00  -  nop cs:[rax+rax+00000000]
"ROTTR_UAP.exe"+3B8B3E0: 48 89 5C 24 08                       -  mov [rsp+08],rbx
"ROTTR_UAP.exe"+3B8B3E5: 57                                   -  push rdi
"ROTTR_UAP.exe"+3B8B3E6: 48 83 EC 50                          -  sub rsp,50
"ROTTR_UAP.exe"+3B8B3EA: 48 89 CB                             -  mov rbx,rcx
"ROTTR_UAP.exe"+3B8B3ED: 0F 29 7C 24 30                       -  movaps [rsp+30],xmm7
"ROTTR_UAP.exe"+3B8B3F2: 48 8B 89 38 31 00 00                 -  mov rcx,[rcx+00003138]
"ROTTR_UAP.exe"+3B8B3F9: 44 0F 29 44 24 20                    -  movaps [rsp+20],xmm8
"ROTTR_UAP.exe"+3B8B3FF: 44 0F 28 02                          -  movaps xmm8,[rdx]
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3B8B403: 49 63 F8                             -  movsxd  rdi,r8d
"ROTTR_UAP.exe"+3B8B406: 0F 28 79 10                          -  movaps xmm7,[rcx+10]
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3B8B40A: E8 71 5D A1 FF                       -  call ROTTR_UAP.exe+35A1180
"ROTTR_UAP.exe"+3B8B40F: 48 8B 8B 38 31 00 00                 -  mov rcx,[rbx+00003138]
"ROTTR_UAP.exe"+3B8B416: 49 89 C0                             -  mov r8,rax
"ROTTR_UAP.exe"+3B8B419: 48 B8 00 00 00 00 FF FF FF FF        -  mov rax,FFFFFFFF00000000
"ROTTR_UAP.exe"+3B8B423: 48 8B 51 68                          -  mov rdx,[rcx+68]
"ROTTR_UAP.exe"+3B8B427: 48 85 D0                             -  test rax,rdx
"ROTTR_UAP.exe"+3B8B42A: 74 45                                -  je ROTTR_UAP.exe+3B8B471
"ROTTR_UAP.exe"+3B8B42C: 48 85 D2                             -  test rdx,rdx
"ROTTR_UAP.exe"+3B8B42F: 74 40                                -  je ROTTR_UAP.exe+3B8B471
"ROTTR_UAP.exe"+3B8B431: 81 FA 20 4E 00 00                    -  cmp edx,00004E20
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>3</ID>
                  <Description>"enable - hotkey F6"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>BowAimTeleport</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>117</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>0</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>4</ID>
              <Description>"Skew Cheat"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>// Game   : ROTTR_UAP.exe
// Author : mgr.inz.Player
[ENABLE]
aobscanmodule(aob_skewCheat,ROTTR_UAP.exe,81 FB 4B 9B EE 79)
registersymbol(aob_skewCheat)
alloc(newmem_skewCheat,1024,ROTTR_UAP.exe)
label(return_skewCheat)

label(skewCheat_state)
registersymbol(skewCheat_state)

newmem_skewCheat:
  cmp [skewCheat_state],0
  je normal
  mov r8d,[skewCheat_state] // 1-disable 2-enable
  dec r8d
  mov ebx,A09458BC
  mov [skewCheat_state],0

normal:
  cmp ebx,79EE9B4B
  jmp return_skewCheat

skewCheat_state:
dd 0

aob_skewCheat:
  jmp newmem_skewCheat
  nop
return_skewCheat:

[DISABLE]
aob_skewCheat:
  db 81 FB 4B 9B EE 79

unregistersymbol(aob_skewCheat)
dealloc(newmem_skewCheat)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3F0FC5D

"ROTTR_UAP.exe"+3F0FC2F: 48 31 E0                 -  xor rax,rsp
"ROTTR_UAP.exe"+3F0FC32: 48 89 45 17              -  mov [rbp+17],rax
"ROTTR_UAP.exe"+3F0FC36: 8B 05 E4 B1 35 FD        -  mov eax,[ROTTR_UAP.exe+126AE20]
"ROTTR_UAP.exe"+3F0FC3C: 89 D3                    -  mov ebx,edx
"ROTTR_UAP.exe"+3F0FC3E: 48 8B 91 D8 00 00 00     -  mov rdx,[rcx+000000D8]
"ROTTR_UAP.exe"+3F0FC45: 49 89 CE                 -  mov r14,rcx
"ROTTR_UAP.exe"+3F0FC48: 4C 89 C6                 -  mov rsi,r8
"ROTTR_UAP.exe"+3F0FC4B: 48 8B 0C C2              -  mov rcx,[rdx+rax*8]
"ROTTR_UAP.exe"+3F0FC4F: 48 8B B9 A8 02 00 00     -  mov rdi,[rcx+000002A8]
"ROTTR_UAP.exe"+3F0FC56: 4C 8B B9 B0 02 00 00     -  mov r15,[rcx+000002B0]
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3F0FC5D: 81 FB 4B 9B EE 79        -  cmp ebx,79EE9B4B
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3F0FC63: 0F 87 95 03 00 00        -  ja ROTTR_UAP.exe+3F0FFFE
"ROTTR_UAP.exe"+3F0FC69: 0F 84 81 0A 00 00        -  je ROTTR_UAP.exe+3F106F0
"ROTTR_UAP.exe"+3F0FC6F: 81 FB 4D CD F9 31        -  cmp ebx,31F9CD4D
"ROTTR_UAP.exe"+3F0FC75: 0F 87 C6 01 00 00        -  ja ROTTR_UAP.exe+3F0FE41
"ROTTR_UAP.exe"+3F0FC7B: 0F 84 6F 0A 00 00        -  je ROTTR_UAP.exe+3F106F0
"ROTTR_UAP.exe"+3F0FC81: 81 FB B2 AB AE 16        -  cmp ebx,16AEABB2
"ROTTR_UAP.exe"+3F0FC87: 0F 87 C9 00 00 00        -  ja ROTTR_UAP.exe+3F0FD56
"ROTTR_UAP.exe"+3F0FC8D: 0F 84 5D 0A 00 00        -  je ROTTR_UAP.exe+3F106F0
"ROTTR_UAP.exe"+3F0FC93: 81 FB D0 CD C3 0B        -  cmp ebx,0BC3CDD0
"ROTTR_UAP.exe"+3F0FC99: 0F 87 80 00 00 00        -  ja ROTTR_UAP.exe+3F0FD1F
}
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>5</ID>
                  <Description>"F7-enable  F8-disable"</Description>
                  <VariableType>4 Bytes</VariableType>
                  <Address>skewCheat_state</Address>
                  <Hotkeys>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>118</Key>
                      </Keys>
                      <Value>2</Value>
                      <ID>0</ID>
                    </Hotkey>
                    <Hotkey>
                      <Action>Set Value</Action>
                      <Keys>
                        <Key>119</Key>
                      </Keys>
                      <Value>1</Value>
                      <ID>1</ID>
                    </Hotkey>
                  </Hotkeys>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Experience Points"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game   : ROTTR_UAP.exe
// Author : mgr.inz.Player
[ENABLE]
aobscanmodule(aob_punktydoswiadczenia,ROTTR_UAP.exe,4C 8B 40 20 44 8B 56 38)
registersymbol(aob_punktydoswiadczenia)
alloc(newmem_punktydoswiadczenia,1024,ROTTR_UAP.exe)
label(return_punktydoswiadczenia)

label(pdRAX)
registersymbol(pdRAX)
label(pdRSI)
registersymbol(pdRSI)

newmem_punktydoswiadczenia:
  mov [pdRAX],rax
  mov [pdRSI],rsi
  mov r8,[rax+20]
  mov r10d,[rsi+38]
  jmp return_punktydoswiadczenia

pdRAX:
dq 0
pdRSI:
dq 0

aob_punktydoswiadczenia:
  jmp newmem_punktydoswiadczenia
  nop
  nop
  nop
return_punktydoswiadczenia:

[DISABLE]
aob_punktydoswiadczenia:
  db 4C 8B 40 20 44 8B 56 38

unregistersymbol(aob_punktydoswiadczenia)
dealloc(newmem_punktydoswiadczenia)

unregistersymbol(pdRAX)
unregistersymbol(pdRSI)

{
// ORIGINAL CODE - INJECTION POINT: "ROTTR_UAP.exe"+3F16373

"ROTTR_UAP.exe"+3F16354: 31 DB                          -  xor ebx,ebx
"ROTTR_UAP.exe"+3F16356: E8 75 9F AE FF                 -  call ROTTR_UAP.exe+3A002D0
"ROTTR_UAP.exe"+3F1635B: 89 C1                          -  mov ecx,eax
"ROTTR_UAP.exe"+3F1635D: E8 BE B0 AE FF                 -  call ROTTR_UAP.exe+3A01420
"ROTTR_UAP.exe"+3F16362: 48 85 C0                       -  test rax,rax
"ROTTR_UAP.exe"+3F16365: 74 2F                          -  je ROTTR_UAP.exe+3F16396
"ROTTR_UAP.exe"+3F16367: 8B 56 40                       -  mov edx,[rsi+40]
"ROTTR_UAP.exe"+3F1636A: 44 8B 48 18                    -  mov r9d,[rax+18]
"ROTTR_UAP.exe"+3F1636E: 44 39 CA                       -  cmp edx,r9d
"ROTTR_UAP.exe"+3F16371: 73 23                          -  jae ROTTR_UAP.exe+3F16396
// ---------- INJECTING HERE ----------
"ROTTR_UAP.exe"+3F16373: 4C 8B 40 20                    -  mov r8,[rax+20]
"ROTTR_UAP.exe"+3F16377: 44 8B 56 38                    -  mov r10d,[rsi+38]
// ---------- DONE INJECTING  ----------
"ROTTR_UAP.exe"+3F1637B: 89 D0                          -  mov eax,edx
"ROTTR_UAP.exe"+3F1637D: 48 8D 0C 40                    -  lea rcx,[rax+rax*2]
"ROTTR_UAP.exe"+3F16381: 45 3B 54 88 04                 -  cmp r10d,[r8+rcx*4+04]
"ROTTR_UAP.exe"+3F16386: 72 0E                          -  jb ROTTR_UAP.exe+3F16396
"ROTTR_UAP.exe"+3F16388: 41 03 5C 88 08                 -  add ebx,[r8+rcx*4+08]
"ROTTR_UAP.exe"+3F1638D: FF C7                          -  inc edi
"ROTTR_UAP.exe"+3F1638F: FF C2                          -  inc edx
"ROTTR_UAP.exe"+3F16391: 44 39 CA                       -  cmp edx,r9d
"ROTTR_UAP.exe"+3F16394: 72 E5                          -  jb ROTTR_UAP.exe+3F1637B
"ROTTR_UAP.exe"+3F16396: 01 9E 78 0E 00 00              -  add [rsi+00000E78],ebx
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>7</ID>
              <Description>"Exp needed for next level (read only)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>[pdRAX]+20</Address>
              <Offsets>
                <Offset>[[pdRSI]+40]*C+4</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"current level (read only)"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pdRSI</Address>
              <Offsets>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"Current Exp"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>pdRSI</Address>
              <Offsets>
                <Offset>38</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"Inventory"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
aobscanmodule(aob_inventory_pointerbase,ROTTR_UAP.exe,49 83 78 38 00 74 2E) // should be unique
//assert(aob_inventory_pointerbase-7,4C 8B 81 A8 03 00 00)
registersymbol(aob_inventory_pointerbase)
alloc(newmem_inventory_pointerbase,$1000,ROTTR_UAP.exe)
label(return_inventory_pointerbase)

label(inventory_pointerbase)
registersymbol(inventory_pointerbase)
label(inventoryMax_pointerbase)
registersymbol(inventoryMax_pointerbase)

newmem_inventory_pointerbase:
  mov [inventoryMax_pointerbase],rcx
  mov r8,[rcx+000003A8]
  mov [inventory_pointerbase],r8
  jmp return_inventory_pointerbase

inventory_pointerbase:
dq 0
inventoryMax_pointerbase:
dq 0

aob_inventory_pointerbase-7:
  jmp newmem_inventory_pointerbase
  nop
  nop
return_inventory_pointerbase:

[DISABLE]
aob_inventory_pointerbase-7:
  db 4C 8B 81 A8 03 00 00

unregistersymbol(aob_inventory_pointerbase)
unregistersymbol(inventory_pointerbase)
unregistersymbol(inventoryMax_pointerbase)
dealloc(newmem_inventory_pointerbase)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>11</ID>
              <Description>"Compact View Mode"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
function cycleFullCompact(sender,force)
  local state = not(compactmenuitem.Caption == 'Compact View Mode')
  if force~=nil then state = not force end
  compactmenuitem.Caption = state and 'Compact View Mode' or 'Full View Mode'
  getMainForm().Splitter1.Visible = state
  getMainForm().Panel4.Visible    = state
  getMainForm().Panel5.Visible    = state
end
function addCompactMenu()
  if compactmenualreadyexists then return end
  local parent = getMainForm().Menu.Items
  compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem)
  compactmenuitem.Caption = 'Compact View Mode'
  compactmenuitem.OnClick = cycleFullCompact
  compactmenualreadyexists = 'yes'
end
addCompactMenu()
cycleFullCompact(nil,true)
{$asm}

[DISABLE]
{$lua}
cycleFullCompact(nil,false)
{$asm}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"inventory_pointerbase"</Description>
              <ShowAsHex>1</ShowAsHex>
              <VariableType>8 Bytes</VariableType>
              <Address>inventory_pointerbase</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"Prepare Inventory Map"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}

local ItemList_ID_Name = [[
1300392505:Cloth
1596491239:Herbs
1596518693:Hide
73319806:Salvage
1860591193:Mushrooms
516527174:Hardwood
2432172444:Feather
4200658040:Oil
3305195250:Boar Fat
4011968730:Deer Antler
1353721286:Exotic Hide
1358162264:Magnesite Ore
273513695:Bear Hide
1439296855:Technical Parts
3827729073:Byzantine Coins
2546518011:Chromite Ore
54359098:Cluster Arrow
911311014:Bear Trap
1014797730:Explosive Arrow
1410284630:Fire Arrow
1548887417:SMG Bullets
1563807238:Bandage
1764654631:Flashbang
1941840742:Sapling
2288237209:Arrows
2363594663:Handgun Bullet Hollow Point
2631568530:Poison Arrow
2721112983:Shotgun Bullets
2862006737:Grenade
3056299628:Pistol Bullets
3094493228:Endurance Food
3459366600:Spike Trap
4021324121:Fire Shotgun Bullets]]

local ItemList_Known = {}
(ItemList_ID_Name..'\n'):gsub('(%d+):(.-)\n',
  function (c,d)
    ItemList_Known[tonumber(c)]=d..':'
  end)


if syntaxcheck then return end

local al=getAddressList()
local mrPrepareInventory=al.getMemoryRecordByDescription('Prepare Inventory Map')
local Inventory_ArrayOfPointers=0

local function prepareInventoryMap()
  Inventory_ArrayOfPointers = readQword('[inventory_pointerbase]+28')
  Inventory_totalCount = readInteger('[inventory_pointerbase]+38')
  local InventoryMax_ArrayOfPointers = readQword('[inventoryMax_pointerbase]+318')
  local InventoryMax_LoopCount = readQword('[inventoryMax_pointerbase]+330')

  --[[ debug
  print('')
  print('Inventory_ArrayOfPointers '..tohex(Inventory_ArrayOfPointers))
  print('Inventory_totalCount '..Inventory_totalCount)
  print('InventoryMax_ArrayOfPointers '..tohex(InventoryMax_ArrayOfPointers))
  print('InventoryMax_LoopCount '..InventoryMax_LoopCount)
  --]]

  while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end

  if Inventory_totalCount&gt;200 or InventoryMax_LoopCount&gt;200 then return end     --nope

  local function addmemrec(parent,address,max)
    local ID = readInteger(address)
    if ItemList_Known[ID]==nil then return end
    local newmrID=al.createMemoryRecord()
    local newmrCount=al.createMemoryRecord()
    newmrID.Address = string.format('%X',address)
    newmrID.Description = ItemList_Known[ID]
    newmrID.ShowAsSigned = false
    newmrID.DropDownList.Text = ItemList_ID_Name
    newmrID.DropDownReadOnly = true
    newmrID.DropDownDescriptionOnly = true
    newmrID.DisplayAsDropDownListItem = true
    newmrID.appendToEntry(parent)
    newmrCount.Address = string.format('%X',address+0x4)
    newmrCount.Description = 'count:'
    newmrCount.appendToEntry(newmrID)

    if max then
     local newmrMAX=al.createMemoryRecord()
     newmrMAX.Address = string.format('%X',max)
     newmrMAX.Description = 'max:'
     newmrMAX.appendToEntry(newmrID)
    end
  end

  local items = {}

  local currentItemIndex=0
  for i=Inventory_ArrayOfPointers,Inventory_ArrayOfPointers+1600,8 do
  repeat
    local innerArray = readQword(i)
    if innerArray==0 or readInteger(innerArray)==nil then break end --continue
    currentItemIndex=currentItemIndex+1
    items[1+#items] = {address = innerArray+0x8, type = readInteger(innerArray+0x8)}

    local innerInnerArray = readQword(innerArray)
    while innerInnerArray~=0 and innerInnerArray~=nil do
      currentItemIndex=currentItemIndex+1
      items[1+#items] = {address = innerInnerArray+0x8, type = readInteger(innerInnerArray+0x8)}
      innerInnerArray = readQword(innerInnerArray)
    end
  until true
  if currentItemIndex==Inventory_totalCount then break end
  end

  local max = {}
  ---[[
  for i=0,InventoryMax_LoopCount-1 do
  repeat
    local max_innerArray = readQword(InventoryMax_ArrayOfPointers+i*8)
    if max_innerArray==0 or readInteger(max_innerArray)==nil then break end --continue
    max[readInteger(max_innerArray+0x8)] = max_innerArray+0xC

    local max_innerInnerArray = readQword(max_innerArray)
    while max_innerInnerArray~=0 and max_innerInnerArray~=nil do
      max[readInteger(max_innerInnerArray+0x8)] = max_innerInnerArray+0xC
      max_innerInnerArray = readQword(max_innerInnerArray)
    end

  until true
  end
  --]]

  for i,v in ipairs(items) do
    addmemrec(mrPrepareInventory,v.address,max[v.type])
  end
end

if timerPrepareInventory==nil then timerPrepareInventory=createTimer(nil,false) end
timerPrepareInventory.OnTimer =
  function (t)
    local tmp=readQword('[inventory_pointerbase]+28')
    if (tmp == nil) or (tmp == 0) then return end

    if (Inventory_ArrayOfPointers == tmp ) and
       (Inventory_totalCount == readQword('[inventory_pointerbase]+38'))
    then return end

    prepareInventoryMap()
  end
timerPrepareInventory.Interval=500
timerPrepareInventory.Enabled=true

local mr1=al.createMemoryRecord()
local mr2=al.createMemoryRecord()
mr1.appendToEntry(mrPrepareInventory)
mr2.appendToEntry(mrPrepareInventory)
mr1.Description = "Do something in game:"
mr2.Description = "aim, open inventory, etc."
{$asm}

[DISABLE]
{$lua}
if syntaxcheck then return end
timerPrepareInventory.Enabled=false
local al=getAddressList()
local mrPrepareInventory=al.getMemoryRecordByDescription('Prepare Inventory Map')
while mrPrepareInventory.Count&gt;0 do mrPrepareInventory[0].destroy() end
{$asm}
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>skewCheat_state</Name>
      <Address>7FF76010003A</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
