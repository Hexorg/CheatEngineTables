<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="19">
  <Forms>
    <PackEdit Class="TCEForm" Encoding="Ascii85">tyRm8/3tp-opkKPO{a.F4Vn$A1t2tPTGKCBcTA5anucU1L4),plS.c3$7PkvNoO@]zyh*0EBFP)h8.h@7YsXo0P5jK99K[f1lh!8+FCq,se8{.%^7ei?aYqK;_H-4bm0u*WPUxxta+cGtZ]_!o+^f2u+Ms,F)$F*?4doP7Br46,k-K}Bx*V?qa{)Mp:%%l3ElTX%wH6Nu3G1TMwjOr!dv8#h+1*DE2}qP+!m}W]/KdVWO,ZgI#(}hmq;*z=J?L60YdE5zKSLRp@3W):X]$*(IODO:Pw0^1Lr-$7,Dw(kLX8JbZ5!O0i7ah8Af{YBW+zD1npM^#w1Fry#A;2]ouCioYxIbSdZLwZh9g{tP}$N:kufD@El*4yV2:0v]]-^/G}.rp%6[)UN3,V:lH0E,WNFf.O)NGsoQ+G,.fU!Q;+H@RxMMf*[I^.OIHMURk1!cIUW{a]Y3d:_Lo%Tvm.su?]Ml739S.p@HoZrk3-DX=hsOr;5-67$EZV_X)7MMAV}pv/fT+qfv=FF(,r6[x4Xd4b;NMkvqH6A6zJVCUZ4cLL?}q@O=Tm5XmS6^aZd[d:S2!5[6^.!Y7sv(GsI8JLg$DYU4:J?OLeYAA#)W?-eHdSp[KJFtEHbd8;:{,cdTVTF$_Z3cx2%d-W[dEmNZveixd=_o4s,,7K@MJKM;E!$%s*L-6m$M]3.HCW^s-E;UBZDl=2p9Y-esh!x3xsZ@#M;Ouz!1fE5ly0K/@1z=!6h5wIW;0V*v@.G;yXvH+dVv/Sds)u8,ul1PnzF$yYOrRgXjE0M]??}3urYO9nhKXOMNS;CixtH$4kM*pP;r:8:3dg7z.I!1uZ0OrExycwcOhb0VCbOQPeBuspo5ur(Unfoxo6F=#5g#(2Hx%1Z}y$w#{0WZw:lAu^0z0Hr[OSx-DN]$L84%f:ae$9:^dL*y4pV#v9qL%mMc6$)U-/izqgAzi%C@POETKm5!yJED0ag264THXFdV72$S*5.P+%0$@WEB0S.@pbyj3k[A-59.ijVsk.hTf{d1H.qajSMK^Zo/fFHrpJ^]mXjrVUAn#6U8FkPfY=fA;4iQkuS[:e]%PI9?.@:49O]XTc2g@^_37L}LewwDkpn%FHZK29cMtI%TB2{{@1iiO^!+Bq,am(S#MU9Q9X{ayZwpaX.}%OTe]appS#6qpp(hCR=;wGLXA_u2b,),AHPnuidKGAzt+Hc;W($1E+KB6RY$RG}HdavWHoDtuN]!g}*b#vPtLO79$z[p5jz1u5dP]98]xg</PackEdit>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>1084</ID>
      <Description>"Infinite Health"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//Infinite Health
aobscanmodule(ih_aob1,gamedll_x64_rwdi.dll,0F 28 C6 EB 08 0F 2F F8)
registersymbol(ih_aob1)

ih_aob1:
db 90 90 90

ih_aob1+A:
db 90 90 90

[DISABLE]

ih_aob1:
db 0F 28 C6

ih_aob1+A:
db 0F 28 C7
unregistersymbol(ih_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1093</ID>
      <Description>"Instant Kill"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ik_1,32,gamedll_x64_rwdi.dll) //Instant Kill
aobscanmodule(ik_aob1,gamedll_x64_rwdi.dll,80 78 50 00 74 05 8B 07 89 43 78 48 8B 5C 24 30)
registersymbol(ik_aob1)
label(returnhere_ik_1)

//--------------------------------------------------//
ik_1:
mov [rbx+78],0
mov rbx,[rsp+30]
jmp returnhere_ik_1
//--------------------------------------------------//

ik_aob1+8:
jmp ik_1
nop
nop
nop
returnhere_ik_1:

[Disable]

ik_aob1+8:
db 89 43 78 48 8B 5C 24 30
unregistersymbol(ik_aob1)
dealloc(ik_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1096</ID>
      <Description>"Infinite Stamina"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Weapon Stamina
aobscanmodule(is_aob1,gamedll_x64_rwdi.dll,F3 0F 10 4B 10 F3 41 0F 5C C8 0F 2F CF)
registersymbol(is_aob1)

//Sprinting Stamina
aobscanmodule(is_aob2,gamedll_x64_rwdi.dll,F3 0F 5C C7 F3 0F 11 43 10 76 0C)
registersymbol(is_aob2)

is_aob1+12:
db 90 90

is_aob2:
db F3 0F 58 C7

[Disable]

is_aob1+12:
db 76 05
unregistersymbol(is_aob1)

is_aob2:
db F3 0F 5C C7
unregistersymbol(is_aob2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1102</ID>
      <Description>"Infinite Crafting Items"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(ici_1,32,gamedll_x64_rwdi.dll) //Infinite Crafting Items
aobscanmodule(ici_aob1,gamedll_x64_rwdi.dll,48 39 1C 28 75 59 8B 73 40 48 8D 4B 40)
registersymbol(ici_aob1)
label(returnhere_ici_1)

//--------------------------------------------------//
ici_1:
mov [rbx+40],64
mov esi,[rbx+40]
lea rcx,[rbx+40]
jmp returnhere_ici_1
//--------------------------------------------------//

ici_aob1+6:
jmp ici_1
nop
nop
returnhere_ici_1:

[Disable]

ici_aob1+6:
db 8B 73 40 48 8D 4B 40
unregistersymbol(ici_aob1)
dealloc(ici_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1100</ID>
      <Description>"Infinite Ammo"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Clip Ammo
aobscanmodule(ica_aob1,gamedll_x64_rwdi.dll,8B 50 40 48 8D 48 40 FF CA E8)
registersymbol(ica_aob1)

//Infinite Overall Ammo
aobscanmodule(ioa_aob1,gamedll_x64_rwdi.dll,48 63 C3 48 03 C0 45 89 44 C2 04)
registersymbol(ioa_aob1)

ica_aob1+7:
db 90 90

ioa_aob1+6:
db 90 90 90 90 90

[Disable]

ica_aob1+7:
db FF CA
unregistersymbol(ica_aob1)

ioa_aob1+6:
db 45 89 44 C2 04
unregistersymbol(ioa_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1236</ID>
      <Description>"Indestructible Weapons"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//Indestructible Weapons
aobscanmodule(iw_aob1,gamedll_x64_rwdi.dll,0F 2F F0 76 11 48 8B 47 18)
registersymbol(iw_aob1)

iw_aob1+3:
db 90 90


[DISABLE]

iw_aob1+3:
db 76 11
unregistersymbol(iw_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1103</ID>
      <Description>"Infinite Throwables / Weapon Upgrades"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

//Infinite Throwables / Weapon Upgrades
aobscanmodule(itwu_aob1,gamedll_x64_rwdi.dll,83 39 01 7E 39)
registersymbol(itwu_aob1)

itwu_aob1+3:
db 90 90

itwu_aob1+7:
db 90 90


[DISABLE]

itwu_aob1+3:
db 7E 39

itwu_aob1+7:
db FF CA
unregistersymbol(itwu_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2035</ID>
      <Description>"Infinite UV Flashlight"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite UV Flashlight
aobscanmodule(iuf_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C2 89 41 28)
registersymbol(iuf_aob1)

iuf_aob1:
db F3 0F 58 C2

[Disable]

iuf_aob1:
db F3 0F 5C C2
unregistersymbol(iuf_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2042</ID>
      <Description>"Infinite Grappling Hook"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

//Infinite Grappling Hook
aobscanmodule(igh_aob1,gamedll_x64_rwdi.dll,F3 0F 5C C7 0F 2F C6 F3 0F 11 43 40)
registersymbol(igh_aob1)

igh_aob1:
db F3 0F 58 C7


[Disable]

igh_aob1:
db F3 0F 5C C7
unregistersymbol(igh_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1095</ID>
      <Description>"Instant "Hold" Actions"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(iha_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(iha_aob1,gamedll_x64_rwdi.dll,0F 28 F7 F3 0F 11 B3 FC 01 00 00)
registersymbol(iha_aob1)
label(returnhere_iha_1)

//--------------------------------------------------//
iha_1:
mov [rbx+000001FC],(float)1
jmp returnhere_iha_1
//--------------------------------------------------//

iha_aob1+3:
jmp iha_1
nop
nop
nop
returnhere_iha_1:

[Disable]

iha_aob1+3:
db F3 0F 11 B3 FC 01 00 00
unregistersymbol(iha_aob1)
dealloc(iha_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2044</ID>
      <Description>"Easy Lock Picking "</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(elp_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(elp_aob1,gamedll_x64_rwdi.dll,F3 0F 10 56 50 F3 0F 10 4E 54)
registersymbol(elp_aob1)
label(returnhere_elp_1)

//--------------------------------------------------//
elp_1:
movss xmm1,[rsi+54]
mov [rsi+54],(float)999999
jmp returnhere_elp_1
//--------------------------------------------------//

elp_aob1+5:
jmp elp_1
returnhere_elp_1:

[Disable]

elp_aob1+5:
db F3 0F 10 4E 54
unregistersymbol(elp_aob1)
dealloc(elp_1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1065</ID>
      <Description>"Time Scale"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

alloc(sm_1,32,engine_x64_rwdi.dll)
aobscanmodule(sm_aob1,engine_x64_rwdi.dll,F3 0F 10 80 48 0F 00 00)
registersymbol(sm_aob1)
label(timescale)
registersymbol(timescale)
label(returnhere_sm_1)

//--------------------------------------------------//
sm_1:
fld [timescale]
fstp [rax+00000F48]
movss xmm0,[rax+00000F48]
jmp returnhere_sm_1

timescale:
dd 3F800000
//--------------------------------------------------//

sm_aob1:
jmp sm_1
nop
nop
nop
returnhere_sm_1:

[DISABLE]

sm_aob1:
db F3 0F 10 80 48 0F 00 00
unregistersymbol(sm_aob1)
unregistersymbol(timescale)
dealloc(sm_1)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1066</ID>
          <Description>"(+/-) = (Faster/Slower)"</Description>
          <VariableType>Float</VariableType>
          <Address>timescale</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Increase Value</Action>
              <Keys>
                <Key>187</Key>
              </Keys>
              <Value>.1</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Decrease Value</Action>
              <Keys>
                <Key>189</Key>
              </Keys>
              <Value>.1</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2104</ID>
      <Description>"Time Of Day"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(tod,1024,gamedll_x64_rwdi.dll) //Control Time Of Day
label(tod_day) //Day
label(tod_day_status)
registersymbol(tod_day_status)
label(tod_dawn) //Dawn
label(tod_dawn_status)
registersymbol(tod_dawn_status)
label(tod_night) //Night
label(tod_night_status)
registersymbol(tod_night_status)
label(tod_orig) //Resume Clock
aobscanmodule(tod_aob1,gamedll_x64_rwdi.dll,F3 0F 58 BB A8 00 00 00 F3 0F 11 BB A8 00 00 00)
registersymbol(tod_aob1)
label(returnhere_tod)

//-------------------------------------------------------//
tod:
cmp [tod_day_status],1
je tod_day
cmp [tod_dawn_status],1
je tod_dawn
cmp [tod_night_status],1
je tod_night
jmp tod_orig

tod_day:
mov [rbx+000000A8],(float)0.5
jmp returnhere_tod

tod_dawn:
mov [rbx+000000A8],(float)0.8
jmp returnhere_tod

tod_night:
mov [rbx+000000A8],(float)0.9
jmp returnhere_tod

tod_orig:
movss [rbx+000000A8],xmm7
jmp returnhere_tod

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 0
//-------------------------------------------------------//

tod_aob1+8:
jmp tod
nop
nop
nop
returnhere_tod:

[Disable]

tod_aob1+8:
db F3 0F 11 BB A8 00 00 00
unregistersymbol(tod_aob1)
unregistersymbol(tod_day_status)
unregistersymbol(tod_dawn_status)
unregistersymbol(tod_night_status)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2105</ID>
          <Description>"Day"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 1

tod_dawn_status:
dd 0

tod_night_status:
dd 0

[Disable]

tod_day_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2106</ID>
          <Description>"Dawn"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 1

tod_night_status:
dd 0

[Disable]

tod_dawn_status:
dd 0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2107</ID>
          <Description>"Night"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

tod_day_status:
dd 0

tod_dawn_status:
dd 0

tod_night_status:
dd 1

[Disable]

tod_night_status:
dd 0
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1108</ID>
      <Description>"Ranking"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2128</ID>
          <Description>"Experience Multiplier"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <Color>000000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(em_injected,256,gamedll_x64_rwdi.dll)

// Agility + Power
aobscanmodule(em_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(em_aob1)
label(em_1)
label(returnhere_em_1)

// Survivor: Merchant Rank
aobscanmodule(em_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(em_aob2)
label(em_2)
label(returnhere_em_2)

label(em_multiplier1)
registersymbol(em_multiplier1)

label(em_multiplier2)
registersymbol(em_multiplier2)

//--------------------------------------------------//
em_injected:
em_1:
imul esi,[em_multiplier1]
add [rax+rbp+08],esi
mov rax,[rbx+40]
jmp returnhere_em_1
//--------------------------------------------------//
em_2:
cmovl eax,r9d
imul eax,[em_multiplier2]
mov [rbx+24],eax
jmp returnhere_em_2
//--------------------------------------------------//
em_multiplier1:
dd 1
em_multiplier2:
dd 1
//--------------------------------------------------//

em_aob1:
jmp em_1
nop
nop
nop
returnhere_em_1:
//--------------------------------------------------//
em_aob2+3:
jmp em_2
nop
nop
returnhere_em_2:

[DISABLE]
//--------------------------------------------------//
em_aob1:
add [rax+rbp+08],esi
mov rax,[rbx+40]
//--------------------------------------------------//
unregistersymbol(em_aob1)
//--------------------------------------------------//

//--------------------------------------------------//
em_aob2+3:
cmovl eax,r9d
mov [rbx+24],eax
//--------------------------------------------------//
unregistersymbol(em_aob2)
//--------------------------------------------------//

unregistersymbol(em_multiplier1)
unregistersymbol(em_multiplier2)
dealloc(em_injected)

{
// em_aob1
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+9E69DC

"gamedll_x64_rwdi.dll"+9E69BE: 48 8B 48 58           -  mov rcx,[rax+58]
"gamedll_x64_rwdi.dll"+9E69C2: 48 85 C9              -  test rcx,rcx
"gamedll_x64_rwdi.dll"+9E69C5: 74 11                 -  je gamedll_x64_rwdi.dll+9E69D8
"gamedll_x64_rwdi.dll"+9E69C7: 48 8B 01              -  mov rax,[rcx]
"gamedll_x64_rwdi.dll"+9E69CA: FF 90 40 07 00 00     -  call qword ptr [rax+00000740]
"gamedll_x64_rwdi.dll"+9E69D0: 84 C0                 -  test al,al
"gamedll_x64_rwdi.dll"+9E69D2: 74 04                 -  je gamedll_x64_rwdi.dll+9E69D8
"gamedll_x64_rwdi.dll"+9E69D4: 85 FF                 -  test edi,edi
"gamedll_x64_rwdi.dll"+9E69D6: 75 59                 -  jne gamedll_x64_rwdi.dll+9E6A31
"gamedll_x64_rwdi.dll"+9E69D8: 48 8B 43 40           -  mov rax,[rbx+40]
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+9E69DC: 01 74 28 08           -  add [rax+rbp+08],esi
"gamedll_x64_rwdi.dll"+9E69E0: 48 8B 43 40           -  mov rax,[rbx+40]
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+9E69E4: 48 8B 0C 28           -  mov rcx,[rax+rbp]
"gamedll_x64_rwdi.dll"+9E69E8: 48 85 C9              -  test rcx,rcx
"gamedll_x64_rwdi.dll"+9E69EB: 74 3A                 -  je gamedll_x64_rwdi.dll+9E6A27
"gamedll_x64_rwdi.dll"+9E69ED: 4C 8B 09              -  mov r9,[rcx]
"gamedll_x64_rwdi.dll"+9E69F0: 48 8B D0              -  mov rdx,rax
"gamedll_x64_rwdi.dll"+9E69F3: 0F B7 44 28 16        -  movzx eax,word ptr [rax+rbp+16]
"gamedll_x64_rwdi.dll"+9E69F8: FF C8                 -  dec eax
"gamedll_x64_rwdi.dll"+9E69FA: 48 63 C8              -  movsxd  rcx,eax
"gamedll_x64_rwdi.dll"+9E69FD: 48 C1 E1 05           -  shl rcx,05
"gamedll_x64_rwdi.dll"+9E6A01: 42 8B 44 09 18        -  mov eax,[rcx+r9+18]
}
{
// em_aob2
// ORIGINAL CODE - INJECTION POINT: "gamedll_x64_rwdi.dll"+D3EEA

"gamedll_x64_rwdi.dll"+D3ECB: 8B 4A 0C              -  mov ecx,[rdx+0C]
"gamedll_x64_rwdi.dll"+D3ECE: EB 03                 -  jmp gamedll_x64_rwdi.dll+D3ED3
"gamedll_x64_rwdi.dll"+D3ED0: 41 8B C9              -  mov ecx,r9d
"gamedll_x64_rwdi.dll"+D3ED3: 44 3B C1              -  cmp r8d,ecx
"gamedll_x64_rwdi.dll"+D3ED6: 41 8B C0              -  mov eax,r8d
"gamedll_x64_rwdi.dll"+D3ED9: BA 01 00 00 00        -  mov edx,00000001
"gamedll_x64_rwdi.dll"+D3EDE: 0F 47 C1              -  cmova eax,ecx
"gamedll_x64_rwdi.dll"+D3EE1: 48 8B CB              -  mov rcx,rbx
"gamedll_x64_rwdi.dll"+D3EE4: 89 43 24              -  mov [rbx+24],eax
"gamedll_x64_rwdi.dll"+D3EE7: 41 3B C1              -  cmp eax,r9d
// ---------- INJECTING HERE ----------
"gamedll_x64_rwdi.dll"+D3EEA: 41 0F 4C C1           -  cmovl eax,r9d
"gamedll_x64_rwdi.dll"+D3EEE: 89 43 24              -  mov [rbx+24],eax
// ---------- DONE INJECTING  ----------
"gamedll_x64_rwdi.dll"+D3EF1: E8 CA DE FF FF        -  call gamedll_x64_rwdi.dll+D1DC0
"gamedll_x64_rwdi.dll"+D3EF6: 8B 7B 24              -  mov edi,[rbx+24]
"gamedll_x64_rwdi.dll"+D3EF9: 2B FE                 -  sub edi,esi
"gamedll_x64_rwdi.dll"+D3EFB: 48 8B 74 24 40        -  mov rsi,[rsp+40]
"gamedll_x64_rwdi.dll"+D3F00: 0F 84 7F 01 00 00     -  je gamedll_x64_rwdi.dll+D4085
"gamedll_x64_rwdi.dll"+D3F06: 40 84 ED              -  test bpl,bpl
"gamedll_x64_rwdi.dll"+D3F09: 0F 84 76 01 00 00     -  je gamedll_x64_rwdi.dll+D4085
"gamedll_x64_rwdi.dll"+D3F0F: 48 8B 1D 02 EB 8B 01  -  mov rbx,[gamedll_x64_rwdi.dll+1992A18]
"gamedll_x64_rwdi.dll"+D3F16: 48 85 DB              -  test rbx,rbx
"gamedll_x64_rwdi.dll"+D3F19: 0F 84 C7 00 00 00     -  je gamedll_x64_rwdi.dll+D3FE6
}

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>2129</ID>
              <Description>"Agility + Power Multiplier"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>em_multiplier1</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>2130</ID>
              <Description>"Survivor Rank Multiplier"</Description>
              <VariableType>4 Bytes</VariableType>
              <Address>em_multiplier2</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1106</ID>
          <Description>"Level Faster"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(lf_1,32,gamedll_x64_rwdi.dll) //Level Faster (Agility + Power)
aobscanmodule(lf_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(lf_aob1)
label(returnhere_lf_1)

alloc(lf_2,32,gamedll_x64_rwdi.dll) //Level Faster (Survivor: Merchant Rank)
aobscanmodule(lf_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(lf_aob2)
label(returnhere_lf_2)

//--------------------------------------------------//
lf_1:
shl esi,A
add [rax+rbp+08],esi
mov rax,[rbx+40]
jmp returnhere_lf_1
//--------------------------------------------------//
lf_2:
cmovl eax,r9d
add [rbx+24],186A0
jmp returnhere_lf_2
//--------------------------------------------------//

lf_aob1:
jmp lf_1
nop
nop
nop
returnhere_lf_1:

lf_aob2+3:
jmp lf_2
nop
nop
returnhere_lf_2:

[Disable]

lf_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(lf_aob1)
dealloc(lf_1)

lf_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(lf_aob2)
dealloc(lf_2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1107</ID>
          <Description>"Max Out"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(mo_1,32,gamedll_x64_rwdi.dll) //Max Out (Agility + Power)
aobscanmodule(mo_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(mo_aob1)
label(returnhere_mo_1)

alloc(mo_2,32,gamedll_x64_rwdi.dll) //Max Out (Survivor)
aobscanmodule(mo_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(mo_aob2)
label(returnhere_mo_2)

//--------------------------------------------------//
mo_1:
mov [rax+rbp+08],1E8480
mov rax,[rbx+40]
jmp returnhere_mo_1
//--------------------------------------------------//
mo_2:
cmovl eax,r9d
mov [rbx+24],1E8480
jmp returnhere_mo_2
//--------------------------------------------------//

mo_aob1:
jmp mo_1
nop
nop
nop
returnhere_mo_1:

mo_aob2+3:
jmp mo_2
nop
nop
returnhere_mo_2:

[Disable]

mo_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(mo_aob1)
dealloc(mo_1)

mo_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(mo_aob2)
dealloc(mo_2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1109</ID>
          <Description>"Reset Levels"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[Enable]

alloc(rl_1,32,gamedll_x64_rwdi.dll) //Reset Levels (Agility + Power)
aobscanmodule(rl_aob1,gamedll_x64_rwdi.dll,01 74 28 08 48 8B 43 40)
registersymbol(rl_aob1)
label(returnhere_rl_1)

alloc(rl_2,32,gamedll_x64_rwdi.dll) //Reset Levels (Survivor)
aobscanmodule(rl_aob2,gamedll_x64_rwdi.dll,41 3B C1 41 0F 4C C1 89 43 24 E8)
registersymbol(rl_aob2)
label(returnhere_rl_2)

//--------------------------------------------------//
rl_1:
mov [rax+rbp+08],0
mov rax,[rbx+40]
jmp returnhere_rl_1
//--------------------------------------------------//
rl_2:
cmovl eax,r9d
mov [rbx+24],0
jmp returnhere_rl_2
//--------------------------------------------------//

rl_aob1:
jmp rl_1
nop
nop
nop
returnhere_rl_1:

rl_aob2+3:
jmp rl_2
nop
nop
returnhere_rl_2:

[Disable]

rl_aob1:
db 01 74 28 08 48 8B 43 40
unregistersymbol(rl_aob1)
dealloc(rl_1)

rl_aob2+3:
db 41 0F 4C C1 89 43 24
unregistersymbol(rl_aob2)
dealloc(rl_2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2363</ID>
          <Description>"Agility Level"</Description>
          <LastState Value="24" RealAddress="7F474434"/>
          <Color>008000</Color>
          <VariableType>2 Bytes</VariableType>
          <Address>gamedll_x64_rwdi.dll+1992A18</Address>
          <Offsets>
            <Offset>34</Offset>
            <Offset>40</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>2166</ID>
              <Description>"Agility Exp"</Description>
              <LastState Value="9999999" RealAddress="7F474428"/>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>gamedll_x64_rwdi.dll+1992A18</Address>
              <Offsets>
                <Offset>28</Offset>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2364</ID>
              <Description>"Power Level"</Description>
              <LastState Value="24" RealAddress="7F474454"/>
              <Color>008000</Color>
              <VariableType>2 Bytes</VariableType>
              <Address>gamedll_x64_rwdi.dll+1992A18</Address>
              <Offsets>
                <Offset>54</Offset>
                <Offset>40</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>2167</ID>
                  <Description>"Power Exp"</Description>
                  <LastState Value="9999999" RealAddress="7F474448"/>
                  <Color>008000</Color>
                  <VariableType>4 Bytes</VariableType>
                  <Address>gamedll_x64_rwdi.dll+1992A18</Address>
                  <Offsets>
                    <Offset>48</Offset>
                    <Offset>40</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>2168</ID>
                  <Description>"Survivor Rank Level"</Description>
                  <LastState Value="25" RealAddress="7F474474"/>
                  <Color>008000</Color>
                  <VariableType>2 Bytes</VariableType>
                  <Address>gamedll_x64_rwdi.dll+1992A18</Address>
                  <Offsets>
                    <Offset>74</Offset>
                    <Offset>40</Offset>
                  </Offsets>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>2127</ID>
                      <Description>"Survivor Rank Exp"</Description>
                      <LastState Value="2000000" RealAddress="7F474468"/>
                      <Color>008000</Color>
                      <VariableType>4 Bytes</VariableType>
                      <Address>gamedll_x64_rwdi.dll+1992A18</Address>
                      <Offsets>
                        <Offset>68</Offset>
                        <Offset>40</Offset>
                      </Offsets>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2028</ID>
      <Description>"Set FOV"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

alloc(setFOV_1,32,gamedll_x64_rwdi.dll)
aobscanmodule(setFOV_aob1,gamedll_x64_rwdi.dll,44 0F 28 D8 FF 50 20 48 8B 4F 50 F3 0F 11 87 B8 00 00 00)
registersymbol(setFOV_aob1)
label(FOV)
registersymbol(FOV)
label(returnhere_setFOV_1)

//--------------------------------------------------//
setFOV_1:
fld [FOV]
fstp [rdi+B8]
jmp returnhere_setFOV_1

FOV:
dd 42280000
//--------------------------------------------------//

setFOV_aob1+B:
jmp setFOV_1
nop
nop
nop
returnhere_setFOV_1:

[Disable]

setFOV_aob1+B:
db F3 0F 11 87 B8 00 00 00
unregistersymbol(setFOV_aob1)
unregistersymbol(FOV)
dealloc(setFOV_1)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2029</ID>
          <Description>"FOV Value (Default Range: 42 - 72)"</Description>
          <VariableType>Float</VariableType>
          <Address>FOV</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2025</ID>
      <Description>"Backpack Editor"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
{
The editor is pretty straight forward. Before use, hit the update button. It will
pull your current inventory for that tab. Make your changes and hit apply. If it
errors out for any reason, let me know.
}
aobscanmodule(ItemEditDataAOB,gamedll_x64_rwdi.dll,48 8B 78 60 48 8B D9)
aobscanmodule(BaseItemTableAOB,gamedll_x64_rwdi.dll,8B C8 48 8B 42 E8 4C 8B 04 C8)
alloc(newmem,2048,gamedll_x64_rwdi.dll)
label(ItemEditStart)
label(ItemEditEnd)
label(BaseItemStart)
label(BaseItemEnd)
label(ItemEditData)
registersymbol(ItemEditDataAOB)
registersymbol(BaseItemTableAOB)
registersymbol(ItemEditData)

newmem:

ItemEditStart:
mov [ItemEditData],rax
mov rdi,[rax+60]
mov rbx,rcx
jmp ItemEditEnd

BaseItemStart:
mov [ItemEditData+8],rdx
mov ecx,eax
mov rax,[rdx-18]
jmp BaseItemEnd

ItemEditData:

ItemEditDataAOB:
jmp ItemEditStart
nop
nop
ItemEditEnd:

BaseItemTableAOB:
jmp BaseItemStart
nop
BaseItemEnd:
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)

ItemEditDataAOB:
db 48 8B 78 60 48 8B D9

BaseItemTableAOB:
db 8B C8 48 8B 42 E8

unregistersymbol(ItemEditDataAOB)
unregistersymbol(BaseItemTableAOB)
unregistersymbol(ItemEditData)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2027</ID>
          <Description>"Show Editor"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
LuaCall(EditorShow())
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
LuaCall(EditorHide())
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>354</ID>
      <Description>"Free Blueprint Requirements"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(FreeBluAOB1,gamedll_x64_rwdi.dll,41 8B 44 0D 00 85 C0)
aobscanmodule(FreeBluAOB2,gamedll_x64_rwdi.dll,44 8B 24 17 41 8D 51 01)
alloc(newmem,2048,gamedll_x64_rwdi.dll)

label(FreeBlu1Start)
label(FreeBlu2Start)
label(FreeBlue1End)
label(FreeBlue2End)
registersymbol(FreeBluAOB1)
registersymbol(FreeBluAOB2)

newmem:

FreeBlu1Start:
mov eax,0
jmp FreeBlue1End

FreeBlu2Start:
mov r12d,0
lea edx,[r9+01]
jmp FreeBlue2End

FreeBluAOB1:
jmp FreeBlu1Start
FreeBlue1End:

FreeBluAOB2:
jmp FreeBlu2Start
nop
nop
nop
FreeBlue2End:
 
[DISABLE]

dealloc(newmem)

FreeBluAOB1:
db 41 8B 44 0D 00

FreeBluAOB2:
db 44 8B 24 17 41 8D 51 01

unregistersymbol(FreeBluAOB1)
unregistersymbol(FreeBluAOB2)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>1234</ID>
      <Description>"Weapons In Safe Zone"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[Enable]

aobscanmodule(wisz_aob1,gamedll_x64_rwdi.dll,48 85 D2 74 03 48 89 3A FF 83 68 08 00 00)
registersymbol(wisz_aob1)

wisz_aob1+8:
db 90 90 90 90 90 90

[Disable]

wisz_aob1+8:
db FF 83 68 08 00 00
unregistersymbol(wisz_aob1)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2385</ID>
      <Description>"Waypoint Location Grabber"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2183</ID>
          <Description>"Waypoint X"</Description>
          <LastState Value="0" RealAddress="16666D30"/>
          <VariableType>Float</VariableType>
          <Address>gamedll_x64_rwdi.dll+1993260</Address>
          <Offsets>
            <Offset>850</Offset>
            <Offset>9C0</Offset>
            <Offset>48</Offset>
            <Offset>4A0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2184</ID>
          <Description>"Waypoint Y"</Description>
          <LastState Value="0" RealAddress="16666D34"/>
          <VariableType>Float</VariableType>
          <Address>gamedll_x64_rwdi.dll+1993260</Address>
          <Offsets>
            <Offset>854</Offset>
            <Offset>9C0</Offset>
            <Offset>48</Offset>
            <Offset>4A0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>2185</ID>
          <Description>"Waypoint Z"</Description>
          <LastState Value="0" RealAddress="16666D38"/>
          <VariableType>Float</VariableType>
          <Address>gamedll_x64_rwdi.dll+1993260</Address>
          <Offsets>
            <Offset>858</Offset>
            <Offset>9C0</Offset>
            <Offset>48</Offset>
            <Offset>4A0</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2121</ID>
      <Description>"Player Location Grabber"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(aobPlayerLocationGrabber,engine_x64_rwdi.dll,40 53 48 83 EC 40 4C 8B 49 ?? 0F 29 74 24 ?? 48 8B D9)

alloc(newmem,2048,"engine_x64_rwdi.dll"+383ED0)

label(aobPlayerLocationGrabber_r)
registersymbol(aobPlayerLocationGrabber_r)

label(lblPlayerLocationGrabber)
label(lblPlayerLocationGrabberSkip)
label(lblPlayerLocationGrabberRet)

label(pPlayerLocation)
registersymbol(pPlayerLocation)

newmem:

lblPlayerLocationGrabber:
test rcx,rcx
jz short lblPlayerLocationGrabberSkip
cmp dword ptr [rcx+114],64
jne short lblPlayerLocationGrabberSkip
mov qword ptr [pPlayerLocation],rcx
lblPlayerLocationGrabberSkip:
//push rbx
//sub rsp,40
db 40 53 48 83 EC 40
jmp lblPlayerLocationGrabberRet
pPlayerLocation:
dq 0

//"engine_x64_rwdi.dll"+383ED0:
aobPlayerLocationGrabber:
aobPlayerLocationGrabber_r:
jmp lblPlayerLocationGrabber
nop
lblPlayerLocationGrabberRet:

[DISABLE]
aobPlayerLocationGrabber_r:
//"engine_x64_rwdi.dll"+383ED0:
//Alt: push rbx
//Alt: sub rsp,40
db 40 53 48 83 EC 40

unregistersymbol(aobPlayerLocationGrabber_r)

unregistersymbol(pPlayerLocation)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2120</ID>
          <Description>"pPlayerLocation"</Description>
          <ShowAsHex>1</ShowAsHex>
          <Color>0000FF</Color>
          <VariableType>8 Bytes</VariableType>
          <Address>pPlayerLocation</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2124</ID>
              <Description>"pPlayerLocation-&gt;x"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayerLocation</Address>
              <Offsets>
                <Offset>BC</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2125</ID>
              <Description>"pPlayerLocation-&gt;z"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayerLocation</Address>
              <Offsets>
                <Offset>C0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>2126</ID>
              <Description>"pPlayerLocation-&gt;y"</Description>
              <Color>0000FF</Color>
              <VariableType>Float</VariableType>
              <Address>pPlayerLocation</Address>
              <Offsets>
                <Offset>C4</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2139</ID>
      <Description>"Teleport Location"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <Color>FF0000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
aobscanmodule(aobLocationUpdater,engine_x64_rwdi.dll,0F 28 F1 4D 85 C9 0F 84 ?? ?? ?? ?? F3 0F 10 91 B8 00 00 00)

alloc(newmem,4096,"engine_x64_rwdi.dll"+383EE2)

label(aobLocationUpdater_r)
registersymbol(aobLocationUpdater_r)

label(lblLocationUpdater)
label(lblLocationUpdaterSkip1)
label(lblLocationUpdaterSkip2)
label(lblLocationUpdaterSkip3)
label(lblLocationUpdaterSkip4)
label(lblLocationUpdaterSkip5)
label(lblLocationUpdaterSkip)
label(lblLocationUpdaterRet)

label(cApplyPreset)

label(pLocationPresets)
registersymbol(pLocationPresets)

label(bTeleportToPreset1)
label(bTeleportToPreset2)
label(bTeleportToPreset3)
label(bTeleportToPreset4)
label(bTeleportToPreset5)
label(iTeleportPreset1)
label(iTeleportPreset2)
label(iTeleportPreset3)
label(iTeleportPreset4)
label(iTeleportPreset5)
registersymbol(bTeleportToPreset1)
registersymbol(bTeleportToPreset2)
registersymbol(bTeleportToPreset3)
registersymbol(bTeleportToPreset4)
registersymbol(bTeleportToPreset5)
registersymbol(iTeleportPreset1)
registersymbol(iTeleportPreset2)
registersymbol(iTeleportPreset3)
registersymbol(iTeleportPreset4)
registersymbol(iTeleportPreset5)

newmem:
iTeleportPreset1:
dq (int)0
iTeleportPreset2:
dq (int)4
iTeleportPreset3:
dq (int)13
iTeleportPreset4:
dq (int)5
iTeleportPreset5:
dq (int)12

pLocationPresets:
//////////////////////////////////////////////////////////////////////////////
// Enter all locations as dword float triplets: X, Z, Y (and not as X, Y, Z!)
// Remember to update preset dropdowns in address list!
/*
0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
*/
// Tower; entrance
dd (float)259.9804688
dd (float)134.3327637
dd (float)86.6372757
// Tower; elevator
dd (float)245.6986237
dd (float)137.8380737
dd (float)87.67877197
// GRE radio spot near Rais' base
dd (float)716.6741333
dd (float)140.7787018
dd (float)260.1118469
// Convenience store
dd (float)296.9414062
dd (float)127.3425217
dd (float)55.36845398
// School
dd (float)643.3206787
dd (float)133.2903442
dd (float)260.7666626
// Safe zone on hill
dd (float)112.9376602
dd (float)161.0890198
dd (float)229.6279144
// Safe zone on bridge
dd (float)-138.2489166
dd (float)140.4362946
dd (float)295.9544983
// Bridge climb, level 1
dd (float)-132.6832581
dd (float)188.0761261
dd (float)303.1186829
// Bridge climb, level 2
dd (float)-132.0743713
dd (float)212.090683
dd (float)280.2389221
// Bridge, military base
dd (float)-352.5913086
dd (float)143.6129913
dd (float)291.8622131
// Safe zone north of bridge
dd (float)-61.18738556
dd (float)98.83222198
dd (float)446.2907715
// Safe zone North
dd (float)238.2825623
dd (float)147.3724976
dd (float)645.2614136
// Tunnel North
dd (float)364.8158875
dd (float)137.8293152
dd (float)645.2962646
// Safe zone The Witch
dd (float)489.3204346
dd (float)132.3123932
dd (float)102.9339066
// NE Isle with Lavender herbs
dd (float)-172.4967957
dd (float)114.1479263
dd (float)479.0149231
// Loot cave (Destiny reference)
dd (float)13.53541851
dd (float)96.77336884
dd (float)536.3782959
// Destination (Puke'N'Nuke)
dd (float)-11.24782658
dd (float)130.7406769
dd (float)553.7602539

lblLocationUpdater:
cmp dword ptr [rcx+114],64
jne lblLocationUpdaterSkip
cmp dword ptr [bTeleportToPreset1],1
jne short lblLocationUpdaterSkip1
mov dword ptr [bTeleportToPreset1],0
push rax
mov rax,[iTeleportPreset1]
call cApplyPreset
pop rax
lblLocationUpdaterSkip1:
cmp dword ptr [bTeleportToPreset2],1
jne short lblLocationUpdaterSkip2
mov dword ptr [bTeleportToPreset2],0
push rax
mov rax,[iTeleportPreset2]
call cApplyPreset
pop rax
lblLocationUpdaterSkip2:
cmp dword ptr [bTeleportToPreset3],1
jne short lblLocationUpdaterSkip3
mov dword ptr [bTeleportToPreset3],0
push rax
mov rax,[iTeleportPreset3]
call cApplyPreset
pop rax
lblLocationUpdaterSkip3:
cmp dword ptr [bTeleportToPreset4],1
jne short lblLocationUpdaterSkip4
mov dword ptr [bTeleportToPreset4],0
push rax
mov rax,[iTeleportPreset4]
call cApplyPreset
pop rax
lblLocationUpdaterSkip4:
cmp dword ptr [bTeleportToPreset5],1
jne short lblLocationUpdaterSkip5
mov dword ptr [bTeleportToPreset5],0
push rax
mov rax,[iTeleportPreset5]
call cApplyPreset
pop rax
lblLocationUpdaterSkip5:
lblLocationUpdaterSkip:
//Alt: movaps xmm6,xmm1 // Original code
//Alt: test r9,r9       // Original code
db 0F 28 F1 4D 85 C9
jmp lblLocationUpdaterRet
cApplyPreset:
lea rax,[rax+rax*2]
push rbx                 // Workaround for lea rax,[pLocationPresets+rax*4]
mov rbx,pLocationPresets
lea rax,[rbx+rax*4]
pop rbx
/*
movss xmm0,[rax]
movss xmm1,[rax+4]
movss xmm2,[rax+8]
*/
fld dword ptr [rax]
fstp dword ptr [rcx+BC]
fld dword ptr [rax+4]
fstp dword ptr [rcx+C0]
fld dword ptr [rax+8]
fstp dword ptr [rcx+C4]
ret
bTeleportToPreset1:
dd 0
bTeleportToPreset2:
dd 0
bTeleportToPreset3:
dd 0
bTeleportToPreset4:
dd 0
bTeleportToPreset5:
dd (int)0

// "engine_x64_rwdi.dll"+383EE2:
aobLocationUpdater:
aobLocationUpdater_r:
jmp lblLocationUpdater
nop
lblLocationUpdaterRet:

[DISABLE]
aobLocationUpdater_r:
//"engine_x64_rwdi.dll"+383EE2:
//Alt: movaps xmm6,xmm1
//Alt: test r9,r9
db 0F 28 F1 4D 85 C9

unregistersymbol(aobLocationUpdater_r)

unregistersymbol(pLocationPresets)

unregistersymbol(bTeleportToPreset1)
unregistersymbol(bTeleportToPreset2)
unregistersymbol(bTeleportToPreset3)
unregistersymbol(bTeleportToPreset4)
unregistersymbol(bTeleportToPreset5)
unregistersymbol(iTeleportPreset1)
unregistersymbol(iTeleportPreset2)
unregistersymbol(iTeleportPreset3)
unregistersymbol(iTeleportPreset4)
unregistersymbol(iTeleportPreset5)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>2141</ID>
          <Description>"iTeleportPreset1"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
</DropDownList>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iTeleportPreset1</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2142</ID>
              <Description>"bTeleportToPreset1"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bTeleportToPreset1</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>18</Key>
                    <Key>49</Key>
                  </Keys>
                  <Value>1</Value>
                  <Description>Trigger teleport</Description>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2143</ID>
          <Description>"iTeleportPreset2"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
</DropDownList>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iTeleportPreset2</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2144</ID>
              <Description>"bTeleportToPreset2"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bTeleportToPreset2</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>18</Key>
                    <Key>50</Key>
                  </Keys>
                  <Value>1</Value>
                  <Description>Trigger teleport</Description>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2145</ID>
          <Description>"iTeleportPreset3"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
</DropDownList>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iTeleportPreset3</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2146</ID>
              <Description>"bTeleportToPreset3"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bTeleportToPreset3</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>18</Key>
                    <Key>51</Key>
                  </Keys>
                  <Value>1</Value>
                  <Description>Trigger teleport</Description>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2147</ID>
          <Description>"iTeleportPreset4"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
</DropDownList>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iTeleportPreset4</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2148</ID>
              <Description>"bTeleportToPreset4"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bTeleportToPreset4</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>18</Key>
                    <Key>52</Key>
                  </Keys>
                  <Value>1</Value>
                  <Description>Trigger teleport</Description>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>2149</ID>
          <Description>"iTeleportPreset5"</Description>
          <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Odrs: Tower; entrance
1:Odrs: Tower; elevator
2:Odrs: GRE radio spot near Rais' base
3:Odrs: Convenience store
4:Odrs: School front
5:Odrs: Safe zone: Hilltop
6:Odrs: Safe zone: Bridge
7:Odrs: Bridge climb, level 1
8:Odrs: Bridge climb, level 2
9:Odrs: Bridge, military base
10:Odrs: Safe zone: North of Bridge
11:Odrs: Safe zone: North
12:Odrs: Tunnel North
13:Odrs: Safe zone: The Witch
14:Odrs: NE Isle with Lavender herbs
15:Odrs: Loot cave (Destiny reference)
16:Odrs: Destination (Puke'N'Nuke)
</DropDownList>
          <Color>FF0000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>iTeleportPreset5</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>2150</ID>
              <Description>"bTeleportToPreset5"</Description>
              <DropDownList ReadOnly="1" DescriptionOnly="1" DisplayValueAsItem="1">0:Disabled
1:Enabled
</DropDownList>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bTeleportToPreset5</Address>
              <Hotkeys>
                <Hotkey>
                  <Action>Set Value</Action>
                  <Keys>
                    <Key>17</Key>
                    <Key>18</Key>
                    <Key>53</Key>
                  </Keys>
                  <Value>1</Value>
                  <Description>Trigger teleport</Description>
                  <ID>0</ID>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>328</ID>
      <Description>"Unlimited Potion Duration"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(potion,gamedll_x64_rwdi.dll,0F 28 F9 F3 0F 5C C7)
potion+3:
  db 90 90 90 90
registersymbol(potion)

[DISABLE]
potion+3:
  db F3 0F 5C C7
unregistersymbol(potion)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2176</ID>
      <Description>"Unlimited Flare/Airstrike ect."</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,F3 0F 11 01 77 23)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+ABAAD9)

label(code)
label(return)

newmem:

code:
  nop//movss [rcx],xmm0
  ja gamedll_x64_rwdi.dll+ABAB02
  jmp return

INJECT:
  jmp code
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 01 77 23

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2280</ID>
      <Description>"Unlimited Camouflage (activate script camouflage self)"</Description>
      <LastState/>
      <Color>0000FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,F3 0F 11 43 14 FF 50 20)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B02065)

label(code)
label(return)

newmem:

code:
  nop//movss [rbx+14],xmm0
  jmp return

INJECT:
  jmp code
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 43 14

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2382</ID>
      <Description>"Cash"</Description>
      <LastState/>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,89 43 40 E8 65 4F 80 FF)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+AF8143)

label(code)
label(return)

newmem:

code:
  mov [rbx+40],#999999999
  nop//call gamedll_x64_rwdi.dll+2FD0B0
  jmp return

INJECT:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 89 43 40 E8 65 4F 80 FF

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2383</ID>
      <Description>"Hunter Options"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2306</ID>
          <Description>"Hunter UV Block Duration"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,F3 0F 10 83 A0 00 00 00 F3 0F 5C C6)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BF8A60)

label(code)
label(return)

newmem:

code:
  nop//movss xmm0,[rbx+000000A0]
  jmp return

INJECT:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 10 83 A0 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2309</ID>
          <Description>"Hunter UV Block Instant Cooldown Use"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,FF 4B 70 48 8B 05 C8 B3 D9 00)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BF7E8E)

label(code)
label(return)

newmem:

code:
  nop//inc [rbx+70]
  mov rax,[gamedll_x64_rwdi.dll+1993260]
  jmp return

INJECT:
  jmp code
  nop
  nop
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db FF 4B 70 48 8B 05 C8 B3 D9 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2319</ID>
          <Description>"Hunter Shoot A Spit Instant Cooldown"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,44 01 6C C7 60)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+BF94C9)

label(code)
label(return)

newmem:

code:
  nop//mov [rdi+rax*8+60],r13d
  jmp return

INJECT:
  jmp code
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 44 01 6C C7 60

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2362</ID>
          <Description>"Hunter LVL Fast"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,01 68 08 48 8B 47 40)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+B15559)

label(code)
label(return)

newmem:

code:
  mov [rax+08],#9999999
  jmp return

INJECT:
  jmp code
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 01 68 08 48 8B 47 40

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2384</ID>
      <Description>"Challenges Time Freeze Options"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>2377</ID>
          <Description>"Challenge Time Freeze"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,F3 0F 11 83 F0 00 00 00 48 85)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+AD7D1D)

label(code)
label(return)

newmem:

code:
  nop//movss [rbx+000000F0],xmm0
  jmp return

INJECT:
  jmp code
  nop
  nop
  nop
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 83 F0 00 00 00

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2294</ID>
          <Description>"Bozak Horde Time Freeze (AOB)"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT,gamedll_x64_rwdi.dll,F3 0F 11 40 D8 80)
alloc(newmem,$1000,"gamedll_x64_rwdi.dll"+3A640B)

label(code)
label(return)

newmem:

code:
  nop//movss [rax-28],xmm0
  jmp return

INJECT:
  jmp code
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db F3 0F 11 40 D8

unregistersymbol(INJECT)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2386</ID>
      <Description>"Super Run Speed Options"</Description>
      <Options moHideChildren="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <Color>FF0000</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>332</ID>
          <Description>"Super Run Speed 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$1000,gamedll_x64_rwdi.dll)
alloc(newmem1,$1000,gamedll_x64_rwdi.dll)
alloc(newmem2,$1000,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)15
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)15
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)15
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2110</ID>
          <Description>"Super Run Speed 2"</Description>
          <LastState/>
          <Color>008000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$1000,gamedll_x64_rwdi.dll)
alloc(newmem1,$1000,gamedll_x64_rwdi.dll)
alloc(newmem2,$1000,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)25
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)25
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)25
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2111</ID>
          <Description>"Super Run Speed 3"</Description>
          <LastState/>
          <Color>FF0000</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]


aobscanmodule(_Speed,gamedll_x64_rwdi.dll,F3 0F 59 72 08 80) // should be unique
aobscanmodule(_Speed2,gamedll_x64_rwdi.dll,F3 0F 59 7A 08 48)
aobscanmodule(_Speed3,gamedll_x64_rwdi.dll,F3 41 0F 59 41 08 C3 81)
alloc(newmem,$1000,gamedll_x64_rwdi.dll)
alloc(newmem1,$1000,gamedll_x64_rwdi.dll)
alloc(newmem2,$1000,gamedll_x64_rwdi.dll)

label(code)
label(return)
label(code1)
label(return1)
label(code2)
label(return2)

newmem2:
  mov [r9+08],(float)50
code2:
  mulss xmm0,[r9+08]
  jmp return2


newmem1:
  mov [rdx+08],(float)50
code1:
  mulss xmm7,[rdx+08]
  jmp return1


newmem:
  mov [rdx+08],(float)50
code:
  mulss xmm6,[rdx+08]
  jmp return

_Speed:
  jmp newmem
return:

_Speed2:
  jmp newmem1
return1:

_Speed3:
  jmp newmem2
  nop
return2:

registersymbol(_Speed)
registersymbol(_Speed2)
registersymbol(_Speed3)

[DISABLE]

_Speed:
  db F3 0F 59 72 08

_Speed2:
  db F3 0F 59 7A 08

_Speed3:
  db F3 41 0F 59 41 08

unregistersymbol(_Speed)
dealloc(newmem)
unregistersymbol(_Speed2)
dealloc(newmem1)
unregistersymbol(_Speed3)
dealloc(newmem2)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of jae gamedll_x64_rwdi.dll+C5A86</Description>
      <Address>7FFCB5F55A7D</Address>
      <ModuleName>gamedll_x64_rwdi.dll</ModuleName>
      <ModuleNameOffset>C5A7D</ModuleNameOffset>
      <Before>
        <Byte>81</Byte>
        <Byte>9C</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>73</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>89</Byte>
        <Byte>9C</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of jae gamedll_x64_rwdi.dll+C5AA6</Description>
      <Address>7FFCB5F55A9D</Address>
      <ModuleName>gamedll_x64_rwdi.dll</ModuleName>
      <ModuleNameOffset>C5A9D</ModuleNameOffset>
      <Before>
        <Byte>81</Byte>
        <Byte>A4</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>73</Byte>
        <Byte>07</Byte>
      </Actual>
      <After>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>89</Byte>
        <Byte>A4</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of push rax</Description>
      <Address>7FF6B12D12F5</Address>
      <ModuleName>DyingLightGame.exe</ModuleName>
      <ModuleNameOffset>F12F5</ModuleNameOffset>
      <Before>
        <Byte>E8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>53</Byte>
        <Byte>51</Byte>
        <Byte>52</Byte>
        <Byte>56</Byte>
        <Byte>57</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of add rcx,20</Description>
      <Address>7306C019</Address>
      <ModuleName>MSVCR100.dll</ModuleName>
      <ModuleNameOffset>3C019</ModuleNameOffset>
      <Before>
        <Byte>4C</Byte>
        <Byte>8B</Byte>
        <Byte>54</Byte>
        <Byte>0A</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>48</Byte>
        <Byte>83</Byte>
        <Byte>C1</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>E0</Byte>
        <Byte>4C</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>teleport_aob1</Name>
      <Address>7FEE4824E49</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_aob1</Name>
      <Address>7FEDF904290</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_X</Name>
      <Address>7FEE3C500D6</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Y</Name>
      <Address>7FEE3C500DA</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>saved_Z</Name>
      <Address>7FEE3C500DE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>savelocation_status</Name>
      <Address>7FEE3C5004A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gotosaved_status</Name>
      <Address>7FEE3C5004E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_X</Name>
      <Address>7FEE3C5014C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Y</Name>
      <Address>7FEE3C50154</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>waypoint_Z</Name>
      <Address>7FEE3C50150</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>gotowaypoint_status</Name>
      <Address>7FEE3C50052</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>icamo_aob1</Name>
      <Address>7FEE0713BF0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ItemEditDataAOB</Name>
      <Address>7FFA5B763365</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BaseItemTableAOB</Name>
      <Address>7FFA5B3499FE</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ItemEditData</Name>
      <Address>7FFA59D10037</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_Speed</Name>
      <Address>7FFD15DF27B4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_Speed2</Name>
      <Address>7FFD15DF2676</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>_Speed3</Name>
      <Address>7FFD15D027E1</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ik_aob1</Name>
      <Address>7FFE4C410DCB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ih_aob1</Name>
      <Address>7FFCD2093100</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>is_aob1</Name>
      <Address>7FFCD21C4654</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>is_aob2</Name>
      <Address>7FFCD21B6FCF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ici_aob1</Name>
      <Address>7FFCD21A9CC9</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ica_aob1</Name>
      <Address>7FFCD2272CBF</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ioa_aob1</Name>
      <Address>7FFCD21A91A2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iw_aob1</Name>
      <Address>7FFCD1C947B8</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>itwu_aob1</Name>
      <Address>7FFCD21A9DDB</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>iuf_aob1</Name>
      <Address>7FFCD216AA15</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>igh_aob1</Name>
      <Address>7FFCD22544D2</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>elp_aob1</Name>
      <Address>7FFCD1D0364B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FreeBluAOB1</Name>
      <Address>7FFCD1977E5E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>FreeBluAOB2</Name>
      <Address>7FFCD197792E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>potion</Name>
      <Address>7FFCD2049ECC</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>INJECT</Name>
      <Address>7FFCD21B2065</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>00 00 03 03 10 0F 03 - potion
31 2E 00 10 00 00 0B - axe
</Comments>
  <LuaScript>ItemTable = {}
WeaponTable = {}
BaseItemTable = {}
ModTable = {}
ItemPack = 0
WeapPack = 0
BaseItemPoint = 0

function Dec2Hex(nValue)
  return string.format("%X", 0+nValue)
end

function Hex2Dec(sValue)
  return tonumber(sValue, 16).."";
end

function BackPackUpdate()
   WeapPack = readQword(readQword("ItemEditData")+0x60)+0x40
   ItemPack = readQword(readQword("ItemEditData")+0x58)+0x40
   BaseItemPoint = readQword("ItemEditData+8")-0x18
   local BasePointCount = readInteger(BaseItemPoint+8)
   PackEdit_LBWeapSwap.clear()
   local WeapSwapList = PackEdit_LBWeapSwap.getItems()
   local ItemSwapList = PackEdit_LBItemSwap.getItems()
   for i=0,BasePointCount-1 do
     local ItemAddr = readQword(readQword(BaseItemPoint)+i*8)
     local ItemString = readString(readQword(ItemAddr+0x18))
     if string.find(ItemString,"Craftplan_") then
       table.insert(ModTable,{Address = ItemAddr,Name = ItemString})
     end
     table.insert(BaseItemTable,{Address=ItemAddr,Name=ItemString})
   end
   PackEdit_CBWeapMod.clear()
   local ModList = PackEdit_CBWeapMod.getItems()
   ModList.add("None")
   PackEdit_CBWeapMod.setItemIndex(0)
   for k,v in pairs(ModTable) do
     ModList.add(v.Name)
   end
  for k,v in pairs(BaseItemTable) do
    WeapSwapList.add(v.Name)
    ItemSwapList.add(v.Name)
  end
end

function BWeapUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBWeapList.clear()
  WeaponTable={}
  local WeapList = PackEdit_LBWeapList.getItems()
  local WeapCount = readInteger(WeapPack+8)
  for i=0,WeapCount-1 do
    local WeapAddr = readQword(readQword(WeapPack)+i*8)
    local WeapString = readString(readQword(readQword(WeapAddr+0x60)+0x18))
    local EquipFlag = bAnd(readBytes(WeapAddr+0xf8),4)
    if EquipFlag == 4 then
      WeapString = "E: "..WeapString
    end
    table.insert(WeaponTable,{Index = i,Name=WeapString,Address=WeapAddr,Equip=EquipFlag})
  end
  table.sort(WeaponTable,function(a,b) return a.Equip&gt;b.Equip end)
  for k,v in pairs(WeaponTable) do
    WeapList.add(v.Name)
  end
end


function LBWeapListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Weapon = WeaponTable[sender.ItemIndex+1]
  local Dura = readFloat(Weapon.Address+0x44)
  local Repair = readInteger(Weapon.Address+0x48)
  local Quant = readInteger(Weapon.Address+0x40)
  local Qual = readBytes(Weapon.Address+0x68)
  local Mod = readQword(Weapon.Address+0x70)
  PackEdit_EWeapDur.text = Dura
  PackEdit_EWeapRepair.text = Repair
  PackEdit_EWeapQual.text = Qual
  PackEdit_EWeapQuant.text = Quant
  local ModTest = false
  for k,v in pairs(ModTable) do
      if v.Address == Mod then
        PackEdit_CBWeapMod.setItemIndex(k)
        ModTest = true
        break
      end
  end
  if ModTest == false then PackEdit_CBWeapMod.setItemIndex(0) end
end

function EWeapApplyClick(sender)
  if tonumber(PackEdit_EWeapDur.text) == nil or tonumber(PackEdit_EWeapRepair.text) == nil or tonumber(PackEdit_EWeapQual.text) == nil or tonumber(PackEdit_EWeapQuant.text) == nil then
    showMessage("Please enter only number values.")
  return end
  if PackEdit_LBWeapList.ItemIndex == -1 then return end
  local ModIndex = PackEdit_CBWeapMod.getItemIndex()
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  local Dura = tonumber(PackEdit_EWeapDur.text)
  local Repair = tonumber(PackEdit_EWeapRepair.text)
  local Quant = tonumber(PackEdit_EWeapQuant.text)
  local Qual = tonumber(PackEdit_EWeapQual.text)
  writeFloat(Weapon.Address+0x44,Dura)
  writeInteger(Weapon.Address+0x48,Repair)
  writeInteger(Weapon.Address+0x40,Quant)
  writeBytes(Weapon.Address+0x68,Qual)
  if ModIndex == 0 then
    writeQword(Weapon.Address+0x70,0)
  else
    writeQword(Weapon.Address+0x70,ModTable[ModIndex].Address)
  end
end


function BWeapSwapClick(sender)
  if PackEdit_LBWeapSwap.ItemIndex == -1 or PackEdit_LBWeapList.ItemIndex == -1 then return end
  local SwapIndex = PackEdit_LBWeapSwap.getItemIndex()+1
  local Weapon = WeaponTable[PackEdit_LBWeapList.ItemIndex+1]
  writeQword(Weapon.Address+0x60,BaseItemTable[SwapIndex].Address)
  BWeapUpdateClick()
end


function BItemUpdateClick(sender)
  if #BaseItemTable == 0 then
    BackPackUpdate()
  end
  PackEdit_LBItemList.clear()
  ItemTable = {}
  local ItemList = PackEdit_LBItemList.getItems()
  local ItemCount = readInteger(ItemPack+8)
  for i = 0,ItemCount-1 do
    local ItemAddr = readQword(readQword(ItemPack)+i*8)
    local ItemString = readString(readQword(readQword(ItemAddr+0x60)+0x18))
    local ItemType = readBytes(readQword(ItemAddr+0x60)+0x78)
    table.insert(ItemTable,{Name = ItemString,Address = ItemAddr,ItemIndex = ItemType})
  end
  table.sort(ItemTable,function(a,b) return a.ItemIndex &lt; b.ItemIndex end)
  for k,v in pairs(ItemTable) do
    ItemList.add(v.Name)
  end
end

function LBItemListSelectionChange(sender, user)
  if sender.ItemIndex == -1 then return end
  local Item = ItemTable[sender.ItemIndex+1]
  local Quant = readInteger(Item.Address+0x40)
  PackEdit_EItemQuant.text = Quant
  local ItemTypeIndex = 0
  for k,v in pairs(BaseItemTable) do
    if v.Name == Item.Name then ItemTypeIndex = k-1 end
  end
  PackEdit_LBItemSwap.setItemIndex(ItemTypeIndex)
end

function BItemApplyClick(sender)
  if PackEdit_LBItemSwap.ItemIndex == -1 or PackEdit_LBItemList.ItemIndex == -1 then return end
  if tonumber(PackEdit_EItemQuant.text) == nil then showMessage("Please enter only number values.") end
  local SwapIndex = PackEdit_LBItemSwap.getItemIndex()+1
  local Item = ItemTable[PackEdit_LBItemList.ItemIndex+1]
  local Quant = tonumber(PackEdit_EItemQuant.text)
  writeQword(Item.Address+0x60,BaseItemTable[SwapIndex].Address)
  writeInteger(Item.Address+0x40,Quant)
  BItemUpdateClick()
end

function EditorShow()
  ItemTable = {}
  WeaponTable = {}
  BaseItemTable = {}
  PackEdit.show()
end

function EditorHide()
  PackEdit.close()
end
</LuaScript>
</CheatTable>
