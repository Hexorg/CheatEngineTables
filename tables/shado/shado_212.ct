<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="14">
  <CheatEntries>
    <CheatEntry>
      <ID>74</ID>
      <Description>"Shad'O main script"</Description>
      <Options moHideChildren="1" moBindActivation="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,4096)
aobscan(aobLight,89 88 90 00 00 00 8B 05)
aobscan(aobShadow,89 88 94 00 00 00 C9)

label(aobLight_r)
label(lblLight)
label(lblLightSkip)
label(lblLightReturn)
registersymbol(aobLight_r)

label(aobShadow_r)
label(lblShadow)
label(lblShadowSkip)
label(lblShadowReturn)
registersymbol(aobShadow_r)

label(bLightHackEnabled)
label(iMinLight)
label(iMinShadow)
label(bShadowHackEnabled)
label(bGodModeEnabled)
label(sCompData)
label(iDamageMultiplier)
label(iSpeedReductionSpeedDivisor)
label(iSpeedReductionTimeMultiplier)
label(fBeamSizeMultiplier)
label(fFireRateMultiplier)
label(iAttackMultiplier)
label(fVisionRangeMultiplier)

registersymbol(bLightHackEnabled)
registersymbol(iMinLight)
registersymbol(bShadowHackEnabled)
registersymbol(iMinShadow)
registersymbol(bGodModeEnabled)
registersymbol(sCompData)
registersymbol(iDamageMultiplier)
registersymbol(iSpeedReductionSpeedDivisor)
registersymbol(iSpeedReductionTimeMultiplier)
registersymbol(fBeamSizeMultiplier)
registersymbol(fFireRateMultiplier)
registersymbol(iAttackMultiplier)
registersymbol(fVisionRangeMultiplier)

newmem:

lblLight:
pushfd
cmp dword ptr[bLightHackEnabled],1
jne short lblLightSkip
cmp dword ptr [iMinLight],ecx
jl short lblLightSkip
mov ecx, [iMinLight]
lblLightSkip:
popfd
mov [ebp+0c],ecx
mov [eax+00000090],ecx  // Original code
jmp lblLightReturn

lblShadow:
pushfd
cmp dword ptr[bShadowHackEnabled],1
jne short lblShadowSkip
cmp dword ptr [iMinShadow],ecx
jl short lblShadowSkip
mov ecx,[iMinShadow]
lblShadowSkip:
popfd
mov [ebp+0c],ecx
mov [eax+00000094],ecx  // Original code
jmp lblShadowReturn

bLightHackEnabled:
dd 1
iMinLight:
dd (int)999
bShadowHackEnabled:
dd 1
iMinShadow:
dd (int)999
bGodModeEnabled:
dd 1
sCompData:
db '----- ----- ----- -----'
iDamageMultiplier:
dd 4
iSpeedReductionSpeedDivisor:
dd 2
iSpeedReductionTimeMultiplier:
dd 2
fBeamSizeMultiplier:
dd (float)2.0
fFireRateMultiplier:
dd (float)4.0
iAttackMultiplier:
dd 2
fVisionRangeMultiplier:
dd (float)4.0

aobLight:
aobLight_r:
jmp lblLight
nop
lblLightReturn:

aobShadow:
aobShadow_r:
jmp lblShadow
nop
lblShadowReturn:

[DISABLE]
aobLight_r:
//Alt: mov [eax+00000090],ecx
db 89 88 90 00 00 00

aobShadow_r:
//Alt: mov [eax+00000094],ecx
db 89 88 94 00 00 00

unregistersymbol(aobLight_r)
unregistersymbol(aobShadow_r)

unregistersymbol(bLightHackEnabled)
unregistersymbol(iMinLight)
unregistersymbol(bShadowHackEnabled)
unregistersymbol(iMinShadow)
unregistersymbol(bGodModeEnabled)
unregistersymbol(sCompData)
unregistersymbol(iDamageMultiplier)
unregistersymbol(iSpeedReductionSpeedDivisor)
unregistersymbol(iSpeedReductionTimeMultiplier)
unregistersymbol(fBeamSizeMultiplier)
unregistersymbol(fFireRateMultiplier)
unregistersymbol(iAttackMultiplier)
unregistersymbol(fVisionRangeMultiplier)

dealloc(newmem)

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>76</ID>
          <Description>"bLightHackEnabled"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bLightHackEnabled</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>77</ID>
              <Description>"iMinLight"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinLight</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>78</ID>
          <Description>"bShadowHackEnabled"</Description>
          <Color>008000</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>bShadowHackEnabled</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>79</ID>
              <Description>"iMinShadow"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iMinShadow</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>90</ID>
          <Description>"Sacrifice: no damage script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobSacrifice,D9 45 0C DE C9 D9 5D BC)

label(aobSacrifice_r)
label(lblSacrifice)
label(lblSacrificeReturn)

registersymbol(aobSacrifice_r)

newmem:

lblSacrifice:
push eax
xor eax,eax
mov [ebp+0C],eax
pop eax
fld dword ptr [ebp+0C]  // Original code
fmulp st(1),st(0)       // Original code
jmp lblSacrificeReturn

aobSacrifice:
aobSacrifice_r:
jmp lblSacrifice
lblSacrificeReturn:

[DISABLE]
aobSacrifice_r:
//Alt: fld dword ptr [ebp+0C]
//Alt: fmulp st(1),st(0)
db D9 45 0C DE C9

unregistersymbol(aobSacrifice_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>89</ID>
          <Description>"Care: fully heals script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobScan(aobCare,03 45 0C 89 83 E4 00 00 00)

label(aobCare_r)
label(lblCare)
label(lblCareReturn)
registersymbol(aobCare_r)

newmem:

lblCare:
push eax
xor eax,eax
mov eax,[ebp+0C]
imul eax,(int)100
mov [ebp+0C],eax
pop eax
add eax,[ebp+0C]        // Original code
mov [ebx+000000E4],eax  // Original code
jmp lblCareReturn

aobCare:
aobCare_r:
jmp lblCare
nop
nop
nop
nop
lblCareReturn:

[DISABLE]
aobCare_r:
//Alt: add eax,[ebp+0C]
//Alt: mov [ebx+000000E4],eax
db 03 45 0C 89 83 E4 00 00 00

unregistersymbol(aobCare_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>98</ID>
          <Description>"----- Companion-specific script data -----"</Description>
          <Color>80000008</Color>
          <VariableType>String</VariableType>
          <Length>5</Length>
          <Unicode>0</Unicode>
          <ZeroTerminate>1</ZeroTerminate>
          <Address>sCompData</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>99</ID>
              <Description>"iDamageMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iDamageMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>101</ID>
              <Description>"iSpeedReductionTimeMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iSpeedReductionTimeMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>100</ID>
              <Description>"iSpeedReductionSpeedDivisor"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iSpeedReductionSpeedDivisor</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>102</ID>
              <Description>"fBeamSizeMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fBeamSizeMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>103</ID>
              <Description>"fFireRateMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fFireRateMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>104</ID>
              <Description>"iAttackMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>iAttackMultiplier</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>105</ID>
              <Description>"fVisionRangeMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fVisionRangeMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>88</ID>
          <Description>"All companions: God mode script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobHealth,89 86 E4 00 00 00 85 C0 7F)

label(aobHealth_r)
label(lblHealth)
label(lblHealthSkip)
label(lblHealthReturn)

registersymbol(aobHealth_r)

newmem:

lblHealth:
cmp dword ptr [bGodModeEnabled],1
jne short lblHealthSkip
pushad
mov ebx,[esi+14]
mov ecx,[esi+138]
mov eax,[ebx+ecx*4+10]
mov [ebp+0c],eax
popad
lblHealthSkip:
mov eax,[ebp+0c]
mov [esi+000000E4],eax  // Original code
jmp lblHealthReturn

aobHealth:
aobHealth_r:
jmp lblHealth
nop
lblHealthReturn:

[DISABLE]
aobHealth_r:
//Alt: mov [esi+000000E4],eax
db 89 86 E4 00 00 00

unregistersymbol(aobHealth_r)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>75</ID>
              <Description>"bGodModeEnabled"</Description>
              <Color>008000</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>bGodModeEnabled</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>92</ID>
          <Description>"All companions: Vision range script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobVisionRange,D9 80 8C 01 00 00 D9 5D FC)
label(aobVisionRange_r)
label(lblVisionRange)
label(lblVisionRangeReturn)
registersymbol(aobVisionRange_r)

newmem:
lblVisionRange:
fld dword ptr [eax+0000018C]  // Original code
fmul dword ptr [fVisionRangeMultiplier]
jmp lblVisionRangeReturn

aobVisionRange:
aobVisionRange_r:
jmp lblVisionRange
nop
lblVisionRangeReturn:

[DISABLE]
aobVisionRange_r:
//Alt: fld dword ptr [eax+0000018C]
db D9 80 8C 01 00 00

unregistersymbol(aobVisionRange_r)

dealloc(newmem)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>87</ID>
              <Description>"fVisionRangeMultiplier"</Description>
              <Color>FF0000</Color>
              <VariableType>Float</VariableType>
              <Address>fVisionRangeMultiplier</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>91</ID>
          <Description>"Shooter script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)

aobscan(aobShooterDamage,8B 87 F8 01 00 00 39 36)
aobscan(aobShooterRate,D9 80 FC 01 00 00 DD 5D E8)

label(aobShooterDamage_r)
label(lblShooterDamage)
label(lblShooterDamageReturn)
registersymbol(aobShooterDamage_r)

label(aobShooterRate_r)
label(lblShooterRate)
label(lblShooterRateReturn)
registersymbol(aobShooterRate_r)

newmem:

lblShooterDamage:
mov eax,[edi+000001F8]  // Original code
imul eax,(int)10
jmp lblShooterDamageReturn

lblShooterRate:
fld dword ptr [eax+000001FC]  // Original code
fdiv dword ptr [fFireRateMultiplier]
jmp lblShooterRateReturn

aobShooterDamage:
aobShooterDamage_r:
jmp lblShooterDamage
nop
lblShooterDamageReturn:

aobShooterRate:
aobShooterRate_r:
jmp lblShooterRate
nop
lblShooterRateReturn:

[DISABLE]
aobShooterDamage_r:
//Alt: mov eax,[edi+000001F8]
db 8B 87 F8 01 00 00

aobShooterRate_r:
//Alt: fld dword ptr [eax+000001FC]
db D9 80 FC 01 00 00

unregistersymbol(aobShooterDamage_r)
unregistersymbol(aobShooterRate_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>93</ID>
          <Description>"Puncher script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobPuncherDamage,8B 87 EC 01 00 00 50)
aobscan(aobPuncherDamageS,8B 87 EC 01 00 00 83 EC 08)
aobscan(aobPuncherSpeedReduction,D9 87 F4 01 00 00 8B 87 F0 01 00 00)
aobscan(aobPuncherRate,D9 80 F8 01 00 00 DD 5D E8)
aobscan(aobPuncherSpeedReductionTime,8B 87 F0 01 00 00 50)

label(aobPuncherDamage_r)
label(lblPuncherDamage)
label(lblPuncherDamageReturn)
registersymbol(aobPuncherDamage_r)

label(aobPuncherDamageS_r)
label(lblPuncherDamageS)
label(lblPuncherDamageSReturn)
registersymbol(aobPuncherDamageS_r)

label(aobPuncherSpeedReduction_r)
label(lblPuncherSpeedReduction)
label(lblPuncherSpeedReductionReturn)
registersymbol(aobPuncherSpeedReduction_r)

label(aobPuncherRate_r)
label(lblPuncherRate)
label(lblPuncherRateReturn)
registersymbol(aobPuncherRate_r)

label(aobPuncherSpeedReductionTime_r)
label(lblPuncherSpeedReductionTime)
label(lblPuncherSpeedReductionTimeReturn)
registersymbol(aobPuncherSpeedReductionTime_r)

newmem:

lblPuncherDamage:
mov eax,[edi+000001EC]  // Original code
imul eax,[iDamageMultiplier]
jmp lblPuncherDamageReturn

lblPuncherDamageS:
mov eax,[edi+000001EC]  // Original code
imul eax,[iDamageMultiplier]
jmp lblPuncherDamageSReturn

lblPuncherSpeedReduction:
fld dword ptr [edi+000001F4]  // Original code
mov eax,[edi+000001F0]        // Original code
imul eax,[iSpeedReductionSpeedDivisor]
jmp lblPuncherSpeedReductionReturn

lblPuncherRate:
fld dword ptr [eax+000001F8]  // Original code
fdiv dword ptr [fFireRateMultiplier]
jmp lblPuncherRateReturn

lblPuncherSpeedReductionTime:
mov eax,[edi+000001F0]  // Original code
imul eax,[iSpeedReductionTimeMultiplier]
jmp lblPuncherSpeedReductionTimeReturn

aobPuncherDamage:
aobPuncherDamage_r:
jmp lblPuncherDamage
nop
lblPuncherDamageReturn:

aobPuncherDamageS:
aobPuncherDamageS_r:
jmp lblPuncherDamageS
nop
lblPuncherDamageSReturn:

aobPuncherSpeedReduction:
aobPuncherSpeedReduction_r:
jmp lblPuncherSpeedReduction
nop
nop
nop
nop
nop
nop
nop
lblPuncherSpeedReductionReturn:

aobPuncherRate:
aobPuncherRate_r:
jmp lblPuncherRate
nop
lblPuncherRateReturn:

aobPuncherSpeedReductionTime:
aobPuncherSpeedReductionTime_r:
jmp lblPuncherSpeedReductionTime
nop
lblPuncherSpeedReductionTimeReturn:

[DISABLE]
aobPuncherDamage_r:
//Alt: mov eax,[edi+000001EC]
db 8B 87 EC 01 00 00

aobPuncherDamageS_r:
//Alt: mov eax,[edi+000001EC]
db 8B 87 EC 01 00 00

aobPuncherSpeedReduction_r:
//Alt: fld dword ptr [edi+000001F4]
//Alt: mov eax,[edi+000001F0]
db D9 87 F4 01 00 00 8B 87 F0 01 00 00

aobPuncherRate_r:
//Alt: fld dword ptr [eax+000001F8]
db D9 80 F8 01 00 00

aobPuncherSpeedReductionTime_r:
//Alt: mov eax,[edi+000001F0]
db 8B 87 F0 01 00 00

unregistersymbol(aobPuncherDamage_r)
unregistersymbol(aobPuncherDamageS_r)
unregistersymbol(aobPuncherSpeedReduction_r)
unregistersymbol(aobPuncherRate_r)
unregistersymbol(aobPuncherSpeedReductionTime_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"Projector script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobProjectorDamage,8B 80 DC 01 00 00 50)
aobscan(aobProjectorSize,D9 80 D8 01 00 00 05)

label(aobProjectorDamage_r)
label(lblProjectorDamage)
label(lblProjectorDamageReturn)
registersymbol(aobProjectorDamage_r)

label(aobProjectorSize_r)
label(lblProjectorSize)
label(lblProjectorSizeReturn)
registersymbol(aobProjectorSize_r)

newmem:

lblProjectorDamage:
mov eax,[eax+000001DC]  // Original code
imul eax,[iDamageMultiplier]
jmp lblProjectorDamageReturn

lblProjectorSize:
fld dword ptr [eax+000001D8]  // Original code
fmul dword ptr [fBeamSizeMultiplier]
jmp lblProjectorSizeReturn

aobProjectorDamage:
aobProjectorDamage_r:
jmp lblProjectorDamage
nop
lblProjectorDamageReturn:

aobProjectorSize:
aobProjectorSize_r:
jmp lblProjectorSize
nop
lblProjectorSizeReturn:

[DISABLE]
aobProjectorDamage_r:
//Alt: mov eax,[eax+000001DC]
db 8B 80 DC 01 00 00

aobProjectorSize_r:
//Alt: fld dword ptr [eax+000001D8]
db D9 80 D8 01 00 00

unregistersymbol(aobProjectorDamage_r)
unregistersymbol(aobProjectorSize_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>97</ID>
          <Description>"Rainbow script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobScanRainbowBounce,8B 97 F8 01 00 00 83)
aobscan(aobRainbowDamage,8D 4C 91 10 8B 09 83 EC 08 51 50 8B 00)

label(aobRainbowDamage_r)
label(lblRainbowDamage)
label(lblRainbowDamageReturn)
registersymbol(aobRainbowDamage_r)

label(aobScanRainbowBounce_r)
label(lblScanRainbowBounce)
label(lblScanRainbowBounceReturn)
registersymbol(aobScanRainbowBounce_r)

newmem:

lblRainbowDamage:
lea ecx,[ecx+edx*4+10]  // Original code
mov ecx,[ecx]           // Original code
imul ecx,[iDamageMultiplier]
jmp lblRainbowDamageReturn

lblScanRainbowBounce:
mov edx,[edi+000001F8]  // Orignal code
imul edx,[iAttackMultiplier]
jmp lblScanRainbowBounceReturn

aobRainbowDamage:
aobRainbowDamage_r:
jmp lblRainbowDamage
nop
lblRainbowDamageReturn:

aobScanRainbowBounce:
aobScanRainbowBounce_r:
jmp lblScanRainbowBounce
nop
lblScanRainbowBounceReturn:

[DISABLE]
aobRainbowDamage_r:
//Alt: lea ecx,[ecx+edx*4+10]
//Alt: mov ecx,[ecx]
db 8D 4C 91 10 8B 09

aobScanRainbowBounce_r:
//Alt: mov edx,[edi+000001F8]
db 8B 97 F8 01 00 00

unregistersymbol(aobRainbowDamage_r)
unregistersymbol(aobScanRainbowBounce_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>106</ID>
          <Description>"Mole script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobMoleShadows,8D 44 88 10 8B 00 39 85)
aobscan(aobMoleDigTime,D9 80 04 02 00 00 DD 5D 80)

label(aobMoleShadows_r)
label(lblMoleShadows)
label(lblMoleShadowsReturn)
registersymbol(aobMoleShadows_r)

label(aobMoleDigTime_r)
label(lblMoleDigTime)
label(lblMoleDigTimeReturn)
registersymbol(aobMoleDigTime_r)

newmem:

lblMoleShadows:
lea eax,[eax+ecx*4+10]  // Original code
mov eax,[eax]           // Original code
imul eax,[iAttackMultiplier]
jmp lblMoleShadowsReturn

lblMoleDigTime:
fld dword ptr [eax+00000204]  // Original code
fdiv dword ptr [fFireRateMultiplier]
jmp lblMoleDigTimeReturn

aobMoleShadows:
aobMoleShadows_r:
jmp lblMoleShadows
nop
lblMoleShadowsReturn:

aobMoleDigTime:
aobMoleDigTime_r:
jmp lblMoleDigTime
nop
lblMoleDigTimeReturn:

[DISABLE]

aobMoleShadows_r:
//Alt: lea eax,[eax+ecx*4+10]
//Alt: mov eax,[eax]
db 8D 44 88 10 8B 00

aobMoleDigTime_r:
//Alt: fld dword ptr [eax+00000204]
db D9 80 04 02 00 00

unregistersymbol(aobMoleShadows_r)
unregistersymbol(aobMoleDigTime_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>107</ID>
          <Description>"Doc script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobDocHeal,8B 97 C4 01 00 00 83)

label(aobDocHeal_r)
label(lblDocHeal)
label(lblDocHealReturn)
registersymbol(aobDocHeal_r)

newmem:

lblDocHeal:
mov edx,[edi+000001C4]  // Original code
imul edx,[iDamageMultiplier]
jmp lblDocHealReturn

aobDocHeal:
aobDocHeal_r:
jmp lblDocHeal
nop
lblDocHealReturn:

[DISABLE]
aobDocHeal_r:
//Alt: mov edx,[edi+000001C4]
db 8B 97 C4 01 00 00

unregistersymbol(aobDocHeal_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>121</ID>
          <Description>"Pulsor script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobPulsorDamage1,8B 88 CC 01 00 00 51)
aobscan(aobPulsorDamage1S,8B 80 CC 01 00 00 83 EC 08 50)
aobscan(aobPulsorDamage2,8B 88 D0 01 00 00 51)
aobscan(aobPulsorDamage2S,8B 80 D0 01 00 00 83 EC 08 50 57)
aobscan(aobPulsorRate,8B 89 38 01 00 00 39 48 0C 0F 86 ?? ?? ?? ?? 8D 44 88 10 D9 00 DD)

label(aobPulsorDamage1_r)
label(lblPulsorDamage1)
label(lblPulsorDamage1Return)
registersymbol(aobPulsorDamage1_r)

label(aobPulsorDamage1S_r)
label(lblPulsorDamage1S)
label(lblPulsorDamage1SReturn)
registersymbol(aobPulsorDamage1S_r)

label(aobPulsorDamage2_r)
label(lblPulsorDamage2)
label(lblPulsorDamage2Return)
registersymbol(aobPulsorDamage2_r)

label(aobPulsorDamage2S_r)
label(lblPulsorDamage2S)
label(lblPulsorDamage2SReturn)
registersymbol(aobPulsorDamage2S_r)

label(aobPulsorRate_r)
label(lblPulsorRate)
label(lblPulsorRateReturn)
registersymbol(aobPulsorRate_r)

newmem:

lblPulsorDamage1:
mov ecx,[eax+000001CC]  // Original code
imul ecx,[iDamageMultiplier]
jmp lblPulsorDamage1Return

lblPulsorDamage1S:
mov eax,[eax+000001CC]  // Original code
imul eax,[iDamageMultiplier]
jmp lblPulsorDamage1SReturn

lblPulsorDamage2:
mov ecx,[eax+000001D0]  // Original code
imul ecx,[iDamageMultiplier]
jmp lblPulsorDamage2Return

lblPulsorDamage2S:
mov eax,[eax+000001D0] // Original code
imul eax,[iDamageMultiplier]
jmp lblPulsorDamage2SReturn

lblPulsorRate:
fld dword ptr [eax]      // Original code
fdiv dword ptr [fFireRateMultiplier]
fstp qword ptr [ebp-18]  // Original code
jmp lblPulsorRateReturn

aobPulsorDamage1:
aobPulsorDamage1_r:
jmp lblPulsorDamage1
nop
lblPulsorDamage1Return:

aobPulsorDamage1S:
aobPulsorDamage1S_r:
jmp lblPulsorDamage1S
nop
lblPulsorDamage1SReturn:

aobPulsorDamage2:
aobPulsorDamage2_r:
jmp lblPulsorDamage2
nop
lblPulsorDamage2Return:

aobPulsorDamage2S:
aobPulsorDamage2S_r:
jmp lblPulsorDamage2S
nop
lblPulsorDamage2SReturn:

aobPulsorRate+13:
aobPulsorRate_r:
jmp lblPulsorRate
lblPulsorRateReturn:

[DISABLE]
aobPulsorDamage1_r:
//Alt: mov ecx,[eax+000001CC]
db 8B 88 CC 01 00 00

aobPulsorDamage1S_r:
//Alt: mov eax,[eax+000001CC]
db 8B 80 CC 01 00 00

aobPulsorDamage2_r:
//Alt: mov ecx,[eax+000001D0]
db 8B 88 D0 01 00 00

aobPulsorDamage2S_r:
//Alt: mov eax,[eax+000001D0]
db 8B 80 D0 01 00 00

aobPulsorRate_r:
//Alt: fld dword ptr [eax]
//Alt: fstp qword ptr [ebp-18]
db D9 00 DD 5D E8

unregistersymbol(aobPulsorDamage1_r)
unregistersymbol(aobPulsorDamage1S_r)
unregistersymbol(aobPulsorDamage2_r)
unregistersymbol(aobPulsorDamage2S_r)
unregistersymbol(aobPulsorRate_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>120</ID>
          <Description>"Greedy script"</Description>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
aobscan(aobGreedyRate,D9 80 50 02 00 00 DD 5D E8)

label(aobGreedyRate_r)
label(lblGreedyRate)
label(lblGreedyRateReturn)
registersymbol(aobGreedyRate_r)

newmem:

lblGreedyRate:
fld dword ptr [eax+00000250]  // Original code
fdiv dword ptr [fFireRateMultiplier]
jmp lblGreedyRateReturn

aobGreedyRate:
aobGreedyRate_r:
jmp lblGreedyRate
nop
lblGreedyRateReturn:

[DISABLE]
aobGreedyRate_r:
fld dword ptr [eax+00000250]
//Alt: db D9 80 50 02 00 00

unregistersymbol(aobGreedyRate_r)

dealloc(newmem)

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
