<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="18">
  <CheatEntries>
    <CheatEntry>
      <ID>317</ID>
      <Description>"Fallout 1 &lt;based GoG ver&gt;: (main,click 1st)"</Description>
      <LastState Activated="1"/>
      <Color>80000008</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
local pid = getOpenedProcessID()
if pid == nil or pid == 0 then openProcess('falloutw.exe') end
{$asm}

[ENABLE]
globalalloc(_FO1,$1000)
_FO1+fc0:
mov  eax,_FO1
mov  [eax],eax
ret
createThread(_FO1+fc0)
[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>316</ID>
          <Description>"+2 attrib pt on return bonus (overshadow by stat mul)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//globalalloc(_FO1,1024)
aobscan(_bonus,01 35 ?? ?? ?? ?? 8b ?? ?? 08 89)
_FO1+F80:
readmem(_bonus,6)
readmem(_bonus,6)
push  eax
push  edi
mov   eax,_FO1+F42
mov   eax,[eax]
mov   edi,_FO1
mov   [edi+10],eax
pop   edi
pop   eax
jmp _bonus+6

_bonus:
jmp _FO1+F80
nop
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>318</ID>
              <Description>"free attrib (show when return some attrib point)"</Description>
              <LastState Value="??" Activated="0" RealAddress="00000000"/>
              <Color>80000008</Color>
              <VariableType>4 Bytes</VariableType>
              <Address>_FO1</Address>
              <Offsets>
                <Offset>0</Offset>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>319</ID>
          <Description>"allow exit with bonus left (needed, always on)"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//globalalloc(_FO1,1024)
//                 00 01 02 03 04 05 06 07 08
aobscan(_skillexit,83 3d ?? ?? ?? 00 00 0f ?? ?? ?? 00 00 b8 ?? ?? ?? ?? bb 8e 00 00 00)
_skillexit+07:
db 90 e9

aobscan(_attptexit,8b ?? ?? ?? ?? 00 85 ?? 0f ?? ?? 00 00 00 b8 ?? ?? ?? ?? bb 76 00 00 00)
_attptexit+08:
db 90 e9

aobscan(_rangeexit,e8 ?? ?? ?? ?? 85 c0 0f 84 ?? ?? 00 00 b8 ?? ?? ?? ?? bb 9d 00 00 00)
_rangeexit+07:
db 90 e9

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>323</ID>
          <Description>"effective stat multiplier (not saving,off when create char)"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//globalalloc(_FO1,1024)
//              00 01 02 03 04 05 06 07 08 09 0a 0b
aobscan(_uplmt, 8b 83 ?? ?? ?? 00 39 c6 7e 02 89) // remove upper limit (by set to 10000)
_uplmt:
db 90 b8 10 27 00 00
aobscan(_base,  ba 00 00 00 01 be ?? ?? ?? 00 b8 ?? ?? ?? 00 31 c9)
aobscan(_attmul,8b 44 98 04 83 c4 08 5b c3)//mov eax,[eax+ebx*4+04]
_FO1+F00:
label(_skip)
mov  [_FO1+0c],eax
mov  eax,_base
mov  eax,[eax+0b]
add  eax,20
mov  [_FO1+08],eax
mov  eax,[_FO1+0c]
mov  eax,[eax+ebx*4+04] // original code 1/2
cmp  ebx,7              // only for main 7 attribs, don't know if ok to remove this constraint (eg. set 7 to 7f )
jg   _skip
cmp  edx,[_FO1+08]      // main char addr, ... not known other way to identify ally/friend (if any)
jne  _skip
shl  eax,4              // x16, change to 3 for x8, 2 for x4 etc.
nop
nop
nop
nop
nop
nop  // reserve for modifying code
_skip:
add  esp,08            // original code 2/2
jmp  _attmul+07
_attmul:
jmp  _FO1+F00
nop
nop


{

main char addr - 507640, search ...
--&gt; 00 00 00 00 (1st attrb) (2nd attrb) (3rd attrb)
--&gt; (4th attrb) (5th attrb) (6th attrb) (7th attrb)

}

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>325</ID>
          <Description>"xp mul"</Description>
          <LastState Activated="1"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//globalalloc(_FO1,1024)
//             00 01 02 03 04 05 06 07 08
aobscan(_xpmul,0f af d0 bb 64 00 00 00 89 d0 c1)//imul edx,eax;mov ebx,064 -&gt; ebx = divisor
_xpmul:
add edx,eax
nop
_xpmul+04:
db 01        // should be 6x up...


[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>324</ID>
      <Description>"IGNORE"</Description>
      <LastState Value="" Activated="0" RealAddress="00000000"/>
      <Color>80000008</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>322</ID>
          <Description>"stat multiplier (for logging char address)"</Description>
          <LastState Activated="0"/>
          <Color>80000008</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//globalalloc(_FO1,1024)
//              00 01 02 03 04 05 06 07 08
aobscan(_uplmt, 8b 83 ?? ?? ?? 00 39 c6 7e 02 89)
_uplmt:
db 90 b8 10 27 00 00
aobscan(_attmul,8b 44 98 04 83 c4 08 5b c3)//mov eax,[eax+ebx*4+04]
_FO1+F00:
mov  [_FO1+20],eax
mov  [_FO1+24],ebx
mov  [_FO1+28],ecx
mov  [_FO1+2c],edx

mov  ecx,40
label(_next)
label(_done)
_next:
dec  ecx
mov  edx,_FO1
lea  edx,[edx+ecx*4+100]
xor  ebx,ebx
cmp  ebx,[edx]
jne  @f
mov  [edx],eax
jmp  _done
@@:
cmp  eax,[edx]
je   _done
test ecx,ecx
jne  _next
_done:
mov  [_FO1+0fc],eax
mov  edx,[_FO1+2c]
mov  ecx,[_FO1+28]
mov  ebx,[_FO1+24]
mov  eax,[_FO1+20]
label(_skip)
mov  eax,[eax+ebx*4+04]
cmp  ebx,7
jg   _skip
cmp  edx,507640
jne  _skip
shl  eax,4
nop
nop
nop
nop
nop
nop  // reserve for modifying code
_skip:
add  esp,08
jmp  _attmul+07
_attmul:
jmp  _FO1+F00
nop
nop

[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_FO1</Name>
      <Address>07820000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
